id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/root/html604/TProofPlayerLocal.html:4794,Availability,error,error,4794," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayer::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tTProofPlayer::Finalize(TQueryResult* qr); virtual Long64_tTProofPlayer::Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const;",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:4878,Availability,error,error,4878,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayer::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tTProofPlayer::Finalize(TQueryResult* qr); virtual Long64_tTProofPlayer::Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusTProofPlayer::GetExitStatus() const; virtua",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:17844,Availability,error,error,17844,"s! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. Bool_tfIsClient. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Long64_t Process(TSelector* selector, Long64_t nentries = -1, Option_t* option = """"); Process the specified TSelector object 'nentries' times.; Used to test the PROOF interator mechanism for cycle-driven selectors in a; local session.; The return value is -1 in case of error and TSelector::GetStatus(); in case of success. Long64_t Process(const char* selector, Long64_t nentries = -1, Option_t* option = """"); Process the specified TSelector file 'nentries' times.; Used to test the PROOF interator mechanism for cycle-driven selectors in a; local session.; Process specified TDSet on PROOF worker with TSelector object; The return value is -1 in case of error and TSelector::GetStatus(); in case of success. void SetupFeedback(). public: // fix for broken compilers so TCleanup can call StopFeedback(). Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0). Bool_t IsClient() const; { return kFALSE; }. TProofPlayerLocal(Bool_t client = kTRUE); { }. virtual ~TProofPlayerLocal(); { }. Long64_t Process(const char* selector, Long64_t nentries = -1, Option_t* option = """"). » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:18230,Availability,error,error,18230,"used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. Bool_tfIsClient. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Long64_t Process(TSelector* selector, Long64_t nentries = -1, Option_t* option = """"); Process the specified TSelector object 'nentries' times.; Used to test the PROOF interator mechanism for cycle-driven selectors in a; local session.; The return value is -1 in case of error and TSelector::GetStatus(); in case of success. Long64_t Process(const char* selector, Long64_t nentries = -1, Option_t* option = """"); Process the specified TSelector file 'nentries' times.; Used to test the PROOF interator mechanism for cycle-driven selectors in a; local session.; Process specified TDSet on PROOF worker with TSelector object; The return value is -1 in case of error and TSelector::GetStatus(); in case of success. void SetupFeedback(). public: // fix for broken compilers so TCleanup can call StopFeedback(). Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0). Bool_t IsClient() const; { return kFALSE; }. TProofPlayerLocal(Bool_t client = kTRUE); { }. virtual ~TProofPlayerLocal(); { }. Long64_t Process(const char* selector, Long64_t nentries = -1, Option_t* option = """"). » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-03 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:12069,Deployability,Update,UpdateAutoBin,12069,"ject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayer::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayer::SetMerging(Bool_t = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayer::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayer::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayer::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerLocal(Bool_t client = kTRUE); TProofPlayerLocal(const TProofPlayerLocal&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:12224,Deployability,Update,UpdateProgressInfo,12224,"ject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayer::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayer::SetMerging(Bool_t = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayer::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayer::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayer::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerLocal(Bool_t client = kTRUE); TProofPlayerLocal(const TProofPlayerLocal&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:8071,Integrability,Message,Message,8071,"QObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsClient() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tTProofPlayer::JoinProcess(TList* workers); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofPlayerLocal&operator=(const TProofPlayerLocal&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; Long64_tProcess(const char* selector, Long64_t nentries = -1, Option_t* option = """"); Long64_tProcess(TSelector* selector, Long64_t nentries = -1, Option_t* option = """"); virtual ",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:7352,Modifiability,Inherit,InheritsFrom,7352,"bjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TObject*TProofPlayer::GetOutput(const char* name) const; virtual TList*TProofPlayer::GetOutputList() const; virtual TVirtualPacketizer*TProofPlayer::GetPacketizer() const; virtual TProofProgressStatus*TProofPlayer::GetProgressStatus() const; virtual TQueryResult*TProofPlayer::GetQueryResult(const char* ref); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual voidTProofPlayer::HandleGetTreeHeader(TMessage* mess); virtual voidTProofPlayer::HandleRecvHisto(TMessage* mess); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsClient() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tTProofPlayer::JoinProcess(TList* workers); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator ",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:7418,Modifiability,Inherit,InheritsFrom,7418,"ctStat(); virtual Option_t*TObject::GetOption() const; virtual TObject*TProofPlayer::GetOutput(const char* name) const; virtual TList*TProofPlayer::GetOutputList() const; virtual TVirtualPacketizer*TProofPlayer::GetPacketizer() const; virtual TProofProgressStatus*TProofPlayer::GetProgressStatus() const; virtual TQueryResult*TProofPlayer::GetQueryResult(const char* ref); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual voidTProofPlayer::HandleGetTreeHeader(TMessage* mess); virtual voidTProofPlayer::HandleRecvHisto(TMessage* mess); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsClient() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tTProofPlayer::JoinProcess(TList* workers); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* v",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:17497,Modifiability,Inherit,Inheritance,17497,"64_tTProofPlayer::fReadCallsRun! Read calls in this run; Long_tTProofPlayer::fSaveMemThresholdThreshold for saving output to file; Bool_tTProofPlayer::fSavePartialResultsWhether to save the partial results; Bool_tTProofPlayer::fSaveResultsPerPacketWhether to save partial results after each packet; TStatus*TProofPlayer::fSelStatus! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. Bool_tfIsClient. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Long64_t Process(TSelector* selector, Long64_t nentries = -1, Option_t* option = """"); Process the specified TSelector object 'nentries' times.; Used to test the PROOF interator mechanism for cycle-driven selectors in a; local session.; The return value is -1 in case of error and TSelector::GetStatus(); in case of success. Long64_t Process(const char* selector, Long64_t nentries = -1, Option_t* option = """"); Process the specified TSelector file 'nentries' times.; Used to test the PROOF interator mechanism for cycle-driven selectors in a; local session.; Process specified TDSet on PROOF worker with TSelector object; The return value is -1 in case of error and TSelector::GetStatus(); in case of success. void SetupFeedback(). public: // fix for broken compilers so TCleanup can call StopFeedback(). Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0). Bool_t IsClient() co",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:17510,Modifiability,Inherit,Inherited,17510,"64_tTProofPlayer::fReadCallsRun! Read calls in this run; Long_tTProofPlayer::fSaveMemThresholdThreshold for saving output to file; Bool_tTProofPlayer::fSavePartialResultsWhether to save the partial results; Bool_tTProofPlayer::fSaveResultsPerPacketWhether to save partial results after each packet; TStatus*TProofPlayer::fSelStatus! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. Bool_tfIsClient. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Long64_t Process(TSelector* selector, Long64_t nentries = -1, Option_t* option = """"); Process the specified TSelector object 'nentries' times.; Used to test the PROOF interator mechanism for cycle-driven selectors in a; local session.; The return value is -1 in case of error and TSelector::GetStatus(); in case of success. Long64_t Process(const char* selector, Long64_t nentries = -1, Option_t* option = """"); Process the specified TSelector file 'nentries' times.; Used to test the PROOF interator mechanism for cycle-driven selectors in a; local session.; Process specified TDSet on PROOF worker with TSelector object; The return value is -1 in case of error and TSelector::GetStatus(); in case of success. void SetupFeedback(). public: // fix for broken compilers so TCleanup can call StopFeedback(). Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0). Bool_t IsClient() co",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:11377,Safety,abort,abort,11377,"ProofPlayer::SavePartialResults(Bool_t queryend = kFALSE, Bool_t force = kFALSE); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayer::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayer::SetMerging(Bool_t = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayer::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayer::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayer::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerLocal(Bool_t client = kTRUE); TProofPlayerLocal(const TProofPlayerLocal&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObje",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:11399,Safety,timeout,timeout,11399,"lResults(Bool_t queryend = kFALSE, Bool_t force = kFALSE); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayer::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayer::SetMerging(Bool_t = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayer::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayer::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayer::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerLocal(Bool_t client = kTRUE); TProofPlayerLocal(const TProofPlayerLocal&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* n",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:11559,Safety,abort,abort,11559,"ject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayer::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayer::SetMerging(Bool_t = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayer::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayer::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayer::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerLocal(Bool_t client = kTRUE); TProofPlayerLocal(const TProofPlayerLocal&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:11572,Safety,timeout,timeout,11572,"ject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayer::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayer::SetMerging(Bool_t = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayer::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayer::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayer::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerLocal(Bool_t client = kTRUE); TProofPlayerLocal(const TProofPlayerLocal&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:7154,Security,Hash,Hash,7154,"s() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual TDSetElement*TProofPlayer::GetNextPacket(TSlave* slave, TMessage* r); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TObject*TProofPlayer::GetOutput(const char* name) const; virtual TList*TProofPlayer::GetOutputList() const; virtual TVirtualPacketizer*TProofPlayer::GetPacketizer() const; virtual TProofProgressStatus*TProofPlayer::GetProgressStatus() const; virtual TQueryResult*TProofPlayer::GetQueryResult(const char* ref); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual voidTProofPlayer::HandleGetTreeHeader(TMessage* mess); virtual voidTProofPlayer::HandleRecvHisto(TMessage* mess); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsClient() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tTProofPlayer::JoinProcess(TList* workers); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObjec",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:11891,Testability,Test,TestBit,11891,"ject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayer::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayer::SetMerging(Bool_t = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayer::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayer::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayer::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerLocal(Bool_t client = kTRUE); TProofPlayerLocal(const TProofPlayerLocal&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:11930,Testability,Test,TestBits,11930,"ject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayer::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayer::SetMerging(Bool_t = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayer::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayer::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayer::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerLocal(Bool_t client = kTRUE); TProofPlayerLocal(const TProofPlayerLocal&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:12575,Testability,Assert,AssertSelector,12575,"uble_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. Int_tTProofPlayer::AssertSelector(const char* selector_file); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Bool_tTProofPlayer::CheckMemUsage(Long64_t& mfreq, Bool_t& w80r, Bool_t& w80v, TString& wmsg); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Int_tTProofPlayer::DrawCanvas(TObject* obj); virtual void*TProofPlayer::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); voidTProofPlayer::MapOutputListToDataMembers() const; virtual voidTProofPlayer::MergeOutput(Bool_t savememvalues = kFALSE); virtual voidSetupFeedback(); virtual voidStopFeedback(). Data Members; public:. static TVirtualProofPlayer::EExitStatusTVirtualProofPlayer::kAborted; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TProofPlayer::EStatusBitsTProofPlayer::kDispatchOneEvent; static TVirtualProofPlayer::EExitStatusTVirtualProofPlayer::kFinished; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObjec",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:17726,Testability,test,test,17726,"erPacketWhether to save partial results after each packet; TStatus*TProofPlayer::fSelStatus! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. Bool_tfIsClient. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Long64_t Process(TSelector* selector, Long64_t nentries = -1, Option_t* option = """"); Process the specified TSelector object 'nentries' times.; Used to test the PROOF interator mechanism for cycle-driven selectors in a; local session.; The return value is -1 in case of error and TSelector::GetStatus(); in case of success. Long64_t Process(const char* selector, Long64_t nentries = -1, Option_t* option = """"); Process the specified TSelector file 'nentries' times.; Used to test the PROOF interator mechanism for cycle-driven selectors in a; local session.; Process specified TDSet on PROOF worker with TSelector object; The return value is -1 in case of error and TSelector::GetStatus(); in case of success. void SetupFeedback(). public: // fix for broken compilers so TCleanup can call StopFeedback(). Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0). Bool_t IsClient() const; { return kFALSE; }. TProofPlayerLocal(Bool_t client = kTRUE); { }. virtual ~TProofPlayerLocal(); { }. Long64_t Process(const char* selector, Long64_t nentries = -1, Option_t* option = """"). » Author: Maarten Ballintijn 07/01/02 » Copyr",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:18049,Testability,test,test,18049,"used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. Bool_tfIsClient. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Long64_t Process(TSelector* selector, Long64_t nentries = -1, Option_t* option = """"); Process the specified TSelector object 'nentries' times.; Used to test the PROOF interator mechanism for cycle-driven selectors in a; local session.; The return value is -1 in case of error and TSelector::GetStatus(); in case of success. Long64_t Process(const char* selector, Long64_t nentries = -1, Option_t* option = """"); Process the specified TSelector file 'nentries' times.; Used to test the PROOF interator mechanism for cycle-driven selectors in a; local session.; Process specified TDSet on PROOF worker with TSelector object; The return value is -1 in case of error and TSelector::GetStatus(); in case of success. void SetupFeedback(). public: // fix for broken compilers so TCleanup can call StopFeedback(). Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0). Bool_t IsClient() const; { return kFALSE; }. TProofPlayerLocal(Bool_t client = kTRUE); { }. virtual ~TProofPlayerLocal(); { }. Long64_t Process(const char* selector, Long64_t nentries = -1, Option_t* option = """"). » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-03 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:1772,Usability,Clear,Clear,1772," virtual~TProofPlayerLocal(); voidTObject::AbstractMethod(const char* method) const; virtual voidTProofPlayer::AddEventsProcessed(Long64_t ev); virtual voidTProofPlayer::AddInput(TObject* inp); virtual voidTProofPlayer::AddOutput(TList* out); virtual Int_tTProofPlayer::AddOutputObject(TObject* obj); virtual voidTProofPlayer::AddQueryResult(TQueryResult* q); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTProofPlayer::ClearInput(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const T",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:1821,Usability,Clear,ClearInput,1821," virtual~TProofPlayerLocal(); voidTObject::AbstractMethod(const char* method) const; virtual voidTProofPlayer::AddEventsProcessed(Long64_t ev); virtual voidTProofPlayer::AddInput(TObject* inp); virtual voidTProofPlayer::AddOutput(TList* out); virtual Int_tTProofPlayer::AddOutputObject(TObject* obj); virtual voidTProofPlayer::AddQueryResult(TQueryResult* q); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTProofPlayer::ClearInput(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const T",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:5058,Usability,Feedback,Feedback,5058,"al, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayer::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tTProofPlayer::Finalize(TQueryResult* qr); virtual Long64_tTProofPlayer::Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusTProofPlayer::GetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual TList*TProofPlayer::GetInputList() const; virtual Int_tTProofPlayer::GetLearnEntries(); TList*TQObject::GetListOfClassSignals() con",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerLocal.html:5106,Usability,FeedBack,FeedBackCanvas,5106,"ignal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayer::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tTProofPlayer::Finalize(TQueryResult* qr); virtual Long64_tTProofPlayer::Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusTProofPlayer::GetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual TList*TProofPlayer::GetInputList() const; virtual Int_tTProofPlayer::GetLearnEntries(); TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; v",MatchSource.WIKI,root/html604/TProofPlayerLocal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerLocal.html
https://root.cern/root/html604/TProofPlayerRemote.html:4627,Availability,Error,Error,4627,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFeedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tFinalize(TQueryResult* qr); virtual Long64_tFinalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static ",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:4756,Availability,error,error,4756," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFeedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tFinalize(TQueryResult* qr); virtual Long64_tFinalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusT",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:4840,Availability,error,error,4840,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFeedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tFinalize(TQueryResult* qr); virtual Long64_tFinalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusTProofPlayer::GetExitStatus() const; virtual const char*TObject::GetIconName() const;",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:18763,Availability,failure,failure,18763,"; TStatus*TProofPlayer::fSelStatus! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; TStringfSelectorFileNameCurrent Selector's name, set by Process(); Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetMerging(Bool_t on = kTRUE); Switch on/off merge timer. ~TProofPlayerRemote(); Destructor. Int_t InitPacketizer(TDSet* dset, Long64_t nentries, Long64_t first, const char* defpackunit, const char* defpackdata); Init the packetizer; Return 0 on success (fPacketizer is correctly initialized), -1 on failure. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF.; This method is called on client and on the PROOF master.; The return value is -1 in case of an error and TSelector::GetStatus() in; in case of success. Long64_t Process(TDSet* set, TSelector* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF.; This method is called on client and on the PROOF master.; The return value is -1 in case of an error and TSelector::GetStatus() in; in case of success. Bool_t JoinProcess(TList* workers); Prepares the given list of new workers to join a progressing process.; Returns kTRUE on success, kFALSE otherwise. Bool_t MergeOutputFiles(); Merge output in files. void SetSelectorDataMembersFromOutputList(); Set the selector's data ",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:19026,Availability,error,error,19026,"ed with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetMerging(Bool_t on = kTRUE); Switch on/off merge timer. ~TProofPlayerRemote(); Destructor. Int_t InitPacketizer(TDSet* dset, Long64_t nentries, Long64_t first, const char* defpackunit, const char* defpackdata); Init the packetizer; Return 0 on success (fPacketizer is correctly initialized), -1 on failure. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF.; This method is called on client and on the PROOF master.; The return value is -1 in case of an error and TSelector::GetStatus() in; in case of success. Long64_t Process(TDSet* set, TSelector* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF.; This method is called on client and on the PROOF master.; The return value is -1 in case of an error and TSelector::GetStatus() in; in case of success. Bool_t JoinProcess(TList* workers); Prepares the given list of new workers to join a progressing process.; Returns kTRUE on success, kFALSE otherwise. Bool_t MergeOutputFiles(); Merge output in files. void SetSelectorDataMembersFromOutputList(); Set the selector's data members:; find the mapping of data members to otuput list entries in the output list; and apply it. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE). Long64_t Finalize(TQueryResult* qr); Finalize the results of a query already processed. Bool_t SendSelector(const char* selector_file); Send the selector file(s) to master or worker nodes. void MergeOutput(Bo",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:19336,Availability,error,error,19336,"pt on drawing actions. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetMerging(Bool_t on = kTRUE); Switch on/off merge timer. ~TProofPlayerRemote(); Destructor. Int_t InitPacketizer(TDSet* dset, Long64_t nentries, Long64_t first, const char* defpackunit, const char* defpackdata); Init the packetizer; Return 0 on success (fPacketizer is correctly initialized), -1 on failure. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF.; This method is called on client and on the PROOF master.; The return value is -1 in case of an error and TSelector::GetStatus() in; in case of success. Long64_t Process(TDSet* set, TSelector* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF.; This method is called on client and on the PROOF master.; The return value is -1 in case of an error and TSelector::GetStatus() in; in case of success. Bool_t JoinProcess(TList* workers); Prepares the given list of new workers to join a progressing process.; Returns kTRUE on success, kFALSE otherwise. Bool_t MergeOutputFiles(); Merge output in files. void SetSelectorDataMembersFromOutputList(); Set the selector's data members:; find the mapping of data members to otuput list entries in the output list; and apply it. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE). Long64_t Finalize(TQueryResult* qr); Finalize the results of a query already processed. Bool_t SendSelector(const char* selector_file); Send the selector file(s) to master or worker nodes. void MergeOutput(Bool_t savememvalues = kFALSE); Merge objects in output the lists. void Progress(Long64_t total, Long64_t processed); Progress signal. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Progress signal. void Progress(TProofPr",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:20763,Availability,error,error,20763,"FALSE). Long64_t Finalize(TQueryResult* qr); Finalize the results of a query already processed. Bool_t SendSelector(const char* selector_file); Send the selector file(s) to master or worker nodes. void MergeOutput(Bool_t savememvalues = kFALSE); Merge objects in output the lists. void Progress(Long64_t total, Long64_t processed); Progress signal. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Progress signal. void Progress(TProofProgressInfo* pi); Progress signal. void Feedback(TList* objs); Feedback signal. void StopProcess(Bool_t abort, Int_t timeout = -1); Stop process after this event. Int_t AddOutputObject(TObject* obj); Incorporate the received object 'obj' into the output list fOutput.; The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' optimizing the memory; consumption.; Returns -1 in case of error, 1 if the object has been merged into another; one (so that its ownership has not been taken and can be deleted), and 0; otherwise. void RedirectOutput(Bool_t on = kTRUE); Control output redirection to TProof::fLogFileW. void AddOutput(TList* out); Incorporate the content of the received output list 'out' into the final; output list fOutput. The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' limiting the memory; consumption. void NotifyMemory(TObject* obj); Printout the memory record after merging object 'obj'; This record is used by the memory monitor. void SetLastMergingMsg(TObject* obj); Set the message to be notified in case of exception. Int_t Incorporate(TObject* obj, TList* out, Bool_t& merged); Incorporate object 'newobj' in the list 'outlist'.; The object is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object n",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:21994,Availability,error,error,21994,"gFileW. void AddOutput(TList* out); Incorporate the content of the received output list 'out' into the final; output list fOutput. The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' limiting the memory; consumption. void NotifyMemory(TObject* obj); Printout the memory record after merging object 'obj'; This record is used by the memory monitor. void SetLastMergingMsg(TObject* obj); Set the message to be notified in case of exception. Int_t Incorporate(TObject* obj, TList* out, Bool_t& merged); Incorporate object 'newobj' in the list 'outlist'.; The object is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj, Bool_t& merged); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges; on the axis (i.e. if they can be just Add-ed for merging). void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. void SetupFeedback(); Setup reporting of feedback objects. void StopFeedback(); Stop reporting of feedback objects. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet for specified slave. Bool_t IsClient() const; Is the player running on the client?. Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t fi",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:23056,Availability,error,error,23056,"ct * HandleHistogram(TObject* obj, Bool_t& merged); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges; on the axis (i.e. if they can be just Add-ed for merging). void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. void SetupFeedback(); Setup reporting of feedback objects. void StopFeedback(); Stop reporting of feedback objects. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet for specified slave. Bool_t IsClient() const; Is the player running on the client?. Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (support for TChain::Draw()).; Returns -1 in case of error or number of selected events in case of success. void SetInitTime(); Set init time. TVirtualPacketizer * GetPacketizer() const; { return 0; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProof * GetProof() const; { return fProof; }. TProofPlayerRemote(TProof* proof = 0); { fProgressStatus = new TProofProgressStatus(); }. TProofPlayerRemote(const TProofPlayerRemote& ); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-03 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:11824,Deployability,Update,UpdateAutoBin,11824,"TObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidSetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidSetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStoreFeedback(TObject* slave, TList* out); virtual voidStoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerRemote(TProof* proof = 0); TProofPlayerRemote(const TProofPlayerRemote&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:11979,Deployability,Update,UpdateProgressInfo,11979,"TObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidSetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidSetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStoreFeedback(TObject* slave, TList* out); virtual voidStoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerRemote(TProof* proof = 0); TProofPlayerRemote(const TProofPlayerRemote&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:20727,Energy Efficiency,consumption,consumption,20727,"ta members to otuput list entries in the output list; and apply it. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE). Long64_t Finalize(TQueryResult* qr); Finalize the results of a query already processed. Bool_t SendSelector(const char* selector_file); Send the selector file(s) to master or worker nodes. void MergeOutput(Bool_t savememvalues = kFALSE); Merge objects in output the lists. void Progress(Long64_t total, Long64_t processed); Progress signal. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Progress signal. void Progress(TProofProgressInfo* pi); Progress signal. void Feedback(TList* objs); Feedback signal. void StopProcess(Bool_t abort, Int_t timeout = -1); Stop process after this event. Int_t AddOutputObject(TObject* obj); Incorporate the received object 'obj' into the output list fOutput.; The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' optimizing the memory; consumption.; Returns -1 in case of error, 1 if the object has been merged into another; one (so that its ownership has not been taken and can be deleted), and 0; otherwise. void RedirectOutput(Bool_t on = kTRUE); Control output redirection to TProof::fLogFileW. void AddOutput(TList* out); Incorporate the content of the received output list 'out' into the final; output list fOutput. The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' limiting the memory; consumption. void NotifyMemory(TObject* obj); Printout the memory record after merging object 'obj'; This record is used by the memory monitor. void SetLastMergingMsg(TObject* obj); Set the message to be notified in case of exception. Int_t Incorporate(TObject* obj, TList* out, Bool_t& merged); Incorporate object 'newobj' in the list 'outlist'.; The object is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is ",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:21225,Energy Efficiency,consumption,consumption,21225,"al, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Progress signal. void Progress(TProofProgressInfo* pi); Progress signal. void Feedback(TList* objs); Feedback signal. void StopProcess(Bool_t abort, Int_t timeout = -1); Stop process after this event. Int_t AddOutputObject(TObject* obj); Incorporate the received object 'obj' into the output list fOutput.; The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' optimizing the memory; consumption.; Returns -1 in case of error, 1 if the object has been merged into another; one (so that its ownership has not been taken and can be deleted), and 0; otherwise. void RedirectOutput(Bool_t on = kTRUE); Control output redirection to TProof::fLogFileW. void AddOutput(TList* out); Incorporate the content of the received output list 'out' into the final; output list fOutput. The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' limiting the memory; consumption. void NotifyMemory(TObject* obj); Printout the memory record after merging object 'obj'; This record is used by the memory monitor. void SetLastMergingMsg(TObject* obj); Set the message to be notified in case of exception. Int_t Incorporate(TObject* obj, TList* out, Bool_t& merged); Incorporate object 'newobj' in the list 'outlist'.; The object is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj, Bool_t& merged); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histog",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:21360,Energy Efficiency,monitor,monitor,21360,"i); Progress signal. void Progress(TProofProgressInfo* pi); Progress signal. void Feedback(TList* objs); Feedback signal. void StopProcess(Bool_t abort, Int_t timeout = -1); Stop process after this event. Int_t AddOutputObject(TObject* obj); Incorporate the received object 'obj' into the output list fOutput.; The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' optimizing the memory; consumption.; Returns -1 in case of error, 1 if the object has been merged into another; one (so that its ownership has not been taken and can be deleted), and 0; otherwise. void RedirectOutput(Bool_t on = kTRUE); Control output redirection to TProof::fLogFileW. void AddOutput(TList* out); Incorporate the content of the received output list 'out' into the final; output list fOutput. The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' limiting the memory; consumption. void NotifyMemory(TObject* obj); Printout the memory record after merging object 'obj'; This record is used by the memory monitor. void SetLastMergingMsg(TObject* obj); Set the message to be notified in case of exception. Int_t Incorporate(TObject* obj, TList* out, Bool_t& merged); Incorporate object 'newobj' in the list 'outlist'.; The object is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj, Bool_t& merged); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges; on the axis (i.e. if they can be just Add-ed for merging",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:8108,Integrability,Message,Message,8108,"ignal_name, const char* slot_name = 0); Bool_tHistoSameAxis(TH1* h0, TH1* h1); Int_tIncorporate(TObject* obj, TList* out, Bool_t& merged); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsClient() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tJoinProcess(TList* workers); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMergeOutput(Bool_t savememvalues = kFALSE); virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofPlayerRemote&operator=(const TProofPlayerRemote&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Long64_tProcess(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); virtual Long64_tProcess(TDSet* set, TSelector*",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:16919,Integrability,message,message,16919,"ListOfSignals! list of signals from this object; Int_tTProofPlayer::fMaxDrawQueriesMax number of Draw queries kept; Bool_tfMergeFilesis True when merging output files centrally is needed; TStopwatch*fMergeSTWMerging stop watch; Bool_tfMergeTH1OneByOneIf kTRUE forces TH1 merge one-by-one [kTRUE]; Int_tfNumMergersNumber of submergers; THashList*TProofPlayer::fOutputlist with output objects; TFile*TProofPlayer::fOutputFileTFile object attached to fOutputFilePath; TStringTProofPlayer::fOutputFilePathPath to file with (partial) results of the query; TList*fOutputListsresults returned by slaves; TVirtualPacketizer*fPacketizertransform TDSet into packets for slaves; TQueryResult*TProofPlayer::fPreviousQueryPrevious instance of TQueryResult processed; TH1*fProcPackets!Histogram with packets being processed (owned by TPerfStats); TStopwatch*TProofPlayer::fProcTimePacket proc time; TTimer*TProofPlayer::fProcTimeTimerNotifies reaching of allowed max proc time; TMessage*fProcessMessageProcess message to replay when adding new workers dynamically; Long64_tTProofPlayer::fProcessedRun! Events processed in this run; TProofProgressStatus*TProofPlayer::fProgressStatusthe progress status object;; TProof*fProoflink to associated PROOF session; TQueryResult*TProofPlayer::fQueryInstance of TQueryResult currently processed; TList*TProofPlayer::fQueryResultsList of TQueryResult; Long64_tTProofPlayer::fReadBytesRun! Bytes read in this run; Long64_tTProofPlayer::fReadCallsRun! Read calls in this run; Long_tTProofPlayer::fSaveMemThresholdThreshold for saving output to file; Bool_tTProofPlayer::fSavePartialResultsWhether to save the partial results; Bool_tTProofPlayer::fSaveResultsPerPacketWhether to save partial results after each packet; TStatus*TProofPlayer::fSelStatus! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; TStringfSelectorFileNameCurrent Selector's name, set by Process(); Bool_",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:21415,Integrability,message,message,21415,"ck signal. void StopProcess(Bool_t abort, Int_t timeout = -1); Stop process after this event. Int_t AddOutputObject(TObject* obj); Incorporate the received object 'obj' into the output list fOutput.; The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' optimizing the memory; consumption.; Returns -1 in case of error, 1 if the object has been merged into another; one (so that its ownership has not been taken and can be deleted), and 0; otherwise. void RedirectOutput(Bool_t on = kTRUE); Control output redirection to TProof::fLogFileW. void AddOutput(TList* out); Incorporate the content of the received output list 'out' into the final; output list fOutput. The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' limiting the memory; consumption. void NotifyMemory(TObject* obj); Printout the memory record after merging object 'obj'; This record is used by the memory monitor. void SetLastMergingMsg(TObject* obj); Set the message to be notified in case of exception. Int_t Incorporate(TObject* obj, TList* out, Bool_t& merged); Incorporate object 'newobj' in the list 'outlist'.; The object is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj, Bool_t& merged); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges; on the axis (i.e. if they can be just Add-ed for merging). void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. voi",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:7347,Modifiability,Inherit,InheritsFrom,7347,"n_t*TObject::GetOption() const; virtual TObject*TProofPlayer::GetOutput(const char* name) const; virtual TList*TProofPlayer::GetOutputList() const; virtual TVirtualPacketizer*GetPacketizer() const; virtual TProofProgressStatus*TProofPlayer::GetProgressStatus() const; virtual TQueryResult*TProofPlayer::GetQueryResult(const char* ref); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual voidTProofPlayer::HandleGetTreeHeader(TMessage* mess); TObject*HandleHistogram(TObject* obj, Bool_t& merged); virtual voidTProofPlayer::HandleRecvHisto(TMessage* mess); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); Bool_tHistoSameAxis(TH1* h0, TH1* h1); Int_tIncorporate(TObject* obj, TList* out, Bool_t& merged); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsClient() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tJoinProcess(TList* workers); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMergeOutput(Bool_t savememvalues = kFALSE); virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* remo",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:7413,Modifiability,Inherit,InheritsFrom,7413,"utput(const char* name) const; virtual TList*TProofPlayer::GetOutputList() const; virtual TVirtualPacketizer*GetPacketizer() const; virtual TProofProgressStatus*TProofPlayer::GetProgressStatus() const; virtual TQueryResult*TProofPlayer::GetQueryResult(const char* ref); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual voidTProofPlayer::HandleGetTreeHeader(TMessage* mess); TObject*HandleHistogram(TObject* obj, Bool_t& merged); virtual voidTProofPlayer::HandleRecvHisto(TMessage* mess); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); Bool_tHistoSameAxis(TH1* h0, TH1* h1); Int_tIncorporate(TObject* obj, TList* out, Bool_t& merged); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsClient() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tJoinProcess(TList* workers); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMergeOutput(Bool_t savememvalues = kFALSE); virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidT",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:18381,Modifiability,Inherit,Inheritance,18381,"lls in this run; Long_tTProofPlayer::fSaveMemThresholdThreshold for saving output to file; Bool_tTProofPlayer::fSavePartialResultsWhether to save the partial results; Bool_tTProofPlayer::fSaveResultsPerPacketWhether to save partial results after each packet; TStatus*TProofPlayer::fSelStatus! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; TStringfSelectorFileNameCurrent Selector's name, set by Process(); Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetMerging(Bool_t on = kTRUE); Switch on/off merge timer. ~TProofPlayerRemote(); Destructor. Int_t InitPacketizer(TDSet* dset, Long64_t nentries, Long64_t first, const char* defpackunit, const char* defpackdata); Init the packetizer; Return 0 on success (fPacketizer is correctly initialized), -1 on failure. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF.; This method is called on client and on the PROOF master.; The return value is -1 in case of an error and TSelector::GetStatus() in; in case of success. Long64_t Process(TDSet* set, TSelector* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF.; This method is called on client and on the PROOF master.; The return value is -1 in case of an error and TSelector::GetStatus() in; in case of success. Bool_t JoinPro",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:18394,Modifiability,Inherit,Inherited,18394,"lls in this run; Long_tTProofPlayer::fSaveMemThresholdThreshold for saving output to file; Bool_tTProofPlayer::fSavePartialResultsWhether to save the partial results; Bool_tTProofPlayer::fSaveResultsPerPacketWhether to save partial results after each packet; TStatus*TProofPlayer::fSelStatus! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; TStringfSelectorFileNameCurrent Selector's name, set by Process(); Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetMerging(Bool_t on = kTRUE); Switch on/off merge timer. ~TProofPlayerRemote(); Destructor. Int_t InitPacketizer(TDSet* dset, Long64_t nentries, Long64_t first, const char* defpackunit, const char* defpackdata); Init the packetizer; Return 0 on success (fPacketizer is correctly initialized), -1 on failure. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF.; This method is called on client and on the PROOF master.; The return value is -1 in case of an error and TSelector::GetStatus() in; in case of success. Long64_t Process(TDSet* set, TSelector* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF.; This method is called on client and on the PROOF master.; The return value is -1 in case of an error and TSelector::GetStatus() in; in case of success. Bool_t JoinPro",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:20704,Performance,optimiz,optimizing,20704,"ta members to otuput list entries in the output list; and apply it. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE). Long64_t Finalize(TQueryResult* qr); Finalize the results of a query already processed. Bool_t SendSelector(const char* selector_file); Send the selector file(s) to master or worker nodes. void MergeOutput(Bool_t savememvalues = kFALSE); Merge objects in output the lists. void Progress(Long64_t total, Long64_t processed); Progress signal. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Progress signal. void Progress(TProofProgressInfo* pi); Progress signal. void Feedback(TList* objs); Feedback signal. void StopProcess(Bool_t abort, Int_t timeout = -1); Stop process after this event. Int_t AddOutputObject(TObject* obj); Incorporate the received object 'obj' into the output list fOutput.; The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' optimizing the memory; consumption.; Returns -1 in case of error, 1 if the object has been merged into another; one (so that its ownership has not been taken and can be deleted), and 0; otherwise. void RedirectOutput(Bool_t on = kTRUE); Control output redirection to TProof::fLogFileW. void AddOutput(TList* out); Incorporate the content of the received output list 'out' into the final; output list fOutput. The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' limiting the memory; consumption. void NotifyMemory(TObject* obj); Printout the memory record after merging object 'obj'; This record is used by the memory monitor. void SetLastMergingMsg(TObject* obj); Set the message to be notified in case of exception. Int_t Incorporate(TObject* obj, TList* out, Bool_t& merged); Incorporate object 'newobj' in the list 'outlist'.; The object is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is ",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:11175,Safety,abort,abort,11175,"onstMENU ; virtual Int_tTProofPlayer::SavePartialResults(Bool_t queryend = kFALSE, Bool_t force = kFALSE); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidSetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidSetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStoreFeedback(TObject* slave, TList* out); virtual voidStoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerRemote(TProof* proof = 0); TProofPlayerRemote(const TProofPlayerRemote&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t optio",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:11197,Safety,timeout,timeout,11197,"tTProofPlayer::SavePartialResults(Bool_t queryend = kFALSE, Bool_t force = kFALSE); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidSetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidSetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStoreFeedback(TObject* slave, TList* out); virtual voidStoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerRemote(TProof* proof = 0); TProofPlayerRemote(const TProofPlayerRemote&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = ",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:11343,Safety,abort,abort,11343,"TObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidSetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidSetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStoreFeedback(TObject* slave, TList* out); virtual voidStoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerRemote(TProof* proof = 0); TProofPlayerRemote(const TProofPlayerRemote&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:11356,Safety,timeout,timeout,11356,"TObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidSetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidSetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStoreFeedback(TObject* slave, TList* out); virtual voidStoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerRemote(TProof* proof = 0); TProofPlayerRemote(const TProofPlayerRemote&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:20448,Safety,abort,abort,20448,"ers to join a progressing process.; Returns kTRUE on success, kFALSE otherwise. Bool_t MergeOutputFiles(); Merge output in files. void SetSelectorDataMembersFromOutputList(); Set the selector's data members:; find the mapping of data members to otuput list entries in the output list; and apply it. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE). Long64_t Finalize(TQueryResult* qr); Finalize the results of a query already processed. Bool_t SendSelector(const char* selector_file); Send the selector file(s) to master or worker nodes. void MergeOutput(Bool_t savememvalues = kFALSE); Merge objects in output the lists. void Progress(Long64_t total, Long64_t processed); Progress signal. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Progress signal. void Progress(TProofProgressInfo* pi); Progress signal. void Feedback(TList* objs); Feedback signal. void StopProcess(Bool_t abort, Int_t timeout = -1); Stop process after this event. Int_t AddOutputObject(TObject* obj); Incorporate the received object 'obj' into the output list fOutput.; The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' optimizing the memory; consumption.; Returns -1 in case of error, 1 if the object has been merged into another; one (so that its ownership has not been taken and can be deleted), and 0; otherwise. void RedirectOutput(Bool_t on = kTRUE); Control output redirection to TProof::fLogFileW. void AddOutput(TList* out); Incorporate the content of the received output list 'out' into the final; output list fOutput. The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' limiting the memory; consumption. void NotifyMemory(TObject* obj); Printout the memory record after merging object 'obj'; This record is used by the memory monitor. void SetLastMergingMsg(TObject* obj); Set the message to be notified in case of exception. Int_t",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:20461,Safety,timeout,timeout,20461,"ers to join a progressing process.; Returns kTRUE on success, kFALSE otherwise. Bool_t MergeOutputFiles(); Merge output in files. void SetSelectorDataMembersFromOutputList(); Set the selector's data members:; find the mapping of data members to otuput list entries in the output list; and apply it. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE). Long64_t Finalize(TQueryResult* qr); Finalize the results of a query already processed. Bool_t SendSelector(const char* selector_file); Send the selector file(s) to master or worker nodes. void MergeOutput(Bool_t savememvalues = kFALSE); Merge objects in output the lists. void Progress(Long64_t total, Long64_t processed); Progress signal. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Progress signal. void Progress(TProofProgressInfo* pi); Progress signal. void Feedback(TList* objs); Feedback signal. void StopProcess(Bool_t abort, Int_t timeout = -1); Stop process after this event. Int_t AddOutputObject(TObject* obj); Incorporate the received object 'obj' into the output list fOutput.; The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' optimizing the memory; consumption.; Returns -1 in case of error, 1 if the object has been merged into another; one (so that its ownership has not been taken and can be deleted), and 0; otherwise. void RedirectOutput(Bool_t on = kTRUE); Control output redirection to TProof::fLogFileW. void AddOutput(TList* out); Incorporate the content of the received output list 'out' into the final; output list fOutput. The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' limiting the memory; consumption. void NotifyMemory(TObject* obj); Printout the memory record after merging object 'obj'; This record is used by the memory monitor. void SetLastMergingMsg(TObject* obj); Set the message to be notified in case of exception. Int_t",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:7050,Security,Hash,Hash,7050,"fPlayer::GetListOfResults() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual TDSetElement*GetNextPacket(TSlave* slave, TMessage* r); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TObject*TProofPlayer::GetOutput(const char* name) const; virtual TList*TProofPlayer::GetOutputList() const; virtual TVirtualPacketizer*GetPacketizer() const; virtual TProofProgressStatus*TProofPlayer::GetProgressStatus() const; virtual TQueryResult*TProofPlayer::GetQueryResult(const char* ref); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual voidTProofPlayer::HandleGetTreeHeader(TMessage* mess); TObject*HandleHistogram(TObject* obj, Bool_t& merged); virtual voidTProofPlayer::HandleRecvHisto(TMessage* mess); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); Bool_tHistoSameAxis(TH1* h0, TH1* h1); Int_tIncorporate(TObject* obj, TList* out, Bool_t& merged); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsClient() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tJoinProcess(TList* workers); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMergeOutput",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:11647,Testability,Test,TestBit,11647,"TObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidSetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidSetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStoreFeedback(TObject* slave, TList* out); virtual voidStoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerRemote(TProof* proof = 0); TProofPlayerRemote(const TProofPlayerRemote&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:11686,Testability,Test,TestBits,11686,"TObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidSetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidSetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStoreFeedback(TObject* slave, TList* out); virtual voidStoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerRemote(TProof* proof = 0); TProofPlayerRemote(const TProofPlayerRemote&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:12330,Testability,Assert,AssertSelector,12330,"eCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. Int_tTProofPlayer::AssertSelector(const char* selector_file); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Bool_tTProofPlayer::CheckMemUsage(Long64_t& mfreq, Bool_t& w80r, Bool_t& w80v, TString& wmsg); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Int_tTProofPlayer::DrawCanvas(TObject* obj); TProof*GetProof() const; virtual void*TProofPlayer::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual Bool_tHandleTimer(TTimer* timer); Int_tInitPacketizer(TDSet* dset, Long64_t nentries, Long64_t first, const char* defpackunit, const char* defpackdata); voidTObject::MakeZombie(); voidTProofPlayer::MapOutputListToDataMembers() const; TList*MergeFeedback(); Bool_tMergeOutputFiles(); voidNotifyMemory(TObject* obj); virtual Bool_tSendSelector(const char* selector_file); voidSetLastMergingMsg(TObject* obj); voidSetSelectorDataMembersFromOutputList(); virtual voidSetupFeedback(); virtual voidStopFeedback(). Data Members; public:. static TVirtualProofPlayer::EExitStatusTVirtualProofPlayer::kAborted; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TProofPlayer::EStatusBitsTProofPlayer::kDi",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:1748,Usability,Clear,Clear,1748," virtual~TProofPlayerRemote(); voidTObject::AbstractMethod(const char* method) const; virtual voidTProofPlayer::AddEventsProcessed(Long64_t ev); virtual voidTProofPlayer::AddInput(TObject* inp); virtual voidAddOutput(TList* out); virtual Int_tAddOutputObject(TObject* obj); virtual voidTProofPlayer::AddQueryResult(TQueryResult* q); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTProofPlayer::ClearInput(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:1797,Usability,Clear,ClearInput,1797," virtual~TProofPlayerRemote(); voidTObject::AbstractMethod(const char* method) const; virtual voidTProofPlayer::AddEventsProcessed(Long64_t ev); virtual voidTProofPlayer::AddInput(TObject* inp); virtual voidAddOutput(TList* out); virtual Int_tAddOutputObject(TObject* obj); virtual voidTProofPlayer::AddQueryResult(TQueryResult* q); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTProofPlayer::ClearInput(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:5054,Usability,FeedBack,FeedBackCanvas,5054,"(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFeedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tFinalize(TQueryResult* qr); virtual Long64_tFinalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusTProofPlayer::GetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual TList*TProofPlayer::GetInputList() const; virtual Int_tTProofPlayer::GetLearnEntries(); TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; virtual TList*TProofPlayer::G",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:20384,Usability,Feedback,Feedback,20384,"JoinProcess(TList* workers); Prepares the given list of new workers to join a progressing process.; Returns kTRUE on success, kFALSE otherwise. Bool_t MergeOutputFiles(); Merge output in files. void SetSelectorDataMembersFromOutputList(); Set the selector's data members:; find the mapping of data members to otuput list entries in the output list; and apply it. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE). Long64_t Finalize(TQueryResult* qr); Finalize the results of a query already processed. Bool_t SendSelector(const char* selector_file); Send the selector file(s) to master or worker nodes. void MergeOutput(Bool_t savememvalues = kFALSE); Merge objects in output the lists. void Progress(Long64_t total, Long64_t processed); Progress signal. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Progress signal. void Progress(TProofProgressInfo* pi); Progress signal. void Feedback(TList* objs); Feedback signal. void StopProcess(Bool_t abort, Int_t timeout = -1); Stop process after this event. Int_t AddOutputObject(TObject* obj); Incorporate the received object 'obj' into the output list fOutput.; The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' optimizing the memory; consumption.; Returns -1 in case of error, 1 if the object has been merged into another; one (so that its ownership has not been taken and can be deleted), and 0; otherwise. void RedirectOutput(Bool_t on = kTRUE); Control output redirection to TProof::fLogFileW. void AddOutput(TList* out); Incorporate the content of the received output list 'out' into the final; output list fOutput. The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' limiting the memory; consumption. void NotifyMemory(TObject* obj); Printout the memory record after merging object 'obj'; This record is used by the memory monitor. void SetLastMergingMsg(TObject* ",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:20407,Usability,Feedback,Feedback,20407,"JoinProcess(TList* workers); Prepares the given list of new workers to join a progressing process.; Returns kTRUE on success, kFALSE otherwise. Bool_t MergeOutputFiles(); Merge output in files. void SetSelectorDataMembersFromOutputList(); Set the selector's data members:; find the mapping of data members to otuput list entries in the output list; and apply it. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE). Long64_t Finalize(TQueryResult* qr); Finalize the results of a query already processed. Bool_t SendSelector(const char* selector_file); Send the selector file(s) to master or worker nodes. void MergeOutput(Bool_t savememvalues = kFALSE); Merge objects in output the lists. void Progress(Long64_t total, Long64_t processed); Progress signal. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Progress signal. void Progress(TProofProgressInfo* pi); Progress signal. void Feedback(TList* objs); Feedback signal. void StopProcess(Bool_t abort, Int_t timeout = -1); Stop process after this event. Int_t AddOutputObject(TObject* obj); Incorporate the received object 'obj' into the output list fOutput.; The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' optimizing the memory; consumption.; Returns -1 in case of error, 1 if the object has been merged into another; one (so that its ownership has not been taken and can be deleted), and 0; otherwise. void RedirectOutput(Bool_t on = kTRUE); Control output redirection to TProof::fLogFileW. void AddOutput(TList* out); Incorporate the content of the received output list 'out' into the final; output list fOutput. The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' limiting the memory; consumption. void NotifyMemory(TObject* obj); Printout the memory record after merging object 'obj'; This record is used by the memory monitor. void SetLastMergingMsg(TObject* ",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:22395,Usability,feedback,feedback,22395,"ngMsg(TObject* obj); Set the message to be notified in case of exception. Int_t Incorporate(TObject* obj, TList* out, Bool_t& merged); Incorporate object 'newobj' in the list 'outlist'.; The object is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj, Bool_t& merged); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges; on the axis (i.e. if they can be just Add-ed for merging). void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. void SetupFeedback(); Setup reporting of feedback objects. void StopFeedback(); Stop reporting of feedback objects. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet for specified slave. Bool_t IsClient() const; Is the player running on the client?. Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (support for TChain::Draw()).; Returns -1 in case of error or number of selected events in case of success. void SetInitTime(); Set init time. TVirtualPacketizer * GetPacketizer() const; { return 0; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:22465,Usability,feedback,feedback,22465,". Int_t Incorporate(TObject* obj, TList* out, Bool_t& merged); Incorporate object 'newobj' in the list 'outlist'.; The object is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj, Bool_t& merged); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges; on the axis (i.e. if they can be just Add-ed for merging). void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. void SetupFeedback(); Setup reporting of feedback objects. void StopFeedback(); Stop reporting of feedback objects. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet for specified slave. Bool_t IsClient() const; Is the player running on the client?. Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (support for TChain::Draw()).; Returns -1 in case of error or number of selected events in case of success. void SetInitTime(); Set init time. TVirtualPacketizer * GetPacketizer() const; { return 0; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Flo",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:22549,Usability,feedback,feedback,22549,"ect 'newobj' in the list 'outlist'.; The object is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj, Bool_t& merged); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges; on the axis (i.e. if they can be just Add-ed for merging). void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. void SetupFeedback(); Setup reporting of feedback objects. void StopFeedback(); Stop reporting of feedback objects. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet for specified slave. Bool_t IsClient() const; Is the player running on the client?. Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (support for TChain::Draw()).; Returns -1 in case of error or number of selected events in case of success. void SetInitTime(); Set init time. TVirtualPacketizer * GetPacketizer() const; { return 0; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProof * GetProof() const; { return fProof; }. TP",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:22606,Usability,feedback,feedback,22606,"with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj, Bool_t& merged); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges; on the axis (i.e. if they can be just Add-ed for merging). void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. void SetupFeedback(); Setup reporting of feedback objects. void StopFeedback(); Stop reporting of feedback objects. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet for specified slave. Bool_t IsClient() const; Is the player running on the client?. Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (support for TChain::Draw()).; Returns -1 in case of error or number of selected events in case of success. void SetInitTime(); Set init time. TVirtualPacketizer * GetPacketizer() const; { return 0; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProof * GetProof() const; { return fProof; }. TProofPlayerRemote(TProof* proof = 0); { fProgressStatus = n",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerRemote.html:22664,Usability,feedback,feedback,22664,"or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj, Bool_t& merged); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges; on the axis (i.e. if they can be just Add-ed for merging). void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. void SetupFeedback(); Setup reporting of feedback objects. void StopFeedback(); Stop reporting of feedback objects. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet for specified slave. Bool_t IsClient() const; Is the player running on the client?. Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (support for TChain::Draw()).; Returns -1 in case of error or number of selected events in case of success. void SetInitTime(); Set init time. TVirtualPacketizer * GetPacketizer() const; { return 0; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProof * GetProof() const; { return fProof; }. TProofPlayerRemote(TProof* proof = 0); { fProgressStatus = new TProofProgressStatus(); }. TProofPlayerRemote(const TProofP",MatchSource.WIKI,root/html604/TProofPlayerRemote.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html
https://root.cern/root/html604/TProofPlayerSlave.html:4665,Availability,Error,Error,4665,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayer::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tTProofPlayer::Finalize(TQueryResult* qr); virtual Long64_tTProofPlayer::Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:4794,Availability,error,error,4794," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayer::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tTProofPlayer::Finalize(TQueryResult* qr); virtual Long64_tTProofPlayer::Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const;",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:4878,Availability,error,error,4878,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayer::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tTProofPlayer::Finalize(TQueryResult* qr); virtual Long64_tTProofPlayer::Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusTProofPlayer::GetExitStatus() const; virtua",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:11963,Deployability,Update,UpdateAutoBin,11963,"etBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayer::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayer::SetMerging(Bool_t = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayer::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayer::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayer::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerSlave(TSocket* socket = 0); TProofPlayerSlave(TProofPlayerSlave&&); TProofPlayerSlave(const TProofPlayerSlave&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:12118,Deployability,Update,UpdateProgressInfo,12118,"etBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayer::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayer::SetMerging(Bool_t = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayer::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayer::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayer::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerSlave(TSocket* socket = 0); TProofPlayerSlave(TProofPlayerSlave&&); TProofPlayerSlave(const TProofPlayerSlave&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:17451,Deployability,update,updates,17451,"::fProcessedRun! Events processed in this run; TProofProgressStatus*TProofPlayer::fProgressStatusthe progress status object;; TQueryResult*TProofPlayer::fQueryInstance of TQueryResult currently processed; TList*TProofPlayer::fQueryResultsList of TQueryResult; Long64_tTProofPlayer::fReadBytesRun! Bytes read in this run; Long64_tTProofPlayer::fReadCallsRun! Read calls in this run; Long_tTProofPlayer::fSaveMemThresholdThreshold for saving output to file; Bool_tTProofPlayer::fSavePartialResultsWhether to save the partial results; Bool_tTProofPlayer::fSaveResultsPerPacketWhether to save partial results after each packet; TStatus*TProofPlayer::fSelStatus! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. TList*fFeedbackList of objects to send updates of; TSocket*fSocket. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupFeedback(); Setup feedback. void StopFeedback(); Stop feedback. Bool_t HandleTimer(TTimer* timer); Handle timer event. void HandleGetTreeHeader(TMessage* mess); Handle tree header request. TProofPlayerSlave(TSocket* socket = 0); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-03 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:8020,Integrability,Message,Message,8020,"nnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTProofPlayer::IsClient() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tTProofPlayer::JoinProcess(TList* workers); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofPlayerSlave&operator=(const TProofPlayerSlave&); TProofPlayerSlave&operator=(TProofPlayerSlave&&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Long64_tTProofPlayer::Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t f",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:7287,Modifiability,Inherit,InheritsFrom,7287,"extPacket(TSlave* slave, TMessage* r); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TObject*TProofPlayer::GetOutput(const char* name) const; virtual TList*TProofPlayer::GetOutputList() const; virtual TVirtualPacketizer*TProofPlayer::GetPacketizer() const; virtual TProofProgressStatus*TProofPlayer::GetProgressStatus() const; virtual TQueryResult*TProofPlayer::GetQueryResult(const char* ref); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual voidHandleGetTreeHeader(TMessage* mess); virtual voidTProofPlayer::HandleRecvHisto(TMessage* mess); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTProofPlayer::IsClient() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tTProofPlayer::JoinProcess(TList* workers); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObj",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:7353,Modifiability,Inherit,InheritsFrom,7353,"jectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TObject*TProofPlayer::GetOutput(const char* name) const; virtual TList*TProofPlayer::GetOutputList() const; virtual TVirtualPacketizer*TProofPlayer::GetPacketizer() const; virtual TProofProgressStatus*TProofPlayer::GetProgressStatus() const; virtual TQueryResult*TProofPlayer::GetQueryResult(const char* ref); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual voidHandleGetTreeHeader(TMessage* mess); virtual voidTProofPlayer::HandleRecvHisto(TMessage* mess); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTProofPlayer::IsClient() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tTProofPlayer::JoinProcess(TList* workers); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:17494,Modifiability,Inherit,Inheritance,17494,"::fProcessedRun! Events processed in this run; TProofProgressStatus*TProofPlayer::fProgressStatusthe progress status object;; TQueryResult*TProofPlayer::fQueryInstance of TQueryResult currently processed; TList*TProofPlayer::fQueryResultsList of TQueryResult; Long64_tTProofPlayer::fReadBytesRun! Bytes read in this run; Long64_tTProofPlayer::fReadCallsRun! Read calls in this run; Long_tTProofPlayer::fSaveMemThresholdThreshold for saving output to file; Bool_tTProofPlayer::fSavePartialResultsWhether to save the partial results; Bool_tTProofPlayer::fSaveResultsPerPacketWhether to save partial results after each packet; TStatus*TProofPlayer::fSelStatus! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. TList*fFeedbackList of objects to send updates of; TSocket*fSocket. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupFeedback(); Setup feedback. void StopFeedback(); Stop feedback. Bool_t HandleTimer(TTimer* timer); Handle timer event. void HandleGetTreeHeader(TMessage* mess); Handle tree header request. TProofPlayerSlave(TSocket* socket = 0); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-03 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:17507,Modifiability,Inherit,Inherited,17507,"::fProcessedRun! Events processed in this run; TProofProgressStatus*TProofPlayer::fProgressStatusthe progress status object;; TQueryResult*TProofPlayer::fQueryInstance of TQueryResult currently processed; TList*TProofPlayer::fQueryResultsList of TQueryResult; Long64_tTProofPlayer::fReadBytesRun! Bytes read in this run; Long64_tTProofPlayer::fReadCallsRun! Read calls in this run; Long_tTProofPlayer::fSaveMemThresholdThreshold for saving output to file; Bool_tTProofPlayer::fSavePartialResultsWhether to save the partial results; Bool_tTProofPlayer::fSaveResultsPerPacketWhether to save partial results after each packet; TStatus*TProofPlayer::fSelStatus! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. TList*fFeedbackList of objects to send updates of; TSocket*fSocket. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupFeedback(); Setup feedback. void StopFeedback(); Stop feedback. Bool_t HandleTimer(TTimer* timer); Handle timer event. void HandleGetTreeHeader(TMessage* mess); Handle tree header request. TProofPlayerSlave(TSocket* socket = 0); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-03 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:11233,Safety,abort,abort,11233,"ProofPlayer::SavePartialResults(Bool_t queryend = kFALSE, Bool_t force = kFALSE); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayer::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayer::SetMerging(Bool_t = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayer::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayer::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayer::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerSlave(TSocket* socket = 0); TProofPlayerSlave(TProofPlayerSlave&&); TProofPlayerSlave(const TProofPlayerSlave&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const c",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:11255,Safety,timeout,timeout,11255,"lResults(Bool_t queryend = kFALSE, Bool_t force = kFALSE); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayer::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayer::SetMerging(Bool_t = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayer::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayer::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayer::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerSlave(TSocket* socket = 0); TProofPlayerSlave(TProofPlayerSlave&&); TProofPlayerSlave(const TProofPlayerSlave&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; vir",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:11415,Safety,abort,abort,11415,"f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayer::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayer::SetMerging(Bool_t = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayer::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayer::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayer::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerSlave(TSocket* socket = 0); TProofPlayerSlave(TProofPlayerSlave&&); TProofPlayerSlave(const TProofPlayerSlave&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t ",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:11428,Safety,timeout,timeout,11428,"t::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayer::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayer::SetMerging(Bool_t = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayer::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayer::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayer::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerSlave(TSocket* socket = 0); TProofPlayerSlave(TProofPlayerSlave&&); TProofPlayerSlave(const TProofPlayerSlave&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) c",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:7089,Security,Hash,Hash,7089,"fConnections() const; virtual TList*TProofPlayer::GetListOfResults() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual TDSetElement*TProofPlayer::GetNextPacket(TSlave* slave, TMessage* r); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TObject*TProofPlayer::GetOutput(const char* name) const; virtual TList*TProofPlayer::GetOutputList() const; virtual TVirtualPacketizer*TProofPlayer::GetPacketizer() const; virtual TProofProgressStatus*TProofPlayer::GetProgressStatus() const; virtual TQueryResult*TProofPlayer::GetQueryResult(const char* ref); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual voidHandleGetTreeHeader(TMessage* mess); virtual voidTProofPlayer::HandleRecvHisto(TMessage* mess); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTProofPlayer::IsClient() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tTProofPlayer::JoinProcess(TList* workers); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtua",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:11747,Testability,Test,TestBit,11747,"etBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayer::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayer::SetMerging(Bool_t = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayer::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayer::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayer::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerSlave(TSocket* socket = 0); TProofPlayerSlave(TProofPlayerSlave&&); TProofPlayerSlave(const TProofPlayerSlave&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:11786,Testability,Test,TestBits,11786,"etBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayer::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayer::SetMerging(Bool_t = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayer::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayer::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayer::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerSlave(TSocket* socket = 0); TProofPlayerSlave(TProofPlayerSlave&&); TProofPlayerSlave(const TProofPlayerSlave&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:12469,Testability,Assert,AssertSelector,12469,"uble_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. Int_tTProofPlayer::AssertSelector(const char* selector_file); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Bool_tTProofPlayer::CheckMemUsage(Long64_t& mfreq, Bool_t& w80r, Bool_t& w80v, TString& wmsg); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Int_tTProofPlayer::DrawCanvas(TObject* obj); virtual void*TProofPlayer::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); voidTProofPlayer::MapOutputListToDataMembers() const; virtual voidTProofPlayer::MergeOutput(Bool_t savememvalues = kFALSE); virtual voidSetupFeedback(); virtual voidStopFeedback(). private:. virtual Bool_tHandleTimer(TTimer* timer). Data Members; public:. static TVirtualProofPlayer::EExitStatusTVirtualProofPlayer::kAborted; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TProofPlayer::EStatusBitsTProofPlayer::kDispatchOneEvent; static TVirtualProofPlayer::EExitStatusTVirtualProofPlayer::kFinished; static TObject::EStatusBits",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:1772,Usability,Clear,Clear,1772," virtual~TProofPlayerSlave(); voidTObject::AbstractMethod(const char* method) const; virtual voidTProofPlayer::AddEventsProcessed(Long64_t ev); virtual voidTProofPlayer::AddInput(TObject* inp); virtual voidTProofPlayer::AddOutput(TList* out); virtual Int_tTProofPlayer::AddOutputObject(TObject* obj); virtual voidTProofPlayer::AddQueryResult(TQueryResult* q); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTProofPlayer::ClearInput(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const T",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:1821,Usability,Clear,ClearInput,1821," virtual~TProofPlayerSlave(); voidTObject::AbstractMethod(const char* method) const; virtual voidTProofPlayer::AddEventsProcessed(Long64_t ev); virtual voidTProofPlayer::AddInput(TObject* inp); virtual voidTProofPlayer::AddOutput(TList* out); virtual Int_tTProofPlayer::AddOutputObject(TObject* obj); virtual voidTProofPlayer::AddQueryResult(TQueryResult* q); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTProofPlayer::ClearInput(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const T",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:5058,Usability,Feedback,Feedback,5058,"al, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayer::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tTProofPlayer::Finalize(TQueryResult* qr); virtual Long64_tTProofPlayer::Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusTProofPlayer::GetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual TList*TProofPlayer::GetInputList() const; virtual Int_tTProofPlayer::GetLearnEntries(); TList*TQObject::GetListOfClassSignals() con",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:5106,Usability,FeedBack,FeedBackCanvas,5106,"ignal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayer::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tTProofPlayer::Finalize(TQueryResult* qr); virtual Long64_tTProofPlayer::Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusTProofPlayer::GetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual TList*TProofPlayer::GetInputList() const; virtual Int_tTProofPlayer::GetLearnEntries(); TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; v",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:17599,Usability,feedback,feedback,17599,"::fProcessedRun! Events processed in this run; TProofProgressStatus*TProofPlayer::fProgressStatusthe progress status object;; TQueryResult*TProofPlayer::fQueryInstance of TQueryResult currently processed; TList*TProofPlayer::fQueryResultsList of TQueryResult; Long64_tTProofPlayer::fReadBytesRun! Bytes read in this run; Long64_tTProofPlayer::fReadCallsRun! Read calls in this run; Long_tTProofPlayer::fSaveMemThresholdThreshold for saving output to file; Bool_tTProofPlayer::fSavePartialResultsWhether to save the partial results; Bool_tTProofPlayer::fSaveResultsPerPacketWhether to save partial results after each packet; TStatus*TProofPlayer::fSelStatus! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. TList*fFeedbackList of objects to send updates of; TSocket*fSocket. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupFeedback(); Setup feedback. void StopFeedback(); Stop feedback. Bool_t HandleTimer(TTimer* timer); Handle timer event. void HandleGetTreeHeader(TMessage* mess); Handle tree header request. TProofPlayerSlave(TSocket* socket = 0); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-03 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSlave.html:17635,Usability,feedback,feedback,17635,"::fProcessedRun! Events processed in this run; TProofProgressStatus*TProofPlayer::fProgressStatusthe progress status object;; TQueryResult*TProofPlayer::fQueryInstance of TQueryResult currently processed; TList*TProofPlayer::fQueryResultsList of TQueryResult; Long64_tTProofPlayer::fReadBytesRun! Bytes read in this run; Long64_tTProofPlayer::fReadCallsRun! Read calls in this run; Long_tTProofPlayer::fSaveMemThresholdThreshold for saving output to file; Bool_tTProofPlayer::fSavePartialResultsWhether to save the partial results; Bool_tTProofPlayer::fSaveResultsPerPacketWhether to save partial results after each packet; TStatus*TProofPlayer::fSelStatus! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. TList*fFeedbackList of objects to send updates of; TSocket*fSocket. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupFeedback(); Setup feedback. void StopFeedback(); Stop feedback. Bool_t HandleTimer(TTimer* timer); Handle timer event. void HandleGetTreeHeader(TMessage* mess); Handle tree header request. TProofPlayerSlave(TSocket* socket = 0); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-03 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofPlayerSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:4713,Availability,Error,Error,4713,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayerRemote::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tTProofPlayerRemote::Finalize(TQueryResult* qr); virtual Long64_tTProofPlayerRemote::Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objnam",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:4842,Availability,error,error,4842," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayerRemote::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tTProofPlayerRemote::Finalize(TQueryResult* qr); virtual Long64_tTProofPlayerRemote::Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEvents",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:4926,Availability,error,error,4926,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayerRemote::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tTProofPlayerRemote::Finalize(TQueryResult* qr); virtual Long64_tTProofPlayerRemote::Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusTProofPlayer::GetExitStat",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:19823,Availability,error,error,19823,"d! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. Bool_tfReturnFeedback; TArrayIfSlaveActW; TArrayL64fSlaveBytesRead; TArrayFfSlaveEffS; TArrayFfSlaveEvtRti; TArrayFfSlaveInitTime; TArrayFfSlaveMBRti; TArrayFfSlaveProcTime; TArrayL64fSlaveProgress; TArrayIfSlaveTotS; TArrayL64fSlaveTotals; TListfSlaves. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF. Runs on super master.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void Progress(TSlave* sl, Long64_t total, Long64_t processed); Report progress. void Progress(TSlave* sl, Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Report progress. void Progress(TSlave* sl, TProofProgressInfo* pi); Progress signal. Bool_t HandleTimer(TTimer* timer); Send progress and feedback to client. void SetupFeedback(); Setup reporting of feedback objects and progress messages. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0). void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* sl, Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProofPlayerSuperMaster(TProof* proof = 0); { }. virtual ~TProofPlayerSuper",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:12249,Deployability,Update,UpdateAutoBin,12249,"t_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayerRemote::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayerRemote::SetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayerRemote::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayerRemote::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayerRemote::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerSuperMaster(TProof* proof = 0); TProofPlayerSuperMaster(const TProofPlayerSuperMaster&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:12404,Deployability,Update,UpdateProgressInfo,12404,"t_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayerRemote::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayerRemote::SetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayerRemote::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayerRemote::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayerRemote::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerSuperMaster(TProof* proof = 0); TProofPlayerSuperMaster(const TProofPlayerSuperMaster&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:8414,Integrability,Message,Message,8414,"nt_tTProofPlayerRemote::Incorporate(TObject* obj, TList* out, Bool_t& merged); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTProofPlayerRemote::IsClient() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tTProofPlayerRemote::JoinProcess(TList* workers); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTProofPlayerRemote::MergeOutput(Bool_t savememvalues = kFALSE); virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofPlayerSuperMaster&operator=(const TProofPlayerSuperMaster&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Long64_tProcess(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); virtual Long64_tProcess(TDSet* set, ",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:17764,Integrability,message,message,17764, when merging output files centrally is needed; TStopwatch*TProofPlayerRemote::fMergeSTWMerging stop watch; Bool_tTProofPlayerRemote::fMergeTH1OneByOneIf kTRUE forces TH1 merge one-by-one [kTRUE]; Int_tTProofPlayerRemote::fNumMergersNumber of submergers; THashList*TProofPlayer::fOutputlist with output objects; TFile*TProofPlayer::fOutputFileTFile object attached to fOutputFilePath; TStringTProofPlayer::fOutputFilePathPath to file with (partial) results of the query; TList*TProofPlayerRemote::fOutputListsresults returned by slaves; TVirtualPacketizer*TProofPlayerRemote::fPacketizertransform TDSet into packets for slaves; TQueryResult*TProofPlayer::fPreviousQueryPrevious instance of TQueryResult processed; TH1*TProofPlayerRemote::fProcPackets!Histogram with packets being processed (owned by TPerfStats); TStopwatch*TProofPlayer::fProcTimePacket proc time; TTimer*TProofPlayer::fProcTimeTimerNotifies reaching of allowed max proc time; TMessage*TProofPlayerRemote::fProcessMessageProcess message to replay when adding new workers dynamically; Long64_tTProofPlayer::fProcessedRun! Events processed in this run; TProofProgressStatus*TProofPlayer::fProgressStatusthe progress status object;; TProof*TProofPlayerRemote::fProoflink to associated PROOF session; TQueryResult*TProofPlayer::fQueryInstance of TQueryResult currently processed; TList*TProofPlayer::fQueryResultsList of TQueryResult; Long64_tTProofPlayer::fReadBytesRun! Bytes read in this run; Long64_tTProofPlayer::fReadCallsRun! Read calls in this run; Long_tTProofPlayer::fSaveMemThresholdThreshold for saving output to file; Bool_tTProofPlayer::fSavePartialResultsWhether to save the partial results; Bool_tTProofPlayer::fSaveResultsPerPacketWhether to save partial results after each packet; TStatus*TProofPlayer::fSelStatus! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; TStringTProofPlayerRemote::fSelectorFileNameCurrent ,MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:20339,Integrability,message,messages,20339,"yer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. Bool_tfReturnFeedback; TArrayIfSlaveActW; TArrayL64fSlaveBytesRead; TArrayFfSlaveEffS; TArrayFfSlaveEvtRti; TArrayFfSlaveInitTime; TArrayFfSlaveMBRti; TArrayFfSlaveProcTime; TArrayL64fSlaveProgress; TArrayIfSlaveTotS; TArrayL64fSlaveTotals; TListfSlaves. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF. Runs on super master.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void Progress(TSlave* sl, Long64_t total, Long64_t processed); Report progress. void Progress(TSlave* sl, Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Report progress. void Progress(TSlave* sl, TProofProgressInfo* pi); Progress signal. Bool_t HandleTimer(TTimer* timer); Send progress and feedback to client. void SetupFeedback(); Setup reporting of feedback objects and progress messages. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0). void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* sl, Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProofPlayerSuperMaster(TProof* proof = 0); { }. virtual ~TProofPlayerSuperMaster(); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-03 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:7593,Modifiability,Inherit,InheritsFrom,7593,"ar* name) const; virtual TList*TProofPlayer::GetOutputList() const; virtual TVirtualPacketizer*TProofPlayerRemote::GetPacketizer() const; virtual TProofProgressStatus*TProofPlayer::GetProgressStatus() const; virtual TQueryResult*TProofPlayer::GetQueryResult(const char* ref); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual voidTProofPlayer::HandleGetTreeHeader(TMessage* mess); TObject*TProofPlayerRemote::HandleHistogram(TObject* obj, Bool_t& merged); virtual voidTProofPlayer::HandleRecvHisto(TMessage* mess); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); Bool_tTProofPlayerRemote::HistoSameAxis(TH1* h0, TH1* h1); Int_tTProofPlayerRemote::Incorporate(TObject* obj, TList* out, Bool_t& merged); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTProofPlayerRemote::IsClient() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tTProofPlayerRemote::JoinProcess(TList* workers); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTProofPlayerRemote::MergeOutput(Bool_t savememvalues = kFALSE); virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolet",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:7659,Modifiability,Inherit,InheritsFrom,7659,"; virtual TVirtualPacketizer*TProofPlayerRemote::GetPacketizer() const; virtual TProofProgressStatus*TProofPlayer::GetProgressStatus() const; virtual TQueryResult*TProofPlayer::GetQueryResult(const char* ref); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual voidTProofPlayer::HandleGetTreeHeader(TMessage* mess); TObject*TProofPlayerRemote::HandleHistogram(TObject* obj, Bool_t& merged); virtual voidTProofPlayer::HandleRecvHisto(TMessage* mess); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); Bool_tTProofPlayerRemote::HistoSameAxis(TH1* h0, TH1* h1); Int_tTProofPlayerRemote::Incorporate(TObject* obj, TList* out, Bool_t& merged); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTProofPlayerRemote::IsClient() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tTProofPlayerRemote::JoinProcess(TList* workers); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTProofPlayerRemote::MergeOutput(Bool_t savememvalues = kFALSE); virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFro",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:19531,Modifiability,Inherit,Inheritance,19531,"Status! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; TStringTProofPlayerRemote::fSelectorFileNameCurrent Selector's name, set by Process(); Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. Bool_tfReturnFeedback; TArrayIfSlaveActW; TArrayL64fSlaveBytesRead; TArrayFfSlaveEffS; TArrayFfSlaveEvtRti; TArrayFfSlaveInitTime; TArrayFfSlaveMBRti; TArrayFfSlaveProcTime; TArrayL64fSlaveProgress; TArrayIfSlaveTotS; TArrayL64fSlaveTotals; TListfSlaves. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF. Runs on super master.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void Progress(TSlave* sl, Long64_t total, Long64_t processed); Report progress. void Progress(TSlave* sl, Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Report progress. void Progress(TSlave* sl, TProofProgressInfo* pi); Progress signal. Bool_t HandleTimer(TTimer* timer); Send progress and feedback to client. void SetupFeedback(); Setup reporting of feedback objects and progress messages. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0). void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* sl, Long64_",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:19544,Modifiability,Inherit,Inherited,19544,"Status! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; TStringTProofPlayerRemote::fSelectorFileNameCurrent Selector's name, set by Process(); Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. Bool_tfReturnFeedback; TArrayIfSlaveActW; TArrayL64fSlaveBytesRead; TArrayFfSlaveEffS; TArrayFfSlaveEvtRti; TArrayFfSlaveInitTime; TArrayFfSlaveMBRti; TArrayFfSlaveProcTime; TArrayL64fSlaveProgress; TArrayIfSlaveTotS; TArrayL64fSlaveTotals; TListfSlaves. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF. Runs on super master.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void Progress(TSlave* sl, Long64_t total, Long64_t processed); Report progress. void Progress(TSlave* sl, Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Report progress. void Progress(TSlave* sl, TProofProgressInfo* pi); Progress signal. Bool_t HandleTimer(TTimer* timer); Send progress and feedback to client. void SetupFeedback(); Setup reporting of feedback objects and progress messages. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0). void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* sl, Long64_",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:11525,Safety,abort,abort,11525,"vePartialResults(Bool_t queryend = kFALSE, Bool_t force = kFALSE); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayerRemote::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayerRemote::SetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayerRemote::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayerRemote::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayerRemote::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerSuperMaster(TProof* proof = 0); TProofPlayerSuperMaster(const TProofPlayerSuperMaster&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* m",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:11547,Safety,timeout,timeout,11547," queryend = kFALSE, Bool_t force = kFALSE); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayerRemote::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayerRemote::SetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayerRemote::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayerRemote::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayerRemote::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerSuperMaster(TProof* proof = 0); TProofPlayerSuperMaster(const TProofPlayerSuperMaster&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual I",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:11713,Safety,abort,abort,11713,"it(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayerRemote::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayerRemote::SetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayerRemote::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayerRemote::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayerRemote::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerSuperMaster(TProof* proof = 0); TProofPlayerSuperMaster(const TProofPlayerSuperMaster&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0)",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:11726,Safety,timeout,timeout,11726,"t_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayerRemote::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayerRemote::SetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayerRemote::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayerRemote::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayerRemote::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerSuperMaster(TProof* proof = 0); TProofPlayerSuperMaster(const TProofPlayerSuperMaster&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:7256,Security,Hash,Hash,7256,"Signals() const; virtual const char*TObject::GetName() const; virtual TDSetElement*TProofPlayerRemote::GetNextPacket(TSlave* slave, TMessage* r); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TObject*TProofPlayer::GetOutput(const char* name) const; virtual TList*TProofPlayer::GetOutputList() const; virtual TVirtualPacketizer*TProofPlayerRemote::GetPacketizer() const; virtual TProofProgressStatus*TProofPlayer::GetProgressStatus() const; virtual TQueryResult*TProofPlayer::GetQueryResult(const char* ref); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual voidTProofPlayer::HandleGetTreeHeader(TMessage* mess); TObject*TProofPlayerRemote::HandleHistogram(TObject* obj, Bool_t& merged); virtual voidTProofPlayer::HandleRecvHisto(TMessage* mess); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); Bool_tTProofPlayerRemote::HistoSameAxis(TH1* h0, TH1* h1); Int_tTProofPlayerRemote::Incorporate(TObject* obj, TList* out, Bool_t& merged); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTProofPlayerRemote::IsClient() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Bool_tTProofPlayerRemote::JoinProcess(TList* workers); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") ",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:12057,Testability,Test,TestBit,12057,"t_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayerRemote::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayerRemote::SetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayerRemote::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayerRemote::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayerRemote::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerSuperMaster(TProof* proof = 0); TProofPlayerSuperMaster(const TProofPlayerSuperMaster&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:12096,Testability,Test,TestBits,12096,"t_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayerRemote::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayerRemote::SetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayerRemote::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayerRemote::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayerRemote::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerSuperMaster(TProof* proof = 0); TProofPlayerSuperMaster(const TProofPlayerSuperMaster&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:12755,Testability,Assert,AssertSelector,12755,"t; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. Int_tTProofPlayer::AssertSelector(const char* selector_file); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Bool_tTProofPlayer::CheckMemUsage(Long64_t& mfreq, Bool_t& w80r, Bool_t& w80v, TString& wmsg); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Int_tTProofPlayer::DrawCanvas(TObject* obj); TProof*TProofPlayerRemote::GetProof() const; virtual void*TProofPlayer::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual Bool_tHandleTimer(TTimer* timer); Int_tTProofPlayerRemote::InitPacketizer(TDSet* dset, Long64_t nentries, Long64_t first, const char* defpackunit, const char* defpackdata); voidTObject::MakeZombie(); voidTProofPlayer::MapOutputListToDataMembers() const; TList*TProofPlayerRemote::MergeFeedback(); Bool_tTProofPlayerRemote::MergeOutputFiles(); voidTProofPlayerRemote::NotifyMemory(TObject* obj); virtual Bool_tTProofPlayerRemote::SendSelector(const char* selector_file); voidTProofPlayerRemote::SetLastMergingMsg(TObject* obj); voidTProofPlayerRemote::SetSelectorDataMembersFromOutputList(); virtual voidSetupFeedback(); virtual voidTProofPlayerRemote::StopFeedback(). Data Members; public:. static TVirtualProofPlayer::EExitStatusTVirtualProofPlayer::kAborted; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static T",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:1814,Usability,Clear,Clear,1814," virtual~TProofPlayerSuperMaster(); voidTObject::AbstractMethod(const char* method) const; virtual voidTProofPlayer::AddEventsProcessed(Long64_t ev); virtual voidTProofPlayer::AddInput(TObject* inp); virtual voidTProofPlayerRemote::AddOutput(TList* out); virtual Int_tTProofPlayerRemote::AddOutputObject(TObject* obj); virtual voidTProofPlayer::AddQueryResult(TQueryResult* q); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTProofPlayer::ClearInput(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* c",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:1863,Usability,Clear,ClearInput,1863," virtual~TProofPlayerSuperMaster(); voidTObject::AbstractMethod(const char* method) const; virtual voidTProofPlayer::AddEventsProcessed(Long64_t ev); virtual voidTProofPlayer::AddInput(TObject* inp); virtual voidTProofPlayerRemote::AddOutput(TList* out); virtual Int_tTProofPlayerRemote::AddOutputObject(TObject* obj); virtual voidTProofPlayer::AddQueryResult(TQueryResult* q); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTProofPlayer::ClearInput(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* c",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:5112,Usability,Feedback,Feedback,5112,"ar_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayerRemote::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tTProofPlayerRemote::Finalize(TQueryResult* qr); virtual Long64_tTProofPlayerRemote::Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusTProofPlayer::GetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual TList*TProofPlayer::GetInputList() const; virtual Int_tTProofPlayer::GetLearnEntries(); TList*TQObject::GetListOfClassS",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:5160,Usability,FeedBack,FeedBackCanvas,5160," UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayerRemote::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tTProofPlayerRemote::Finalize(TQueryResult* qr); virtual Long64_tTProofPlayerRemote::Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusTProofPlayer::GetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual TList*TProofPlayer::GetInputList() const; virtual Int_tTProofPlayer::GetLearnEntries(); TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnection",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:20248,Usability,feedback,feedback,20248,"yer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. Bool_tfReturnFeedback; TArrayIfSlaveActW; TArrayL64fSlaveBytesRead; TArrayFfSlaveEffS; TArrayFfSlaveEvtRti; TArrayFfSlaveInitTime; TArrayFfSlaveMBRti; TArrayFfSlaveProcTime; TArrayL64fSlaveProgress; TArrayIfSlaveTotS; TArrayL64fSlaveTotals; TListfSlaves. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF. Runs on super master.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void Progress(TSlave* sl, Long64_t total, Long64_t processed); Report progress. void Progress(TSlave* sl, Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Report progress. void Progress(TSlave* sl, TProofProgressInfo* pi); Progress signal. Bool_t HandleTimer(TTimer* timer); Send progress and feedback to client. void SetupFeedback(); Setup reporting of feedback objects and progress messages. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0). void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* sl, Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProofPlayerSuperMaster(TProof* proof = 0); { }. virtual ~TProofPlayerSuperMaster(); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-03 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofPlayerSuperMaster.html:20309,Usability,feedback,feedback,20309,"yer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. Bool_tfReturnFeedback; TArrayIfSlaveActW; TArrayL64fSlaveBytesRead; TArrayFfSlaveEffS; TArrayFfSlaveEvtRti; TArrayFfSlaveInitTime; TArrayFfSlaveMBRti; TArrayFfSlaveProcTime; TArrayL64fSlaveProgress; TArrayIfSlaveTotS; TArrayL64fSlaveTotals; TListfSlaves. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF. Runs on super master.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void Progress(TSlave* sl, Long64_t total, Long64_t processed); Report progress. void Progress(TSlave* sl, Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Report progress. void Progress(TSlave* sl, TProofProgressInfo* pi); Progress signal. Bool_t HandleTimer(TTimer* timer); Send progress and feedback to client. void SetupFeedback(); Setup reporting of feedback objects and progress messages. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0). void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* sl, Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProofPlayerSuperMaster(TProof* proof = 0); { }. virtual ~TProofPlayerSuperMaster(); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-03 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofPlayerSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html
https://root.cern/root/html604/TProofProgressDialog.html:2678,Deployability,update,update,2678,"TProofProgressDialog&); TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries). private:. Float_tAdjustBytes(Float_t mbs, TString& sf). Data Members; private:. TGTextButton*fAbort; TGraph*fActWGraph; TGTextButton*fAsyn; Double_tfAvgMBRate; Double_tfAvgRate; TGProgressBar*fBarprogress bar; TGTextButton*fClose; TGTransientFrame*fDialogtransient frame, main dialog window; TGraph*fEffSGraph; TTimefEndTime; Long64_tfEntries; TGTextEntry*fEntry; TGLabel*fEstim; Int_tfFiles; TGLabel*fFilesEvents; Long64_tfFirst; TGLabel*fInit; Float_tfInitTime; Bool_tfKeep; TGCheckButton*fKeepToggle; TGTextButton*fLog; Bool_tfLogQuery; TGCheckButton*fLogQueryToggle; TProofProgressLog*fLogWindowtransient frame for logs; TGraph*fMBRtGraph; TGTextButton*fMemPlot; TProofProgressMemoryPlot*fMemWindowtransient frame for memory plots; Long64_tfPrevProcessed; Long64_tfPrevTotal; Float_tfProcTime; TGLabel*fProcessed; TProof*fProof; TGLabel*fRate; TGraph*fRateGraph; TGTextButton*fRatePlot; TNtuple*fRatePoints; Int_tfRightInfo; TGLabel*fSelector; TStringfSessionUrl; TGCheckButton*fSmoothSpeedouse smooth speedometer update; TGSpeedo*fSpeedospeedometer; Bool_tfSpeedoEnabledwhether to enable the speedometer; TTimefStartTime; TProofProgressDialog::EQueryStatusfStatus; TGTextButton*fStop; TGTextBuffer*fTextQuery; TGLabel*fTimeLab; TGLabel*fTitleLab; TGraph*fTotSGraph; TGLabel*fTotal; TGTextButton*fUpdtSpeedo; static Bool_tfgKeepDefault; static Bool_tfgLogQueryDefault; static TStringfgTextQueryDefault; static TProofProgressDialog::EQueryStatuskAborted; static TProofProgressDialog::EQueryStatuskDone; static TProofProgressDialog::EQueryStatuskIncomplete; static TProofProgressDialog::EQueryStatuskRunning; static TProofProgressDialog::EQueryStatuskStopped. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries); Create PROO",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:3565,Deployability,Toggle,ToggleOdometerInfos,3565,"*fSelector; TStringfSessionUrl; TGCheckButton*fSmoothSpeedouse smooth speedometer update; TGSpeedo*fSpeedospeedometer; Bool_tfSpeedoEnabledwhether to enable the speedometer; TTimefStartTime; TProofProgressDialog::EQueryStatusfStatus; TGTextButton*fStop; TGTextBuffer*fTextQuery; TGLabel*fTimeLab; TGLabel*fTitleLab; TGraph*fTotSGraph; TGLabel*fTotal; TGTextButton*fUpdtSpeedo; static Bool_tfgKeepDefault; static Bool_tfgLogQueryDefault; static TStringfgTextQueryDefault; static TProofProgressDialog::EQueryStatuskAborted; static TProofProgressDialog::EQueryStatuskDone; static TProofProgressDialog::EQueryStatuskIncomplete; static TProofProgressDialog::EQueryStatuskRunning; static TProofProgressDialog::EQueryStatuskStopped. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries); Create PROOF processing progress dialog. void ToggleOdometerInfos(); Toggle information displayed in Analog Meter. void ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or St",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:3588,Deployability,Toggle,Toggle,3588,"*fSelector; TStringfSessionUrl; TGCheckButton*fSmoothSpeedouse smooth speedometer update; TGSpeedo*fSpeedospeedometer; Bool_tfSpeedoEnabledwhether to enable the speedometer; TTimefStartTime; TProofProgressDialog::EQueryStatusfStatus; TGTextButton*fStop; TGTextBuffer*fTextQuery; TGLabel*fTimeLab; TGLabel*fTitleLab; TGraph*fTotSGraph; TGLabel*fTotal; TGTextButton*fUpdtSpeedo; static Bool_tfgKeepDefault; static Bool_tfgLogQueryDefault; static TStringfgTextQueryDefault; static TProofProgressDialog::EQueryStatuskAborted; static TProofProgressDialog::EQueryStatuskDone; static TProofProgressDialog::EQueryStatuskIncomplete; static TProofProgressDialog::EQueryStatuskRunning; static TProofProgressDialog::EQueryStatuskStopped. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries); Create PROOF processing progress dialog. void ToggleOdometerInfos(); Toggle information displayed in Analog Meter. void ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or St",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:3639,Deployability,Toggle,ToggleThreshold,3639,"oothSpeedouse smooth speedometer update; TGSpeedo*fSpeedospeedometer; Bool_tfSpeedoEnabledwhether to enable the speedometer; TTimefStartTime; TProofProgressDialog::EQueryStatusfStatus; TGTextButton*fStop; TGTextBuffer*fTextQuery; TGLabel*fTimeLab; TGLabel*fTitleLab; TGraph*fTotSGraph; TGLabel*fTotal; TGTextButton*fUpdtSpeedo; static Bool_tfgKeepDefault; static Bool_tfgLogQueryDefault; static TStringfgTextQueryDefault; static TProofProgressDialog::EQueryStatuskAborted; static TProofProgressDialog::EQueryStatuskDone; static TProofProgressDialog::EQueryStatuskIncomplete; static TProofProgressDialog::EQueryStatuskRunning; static TProofProgressDialog::EQueryStatuskStopped. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries); Create PROOF processing progress dialog. void ToggleOdometerInfos(); Toggle information displayed in Analog Meter. void ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void LogMessage(const char* msg, ",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:3832,Deployability,Update,Update,3832,"tus; TGTextButton*fStop; TGTextBuffer*fTextQuery; TGLabel*fTimeLab; TGLabel*fTitleLab; TGraph*fTotSGraph; TGLabel*fTotal; TGTextButton*fUpdtSpeedo; static Bool_tfgKeepDefault; static Bool_tfgLogQueryDefault; static TStringfgTextQueryDefault; static TProofProgressDialog::EQueryStatuskAborted; static TProofProgressDialog::EQueryStatuskDone; static TProofProgressDialog::EQueryStatuskIncomplete; static TProofProgressDialog::EQueryStatuskRunning; static TProofProgressDialog::EQueryStatuskStopped. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries); Create PROOF processing progress dialog. void ToggleOdometerInfos(); Toggle information displayed in Analog Meter. void ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void DoClose(); Close dialog. void DoLog(); Ask proof session for logs. void DoKeep(Bool_t on); Handle keep toggle but",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:4123,Deployability,Update,Update,4123,"QueryDefault; static TProofProgressDialog::EQueryStatuskAborted; static TProofProgressDialog::EQueryStatuskDone; static TProofProgressDialog::EQueryStatuskIncomplete; static TProofProgressDialog::EQueryStatuskRunning; static TProofProgressDialog::EQueryStatuskStopped. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries); Create PROOF processing progress dialog. void ToggleOdometerInfos(); Toggle information displayed in Analog Meter. void ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void DoClose(); Close dialog. void DoLog(); Ask proof session for logs. void DoKeep(Bool_t on); Handle keep toggle button. void DoSetLogQuery(Bool_t on); Handle log-current-query-only toggle button. void DoStop(); Handle Stop button. void DoAbort(); Handle Cancel button. void DoAsyn(); Handle Asyn button. void DoPlotRateGraph(); Handle Plot Rate",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:4815,Deployability,toggle,toggle,4815,"id ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void DoClose(); Close dialog. void DoLog(); Ask proof session for logs. void DoKeep(Bool_t on); Handle keep toggle button. void DoSetLogQuery(Bool_t on); Handle log-current-query-only toggle button. void DoStop(); Handle Stop button. void DoAbort(); Handle Cancel button. void DoAsyn(); Handle Asyn button. void DoPlotRateGraph(); Handle Plot Rate Graph. void DoMemoryPlot(); Do a memory plot. void DoEnableSpeedo(); Enable/Disable speedometer. TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries). void Progress(Long64_t total, Long64_t processed). » Author: Fons Rademakers 21/03/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:4891,Deployability,toggle,toggle,4891,"id ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void DoClose(); Close dialog. void DoLog(); Ask proof session for logs. void DoKeep(Bool_t on); Handle keep toggle button. void DoSetLogQuery(Bool_t on); Handle log-current-query-only toggle button. void DoStop(); Handle Stop button. void DoAbort(); Handle Cancel button. void DoAsyn(); Handle Asyn button. void DoPlotRateGraph(); Handle Plot Rate Graph. void DoMemoryPlot(); Do a memory plot. void DoEnableSpeedo(); Enable/Disable speedometer. TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries). void Progress(Long64_t total, Long64_t processed). » Author: Fons Rademakers 21/03/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:3627,Energy Efficiency,Meter,Meter,3627,"*fSelector; TStringfSessionUrl; TGCheckButton*fSmoothSpeedouse smooth speedometer update; TGSpeedo*fSpeedospeedometer; Bool_tfSpeedoEnabledwhether to enable the speedometer; TTimefStartTime; TProofProgressDialog::EQueryStatusfStatus; TGTextButton*fStop; TGTextBuffer*fTextQuery; TGLabel*fTimeLab; TGLabel*fTitleLab; TGraph*fTotSGraph; TGLabel*fTotal; TGTextButton*fUpdtSpeedo; static Bool_tfgKeepDefault; static Bool_tfgLogQueryDefault; static TStringfgTextQueryDefault; static TProofProgressDialog::EQueryStatuskAborted; static TProofProgressDialog::EQueryStatuskDone; static TProofProgressDialog::EQueryStatuskIncomplete; static TProofProgressDialog::EQueryStatuskRunning; static TProofProgressDialog::EQueryStatuskStopped. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries); Create PROOF processing progress dialog. void ToggleOdometerInfos(); Toggle information displayed in Analog Meter. void ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or St",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:3336,Modifiability,Inherit,Inheritance,3336,"wtransient frame for memory plots; Long64_tfPrevProcessed; Long64_tfPrevTotal; Float_tfProcTime; TGLabel*fProcessed; TProof*fProof; TGLabel*fRate; TGraph*fRateGraph; TGTextButton*fRatePlot; TNtuple*fRatePoints; Int_tfRightInfo; TGLabel*fSelector; TStringfSessionUrl; TGCheckButton*fSmoothSpeedouse smooth speedometer update; TGSpeedo*fSpeedospeedometer; Bool_tfSpeedoEnabledwhether to enable the speedometer; TTimefStartTime; TProofProgressDialog::EQueryStatusfStatus; TGTextButton*fStop; TGTextBuffer*fTextQuery; TGLabel*fTimeLab; TGLabel*fTitleLab; TGraph*fTotSGraph; TGLabel*fTotal; TGTextButton*fUpdtSpeedo; static Bool_tfgKeepDefault; static Bool_tfgLogQueryDefault; static TStringfgTextQueryDefault; static TProofProgressDialog::EQueryStatuskAborted; static TProofProgressDialog::EQueryStatuskDone; static TProofProgressDialog::EQueryStatuskIncomplete; static TProofProgressDialog::EQueryStatuskRunning; static TProofProgressDialog::EQueryStatuskStopped. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries); Create PROOF processing progress dialog. void ToggleOdometerInfos(); Toggle information displayed in Analog Meter. void ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:3349,Modifiability,Inherit,Inherited,3349,"wtransient frame for memory plots; Long64_tfPrevProcessed; Long64_tfPrevTotal; Float_tfProcTime; TGLabel*fProcessed; TProof*fProof; TGLabel*fRate; TGraph*fRateGraph; TGTextButton*fRatePlot; TNtuple*fRatePoints; Int_tfRightInfo; TGLabel*fSelector; TStringfSessionUrl; TGCheckButton*fSmoothSpeedouse smooth speedometer update; TGSpeedo*fSpeedospeedometer; Bool_tfSpeedoEnabledwhether to enable the speedometer; TTimefStartTime; TProofProgressDialog::EQueryStatusfStatus; TGTextButton*fStop; TGTextBuffer*fTextQuery; TGLabel*fTimeLab; TGLabel*fTitleLab; TGraph*fTotSGraph; TGLabel*fTotal; TGTextButton*fUpdtSpeedo; static Bool_tfgKeepDefault; static Bool_tfgLogQueryDefault; static TStringfgTextQueryDefault; static TProofProgressDialog::EQueryStatuskAborted; static TProofProgressDialog::EQueryStatuskDone; static TProofProgressDialog::EQueryStatuskIncomplete; static TProofProgressDialog::EQueryStatuskRunning; static TProofProgressDialog::EQueryStatuskStopped. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries); Create PROOF processing progress dialog. void ToggleOdometerInfos(); Toggle information displayed in Analog Meter. void ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:4658,Performance,Load,Load,4658,"id ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void DoClose(); Close dialog. void DoLog(); Ask proof session for logs. void DoKeep(Bool_t on); Handle keep toggle button. void DoSetLogQuery(Bool_t on); Handle log-current-query-only toggle button. void DoStop(); Handle Stop button. void DoAbort(); Handle Cancel button. void DoAsyn(); Handle Asyn button. void DoPlotRateGraph(); Handle Plot Rate Graph. void DoMemoryPlot(); Do a memory plot. void DoEnableSpeedo(); Enable/Disable speedometer. TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries). void Progress(Long64_t total, Long64_t processed). » Author: Fons Rademakers 21/03/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:720,Safety,abort,aborted,720,"; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TProofProgressDialog. class TProofProgressDialog. TProofProgressDialog. This class provides a query progress bar. Function Members (Methods); public:. virtual~TProofProgressDialog(); static TClass*Class(); voidCloseWindow(); voidDisableAsyn(); voidDoAbort(); voidDoAsyn(); voidDoClose(); voidDoEnableSpeedo(); voidDoKeep(Bool_t on); voidDoLog(); voidDoMemoryPlot(); voidDoPlotRateGraph(); voidDoSetLogQuery(Bool_t on); voidDoStop(); voidIndicateStop(Bool_t aborted); virtual TClass*IsA() const; voidLogMessage(const char* msg, Bool_t all); TProofProgressDialog&operator=(const TProofProgressDialog&); voidProgress(Long64_t total, Long64_t processed); voidProgress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); voidProgress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); voidResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidToggleOdometerInfos(); voidToggleThreshold(); TProofProgressDialog(const TProofProgressDialog&); TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries). private:. Float_tAdjustBytes(Float_t mbs, TString& sf). Data Members; private:. TGTextButton*fAbort; TGraph*fActWGraph; TGTextButton*fAsyn; Double_tfAvgMBRate; Double_tfAvgRate; TGProgressBar*fBarprogress bar; TGTextButton*fClose; TGTransientFrame*fDialogtransient frame, main dialog window; TGraph*fEffSGraph; TTimefEndTime; Long64_tfEntries; TGTextEntry*fEntry; TGLabel*fEst",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:4560,Safety,abort,aborted,4560,"dometerInfos(); Toggle information displayed in Analog Meter. void ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void DoClose(); Close dialog. void DoLog(); Ask proof session for logs. void DoKeep(Bool_t on); Handle keep toggle button. void DoSetLogQuery(Bool_t on); Handle log-current-query-only toggle button. void DoStop(); Handle Stop button. void DoAbort(); Handle Cancel button. void DoAsyn(); Handle Asyn button. void DoPlotRateGraph(); Handle Plot Rate Graph. void DoMemoryPlot(); Do a memory plot. void DoEnableSpeedo(); Enable/Disable speedometer. TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries). void Progress(Long64_t total, Long64_t processed). » Author: Fons Rademakers 21/03/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the docume",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:2279,Testability,log,logs,2279,"TProofProgressDialog&); TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries). private:. Float_tAdjustBytes(Float_t mbs, TString& sf). Data Members; private:. TGTextButton*fAbort; TGraph*fActWGraph; TGTextButton*fAsyn; Double_tfAvgMBRate; Double_tfAvgRate; TGProgressBar*fBarprogress bar; TGTextButton*fClose; TGTransientFrame*fDialogtransient frame, main dialog window; TGraph*fEffSGraph; TTimefEndTime; Long64_tfEntries; TGTextEntry*fEntry; TGLabel*fEstim; Int_tfFiles; TGLabel*fFilesEvents; Long64_tfFirst; TGLabel*fInit; Float_tfInitTime; Bool_tfKeep; TGCheckButton*fKeepToggle; TGTextButton*fLog; Bool_tfLogQuery; TGCheckButton*fLogQueryToggle; TProofProgressLog*fLogWindowtransient frame for logs; TGraph*fMBRtGraph; TGTextButton*fMemPlot; TProofProgressMemoryPlot*fMemWindowtransient frame for memory plots; Long64_tfPrevProcessed; Long64_tfPrevTotal; Float_tfProcTime; TGLabel*fProcessed; TProof*fProof; TGLabel*fRate; TGraph*fRateGraph; TGTextButton*fRatePlot; TNtuple*fRatePoints; Int_tfRightInfo; TGLabel*fSelector; TStringfSessionUrl; TGCheckButton*fSmoothSpeedouse smooth speedometer update; TGSpeedo*fSpeedospeedometer; Bool_tfSpeedoEnabledwhether to enable the speedometer; TTimefStartTime; TProofProgressDialog::EQueryStatusfStatus; TGTextButton*fStop; TGTextBuffer*fTextQuery; TGLabel*fTimeLab; TGLabel*fTitleLab; TGraph*fTotSGraph; TGLabel*fTotal; TGTextButton*fUpdtSpeedo; static Bool_tfgKeepDefault; static Bool_tfgLogQueryDefault; static TStringfgTextQueryDefault; static TProofProgressDialog::EQueryStatuskAborted; static TProofProgressDialog::EQueryStatuskDone; static TProofProgressDialog::EQueryStatuskIncomplete; static TProofProgressDialog::EQueryStatuskRunning; static TProofProgressDialog::EQueryStatuskStopped. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries); Create PROO",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:4617,Testability,Log,LogMessage,4617,"id ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void DoClose(); Close dialog. void DoLog(); Ask proof session for logs. void DoKeep(Bool_t on); Handle keep toggle button. void DoSetLogQuery(Bool_t on); Handle log-current-query-only toggle button. void DoStop(); Handle Stop button. void DoAbort(); Handle Cancel button. void DoAsyn(); Handle Asyn button. void DoPlotRateGraph(); Handle Plot Rate Graph. void DoMemoryPlot(); Do a memory plot. void DoEnableSpeedo(); Enable/Disable speedometer. TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries). void Progress(Long64_t total, Long64_t processed). » Author: Fons Rademakers 21/03/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:4672,Testability,log,log,4672,"id ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void DoClose(); Close dialog. void DoLog(); Ask proof session for logs. void DoKeep(Bool_t on); Handle keep toggle button. void DoSetLogQuery(Bool_t on); Handle log-current-query-only toggle button. void DoStop(); Handle Stop button. void DoAbort(); Handle Cancel button. void DoAsyn(); Handle Asyn button. void DoPlotRateGraph(); Handle Plot Rate Graph. void DoMemoryPlot(); Do a memory plot. void DoEnableSpeedo(); Enable/Disable speedometer. TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries). void Progress(Long64_t total, Long64_t processed). » Author: Fons Rademakers 21/03/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:4687,Testability,log,log,4687,"id ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void DoClose(); Close dialog. void DoLog(); Ask proof session for logs. void DoKeep(Bool_t on); Handle keep toggle button. void DoSetLogQuery(Bool_t on); Handle log-current-query-only toggle button. void DoStop(); Handle Stop button. void DoAbort(); Handle Cancel button. void DoAsyn(); Handle Asyn button. void DoPlotRateGraph(); Handle Plot Rate Graph. void DoMemoryPlot(); Do a memory plot. void DoEnableSpeedo(); Enable/Disable speedometer. TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries). void Progress(Long64_t total, Long64_t processed). » Author: Fons Rademakers 21/03/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:4773,Testability,log,logs,4773,"id ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void DoClose(); Close dialog. void DoLog(); Ask proof session for logs. void DoKeep(Bool_t on); Handle keep toggle button. void DoSetLogQuery(Bool_t on); Handle log-current-query-only toggle button. void DoStop(); Handle Stop button. void DoAbort(); Handle Cancel button. void DoAsyn(); Handle Asyn button. void DoPlotRateGraph(); Handle Plot Rate Graph. void DoMemoryPlot(); Do a memory plot. void DoEnableSpeedo(); Enable/Disable speedometer. TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries). void Progress(Long64_t total, Long64_t processed). » Author: Fons Rademakers 21/03/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:4868,Testability,log,log-current-query-only,4868,"id ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void DoClose(); Close dialog. void DoLog(); Ask proof session for logs. void DoKeep(Bool_t on); Handle keep toggle button. void DoSetLogQuery(Bool_t on); Handle log-current-query-only toggle button. void DoStop(); Handle Stop button. void DoAbort(); Handle Cancel button. void DoAsyn(); Handle Asyn button. void DoPlotRateGraph(); Handle Plot Rate Graph. void DoMemoryPlot(); Do a memory plot. void DoEnableSpeedo(); Enable/Disable speedometer. TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries). void Progress(Long64_t total, Long64_t processed). » Author: Fons Rademakers 21/03/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:363,Usability,progress bar,progress bar,363,". TProofProgressDialog. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TProofProgressDialog. class TProofProgressDialog. TProofProgressDialog. This class provides a query progress bar. Function Members (Methods); public:. virtual~TProofProgressDialog(); static TClass*Class(); voidCloseWindow(); voidDisableAsyn(); voidDoAbort(); voidDoAsyn(); voidDoClose(); voidDoEnableSpeedo(); voidDoKeep(Bool_t on); voidDoLog(); voidDoMemoryPlot(); voidDoPlotRateGraph(); voidDoSetLogQuery(Bool_t on); voidDoStop(); voidIndicateStop(Bool_t aborted); virtual TClass*IsA() const; voidLogMessage(const char* msg, Bool_t all); TProofProgressDialog&operator=(const TProofProgressDialog&); voidProgress(Long64_t total, Long64_t processed); voidProgress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); voidProgress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); voidResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidToggleOdometerInfos(); voidToggleThreshold(); TProofProgressDialog(const TProofProgressDialog&); TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries). private:. Float_tAdjustBytes(Float_t mbs, TString& sf). Data Members; private:. TGTextButton*fAbort; TGraph*fActWGraph; TGTextButton*fAsyn; Double_tfAvgMBRate; Double_tfAvgRate; TGProgressBar*fBarprogress bar; TGTextButton*fClose; TGTransientFrame*fDialogtransient frame, main dialog window; TGraph*fEffSGraph; TTimefEndTime; Long64_tfEntrie",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:3839,Usability,progress bar,progress bar,3839,"tus; TGTextButton*fStop; TGTextBuffer*fTextQuery; TGLabel*fTimeLab; TGLabel*fTitleLab; TGraph*fTotSGraph; TGLabel*fTotal; TGTextButton*fUpdtSpeedo; static Bool_tfgKeepDefault; static Bool_tfgLogQueryDefault; static TStringfgTextQueryDefault; static TProofProgressDialog::EQueryStatuskAborted; static TProofProgressDialog::EQueryStatuskDone; static TProofProgressDialog::EQueryStatuskIncomplete; static TProofProgressDialog::EQueryStatuskRunning; static TProofProgressDialog::EQueryStatuskStopped. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries); Create PROOF processing progress dialog. void ToggleOdometerInfos(); Toggle information displayed in Analog Meter. void ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void DoClose(); Close dialog. void DoLog(); Ask proof session for logs. void DoKeep(Bool_t on); Handle keep toggle but",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressDialog.html:4130,Usability,progress bar,progress bar,4130,"QueryDefault; static TProofProgressDialog::EQueryStatuskAborted; static TProofProgressDialog::EQueryStatuskDone; static TProofProgressDialog::EQueryStatuskIncomplete; static TProofProgressDialog::EQueryStatuskRunning; static TProofProgressDialog::EQueryStatuskStopped. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries); Create PROOF processing progress dialog. void ToggleOdometerInfos(); Toggle information displayed in Analog Meter. void ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void DoClose(); Close dialog. void DoLog(); Ask proof session for logs. void DoKeep(Bool_t on); Handle keep toggle button. void DoSetLogQuery(Bool_t on); Handle log-current-query-only toggle button. void DoStop(); Handle Stop button. void DoAbort(); Handle Cancel button. void DoAsyn(); Handle Asyn button. void DoPlotRateGraph(); Handle Plot Rate",MatchSource.WIKI,root/html604/TProofProgressDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressDialog.html
https://root.cern/root/html604/TProofProgressInfo.html:1428,Availability,Error,Error,1428," virtual~TProofProgressInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly",MatchSource.WIKI,root/html604/TProofProgressInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressInfo.html
https://root.cern/root/html604/TProofProgressInfo.html:1557,Availability,error,error,1557," virtual~TProofProgressInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly",MatchSource.WIKI,root/html604/TProofProgressInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressInfo.html
https://root.cern/root/html604/TProofProgressInfo.html:1641,Availability,error,error,1641," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root/html604/TProofProgressInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressInfo.html
https://root.cern/root/html604/TProofProgressInfo.html:5486,Energy Efficiency,allocate,allocated,5486,"hod, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. Int_tfActWorkersNumebr of workers still active; Long64_tfBytesReadNumber of bytes read; Float_tfEffSessionsNumber of effective sessions running on the machines allocated to this session; Float_tfEvtRateIInstantaneous event rate; Float_tfInitTimeTime for initialization; Float_tfMBRateIInstantaneous byte read rate; Float_tfProcTimeTime for processing; Long64_tfProcessedNumber of events processed; Int_tfTotSessionsNumebr of PROOF sessions running currently on the clusters; Long64_tfTotalTotal number of events to process; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressInfo(Long64_t tot = 0, Long64_t proc = 0, Long64_t bytes = 0, Float_t initt = -1., Float_t proct = -1., Float_t evts = -1., Float_t mbs = -1., Int_t actw = 0, Int_t tsess = 0, Float_t esess = 0.); { }. virtual ~TProofProgressInfo(); { }. TProofInterruptHandler& opera",MatchSource.WIKI,root/html604/TProofProgressInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressInfo.html
https://root.cern/root/html604/TProofProgressInfo.html:527,Integrability,message,messages,527,". TProofProgressInfo. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofProgressInfo. class TProofProgressInfo: public TObject. TProof. This class controls a Parallel ROOT Facility, PROOF, cluster.; It fires the worker servers, it keeps track of how many workers are; running, it keeps track of the workers running status, it broadcasts; messages to all workers, it collects results, etc. Function Members (Methods); public:. virtual~TProofProgressInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly",MatchSource.WIKI,root/html604/TProofProgressInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressInfo.html
https://root.cern/root/html604/TProofProgressInfo.html:2521,Modifiability,Inherit,InheritsFrom,2521,"d, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TProofProgressInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressInfo.html
https://root.cern/root/html604/TProofProgressInfo.html:2587,Modifiability,Inherit,InheritsFrom,2587,"cute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofProgressInfo&operator=(const TProofProgressIn",MatchSource.WIKI,root/html604/TProofProgressInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressInfo.html
https://root.cern/root/html604/TProofProgressInfo.html:6595,Modifiability,Inherit,Inheritance,6595,"a Members; public:. Int_tfActWorkersNumebr of workers still active; Long64_tfBytesReadNumber of bytes read; Float_tfEffSessionsNumber of effective sessions running on the machines allocated to this session; Float_tfEvtRateIInstantaneous event rate; Float_tfInitTimeTime for initialization; Float_tfMBRateIInstantaneous byte read rate; Float_tfProcTimeTime for processing; Long64_tfProcessedNumber of events processed; Int_tfTotSessionsNumebr of PROOF sessions running currently on the clusters; Long64_tfTotalTotal number of events to process; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressInfo(Long64_t tot = 0, Long64_t proc = 0, Long64_t bytes = 0, Float_t initt = -1., Float_t proct = -1., Float_t evts = -1., Float_t mbs = -1., Int_t actw = 0, Int_t tsess = 0, Float_t esess = 0.); { }. virtual ~TProofProgressInfo(); { }. TProofInterruptHandler& operator=(const TProofProgressInfo& ). » Author: Fons Rademakers 13/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-09-08 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressInfo.html
https://root.cern/root/html604/TProofProgressInfo.html:6608,Modifiability,Inherit,Inherited,6608,"a Members; public:. Int_tfActWorkersNumebr of workers still active; Long64_tfBytesReadNumber of bytes read; Float_tfEffSessionsNumber of effective sessions running on the machines allocated to this session; Float_tfEvtRateIInstantaneous event rate; Float_tfInitTimeTime for initialization; Float_tfMBRateIInstantaneous byte read rate; Float_tfProcTimeTime for processing; Long64_tfProcessedNumber of events processed; Int_tfTotSessionsNumebr of PROOF sessions running currently on the clusters; Long64_tfTotalTotal number of events to process; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressInfo(Long64_t tot = 0, Long64_t proc = 0, Long64_t bytes = 0, Float_t initt = -1., Float_t proct = -1., Float_t evts = -1., Float_t mbs = -1., Int_t actw = 0, Int_t tsess = 0, Float_t esess = 0.); { }. virtual ~TProofProgressInfo(); { }. TProofInterruptHandler& operator=(const TProofProgressInfo& ). » Author: Fons Rademakers 13/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-09-08 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressInfo.html
https://root.cern/root/html604/TProofProgressInfo.html:2411,Security,Hash,Hash,2411,"l voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TProofProgressInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressInfo.html
https://root.cern/root/html604/TProofProgressInfo.html:4545,Testability,Test,TestBit,4545,"::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofProgressInfo&operator=(const TProofProgressInfo&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofProgressInfo(const TProofProgressInfo&); TProofProgressInfo(Long64_t tot = 0, Long64_t proc = 0, Long64_t bytes = 0, Float_t initt = -1.",MatchSource.WIKI,root/html604/TProofProgressInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressInfo.html
https://root.cern/root/html604/TProofProgressInfo.html:4584,Testability,Test,TestBits,4584,"::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofProgressInfo&operator=(const TProofProgressInfo&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofProgressInfo(const TProofProgressInfo&); TProofProgressInfo(Long64_t tot = 0, Long64_t proc = 0, Long64_t bytes = 0, Float_t initt = -1.",MatchSource.WIKI,root/html604/TProofProgressInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressInfo.html
https://root.cern/root/html604/TProofProgressInfo.html:888,Usability,Clear,Clear,888," virtual~TProofProgressInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly",MatchSource.WIKI,root/html604/TProofProgressInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressInfo.html
https://root.cern/root/html604/TProofProgressLog.html:4446,Availability,Error,Error,4446,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::G",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:4575,Availability,error,error,4575," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:4659,Availability,error,error,4659,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UIn",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:20637,Availability,mask,mask,20637,,MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:11347,Integrability,Message,Message,11347,"nst; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); voidLoadBuffer(const char* buffer); voidLoadFile(const char* file); voidLogMessage(const char* msg, Bool_t all); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; voidNoLineEntry(); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofProgressLog&operator=(const TProofProgressLog&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); voidPopup(); virtual voidTGCompositeFrame",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:25029,Integrability,message,messages,25029,"repCheckCmdcheckbox active if piping; TGCheckButton*fGrepCheckInvcheckbox active if inverting; TGLabel*fGrepLabellabel indicating if grepping or piping; TGTextEntry*fGrepTexttext to grep for in the logs; TGNumberEntry*fLinesFromstarting line; TGNumberEntry*fLinesToending line; TGListBox*fLogListlist of workers; TGTextButton*fLogNewdisplay logs button; TProofLog*fProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the lo",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:25161,Integrability,message,messages,25161,"epping or piping; TGTextEntry*fGrepTexttext to grep for in the logs; TGNumberEntry*fLinesFromstarting line; TGNumberEntry*fLinesToending line; TGListBox*fLogListlist of workers; TGTextButton*fLogNewdisplay logs button; TProofLog*fProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Set",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:25238,Integrability,message,messages,25238,"ne; TGNumberEntry*fLinesToending line; TGListBox*fLogListlist of workers; TGTextButton*fLogNewdisplay logs button; TProofLog*fProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the l",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:9817,Modifiability,Inherit,InheritsFrom,9817,"TGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:9883,Modifiability,Inherit,InheritsFrom,9883,"e::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); voidLoadBuffer(const ",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:24848,Modifiability,Inherit,Inheritance,24848,"; Bool_tfFullText0 - when grep was called; TGTextButton*fGrepButtongrep button; TGCheckButton*fGrepCheckCmdcheckbox active if piping; TGCheckButton*fGrepCheckInvcheckbox active if inverting; TGLabel*fGrepLabellabel indicating if grepping or piping; TGTextEntry*fGrepTexttext to grep for in the logs; TGNumberEntry*fLinesFromstarting line; TGNumberEntry*fLinesToending line; TGListBox*fLogListlist of workers; TGTextButton*fLogNewdisplay logs button; TProofLog*fProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the;",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:24861,Modifiability,Inherit,Inherited,24861,"; Bool_tfFullText0 - when grep was called; TGTextButton*fGrepButtongrep button; TGCheckButton*fGrepCheckCmdcheckbox active if piping; TGCheckButton*fGrepCheckInvcheckbox active if inverting; TGLabel*fGrepLabellabel indicating if grepping or piping; TGTextEntry*fGrepTexttext to grep for in the logs; TGNumberEntry*fLinesFromstarting line; TGNumberEntry*fLinesToending line; TGListBox*fLogListlist of workers; TGTextButton*fLogNewdisplay logs button; TProofLog*fProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the;",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:25363,Performance,Load,LoadBuffer,25363,"button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. TProofProgressLog(T",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:25395,Performance,Load,Load,25395,"button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. TProofProgressLog(T",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:25434,Performance,Load,LoadFile,25434,"ive index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600). void SetUr",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:25462,Performance,Load,Load,25462,"ive index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600). void SetUr",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:25938,Performance,Load,Load,25938,"embers; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600). void SetUrl(const char* url); slots. { fSessionUrl = url; }. » Author: G Ganis, Aug 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: c52dc6cb225c25e34d388329d41570a484d98ce0 $ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:9527,Security,Hash,Hash,9527,"virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:385,Testability,log,logs,385,". TProofProgressLog. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TProofProgressLog. class TProofProgressLog: public TGTransientFrame. TProofProgressLog. Dialog used to display Proof session logs from the Proof progress; dialog.; It uses TProofMgr::GetSessionLogs() mechanism internally. Function Members (Methods); public:. virtual~TProofProgressLog(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidAddBuffer(const char* buffer); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuildLogList(Bool_t create = kFALSE); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidClear(Option_t* = 0); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver,",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:16382,Testability,Test,TestBit,16382,"r(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUrl(const char* url); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofProgressLog(const TProofProgressLog&); TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:16421,Testability,Test,TestBits,16421,"r(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUrl(const char* url); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofProgressLog(const TProofProgressLog&); TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:24167,Testability,log,logs,24167,"tic const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGCheckButton*fAllLinesdisplay all lines button; TGSplitButton*fAllWorkersdisplay all workers button; TGTextButton*fCloseclose button; TProofProgressDialog*fDialogowner dialog; TGTextEntry*fFileNamefile to save to; Bool_tfFullText0 - when grep was called; TGTextButton*fGrepButtongrep button; TGCheckButton*fGrepCheckCmdcheckbox active if piping; TGCheckButton*fGrepCheckInvcheckbox active if inverting; TGLabel*fGrepLabellabel indicating if grepping or piping; TGTextEntry*fGrepTexttext to grep for in the logs; TGNumberEntry*fLinesFromstarting line; TGNumberEntry*fLinesToending line; TGListBox*fLogListlist of workers; TGTextButton*fLogNewdisplay logs button; TProofLog*fProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:24310,Testability,log,logs,24310,"tic const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGCheckButton*fAllLinesdisplay all lines button; TGSplitButton*fAllWorkersdisplay all workers button; TGTextButton*fCloseclose button; TProofProgressDialog*fDialogowner dialog; TGTextEntry*fFileNamefile to save to; Bool_tfFullText0 - when grep was called; TGTextButton*fGrepButtongrep button; TGCheckButton*fGrepCheckCmdcheckbox active if piping; TGCheckButton*fGrepCheckInvcheckbox active if inverting; TGLabel*fGrepLabellabel indicating if grepping or piping; TGTextEntry*fGrepTexttext to grep for in the logs; TGNumberEntry*fLinesFromstarting line; TGNumberEntry*fLinesToending line; TGListBox*fLogListlist of workers; TGTextButton*fLogNewdisplay logs button; TProofLog*fProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:24346,Testability,log,log,24346,"tic const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGCheckButton*fAllLinesdisplay all lines button; TGSplitButton*fAllWorkersdisplay all workers button; TGTextButton*fCloseclose button; TProofProgressDialog*fDialogowner dialog; TGTextEntry*fFileNamefile to save to; Bool_tfFullText0 - when grep was called; TGTextButton*fGrepButtongrep button; TGCheckButton*fGrepCheckCmdcheckbox active if piping; TGCheckButton*fGrepCheckInvcheckbox active if inverting; TGLabel*fGrepLabellabel indicating if grepping or piping; TGTextEntry*fGrepTexttext to grep for in the logs; TGNumberEntry*fLinesFromstarting line; TGNumberEntry*fLinesToending line; TGListBox*fLogListlist of workers; TGTextButton*fLogNewdisplay logs button; TProofLog*fProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:25025,Testability,log,log,25025,"repCheckCmdcheckbox active if piping; TGCheckButton*fGrepCheckInvcheckbox active if inverting; TGLabel*fGrepLabellabel indicating if grepping or piping; TGTextEntry*fGrepTexttext to grep for in the logs; TGNumberEntry*fLinesFromstarting line; TGNumberEntry*fLinesToending line; TGListBox*fLogListlist of workers; TGTextButton*fLogNewdisplay logs button; TProofLog*fProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the lo",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:25157,Testability,log,log,25157,"epping or piping; TGTextEntry*fGrepTexttext to grep for in the logs; TGNumberEntry*fLinesFromstarting line; TGNumberEntry*fLinesToending line; TGListBox*fLogListlist of workers; TGTextButton*fLogNewdisplay logs button; TProofLog*fProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Set",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:25234,Testability,log,log,25234,"ne; TGNumberEntry*fLinesToending line; TGListBox*fLogListlist of workers; TGTextButton*fLogNewdisplay logs button; TProofLog*fProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the l",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:25301,Testability,log,log,25301,"LogNewdisplay logs button; TProofLog*fProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:25346,Testability,log,log,25346,"ProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild t",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:25723,Testability,log,logs,25723,"::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600). void SetUrl(const char* url); slots. { fSessionUrl = url; }. » Author: G Ganis, Aug 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: c52dc6cb225c25e34d388329d41570a484d98ce0 $ » Last generated: 2015-06-02 16:30; This page has been",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:25812,Testability,log,logs,25812,"static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600). void SetUrl(const char* url); slots. { fSessionUrl = url; }. » Author: G Ganis, Aug 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: c52dc6cb225c25e34d388329d41570a484d98ce0 $ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions rega",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:25897,Testability,Log,LogMessage,25897,"embers; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600). void SetUrl(const char* url); slots. { fSessionUrl = url; }. » Author: G Ganis, Aug 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: c52dc6cb225c25e34d388329d41570a484d98ce0 $ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:25952,Testability,log,log,25952,"embers; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600). void SetUrl(const char* url); slots. { fSessionUrl = url; }. » Author: G Ganis, Aug 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: c52dc6cb225c25e34d388329d41570a484d98ce0 $ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:25967,Testability,log,log,25967,"embers; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600). void SetUrl(const char* url); slots. { fSessionUrl = url; }. » Author: G Ganis, Aug 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: c52dc6cb225c25e34d388329d41570a484d98ce0 $ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:26015,Testability,log,logs,26015,"embers; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600). void SetUrl(const char* url); slots. { fSessionUrl = url; }. » Author: G Ganis, Aug 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: c52dc6cb225c25e34d388329d41570a484d98ce0 $ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:26338,Testability,log,log,26338,"embers; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600). void SetUrl(const char* url); slots. { fSessionUrl = url; }. » Author: G Ganis, Aug 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: c52dc6cb225c25e34d388329d41570a484d98ce0 $ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:25318,Usability,Clear,Clear,25318,"ProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild t",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:25340,Usability,Clear,Clear,25340,"ProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame; static TProofProgressLog::ETextTypekGrep; static TProofProgressLog::ETextTypekRaw; static TProofProgressLog::ETextTypekStd. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild t",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressLog.html:26292,Usability,clear,clear,26292,"embers; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600). void SetUrl(const char* url); slots. { fSessionUrl = url; }. » Author: G Ganis, Aug 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: c52dc6cb225c25e34d388329d41570a484d98ce0 $ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressLog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressLog.html
https://root.cern/root/html604/TProofProgressMemoryPlot.html:4529,Availability,Error,Error,4529,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::G",MatchSource.WIKI,root/html604/TProofProgressMemoryPlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressMemoryPlot.html
https://root.cern/root/html604/TProofProgressMemoryPlot.html:4658,Availability,error,error,4658," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html604/TProofProgressMemoryPlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressMemoryPlot.html
https://root.cern/root/html604/TProofProgressMemoryPlot.html:4742,Availability,error,error,4742,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UIn",MatchSource.WIKI,root/html604/TProofProgressMemoryPlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressMemoryPlot.html
https://root.cern/root/html604/TProofProgressMemoryPlot.html:20766,Availability,mask,mask,20766,,MatchSource.WIKI,root/html604/TProofProgressMemoryPlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressMemoryPlot.html
https://root.cern/root/html604/TProofProgressMemoryPlot.html:24975,Energy Efficiency,consumption,consumption,24975,"e::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300). » Author: Anna Kreshuk 18/07/2008 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressMemoryPlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressMemoryPlot.html
https://root.cern/root/html604/TProofProgressMemoryPlot.html:11317,Integrability,Message,Message,11317,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofProgressMemoryPlot&operator=(const TProofProgressMemoryPlot&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGCompositeFrame::Print(Option_t* ",MatchSource.WIKI,root/html604/TProofProgressMemoryPlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressMemoryPlot.html
https://root.cern/root/html604/TProofProgressMemoryPlot.html:9900,Modifiability,Inherit,InheritsFrom,9900,"TGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html604/TProofProgressMemoryPlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressMemoryPlot.html
https://root.cern/root/html604/TProofProgressMemoryPlot.html:9966,Modifiability,Inherit,InheritsFrom,9966,"e::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow:",MatchSource.WIKI,root/html604/TProofProgressMemoryPlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressMemoryPlot.html
https://root.cern/root/html604/TProofProgressMemoryPlot.html:23978,Modifiability,Inherit,Inheritance,23978,"ion; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worke",MatchSource.WIKI,root/html604/TProofProgressMemoryPlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressMemoryPlot.html
https://root.cern/root/html604/TProofProgressMemoryPlot.html:23991,Modifiability,Inherit,Inherited,23991,"ion; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worke",MatchSource.WIKI,root/html604/TProofProgressMemoryPlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressMemoryPlot.html
https://root.cern/root/html604/TProofProgressMemoryPlot.html:9610,Security,Hash,Hash,9610,"virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html604/TProofProgressMemoryPlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressMemoryPlot.html
https://root.cern/root/html604/TProofProgressMemoryPlot.html:16233,Testability,Test,TestBit,16233,"dTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofProgressMemoryPlot(const TProofProgressMemoryPlot&); TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofProgressMemoryPlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressMemoryPlot.html
https://root.cern/root/html604/TProofProgressMemoryPlot.html:16272,Testability,Test,TestBits,16272,"dTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofProgressMemoryPlot(const TProofProgressMemoryPlot&); TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofProgressMemoryPlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressMemoryPlot.html
https://root.cern/root/html604/TProofProgressMemoryPlot.html:24286,Testability,log,logs,24286,"TGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w =",MatchSource.WIKI,root/html604/TProofProgressMemoryPlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressMemoryPlot.html
https://root.cern/root/html604/TProofProgressMemoryPlot.html:24418,Testability,log,logs,24418,"FrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300). » Author: Anna Kreshuk 18/07/2008 » Copyright (C) 1995-2003, Rene Brun and Fons R",MatchSource.WIKI,root/html604/TProofProgressMemoryPlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressMemoryPlot.html
https://root.cern/root/html604/TProofProgressMemoryPlot.html:25072,Testability,log,log,25072,"e::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300). » Author: Anna Kreshuk 18/07/2008 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressMemoryPlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressMemoryPlot.html
https://root.cern/root/html604/TProofProgressMemoryPlot.html:24338,Usability,Clear,Clear,24338,"Frame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300). » Author: Anna Kreshuk 18/07/2008 » ",MatchSource.WIKI,root/html604/TProofProgressMemoryPlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressMemoryPlot.html
https://root.cern/root/html604/TProofProgressMemoryPlot.html:24360,Usability,Clear,Clear,24360,"Frame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300). » Author: Anna Kreshuk 18/07/2008 » ",MatchSource.WIKI,root/html604/TProofProgressMemoryPlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressMemoryPlot.html
https://root.cern/root/html604/TProofProgressMemoryPlot.html:25165,Usability,clear,clear,25165,"e::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300); Main constructor. ~TProofProgressMemoryPlot(); Destructor. TGListBox* BuildLogList(TGFrame* parent); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void Clear(Option_t* = 0); Clear the canvases. void DoPlot(); Draw the plot from the logs. TGraph * DoAveragePlot(Int_t& max_el, Int_t& min_el); Create the average plots. Int_t ParseLine(TString l, Long64_t& v, Long64_t& r, Long64_t& e); Extract from line 'l' the virtual memory 'v', the resident memory 'r' and the; number of events 'e'.; The line is assumed to be in the form; ""... Memory 130868 virtual 31540 ... event 5550""; The fields are only filled if >= 0 .; Return 0 on success, -1 if any of the values coudl not be filled (the output; fields are not touched in such a case). TGraph * DoWorkerPlot(TProofLogElem* ple); Make a memory consumption graph for a worker. TGraph * DoMasterPlot(TProofLogElem* ple); a master or submaster log; display without meaningful labels for now. void Select(Int_t id); actions of select all/clear all button. TGraph* DoAveragePlotOld(Int_t& max_el, Int_t& min_el). TProofProgressMemoryPlot(TProofProgressDialog* d, Int_t w = 700, Int_t h = 300). » Author: Anna Kreshuk 18/07/2008 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressMemoryPlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressMemoryPlot.html
https://root.cern/root/html604/TProofProgressStatus.html:1242,Availability,Error,Error,1242," virtual~TProofProgressStatus(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tGetBytesRead() const; Double_tGetCPUTime() const; Double_tGetCurrentRate() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntries() const; virtual const char*TObject::GetIconName() const; Double_tGetLast",MatchSource.WIKI,root/html604/TProofProgressStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressStatus.html
https://root.cern/root/html604/TProofProgressStatus.html:1371,Availability,error,error,1371," virtual~TProofProgressStatus(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tGetBytesRead() const; Double_tGetCPUTime() const; Double_tGetCurrentRate() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntries() const; virtual const char*TObject::GetIconName() const; Double_tGetLast",MatchSource.WIKI,root/html604/TProofProgressStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressStatus.html
https://root.cern/root/html604/TProofProgressStatus.html:1455,Availability,error,error,1455," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tGetBytesRead() const; Double_tGetCPUTime() const; Double_tGetCurrentRate() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntries() const; virtual const char*TObject::GetIconName() const; Double_tGetLastUpdate() const; Double_tGetLearnTime() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetProcTime() const; Double_tGetRate() const; Long64_tGetReadCalls() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* ti",MatchSource.WIKI,root/html604/TProofProgressStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressStatus.html
https://root.cern/root/html604/TProofProgressStatus.html:7914,Deployability,Update,Update,7914,"Object::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Long64_tfBytesRead; Double_tfCPUTime; Long64_tfEntries; Long64_tfLastEntriesLast chunck; Double_tfLastProcTimethe wallclock time of the last addition; Double_tfLastUpdateTimestamp of last change; Double_tfLearnTimethe time spent in learning phase; Double_tfProcTimethe wallclock time; Long64_tfReadCalls. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytesRead = 0, Long64_t fReadCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0); Main and default constructor. TProofProgressStatus& operator+=(const TProofProgressStatus& st); '+=' operator. TProofProgressStatus& operator-=(const TProofProgressStatus& st); '-=' operator. TProofProgressStatus operator-(TProofProgressStatus& st); '-' operator. void Print(Option_t* option = """") const; Dump the content. void SetLastUpdate(Double_t updtTime = 0); Update time stamp either with the passed value (if > 0) or with; the current time. Double_t GetCurrentRate() const; Get current rate. Rteunr the average rate if the current is not defined. TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytesRead = 0, Long64_t fReadCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0). Long64_t GetEntries() const; { return fEntries; }. Long64_t GetBytesRead() const; { return fBytesRead; }. Long64_t GetReadCalls() const; { return fReadCalls; }. Double_t GetLearnTime() const; { return fLearnTime; }. Double_t GetProcTime() const; { return fProcTime; }. Double_t GetCPUTime() const; { return fCPUTime; }. Double_t GetLastUpdate() const; { return fLastUpdate; }. Double_t GetRate() const; { return ((fProcTime > 0) ? fEntries/fProcTime : 0); }. void SetLastEntries(Long64_t entries); { fLastEntries = entries; }. void SetEntries(Long64_t entries); { fEntries = entries; }. void IncEntries(Long64_t entries = 1); { fLastEntries = entries; fEntries += entries; }. void IncByte",MatchSource.WIKI,root/html604/TProofProgressStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressStatus.html
https://root.cern/root/html604/TProofProgressStatus.html:2783,Modifiability,Inherit,InheritsFrom,2783,"; Double_tGetCurrentRate() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntries() const; virtual const char*TObject::GetIconName() const; Double_tGetLastUpdate() const; Double_tGetLearnTime() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetProcTime() const; Double_tGetRate() const; Long64_tGetReadCalls() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; voidIncBytesRead(Long64_t bytesRead); voidIncCPUTime(Double_t procTime); voidIncEntries(Long64_t entries = 1); voidIncProcTime(Double_t procTime); voidIncReadCalls(Long64_t readCalls); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TProofProgressStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressStatus.html
https://root.cern/root/html604/TProofProgressStatus.html:2849,Modifiability,Inherit,InheritsFrom,2849,"wOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntries() const; virtual const char*TObject::GetIconName() const; Double_tGetLastUpdate() const; Double_tGetLearnTime() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetProcTime() const; Double_tGetRate() const; Long64_tGetReadCalls() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; voidIncBytesRead(Long64_t bytesRead); voidIncCPUTime(Double_t procTime); voidIncEntries(Long64_t entries = 1); voidIncProcTime(Double_t procTime); voidIncReadCalls(Long64_t readCalls); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofProgressStatus&operator+=(const TProofProgres",MatchSource.WIKI,root/html604/TProofProgressStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressStatus.html
https://root.cern/root/html604/TProofProgressStatus.html:7329,Modifiability,Inherit,Inheritance,7329,"ed; static TProofProgressStatus::EStatusBitskFileNotOpen; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Long64_tfBytesRead; Double_tfCPUTime; Long64_tfEntries; Long64_tfLastEntriesLast chunck; Double_tfLastProcTimethe wallclock time of the last addition; Double_tfLastUpdateTimestamp of last change; Double_tfLearnTimethe time spent in learning phase; Double_tfProcTimethe wallclock time; Long64_tfReadCalls. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytesRead = 0, Long64_t fReadCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0); Main and default constructor. TProofProgressStatus& operator+=(const TProofProgressStatus& st); '+=' operator. TProofProgressStatus& operator-=(const TProofProgressStatus& st); '-=' operator. TProofProgressStatus operator-(TProofProgressStatus& st); '-' operator. void Print(Option_t* option = """") const; Dump the content. void SetLastUpdate(Double_t updtTime = 0); Update time stamp either with the passed value (if > 0) or with; the current time. Double_t GetCurrentRate() const; Get current rate. Rteunr the average rate if the current is not defined. TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytesRead = 0, Long64_t fReadCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0). Long64_t GetEntries() const; { return fEntries; }. Long64_t GetBytesRead() const; { return fBytesRead; }. Long",MatchSource.WIKI,root/html604/TProofProgressStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressStatus.html
https://root.cern/root/html604/TProofProgressStatus.html:7342,Modifiability,Inherit,Inherited,7342,"ed; static TProofProgressStatus::EStatusBitskFileNotOpen; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Long64_tfBytesRead; Double_tfCPUTime; Long64_tfEntries; Long64_tfLastEntriesLast chunck; Double_tfLastProcTimethe wallclock time of the last addition; Double_tfLastUpdateTimestamp of last change; Double_tfLearnTimethe time spent in learning phase; Double_tfProcTimethe wallclock time; Long64_tfReadCalls. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytesRead = 0, Long64_t fReadCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0); Main and default constructor. TProofProgressStatus& operator+=(const TProofProgressStatus& st); '+=' operator. TProofProgressStatus& operator-=(const TProofProgressStatus& st); '-=' operator. TProofProgressStatus operator-(TProofProgressStatus& st); '-' operator. void Print(Option_t* option = """") const; Dump the content. void SetLastUpdate(Double_t updtTime = 0); Update time stamp either with the passed value (if > 0) or with; the current time. Double_t GetCurrentRate() const; Get current rate. Rteunr the average rate if the current is not defined. TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytesRead = 0, Long64_t fReadCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0). Long64_t GetEntries() const; { return fEntries; }. Long64_t GetBytesRead() const; { return fBytesRead; }. Long",MatchSource.WIKI,root/html604/TProofProgressStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressStatus.html
https://root.cern/root/html604/TProofProgressStatus.html:2488,Security,Hash,Hash,2488,"ecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tGetBytesRead() const; Double_tGetCPUTime() const; Double_tGetCurrentRate() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntries() const; virtual const char*TObject::GetIconName() const; Double_tGetLastUpdate() const; Double_tGetLearnTime() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetProcTime() const; Double_tGetRate() const; Long64_tGetReadCalls() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; voidIncBytesRead(Long64_t bytesRead); voidIncCPUTime(Double_t procTime); voidIncEntries(Long64_t entries = 1); voidIncProcTime(Double_t procTime); voidIncReadCalls(Long64_t readCalls); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::",MatchSource.WIKI,root/html604/TProofProgressStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressStatus.html
https://root.cern/root/html604/TProofProgressStatus.html:5397,Testability,Test,TestBit,5397,"fProgressStatus&operator=(const TProofProgressStatus&); TProofProgressStatus&operator=(TProofProgressStatus&&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBytesRead(Long64_t bytesRead); voidSetCPUTime(Double_t procTime); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEntries(Long64_t entries); voidSetLastEntries(Long64_t entries); voidSetLastProcTime(Double_t procTime); voidSetLastUpdate(Double_t updtTime = 0); voidSetLearnTime(Double_t learnTime); static voidTObject::SetObjectStat(Bool_t stat); voidSetProcTime(Double_t procTime); voidSetReadCalls(Long64_t readCalls); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofProgressStatus(TProofProgressStatus&&); TProofProgressStatus(const TProofProgressStatus&); TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytesRead = 0, Long64_t fReadCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofProgressStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressStatus.html
https://root.cern/root/html604/TProofProgressStatus.html:5436,Testability,Test,TestBits,5436,"fProgressStatus&operator=(const TProofProgressStatus&); TProofProgressStatus&operator=(TProofProgressStatus&&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBytesRead(Long64_t bytesRead); voidSetCPUTime(Double_t procTime); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEntries(Long64_t entries); voidSetLastEntries(Long64_t entries); voidSetLastProcTime(Double_t procTime); voidSetLastUpdate(Double_t updtTime = 0); voidSetLearnTime(Double_t learnTime); static voidTObject::SetObjectStat(Bool_t stat); voidSetProcTime(Double_t procTime); voidSetReadCalls(Long64_t readCalls); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofProgressStatus(TProofProgressStatus&&); TProofProgressStatus(const TProofProgressStatus&); TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytesRead = 0, Long64_t fReadCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofProgressStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressStatus.html
https://root.cern/root/html604/TProofProgressStatus.html:702,Usability,Clear,Clear,702," virtual~TProofProgressStatus(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tGetBytesRead() const; Double_tGetCPUTime() const; Double_tGetCurrentRate() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntries() const; virtual const char*TObject::GetIconName() const; Double_tGetLast",MatchSource.WIKI,root/html604/TProofProgressStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressStatus.html
https://root.cern/root/html604/TProofProgressStatus.html:4978,Usability,learn,learnTime,4978,"us& st); TProofProgressStatus&operator=(const TProofProgressStatus&); TProofProgressStatus&operator=(TProofProgressStatus&&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBytesRead(Long64_t bytesRead); voidSetCPUTime(Double_t procTime); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEntries(Long64_t entries); voidSetLastEntries(Long64_t entries); voidSetLastProcTime(Double_t procTime); voidSetLastUpdate(Double_t updtTime = 0); voidSetLearnTime(Double_t learnTime); static voidTObject::SetObjectStat(Bool_t stat); voidSetProcTime(Double_t procTime); voidSetReadCalls(Long64_t readCalls); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofProgressStatus(TProofProgressStatus&&); TProofProgressStatus(const TProofProgressStatus&); TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytesRead = 0, Long64_t fReadCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufs",MatchSource.WIKI,root/html604/TProofProgressStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressStatus.html
https://root.cern/root/html604/TProofProgressStatus.html:7242,Usability,learn,learning,7242,"atic TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TProofProgressStatus::EStatusBitskFileCorrupted; static TProofProgressStatus::EStatusBitskFileNotOpen; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Long64_tfBytesRead; Double_tfCPUTime; Long64_tfEntries; Long64_tfLastEntriesLast chunck; Double_tfLastProcTimethe wallclock time of the last addition; Double_tfLastUpdateTimestamp of last change; Double_tfLearnTimethe time spent in learning phase; Double_tfProcTimethe wallclock time; Long64_tfReadCalls. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytesRead = 0, Long64_t fReadCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0); Main and default constructor. TProofProgressStatus& operator+=(const TProofProgressStatus& st); '+=' operator. TProofProgressStatus& operator-=(const TProofProgressStatus& st); '-=' operator. TProofProgressStatus operator-(TProofProgressStatus& st); '-' operator. void Print(Option_t* option = """") const; Dump the content. void SetLastUpdate(Double_t updtTime = 0); Update time stamp either with the passed value (if > 0) or with; the current time. Double_t GetCurrentRate() const; Get current rate. Rteunr the average rate if the current is not defined. TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytes",MatchSource.WIKI,root/html604/TProofProgressStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressStatus.html
https://root.cern/root/html604/TProofProgressStatus.html:9222,Usability,learn,learnTime,9222,"her with the passed value (if > 0) or with; the current time. Double_t GetCurrentRate() const; Get current rate. Rteunr the average rate if the current is not defined. TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytesRead = 0, Long64_t fReadCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0). Long64_t GetEntries() const; { return fEntries; }. Long64_t GetBytesRead() const; { return fBytesRead; }. Long64_t GetReadCalls() const; { return fReadCalls; }. Double_t GetLearnTime() const; { return fLearnTime; }. Double_t GetProcTime() const; { return fProcTime; }. Double_t GetCPUTime() const; { return fCPUTime; }. Double_t GetLastUpdate() const; { return fLastUpdate; }. Double_t GetRate() const; { return ((fProcTime > 0) ? fEntries/fProcTime : 0); }. void SetLastEntries(Long64_t entries); { fLastEntries = entries; }. void SetEntries(Long64_t entries); { fEntries = entries; }. void IncEntries(Long64_t entries = 1); { fLastEntries = entries; fEntries += entries; }. void IncBytesRead(Long64_t bytesRead); { fBytesRead += bytesRead; }. void SetBytesRead(Long64_t bytesRead); { fBytesRead = bytesRead; }. void IncReadCalls(Long64_t readCalls); { fReadCalls += readCalls; }. void SetReadCalls(Long64_t readCalls); { fReadCalls = readCalls; }. void SetLearnTime(Double_t learnTime); { fLearnTime = learnTime; }. void SetLastProcTime(Double_t procTime); { fLastProcTime = procTime; }. void SetProcTime(Double_t procTime); { fProcTime = procTime; }. void IncProcTime(Double_t procTime); { fLastProcTime = procTime; fProcTime += procTime; }. void SetCPUTime(Double_t procTime); { fCPUTime = procTime; }. void IncCPUTime(Double_t procTime); { fCPUTime += procTime; }. » Author: Jan Iwaszkiewicz 08/08/08 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressStatus.html
https://root.cern/root/html604/TProofProgressStatus.html:9249,Usability,learn,learnTime,9249,"her with the passed value (if > 0) or with; the current time. Double_t GetCurrentRate() const; Get current rate. Rteunr the average rate if the current is not defined. TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytesRead = 0, Long64_t fReadCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0). Long64_t GetEntries() const; { return fEntries; }. Long64_t GetBytesRead() const; { return fBytesRead; }. Long64_t GetReadCalls() const; { return fReadCalls; }. Double_t GetLearnTime() const; { return fLearnTime; }. Double_t GetProcTime() const; { return fProcTime; }. Double_t GetCPUTime() const; { return fCPUTime; }. Double_t GetLastUpdate() const; { return fLastUpdate; }. Double_t GetRate() const; { return ((fProcTime > 0) ? fEntries/fProcTime : 0); }. void SetLastEntries(Long64_t entries); { fLastEntries = entries; }. void SetEntries(Long64_t entries); { fEntries = entries; }. void IncEntries(Long64_t entries = 1); { fLastEntries = entries; fEntries += entries; }. void IncBytesRead(Long64_t bytesRead); { fBytesRead += bytesRead; }. void SetBytesRead(Long64_t bytesRead); { fBytesRead = bytesRead; }. void IncReadCalls(Long64_t readCalls); { fReadCalls += readCalls; }. void SetReadCalls(Long64_t readCalls); { fReadCalls = readCalls; }. void SetLearnTime(Double_t learnTime); { fLearnTime = learnTime; }. void SetLastProcTime(Double_t procTime); { fLastProcTime = procTime; }. void SetProcTime(Double_t procTime); { fProcTime = procTime; }. void IncProcTime(Double_t procTime); { fLastProcTime = procTime; fProcTime += procTime; }. void SetCPUTime(Double_t procTime); { fCPUTime = procTime; }. void IncCPUTime(Double_t procTime); { fCPUTime += procTime; }. » Author: Jan Iwaszkiewicz 08/08/08 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofProgressStatus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofProgressStatus.html
https://root.cern/root/html604/TProofQueryResult.html:1244,Availability,Error,Error,1244," virtual~TProofQueryResult(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTQueryResult::Browse(TBrowser* b = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTQueryResult::GetBytes() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatimeTQueryResult::GetEndTime() const; Long64_tTQueryResult::GetEntries() const; Long64_tTQ",MatchSource.WIKI,root/html604/TProofQueryResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofQueryResult.html
https://root.cern/root/html604/TProofQueryResult.html:1373,Availability,error,error,1373," virtual~TProofQueryResult(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTQueryResult::Browse(TBrowser* b = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTQueryResult::GetBytes() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatimeTQueryResult::GetEndTime() const; Long64_tTQueryResult::GetEntries() const; Long64_tTQ",MatchSource.WIKI,root/html604/TProofQueryResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofQueryResult.html
https://root.cern/root/html604/TProofQueryResult.html:1457,Availability,error,error,1457,"t::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTQueryResult::Browse(TBrowser* b = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTQueryResult::GetBytes() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatimeTQueryResult::GetEndTime() const; Long64_tTQueryResult::GetEntries() const; Long64_tTQueryResult::GetFirst() const; virtual const char*TObject::GetIconName() const; Float_tTQueryResult::GetInitTime() const; TList*TQueryResult::GetInputList(); TObject*TQueryResult::GetInputObject(const char* classname) const; const char*TQueryResult::GetLibList() const; TMacro*TQueryResult::GetLogFile() const; Float_tTQueryResult::GetMergeTime() const; virtual const char*TNamed::GetName() const; Int_tTQueryResult::GetNumMergers() const; Int_tTQueryResult::G",MatchSource.WIKI,root/html604/TProofQueryResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofQueryResult.html
https://root.cern/root/html604/TProofQueryResult.html:359,Energy Efficiency,adapt,adapted,359,". TProofQueryResult. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofQueryResult. class TProofQueryResult: public TQueryResult. TProofQueryResult. TQueryResult version adapted to PROOF neeeds. Function Members (Methods); public:. virtual~TProofQueryResult(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTQueryResult::Browse(TBrowser* b = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTQueryResult::GetBytes() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatimeTQueryResult::GetEndTime() const; Long64_tTQueryResult::GetEntries() const; Long64_tTQ",MatchSource.WIKI,root/html604/TProofQueryResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofQueryResult.html
https://root.cern/root/html604/TProofQueryResult.html:9394,Integrability,message,messages,9394,"ueryResult::fEntriesnumber of entries processed; Bool_tTQueryResult::fFinalizedwhether Terminate has been run; Long64_tTQueryResult::fFirstfirst entry processed; Float_tTQueryResult::fInitTimeInitialization time (seconds) (millisec precision); TList*TQueryResult::fInputListinput list; contains also data sets, entry list, ...; TStringTQueryResult::fLibListblank-separated list of libs loaded at fStart; TMacro*TQueryResult::fLogFilefile with log messages from the query; Float_tTQueryResult::fMergeTimeMerging time (seconds) (millisec precision); TStringTNamed::fNameobject identifier; Int_tTQueryResult::fNumMergersNumber of submergers; Int_tTQueryResult::fNumWrksNumber of workers at start; TStringTQueryResult::fOptionsprocessing options + aclic mode (<opt>#<aclic_mode>); TList*TQueryResult::fOutputListoutput list; TStringTQueryResult::fParListcolon-separated list of PAR loaded at fStart; Float_tTQueryResult::fPrepTimePrepare time (seconds) (millisec precision); Float_tTQueryResult::fProcTimeProcessing time (seconds) (millisec precision); Float_tTQueryResult::fRecvTimeTransfer-to-client time (seconds) (millisec precision); TStringTQueryResult::fResultFileURL of the file where results have been archived; TMacro*TQueryResult::fSelecHdrselector header file; TMacro*TQueryResult::fSelecImpselector implementation file; Int_tTQueryResult::fSeqNumquery unique sequential number; TDatimeTQueryResult::fStarttime when processing started; TQueryResult::EQueryStatusTQueryResult::fStatusquery status; Float_tTQueryResult::fTermTimeTerminate time (seconds) (millisec precision); TStringTNamed::fTitleobject title; Float_tTQueryResult::fUsedCPUreal CPU time used (seconds). private:. Int_tfStartLoglog file offset at start. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofQueryResult(Int_t seqnum, const char* opt, TList* inlist, Long64_t entries, Long64_t first, TDSet* dset, const char* selec, TObject* elist = 0); Main constructor. void SetRunning",MatchSource.WIKI,root/html604/TProofQueryResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofQueryResult.html
https://root.cern/root/html604/TProofQueryResult.html:359,Modifiability,adapt,adapted,359,". TProofQueryResult. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofQueryResult. class TProofQueryResult: public TQueryResult. TProofQueryResult. TQueryResult version adapted to PROOF neeeds. Function Members (Methods); public:. virtual~TProofQueryResult(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTQueryResult::Browse(TBrowser* b = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTQueryResult::GetBytes() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatimeTQueryResult::GetEndTime() const; Long64_tTQueryResult::GetEntries() const; Long64_tTQ",MatchSource.WIKI,root/html604/TProofQueryResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofQueryResult.html
https://root.cern/root/html604/TProofQueryResult.html:3507,Modifiability,Inherit,InheritsFrom,3507,"o(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*TQueryResult::GetOptions() const; TList*TQueryResult::GetOutputList(); const char*TQueryResult::GetParList() const; Float_tTQueryResult::GetPrepTime() const; Float_tTQueryResult::GetProcTime() const; Float_tTQueryResult::GetRecvTime() const; const char*TQueryResult::GetResultFile() const; TMacro*TQueryResult::GetSelecHdr() const; TMacro*TQueryResult::GetSelecImp() const; Int_tTQueryResult::GetSeqNum() const; TDatimeTQueryResult::GetStartTime() const; TQueryResult::EQueryStatusTQueryResult::GetStatus() const; Float_tTQueryResult::GetTermTime() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Float_tTQueryResult::GetUsedCPU() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTQueryResult::IsArchived() const; virtual Bool_tTQueryResult::IsDone() const; Bool_tTQueryResult::IsDraw() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; Bool_tTQueryResult::IsFinalized() const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; Bool_tTQueryResult::Matches(const char* ref); voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::",MatchSource.WIKI,root/html604/TProofQueryResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofQueryResult.html
https://root.cern/root/html604/TProofQueryResult.html:3573,Modifiability,Inherit,InheritsFrom,3573,"; virtual Option_t*TObject::GetOption() const; const char*TQueryResult::GetOptions() const; TList*TQueryResult::GetOutputList(); const char*TQueryResult::GetParList() const; Float_tTQueryResult::GetPrepTime() const; Float_tTQueryResult::GetProcTime() const; Float_tTQueryResult::GetRecvTime() const; const char*TQueryResult::GetResultFile() const; TMacro*TQueryResult::GetSelecHdr() const; TMacro*TQueryResult::GetSelecImp() const; Int_tTQueryResult::GetSeqNum() const; TDatimeTQueryResult::GetStartTime() const; TQueryResult::EQueryStatusTQueryResult::GetStatus() const; Float_tTQueryResult::GetTermTime() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Float_tTQueryResult::GetUsedCPU() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTQueryResult::IsArchived() const; virtual Bool_tTQueryResult::IsDone() const; Bool_tTQueryResult::IsDraw() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; Bool_tTQueryResult::IsFinalized() const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; Bool_tTQueryResult::Matches(const char* ref); voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new",MatchSource.WIKI,root/html604/TProofQueryResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofQueryResult.html
https://root.cern/root/html604/TProofQueryResult.html:10687,Modifiability,Inherit,Inheritance,10687,">#<aclic_mode>); TList*TQueryResult::fOutputListoutput list; TStringTQueryResult::fParListcolon-separated list of PAR loaded at fStart; Float_tTQueryResult::fPrepTimePrepare time (seconds) (millisec precision); Float_tTQueryResult::fProcTimeProcessing time (seconds) (millisec precision); Float_tTQueryResult::fRecvTimeTransfer-to-client time (seconds) (millisec precision); TStringTQueryResult::fResultFileURL of the file where results have been archived; TMacro*TQueryResult::fSelecHdrselector header file; TMacro*TQueryResult::fSelecImpselector implementation file; Int_tTQueryResult::fSeqNumquery unique sequential number; TDatimeTQueryResult::fStarttime when processing started; TQueryResult::EQueryStatusTQueryResult::fStatusquery status; Float_tTQueryResult::fTermTimeTerminate time (seconds) (millisec precision); TStringTNamed::fTitleobject title; Float_tTQueryResult::fUsedCPUreal CPU time used (seconds). private:. Int_tfStartLoglog file offset at start. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofQueryResult(Int_t seqnum, const char* opt, TList* inlist, Long64_t entries, Long64_t first, TDSet* dset, const char* selec, TObject* elist = 0); Main constructor. void SetRunning(Int_t startlog, const char* par, Int_t nwrks); Call when running starts. TProofQueryResult(Int_t seqnum, const char* opt, TList* inlist, Long64_t entries, Long64_t first, TDSet* dset, const char* selec, TObject* elist = 0); { TQueryResult::RecordEnd(status, outlist); }. void SetFinalized(); { TQueryResult::SetFinalized(); }. void SetResultFile(const char* rf); { fResultFile = rf; }. TProofQueryResult(); { }. virtual ~TProofQueryResult(); { }. » Author: G Ganis Aug 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofQueryResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofQueryResult.html
https://root.cern/root/html604/TProofQueryResult.html:10700,Modifiability,Inherit,Inherited,10700,">#<aclic_mode>); TList*TQueryResult::fOutputListoutput list; TStringTQueryResult::fParListcolon-separated list of PAR loaded at fStart; Float_tTQueryResult::fPrepTimePrepare time (seconds) (millisec precision); Float_tTQueryResult::fProcTimeProcessing time (seconds) (millisec precision); Float_tTQueryResult::fRecvTimeTransfer-to-client time (seconds) (millisec precision); TStringTQueryResult::fResultFileURL of the file where results have been archived; TMacro*TQueryResult::fSelecHdrselector header file; TMacro*TQueryResult::fSelecImpselector implementation file; Int_tTQueryResult::fSeqNumquery unique sequential number; TDatimeTQueryResult::fStarttime when processing started; TQueryResult::EQueryStatusTQueryResult::fStatusquery status; Float_tTQueryResult::fTermTimeTerminate time (seconds) (millisec precision); TStringTNamed::fTitleobject title; Float_tTQueryResult::fUsedCPUreal CPU time used (seconds). private:. Int_tfStartLoglog file offset at start. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofQueryResult(Int_t seqnum, const char* opt, TList* inlist, Long64_t entries, Long64_t first, TDSet* dset, const char* selec, TObject* elist = 0); Main constructor. void SetRunning(Int_t startlog, const char* par, Int_t nwrks); Call when running starts. TProofQueryResult(Int_t seqnum, const char* opt, TList* inlist, Long64_t entries, Long64_t first, TDSet* dset, const char* selec, TObject* elist = 0); { TQueryResult::RecordEnd(status, outlist); }. void SetFinalized(); { TQueryResult::SetFinalized(); }. void SetResultFile(const char* rf); { fResultFile = rf; }. TProofQueryResult(); { }. virtual ~TProofQueryResult(); { }. » Author: G Ganis Aug 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofQueryResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofQueryResult.html
https://root.cern/root/html604/TProofQueryResult.html:9333,Performance,load,loaded,9333,"ueryResult::fEntriesnumber of entries processed; Bool_tTQueryResult::fFinalizedwhether Terminate has been run; Long64_tTQueryResult::fFirstfirst entry processed; Float_tTQueryResult::fInitTimeInitialization time (seconds) (millisec precision); TList*TQueryResult::fInputListinput list; contains also data sets, entry list, ...; TStringTQueryResult::fLibListblank-separated list of libs loaded at fStart; TMacro*TQueryResult::fLogFilefile with log messages from the query; Float_tTQueryResult::fMergeTimeMerging time (seconds) (millisec precision); TStringTNamed::fNameobject identifier; Int_tTQueryResult::fNumMergersNumber of submergers; Int_tTQueryResult::fNumWrksNumber of workers at start; TStringTQueryResult::fOptionsprocessing options + aclic mode (<opt>#<aclic_mode>); TList*TQueryResult::fOutputListoutput list; TStringTQueryResult::fParListcolon-separated list of PAR loaded at fStart; Float_tTQueryResult::fPrepTimePrepare time (seconds) (millisec precision); Float_tTQueryResult::fProcTimeProcessing time (seconds) (millisec precision); Float_tTQueryResult::fRecvTimeTransfer-to-client time (seconds) (millisec precision); TStringTQueryResult::fResultFileURL of the file where results have been archived; TMacro*TQueryResult::fSelecHdrselector header file; TMacro*TQueryResult::fSelecImpselector implementation file; Int_tTQueryResult::fSeqNumquery unique sequential number; TDatimeTQueryResult::fStarttime when processing started; TQueryResult::EQueryStatusTQueryResult::fStatusquery status; Float_tTQueryResult::fTermTimeTerminate time (seconds) (millisec precision); TStringTNamed::fTitleobject title; Float_tTQueryResult::fUsedCPUreal CPU time used (seconds). private:. Int_tfStartLoglog file offset at start. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofQueryResult(Int_t seqnum, const char* opt, TList* inlist, Long64_t entries, Long64_t first, TDSet* dset, const char* selec, TObject* elist = 0); Main constructor. void SetRunning",MatchSource.WIKI,root/html604/TProofQueryResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofQueryResult.html
https://root.cern/root/html604/TProofQueryResult.html:9825,Performance,load,loaded,9825,"ueryResult::fEntriesnumber of entries processed; Bool_tTQueryResult::fFinalizedwhether Terminate has been run; Long64_tTQueryResult::fFirstfirst entry processed; Float_tTQueryResult::fInitTimeInitialization time (seconds) (millisec precision); TList*TQueryResult::fInputListinput list; contains also data sets, entry list, ...; TStringTQueryResult::fLibListblank-separated list of libs loaded at fStart; TMacro*TQueryResult::fLogFilefile with log messages from the query; Float_tTQueryResult::fMergeTimeMerging time (seconds) (millisec precision); TStringTNamed::fNameobject identifier; Int_tTQueryResult::fNumMergersNumber of submergers; Int_tTQueryResult::fNumWrksNumber of workers at start; TStringTQueryResult::fOptionsprocessing options + aclic mode (<opt>#<aclic_mode>); TList*TQueryResult::fOutputListoutput list; TStringTQueryResult::fParListcolon-separated list of PAR loaded at fStart; Float_tTQueryResult::fPrepTimePrepare time (seconds) (millisec precision); Float_tTQueryResult::fProcTimeProcessing time (seconds) (millisec precision); Float_tTQueryResult::fRecvTimeTransfer-to-client time (seconds) (millisec precision); TStringTQueryResult::fResultFileURL of the file where results have been archived; TMacro*TQueryResult::fSelecHdrselector header file; TMacro*TQueryResult::fSelecImpselector implementation file; Int_tTQueryResult::fSeqNumquery unique sequential number; TDatimeTQueryResult::fStarttime when processing started; TQueryResult::EQueryStatusTQueryResult::fStatusquery status; Float_tTQueryResult::fTermTimeTerminate time (seconds) (millisec precision); TStringTNamed::fTitleobject title; Float_tTQueryResult::fUsedCPUreal CPU time used (seconds). private:. Int_tfStartLoglog file offset at start. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofQueryResult(Int_t seqnum, const char* opt, TList* inlist, Long64_t entries, Long64_t first, TDSet* dset, const char* selec, TObject* elist = 0); Main constructor. void SetRunning",MatchSource.WIKI,root/html604/TProofQueryResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofQueryResult.html
https://root.cern/root/html604/TProofQueryResult.html:3397,Security,Hash,Hash,3397,"nt_tTQueryResult::GetNumMergers() const; Int_tTQueryResult::GetNumWrks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*TQueryResult::GetOptions() const; TList*TQueryResult::GetOutputList(); const char*TQueryResult::GetParList() const; Float_tTQueryResult::GetPrepTime() const; Float_tTQueryResult::GetProcTime() const; Float_tTQueryResult::GetRecvTime() const; const char*TQueryResult::GetResultFile() const; TMacro*TQueryResult::GetSelecHdr() const; TMacro*TQueryResult::GetSelecImp() const; Int_tTQueryResult::GetSeqNum() const; TDatimeTQueryResult::GetStartTime() const; TQueryResult::EQueryStatusTQueryResult::GetStatus() const; Float_tTQueryResult::GetTermTime() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Float_tTQueryResult::GetUsedCPU() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTQueryResult::IsArchived() const; virtual Bool_tTQueryResult::IsDone() const; Bool_tTQueryResult::IsDraw() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; Bool_tTQueryResult::IsFinalized() const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; Bool_tTQueryResult::Matches(const char* ref); voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void*",MatchSource.WIKI,root/html604/TProofQueryResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofQueryResult.html
https://root.cern/root/html604/TProofQueryResult.html:5955,Testability,Test,TestBit,5955,"rator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofQueryResult&operator=(const TProofQueryResult&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTQueryResult::Print(Option_t* opt = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofQueryResult(); TProofQueryResult(const TProofQueryResult&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofQueryResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofQueryResult.html
https://root.cern/root/html604/TProofQueryResult.html:5994,Testability,Test,TestBits,5994,"rator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofQueryResult&operator=(const TProofQueryResult&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTQueryResult::Print(Option_t* opt = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofQueryResult(); TProofQueryResult(const TProofQueryResult&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofQueryResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofQueryResult.html
https://root.cern/root/html604/TProofQueryResult.html:6479,Testability,log,logline,6479,"f() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofQueryResult(); TProofQueryResult(const TProofQueryResult&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTQueryResult::AddInput(TObject* obj); voidTQueryResult::AddLogLine(const char* logline); TQueryResult*TQueryResult::CloneInfo(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidTQueryResult::SaveSelector(const char* selec); voidTQueryResult::SetArchived(const char* archfile); virtual voidTQueryResult::SetInputList(TList* in, Bool_t adopt = kTRUE); voidTQueryResult::SetMergeTime(Float_t mergetime); voidTQueryResult::SetNumMergers(Int_t nmergers); virtual voidTQueryResult::SetOutputList(TList* out, Bool_t adopt = kTRUE); voidTQueryResult::SetPrepTime(Float_t preptime); virtual voidTQueryResult::SetProcessInfo(Long64_t ent, Float_t cpu = 0., Long64_t siz = -1, Float_t inittime = 0., Float_t proctime = 0.); voidTQueryResult::SetRecvTime(Float_t recvtime); voidTQueryResult::SetTermTime(Float_t termtime). private:. virtual voidRecordEnd(TQueryResult::EQueryStatus status, TList* outlist = 0); virtual voidSetFinalized(); voidSetResultFile(const char* rf); voidSetRunning(Int_t startlog, const char* par, Int_t nwrks); TProofQueryResult(Int_t seqnum, const char* opt, TList* inlist, Long64_t entries, Long64_t first, TDSet* dset, const char* selec, TObject* elist = 0). Data Members; public:. static TQueryResult::EQueryStatusTQueryResult::kAborted; static TObject::(anonymou",MatchSource.WIKI,root/html604/TProofQueryResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofQueryResult.html
https://root.cern/root/html604/TProofQueryResult.html:9390,Testability,log,log,9390,"ueryResult::fEntriesnumber of entries processed; Bool_tTQueryResult::fFinalizedwhether Terminate has been run; Long64_tTQueryResult::fFirstfirst entry processed; Float_tTQueryResult::fInitTimeInitialization time (seconds) (millisec precision); TList*TQueryResult::fInputListinput list; contains also data sets, entry list, ...; TStringTQueryResult::fLibListblank-separated list of libs loaded at fStart; TMacro*TQueryResult::fLogFilefile with log messages from the query; Float_tTQueryResult::fMergeTimeMerging time (seconds) (millisec precision); TStringTNamed::fNameobject identifier; Int_tTQueryResult::fNumMergersNumber of submergers; Int_tTQueryResult::fNumWrksNumber of workers at start; TStringTQueryResult::fOptionsprocessing options + aclic mode (<opt>#<aclic_mode>); TList*TQueryResult::fOutputListoutput list; TStringTQueryResult::fParListcolon-separated list of PAR loaded at fStart; Float_tTQueryResult::fPrepTimePrepare time (seconds) (millisec precision); Float_tTQueryResult::fProcTimeProcessing time (seconds) (millisec precision); Float_tTQueryResult::fRecvTimeTransfer-to-client time (seconds) (millisec precision); TStringTQueryResult::fResultFileURL of the file where results have been archived; TMacro*TQueryResult::fSelecHdrselector header file; TMacro*TQueryResult::fSelecImpselector implementation file; Int_tTQueryResult::fSeqNumquery unique sequential number; TDatimeTQueryResult::fStarttime when processing started; TQueryResult::EQueryStatusTQueryResult::fStatusquery status; Float_tTQueryResult::fTermTimeTerminate time (seconds) (millisec precision); TStringTNamed::fTitleobject title; Float_tTQueryResult::fUsedCPUreal CPU time used (seconds). private:. Int_tfStartLoglog file offset at start. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofQueryResult(Int_t seqnum, const char* opt, TList* inlist, Long64_t entries, Long64_t first, TDSet* dset, const char* selec, TObject* elist = 0); Main constructor. void SetRunning",MatchSource.WIKI,root/html604/TProofQueryResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofQueryResult.html
https://root.cern/root/html604/TProofQueryResult.html:701,Usability,Clear,Clear,701," virtual~TProofQueryResult(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTQueryResult::Browse(TBrowser* b = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTQueryResult::GetBytes() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatimeTQueryResult::GetEndTime() const; Long64_tTQueryResult::GetEntries() const; Long64_tTQ",MatchSource.WIKI,root/html604/TProofQueryResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofQueryResult.html
https://root.cern/root/html604/TProofResources.html:707,Availability,avail,available,707,". TProofResources. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofResources. class TProofResources: public TObject. TProofResources. Abstract base class for PROOF resources.; The class contains common method declarations for derived classes; such as TProofResourcesStatic which reads and interprets static; config files, and returns master, submaster and worker information; using TProofNodeInfo objects. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TProofResources(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObjec",MatchSource.WIKI,root/html604/TProofResources.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResources.html
https://root.cern/root/html604/TProofResources.html:1551,Availability,Error,Error,1551," virtual~TProofResources(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObjec",MatchSource.WIKI,root/html604/TProofResources.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResources.html
https://root.cern/root/html604/TProofResources.html:1680,Availability,error,error,1680," virtual~TProofResources(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObjec",MatchSource.WIKI,root/html604/TProofResources.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResources.html
https://root.cern/root/html604/TProofResources.html:1764,Availability,error,error,1764," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TProofNodeInfo*GetMaster(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TList*GetSubmasters(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TList*GetWorkers(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* cla",MatchSource.WIKI,root/html604/TProofResources.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResources.html
https://root.cern/root/html604/TProofResources.html:475,Modifiability,config,config,475,". TProofResources. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofResources. class TProofResources: public TObject. TProofResources. Abstract base class for PROOF resources.; The class contains common method declarations for derived classes; such as TProofResourcesStatic which reads and interprets static; config files, and returns master, submaster and worker information; using TProofNodeInfo objects. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TProofResources(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObjec",MatchSource.WIKI,root/html604/TProofResources.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResources.html
https://root.cern/root/html604/TProofResources.html:2739,Modifiability,Inherit,InheritsFrom,2739,"ay* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TProofNodeInfo*GetMaster(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TList*GetSubmasters(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TList*GetWorkers(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*",MatchSource.WIKI,root/html604/TProofResources.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResources.html
https://root.cern/root/html604/TProofResources.html:2805,Modifiability,Inherit,InheritsFrom,2805,"nt_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TProofNodeInfo*GetMaster(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TList*GetSubmasters(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TList*GetWorkers(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofResources&oper",MatchSource.WIKI,root/html604/TProofResources.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResources.html
https://root.cern/root/html604/TProofResources.html:6195,Modifiability,Inherit,Inheritance,6195,"onst; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofResources(); TProofResources(const TProofResources&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tfValidkTRUE if resource information was processed correctly. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofResources(); { }. virtual ~TProofResources(); { }. TProofNodeInfo * GetMaster(). TList * GetSubmasters(). TList * GetWorkers(). Bool_t IsValid() const; { return fValid; }. » Author: Paul Nilsson 7/12/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-09-08 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofResources.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResources.html
https://root.cern/root/html604/TProofResources.html:6208,Modifiability,Inherit,Inherited,6208,"onst; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofResources(); TProofResources(const TProofResources&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tfValidkTRUE if resource information was processed correctly. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofResources(); { }. virtual ~TProofResources(); { }. TProofNodeInfo * GetMaster(). TList * GetSubmasters(). TList * GetWorkers(). Bool_t IsValid() const; { return fValid; }. » Author: Paul Nilsson 7/12/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-09-08 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofResources.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResources.html
https://root.cern/root/html604/TProofResources.html:2629,Security,Hash,Hash,2629,"e(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TProofNodeInfo*GetMaster(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TList*GetSubmasters(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TList*GetWorkers(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operat",MatchSource.WIKI,root/html604/TProofResources.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResources.html
https://root.cern/root/html604/TProofResources.html:4788,Testability,Test,TestBit,4788,"s(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofResources&operator=(const TProofResources&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofResources(); TProofResources(const TProofResources&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofResources.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResources.html
https://root.cern/root/html604/TProofResources.html:4827,Testability,Test,TestBits,4827,"s(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofResources&operator=(const TProofResources&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofResources(); TProofResources(const TProofResources&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofResources.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResources.html
https://root.cern/root/html604/TProofResources.html:1011,Usability,Clear,Clear,1011," virtual~TProofResources(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObjec",MatchSource.WIKI,root/html604/TProofResources.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResources.html
https://root.cern/root/html604/TProofResourcesStatic.html:1689,Availability,Error,Error,1689," virtual~TProofResourcesStatic(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject",MatchSource.WIKI,root/html604/TProofResourcesStatic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResourcesStatic.html
https://root.cern/root/html604/TProofResourcesStatic.html:1818,Availability,error,error,1818," virtual~TProofResourcesStatic(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject",MatchSource.WIKI,root/html604/TProofResourcesStatic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResourcesStatic.html
https://root.cern/root/html604/TProofResourcesStatic.html:1902,Availability,error,error,1902," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringGetFileName() const; virtual const char*TObject::GetIconName() const; virtual TProofNodeInfo*GetMaster(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TList*GetSubmasters(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TList*GetWorkers(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::",MatchSource.WIKI,root/html604/TProofResourcesStatic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResourcesStatic.html
https://root.cern/root/html604/TProofResourcesStatic.html:451,Integrability,interface,interface,451,". TProofResourcesStatic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofResourcesStatic. class TProofResourcesStatic: public TProofResources. TProofResourcesStatic. Implementation of PROOF static resources.; The purpose of this class is to provide a standard interface to; static config files. It interprets Proof config files (proof.conf); and sorts the contents into TProofNodeInfo objects. Master info will; be placed in fMaster (of type TProofNodeInfo). Submaster info will; be put in fSubmasterList (a TList of TProofNodeInfo objects), while; workers (and condorworkers) will be placed in fWorkerList (a TList; of TProofNodeInfo objects). Function Members (Methods); public:. virtual~TProofResourcesStatic(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject",MatchSource.WIKI,root/html604/TProofResourcesStatic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResourcesStatic.html
https://root.cern/root/html604/TProofResourcesStatic.html:472,Modifiability,config,config,472,". TProofResourcesStatic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofResourcesStatic. class TProofResourcesStatic: public TProofResources. TProofResourcesStatic. Implementation of PROOF static resources.; The purpose of this class is to provide a standard interface to; static config files. It interprets Proof config files (proof.conf); and sorts the contents into TProofNodeInfo objects. Master info will; be placed in fMaster (of type TProofNodeInfo). Submaster info will; be put in fSubmasterList (a TList of TProofNodeInfo objects), while; workers (and condorworkers) will be placed in fWorkerList (a TList; of TProofNodeInfo objects). Function Members (Methods); public:. virtual~TProofResourcesStatic(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject",MatchSource.WIKI,root/html604/TProofResourcesStatic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResourcesStatic.html
https://root.cern/root/html604/TProofResourcesStatic.html:506,Modifiability,config,config,506,". TProofResourcesStatic. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofResourcesStatic. class TProofResourcesStatic: public TProofResources. TProofResourcesStatic. Implementation of PROOF static resources.; The purpose of this class is to provide a standard interface to; static config files. It interprets Proof config files (proof.conf); and sorts the contents into TProofNodeInfo objects. Master info will; be placed in fMaster (of type TProofNodeInfo). Submaster info will; be put in fSubmasterList (a TList of TProofNodeInfo objects), while; workers (and condorworkers) will be placed in fWorkerList (a TList; of TProofNodeInfo objects). Function Members (Methods); public:. virtual~TProofResourcesStatic(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject",MatchSource.WIKI,root/html604/TProofResourcesStatic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResourcesStatic.html
https://root.cern/root/html604/TProofResourcesStatic.html:2905,Modifiability,Inherit,InheritsFrom,2905,"); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringGetFileName() const; virtual const char*TObject::GetIconName() const; virtual TProofNodeInfo*GetMaster(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TList*GetSubmasters(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TList*GetWorkers(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTProofResources::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](",MatchSource.WIKI,root/html604/TProofResourcesStatic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResourcesStatic.html
https://root.cern/root/html604/TProofResourcesStatic.html:2971,Modifiability,Inherit,InheritsFrom,2971,"py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringGetFileName() const; virtual const char*TObject::GetIconName() const; virtual TProofNodeInfo*GetMaster(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TList*GetSubmasters(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TList*GetWorkers(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTProofResources::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TPr",MatchSource.WIKI,root/html604/TProofResourcesStatic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResourcesStatic.html
https://root.cern/root/html604/TProofResourcesStatic.html:7013,Modifiability,config,config,7013,"ic TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TProofResourcesStatic::EInfoTypekHost; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TProofResourcesStatic::EInfoTypekNodeType; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TProofResourcesStatic::EInfoTypekOption; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTProofResources::fValidkTRUE if resource information was processed correctly. private:. TStringfFileNameConfig file name; Bool_tfFoundMasterkTRUE if config file has master info; TProofNodeInfo*fMasterMaster node info; TList*fSubmasterListNode info list with all submasters; TList*fWorkerListNode info list with all workers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofResourcesStatic(); This ctor is used in TProofServ::Setup() in combination with GetWorkDir(); for a quick scan of the config file to retrieve the work directory. TProofResourcesStatic(const char* confDir, const char* fileName); Using this ctor will retrieve all information in the config file; and store it in fMaster, fSubmasterList and fWorkerList,; condorworkers will be stored in the fWorkerList. ~TProofResourcesStatic(); Destructor. void InitResources(); Create master node info and submaster/worker lists,; and set default values. TProofNodeInfo * GetMaster(); Get the master node. Only return the master info if it was set; in the config file. TList * GetSubmasters(); Get the list of submaster nodes. TList * GetWorkers(void); Get the list of worker nodes. Bool_t ReadConfigF",MatchSource.WIKI,root/html604/TProofResourcesStatic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResourcesStatic.html
https://root.cern/root/html604/TProofResourcesStatic.html:7202,Modifiability,Inherit,Inheritance,7202,"usBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TProofResourcesStatic::EInfoTypekNodeType; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TProofResourcesStatic::EInfoTypekOption; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTProofResources::fValidkTRUE if resource information was processed correctly. private:. TStringfFileNameConfig file name; Bool_tfFoundMasterkTRUE if config file has master info; TProofNodeInfo*fMasterMaster node info; TList*fSubmasterListNode info list with all submasters; TList*fWorkerListNode info list with all workers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofResourcesStatic(); This ctor is used in TProofServ::Setup() in combination with GetWorkDir(); for a quick scan of the config file to retrieve the work directory. TProofResourcesStatic(const char* confDir, const char* fileName); Using this ctor will retrieve all information in the config file; and store it in fMaster, fSubmasterList and fWorkerList,; condorworkers will be stored in the fWorkerList. ~TProofResourcesStatic(); Destructor. void InitResources(); Create master node info and submaster/worker lists,; and set default values. TProofNodeInfo * GetMaster(); Get the master node. Only return the master info if it was set; in the config file. TList * GetSubmasters(); Get the list of submaster nodes. TList * GetWorkers(void); Get the list of worker nodes. Bool_t ReadConfigFile(const char* confDir, const char* fileName); Read the PROOF config file and fill the master and worker list. void SetOption(TProofNodeInfo* nodeinfo, const ",MatchSource.WIKI,root/html604/TProofResourcesStatic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResourcesStatic.html
https://root.cern/root/html604/TProofResourcesStatic.html:7215,Modifiability,Inherit,Inherited,7215,"usBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TProofResourcesStatic::EInfoTypekNodeType; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TProofResourcesStatic::EInfoTypekOption; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTProofResources::fValidkTRUE if resource information was processed correctly. private:. TStringfFileNameConfig file name; Bool_tfFoundMasterkTRUE if config file has master info; TProofNodeInfo*fMasterMaster node info; TList*fSubmasterListNode info list with all submasters; TList*fWorkerListNode info list with all workers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofResourcesStatic(); This ctor is used in TProofServ::Setup() in combination with GetWorkDir(); for a quick scan of the config file to retrieve the work directory. TProofResourcesStatic(const char* confDir, const char* fileName); Using this ctor will retrieve all information in the config file; and store it in fMaster, fSubmasterList and fWorkerList,; condorworkers will be stored in the fWorkerList. ~TProofResourcesStatic(); Destructor. void InitResources(); Create master node info and submaster/worker lists,; and set default values. TProofNodeInfo * GetMaster(); Get the master node. Only return the master info if it was set; in the config file. TList * GetSubmasters(); Get the list of submaster nodes. TList * GetWorkers(void); Get the list of worker nodes. Bool_t ReadConfigFile(const char* confDir, const char* fileName); Read the PROOF config file and fill the master and worker list. void SetOption(TProofNodeInfo* nodeinfo, const ",MatchSource.WIKI,root/html604/TProofResourcesStatic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResourcesStatic.html
https://root.cern/root/html604/TProofResourcesStatic.html:7403,Modifiability,config,config,7403,"nced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TProofResourcesStatic::EInfoTypekNodeType; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TProofResourcesStatic::EInfoTypekOption; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTProofResources::fValidkTRUE if resource information was processed correctly. private:. TStringfFileNameConfig file name; Bool_tfFoundMasterkTRUE if config file has master info; TProofNodeInfo*fMasterMaster node info; TList*fSubmasterListNode info list with all submasters; TList*fWorkerListNode info list with all workers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofResourcesStatic(); This ctor is used in TProofServ::Setup() in combination with GetWorkDir(); for a quick scan of the config file to retrieve the work directory. TProofResourcesStatic(const char* confDir, const char* fileName); Using this ctor will retrieve all information in the config file; and store it in fMaster, fSubmasterList and fWorkerList,; condorworkers will be stored in the fWorkerList. ~TProofResourcesStatic(); Destructor. void InitResources(); Create master node info and submaster/worker lists,; and set default values. TProofNodeInfo * GetMaster(); Get the master node. Only return the master info if it was set; in the config file. TList * GetSubmasters(); Get the list of submaster nodes. TList * GetWorkers(void); Get the list of worker nodes. Bool_t ReadConfigFile(const char* confDir, const char* fileName); Read the PROOF config file and fill the master and worker list. void SetOption(TProofNodeInfo* nodeinfo, const TString& option, const TString& value); Static method to set the node info options. TProofNodeInfo * CreateNodeInfo(const ",MatchSource.WIKI,root/html604/TProofResourcesStatic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResourcesStatic.html
https://root.cern/root/html604/TProofResourcesStatic.html:7566,Modifiability,config,config,7566,"Object::EStatusBitsTObject::kObjInCanvas; static TProofResourcesStatic::EInfoTypekOption; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTProofResources::fValidkTRUE if resource information was processed correctly. private:. TStringfFileNameConfig file name; Bool_tfFoundMasterkTRUE if config file has master info; TProofNodeInfo*fMasterMaster node info; TList*fSubmasterListNode info list with all submasters; TList*fWorkerListNode info list with all workers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofResourcesStatic(); This ctor is used in TProofServ::Setup() in combination with GetWorkDir(); for a quick scan of the config file to retrieve the work directory. TProofResourcesStatic(const char* confDir, const char* fileName); Using this ctor will retrieve all information in the config file; and store it in fMaster, fSubmasterList and fWorkerList,; condorworkers will be stored in the fWorkerList. ~TProofResourcesStatic(); Destructor. void InitResources(); Create master node info and submaster/worker lists,; and set default values. TProofNodeInfo * GetMaster(); Get the master node. Only return the master info if it was set; in the config file. TList * GetSubmasters(); Get the list of submaster nodes. TList * GetWorkers(void); Get the list of worker nodes. Bool_t ReadConfigFile(const char* confDir, const char* fileName); Read the PROOF config file and fill the master and worker list. void SetOption(TProofNodeInfo* nodeinfo, const TString& option, const TString& value); Static method to set the node info options. TProofNodeInfo * CreateNodeInfo(const TString& name); Fill out the preliminary TProofNodeInfo structure. EInfoType GetInfoType(const TString& word). TProofResourcesStatic(). TString GetFileName() const; { return fFileName; }. » Author: Paul Nilsson 7/12/",MatchSource.WIKI,root/html604/TProofResourcesStatic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResourcesStatic.html
https://root.cern/root/html604/TProofResourcesStatic.html:7924,Modifiability,config,config,7924,":. Bool_tTProofResources::fValidkTRUE if resource information was processed correctly. private:. TStringfFileNameConfig file name; Bool_tfFoundMasterkTRUE if config file has master info; TProofNodeInfo*fMasterMaster node info; TList*fSubmasterListNode info list with all submasters; TList*fWorkerListNode info list with all workers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofResourcesStatic(); This ctor is used in TProofServ::Setup() in combination with GetWorkDir(); for a quick scan of the config file to retrieve the work directory. TProofResourcesStatic(const char* confDir, const char* fileName); Using this ctor will retrieve all information in the config file; and store it in fMaster, fSubmasterList and fWorkerList,; condorworkers will be stored in the fWorkerList. ~TProofResourcesStatic(); Destructor. void InitResources(); Create master node info and submaster/worker lists,; and set default values. TProofNodeInfo * GetMaster(); Get the master node. Only return the master info if it was set; in the config file. TList * GetSubmasters(); Get the list of submaster nodes. TList * GetWorkers(void); Get the list of worker nodes. Bool_t ReadConfigFile(const char* confDir, const char* fileName); Read the PROOF config file and fill the master and worker list. void SetOption(TProofNodeInfo* nodeinfo, const TString& option, const TString& value); Static method to set the node info options. TProofNodeInfo * CreateNodeInfo(const TString& name); Fill out the preliminary TProofNodeInfo structure. EInfoType GetInfoType(const TString& word). TProofResourcesStatic(). TString GetFileName() const; { return fFileName; }. » Author: Paul Nilsson 7/12/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofResourcesStatic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResourcesStatic.html
https://root.cern/root/html604/TProofResourcesStatic.html:8132,Modifiability,config,config,8132,":. Bool_tTProofResources::fValidkTRUE if resource information was processed correctly. private:. TStringfFileNameConfig file name; Bool_tfFoundMasterkTRUE if config file has master info; TProofNodeInfo*fMasterMaster node info; TList*fSubmasterListNode info list with all submasters; TList*fWorkerListNode info list with all workers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofResourcesStatic(); This ctor is used in TProofServ::Setup() in combination with GetWorkDir(); for a quick scan of the config file to retrieve the work directory. TProofResourcesStatic(const char* confDir, const char* fileName); Using this ctor will retrieve all information in the config file; and store it in fMaster, fSubmasterList and fWorkerList,; condorworkers will be stored in the fWorkerList. ~TProofResourcesStatic(); Destructor. void InitResources(); Create master node info and submaster/worker lists,; and set default values. TProofNodeInfo * GetMaster(); Get the master node. Only return the master info if it was set; in the config file. TList * GetSubmasters(); Get the list of submaster nodes. TList * GetWorkers(void); Get the list of worker nodes. Bool_t ReadConfigFile(const char* confDir, const char* fileName); Read the PROOF config file and fill the master and worker list. void SetOption(TProofNodeInfo* nodeinfo, const TString& option, const TString& value); Static method to set the node info options. TProofNodeInfo * CreateNodeInfo(const TString& name); Fill out the preliminary TProofNodeInfo structure. EInfoType GetInfoType(const TString& word). TProofResourcesStatic(). TString GetFileName() const; { return fFileName; }. » Author: Paul Nilsson 7/12/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofResourcesStatic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResourcesStatic.html
https://root.cern/root/html604/TProofResourcesStatic.html:2795,Security,Hash,Hash,2795,"char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringGetFileName() const; virtual const char*TObject::GetIconName() const; virtual TProofNodeInfo*GetMaster(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TList*GetSubmasters(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TList*GetWorkers(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTProofResources::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); voi",MatchSource.WIKI,root/html604/TProofResourcesStatic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResourcesStatic.html
https://root.cern/root/html604/TProofResourcesStatic.html:4983,Testability,Test,TestBit,4983,"TObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofResourcesStatic&operator=(const TProofResourcesStatic&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofResourcesStatic(); TProofResourcesStatic(const TProofResourcesStatic&); TProofResourcesStatic(const char* confDir, const char* fileName); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofResourcesStatic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResourcesStatic.html
https://root.cern/root/html604/TProofResourcesStatic.html:5022,Testability,Test,TestBits,5022,"TObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofResourcesStatic&operator=(const TProofResourcesStatic&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofResourcesStatic(); TProofResourcesStatic(const TProofResourcesStatic&); TProofResourcesStatic(const char* confDir, const char* fileName); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofResourcesStatic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResourcesStatic.html
https://root.cern/root/html604/TProofResourcesStatic.html:1149,Usability,Clear,Clear,1149," virtual~TProofResourcesStatic(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject",MatchSource.WIKI,root/html604/TProofResourcesStatic.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofResourcesStatic.html
https://root.cern/root/html604/TProofServ.html:3959,Availability,Error,Error,3959,"ject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidFilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFlushLogFile(); TObject*Get(const char* namecycle); Int_tGetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp()",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:4179,Availability,error,error,4179,"voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidFilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFlushLogFile(); TObject*Get(const char* namecycle); Int_tGetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; TProofLockPath*GetCacheLock(); const char*GetConfDir() const; const char*GetConfFile() const; Float_tGetCpuTime() const; co",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:4263,Availability,error,error,4263,"r* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidFilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFlushLogFile(); TObject*Get(const char* namecycle); Int_tGetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; TProofLockPath*GetCacheLock(); const char*GetConfDir() const; const char*GetConfFile() const; Float_tGetCpuTime() const; const char*GetDataDir() const; const char*GetDataDirOpts() const; static TMap*GetDataS",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:4407,Availability,error,error,4407,"ect::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidFilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFlushLogFile(); TObject*Get(const char* namecycle); Int_tGetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; TProofLockPath*GetCacheLock(); const char*GetConfDir() const; const char*GetConfFile() const; Float_tGetCpuTime() const; const char*GetDataDir() const; const char*GetDataDirOpts() const; static TMap*GetDataSetNodeMap(TFileCollection* fc, TString& emsg); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Float_tGetE",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:9961,Availability,error,error,9961,"GNAL ; static voidTApplication::NeedGraphicsLibs(); Bool_tTApplication::NoLogoOpt() const; Bool_tTApplication::NoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofServ&operator=(const TProofServ&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); Int_tReceiveFile(const char* file, Bool_t bin, Long64_t size); virtual voidTObject::RecursiveRemove(TObject* obj); static Int_tRegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); virtual voidReleaseWorker(const char*); virtual voidTApplication::RemoveIdleTimer(); voidReset(const char* dir); voidTObject::ResetBit(UInt_t f); static voidResolveKeywords(TString& fname, const char* path = 0); voidRestartComputeTime(); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidRun(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtua",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:10082,Availability,error,error,10082," const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofServ&operator=(const TProofServ&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); Int_tReceiveFile(const char* file, Bool_t bin, Long64_t size); virtual voidTObject::RecursiveRemove(TObject* obj); static Int_tRegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); virtual voidReleaseWorker(const char*); virtual voidTApplication::RemoveIdleTimer(); voidReset(const char* dir); voidTObject::ResetBit(UInt_t f); static voidResolveKeywords(TString& fname, const char* path = 0); voidRestartComputeTime(); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidRun(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tSendAsynMessage(const char* msg, Bool_t lf = kTRUE); virtual voidSendLogFile(Int_t status = 0, Int_t start = -1, I",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:14813,Availability,error,error,14813,"st char* slot); static voidTApplication::Close(TApplication* app); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidDeletePlayer(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Int_tFork(); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; Int_tGetSessionStatus(); virtual voidHandleArchive(TMessage* mess, TString* slb = 0); virtual Int_tHandleCache(TMessage* mess, TString* slb = 0); virtual voidHandleCheckFile(TMessage* mess, TString* slb = 0); virtual Int_tHandleDataSets(TMessage* mess, TString* slb = 0); virtual voidHandleFork(TMessage* mess); virtual Int_tHandleLibIncPath(TMessage* mess); virtual voidHandleProcess(TMessage* mess, TString* slb = 0); virtual voidHandleQueryList(TMessage* mess); virtual voidHandleRemove(TMessage* mess, TString* slb = 0); virtual voidHandleRetrieve(TMessage* mess, TString* slb = 0); virtual voidHandleSubmerger(TMessage* mess); virtual Int_tHandleWorkerLists(TMessage* mess); virtual voidTApplication::Help(const char* line); Bool_tIsIdle(); virtual voidTApplication::LoadGraphicsLibs(); virtual voidTApplication::MakeBatch(); virtual voidMakePlayer(); voidTObject::MakeZombie(); static TApplication*TApplication::Open(const char* url, Int_t debug, const char* script); static Int_tTApplication::ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); virtual voidProcessNext(TString* slb = 0); virtual Long_tTApplication::ProcessRemote(const char* line, Int_t* error = 0); voidTApplication::SetSignalHandler(TSignalHandler* sh); virtual Int_tSetup(); Int_tSetupCommon(); Bool_tUnlinkDataDir(const char* path).",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:17527,Availability,avail,available,17527,"ymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TApplication::EStatusBitsTApplication::kProcessRemotely; static TProofServ::EQueryActionkQueryEnqueued; static TProofServ::EQueryActionkQueryModify; static TProofServ::EQueryActionkQueryOK; static TProofServ::EQueryActionkQueryStop; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static Long64_tfgLastEntryLast entry before exception; static TStringfgLastMsgMessage about status before exception. private:. Int_tfActSessionsTotal number of active PROOF sessions on the cluster; TStringfAdminPathadmin path for this session; TStringfArchivePathdefault archive path; TStringfCacheDirdirectory containing cache of user files; TProofLockPath*fCacheLockcache dir locker; Int_tfCompressMsgCompression level for messages; TStopwatchfComputemeasures time spent processing a packet; TStringfConfDirdirectory containing cluster config information; TStringfConfFilefile containing config information; Float_tfCpuTimeCPU time spent executing commands; TStringfDataDirdirectory containing data files produced during queries; TStringfDataDirOptsUrl type options for fDataDir; TStringfDataSetDirdirectory containing info about know",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:22665,Availability,error,error,22665,"tatic Float_tfgMemHWMThreshold fraction of max for warning and finer monitoring; static Float_tfgMemStopFraction of max for stop processing; static Int_tfgRecursiveKeep track of recursive inputs during processing; static Long_tfgResMemMaxHard limit on the resident memory checked; static TStringfgSysLogEntitylogging entity (<user>:<group>); static TStringfgSysLogServicename of the syslog service (eg: proofm-0, proofw-0.67); static Long_tfgVirtMemMaxHard limit enforced by the system (in kB). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Create an application environment. The TProofServ; environment provides an eventloop via inheritance of TApplication.; Actual server creation work is done in CreateServer() to allow; overloading. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; to the worker or submaster nodes.; Return 0 on success, -1 on error. ~TProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. Int_t CatMotd(); Print message of the day (in the file pointed by the env PROOFMOTD; or from fConfDir/etc/proof/motd). The motd is not shown more than; once a day. If the file pointed by env PROOFNOPROOF exists (or the; file fConfDir/etc/proof/noproof exists), show its contents and close; the connection. TObject * Get(const char* namecycle); Get object with name ""name;cycle"" (e.g. ""aap;2"") from master or client.; This method is called by TDirectory::Get() in case the object can not; be found locally. void RestartComputeTime(); Reset the compute time. TDSetElement * GetNextPacket(Long64_t totalEntries = -1); Get next range of entries to be processed on this server. void GetOptions(Int_t* argc, char** argv); Get and handle command line options. Fixed format:; ""proofserv""|""proofslave"" <confdir>. void HandleSocketInput(); Handle input coming from the client or from the master serv",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:24335,Availability,alive,alive,24335,"ime. TDSetElement * GetNextPacket(Long64_t totalEntries = -1); Get next range of entries to be processed on this server. void GetOptions(Int_t* argc, char** argv); Get and handle command line options. Fixed format:; ""proofserv""|""proofslave"" <confdir>. void HandleSocketInput(); Handle input coming from the client or from the master server. Int_t HandleSocketInput(TMessage* mess, Bool_t all); Process input coming from the client or from the master server.; If 'all' is kFALSE, process only those messages that can be handled; during query processing.; Returns -1 if the message could not be processed, <-1 if something went; wrong. Returns 1 if the action may have changed the parallel state.; Returns 2 if the message has to be enqueued.; Returns 0 otherwise. Bool_t AcceptResults(Int_t connections, TVirtualProofPlayer* mergerPlayer); Accept and merge results from a set of workers. void HandleUrgentData(); Handle Out-Of-Band data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore (i.e. when kKeepAlive; has failed). Bool_t IsParallel() const; True if in parallel mode. void Print(Option_t* option = """") const; Print status of slave server. void RedirectOutput(const char* dir = 0, const char* mode = ""w""); Redirect stdout to a log file. This log file will be flushed to the; client or master after each command. void Reset(const char* dir); Reset PROOF environment to be ready for execution of next command. Int_t ReceiveFile(const char* file, Bool_t bin, Long64_t size); Receive a file, either sent by a client or a master server.; If bin is true it is a binary file, other wise it is an ASCII; file and we need to check for Windows \r tokens. Returns -1 in; case of error, 0 otherwise. void Run(Bool_t retrn = kFALSE); Main server eventloop. void SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); Send log file to master.; If start > -1 send only bytes in the range from start to end,; if end <= start send everything from start. v",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:25037,Availability,error,error,25037,"age has to be enqueued.; Returns 0 otherwise. Bool_t AcceptResults(Int_t connections, TVirtualProofPlayer* mergerPlayer); Accept and merge results from a set of workers. void HandleUrgentData(); Handle Out-Of-Band data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore (i.e. when kKeepAlive; has failed). Bool_t IsParallel() const; True if in parallel mode. void Print(Option_t* option = """") const; Print status of slave server. void RedirectOutput(const char* dir = 0, const char* mode = ""w""); Redirect stdout to a log file. This log file will be flushed to the; client or master after each command. void Reset(const char* dir); Reset PROOF environment to be ready for execution of next command. Int_t ReceiveFile(const char* file, Bool_t bin, Long64_t size); Receive a file, either sent by a client or a master server.; If bin is true it is a binary file, other wise it is an ASCII; file and we need to check for Windows \r tokens. Returns -1 in; case of error, 0 otherwise. void Run(Bool_t retrn = kFALSE); Main server eventloop. void SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); Send log file to master.; If start > -1 send only bytes in the range from start to end,; if end <= start send everything from start. void SendStatistics(); Send statistics of slave server to master or client. void SendParallel(Bool_t async = kFALSE); Send number of parallel nodes to master or client. Int_t UnloadPackage(const char* package); Removes link to package in working directory,; removes entry from include path,; removes entry from enabled package list,; does not currently remove entry from interpreter include path.; Returns -1 in case of error, 0 otherwise. Int_t UnloadPackages(); Unloads all enabled packages. Returns -1 in case of error, 0 otherwise. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on failure. Int_t SetupCommon(); Common part (between TProofServ and TXProofServ) of the setup pha",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:25736,Availability,error,error,25736," to be ready for execution of next command. Int_t ReceiveFile(const char* file, Bool_t bin, Long64_t size); Receive a file, either sent by a client or a master server.; If bin is true it is a binary file, other wise it is an ASCII; file and we need to check for Windows \r tokens. Returns -1 in; case of error, 0 otherwise. void Run(Bool_t retrn = kFALSE); Main server eventloop. void SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); Send log file to master.; If start > -1 send only bytes in the range from start to end,; if end <= start send everything from start. void SendStatistics(); Send statistics of slave server to master or client. void SendParallel(Bool_t async = kFALSE); Send number of parallel nodes to master or client. Int_t UnloadPackage(const char* package); Removes link to package in working directory,; removes entry from include path,; removes entry from enabled package list,; does not currently remove entry from interpreter include path.; Returns -1 in case of error, 0 otherwise. Int_t UnloadPackages(); Unloads all enabled packages. Returns -1 in case of error, 0 otherwise. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on failure. Int_t SetupCommon(); Common part (between TProofServ and TXProofServ) of the setup phase.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. Bool_t UnlinkDataDir(const char* path); Scan recursively the datadir and unlink it if empty; Return kTRUE if it can be unlinked, kFALSE otherwise. Bool_t IsActive(); Static function that returns kTRUE in case we are a PROOF server. TProofServ * This(); Static function returning pointer to global object gProofServ.; Mainly for use via CINT, where the gProofServ symbol might be; deleted from the symbol table. Int_t OldAuthSetup(TString& wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TProofQueryResult * MakeQueryResult(Long64_t nentries, const cha",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:25832,Availability,error,error,25832,"4_t size); Receive a file, either sent by a client or a master server.; If bin is true it is a binary file, other wise it is an ASCII; file and we need to check for Windows \r tokens. Returns -1 in; case of error, 0 otherwise. void Run(Bool_t retrn = kFALSE); Main server eventloop. void SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); Send log file to master.; If start > -1 send only bytes in the range from start to end,; if end <= start send everything from start. void SendStatistics(); Send statistics of slave server to master or client. void SendParallel(Bool_t async = kFALSE); Send number of parallel nodes to master or client. Int_t UnloadPackage(const char* package); Removes link to package in working directory,; removes entry from include path,; removes entry from enabled package list,; does not currently remove entry from interpreter include path.; Returns -1 in case of error, 0 otherwise. Int_t UnloadPackages(); Unloads all enabled packages. Returns -1 in case of error, 0 otherwise. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on failure. Int_t SetupCommon(); Common part (between TProofServ and TXProofServ) of the setup phase.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. Bool_t UnlinkDataDir(const char* path); Scan recursively the datadir and unlink it if empty; Return kTRUE if it can be unlinked, kFALSE otherwise. Bool_t IsActive(); Static function that returns kTRUE in case we are a PROOF server. TProofServ * This(); Static function returning pointer to global object gProofServ.; Mainly for use via CINT, where the gProofServ symbol might be; deleted from the symbol table. Int_t OldAuthSetup(TString& wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TProofQueryResult * MakeQueryResult(Long64_t nentries, const char* opt, TList* inl, Long64_t first, TDSet* dset, const char* selec, TObject* elist); Create a TP",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:25940,Availability,failure,failure,25940,"ry file, other wise it is an ASCII; file and we need to check for Windows \r tokens. Returns -1 in; case of error, 0 otherwise. void Run(Bool_t retrn = kFALSE); Main server eventloop. void SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); Send log file to master.; If start > -1 send only bytes in the range from start to end,; if end <= start send everything from start. void SendStatistics(); Send statistics of slave server to master or client. void SendParallel(Bool_t async = kFALSE); Send number of parallel nodes to master or client. Int_t UnloadPackage(const char* package); Removes link to package in working directory,; removes entry from include path,; removes entry from enabled package list,; does not currently remove entry from interpreter include path.; Returns -1 in case of error, 0 otherwise. Int_t UnloadPackages(); Unloads all enabled packages. Returns -1 in case of error, 0 otherwise. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on failure. Int_t SetupCommon(); Common part (between TProofServ and TXProofServ) of the setup phase.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. Bool_t UnlinkDataDir(const char* path); Scan recursively the datadir and unlink it if empty; Return kTRUE if it can be unlinked, kFALSE otherwise. Bool_t IsActive(); Static function that returns kTRUE in case we are a PROOF server. TProofServ * This(); Static function returning pointer to global object gProofServ.; Mainly for use via CINT, where the gProofServ symbol might be; deleted from the symbol table. Int_t OldAuthSetup(TString& wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TProofQueryResult * MakeQueryResult(Long64_t nentries, const char* opt, TList* inl, Long64_t first, TDSet* dset, const char* selec, TObject* elist); Create a TProofQueryResult instance for this query. void SetQueryRunning(TProofQueryResult* pq); Set query in r",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:26067,Availability,error,error,26067,". void Run(Bool_t retrn = kFALSE); Main server eventloop. void SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); Send log file to master.; If start > -1 send only bytes in the range from start to end,; if end <= start send everything from start. void SendStatistics(); Send statistics of slave server to master or client. void SendParallel(Bool_t async = kFALSE); Send number of parallel nodes to master or client. Int_t UnloadPackage(const char* package); Removes link to package in working directory,; removes entry from include path,; removes entry from enabled package list,; does not currently remove entry from interpreter include path.; Returns -1 in case of error, 0 otherwise. Int_t UnloadPackages(); Unloads all enabled packages. Returns -1 in case of error, 0 otherwise. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on failure. Int_t SetupCommon(); Common part (between TProofServ and TXProofServ) of the setup phase.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. Bool_t UnlinkDataDir(const char* path); Scan recursively the datadir and unlink it if empty; Return kTRUE if it can be unlinked, kFALSE otherwise. Bool_t IsActive(); Static function that returns kTRUE in case we are a PROOF server. TProofServ * This(); Static function returning pointer to global object gProofServ.; Mainly for use via CINT, where the gProofServ symbol might be; deleted from the symbol table. Int_t OldAuthSetup(TString& wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TProofQueryResult * MakeQueryResult(Long64_t nentries, const char* opt, TList* inl, Long64_t first, TDSet* dset, const char* selec, TObject* elist); Create a TProofQueryResult instance for this query. void SetQueryRunning(TProofQueryResult* pq); Set query in running state. void HandleArchive(TMessage* mess, TString* slb = 0); Handle archive request. TMap * GetDataSetNodeMap(TFileColl",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:27252,Availability,error,error,27252,"nlinked, kFALSE otherwise. Bool_t IsActive(); Static function that returns kTRUE in case we are a PROOF server. TProofServ * This(); Static function returning pointer to global object gProofServ.; Mainly for use via CINT, where the gProofServ symbol might be; deleted from the symbol table. Int_t OldAuthSetup(TString& wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TProofQueryResult * MakeQueryResult(Long64_t nentries, const char* opt, TList* inl, Long64_t first, TDSet* dset, const char* selec, TObject* elist); Create a TProofQueryResult instance for this query. void SetQueryRunning(TProofQueryResult* pq); Set query in running state. void HandleArchive(TMessage* mess, TString* slb = 0); Handle archive request. TMap * GetDataSetNodeMap(TFileCollection* fc, TString& emsg); Get a map {server-name, list-of-files} for collection 'fc' to be used in; TPacketizerFile. Returns a pointer to the map (ownership of the caller).; Or (TMap *)0 and an error message in emsg. void HandleProcess(TMessage* mess, TString* slb = 0); Handle processing request. Int_t SendResults(TSocket* sock, TList* outlist = 0, TQueryResult* pq = 0); Sends all objects from the given list to the specified socket. void ProcessNext(TString* slb = 0); process the next query from the queue of submitted jobs.; to be called on the top master only. Int_t RegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); Register TFileCollections in 'out' as datasets according to the rules in 'in'. void HandleQueryList(TMessage* mess); Handle request for list of queries. void HandleRemove(TMessage* mess, TString* slb = 0); Handle remove request. void HandleRetrieve(TMessage* mess, TString* slb = 0); Handle retrieve request. Int_t HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:28541,Availability,Error,ErrorHandler,28541," called on the top master only. Int_t RegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); Register TFileCollections in 'out' as datasets according to the rules in 'in'. void HandleQueryList(TMessage* mess); Handle request for list of queries. void HandleRemove(TMessage* mess, TString* slb = 0); Handle remove request. void HandleRetrieve(TMessage* mess, TString* slb = 0); Handle retrieve request. Int_t HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:28631,Availability,error,error,28631," called on the top master only. Int_t RegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); Register TFileCollections in 'out' as datasets according to the rules in 'in'. void HandleQueryList(TMessage* mess); Handle request for list of queries. void HandleRemove(TMessage* mess, TString* slb = 0); Handle remove request. void HandleRetrieve(TMessage* mess, TString* slb = 0); Handle retrieve request. Int_t HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:30866,Availability,recover,recover,30866,"up in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the format:; CREATE TABLE proofpriority (; id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,; group VARCHAR(32) NOT NULL,; priority INT; ). Int_t SendAsynMessage(const char* msg, Bool_t lf = kTRUE); Send an asychronous message to the master / client .; Masters will forward up the message to the client.; The client prints 'msg' of stderr and adds a '\n'/'\r' depending on; 'lf' being kTRUE (default) or kFALSE.; Returns the return value from TSocket::Send(TMessage &) . void FlushLogFile(); Reposition the read pointer in the log file to the very end.; This allows to ""hide"" useful debug messages during normal operations; while preserving the possibility to have them in case of problems. void TruncateLogFile(); Truncate the log file to the 80% of the required max size if this; is set. void HandleException(Int_t sig); Exception handler: we do not try to recover here, just exit. Int_t HandleDataSets(TMessage* mess, TString* slb = 0); Handle here requests about datasets. void HandleSubmerger(TMessage* mess); Handle a message of type kPROOF_SUBMERGER. void HandleFork(TMessage* mess); Cloning itself via fork. Not implemented. Int_t Fork(); Fork a child.; If successful, return 0 in the child process and the child pid in the parent; process. The child pid is registered for reaping.; Return <0 in the parent process in case of failure. void ResolveKeywords(TString& fname, const char* path = 0); Replace <ord>, <user>, <u>, <group>, <stag>, <qnum>, <file>, <rver> and; <build> placeholders in fname.; Here, <rver> is the root version in integer form, e.g. 53403, and <build> a; string includign version, architecture and compiler version, e.g.; '53403_linuxx8664gcc_gcc46' . Int_t GetSessionStatus(); Return the status of this session:; 0 idle; 1 running; 2 being terminated (currently unused); 3 queued; 4 idle timed-out (not se",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:31341,Availability,failure,failure,31341," prints 'msg' of stderr and adds a '\n'/'\r' depending on; 'lf' being kTRUE (default) or kFALSE.; Returns the return value from TSocket::Send(TMessage &) . void FlushLogFile(); Reposition the read pointer in the log file to the very end.; This allows to ""hide"" useful debug messages during normal operations; while preserving the possibility to have them in case of problems. void TruncateLogFile(); Truncate the log file to the 80% of the required max size if this; is set. void HandleException(Int_t sig); Exception handler: we do not try to recover here, just exit. Int_t HandleDataSets(TMessage* mess, TString* slb = 0); Handle here requests about datasets. void HandleSubmerger(TMessage* mess); Handle a message of type kPROOF_SUBMERGER. void HandleFork(TMessage* mess); Cloning itself via fork. Not implemented. Int_t Fork(); Fork a child.; If successful, return 0 in the child process and the child pid in the parent; process. The child pid is registered for reaping.; Return <0 in the parent process in case of failure. void ResolveKeywords(TString& fname, const char* path = 0); Replace <ord>, <user>, <u>, <group>, <stag>, <qnum>, <file>, <rver> and; <build> placeholders in fname.; Here, <rver> is the root version in integer form, e.g. 53403, and <build> a; string includign version, architecture and compiler version, e.g.; '53403_linuxx8664gcc_gcc46' . Int_t GetSessionStatus(); Return the status of this session:; 0 idle; 1 running; 2 being terminated (currently unused); 3 queued; 4 idle timed-out (not set in here but in TIdleTOTimer::Notify); This is typically run in the reader thread, so access needs to be protected. Int_t UpdateSessionStatus(Int_t xst = -1); Update the session status in the relevant file. The status is taken from; GetSessionStatus() unless xst >= 0, in which case xst is used.; Return 0 on success, -errno if the file could not be opened. Bool_t IsIdle(); Return the idle status. void SetIdle(Bool_t st = kTRUE); Change the idle status. Bool_t IsWaiting(); Ret",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:31966,Deployability,Update,UpdateSessionStatus,31966,"(TMessage* mess); Handle a message of type kPROOF_SUBMERGER. void HandleFork(TMessage* mess); Cloning itself via fork. Not implemented. Int_t Fork(); Fork a child.; If successful, return 0 in the child process and the child pid in the parent; process. The child pid is registered for reaping.; Return <0 in the parent process in case of failure. void ResolveKeywords(TString& fname, const char* path = 0); Replace <ord>, <user>, <u>, <group>, <stag>, <qnum>, <file>, <rver> and; <build> placeholders in fname.; Here, <rver> is the root version in integer form, e.g. 53403, and <build> a; string includign version, architecture and compiler version, e.g.; '53403_linuxx8664gcc_gcc46' . Int_t GetSessionStatus(); Return the status of this session:; 0 idle; 1 running; 2 being terminated (currently unused); 3 queued; 4 idle timed-out (not set in here but in TIdleTOTimer::Notify); This is typically run in the reader thread, so access needs to be protected. Int_t UpdateSessionStatus(Int_t xst = -1); Update the session status in the relevant file. The status is taken from; GetSessionStatus() unless xst >= 0, in which case xst is used.; Return 0 on success, -errno if the file could not be opened. Bool_t IsIdle(); Return the idle status. void SetIdle(Bool_t st = kTRUE); Change the idle status. Bool_t IsWaiting(); Return kTRUE if the session is waiting for the OK to start processing. Int_t WaitingQueries(); Return the number of waiting queries. Int_t QueueQuery(TProofQueryResult* pq); Add a query to the waiting list; Returns the number of queries in the list. TProofQueryResult * NextQuery(); Get the next query from the waiting list.; The query is removed from the list. Int_t CleanupWaitingQueries(Bool_t del = kTRUE, TList* qls = 0); Cleanup the waiting queries list. The objects are deleted if 'del' is true.; If 'qls' is non null, only objects in 'qls' are removed.; Returns the number of cleanup queries. void SetLastMsg(const char* lastmsg); Set the message to be sent back in case of exc",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:32003,Deployability,Update,Update,32003,"(TMessage* mess); Handle a message of type kPROOF_SUBMERGER. void HandleFork(TMessage* mess); Cloning itself via fork. Not implemented. Int_t Fork(); Fork a child.; If successful, return 0 in the child process and the child pid in the parent; process. The child pid is registered for reaping.; Return <0 in the parent process in case of failure. void ResolveKeywords(TString& fname, const char* path = 0); Replace <ord>, <user>, <u>, <group>, <stag>, <qnum>, <file>, <rver> and; <build> placeholders in fname.; Here, <rver> is the root version in integer form, e.g. 53403, and <build> a; string includign version, architecture and compiler version, e.g.; '53403_linuxx8664gcc_gcc46' . Int_t GetSessionStatus(); Return the status of this session:; 0 idle; 1 running; 2 being terminated (currently unused); 3 queued; 4 idle timed-out (not set in here but in TIdleTOTimer::Notify); This is typically run in the reader thread, so access needs to be protected. Int_t UpdateSessionStatus(Int_t xst = -1); Update the session status in the relevant file. The status is taken from; GetSessionStatus() unless xst >= 0, in which case xst is used.; Return 0 on success, -errno if the file could not be opened. Bool_t IsIdle(); Return the idle status. void SetIdle(Bool_t st = kTRUE); Change the idle status. Bool_t IsWaiting(); Return kTRUE if the session is waiting for the OK to start processing. Int_t WaitingQueries(); Return the number of waiting queries. Int_t QueueQuery(TProofQueryResult* pq); Add a query to the waiting list; Returns the number of queries in the list. TProofQueryResult * NextQuery(); Get the next query from the waiting list.; The query is removed from the list. Int_t CleanupWaitingQueries(Bool_t del = kTRUE, TList* qls = 0); Cleanup the waiting queries list. The objects are deleted if 'del' is true.; If 'qls' is non null, only objects in 'qls' are removed.; Returns the number of cleanup queries. void SetLastMsg(const char* lastmsg); Set the message to be sent back in case of exc",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:35605,Deployability,Release,ReleaseWorker,35605,") const; { return fTopSessionTag; }. const char * GetSessionDir() const; { return fSessionDir; }. const char * GetPackageDir() const; { return fPackageDir; }. const char * GetDataDir() const; { return fDataDir; }. const char * GetDataDirOpts() const; { return fDataDirOpts; }. Int_t GetProtocol() const; { return fProtocol; }. const char * GetOrdinal() const; { return fOrdinal; }. Int_t GetGroupId() const; { return fGroupId; }. Int_t GetGroupSize() const; { return fGroupSize; }. Int_t GetLogLevel() const; { return fLogLevel; }. TSocket * GetSocket() const; { return fSocket; }. Float_t GetRealTime() const; { return fRealTime; }. Float_t GetCpuTime() const; { return fCpuTime; }. Int_t GetQuerySeqNum() const; { return fQuerySeqNum; }. Int_t GetTotSessions() const; { return fTotSessions; }. Int_t GetActSessions() const; { return fActSessions; }. Float_t GetEffSessions() const; { return fEffSessions; }. TList * GetEnabledPackages() const; { return fEnabledPackages; }. Long64_t GetMsgSizeHWM() const; { return fMsgSizeHWM; }. const char * GetPrefix() const; { return fPrefix; }. TProofLockPath * GetCacheLock(); { return fCacheLock; }. EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE). void HandleTermination(); { Terminate(0); }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsEndMaster() const; { return fEndMaster; }. Bool_t IsMaster() const; { return fMasterServ; }. Bool_t IsTopMaster() const; { return fOrdinal == ""0""; }. void ReleaseWorker(const char* ); { }. void DisableTimeout(); Disable / Enable read timeout. { }. void EnableTimeout(); { }. void LogToMaster(Bool_t on = kTRUE); Log control. { fSendLogToMaster = on; }. » Author: Fons Rademakers 16/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:21722,Energy Efficiency,monitor,monitoring,21722,"ctory containing packages and user libs; TProofLockPath*fPackageLockpackage dir locker; TVirtualProofPlayer*fPlayeractual player; TStringfPrefixPrefix identifying the node; TProof*fProofPROOF talking to slave servers; Int_tfProtocolprotocol version number; TQueryResultManager*fQMgrQuery-result manager; TMutex*fQMtxTo protect async msg queue; TStringfQueryDirdirectory containing query results and status; TProofLockPath*fQueryLockquery dir locker; Int_tfQuerySeqNumsequential number of the current or last query; TList*fQueuedMsglist of messages waiting to be processed; Float_tfRealTimereal time spent executing commands; Bool_tfRealTimeLogTRUE if log messages should be send back in real-time; TReaperTimer*fReaperTimerTimer used to control children state; TStopwatchfSaveOutputmeasures time spent saving the partial result; Bool_tfSendLogToMasterOn workers, controls logs sending to master; TStringfServiceservice we are running, either ""proofserv"" or ""proofslave""; TStringfSessionDirdirectory containing session dependent files; TStringfSessionTagtag for the server session; TShutdownTimer*fShutdownTimerTimer used to shutdown out-of-control sessions; TSocket*fSocketsocket connection to client; TStringfTopSessionTagtag for the global session; Int_tfTotSessionsTotal number of PROOF sessions on the cluster; TStringfUseruser as which we run; TList*fWaitingQuerieslist of TProofQueryResult waiting to be processed; TStringfWorkDirdirectory containing all proof related info; static FILE*fgErrorHandlerFileFile where to log; static Int_tfgLogToSysLog>0 sent to syslog too; static Float_tfgMemHWMThreshold fraction of max for warning and finer monitoring; static Float_tfgMemStopFraction of max for stop processing; static Int_tfgRecursiveKeep track of recursive inputs during processing; static Long_tfgResMemMaxHard limit on the resident memory checked; static TStringfgSysLogEntitylogging entity (<user>:<group>); static TStringfgSysLogServicename of the syslog service (eg: proofm-0, proofw-0.",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:29571,Energy Efficiency,schedul,scheduler,29571,"nst char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the format:; CREATE TABLE proofpriority (; id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,; group VARCHAR(32) NOT NULL,; priority INT; ). Int_t SendAsynMessage(const char* msg, Bool_t lf = kTRUE); Send an asychronous message to the master / client .; Masters will forward up the message to the client.; The client prints 'msg' of stderr and adds a '\n'/'\r' depending on; 'lf' being kTRUE (default) or kFALSE.; Returns the return value from TSocket::Send(TMessage &) . void FlushLogFile(); Reposition the read pointer in the log file to the very end.; This allows to ""hide"" u",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:404,Integrability,depend,depending,404,". TProofServ. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofServ. class TProofServ: public TApplication. TProofServ. TProofServ is the PROOF server. It can act either as the master; server or as a slave server, depending on its startup arguments. It; receives and handles message coming from the client or from the; master server. Function Members (Methods); public:. virtual~TProofServ(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TApplication::ApplicationName() const; static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Int_tTApplication::Argc() const; char**TApplication::Argv() const; char*TApplication::Argv(Int_t index) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTApplication::ClearInputFiles(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; Int_tCopyFromCache(const char* name, Bool_t c",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:465,Integrability,message,message,465,". TProofServ. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofServ. class TProofServ: public TApplication. TProofServ. TProofServ is the PROOF server. It can act either as the master; server or as a slave server, depending on its startup arguments. It; receives and handles message coming from the client or from the; master server. Function Members (Methods); public:. virtual~TProofServ(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TApplication::ApplicationName() const; static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Int_tTApplication::Argc() const; char**TApplication::Argv() const; char*TApplication::Argv(Int_t index) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTApplication::ClearInputFiles(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; Int_tCopyFromCache(const char* name, Bool_t c",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:8938,Integrability,Message,Message,8938,"TObjArray*TApplication::InputFiles() const; virtual voidTObject::Inspect() constMENU ; voidInterrupt(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; static Bool_tIsActive(); virtual Bool_tTApplication::IsCmdThread(); Bool_tIsEndMaster() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tIsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tIsParallel() const; Bool_tTApplication::IsRunning() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsTopMaster() const; Bool_tTObject::IsZombie() const; virtual voidTApplication::KeyPressed(Int_t key)SIGNAL ; virtual voidTApplication::LineProcessed(const char* line)SIGNAL ; voidLogToMaster(Bool_t on = kTRUE); virtual voidTApplication::Lower(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static voidTApplication::NeedGraphicsLibs(); Bool_tTApplication::NoLogoOpt() const; Bool_tTApplication::NoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofServ&operator=(const TProofServ&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:17976,Integrability,message,messages,17976,,MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:19878,Integrability,message,messages,19878,slave group; Int_tfGroupPrioritypriority of group the user belongs to (0 - 100); Int_tfGroupSizesize of the active slave group; Long64_tfHWMBoxSizeHigh-Water-Mark on the sandbox size; Bool_tfIdleTRUE if idle; TIdleTOTimer*fIdleTOTimerTimer used to control children state; TStringfImageimage name of the session; TFileHandler*fInputHandlerInput socket handler; Bool_tfInterruptif true macro execution will be stopped; TStopwatchfLatencymeasures latency of packet requests; FILE*fLogFilelog file; Int_tfLogFileDeslog file descriptor; Long64_tfLogFileMaxSizemax size for log files (enabled if > 0); Int_tfLogLeveldebug logging level; Bool_tfMasterServtrue if we are a master server; Long64_tfMaxBoxSizeMax size of the sandbox; Int_tfMaxQueriesMax number of queries fully kept; Int_tfMergedWorkersNumber of workers merged; TMonitor*fMergingMonitorMonitor for merging sockets; TServerSocket*fMergingSocketSocket used for merging outputs if submerger; Long64_tfMsgSizeHWMHigh-Water-Mark on the size of messages with results; Int_tfNcmdcommand history number; TStringfOrdinalslave ordinal number; TStringfOutputFilepath with the temporary results of the current or last query; TStringfPackageDirdirectory containing packages and user libs; TProofLockPath*fPackageLockpackage dir locker; TVirtualProofPlayer*fPlayeractual player; TStringfPrefixPrefix identifying the node; TProof*fProofPROOF talking to slave servers; Int_tfProtocolprotocol version number; TQueryResultManager*fQMgrQuery-result manager; TMutex*fQMtxTo protect async msg queue; TStringfQueryDirdirectory containing query results and status; TProofLockPath*fQueryLockquery dir locker; Int_tfQuerySeqNumsequential number of the current or last query; TList*fQueuedMsglist of messages waiting to be processed; Float_tfRealTimereal time spent executing commands; Bool_tfRealTimeLogTRUE if log messages should be send back in real-time; TReaperTimer*fReaperTimerTimer used to control children state; TStopwatchfSaveOutputmeasures time spent saving ,MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:20613,Integrability,message,messages,20613,"eriesMax number of queries fully kept; Int_tfMergedWorkersNumber of workers merged; TMonitor*fMergingMonitorMonitor for merging sockets; TServerSocket*fMergingSocketSocket used for merging outputs if submerger; Long64_tfMsgSizeHWMHigh-Water-Mark on the size of messages with results; Int_tfNcmdcommand history number; TStringfOrdinalslave ordinal number; TStringfOutputFilepath with the temporary results of the current or last query; TStringfPackageDirdirectory containing packages and user libs; TProofLockPath*fPackageLockpackage dir locker; TVirtualProofPlayer*fPlayeractual player; TStringfPrefixPrefix identifying the node; TProof*fProofPROOF talking to slave servers; Int_tfProtocolprotocol version number; TQueryResultManager*fQMgrQuery-result manager; TMutex*fQMtxTo protect async msg queue; TStringfQueryDirdirectory containing query results and status; TProofLockPath*fQueryLockquery dir locker; Int_tfQuerySeqNumsequential number of the current or last query; TList*fQueuedMsglist of messages waiting to be processed; Float_tfRealTimereal time spent executing commands; Bool_tfRealTimeLogTRUE if log messages should be send back in real-time; TReaperTimer*fReaperTimerTimer used to control children state; TStopwatchfSaveOutputmeasures time spent saving the partial result; Bool_tfSendLogToMasterOn workers, controls logs sending to master; TStringfServiceservice we are running, either ""proofserv"" or ""proofslave""; TStringfSessionDirdirectory containing session dependent files; TStringfSessionTagtag for the server session; TShutdownTimer*fShutdownTimerTimer used to shutdown out-of-control sessions; TSocket*fSocketsocket connection to client; TStringfTopSessionTagtag for the global session; Int_tfTotSessionsTotal number of PROOF sessions on the cluster; TStringfUseruser as which we run; TList*fWaitingQuerieslist of TProofQueryResult waiting to be processed; TStringfWorkDirdirectory containing all proof related info; static FILE*fgErrorHandlerFileFile where to log; static Int_tfg",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:20729,Integrability,message,messages,20729,"for merging sockets; TServerSocket*fMergingSocketSocket used for merging outputs if submerger; Long64_tfMsgSizeHWMHigh-Water-Mark on the size of messages with results; Int_tfNcmdcommand history number; TStringfOrdinalslave ordinal number; TStringfOutputFilepath with the temporary results of the current or last query; TStringfPackageDirdirectory containing packages and user libs; TProofLockPath*fPackageLockpackage dir locker; TVirtualProofPlayer*fPlayeractual player; TStringfPrefixPrefix identifying the node; TProof*fProofPROOF talking to slave servers; Int_tfProtocolprotocol version number; TQueryResultManager*fQMgrQuery-result manager; TMutex*fQMtxTo protect async msg queue; TStringfQueryDirdirectory containing query results and status; TProofLockPath*fQueryLockquery dir locker; Int_tfQuerySeqNumsequential number of the current or last query; TList*fQueuedMsglist of messages waiting to be processed; Float_tfRealTimereal time spent executing commands; Bool_tfRealTimeLogTRUE if log messages should be send back in real-time; TReaperTimer*fReaperTimerTimer used to control children state; TStopwatchfSaveOutputmeasures time spent saving the partial result; Bool_tfSendLogToMasterOn workers, controls logs sending to master; TStringfServiceservice we are running, either ""proofserv"" or ""proofslave""; TStringfSessionDirdirectory containing session dependent files; TStringfSessionTagtag for the server session; TShutdownTimer*fShutdownTimerTimer used to shutdown out-of-control sessions; TSocket*fSocketsocket connection to client; TStringfTopSessionTagtag for the global session; Int_tfTotSessionsTotal number of PROOF sessions on the cluster; TStringfUseruser as which we run; TList*fWaitingQuerieslist of TProofQueryResult waiting to be processed; TStringfWorkDirdirectory containing all proof related info; static FILE*fgErrorHandlerFileFile where to log; static Int_tfgLogToSysLog>0 sent to syslog too; static Float_tfgMemHWMThreshold fraction of max for warning and finer monitoring; ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:21092,Integrability,depend,dependent,21092,"ctory containing packages and user libs; TProofLockPath*fPackageLockpackage dir locker; TVirtualProofPlayer*fPlayeractual player; TStringfPrefixPrefix identifying the node; TProof*fProofPROOF talking to slave servers; Int_tfProtocolprotocol version number; TQueryResultManager*fQMgrQuery-result manager; TMutex*fQMtxTo protect async msg queue; TStringfQueryDirdirectory containing query results and status; TProofLockPath*fQueryLockquery dir locker; Int_tfQuerySeqNumsequential number of the current or last query; TList*fQueuedMsglist of messages waiting to be processed; Float_tfRealTimereal time spent executing commands; Bool_tfRealTimeLogTRUE if log messages should be send back in real-time; TReaperTimer*fReaperTimerTimer used to control children state; TStopwatchfSaveOutputmeasures time spent saving the partial result; Bool_tfSendLogToMasterOn workers, controls logs sending to master; TStringfServiceservice we are running, either ""proofserv"" or ""proofslave""; TStringfSessionDirdirectory containing session dependent files; TStringfSessionTagtag for the server session; TShutdownTimer*fShutdownTimerTimer used to shutdown out-of-control sessions; TSocket*fSocketsocket connection to client; TStringfTopSessionTagtag for the global session; Int_tfTotSessionsTotal number of PROOF sessions on the cluster; TStringfUseruser as which we run; TList*fWaitingQuerieslist of TProofQueryResult waiting to be processed; TStringfWorkDirdirectory containing all proof related info; static FILE*fgErrorHandlerFileFile where to log; static Int_tfgLogToSysLog>0 sent to syslog too; static Float_tfgMemHWMThreshold fraction of max for warning and finer monitoring; static Float_tfgMemStopFraction of max for stop processing; static Int_tfgRecursiveKeep track of recursive inputs during processing; static Long_tfgResMemMaxHard limit on the resident memory checked; static TStringfgSysLogEntitylogging entity (<user>:<group>); static TStringfgSysLogServicename of the syslog service (eg: proofm-0, proofw-0.",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:22788,Integrability,message,message,22788,"rack of recursive inputs during processing; static Long_tfgResMemMaxHard limit on the resident memory checked; static TStringfgSysLogEntitylogging entity (<user>:<group>); static TStringfgSysLogServicename of the syslog service (eg: proofm-0, proofw-0.67); static Long_tfgVirtMemMaxHard limit enforced by the system (in kB). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Create an application environment. The TProofServ; environment provides an eventloop via inheritance of TApplication.; Actual server creation work is done in CreateServer() to allow; overloading. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; to the worker or submaster nodes.; Return 0 on success, -1 on error. ~TProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. Int_t CatMotd(); Print message of the day (in the file pointed by the env PROOFMOTD; or from fConfDir/etc/proof/motd). The motd is not shown more than; once a day. If the file pointed by env PROOFNOPROOF exists (or the; file fConfDir/etc/proof/noproof exists), show its contents and close; the connection. TObject * Get(const char* namecycle); Get object with name ""name;cycle"" (e.g. ""aap;2"") from master or client.; This method is called by TDirectory::Get() in case the object can not; be found locally. void RestartComputeTime(); Reset the compute time. TDSetElement * GetNextPacket(Long64_t totalEntries = -1); Get next range of entries to be processed on this server. void GetOptions(Int_t* argc, char** argv); Get and handle command line options. Fixed format:; ""proofserv""|""proofslave"" <confdir>. void HandleSocketInput(); Handle input coming from the client or from the master server. Int_t HandleSocketInput(TMessage* mess, Bool_t all); Process input coming from the client or from the master server.; If 'all' is kFALSE, process only those messages ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:23815,Integrability,message,messages,23815,"ointed by the env PROOFMOTD; or from fConfDir/etc/proof/motd). The motd is not shown more than; once a day. If the file pointed by env PROOFNOPROOF exists (or the; file fConfDir/etc/proof/noproof exists), show its contents and close; the connection. TObject * Get(const char* namecycle); Get object with name ""name;cycle"" (e.g. ""aap;2"") from master or client.; This method is called by TDirectory::Get() in case the object can not; be found locally. void RestartComputeTime(); Reset the compute time. TDSetElement * GetNextPacket(Long64_t totalEntries = -1); Get next range of entries to be processed on this server. void GetOptions(Int_t* argc, char** argv); Get and handle command line options. Fixed format:; ""proofserv""|""proofslave"" <confdir>. void HandleSocketInput(); Handle input coming from the client or from the master server. Int_t HandleSocketInput(TMessage* mess, Bool_t all); Process input coming from the client or from the master server.; If 'all' is kFALSE, process only those messages that can be handled; during query processing.; Returns -1 if the message could not be processed, <-1 if something went; wrong. Returns 1 if the action may have changed the parallel state.; Returns 2 if the message has to be enqueued.; Returns 0 otherwise. Bool_t AcceptResults(Int_t connections, TVirtualProofPlayer* mergerPlayer); Accept and merge results from a set of workers. void HandleUrgentData(); Handle Out-Of-Band data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore (i.e. when kKeepAlive; has failed). Bool_t IsParallel() const; True if in parallel mode. void Print(Option_t* option = """") const; Print status of slave server. void RedirectOutput(const char* dir = 0, const char* mode = ""w""); Redirect stdout to a log file. This log file will be flushed to the; client or master after each command. void Reset(const char* dir); Reset PROOF environment to be ready for execution of next command. Int_t ReceiveFile(const char* file, Bool_t bi",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:23889,Integrability,message,message,23889,"e than; once a day. If the file pointed by env PROOFNOPROOF exists (or the; file fConfDir/etc/proof/noproof exists), show its contents and close; the connection. TObject * Get(const char* namecycle); Get object with name ""name;cycle"" (e.g. ""aap;2"") from master or client.; This method is called by TDirectory::Get() in case the object can not; be found locally. void RestartComputeTime(); Reset the compute time. TDSetElement * GetNextPacket(Long64_t totalEntries = -1); Get next range of entries to be processed on this server. void GetOptions(Int_t* argc, char** argv); Get and handle command line options. Fixed format:; ""proofserv""|""proofslave"" <confdir>. void HandleSocketInput(); Handle input coming from the client or from the master server. Int_t HandleSocketInput(TMessage* mess, Bool_t all); Process input coming from the client or from the master server.; If 'all' is kFALSE, process only those messages that can be handled; during query processing.; Returns -1 if the message could not be processed, <-1 if something went; wrong. Returns 1 if the action may have changed the parallel state.; Returns 2 if the message has to be enqueued.; Returns 0 otherwise. Bool_t AcceptResults(Int_t connections, TVirtualProofPlayer* mergerPlayer); Accept and merge results from a set of workers. void HandleUrgentData(); Handle Out-Of-Band data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore (i.e. when kKeepAlive; has failed). Bool_t IsParallel() const; True if in parallel mode. void Print(Option_t* option = """") const; Print status of slave server. void RedirectOutput(const char* dir = 0, const char* mode = ""w""); Redirect stdout to a log file. This log file will be flushed to the; client or master after each command. void Reset(const char* dir); Reset PROOF environment to be ready for execution of next command. Int_t ReceiveFile(const char* file, Bool_t bin, Long64_t size); Receive a file, either sent by a client or a master server.; If bin i",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:24030,Integrability,message,message,24030," contents and close; the connection. TObject * Get(const char* namecycle); Get object with name ""name;cycle"" (e.g. ""aap;2"") from master or client.; This method is called by TDirectory::Get() in case the object can not; be found locally. void RestartComputeTime(); Reset the compute time. TDSetElement * GetNextPacket(Long64_t totalEntries = -1); Get next range of entries to be processed on this server. void GetOptions(Int_t* argc, char** argv); Get and handle command line options. Fixed format:; ""proofserv""|""proofslave"" <confdir>. void HandleSocketInput(); Handle input coming from the client or from the master server. Int_t HandleSocketInput(TMessage* mess, Bool_t all); Process input coming from the client or from the master server.; If 'all' is kFALSE, process only those messages that can be handled; during query processing.; Returns -1 if the message could not be processed, <-1 if something went; wrong. Returns 1 if the action may have changed the parallel state.; Returns 2 if the message has to be enqueued.; Returns 0 otherwise. Bool_t AcceptResults(Int_t connections, TVirtualProofPlayer* mergerPlayer); Accept and merge results from a set of workers. void HandleUrgentData(); Handle Out-Of-Band data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore (i.e. when kKeepAlive; has failed). Bool_t IsParallel() const; True if in parallel mode. void Print(Option_t* option = """") const; Print status of slave server. void RedirectOutput(const char* dir = 0, const char* mode = ""w""); Redirect stdout to a log file. This log file will be flushed to the; client or master after each command. void Reset(const char* dir); Reset PROOF environment to be ready for execution of next command. Int_t ReceiveFile(const char* file, Bool_t bin, Long64_t size); Receive a file, either sent by a client or a master server.; If bin is true it is a binary file, other wise it is an ASCII; file and we need to check for Windows \r tokens. Returns -1 in; case ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:27258,Integrability,message,message,27258,"nlinked, kFALSE otherwise. Bool_t IsActive(); Static function that returns kTRUE in case we are a PROOF server. TProofServ * This(); Static function returning pointer to global object gProofServ.; Mainly for use via CINT, where the gProofServ symbol might be; deleted from the symbol table. Int_t OldAuthSetup(TString& wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TProofQueryResult * MakeQueryResult(Long64_t nentries, const char* opt, TList* inl, Long64_t first, TDSet* dset, const char* selec, TObject* elist); Create a TProofQueryResult instance for this query. void SetQueryRunning(TProofQueryResult* pq); Set query in running state. void HandleArchive(TMessage* mess, TString* slb = 0); Handle archive request. TMap * GetDataSetNodeMap(TFileCollection* fc, TString& emsg); Get a map {server-name, list-of-files} for collection 'fc' to be used in; TPacketizerFile. Returns a pointer to the map (ownership of the caller).; Or (TMap *)0 and an error message in emsg. void HandleProcess(TMessage* mess, TString* slb = 0); Handle processing request. Int_t SendResults(TSocket* sock, TList* outlist = 0, TQueryResult* pq = 0); Sends all objects from the given list to the specified socket. void ProcessNext(TString* slb = 0); process the next query from the queue of submitted jobs.; to be called on the top master only. Int_t RegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); Register TFileCollections in 'out' as datasets according to the rules in 'in'. void HandleQueryList(TMessage* mess); Handle request for list of queries. void HandleRemove(TMessage* mess, TString* slb = 0); Handle remove request. void HandleRetrieve(TMessage* mess, TString* slb = 0); Handle retrieve request. Int_t HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:28669,Integrability,message,message,28669,"g& e); Register TFileCollections in 'out' as datasets according to the rules in 'in'. void HandleQueryList(TMessage* mess); Handle request for list of queries. void HandleRemove(TMessage* mess, TString* slb = 0); Handle remove request. void HandleRetrieve(TMessage* mess, TString* slb = 0); Handle retrieve request. Int_t HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific grou",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:29083,Integrability,depend,depends,29083,"dification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the format:; CREATE TABLE proofpriority (; id INT NOT NULL PRIMARY KEY AUTO",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:30226,Integrability,message,message,30226,".C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the format:; CREATE TABLE proofpriority (; id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,; group VARCHAR(32) NOT NULL,; priority INT; ). Int_t SendAsynMessage(const char* msg, Bool_t lf = kTRUE); Send an asychronous message to the master / client .; Masters will forward up the message to the client.; The client prints 'msg' of stderr and adds a '\n'/'\r' depending on; 'lf' being kTRUE (default) or kFALSE.; Returns the return value from TSocket::Send(TMessage &) . void FlushLogFile(); Reposition the read pointer in the log file to the very end.; This allows to ""hide"" useful debug messages during normal operations; while preserving the possibility to have them in case of problems. void TruncateLogFile(); Truncate the log file to the 80% of the required max size if this; is set. void HandleException(Int_t sig); Exception handler: we do not try to recover here, just exit. Int_t HandleDataSets(TMessage* mess, TString* slb = 0); Handle here requests about datasets. void HandleSubmerger(TMessage* mess); Handle a message of type kPROOF_SUBMERGER. void HandleFork(TMessage* mess); Cloning itself via fork. Not implemented. Int_t Fork(); Fork a child.; If successful, return 0 in the ch",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:30288,Integrability,message,message,30288,"ted to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the format:; CREATE TABLE proofpriority (; id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,; group VARCHAR(32) NOT NULL,; priority INT; ). Int_t SendAsynMessage(const char* msg, Bool_t lf = kTRUE); Send an asychronous message to the master / client .; Masters will forward up the message to the client.; The client prints 'msg' of stderr and adds a '\n'/'\r' depending on; 'lf' being kTRUE (default) or kFALSE.; Returns the return value from TSocket::Send(TMessage &) . void FlushLogFile(); Reposition the read pointer in the log file to the very end.; This allows to ""hide"" useful debug messages during normal operations; while preserving the possibility to have them in case of problems. void TruncateLogFile(); Truncate the log file to the 80% of the required max size if this; is set. void HandleException(Int_t sig); Exception handler: we do not try to recover here, just exit. Int_t HandleDataSets(TMessage* mess, TString* slb = 0); Handle here requests about datasets. void HandleSubmerger(TMessage* mess); Handle a message of type kPROOF_SUBMERGER. void HandleFork(TMessage* mess); Cloning itself via fork. Not implemented. Int_t Fork(); Fork a child.; If successful, return 0 in the child process and the child pid in the parent; process. The child pid is registered ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:30367,Integrability,depend,depending,30367,"; Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the format:; CREATE TABLE proofpriority (; id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,; group VARCHAR(32) NOT NULL,; priority INT; ). Int_t SendAsynMessage(const char* msg, Bool_t lf = kTRUE); Send an asychronous message to the master / client .; Masters will forward up the message to the client.; The client prints 'msg' of stderr and adds a '\n'/'\r' depending on; 'lf' being kTRUE (default) or kFALSE.; Returns the return value from TSocket::Send(TMessage &) . void FlushLogFile(); Reposition the read pointer in the log file to the very end.; This allows to ""hide"" useful debug messages during normal operations; while preserving the possibility to have them in case of problems. void TruncateLogFile(); Truncate the log file to the 80% of the required max size if this; is set. void HandleException(Int_t sig); Exception handler: we do not try to recover here, just exit. Int_t HandleDataSets(TMessage* mess, TString* slb = 0); Handle here requests about datasets. void HandleSubmerger(TMessage* mess); Handle a message of type kPROOF_SUBMERGER. void HandleFork(TMessage* mess); Cloning itself via fork. Not implemented. Int_t Fork(); Fork a child.; If successful, return 0 in the child process and the child pid in the parent; process. The child pid is registered for reaping.; Return <0 in the parent process in case of failure. void ResolveKe",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:30596,Integrability,message,messages,30596,"rity the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the format:; CREATE TABLE proofpriority (; id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,; group VARCHAR(32) NOT NULL,; priority INT; ). Int_t SendAsynMessage(const char* msg, Bool_t lf = kTRUE); Send an asychronous message to the master / client .; Masters will forward up the message to the client.; The client prints 'msg' of stderr and adds a '\n'/'\r' depending on; 'lf' being kTRUE (default) or kFALSE.; Returns the return value from TSocket::Send(TMessage &) . void FlushLogFile(); Reposition the read pointer in the log file to the very end.; This allows to ""hide"" useful debug messages during normal operations; while preserving the possibility to have them in case of problems. void TruncateLogFile(); Truncate the log file to the 80% of the required max size if this; is set. void HandleException(Int_t sig); Exception handler: we do not try to recover here, just exit. Int_t HandleDataSets(TMessage* mess, TString* slb = 0); Handle here requests about datasets. void HandleSubmerger(TMessage* mess); Handle a message of type kPROOF_SUBMERGER. void HandleFork(TMessage* mess); Cloning itself via fork. Not implemented. Int_t Fork(); Fork a child.; If successful, return 0 in the child process and the child pid in the parent; process. The child pid is registered for reaping.; Return <0 in the parent process in case of failure. void ResolveKeywords(TString& fname, const char* path = 0); Replace <ord>, <user>, <u>, <group>, <stag>, <qnum>, <file>, <rver> and; <build> placeholders in fname.; Here, <rver> is the root version in integer form, e.g. 53403, and <build> a; string includign version, architectu",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:31031,Integrability,message,message,31031,":; CREATE TABLE proofpriority (; id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,; group VARCHAR(32) NOT NULL,; priority INT; ). Int_t SendAsynMessage(const char* msg, Bool_t lf = kTRUE); Send an asychronous message to the master / client .; Masters will forward up the message to the client.; The client prints 'msg' of stderr and adds a '\n'/'\r' depending on; 'lf' being kTRUE (default) or kFALSE.; Returns the return value from TSocket::Send(TMessage &) . void FlushLogFile(); Reposition the read pointer in the log file to the very end.; This allows to ""hide"" useful debug messages during normal operations; while preserving the possibility to have them in case of problems. void TruncateLogFile(); Truncate the log file to the 80% of the required max size if this; is set. void HandleException(Int_t sig); Exception handler: we do not try to recover here, just exit. Int_t HandleDataSets(TMessage* mess, TString* slb = 0); Handle here requests about datasets. void HandleSubmerger(TMessage* mess); Handle a message of type kPROOF_SUBMERGER. void HandleFork(TMessage* mess); Cloning itself via fork. Not implemented. Int_t Fork(); Fork a child.; If successful, return 0 in the child process and the child pid in the parent; process. The child pid is registered for reaping.; Return <0 in the parent process in case of failure. void ResolveKeywords(TString& fname, const char* path = 0); Replace <ord>, <user>, <u>, <group>, <stag>, <qnum>, <file>, <rver> and; <build> placeholders in fname.; Here, <rver> is the root version in integer form, e.g. 53403, and <build> a; string includign version, architecture and compiler version, e.g.; '53403_linuxx8664gcc_gcc46' . Int_t GetSessionStatus(); Return the status of this session:; 0 idle; 1 running; 2 being terminated (currently unused); 3 queued; 4 idle timed-out (not set in here but in TIdleTOTimer::Notify); This is typically run in the reader thread, so access needs to be protected. Int_t UpdateSessionStatus(Int_t xst = -1); Update the session st",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:32967,Integrability,message,message,32967,"UpdateSessionStatus(Int_t xst = -1); Update the session status in the relevant file. The status is taken from; GetSessionStatus() unless xst >= 0, in which case xst is used.; Return 0 on success, -errno if the file could not be opened. Bool_t IsIdle(); Return the idle status. void SetIdle(Bool_t st = kTRUE); Change the idle status. Bool_t IsWaiting(); Return kTRUE if the session is waiting for the OK to start processing. Int_t WaitingQueries(); Return the number of waiting queries. Int_t QueueQuery(TProofQueryResult* pq); Add a query to the waiting list; Returns the number of queries in the list. TProofQueryResult * NextQuery(); Get the next query from the waiting list.; The query is removed from the list. Int_t CleanupWaitingQueries(Bool_t del = kTRUE, TList* qls = 0); Cleanup the waiting queries list. The objects are deleted if 'del' is true.; If 'qls' is non null, only objects in 'qls' are removed.; Returns the number of cleanup queries. void SetLastMsg(const char* lastmsg); Set the message to be sent back in case of exceptions. void SetLastEntry(Long64_t lastentry); Set the last entry before exception. Long_t GetVirtMemMax(); VirtMemMax getter. Long_t GetResMemMax(); ResMemMax getter. Float_t GetMemHWM(); MemHWM getter. Float_t GetMemStop(); MemStop getter. void GetLocalServer(TString& dsrv); Extract LOCALDATASERVER info in 'dsrv'. void FilterLocalroot(TString& path, const char* url = ""root://dum/""); If 'path' is local and 'dsrv' is Xrootd, apply 'path.Localroot' settings,; if any.; The final path via the server is dsrv+path. Int_t GetCompressionLevel() const. TProofServ(Int_t* argc, char** argv, FILE* flog = 0). TProof * GetProof() const; { return fProof; }. const char * GetService() const; { return fService; }. const char * GetConfDir() const; { return fConfDir; }. const char * GetConfFile() const; { return fConfFile; }. const char * GetUser() const; { return fUser; }. const char * GetGroup() const; { return fGroup; }. const char * GetWorkDir() const; { return ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:7764,Modifiability,Inherit,InheritsFrom,7764,"ions() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUser() const; static Long_tGetVirtMemMax(); const char*GetWorkDir() const; virtual TProofServ::EQueryActionGetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); virtual voidHandleException(Int_t sig); virtual voidTApplication::HandleIdleTimer()SIGNAL ; virtual voidHandleSigPipe(); virtual voidHandleSocketInput(); virtual Int_tHandleSocketInput(TMessage* mess, Bool_t all); virtual voidHandleTermination(); virtual Bool_tTApplication::HandleTermInput(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual voidHandleUrgentData(); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTApplication::Hide(); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTApplication::Init(); voidTApplication::InitializeGraphics(); TObjArray*TApplication::InputFiles() const; virtual voidTObject::Inspect() constMENU ; voidInterrupt(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; static Bool_tIsActive(); virtual Bool_tTApplication::IsCmdThread(); Bool_tIsEndMaster() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tIsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tIsParallel() const; Bool_tTApplication::IsRunning() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsTopMaster() const; Bool_tTObject::IsZombie() const; virtual voidTApplication::KeyPressed(Int_t key)SIGNAL ; virtual voidTApplication::LineProcessed(const char* line)SIGNAL ; voidLogToMaster(Bool_t on = kTRUE); virtual voidTApplication::Lower(); virtual voidTQObject::LowPriority(const char* signa",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:7830,Modifiability,Inherit,InheritsFrom,7830,"ar*GetUser() const; static Long_tGetVirtMemMax(); const char*GetWorkDir() const; virtual TProofServ::EQueryActionGetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); virtual voidHandleException(Int_t sig); virtual voidTApplication::HandleIdleTimer()SIGNAL ; virtual voidHandleSigPipe(); virtual voidHandleSocketInput(); virtual Int_tHandleSocketInput(TMessage* mess, Bool_t all); virtual voidHandleTermination(); virtual Bool_tTApplication::HandleTermInput(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual voidHandleUrgentData(); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTApplication::Hide(); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTApplication::Init(); voidTApplication::InitializeGraphics(); TObjArray*TApplication::InputFiles() const; virtual voidTObject::Inspect() constMENU ; voidInterrupt(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; static Bool_tIsActive(); virtual Bool_tTApplication::IsCmdThread(); Bool_tIsEndMaster() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tIsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tIsParallel() const; Bool_tTApplication::IsRunning() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsTopMaster() const; Bool_tTObject::IsZombie() const; virtual voidTApplication::KeyPressed(Int_t key)SIGNAL ; virtual voidTApplication::LineProcessed(const char* line)SIGNAL ; voidLogToMaster(Bool_t on = kTRUE); virtual voidTApplication::Lower(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::ls(O",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:18089,Modifiability,config,config,18089,,MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:18141,Modifiability,config,config,18141,,MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:19052,Modifiability,sandbox,sandbox,19052,fDirdirectory containing cluster config information; TStringfConfFilefile containing config information; Float_tfCpuTimeCPU time spent executing commands; TStringfDataDirdirectory containing data files produced during queries; TStringfDataDirOptsUrl type options for fDataDir; TStringfDataSetDirdirectory containing info about known data sets; TDataSetManager*fDataSetManagerdataset manager; TDataSetManagerFile*fDataSetStgReporepository for staging requests; Float_tfEffSessionsEffective Number of PROOF sessions on the assigned machines; TList*fEnabledPackageslist of enabled packages; Bool_tfEndMastertrue for a master in direct contact only with workers; THashList*fGlobalPackageDirListlist of directories containing global packages libs; TStringfGroupgroup the user belongs to; Int_tfGroupIdslave unique id in the active slave group; Int_tfGroupPrioritypriority of group the user belongs to (0 - 100); Int_tfGroupSizesize of the active slave group; Long64_tfHWMBoxSizeHigh-Water-Mark on the sandbox size; Bool_tfIdleTRUE if idle; TIdleTOTimer*fIdleTOTimerTimer used to control children state; TStringfImageimage name of the session; TFileHandler*fInputHandlerInput socket handler; Bool_tfInterruptif true macro execution will be stopped; TStopwatchfLatencymeasures latency of packet requests; FILE*fLogFilelog file; Int_tfLogFileDeslog file descriptor; Long64_tfLogFileMaxSizemax size for log files (enabled if > 0); Int_tfLogLeveldebug logging level; Bool_tfMasterServtrue if we are a master server; Long64_tfMaxBoxSizeMax size of the sandbox; Int_tfMaxQueriesMax number of queries fully kept; Int_tfMergedWorkersNumber of workers merged; TMonitor*fMergingMonitorMonitor for merging sockets; TServerSocket*fMergingSocketSocket used for merging outputs if submerger; Long64_tfMsgSizeHWMHigh-Water-Mark on the size of messages with results; Int_tfNcmdcommand history number; TStringfOrdinalslave ordinal number; TStringfOutputFilepath with the temporary results of the current or last query; TStr,MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:19597,Modifiability,sandbox,sandbox,19597,*fEnabledPackageslist of enabled packages; Bool_tfEndMastertrue for a master in direct contact only with workers; THashList*fGlobalPackageDirListlist of directories containing global packages libs; TStringfGroupgroup the user belongs to; Int_tfGroupIdslave unique id in the active slave group; Int_tfGroupPrioritypriority of group the user belongs to (0 - 100); Int_tfGroupSizesize of the active slave group; Long64_tfHWMBoxSizeHigh-Water-Mark on the sandbox size; Bool_tfIdleTRUE if idle; TIdleTOTimer*fIdleTOTimerTimer used to control children state; TStringfImageimage name of the session; TFileHandler*fInputHandlerInput socket handler; Bool_tfInterruptif true macro execution will be stopped; TStopwatchfLatencymeasures latency of packet requests; FILE*fLogFilelog file; Int_tfLogFileDeslog file descriptor; Long64_tfLogFileMaxSizemax size for log files (enabled if > 0); Int_tfLogLeveldebug logging level; Bool_tfMasterServtrue if we are a master server; Long64_tfMaxBoxSizeMax size of the sandbox; Int_tfMaxQueriesMax number of queries fully kept; Int_tfMergedWorkersNumber of workers merged; TMonitor*fMergingMonitorMonitor for merging sockets; TServerSocket*fMergingSocketSocket used for merging outputs if submerger; Long64_tfMsgSizeHWMHigh-Water-Mark on the size of messages with results; Int_tfNcmdcommand history number; TStringfOrdinalslave ordinal number; TStringfOutputFilepath with the temporary results of the current or last query; TStringfPackageDirdirectory containing packages and user libs; TProofLockPath*fPackageLockpackage dir locker; TVirtualProofPlayer*fPlayeractual player; TStringfPrefixPrefix identifying the node; TProof*fProofPROOF talking to slave servers; Int_tfProtocolprotocol version number; TQueryResultManager*fQMgrQuery-result manager; TMutex*fQMtxTo protect async msg queue; TStringfQueryDirdirectory containing query results and status; TProofLockPath*fQueryLockquery dir locker; Int_tfQuerySeqNumsequential number of the current or last query; TList*fQueue,MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:22162,Modifiability,Inherit,Inheritance,22162,"er used to shutdown out-of-control sessions; TSocket*fSocketsocket connection to client; TStringfTopSessionTagtag for the global session; Int_tfTotSessionsTotal number of PROOF sessions on the cluster; TStringfUseruser as which we run; TList*fWaitingQuerieslist of TProofQueryResult waiting to be processed; TStringfWorkDirdirectory containing all proof related info; static FILE*fgErrorHandlerFileFile where to log; static Int_tfgLogToSysLog>0 sent to syslog too; static Float_tfgMemHWMThreshold fraction of max for warning and finer monitoring; static Float_tfgMemStopFraction of max for stop processing; static Int_tfgRecursiveKeep track of recursive inputs during processing; static Long_tfgResMemMaxHard limit on the resident memory checked; static TStringfgSysLogEntitylogging entity (<user>:<group>); static TStringfgSysLogServicename of the syslog service (eg: proofm-0, proofw-0.67); static Long_tfgVirtMemMaxHard limit enforced by the system (in kB). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Create an application environment. The TProofServ; environment provides an eventloop via inheritance of TApplication.; Actual server creation work is done in CreateServer() to allow; overloading. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; to the worker or submaster nodes.; Return 0 on success, -1 on error. ~TProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. Int_t CatMotd(); Print message of the day (in the file pointed by the env PROOFMOTD; or from fConfDir/etc/proof/motd). The motd is not shown more than; once a day. If the file pointed by env PROOFNOPROOF exists (or the; file fConfDir/etc/proof/noproof exists), show its contents and close; the connection. TObject * Get(const char* namecycle); Get object with name ""name;cycle"" (e.g. ""aap;2"") from master or client.; This m",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:22175,Modifiability,Inherit,Inherited,22175,"er used to shutdown out-of-control sessions; TSocket*fSocketsocket connection to client; TStringfTopSessionTagtag for the global session; Int_tfTotSessionsTotal number of PROOF sessions on the cluster; TStringfUseruser as which we run; TList*fWaitingQuerieslist of TProofQueryResult waiting to be processed; TStringfWorkDirdirectory containing all proof related info; static FILE*fgErrorHandlerFileFile where to log; static Int_tfgLogToSysLog>0 sent to syslog too; static Float_tfgMemHWMThreshold fraction of max for warning and finer monitoring; static Float_tfgMemStopFraction of max for stop processing; static Int_tfgRecursiveKeep track of recursive inputs during processing; static Long_tfgResMemMaxHard limit on the resident memory checked; static TStringfgSysLogEntitylogging entity (<user>:<group>); static TStringfgSysLogServicename of the syslog service (eg: proofm-0, proofw-0.67); static Long_tfgVirtMemMaxHard limit enforced by the system (in kB). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Create an application environment. The TProofServ; environment provides an eventloop via inheritance of TApplication.; Actual server creation work is done in CreateServer() to allow; overloading. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; to the worker or submaster nodes.; Return 0 on success, -1 on error. ~TProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. Int_t CatMotd(); Print message of the day (in the file pointed by the env PROOFMOTD; or from fConfDir/etc/proof/motd). The motd is not shown more than; once a day. If the file pointed by env PROOFNOPROOF exists (or the; file fConfDir/etc/proof/noproof exists), show its contents and close; the connection. TObject * Get(const char* namecycle); Get object with name ""name;cycle"" (e.g. ""aap;2"") from master or client.; This m",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:22400,Modifiability,inherit,inheritance,22400,"r; TStringfUseruser as which we run; TList*fWaitingQuerieslist of TProofQueryResult waiting to be processed; TStringfWorkDirdirectory containing all proof related info; static FILE*fgErrorHandlerFileFile where to log; static Int_tfgLogToSysLog>0 sent to syslog too; static Float_tfgMemHWMThreshold fraction of max for warning and finer monitoring; static Float_tfgMemStopFraction of max for stop processing; static Int_tfgRecursiveKeep track of recursive inputs during processing; static Long_tfgResMemMaxHard limit on the resident memory checked; static TStringfgSysLogEntitylogging entity (<user>:<group>); static TStringfgSysLogServicename of the syslog service (eg: proofm-0, proofw-0.67); static Long_tfgVirtMemMaxHard limit enforced by the system (in kB). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Create an application environment. The TProofServ; environment provides an eventloop via inheritance of TApplication.; Actual server creation work is done in CreateServer() to allow; overloading. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; to the worker or submaster nodes.; Return 0 on success, -1 on error. ~TProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. Int_t CatMotd(); Print message of the day (in the file pointed by the env PROOFMOTD; or from fConfDir/etc/proof/motd). The motd is not shown more than; once a day. If the file pointed by env PROOFNOPROOF exists (or the; file fConfDir/etc/proof/noproof exists), show its contents and close; the connection. TObject * Get(const char* namecycle); Get object with name ""name;cycle"" (e.g. ""aap;2"") from master or client.; This method is called by TDirectory::Get() in case the object can not; be found locally. void RestartComputeTime(); Reset the compute time. TDSetElement * GetNextPacket(Long64_t totalEntries = -1); Get nex",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:14380,Performance,Load,LoadGraphicsLibs,14380,"st char* slot); static voidTApplication::Close(TApplication* app); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidDeletePlayer(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Int_tFork(); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; Int_tGetSessionStatus(); virtual voidHandleArchive(TMessage* mess, TString* slb = 0); virtual Int_tHandleCache(TMessage* mess, TString* slb = 0); virtual voidHandleCheckFile(TMessage* mess, TString* slb = 0); virtual Int_tHandleDataSets(TMessage* mess, TString* slb = 0); virtual voidHandleFork(TMessage* mess); virtual Int_tHandleLibIncPath(TMessage* mess); virtual voidHandleProcess(TMessage* mess, TString* slb = 0); virtual voidHandleQueryList(TMessage* mess); virtual voidHandleRemove(TMessage* mess, TString* slb = 0); virtual voidHandleRetrieve(TMessage* mess, TString* slb = 0); virtual voidHandleSubmerger(TMessage* mess); virtual Int_tHandleWorkerLists(TMessage* mess); virtual voidTApplication::Help(const char* line); Bool_tIsIdle(); virtual voidTApplication::LoadGraphicsLibs(); virtual voidTApplication::MakeBatch(); virtual voidMakePlayer(); voidTObject::MakeZombie(); static TApplication*TApplication::Open(const char* url, Int_t debug, const char* script); static Int_tTApplication::ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); virtual voidProcessNext(TString* slb = 0); virtual Long_tTApplication::ProcessRemote(const char* line, Int_t* error = 0); voidTApplication::SetSignalHandler(TSignalHandler* sh); virtual Int_tSetup(); Int_tSetupCommon(); Bool_tUnlinkDataDir(const char* path).",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:17873,Performance,cache,cache,17873,,MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:19326,Performance,latency,latency,19326,r; TStringfDataSetDirdirectory containing info about known data sets; TDataSetManager*fDataSetManagerdataset manager; TDataSetManagerFile*fDataSetStgReporepository for staging requests; Float_tfEffSessionsEffective Number of PROOF sessions on the assigned machines; TList*fEnabledPackageslist of enabled packages; Bool_tfEndMastertrue for a master in direct contact only with workers; THashList*fGlobalPackageDirListlist of directories containing global packages libs; TStringfGroupgroup the user belongs to; Int_tfGroupIdslave unique id in the active slave group; Int_tfGroupPrioritypriority of group the user belongs to (0 - 100); Int_tfGroupSizesize of the active slave group; Long64_tfHWMBoxSizeHigh-Water-Mark on the sandbox size; Bool_tfIdleTRUE if idle; TIdleTOTimer*fIdleTOTimerTimer used to control children state; TStringfImageimage name of the session; TFileHandler*fInputHandlerInput socket handler; Bool_tfInterruptif true macro execution will be stopped; TStopwatchfLatencymeasures latency of packet requests; FILE*fLogFilelog file; Int_tfLogFileDeslog file descriptor; Long64_tfLogFileMaxSizemax size for log files (enabled if > 0); Int_tfLogLeveldebug logging level; Bool_tfMasterServtrue if we are a master server; Long64_tfMaxBoxSizeMax size of the sandbox; Int_tfMaxQueriesMax number of queries fully kept; Int_tfMergedWorkersNumber of workers merged; TMonitor*fMergingMonitorMonitor for merging sockets; TServerSocket*fMergingSocketSocket used for merging outputs if submerger; Long64_tfMsgSizeHWMHigh-Water-Mark on the size of messages with results; Int_tfNcmdcommand history number; TStringfOrdinalslave ordinal number; TStringfOutputFilepath with the temporary results of the current or last query; TStringfPackageDirdirectory containing packages and user libs; TProofLockPath*fPackageLockpackage dir locker; TVirtualProofPlayer*fPlayeractual player; TStringfPrefixPrefix identifying the node; TProof*fProofPROOF talking to slave servers; Int_tfProtocolprotocol version number;,MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:20411,Performance,queue,queue,20411,"Long64_tfLogFileMaxSizemax size for log files (enabled if > 0); Int_tfLogLeveldebug logging level; Bool_tfMasterServtrue if we are a master server; Long64_tfMaxBoxSizeMax size of the sandbox; Int_tfMaxQueriesMax number of queries fully kept; Int_tfMergedWorkersNumber of workers merged; TMonitor*fMergingMonitorMonitor for merging sockets; TServerSocket*fMergingSocketSocket used for merging outputs if submerger; Long64_tfMsgSizeHWMHigh-Water-Mark on the size of messages with results; Int_tfNcmdcommand history number; TStringfOrdinalslave ordinal number; TStringfOutputFilepath with the temporary results of the current or last query; TStringfPackageDirdirectory containing packages and user libs; TProofLockPath*fPackageLockpackage dir locker; TVirtualProofPlayer*fPlayeractual player; TStringfPrefixPrefix identifying the node; TProof*fProofPROOF talking to slave servers; Int_tfProtocolprotocol version number; TQueryResultManager*fQMgrQuery-result manager; TMutex*fQMtxTo protect async msg queue; TStringfQueryDirdirectory containing query results and status; TProofLockPath*fQueryLockquery dir locker; Int_tfQuerySeqNumsequential number of the current or last query; TList*fQueuedMsglist of messages waiting to be processed; Float_tfRealTimereal time spent executing commands; Bool_tfRealTimeLogTRUE if log messages should be send back in real-time; TReaperTimer*fReaperTimerTimer used to control children state; TStopwatchfSaveOutputmeasures time spent saving the partial result; Bool_tfSendLogToMasterOn workers, controls logs sending to master; TStringfServiceservice we are running, either ""proofserv"" or ""proofslave""; TStringfSessionDirdirectory containing session dependent files; TStringfSessionTagtag for the server session; TShutdownTimer*fShutdownTimerTimer used to shutdown out-of-control sessions; TSocket*fSocketsocket connection to client; TStringfTopSessionTagtag for the global session; Int_tfTotSessionsTotal number of PROOF sessions on the cluster; TStringfUseruser as which",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:27563,Performance,queue,queue,27563,"e. Int_t OldAuthSetup(TString& wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TProofQueryResult * MakeQueryResult(Long64_t nentries, const char* opt, TList* inl, Long64_t first, TDSet* dset, const char* selec, TObject* elist); Create a TProofQueryResult instance for this query. void SetQueryRunning(TProofQueryResult* pq); Set query in running state. void HandleArchive(TMessage* mess, TString* slb = 0); Handle archive request. TMap * GetDataSetNodeMap(TFileCollection* fc, TString& emsg); Get a map {server-name, list-of-files} for collection 'fc' to be used in; TPacketizerFile. Returns a pointer to the map (ownership of the caller).; Or (TMap *)0 and an error message in emsg. void HandleProcess(TMessage* mess, TString* slb = 0); Handle processing request. Int_t SendResults(TSocket* sock, TList* outlist = 0, TQueryResult* pq = 0); Sends all objects from the given list to the specified socket. void ProcessNext(TString* slb = 0); process the next query from the queue of submitted jobs.; to be called on the top master only. Int_t RegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); Register TFileCollections in 'out' as datasets according to the rules in 'in'. void HandleQueryList(TMessage* mess); Handle request for list of queries. void HandleRemove(TMessage* mess, TString* slb = 0); Handle remove request. void HandleRetrieve(TMessage* mess, TString* slb = 0); Handle retrieve request. Int_t HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:28262,Performance,cache,cache,28262," *)0 and an error message in emsg. void HandleProcess(TMessage* mess, TString* slb = 0); Handle processing request. Int_t SendResults(TSocket* sock, TList* outlist = 0, TQueryResult* pq = 0); Sends all objects from the given list to the specified socket. void ProcessNext(TString* slb = 0); process the next query from the queue of submitted jobs.; to be called on the top master only. Int_t RegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); Register TFileCollections in 'out' as datasets according to the rules in 'in'. void HandleQueryList(TMessage* mess); Handle request for list of queries. void HandleRemove(TMessage* mess, TString* slb = 0); Handle remove request. void HandleRetrieve(TMessage* mess, TString* slb = 0); Handle retrieve request. Int_t HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.r",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:28847,Performance,cache,cache,28847,"st(TMessage* mess); Handle request for list of queries. void HandleRemove(TMessage* mess, TString* slb = 0); Handle remove request. void HandleRetrieve(TMessage* mess, TString* slb = 0); Handle retrieve request. Int_t HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logg",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:29058,Performance,cache,cache,29058," HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the form",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:29126,Performance,cache,cache,29126," TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the format:; CREATE TABLE proofpriority (; id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,; group VARCHAR(32) NOT NULL,; priority INT;",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:29148,Performance,cache,cache,29148," TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the format:; CREATE TABLE proofpriority (; id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,; group VARCHAR(32) NOT NULL,; priority INT;",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:29304,Performance,cache,cache,29304,"equests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the format:; CREATE TABLE proofpriority (; id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,; group VARCHAR(32) NOT NULL,; priority INT; ). Int_t SendAsynMessage(const char* msg, Bool_t lf = kTRUE); Send an asychronous message to the master / client .; Masters will forward ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:31811,Performance,queue,queued,31811," sig); Exception handler: we do not try to recover here, just exit. Int_t HandleDataSets(TMessage* mess, TString* slb = 0); Handle here requests about datasets. void HandleSubmerger(TMessage* mess); Handle a message of type kPROOF_SUBMERGER. void HandleFork(TMessage* mess); Cloning itself via fork. Not implemented. Int_t Fork(); Fork a child.; If successful, return 0 in the child process and the child pid in the parent; process. The child pid is registered for reaping.; Return <0 in the parent process in case of failure. void ResolveKeywords(TString& fname, const char* path = 0); Replace <ord>, <user>, <u>, <group>, <stag>, <qnum>, <file>, <rver> and; <build> placeholders in fname.; Here, <rver> is the root version in integer form, e.g. 53403, and <build> a; string includign version, architecture and compiler version, e.g.; '53403_linuxx8664gcc_gcc46' . Int_t GetSessionStatus(); Return the status of this session:; 0 idle; 1 running; 2 being terminated (currently unused); 3 queued; 4 idle timed-out (not set in here but in TIdleTOTimer::Notify); This is typically run in the reader thread, so access needs to be protected. Int_t UpdateSessionStatus(Int_t xst = -1); Update the session status in the relevant file. The status is taken from; GetSessionStatus() unless xst >= 0, in which case xst is used.; Return 0 on success, -errno if the file could not be opened. Bool_t IsIdle(); Return the idle status. void SetIdle(Bool_t st = kTRUE); Change the idle status. Bool_t IsWaiting(); Return kTRUE if the session is waiting for the OK to start processing. Int_t WaitingQueries(); Return the number of waiting queries. Int_t QueueQuery(TProofQueryResult* pq); Add a query to the waiting list; Returns the number of queries in the list. TProofQueryResult * NextQuery(); Get the next query from the waiting list.; The query is removed from the list. Int_t CleanupWaitingQueries(Bool_t del = kTRUE, TList* qls = 0); Cleanup the waiting queries list. The objects are deleted if 'del' is true.; ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:32459,Performance,Queue,QueueQuery,32459,"me.; Here, <rver> is the root version in integer form, e.g. 53403, and <build> a; string includign version, architecture and compiler version, e.g.; '53403_linuxx8664gcc_gcc46' . Int_t GetSessionStatus(); Return the status of this session:; 0 idle; 1 running; 2 being terminated (currently unused); 3 queued; 4 idle timed-out (not set in here but in TIdleTOTimer::Notify); This is typically run in the reader thread, so access needs to be protected. Int_t UpdateSessionStatus(Int_t xst = -1); Update the session status in the relevant file. The status is taken from; GetSessionStatus() unless xst >= 0, in which case xst is used.; Return 0 on success, -errno if the file could not be opened. Bool_t IsIdle(); Return the idle status. void SetIdle(Bool_t st = kTRUE); Change the idle status. Bool_t IsWaiting(); Return kTRUE if the session is waiting for the OK to start processing. Int_t WaitingQueries(); Return the number of waiting queries. Int_t QueueQuery(TProofQueryResult* pq); Add a query to the waiting list; Returns the number of queries in the list. TProofQueryResult * NextQuery(); Get the next query from the waiting list.; The query is removed from the list. Int_t CleanupWaitingQueries(Bool_t del = kTRUE, TList* qls = 0); Cleanup the waiting queries list. The objects are deleted if 'del' is true.; If 'qls' is non null, only objects in 'qls' are removed.; Returns the number of cleanup queries. void SetLastMsg(const char* lastmsg); Set the message to be sent back in case of exceptions. void SetLastEntry(Long64_t lastentry); Set the last entry before exception. Long_t GetVirtMemMax(); VirtMemMax getter. Long_t GetResMemMax(); ResMemMax getter. Float_t GetMemHWM(); MemHWM getter. Float_t GetMemStop(); MemStop getter. void GetLocalServer(TString& dsrv); Extract LOCALDATASERVER info in 'dsrv'. void FilterLocalroot(TString& path, const char* url = ""root://dum/""); If 'path' is local and 'dsrv' is Xrootd, apply 'path.Localroot' settings,; if any.; The final path via the server is ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:4056,Safety,abort,abort,4056,"ar* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidFilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFlushLogFile(); TObject*Get(const char* namecycle); Int_tGetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:28574,Safety,abort,abort,28574," called on the top master only. Int_t RegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); Register TFileCollections in 'out' as datasets according to the rules in 'in'. void HandleQueryList(TMessage* mess); Handle request for list of queries. void HandleRemove(TMessage* mess, TString* slb = 0); Handle remove request. void HandleRetrieve(TMessage* mess, TString* slb = 0); Handle retrieve request. Int_t HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:28707,Safety,abort,abort,28707,"g& e); Register TFileCollections in 'out' as datasets according to the rules in 'in'. void HandleQueryList(TMessage* mess); Handle request for list of queries. void HandleRemove(TMessage* mess, TString* slb = 0); Handle remove request. void HandleRetrieve(TMessage* mess, TString* slb = 0); Handle retrieve request. Int_t HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific grou",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:28723,Safety,abort,aborts,28723,"g& e); Register TFileCollections in 'out' as datasets according to the rules in 'in'. void HandleQueryList(TMessage* mess); Handle request for list of queries. void HandleRemove(TMessage* mess, TString* slb = 0); Handle remove request. void HandleRetrieve(TMessage* mess, TString* slb = 0); Handle retrieve request. Int_t HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific grou",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:30866,Safety,recover,recover,30866,"up in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the format:; CREATE TABLE proofpriority (; id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,; group VARCHAR(32) NOT NULL,; priority INT; ). Int_t SendAsynMessage(const char* msg, Bool_t lf = kTRUE); Send an asychronous message to the master / client .; Masters will forward up the message to the client.; The client prints 'msg' of stderr and adds a '\n'/'\r' depending on; 'lf' being kTRUE (default) or kFALSE.; Returns the return value from TSocket::Send(TMessage &) . void FlushLogFile(); Reposition the read pointer in the log file to the very end.; This allows to ""hide"" useful debug messages during normal operations; while preserving the possibility to have them in case of problems. void TruncateLogFile(); Truncate the log file to the 80% of the required max size if this; is set. void HandleException(Int_t sig); Exception handler: we do not try to recover here, just exit. Int_t HandleDataSets(TMessage* mess, TString* slb = 0); Handle here requests about datasets. void HandleSubmerger(TMessage* mess); Handle a message of type kPROOF_SUBMERGER. void HandleFork(TMessage* mess); Cloning itself via fork. Not implemented. Int_t Fork(); Fork a child.; If successful, return 0 in the child process and the child pid in the parent; process. The child pid is registered for reaping.; Return <0 in the parent process in case of failure. void ResolveKeywords(TString& fname, const char* path = 0); Replace <ord>, <user>, <u>, <group>, <stag>, <qnum>, <file>, <rver> and; <build> placeholders in fname.; Here, <rver> is the root version in integer form, e.g. 53403, and <build> a; string includign version, architecture and compiler version, e.g.; '53403_linuxx8664gcc_gcc46' . Int_t GetSessionStatus(); Return the status of this session:; 0 idle; 1 running; 2 being terminated (currently unused); 3 queued; 4 idle timed-out (not se",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:35684,Safety,timeout,timeout,35684,") const; { return fTopSessionTag; }. const char * GetSessionDir() const; { return fSessionDir; }. const char * GetPackageDir() const; { return fPackageDir; }. const char * GetDataDir() const; { return fDataDir; }. const char * GetDataDirOpts() const; { return fDataDirOpts; }. Int_t GetProtocol() const; { return fProtocol; }. const char * GetOrdinal() const; { return fOrdinal; }. Int_t GetGroupId() const; { return fGroupId; }. Int_t GetGroupSize() const; { return fGroupSize; }. Int_t GetLogLevel() const; { return fLogLevel; }. TSocket * GetSocket() const; { return fSocket; }. Float_t GetRealTime() const; { return fRealTime; }. Float_t GetCpuTime() const; { return fCpuTime; }. Int_t GetQuerySeqNum() const; { return fQuerySeqNum; }. Int_t GetTotSessions() const; { return fTotSessions; }. Int_t GetActSessions() const; { return fActSessions; }. Float_t GetEffSessions() const; { return fEffSessions; }. TList * GetEnabledPackages() const; { return fEnabledPackages; }. Long64_t GetMsgSizeHWM() const; { return fMsgSizeHWM; }. const char * GetPrefix() const; { return fPrefix; }. TProofLockPath * GetCacheLock(); { return fCacheLock; }. EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE). void HandleTermination(); { Terminate(0); }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsEndMaster() const; { return fEndMaster; }. Bool_t IsMaster() const; { return fMasterServ; }. Bool_t IsTopMaster() const; { return fOrdinal == ""0""; }. void ReleaseWorker(const char* ); { }. void DisableTimeout(); Disable / Enable read timeout. { }. void EnableTimeout(); { }. void LogToMaster(Bool_t on = kTRUE); Log control. { fSendLogToMaster = on; }. » Author: Fons Rademakers 16/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:7495,Security,Hash,Hash,7495,"char*GetService() const; const char*GetSessionDir() const; const char*GetSessionTag() const; TSignalHandler*TApplication::GetSignalHandler() const; TSocket*GetSocket() const; virtual const char*TObject::GetTitle() const; const char*GetTopSessionTag() const; Int_tGetTotSessions() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUser() const; static Long_tGetVirtMemMax(); const char*GetWorkDir() const; virtual TProofServ::EQueryActionGetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); virtual voidHandleException(Int_t sig); virtual voidTApplication::HandleIdleTimer()SIGNAL ; virtual voidHandleSigPipe(); virtual voidHandleSocketInput(); virtual Int_tHandleSocketInput(TMessage* mess, Bool_t all); virtual voidHandleTermination(); virtual Bool_tTApplication::HandleTermInput(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual voidHandleUrgentData(); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTApplication::Hide(); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTApplication::Init(); voidTApplication::InitializeGraphics(); TObjArray*TApplication::InputFiles() const; virtual voidTObject::Inspect() constMENU ; voidInterrupt(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; static Bool_tIsActive(); virtual Bool_tTApplication::IsCmdThread(); Bool_tIsEndMaster() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tIsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tIsParallel() const; Bool_tTApplication::IsRunning() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsTopMaster() const; Bool",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:26585,Security,authenticat,authentication,26585,"y from include path,; removes entry from enabled package list,; does not currently remove entry from interpreter include path.; Returns -1 in case of error, 0 otherwise. Int_t UnloadPackages(); Unloads all enabled packages. Returns -1 in case of error, 0 otherwise. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on failure. Int_t SetupCommon(); Common part (between TProofServ and TXProofServ) of the setup phase.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. Bool_t UnlinkDataDir(const char* path); Scan recursively the datadir and unlink it if empty; Return kTRUE if it can be unlinked, kFALSE otherwise. Bool_t IsActive(); Static function that returns kTRUE in case we are a PROOF server. TProofServ * This(); Static function returning pointer to global object gProofServ.; Mainly for use via CINT, where the gProofServ symbol might be; deleted from the symbol table. Int_t OldAuthSetup(TString& wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TProofQueryResult * MakeQueryResult(Long64_t nentries, const char* opt, TList* inl, Long64_t first, TDSet* dset, const char* selec, TObject* elist); Create a TProofQueryResult instance for this query. void SetQueryRunning(TProofQueryResult* pq); Set query in running state. void HandleArchive(TMessage* mess, TString* slb = 0); Handle archive request. TMap * GetDataSetNodeMap(TFileCollection* fc, TString& emsg); Get a map {server-name, list-of-files} for collection 'fc' to be used in; TPacketizerFile. Returns a pointer to the map (ownership of the caller).; Or (TMap *)0 and an error message in emsg. void HandleProcess(TMessage* mess, TString* slb = 0); Handle processing request. Int_t SendResults(TSocket* sock, TList* outlist = 0, TQueryResult* pq = 0); Sends all objects from the given list to the specified socket. void ProcessNext(TString* slb = 0); process the next query from the queue of submitted jobs.",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:31930,Security,access,access,31930," sig); Exception handler: we do not try to recover here, just exit. Int_t HandleDataSets(TMessage* mess, TString* slb = 0); Handle here requests about datasets. void HandleSubmerger(TMessage* mess); Handle a message of type kPROOF_SUBMERGER. void HandleFork(TMessage* mess); Cloning itself via fork. Not implemented. Int_t Fork(); Fork a child.; If successful, return 0 in the child process and the child pid in the parent; process. The child pid is registered for reaping.; Return <0 in the parent process in case of failure. void ResolveKeywords(TString& fname, const char* path = 0); Replace <ord>, <user>, <u>, <group>, <stag>, <qnum>, <file>, <rver> and; <build> placeholders in fname.; Here, <rver> is the root version in integer form, e.g. 53403, and <build> a; string includign version, architecture and compiler version, e.g.; '53403_linuxx8664gcc_gcc46' . Int_t GetSessionStatus(); Return the status of this session:; 0 idle; 1 running; 2 being terminated (currently unused); 3 queued; 4 idle timed-out (not set in here but in TIdleTOTimer::Notify); This is typically run in the reader thread, so access needs to be protected. Int_t UpdateSessionStatus(Int_t xst = -1); Update the session status in the relevant file. The status is taken from; GetSessionStatus() unless xst >= 0, in which case xst is used.; Return 0 on success, -errno if the file could not be opened. Bool_t IsIdle(); Return the idle status. void SetIdle(Bool_t st = kTRUE); Change the idle status. Bool_t IsWaiting(); Return kTRUE if the session is waiting for the OK to start processing. Int_t WaitingQueries(); Return the number of waiting queries. Int_t QueueQuery(TProofQueryResult* pq); Add a query to the waiting list; Returns the number of queries in the list. TProofQueryResult * NextQuery(); Get the next query from the waiting list.; The query is removed from the list. Int_t CleanupWaitingQueries(Bool_t del = kTRUE, TList* qls = 0); Cleanup the waiting queries list. The objects are deleted if 'del' is true.; ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:12232,Testability,Test,TestBit,12232,"As(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tSendAsynMessage(const char* msg, Bool_t lf = kTRUE); virtual voidSendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); voidSendParallel(Bool_t async = kFALSE); voidSendStatistics(); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); static FILE*SetErrorHandlerFile(FILE* ferr); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidSetLastEntry(Long64_t lastentry); static voidSetLastMsg(const char* lastmsg); static voidTObject::SetObjectStat(Bool_t stat); voidTApplication::SetReturnFromRun(Bool_t ret); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTApplication::Show(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTApplication::StartIdleing(); virtual voidTApplication::StopIdleing(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual Int_tTApplication::TabCompletionHook(char* buf, int* pLoc, ostream& out); virtual voidTerminate(Int_t status); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; static TProofServ*This(); TProofServ(const TProofServ&); TProofServ(Int_t* argc, char** argv, FILE* flog = 0); voidTruncateLogFile(); Int_tUpdateSessionStatus(Int_t xst = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:12271,Testability,Test,TestBits,12271,"As(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tSendAsynMessage(const char* msg, Bool_t lf = kTRUE); virtual voidSendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); voidSendParallel(Bool_t async = kFALSE); voidSendStatistics(); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); static FILE*SetErrorHandlerFile(FILE* ferr); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidSetLastEntry(Long64_t lastentry); static voidSetLastMsg(const char* lastmsg); static voidTObject::SetObjectStat(Bool_t stat); voidTApplication::SetReturnFromRun(Bool_t ret); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTApplication::Show(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTApplication::StartIdleing(); virtual voidTApplication::StopIdleing(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual Int_tTApplication::TabCompletionHook(char* buf, int* pLoc, ostream& out); virtual voidTerminate(Int_t status); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; static TProofServ*This(); TProofServ(const TProofServ&); TProofServ(Int_t* argc, char** argv, FILE* flog = 0); voidTruncateLogFile(); Int_tUpdateSessionStatus(Int_t xst = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:19052,Testability,sandbox,sandbox,19052,fDirdirectory containing cluster config information; TStringfConfFilefile containing config information; Float_tfCpuTimeCPU time spent executing commands; TStringfDataDirdirectory containing data files produced during queries; TStringfDataDirOptsUrl type options for fDataDir; TStringfDataSetDirdirectory containing info about known data sets; TDataSetManager*fDataSetManagerdataset manager; TDataSetManagerFile*fDataSetStgReporepository for staging requests; Float_tfEffSessionsEffective Number of PROOF sessions on the assigned machines; TList*fEnabledPackageslist of enabled packages; Bool_tfEndMastertrue for a master in direct contact only with workers; THashList*fGlobalPackageDirListlist of directories containing global packages libs; TStringfGroupgroup the user belongs to; Int_tfGroupIdslave unique id in the active slave group; Int_tfGroupPrioritypriority of group the user belongs to (0 - 100); Int_tfGroupSizesize of the active slave group; Long64_tfHWMBoxSizeHigh-Water-Mark on the sandbox size; Bool_tfIdleTRUE if idle; TIdleTOTimer*fIdleTOTimerTimer used to control children state; TStringfImageimage name of the session; TFileHandler*fInputHandlerInput socket handler; Bool_tfInterruptif true macro execution will be stopped; TStopwatchfLatencymeasures latency of packet requests; FILE*fLogFilelog file; Int_tfLogFileDeslog file descriptor; Long64_tfLogFileMaxSizemax size for log files (enabled if > 0); Int_tfLogLeveldebug logging level; Bool_tfMasterServtrue if we are a master server; Long64_tfMaxBoxSizeMax size of the sandbox; Int_tfMaxQueriesMax number of queries fully kept; Int_tfMergedWorkersNumber of workers merged; TMonitor*fMergingMonitorMonitor for merging sockets; TServerSocket*fMergingSocketSocket used for merging outputs if submerger; Long64_tfMsgSizeHWMHigh-Water-Mark on the size of messages with results; Int_tfNcmdcommand history number; TStringfOrdinalslave ordinal number; TStringfOutputFilepath with the temporary results of the current or last query; TStr,MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:19450,Testability,log,log,19450,aSetManagerFile*fDataSetStgReporepository for staging requests; Float_tfEffSessionsEffective Number of PROOF sessions on the assigned machines; TList*fEnabledPackageslist of enabled packages; Bool_tfEndMastertrue for a master in direct contact only with workers; THashList*fGlobalPackageDirListlist of directories containing global packages libs; TStringfGroupgroup the user belongs to; Int_tfGroupIdslave unique id in the active slave group; Int_tfGroupPrioritypriority of group the user belongs to (0 - 100); Int_tfGroupSizesize of the active slave group; Long64_tfHWMBoxSizeHigh-Water-Mark on the sandbox size; Bool_tfIdleTRUE if idle; TIdleTOTimer*fIdleTOTimerTimer used to control children state; TStringfImageimage name of the session; TFileHandler*fInputHandlerInput socket handler; Bool_tfInterruptif true macro execution will be stopped; TStopwatchfLatencymeasures latency of packet requests; FILE*fLogFilelog file; Int_tfLogFileDeslog file descriptor; Long64_tfLogFileMaxSizemax size for log files (enabled if > 0); Int_tfLogLeveldebug logging level; Bool_tfMasterServtrue if we are a master server; Long64_tfMaxBoxSizeMax size of the sandbox; Int_tfMaxQueriesMax number of queries fully kept; Int_tfMergedWorkersNumber of workers merged; TMonitor*fMergingMonitorMonitor for merging sockets; TServerSocket*fMergingSocketSocket used for merging outputs if submerger; Long64_tfMsgSizeHWMHigh-Water-Mark on the size of messages with results; Int_tfNcmdcommand history number; TStringfOrdinalslave ordinal number; TStringfOutputFilepath with the temporary results of the current or last query; TStringfPackageDirdirectory containing packages and user libs; TProofLockPath*fPackageLockpackage dir locker; TVirtualProofPlayer*fPlayeractual player; TStringfPrefixPrefix identifying the node; TProof*fProofPROOF talking to slave servers; Int_tfProtocolprotocol version number; TQueryResultManager*fQMgrQuery-result manager; TMutex*fQMtxTo protect async msg queue; TStringfQueryDirdirectory containi,MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:19498,Testability,log,logging,19498,ing requests; Float_tfEffSessionsEffective Number of PROOF sessions on the assigned machines; TList*fEnabledPackageslist of enabled packages; Bool_tfEndMastertrue for a master in direct contact only with workers; THashList*fGlobalPackageDirListlist of directories containing global packages libs; TStringfGroupgroup the user belongs to; Int_tfGroupIdslave unique id in the active slave group; Int_tfGroupPrioritypriority of group the user belongs to (0 - 100); Int_tfGroupSizesize of the active slave group; Long64_tfHWMBoxSizeHigh-Water-Mark on the sandbox size; Bool_tfIdleTRUE if idle; TIdleTOTimer*fIdleTOTimerTimer used to control children state; TStringfImageimage name of the session; TFileHandler*fInputHandlerInput socket handler; Bool_tfInterruptif true macro execution will be stopped; TStopwatchfLatencymeasures latency of packet requests; FILE*fLogFilelog file; Int_tfLogFileDeslog file descriptor; Long64_tfLogFileMaxSizemax size for log files (enabled if > 0); Int_tfLogLeveldebug logging level; Bool_tfMasterServtrue if we are a master server; Long64_tfMaxBoxSizeMax size of the sandbox; Int_tfMaxQueriesMax number of queries fully kept; Int_tfMergedWorkersNumber of workers merged; TMonitor*fMergingMonitorMonitor for merging sockets; TServerSocket*fMergingSocketSocket used for merging outputs if submerger; Long64_tfMsgSizeHWMHigh-Water-Mark on the size of messages with results; Int_tfNcmdcommand history number; TStringfOrdinalslave ordinal number; TStringfOutputFilepath with the temporary results of the current or last query; TStringfPackageDirdirectory containing packages and user libs; TProofLockPath*fPackageLockpackage dir locker; TVirtualProofPlayer*fPlayeractual player; TStringfPrefixPrefix identifying the node; TProof*fProofPROOF talking to slave servers; Int_tfProtocolprotocol version number; TQueryResultManager*fQMgrQuery-result manager; TMutex*fQMtxTo protect async msg queue; TStringfQueryDirdirectory containing query results and status; TProofLockPath*fQuery,MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:19597,Testability,sandbox,sandbox,19597,*fEnabledPackageslist of enabled packages; Bool_tfEndMastertrue for a master in direct contact only with workers; THashList*fGlobalPackageDirListlist of directories containing global packages libs; TStringfGroupgroup the user belongs to; Int_tfGroupIdslave unique id in the active slave group; Int_tfGroupPrioritypriority of group the user belongs to (0 - 100); Int_tfGroupSizesize of the active slave group; Long64_tfHWMBoxSizeHigh-Water-Mark on the sandbox size; Bool_tfIdleTRUE if idle; TIdleTOTimer*fIdleTOTimerTimer used to control children state; TStringfImageimage name of the session; TFileHandler*fInputHandlerInput socket handler; Bool_tfInterruptif true macro execution will be stopped; TStopwatchfLatencymeasures latency of packet requests; FILE*fLogFilelog file; Int_tfLogFileDeslog file descriptor; Long64_tfLogFileMaxSizemax size for log files (enabled if > 0); Int_tfLogLeveldebug logging level; Bool_tfMasterServtrue if we are a master server; Long64_tfMaxBoxSizeMax size of the sandbox; Int_tfMaxQueriesMax number of queries fully kept; Int_tfMergedWorkersNumber of workers merged; TMonitor*fMergingMonitorMonitor for merging sockets; TServerSocket*fMergingSocketSocket used for merging outputs if submerger; Long64_tfMsgSizeHWMHigh-Water-Mark on the size of messages with results; Int_tfNcmdcommand history number; TStringfOrdinalslave ordinal number; TStringfOutputFilepath with the temporary results of the current or last query; TStringfPackageDirdirectory containing packages and user libs; TProofLockPath*fPackageLockpackage dir locker; TVirtualProofPlayer*fPlayeractual player; TStringfPrefixPrefix identifying the node; TProof*fProofPROOF talking to slave servers; Int_tfProtocolprotocol version number; TQueryResultManager*fQMgrQuery-result manager; TMutex*fQMtxTo protect async msg queue; TStringfQueryDirdirectory containing query results and status; TProofLockPath*fQueryLockquery dir locker; Int_tfQuerySeqNumsequential number of the current or last query; TList*fQueue,MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:20725,Testability,log,log,20725,"nitor for merging sockets; TServerSocket*fMergingSocketSocket used for merging outputs if submerger; Long64_tfMsgSizeHWMHigh-Water-Mark on the size of messages with results; Int_tfNcmdcommand history number; TStringfOrdinalslave ordinal number; TStringfOutputFilepath with the temporary results of the current or last query; TStringfPackageDirdirectory containing packages and user libs; TProofLockPath*fPackageLockpackage dir locker; TVirtualProofPlayer*fPlayeractual player; TStringfPrefixPrefix identifying the node; TProof*fProofPROOF talking to slave servers; Int_tfProtocolprotocol version number; TQueryResultManager*fQMgrQuery-result manager; TMutex*fQMtxTo protect async msg queue; TStringfQueryDirdirectory containing query results and status; TProofLockPath*fQueryLockquery dir locker; Int_tfQuerySeqNumsequential number of the current or last query; TList*fQueuedMsglist of messages waiting to be processed; Float_tfRealTimereal time spent executing commands; Bool_tfRealTimeLogTRUE if log messages should be send back in real-time; TReaperTimer*fReaperTimerTimer used to control children state; TStopwatchfSaveOutputmeasures time spent saving the partial result; Bool_tfSendLogToMasterOn workers, controls logs sending to master; TStringfServiceservice we are running, either ""proofserv"" or ""proofslave""; TStringfSessionDirdirectory containing session dependent files; TStringfSessionTagtag for the server session; TShutdownTimer*fShutdownTimerTimer used to shutdown out-of-control sessions; TSocket*fSocketsocket connection to client; TStringfTopSessionTagtag for the global session; Int_tfTotSessionsTotal number of PROOF sessions on the cluster; TStringfUseruser as which we run; TList*fWaitingQuerieslist of TProofQueryResult waiting to be processed; TStringfWorkDirdirectory containing all proof related info; static FILE*fgErrorHandlerFileFile where to log; static Int_tfgLogToSysLog>0 sent to syslog too; static Float_tfgMemHWMThreshold fraction of max for warning and finer monit",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:20946,Testability,log,logs,20946,"alslave ordinal number; TStringfOutputFilepath with the temporary results of the current or last query; TStringfPackageDirdirectory containing packages and user libs; TProofLockPath*fPackageLockpackage dir locker; TVirtualProofPlayer*fPlayeractual player; TStringfPrefixPrefix identifying the node; TProof*fProofPROOF talking to slave servers; Int_tfProtocolprotocol version number; TQueryResultManager*fQMgrQuery-result manager; TMutex*fQMtxTo protect async msg queue; TStringfQueryDirdirectory containing query results and status; TProofLockPath*fQueryLockquery dir locker; Int_tfQuerySeqNumsequential number of the current or last query; TList*fQueuedMsglist of messages waiting to be processed; Float_tfRealTimereal time spent executing commands; Bool_tfRealTimeLogTRUE if log messages should be send back in real-time; TReaperTimer*fReaperTimerTimer used to control children state; TStopwatchfSaveOutputmeasures time spent saving the partial result; Bool_tfSendLogToMasterOn workers, controls logs sending to master; TStringfServiceservice we are running, either ""proofserv"" or ""proofslave""; TStringfSessionDirdirectory containing session dependent files; TStringfSessionTagtag for the server session; TShutdownTimer*fShutdownTimerTimer used to shutdown out-of-control sessions; TSocket*fSocketsocket connection to client; TStringfTopSessionTagtag for the global session; Int_tfTotSessionsTotal number of PROOF sessions on the cluster; TStringfUseruser as which we run; TList*fWaitingQuerieslist of TProofQueryResult waiting to be processed; TStringfWorkDirdirectory containing all proof related info; static FILE*fgErrorHandlerFileFile where to log; static Int_tfgLogToSysLog>0 sent to syslog too; static Float_tfgMemHWMThreshold fraction of max for warning and finer monitoring; static Float_tfgMemStopFraction of max for stop processing; static Int_tfgRecursiveKeep track of recursive inputs during processing; static Long_tfgResMemMaxHard limit on the resident memory checked; static TStringf",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:21599,Testability,log,log,21599,"ctory containing packages and user libs; TProofLockPath*fPackageLockpackage dir locker; TVirtualProofPlayer*fPlayeractual player; TStringfPrefixPrefix identifying the node; TProof*fProofPROOF talking to slave servers; Int_tfProtocolprotocol version number; TQueryResultManager*fQMgrQuery-result manager; TMutex*fQMtxTo protect async msg queue; TStringfQueryDirdirectory containing query results and status; TProofLockPath*fQueryLockquery dir locker; Int_tfQuerySeqNumsequential number of the current or last query; TList*fQueuedMsglist of messages waiting to be processed; Float_tfRealTimereal time spent executing commands; Bool_tfRealTimeLogTRUE if log messages should be send back in real-time; TReaperTimer*fReaperTimerTimer used to control children state; TStopwatchfSaveOutputmeasures time spent saving the partial result; Bool_tfSendLogToMasterOn workers, controls logs sending to master; TStringfServiceservice we are running, either ""proofserv"" or ""proofslave""; TStringfSessionDirdirectory containing session dependent files; TStringfSessionTagtag for the server session; TShutdownTimer*fShutdownTimerTimer used to shutdown out-of-control sessions; TSocket*fSocketsocket connection to client; TStringfTopSessionTagtag for the global session; Int_tfTotSessionsTotal number of PROOF sessions on the cluster; TStringfUseruser as which we run; TList*fWaitingQuerieslist of TProofQueryResult waiting to be processed; TStringfWorkDirdirectory containing all proof related info; static FILE*fgErrorHandlerFileFile where to log; static Int_tfgLogToSysLog>0 sent to syslog too; static Float_tfgMemHWMThreshold fraction of max for warning and finer monitoring; static Float_tfgMemStopFraction of max for stop processing; static Int_tfgRecursiveKeep track of recursive inputs during processing; static Long_tfgResMemMaxHard limit on the resident memory checked; static TStringfgSysLogEntitylogging entity (<user>:<group>); static TStringfgSysLogServicename of the syslog service (eg: proofm-0, proofw-0.",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:24596,Testability,log,log,24596,""" <confdir>. void HandleSocketInput(); Handle input coming from the client or from the master server. Int_t HandleSocketInput(TMessage* mess, Bool_t all); Process input coming from the client or from the master server.; If 'all' is kFALSE, process only those messages that can be handled; during query processing.; Returns -1 if the message could not be processed, <-1 if something went; wrong. Returns 1 if the action may have changed the parallel state.; Returns 2 if the message has to be enqueued.; Returns 0 otherwise. Bool_t AcceptResults(Int_t connections, TVirtualProofPlayer* mergerPlayer); Accept and merge results from a set of workers. void HandleUrgentData(); Handle Out-Of-Band data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore (i.e. when kKeepAlive; has failed). Bool_t IsParallel() const; True if in parallel mode. void Print(Option_t* option = """") const; Print status of slave server. void RedirectOutput(const char* dir = 0, const char* mode = ""w""); Redirect stdout to a log file. This log file will be flushed to the; client or master after each command. void Reset(const char* dir); Reset PROOF environment to be ready for execution of next command. Int_t ReceiveFile(const char* file, Bool_t bin, Long64_t size); Receive a file, either sent by a client or a master server.; If bin is true it is a binary file, other wise it is an ASCII; file and we need to check for Windows \r tokens. Returns -1 in; case of error, 0 otherwise. void Run(Bool_t retrn = kFALSE); Main server eventloop. void SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); Send log file to master.; If start > -1 send only bytes in the range from start to end,; if end <= start send everything from start. void SendStatistics(); Send statistics of slave server to master or client. void SendParallel(Bool_t async = kFALSE); Send number of parallel nodes to master or client. Int_t UnloadPackage(const char* package); Removes link to package in wor",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:24611,Testability,log,log,24611," master server. Int_t HandleSocketInput(TMessage* mess, Bool_t all); Process input coming from the client or from the master server.; If 'all' is kFALSE, process only those messages that can be handled; during query processing.; Returns -1 if the message could not be processed, <-1 if something went; wrong. Returns 1 if the action may have changed the parallel state.; Returns 2 if the message has to be enqueued.; Returns 0 otherwise. Bool_t AcceptResults(Int_t connections, TVirtualProofPlayer* mergerPlayer); Accept and merge results from a set of workers. void HandleUrgentData(); Handle Out-Of-Band data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore (i.e. when kKeepAlive; has failed). Bool_t IsParallel() const; True if in parallel mode. void Print(Option_t* option = """") const; Print status of slave server. void RedirectOutput(const char* dir = 0, const char* mode = ""w""); Redirect stdout to a log file. This log file will be flushed to the; client or master after each command. void Reset(const char* dir); Reset PROOF environment to be ready for execution of next command. Int_t ReceiveFile(const char* file, Bool_t bin, Long64_t size); Receive a file, either sent by a client or a master server.; If bin is true it is a binary file, other wise it is an ASCII; file and we need to check for Windows \r tokens. Returns -1 in; case of error, 0 otherwise. void Run(Bool_t retrn = kFALSE); Main server eventloop. void SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); Send log file to master.; If start > -1 send only bytes in the range from start to end,; if end <= start send everything from start. void SendStatistics(); Send statistics of slave server to master or client. void SendParallel(Bool_t async = kFALSE); Send number of parallel nodes to master or client. Int_t UnloadPackage(const char* package); Removes link to package in working directory,; removes entry from include path,; removes entry from enabled package ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:25188,Testability,log,log,25188,"ept and merge results from a set of workers. void HandleUrgentData(); Handle Out-Of-Band data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore (i.e. when kKeepAlive; has failed). Bool_t IsParallel() const; True if in parallel mode. void Print(Option_t* option = """") const; Print status of slave server. void RedirectOutput(const char* dir = 0, const char* mode = ""w""); Redirect stdout to a log file. This log file will be flushed to the; client or master after each command. void Reset(const char* dir); Reset PROOF environment to be ready for execution of next command. Int_t ReceiveFile(const char* file, Bool_t bin, Long64_t size); Receive a file, either sent by a client or a master server.; If bin is true it is a binary file, other wise it is an ASCII; file and we need to check for Windows \r tokens. Returns -1 in; case of error, 0 otherwise. void Run(Bool_t retrn = kFALSE); Main server eventloop. void SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); Send log file to master.; If start > -1 send only bytes in the range from start to end,; if end <= start send everything from start. void SendStatistics(); Send statistics of slave server to master or client. void SendParallel(Bool_t async = kFALSE); Send number of parallel nodes to master or client. Int_t UnloadPackage(const char* package); Removes link to package in working directory,; removes entry from include path,; removes entry from enabled package list,; does not currently remove entry from interpreter include path.; Returns -1 in case of error, 0 otherwise. Int_t UnloadPackages(); Unloads all enabled packages. Returns -1 in case of error, 0 otherwise. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on failure. Int_t SetupCommon(); Common part (between TProofServ and TXProofServ) of the setup phase.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. Bool_t UnlinkDataDir(const c",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:25887,Testability,log,logo,25887,"or a master server.; If bin is true it is a binary file, other wise it is an ASCII; file and we need to check for Windows \r tokens. Returns -1 in; case of error, 0 otherwise. void Run(Bool_t retrn = kFALSE); Main server eventloop. void SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); Send log file to master.; If start > -1 send only bytes in the range from start to end,; if end <= start send everything from start. void SendStatistics(); Send statistics of slave server to master or client. void SendParallel(Bool_t async = kFALSE); Send number of parallel nodes to master or client. Int_t UnloadPackage(const char* package); Removes link to package in working directory,; removes entry from include path,; removes entry from enabled package list,; does not currently remove entry from interpreter include path.; Returns -1 in case of error, 0 otherwise. Int_t UnloadPackages(); Unloads all enabled packages. Returns -1 in case of error, 0 otherwise. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on failure. Int_t SetupCommon(); Common part (between TProofServ and TXProofServ) of the setup phase.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. Bool_t UnlinkDataDir(const char* path); Scan recursively the datadir and unlink it if empty; Return kTRUE if it can be unlinked, kFALSE otherwise. Bool_t IsActive(); Static function that returns kTRUE in case we are a PROOF server. TProofServ * This(); Static function returning pointer to global object gProofServ.; Mainly for use via CINT, where the gProofServ symbol might be; deleted from the symbol table. Int_t OldAuthSetup(TString& wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TProofQueryResult * MakeQueryResult(Long64_t nentries, const char* opt, TList* inl, Long64_t first, TDSet* dset, const char* selec, TObject* elist); Create a TProofQueryResult instance for this query. void SetQu",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:28449,Testability,log,log,28449,"q = 0); Sends all objects from the given list to the specified socket. void ProcessNext(TString* slb = 0); process the next query from the queue of submitted jobs.; to be called on the top master only. Int_t RegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); Register TFileCollections in 'out' as datasets according to the rules in 'in'. void HandleQueryList(TMessage* mess); Handle request for list of queries. void HandleRemove(TMessage* mess, TString* slb = 0); Handle remove request. void HandleRetrieve(TMessage* mess, TString* slb = 0); Handle retrieve request. Int_t HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player in",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:29801,Testability,log,logging,29801,"ache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the format:; CREATE TABLE proofpriority (; id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,; group VARCHAR(32) NOT NULL,; priority INT; ). Int_t SendAsynMessage(const char* msg, Bool_t lf = kTRUE); Send an asychronous message to the master / client .; Masters will forward up the message to the client.; The client prints 'msg' of stderr and adds a '\n'/'\r' depending on; 'lf' being kTRUE (default) or kFALSE.; Returns the return value from TSocket::Send(TMessage &) . void FlushLogFile(); Reposition the read pointer in the log file to the very end.; This allows to ""hide"" useful debug messages during normal operations; while preserving the possibility to have them in case of problems. void TruncateLogFile(); Truncate the log file to the 80% of the ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:30534,Testability,log,log,30534,"This; priority is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the format:; CREATE TABLE proofpriority (; id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,; group VARCHAR(32) NOT NULL,; priority INT; ). Int_t SendAsynMessage(const char* msg, Bool_t lf = kTRUE); Send an asychronous message to the master / client .; Masters will forward up the message to the client.; The client prints 'msg' of stderr and adds a '\n'/'\r' depending on; 'lf' being kTRUE (default) or kFALSE.; Returns the return value from TSocket::Send(TMessage &) . void FlushLogFile(); Reposition the read pointer in the log file to the very end.; This allows to ""hide"" useful debug messages during normal operations; while preserving the possibility to have them in case of problems. void TruncateLogFile(); Truncate the log file to the 80% of the required max size if this; is set. void HandleException(Int_t sig); Exception handler: we do not try to recover here, just exit. Int_t HandleDataSets(TMessage* mess, TString* slb = 0); Handle here requests about datasets. void HandleSubmerger(TMessage* mess); Handle a message of type kPROOF_SUBMERGER. void HandleFork(TMessage* mess); Cloning itself via fork. Not implemented. Int_t Fork(); Fork a child.; If successful, return 0 in the child process and the child pid in the parent; process. The child pid is registered for reaping.; Return <0 in the parent process in case of failure. void ResolveKeywords(TString& fname, const char* path = 0); Replace <ord>, <user>, <u>, <group>, <stag>, <qnum>, <file>, <rver> and; <build> placeholders in fname.; Her",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:30735,Testability,log,log,30735,"rs in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the format:; CREATE TABLE proofpriority (; id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,; group VARCHAR(32) NOT NULL,; priority INT; ). Int_t SendAsynMessage(const char* msg, Bool_t lf = kTRUE); Send an asychronous message to the master / client .; Masters will forward up the message to the client.; The client prints 'msg' of stderr and adds a '\n'/'\r' depending on; 'lf' being kTRUE (default) or kFALSE.; Returns the return value from TSocket::Send(TMessage &) . void FlushLogFile(); Reposition the read pointer in the log file to the very end.; This allows to ""hide"" useful debug messages during normal operations; while preserving the possibility to have them in case of problems. void TruncateLogFile(); Truncate the log file to the 80% of the required max size if this; is set. void HandleException(Int_t sig); Exception handler: we do not try to recover here, just exit. Int_t HandleDataSets(TMessage* mess, TString* slb = 0); Handle here requests about datasets. void HandleSubmerger(TMessage* mess); Handle a message of type kPROOF_SUBMERGER. void HandleFork(TMessage* mess); Cloning itself via fork. Not implemented. Int_t Fork(); Fork a child.; If successful, return 0 in the child process and the child pid in the parent; process. The child pid is registered for reaping.; Return <0 in the parent process in case of failure. void ResolveKeywords(TString& fname, const char* path = 0); Replace <ord>, <user>, <u>, <group>, <stag>, <qnum>, <file>, <rver> and; <build> placeholders in fname.; Here, <rver> is the root version in integer form, e.g. 53403, and <build> a; string includign version, architecture and compiler version, e.g.; '53403_linuxx8664gcc_gcc46' . Int_t GetSessionStatus(); Return the status of this sessio",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:35730,Testability,Log,LogToMaster,35730,") const; { return fTopSessionTag; }. const char * GetSessionDir() const; { return fSessionDir; }. const char * GetPackageDir() const; { return fPackageDir; }. const char * GetDataDir() const; { return fDataDir; }. const char * GetDataDirOpts() const; { return fDataDirOpts; }. Int_t GetProtocol() const; { return fProtocol; }. const char * GetOrdinal() const; { return fOrdinal; }. Int_t GetGroupId() const; { return fGroupId; }. Int_t GetGroupSize() const; { return fGroupSize; }. Int_t GetLogLevel() const; { return fLogLevel; }. TSocket * GetSocket() const; { return fSocket; }. Float_t GetRealTime() const; { return fRealTime; }. Float_t GetCpuTime() const; { return fCpuTime; }. Int_t GetQuerySeqNum() const; { return fQuerySeqNum; }. Int_t GetTotSessions() const; { return fTotSessions; }. Int_t GetActSessions() const; { return fActSessions; }. Float_t GetEffSessions() const; { return fEffSessions; }. TList * GetEnabledPackages() const; { return fEnabledPackages; }. Long64_t GetMsgSizeHWM() const; { return fMsgSizeHWM; }. const char * GetPrefix() const; { return fPrefix; }. TProofLockPath * GetCacheLock(); { return fCacheLock; }. EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE). void HandleTermination(); { Terminate(0); }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsEndMaster() const; { return fEndMaster; }. Bool_t IsMaster() const; { return fMasterServ; }. Bool_t IsTopMaster() const; { return fOrdinal == ""0""; }. void ReleaseWorker(const char* ); { }. void DisableTimeout(); Disable / Enable read timeout. { }. void EnableTimeout(); { }. void LogToMaster(Bool_t on = kTRUE); Log control. { fSendLogToMaster = on; }. » Author: Fons Rademakers 16/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:35762,Testability,Log,Log,35762,") const; { return fTopSessionTag; }. const char * GetSessionDir() const; { return fSessionDir; }. const char * GetPackageDir() const; { return fPackageDir; }. const char * GetDataDir() const; { return fDataDir; }. const char * GetDataDirOpts() const; { return fDataDirOpts; }. Int_t GetProtocol() const; { return fProtocol; }. const char * GetOrdinal() const; { return fOrdinal; }. Int_t GetGroupId() const; { return fGroupId; }. Int_t GetGroupSize() const; { return fGroupSize; }. Int_t GetLogLevel() const; { return fLogLevel; }. TSocket * GetSocket() const; { return fSocket; }. Float_t GetRealTime() const; { return fRealTime; }. Float_t GetCpuTime() const; { return fCpuTime; }. Int_t GetQuerySeqNum() const; { return fQuerySeqNum; }. Int_t GetTotSessions() const; { return fTotSessions; }. Int_t GetActSessions() const; { return fActSessions; }. Float_t GetEffSessions() const; { return fEffSessions; }. TList * GetEnabledPackages() const; { return fEnabledPackages; }. Long64_t GetMsgSizeHWM() const; { return fMsgSizeHWM; }. const char * GetPrefix() const; { return fPrefix; }. TProofLockPath * GetCacheLock(); { return fCacheLock; }. EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE). void HandleTermination(); { Terminate(0); }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsEndMaster() const; { return fEndMaster; }. Bool_t IsMaster() const; { return fMasterServ; }. Bool_t IsTopMaster() const; { return fOrdinal == ""0""; }. void ReleaseWorker(const char* ); { }. void DisableTimeout(); Disable / Enable read timeout. { }. void EnableTimeout(); { }. void LogToMaster(Bool_t on = kTRUE); Log control. { fSendLogToMaster = on; }. » Author: Fons Rademakers 16/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:1235,Usability,Clear,Clear,1235," virtual~TProofServ(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TApplication::ApplicationName() const; static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Int_tTApplication::Argc() const; char**TApplication::Argv() const; char*TApplication::Argv(Int_t index) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTApplication::ClearInputFiles(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; Int_tCopyFromCache(const char* name, Bool_t c",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:1276,Usability,Clear,ClearInputFiles,1276," virtual~TProofServ(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TApplication::ApplicationName() const; static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Int_tTApplication::Argc() const; char**TApplication::Argv() const; char*TApplication::Argv(Int_t index) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTApplication::ClearInputFiles(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; Int_tCopyFromCache(const char* name, Bool_t c",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:7006,Usability,resume,resume,7006,"etElement*GetNextPacket(Long64_t totalEntries = -1); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual voidGetOptions(Int_t* argc, char** argv); const char*GetOrdinal() const; const char*GetPackageDir() const; const char*GetPrefix() const; TProof*GetProof() const; Int_tGetProtocol() const; Int_tGetQuerySeqNum() const; Float_tGetRealTime() const; static Long_tGetResMemMax(); const char*GetService() const; const char*GetSessionDir() const; const char*GetSessionTag() const; TSignalHandler*TApplication::GetSignalHandler() const; TSocket*GetSocket() const; virtual const char*TObject::GetTitle() const; const char*GetTopSessionTag() const; Int_tGetTotSessions() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUser() const; static Long_tGetVirtMemMax(); const char*GetWorkDir() const; virtual TProofServ::EQueryActionGetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); virtual voidHandleException(Int_t sig); virtual voidTApplication::HandleIdleTimer()SIGNAL ; virtual voidHandleSigPipe(); virtual voidHandleSocketInput(); virtual Int_tHandleSocketInput(TMessage* mess, Bool_t all); virtual voidHandleTermination(); virtual Bool_tTApplication::HandleTermInput(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual voidHandleUrgentData(); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTApplication::Hide(); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTApplication::Init(); voidTApplication::InitializeGraphics(); TObjArray*TApplication::InputFiles() const; virtual voidTObject::Ins",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServ.html:35335,Usability,resume,resume,35335,") const; { return fTopSessionTag; }. const char * GetSessionDir() const; { return fSessionDir; }. const char * GetPackageDir() const; { return fPackageDir; }. const char * GetDataDir() const; { return fDataDir; }. const char * GetDataDirOpts() const; { return fDataDirOpts; }. Int_t GetProtocol() const; { return fProtocol; }. const char * GetOrdinal() const; { return fOrdinal; }. Int_t GetGroupId() const; { return fGroupId; }. Int_t GetGroupSize() const; { return fGroupSize; }. Int_t GetLogLevel() const; { return fLogLevel; }. TSocket * GetSocket() const; { return fSocket; }. Float_t GetRealTime() const; { return fRealTime; }. Float_t GetCpuTime() const; { return fCpuTime; }. Int_t GetQuerySeqNum() const; { return fQuerySeqNum; }. Int_t GetTotSessions() const; { return fTotSessions; }. Int_t GetActSessions() const; { return fActSessions; }. Float_t GetEffSessions() const; { return fEffSessions; }. TList * GetEnabledPackages() const; { return fEnabledPackages; }. Long64_t GetMsgSizeHWM() const; { return fMsgSizeHWM; }. const char * GetPrefix() const; { return fPrefix; }. TProofLockPath * GetCacheLock(); { return fCacheLock; }. EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE). void HandleTermination(); { Terminate(0); }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsEndMaster() const; { return fEndMaster; }. Bool_t IsMaster() const; { return fMasterServ; }. Bool_t IsTopMaster() const; { return fOrdinal == ""0""; }. void ReleaseWorker(const char* ); { }. void DisableTimeout(); Disable / Enable read timeout. { }. void EnableTimeout(); { }. void LogToMaster(Bool_t on = kTRUE); Log control. { fSendLogToMaster = on; }. » Author: Fons Rademakers 16/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServ.html
https://root.cern/root/html604/TProofServLite.html:4062,Availability,Error,Error,4062,"onst char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTProofServ::EnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidTProofServ::ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidTProofServ::FilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidTProofServ::FlushLogFile(); TObject*TProofServ::Get(const char* namecycle); Int_tTProofServ::GetActSessions() cons",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:4138,Availability,Error,ErrorHandler,4138,"nst char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTProofServ::EnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidTProofServ::ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidTProofServ::FilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidTProofServ::FlushLogFile(); TObject*TProofServ::Get(const char* namecycle); Int_tTProofServ::GetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TAppl",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:4294,Availability,error,error,4294," char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTProofServ::EnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidTProofServ::ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidTProofServ::FilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidTProofServ::FlushLogFile(); TObject*TProofServ::Get(const char* namecycle); Int_tTProofServ::GetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; TProofLockPath*TProofServ::GetCacheLock(); const char*TProofServ::GetConfDi",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:4378,Availability,error,error,4378,"; voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTProofServ::EnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidTProofServ::ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidTProofServ::FilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidTProofServ::FlushLogFile(); TObject*TProofServ::Get(const char* namecycle); Int_tTProofServ::GetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; TProofLockPath*TProofServ::GetCacheLock(); const char*TProofServ::GetConfDir() const; const char*TProofServ::GetConfFile() const; Float_tTProofServ::GetCpuTime",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:4522,Availability,error,error,4522,"gnal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTProofServ::EnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidTProofServ::ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidTProofServ::FilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidTProofServ::FlushLogFile(); TObject*TProofServ::Get(const char* namecycle); Int_tTProofServ::GetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; TProofLockPath*TProofServ::GetCacheLock(); const char*TProofServ::GetConfDir() const; const char*TProofServ::GetConfFile() const; Float_tTProofServ::GetCpuTime() const; const char*TProofServ::GetDataDir() const; const char*TProofServ::GetDataDirOpts() const; static TMap*TProofServ::GetDataSetNodeMap(TF",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:10772,Availability,error,error,10772,"pplication::NeedGraphicsLibs(); Bool_tTApplication::NoLogoOpt() const; Bool_tTApplication::NoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofServLite&operator=(const TProofServLite&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTProofServ::Print(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); Int_tTProofServ::ReceiveFile(const char* file, Bool_t bin, Long64_t size); virtual voidTObject::RecursiveRemove(TObject* obj); static Int_tTProofServ::RegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); virtual voidTProofServ::ReleaseWorker(const char*); virtual voidTApplication::RemoveIdleTimer(); voidTProofServ::Reset(const char* dir); voidTObject::ResetBit(UInt_t f); static voidTProofServ::ResolveKeywords(TString& fname, const char* path = 0); voidTProofServ::RestartComputeTime(); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTProofServ::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constME",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:10893,Availability,error,error,10893,"_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofServLite&operator=(const TProofServLite&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTProofServ::Print(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); Int_tTProofServ::ReceiveFile(const char* file, Bool_t bin, Long64_t size); virtual voidTObject::RecursiveRemove(TObject* obj); static Int_tTProofServ::RegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); virtual voidTProofServ::ReleaseWorker(const char*); virtual voidTApplication::RemoveIdleTimer(); voidTProofServ::Reset(const char* dir); voidTObject::ResetBit(UInt_t f); static voidTProofServ::ResolveKeywords(TString& fname, const char* path = 0); voidTProofServ::RestartComputeTime(); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTProofServ::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTProofServ::SendAsynMessage(co",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:16004,Availability,error,error,16004,"s(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTProofServ::DeletePlayer(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Int_tTProofServ::Fork(); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; Int_tTProofServ::GetSessionStatus(); virtual voidTProofServ::HandleArchive(TMessage* mess, TString* slb = 0); virtual Int_tTProofServ::HandleCache(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleCheckFile(TMessage* mess, TString* slb = 0); virtual Int_tTProofServ::HandleDataSets(TMessage* mess, TString* slb = 0); virtual Int_tTProofServ::HandleLibIncPath(TMessage* mess); virtual voidTProofServ::HandleProcess(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleQueryList(TMessage* mess); virtual voidTProofServ::HandleRemove(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleRetrieve(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleSubmerger(TMessage* mess); virtual Int_tTProofServ::HandleWorkerLists(TMessage* mess); virtual voidTApplication::Help(const char* line); Bool_tTProofServ::IsIdle(); virtual voidTApplication::LoadGraphicsLibs(); virtual voidTApplication::MakeBatch(); virtual voidTProofServ::MakePlayer(); voidTObject::MakeZombie(); static TApplication*TApplication::Open(const char* url, Int_t debug, const char* script); static Int_tTApplication::ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); virtual voidTProofServ::ProcessNext(TString* slb = 0); virtual Long_tTApplication::ProcessRemote(const char* line, Int_t* error = 0); voidTApplication::SetSignalHandler(TSignalHandler* sh); Int_tTProofServ::SetupCommon(); Bool_tTProofServ::UnlinkDataDir(const char* path).",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:18053,Availability,avail,available,18053,"::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TApplication::EStatusBitsTApplication::kProcessRemotely; static TProofServ::EQueryActionTProofServ::kQueryEnqueued; static TProofServ::EQueryActionTProofServ::kQueryModify; static TProofServ::EQueryActionTProofServ::kQueryOK; static TProofServ::EQueryActionTProofServ::kQueryStop; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static Long64_tTProofServ::fgLastEntryLast entry before exception; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TProofServLiteInterruptHandler*fInterruptHandler; TStringfSockPathunix socket path; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofServLite(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TProofServLite(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called wh",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:18696,Availability,error,error,18696," remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static Long64_tTProofServ::fgLastEntryLast entry before exception; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TProofServLiteInterruptHandler*fInterruptHandler; TStringfSockPathunix socket path; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofServLite(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TProofServLite(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. void HandleFork(TMessage* mess); Cloning itself via fork. Int_t SetupOnFork(const char* ord); Finalize the server setup afetr forking.; Return 0 on success, -1 on error. TProofServLite(Int_t* argc, char** argv, FILE* flog = 0). » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:18852,Availability,alive,alive,18852," remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static Long64_tTProofServ::fgLastEntryLast entry before exception; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TProofServLiteInterruptHandler*fInterruptHandler; TStringfSockPathunix socket path; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofServLite(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TProofServLite(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. void HandleFork(TMessage* mess); Cloning itself via fork. Int_t SetupOnFork(const char* ord); Finalize the server setup afetr forking.; Return 0 on success, -1 on error. TProofServLite(Int_t* argc, char** argv, FILE* flog = 0). » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:18946,Availability,alive,alive,18946," remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static Long64_tTProofServ::fgLastEntryLast entry before exception; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TProofServLiteInterruptHandler*fInterruptHandler; TStringfSockPathunix socket path; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofServLite(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TProofServLite(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. void HandleFork(TMessage* mess); Cloning itself via fork. Int_t SetupOnFork(const char* ord); Finalize the server setup afetr forking.; Return 0 on success, -1 on error. TProofServLite(Int_t* argc, char** argv, FILE* flog = 0). » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:19072,Availability,error,error,19072," remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static Long64_tTProofServ::fgLastEntryLast entry before exception; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TProofServLiteInterruptHandler*fInterruptHandler; TStringfSockPathunix socket path; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofServLite(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TProofServLite(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. void HandleFork(TMessage* mess); Cloning itself via fork. Int_t SetupOnFork(const char* ord); Finalize the server setup afetr forking.; Return 0 on success, -1 on error. TProofServLite(Int_t* argc, char** argv, FILE* flog = 0). » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:19300,Availability,error,error,19300," remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static Long64_tTProofServ::fgLastEntryLast entry before exception; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TProofServLiteInterruptHandler*fInterruptHandler; TStringfSockPathunix socket path; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofServLite(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TProofServLite(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. void HandleFork(TMessage* mess); Cloning itself via fork. Int_t SetupOnFork(const char* ord); Finalize the server setup afetr forking.; Return 0 on success, -1 on error. TProofServLite(Int_t* argc, char** argv, FILE* flog = 0). » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:11273,Deployability,Release,ReleaseWorker,11273,"ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofServLite&operator=(const TProofServLite&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTProofServ::Print(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); Int_tTProofServ::ReceiveFile(const char* file, Bool_t bin, Long64_t size); virtual voidTObject::RecursiveRemove(TObject* obj); static Int_tTProofServ::RegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); virtual voidTProofServ::ReleaseWorker(const char*); virtual voidTApplication::RemoveIdleTimer(); voidTProofServ::Reset(const char* dir); voidTObject::ResetBit(UInt_t f); static voidTProofServ::ResolveKeywords(TString& fname, const char* path = 0); voidTProofServ::RestartComputeTime(); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTProofServ::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTProofServ::SendAsynMessage(const char* msg, Bool_t lf = kTRUE); virtual voidTProofServ::SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); voidTProofServ::SendParallel(Bool_t async = kFALSE); voidTProofServ::SendStatistics(); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(voi",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:13463,Deployability,Update,UpdateSessionStatus,13463," """"); virtual Int_tTProofServ::SendAsynMessage(const char* msg, Bool_t lf = kTRUE); virtual voidTProofServ::SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); voidTProofServ::SendParallel(Bool_t async = kFALSE); voidTProofServ::SendStatistics(); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); static FILE*TProofServ::SetErrorHandlerFile(FILE* ferr); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTProofServ::SetLastEntry(Long64_t lastentry); static voidTProofServ::SetLastMsg(const char* lastmsg); static voidTObject::SetObjectStat(Bool_t stat); voidTApplication::SetReturnFromRun(Bool_t ret); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTApplication::Show(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTApplication::StartIdleing(); virtual voidTApplication::StopIdleing(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual Int_tTApplication::TabCompletionHook(char* buf, int* pLoc, ostream& out); virtual voidTerminate(Int_t status); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; static TProofServ*TProofServ::This(); TProofServLite(const TProofServLite&); TProofServLite(Int_t* argc, char** argv, FILE* flog = 0); voidTProofServ::TruncateLogFile(); Int_tTProofServ::UpdateSessionStatus(Int_t xst = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:531,Integrability,message,messages,531,". TProofServLite. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofServLite. class TProofServLite: public TProofServ. TProofServLite. TProofServLite is the version of the PROOF worker server for local; running. The client starts directly the desired number of these; workers; the master and daemons are eliminated, optimizing the number; of messages exchanged and created / destroyed. Function Members (Methods); public:. virtual~TProofServLite(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TApplication::ApplicationName() const; static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Int_tTApplication::Argc() const; char**TApplication::Argv() const; char*TApplication::Argv(Int_t index) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTApplication::ClearInputFiles(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& objec",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:9729,Integrability,Message,Message,9729," ; voidTProofServ::Interrupt(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; static Bool_tTProofServ::IsActive(); virtual Bool_tTApplication::IsCmdThread(); Bool_tTProofServ::IsEndMaster() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTProofServ::IsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tTProofServ::IsParallel() const; Bool_tTApplication::IsRunning() const; virtual Bool_tTObject::IsSortable() const; Bool_tTProofServ::IsTopMaster() const; Bool_tTObject::IsZombie() const; virtual voidTApplication::KeyPressed(Int_t key)SIGNAL ; virtual voidTApplication::LineProcessed(const char* line)SIGNAL ; voidTProofServ::LogToMaster(Bool_t on = kTRUE); virtual voidTApplication::Lower(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static voidTApplication::NeedGraphicsLibs(); Bool_tTApplication::NoLogoOpt() const; Bool_tTApplication::NoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofServLite&operator=(const TProofServLite&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTProofServ::Print(Option_t* option = """") const; virtual Long_tTApplication",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:8471,Modifiability,Inherit,InheritsFrom,8471,"(); const char*TProofServ::GetWorkDir() const; virtual TProofServ::EQueryActionTProofServ::GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); virtual voidTProofServ::HandleException(Int_t sig); virtual voidHandleFork(TMessage* mess); virtual voidTApplication::HandleIdleTimer()SIGNAL ; virtual voidHandleSigPipe(); virtual voidTProofServ::HandleSocketInput(); virtual Int_tTProofServ::HandleSocketInput(TMessage* mess, Bool_t all); virtual voidHandleTermination(); virtual Bool_tTApplication::HandleTermInput(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual voidTProofServ::HandleUrgentData(); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTApplication::Hide(); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTApplication::Init(); voidTApplication::InitializeGraphics(); TObjArray*TApplication::InputFiles() const; virtual voidTObject::Inspect() constMENU ; voidTProofServ::Interrupt(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; static Bool_tTProofServ::IsActive(); virtual Bool_tTApplication::IsCmdThread(); Bool_tTProofServ::IsEndMaster() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTProofServ::IsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tTProofServ::IsParallel() const; Bool_tTApplication::IsRunning() const; virtual Bool_tTObject::IsSortable() const; Bool_tTProofServ::IsTopMaster() const; Bool_tTObject::IsZombie() const; virtual voidTApplication::KeyPressed(Int_t key)SIGNAL ; virtual voidTApplication::LineProcessed(const char* line)SIGNAL ; voidTProofServ::LogToMaster(Bool_t on = kTRUE); vi",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:8537,Modifiability,Inherit,InheritsFrom,8537,":EQueryActionTProofServ::GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); virtual voidTProofServ::HandleException(Int_t sig); virtual voidHandleFork(TMessage* mess); virtual voidTApplication::HandleIdleTimer()SIGNAL ; virtual voidHandleSigPipe(); virtual voidTProofServ::HandleSocketInput(); virtual Int_tTProofServ::HandleSocketInput(TMessage* mess, Bool_t all); virtual voidHandleTermination(); virtual Bool_tTApplication::HandleTermInput(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual voidTProofServ::HandleUrgentData(); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTApplication::Hide(); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTApplication::Init(); voidTApplication::InitializeGraphics(); TObjArray*TApplication::InputFiles() const; virtual voidTObject::Inspect() constMENU ; voidTProofServ::Interrupt(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; static Bool_tTProofServ::IsActive(); virtual Bool_tTApplication::IsCmdThread(); Bool_tTProofServ::IsEndMaster() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTProofServ::IsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tTProofServ::IsParallel() const; Bool_tTApplication::IsRunning() const; virtual Bool_tTObject::IsSortable() const; Bool_tTProofServ::IsTopMaster() const; Bool_tTObject::IsZombie() const; virtual voidTApplication::KeyPressed(Int_t key)SIGNAL ; virtual voidTApplication::LineProcessed(const char* line)SIGNAL ; voidTProofServ::LogToMaster(Bool_t on = kTRUE); virtual voidTApplication::Lower(); virtual voidTQObject::LowPriority",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:18388,Modifiability,Inherit,Inheritance,18388,":kQueryOK; static TProofServ::EQueryActionTProofServ::kQueryStop; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static Long64_tTProofServ::fgLastEntryLast entry before exception; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TProofServLiteInterruptHandler*fInterruptHandler; TStringfSockPathunix socket path; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofServLite(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TProofServLite(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. void HandleFork(TMessage* mess); Cloning itself via fork. Int_t SetupOnFork(const char* ord); Finalize the server setup afetr forking.; Return 0 on success, -1 on error. TProofServLite(Int_t* argc, char** argv, FILE* flog = 0). » Author: G. Ganis Oct 2005 » Copyright (C) 1995-",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:18401,Modifiability,Inherit,Inherited,18401,":kQueryOK; static TProofServ::EQueryActionTProofServ::kQueryStop; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static Long64_tTProofServ::fgLastEntryLast entry before exception; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TProofServLiteInterruptHandler*fInterruptHandler; TStringfSockPathunix socket path; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofServLite(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TProofServLite(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. void HandleFork(TMessage* mess); Cloning itself via fork. Int_t SetupOnFork(const char* ord); Finalize the server setup afetr forking.; Return 0 on success, -1 on error. TProofServLite(Int_t* argc, char** argv, FILE* flog = 0). » Author: G. Ganis Oct 2005 » Copyright (C) 1995-",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:505,Performance,optimiz,optimizing,505,". TProofServLite. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofServLite. class TProofServLite: public TProofServ. TProofServLite. TProofServLite is the version of the PROOF worker server for local; running. The client starts directly the desired number of these; workers; the master and daemons are eliminated, optimizing the number; of messages exchanged and created / destroyed. Function Members (Methods); public:. virtual~TProofServLite(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TApplication::ApplicationName() const; static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Int_tTApplication::Argc() const; char**TApplication::Argv() const; char*TApplication::Argv(Int_t index) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTApplication::ClearInputFiles(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& objec",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:15547,Performance,Load,LoadGraphicsLibs,15547,"s(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTProofServ::DeletePlayer(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Int_tTProofServ::Fork(); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; Int_tTProofServ::GetSessionStatus(); virtual voidTProofServ::HandleArchive(TMessage* mess, TString* slb = 0); virtual Int_tTProofServ::HandleCache(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleCheckFile(TMessage* mess, TString* slb = 0); virtual Int_tTProofServ::HandleDataSets(TMessage* mess, TString* slb = 0); virtual Int_tTProofServ::HandleLibIncPath(TMessage* mess); virtual voidTProofServ::HandleProcess(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleQueryList(TMessage* mess); virtual voidTProofServ::HandleRemove(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleRetrieve(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleSubmerger(TMessage* mess); virtual Int_tTProofServ::HandleWorkerLists(TMessage* mess); virtual voidTApplication::Help(const char* line); Bool_tTProofServ::IsIdle(); virtual voidTApplication::LoadGraphicsLibs(); virtual voidTApplication::MakeBatch(); virtual voidTProofServ::MakePlayer(); voidTObject::MakeZombie(); static TApplication*TApplication::Open(const char* url, Int_t debug, const char* script); static Int_tTApplication::ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); virtual voidTProofServ::ProcessNext(TString* slb = 0); virtual Long_tTApplication::ProcessRemote(const char* line, Int_t* error = 0); voidTApplication::SetSignalHandler(TSignalHandler* sh); Int_tTProofServ::SetupCommon(); Bool_tTProofServ::UnlinkDataDir(const char* path).",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:4171,Safety,abort,abort,4171,"t::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTProofServ::EnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidTProofServ::ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidTProofServ::FilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidTProofServ::FlushLogFile(); TObject*TProofServ::Get(const char* namecycle); Int_tTProofServ::GetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); T",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:8202,Security,Hash,Hash,8202,"ocket() const; virtual const char*TObject::GetTitle() const; const char*TProofServ::GetTopSessionTag() const; Int_tTProofServ::GetTotSessions() const; virtual UInt_tTObject::GetUniqueID() const; const char*TProofServ::GetUser() const; static Long_tTProofServ::GetVirtMemMax(); const char*TProofServ::GetWorkDir() const; virtual TProofServ::EQueryActionTProofServ::GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); virtual voidTProofServ::HandleException(Int_t sig); virtual voidHandleFork(TMessage* mess); virtual voidTApplication::HandleIdleTimer()SIGNAL ; virtual voidHandleSigPipe(); virtual voidTProofServ::HandleSocketInput(); virtual Int_tTProofServ::HandleSocketInput(TMessage* mess, Bool_t all); virtual voidHandleTermination(); virtual Bool_tTApplication::HandleTermInput(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual voidTProofServ::HandleUrgentData(); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTApplication::Hide(); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTApplication::Init(); voidTApplication::InitializeGraphics(); TObjArray*TApplication::InputFiles() const; virtual voidTObject::Inspect() constMENU ; voidTProofServ::Interrupt(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; static Bool_tTProofServ::IsActive(); virtual Bool_tTApplication::IsCmdThread(); Bool_tTProofServ::IsEndMaster() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTProofServ::IsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tTProofServ::IsParallel() const; Bool_tTApplication::IsRunning() const; virtual Bool_t",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:9444,Testability,Log,LogToMaster,9444,"rtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTApplication::Init(); voidTApplication::InitializeGraphics(); TObjArray*TApplication::InputFiles() const; virtual voidTObject::Inspect() constMENU ; voidTProofServ::Interrupt(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; static Bool_tTProofServ::IsActive(); virtual Bool_tTApplication::IsCmdThread(); Bool_tTProofServ::IsEndMaster() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTProofServ::IsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tTProofServ::IsParallel() const; Bool_tTApplication::IsRunning() const; virtual Bool_tTObject::IsSortable() const; Bool_tTProofServ::IsTopMaster() const; Bool_tTObject::IsZombie() const; virtual voidTApplication::KeyPressed(Int_t key)SIGNAL ; virtual voidTApplication::LineProcessed(const char* line)SIGNAL ; voidTProofServ::LogToMaster(Bool_t on = kTRUE); virtual voidTApplication::Lower(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static voidTApplication::NeedGraphicsLibs(); Bool_tTApplication::NoLogoOpt() const; Bool_tTApplication::NoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:13211,Testability,Test,TestBit,13211," """"); virtual Int_tTProofServ::SendAsynMessage(const char* msg, Bool_t lf = kTRUE); virtual voidTProofServ::SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); voidTProofServ::SendParallel(Bool_t async = kFALSE); voidTProofServ::SendStatistics(); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); static FILE*TProofServ::SetErrorHandlerFile(FILE* ferr); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTProofServ::SetLastEntry(Long64_t lastentry); static voidTProofServ::SetLastMsg(const char* lastmsg); static voidTObject::SetObjectStat(Bool_t stat); voidTApplication::SetReturnFromRun(Bool_t ret); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTApplication::Show(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTApplication::StartIdleing(); virtual voidTApplication::StopIdleing(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual Int_tTApplication::TabCompletionHook(char* buf, int* pLoc, ostream& out); virtual voidTerminate(Int_t status); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; static TProofServ*TProofServ::This(); TProofServLite(const TProofServLite&); TProofServLite(Int_t* argc, char** argv, FILE* flog = 0); voidTProofServ::TruncateLogFile(); Int_tTProofServ::UpdateSessionStatus(Int_t xst = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:13250,Testability,Test,TestBits,13250," """"); virtual Int_tTProofServ::SendAsynMessage(const char* msg, Bool_t lf = kTRUE); virtual voidTProofServ::SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); voidTProofServ::SendParallel(Bool_t async = kFALSE); voidTProofServ::SendStatistics(); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); static FILE*TProofServ::SetErrorHandlerFile(FILE* ferr); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTProofServ::SetLastEntry(Long64_t lastentry); static voidTProofServ::SetLastMsg(const char* lastmsg); static voidTObject::SetObjectStat(Bool_t stat); voidTApplication::SetReturnFromRun(Bool_t ret); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTApplication::Show(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTApplication::StartIdleing(); virtual voidTApplication::StopIdleing(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual Int_tTApplication::TabCompletionHook(char* buf, int* pLoc, ostream& out); virtual voidTerminate(Int_t status); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; static TProofServ*TProofServ::This(); TProofServLite(const TProofServLite&); TProofServLite(Int_t* argc, char** argv, FILE* flog = 0); voidTProofServ::TruncateLogFile(); Int_tTProofServ::UpdateSessionStatus(Int_t xst = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:19019,Testability,log,logo,19019," remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static Long64_tTProofServ::fgLastEntryLast entry before exception; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TProofServLiteInterruptHandler*fInterruptHandler; TStringfSockPathunix socket path; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofServLite(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TProofServLite(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. void HandleFork(TMessage* mess); Cloning itself via fork. Int_t SetupOnFork(const char* ord); Finalize the server setup afetr forking.; Return 0 on success, -1 on error. TProofServLite(Int_t* argc, char** argv, FILE* flog = 0). » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:1290,Usability,Clear,Clear,1290," virtual~TProofServLite(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TApplication::ApplicationName() const; static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Int_tTApplication::Argc() const; char**TApplication::Argv() const; char*TApplication::Argv(Int_t index) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTApplication::ClearInputFiles(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& objec",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:1331,Usability,Clear,ClearInputFiles,1331," virtual~TProofServLite(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TApplication::ApplicationName() const; static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Int_tTApplication::Argc() const; char**TApplication::Argv() const; char*TApplication::Argv(Int_t index) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTApplication::ClearInputFiles(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& objec",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofServLite.html:7625,Usability,resume,resume,7625,"ptions(Int_t* argc, char** argv); const char*TProofServ::GetOrdinal() const; const char*TProofServ::GetPackageDir() const; const char*TProofServ::GetPrefix() const; TProof*TProofServ::GetProof() const; Int_tTProofServ::GetProtocol() const; Int_tTProofServ::GetQuerySeqNum() const; Float_tTProofServ::GetRealTime() const; static Long_tTProofServ::GetResMemMax(); const char*TProofServ::GetService() const; const char*TProofServ::GetSessionDir() const; const char*TProofServ::GetSessionTag() const; TSignalHandler*TApplication::GetSignalHandler() const; TSocket*TProofServ::GetSocket() const; virtual const char*TObject::GetTitle() const; const char*TProofServ::GetTopSessionTag() const; Int_tTProofServ::GetTotSessions() const; virtual UInt_tTObject::GetUniqueID() const; const char*TProofServ::GetUser() const; static Long_tTProofServ::GetVirtMemMax(); const char*TProofServ::GetWorkDir() const; virtual TProofServ::EQueryActionTProofServ::GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); virtual voidTProofServ::HandleException(Int_t sig); virtual voidHandleFork(TMessage* mess); virtual voidTApplication::HandleIdleTimer()SIGNAL ; virtual voidHandleSigPipe(); virtual voidTProofServ::HandleSocketInput(); virtual Int_tTProofServ::HandleSocketInput(TMessage* mess, Bool_t all); virtual voidHandleTermination(); virtual Bool_tTApplication::HandleTermInput(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual voidTProofServ::HandleUrgentData(); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTApplication::Hide(); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTApplication::Init(); voidTApplication::In",MatchSource.WIKI,root/html604/TProofServLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofServLite.html
https://root.cern/root/html604/TProofSuperMaster.html:4115,Availability,Down,DownloadPackage,4115,"ed) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; Int_tTProof::DeactivateWorker(const char* ord, Bool_t save = kTRUE); static voidTProof::DelEnvVar(const char* name); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTProof::DeleteDrawFeedback(TDrawFeedback* f); voidTProof::DeleteParameters(const char* wildcard); virtual voidTQObject::Destroyed()SIGNAL ; voidTProof::Detach(Option_t* opt = """"); voidTProof::DisableGoAsyn(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(TQObject* sender, const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(const char* class_name, const char* signal, void* receiver = 0, const char* slot = 0); virtual voidTQObject::Disconnected(const char*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Int_tTProof::DownloadPackage(const char* par, const char* dstdir = 0); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Long64_tTProof::DrawSelect(TDSet* dset, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Long64_tTProof::DrawSelect(const char* dsetname, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0, TObject* enl = 0); virtual voidTObject::Dump() constMENU ; virtual Int_tTProof::Echo(const TObject* obj); virtual Int_tTProof::Echo(const char* str); voidTQObject::Emit(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:4756,Availability,Echo,Echo,4756,"ool_tTQObject::Disconnect(TQObject* sender, const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(const char* class_name, const char* signal, void* receiver = 0, const char* slot = 0); virtual voidTQObject::Disconnected(const char*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Int_tTProof::DownloadPackage(const char* par, const char* dstdir = 0); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Long64_tTProof::DrawSelect(TDSet* dset, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Long64_tTProof::DrawSelect(const char* dsetname, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0, TObject* enl = 0); virtual voidTObject::Dump() constMENU ; virtual Int_tTProof::Echo(const TObject* obj); virtual Int_tTProof::Echo(const char* str); voidTQObject::Emit(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:4803,Availability,Echo,Echo,4803,"st char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(const char* class_name, const char* signal, void* receiver = 0, const char* slot = 0); virtual voidTQObject::Disconnected(const char*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Int_tTProof::DownloadPackage(const char* par, const char* dstdir = 0); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Long64_tTProof::DrawSelect(TDSet* dset, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Long64_tTProof::DrawSelect(const char* dsetname, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0, TObject* enl = 0); virtual voidTObject::Dump() constMENU ; virtual Int_tTProof::Echo(const TObject* obj); virtual Int_tTProof::Echo(const char* str); voidTQObject::Emit(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:6175,Availability,Error,Error,6175,"r* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); Int_tTProof::EnablePackage(const char* package, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tTProof::Exec(const char* cmd, Bool_t plusMaster = kFALSE); Int_tTProof::Exec(const char* cmd, const char* ord, Bool_t logtomacro = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tTProof::ExistsDataSet(const char* dataset); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTProof::Feedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tTProof::Finalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tTProof::Finalize(const char* queryref, Bool_t force = kFALSE); TList*TProof::FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Lon",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:6449,Availability,error,error,6449,"r* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); Int_tTProof::EnablePackage(const char* package, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tTProof::Exec(const char* cmd, Bool_t plusMaster = kFALSE); Int_tTProof::Exec(const char* cmd, const char* ord, Bool_t logtomacro = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tTProof::ExistsDataSet(const char* dataset); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTProof::Feedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tTProof::Finalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tTProof::Finalize(const char* queryref, Bool_t force = kFALSE); TList*TProof::FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTProof::GetBytesRead() const; Int_tTProof::GetClientProtocol() const; const char*TProof::GetConfDir() const; const char*TProof::GetConfFile() const; Float_tTProof::GetCpuTime() const; const char*TProof::GetDataPoolUrl() const; virtual TFileCollection*TProof::GetDataSet",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:6533,Availability,error,error,6533,"QObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); Int_tTProof::EnablePackage(const char* package, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tTProof::Exec(const char* cmd, Bool_t plusMaster = kFALSE); Int_tTProof::Exec(const char* cmd, const char* ord, Bool_t logtomacro = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tTProof::ExistsDataSet(const char* dataset); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTProof::Feedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tTProof::Finalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tTProof::Finalize(const char* queryref, Bool_t force = kFALSE); TList*TProof::FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTProof::GetBytesRead() const; Int_tTProof::GetClientProtocol() const; const char*TProof::GetConfDir() const; const char*TProof::GetConfFile() const; Float_tTProof::GetCpuTime() const; const char*TProof::GetDataPoolUrl() const; virtual TFileCollection*TProof::GetDataSet(const char* dataset, const char* optStr = """"); TMap*TProof::GetDataSetQuota(const c",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:13159,Availability,Ping,Ping,13159,"onst; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*TProof::Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static TProof*TProof::Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofSuperMaster&operator=(const TProofSuperMaster&); virtual voidTObject::Paint(Option_t* option = """"); Int_tTProof::Ping(); virtual voidTObject::Pop(); virtual voidTProof::Print(Option_t* option = """") const; virtual Long64_tProcess(const char* sel, Long64_t nent, Option_t* o = """"); virtual Long64_tProcess(TSelector* sel, Long64_t nent, Option_t* o = """"); virtual Long64_tProcess(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); virtual Long64_tProcess(TFileCollection* fc, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); virtual Long64_tProcess(TDSet* set, TSelector* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); virtual Long64_tProcess(TFileCollection* fc, TSelector* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); virtual Long64_tProcess(const char* dsname, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0, TObject* enl = 0); virtual Long64_tProcess(const char* dsname, TSelector* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0, TObject* enl",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:16744,Availability,mask,mask,16744,"ard = kFALSE); voidTObject::ResetBit(UInt_t f); static voidTProof::ResetEnvVars(); voidTProof::ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent)SIGNAL ; voidTProof::ResetProgressDialogStatus(); Int_tTProof::Retrieve(Int_t query, const char* path = 0); Int_tTProof::Retrieve(const char* queryref, const char* path = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; Int_tTProof::SavePerfTree(const char* pf = 0, const char* qref = 0); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTProof::SendDataSetStatus(const char* msg, UInt_t n, UInt_t tot, Bool_t st); Bool_tTProof::SendingLogToWindow() const; voidTProof::SendLogToWindow(Bool_t mode); voidTProof::SetActive(Bool_t = kTRUE); virtual voidTProof::SetAlias(const char* alias = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTProof::SetDataPoolUrl(const char* url); virtual Int_tTProof::SetDataSetTreeName(const char* dataset, const char* treename); voidTProof::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTProof::SetInputDataFile(const char* datafile); voidTProof::SetLogLevel(Int_t level, UInt_t mask = TProofDebug::kAll); voidTProof::SetManager(TProofMgr* mgr); voidTProof::SetMaxDrawQueries(Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); Int_tTProof::SetParallel(Int_t nodes = -1, Bool_t random = kFALSE); voidTProof::SetParameter(const char* par, const char* value); voidTProof::SetParameter(const char* par, Int_t value); voidTProof::SetParameter(const char* par, Long_t value); voidTProof::SetParameter(const char* par, Long64_t value); voidTProof::SetParameter(const char* par, Double_t value); voidTProof::SetPerfTree(const char* pf = ""perftree.",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:25806,Availability,avail,available,25806,,MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:28511,Availability,error,error,28511,"ect::fgAllSignalsBlockedflag used for suppression of all signals; static TSemaphore*TProof::fgSemaphoresemaphore to control no of parallel startup threads; static TProof::ESlavesTProof::kActive; static TProof::ESlavesTProof::kAll; static TProof::ESlavesTProof::kAllUnique; static TProof::ESlavesTProof::kUnique. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Start super master PROOF session. Bool_t StartSlaves(Bool_t ); Start up PROOF submasters. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void ValidateDSet(TDSet* dset); Validate a TDSet. TVirtualProofPlayer * MakePlayer(const char* player = 0, TSocket* s = 0); Construct a TProofPlayer object. The player string specifies which; player should be created: remote, slave, sm (supermaster) or base.; Default is sm. Socket is needed in case a slave player is created. TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); { }. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); { return TProof::Process(fc, sel, o, nent, fst); }. Long64_t Process(const char* dsname, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0, TObject* enl = 0); { return TProof::Process(dsname, sel, o, nent, fst, enl); }. Long64_t Process(const char* sel, Long64_t nent, Option_t* o = """"); Proc",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:23271,Deployability,Update,UpdateDialog,23271,"ar* location, const char* fmt, va_list va) const; TList*TProof::GetEnabledPackages() const; static Bool_tTProof::GetFileInCmd(const char* cmd, TString& fn); static Int_tTProof::GetInputData(TList* input, const char* cachedir, TString& emsg); TList*TProof::GetListOfActiveSlaves() const; TVirtualProofPlayer*TProof::GetPlayer() const; TPluginHandler*TProof::GetProgressDialog() const; Int_tTProof::GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTProof::HandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tTProof::HandleOutputOptions(TString& opt, TString& target, Int_t action); Int_tTProof::Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidTProof::InitMembers(); virtual TVirtualProofPlayer*MakePlayer(const char* player = 0, TSocket* s = 0); voidTObject::MakeZombie(); virtual Int_tTProof::PollForNewWorkers(); voidTProof::PrepareInputDataFile(TString& dataFile); Int_tTProof::RemoveWorkers(TList* wrks); static Int_tTProof::SaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidTProof::SaveWorkerInfo(); Int_tTProof::SendFile(const char* file, Int_t opt = (kBinary | kForward | kCp | kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tTProof::SendInputData(TQueryResult* qr, TProof* p, TString& emsg); virtual voidTProof::SendInputDataFile(); voidTProof::SetDSet(TDSet* dset); voidTProof::SetFeedback(TString& opt, TString& optfb, Int_t action); voidTProof::SetPlayer(TVirtualProofPlayer* player); voidTProof::SetupWorkersEnv(TList* wrks, Bool_t increasingpool = kFALSE); static void*TProof::SlaveStartupThread(void* arg); virtual Bool_tStartSlaves(Bool_t); static voidTProof::SystemCmd(const char* cmd, Int_t fdout); voidTProof::UpdateDialog(); virtual voidValidateDSet(TDSet* dset); Int_tTProof::VerifyDataSetParallel(const char* uri, const char* optStr).",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:531,Integrability,message,messages,531,". TProofSuperMaster. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TProofSuperMaster. class TProofSuperMaster: public TProof. TProofSuperMaster. This class controls a Parallel ROOT Facility, PROOF, cluster.; It fires the slave servers, it keeps track of how many slaves are; running, it keeps track of the slaves running status, it broadcasts; messages to all slaves, it collects results, etc. Function Members (Methods); public:. virtual~TProofSuperMaster(); voidTObject::AbstractMethod(const char* method) const; Int_tTProof::ActivateWorker(const char* ord, Bool_t save = kTRUE); voidTProof::AddChain(TChain* chain); Int_tTProof::AddDynamicPath(const char* libpath, Bool_t onClient = kFALSE, TList* wrks = 0, Bool_t doCollect = kTRUE); static voidTProof::AddEnvVar(const char* name, const char* value); voidTProof::AddFeedback(const char* name); Int_tTProof::AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0, Bool_t doCollect = kTRUE); voidTProof::AddInput(TObject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tTProof::CancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCa",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:12239,Integrability,Message,Message,12239,"st; Bool_tTProof::IsDataReady(Long64_t& totalbytes, Long64_t& bytesready); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTProof::IsFolder() const; Bool_tTProof::IsIdle() const; Bool_tTProof::IsLite() const; Bool_tTProof::IsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tTProof::IsParallel() const; Bool_tTProof::IsProofd() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTProof::IsTty() const; Bool_tTProof::IsValid() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tTProof::Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); voidTProof::LogMessage(const char* msg, Bool_t all)SIGNAL ; static voidTProof::LogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*TProof::Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static TProof*TProof::Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofSuperMaster&operator=(const TProofSuperMaster&); virtual voidTObject::Paint(Option_t* option = """"); Int_tTProof::Ping(); virtual voidTObject::Pop(); virtual voidTProof::Print(Option_t* option = """")",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:26814,Integrability,protocol,protocol,26814,"ckages; TList*TProof::fBadSlavesdead slaves (subset of all slaves); Long64_tTProof::fBytesReadynumber of bytes staged; Int_tTProof::fCollectTimeoutTimeout for (some) collect actions; TStringTProof::fConfDirdirectory containing cluster config information; TStringTProof::fConfFilefile containing config information; TStringTProof::fDataPoolUrldefault data pool entry point URL; Bool_tTProof::fDataReadytrue if data is ready to be analyzed; Bool_tTProof::fDynamicStartupare the workers started dynamically?; TList*TProof::fEnabledPackageslist of enabled packages; TStringTProof::fImagemaster's image name; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TProofMgr*TProof::fManagermanager to which this session belongs (if any); Bool_tTProof::fMasterServtrue if we are a master server; TStringTNamed::fNameobject identifier; Float_tTProof::fPrepTimePreparation time; Int_tTProof::fProtocolremote PROOF server protocol version number; TProof::EQueryModeTProof::fQueryModedefault query mode; TStopwatchTProof::fQuerySTWStopwatch to measure query times; TList*TProof::fRunningDSetsTemporary datasets used for async running; TSelector*TProof::fSelectorSelector to be processed, if any; TProofMgr::EServTypeTProof::fServTypetype of server: proofd, XrdProofd; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TList*TProof::fSlaveslist of all slave servers as in config file; TList*TProof::fTerminatedSlaveInfoslist of unique infos of terminated slaves; TStringTNamed::fTitleobject title; Long64_tTProof::fTotalBytesnumber of bytes to be analyzed; TUrlTProof::fUrlUrl of the master; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TSemaphore*TProof::fgSemaphoresemaphore to control no of parallel startup threads; static TProof::ESlavesTProof::kActive; static TProof::ESlavesTProof::kAll; static TProof::ESlavesTProof::kAllUnique; static TProof::ESlavesTPr",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:11038,Modifiability,Inherit,InheritsFrom,11038,"tRealTime() const; Int_tTProof::GetRemoteProtocol() const; TProof::ERunStatusTProof::GetRunStatus() const; Int_tTProof::GetSeqNum() const; Int_tTProof::GetSessionID() const; const char*TProof::GetSessionTag() const; virtual TFileCollection*TProof::GetStagingStatusDataSet(const char* dataset); voidTProof::GetStatistics(Bool_t verbose = kFALSE); Int_tTProof::GetStatus() const; virtual const char*TNamed::GetTitle() const; virtual TTree*TProof::GetTreeHeader(TDSet* tdset); virtual UInt_tTObject::GetUniqueID() const; const char*TProof::GetUrl(); const char*TProof::GetUser() const; const char*TProof::GetWorkDir() const; voidTProof::GoAsynchronous(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTNamed::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTProof::IsDataReady(Long64_t& totalbytes, Long64_t& bytesready); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTProof::IsFolder() const; Bool_tTProof::IsIdle() const; Bool_tTProof::IsLite() const; Bool_tTProof::IsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tTProof::IsParallel() const; Bool_tTProof::IsProofd() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTProof::IsTty() const; Bool_tTProof::IsValid() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tTProof::Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); voidTProof::LogMessage(const char* msg, Bool_t all)SIGNAL ; static voidTProof::LogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObje",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:11104,Modifiability,Inherit,InheritsFrom,11104,":ERunStatusTProof::GetRunStatus() const; Int_tTProof::GetSeqNum() const; Int_tTProof::GetSessionID() const; const char*TProof::GetSessionTag() const; virtual TFileCollection*TProof::GetStagingStatusDataSet(const char* dataset); voidTProof::GetStatistics(Bool_t verbose = kFALSE); Int_tTProof::GetStatus() const; virtual const char*TNamed::GetTitle() const; virtual TTree*TProof::GetTreeHeader(TDSet* tdset); virtual UInt_tTObject::GetUniqueID() const; const char*TProof::GetUrl(); const char*TProof::GetUser() const; const char*TProof::GetWorkDir() const; voidTProof::GoAsynchronous(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTNamed::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTProof::IsDataReady(Long64_t& totalbytes, Long64_t& bytesready); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTProof::IsFolder() const; Bool_tTProof::IsIdle() const; Bool_tTProof::IsLite() const; Bool_tTProof::IsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tTProof::IsParallel() const; Bool_tTProof::IsProofd() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTProof::IsTty() const; Bool_tTProof::IsValid() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tTProof::Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); voidTProof::LogMessage(const char* msg, Bool_t all)SIGNAL ; static voidTProof::LogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:26053,Modifiability,config,config,26053,,MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:26113,Modifiability,config,config,26113,,MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:27283,Modifiability,config,config,27283,"*TProof::fBadSlavesdead slaves (subset of all slaves); Long64_tTProof::fBytesReadynumber of bytes staged; Int_tTProof::fCollectTimeoutTimeout for (some) collect actions; TStringTProof::fConfDirdirectory containing cluster config information; TStringTProof::fConfFilefile containing config information; TStringTProof::fDataPoolUrldefault data pool entry point URL; Bool_tTProof::fDataReadytrue if data is ready to be analyzed; Bool_tTProof::fDynamicStartupare the workers started dynamically?; TList*TProof::fEnabledPackageslist of enabled packages; TStringTProof::fImagemaster's image name; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TProofMgr*TProof::fManagermanager to which this session belongs (if any); Bool_tTProof::fMasterServtrue if we are a master server; TStringTNamed::fNameobject identifier; Float_tTProof::fPrepTimePreparation time; Int_tTProof::fProtocolremote PROOF server protocol version number; TProof::EQueryModeTProof::fQueryModedefault query mode; TStopwatchTProof::fQuerySTWStopwatch to measure query times; TList*TProof::fRunningDSetsTemporary datasets used for async running; TSelector*TProof::fSelectorSelector to be processed, if any; TProofMgr::EServTypeTProof::fServTypetype of server: proofd, XrdProofd; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TList*TProof::fSlaveslist of all slave servers as in config file; TList*TProof::fTerminatedSlaveInfoslist of unique infos of terminated slaves; TStringTNamed::fTitleobject title; Long64_tTProof::fTotalBytesnumber of bytes to be analyzed; TUrlTProof::fUrlUrl of the master; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TSemaphore*TProof::fgSemaphoresemaphore to control no of parallel startup threads; static TProof::ESlavesTProof::kActive; static TProof::ESlavesTProof::kAll; static TProof::ESlavesTProof::kAllUnique; static TProof::ESlavesTProof::kUnique.",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:27847,Modifiability,Inherit,Inheritance,27847,"odedefault query mode; TStopwatchTProof::fQuerySTWStopwatch to measure query times; TList*TProof::fRunningDSetsTemporary datasets used for async running; TSelector*TProof::fSelectorSelector to be processed, if any; TProofMgr::EServTypeTProof::fServTypetype of server: proofd, XrdProofd; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TList*TProof::fSlaveslist of all slave servers as in config file; TList*TProof::fTerminatedSlaveInfoslist of unique infos of terminated slaves; TStringTNamed::fTitleobject title; Long64_tTProof::fTotalBytesnumber of bytes to be analyzed; TUrlTProof::fUrlUrl of the master; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TSemaphore*TProof::fgSemaphoresemaphore to control no of parallel startup threads; static TProof::ESlavesTProof::kActive; static TProof::ESlavesTProof::kAll; static TProof::ESlavesTProof::kAllUnique; static TProof::ESlavesTProof::kUnique. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Start super master PROOF session. Bool_t StartSlaves(Bool_t ); Start up PROOF submasters. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void ValidateDSet(TDSet* dset); Validate a TDSet. TVirtualProofPlayer * MakePlayer(const char* player = 0, TSocket* s = 0); Construct a TProofPlayer object. The player string specifies which; player should be created: remote, slave, sm (supermaster) or base.; Default is sm. Socket is needed in case a sla",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:27860,Modifiability,Inherit,Inherited,27860,"odedefault query mode; TStopwatchTProof::fQuerySTWStopwatch to measure query times; TList*TProof::fRunningDSetsTemporary datasets used for async running; TSelector*TProof::fSelectorSelector to be processed, if any; TProofMgr::EServTypeTProof::fServTypetype of server: proofd, XrdProofd; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TList*TProof::fSlaveslist of all slave servers as in config file; TList*TProof::fTerminatedSlaveInfoslist of unique infos of terminated slaves; TStringTNamed::fTitleobject title; Long64_tTProof::fTotalBytesnumber of bytes to be analyzed; TUrlTProof::fUrlUrl of the master; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TSemaphore*TProof::fgSemaphoresemaphore to control no of parallel startup threads; static TProof::ESlavesTProof::kActive; static TProof::ESlavesTProof::kAll; static TProof::ESlavesTProof::kAllUnique; static TProof::ESlavesTProof::kUnique. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Start super master PROOF session. Bool_t StartSlaves(Bool_t ); Start up PROOF submasters. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void ValidateDSet(TDSet* dset); Validate a TDSet. TVirtualProofPlayer * MakePlayer(const char* player = 0, TSocket* s = 0); Construct a TProofPlayer object. The player string specifies which; player should be created: remote, slave, sm (supermaster) or base.; Default is sm. Socket is needed in case a sla",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:5979,Performance,load,loadopts,5979," voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); Int_tTProof::EnablePackage(const char* package, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tTProof::Exec(const char* cmd, Bool_t plusMaster = kFALSE); Int_tTProof::Exec(const char* cmd, const char* ord, Bool_t logtomacro = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tTProof::ExistsDataSet(const char* dataset); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTProof::Feedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tTProof::Finalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tTProof::Finalize(const char* queryref, Bool_t force = kFALSE); TList*TProof",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:6094,Performance,load,loadopts,6094,"TQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); Int_tTProof::EnablePackage(const char* package, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tTProof::Exec(const char* cmd, Bool_t plusMaster = kFALSE); Int_tTProof::Exec(const char* cmd, const char* ord, Bool_t logtomacro = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tTProof::ExistsDataSet(const char* dataset); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTProof::Feedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tTProof::Finalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tTProof::Finalize(const char* queryref, Bool_t force = kFALSE); TList*TProof::FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* ",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:11796,Performance,Load,Load,11796,"ignal_name) const; virtual ULong_tTNamed::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTProof::IsDataReady(Long64_t& totalbytes, Long64_t& bytesready); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTProof::IsFolder() const; Bool_tTProof::IsIdle() const; Bool_tTProof::IsLite() const; Bool_tTProof::IsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tTProof::IsParallel() const; Bool_tTProof::IsProofd() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTProof::IsTty() const; Bool_tTProof::IsValid() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tTProof::Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); voidTProof::LogMessage(const char* msg, Bool_t all)SIGNAL ; static voidTProof::LogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*TProof::Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static TProof*TProof::Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:21613,Performance,cache,cachedir,21613,"1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Int_tTProof::Collect(TList* slaves, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); TSlave*TProof::CreateSlave(const char* url, const char* ord, Int_t perf, const char* image, const char* workdir); TSlave*TProof::CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd, Int_t nwk = 1); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TList*TProof::GetEnabledPackages() const; static Bool_tTProof::GetFileInCmd(const char* cmd, TString& fn); static Int_tTProof::GetInputData(TList* input, const char* cachedir, TString& emsg); TList*TProof::GetListOfActiveSlaves() const; TVirtualProofPlayer*TProof::GetPlayer() const; TPluginHandler*TProof::GetProgressDialog() const; Int_tTProof::GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTProof::HandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tTProof::HandleOutputOptions(TString& opt, TString& target, Int_t action); Int_tTProof::Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidTProof::InitMembers(); virtual TVirtualProofPlayer*MakePlayer(const char* player = 0, TSocket* s = 0); voidTObject::MakeZombie(); virtual Int_tTProof::PollForNewWorkers(); voidTProof::PrepareInputDataFile(TString& dataFile); Int_tTProof::RemoveWorkers(TList* wrks); static Int_tTProof::SaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidTProof::S",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:22571,Performance,cache,cachedir,22571,"ar* location, const char* fmt, va_list va) const; TList*TProof::GetEnabledPackages() const; static Bool_tTProof::GetFileInCmd(const char* cmd, TString& fn); static Int_tTProof::GetInputData(TList* input, const char* cachedir, TString& emsg); TList*TProof::GetListOfActiveSlaves() const; TVirtualProofPlayer*TProof::GetPlayer() const; TPluginHandler*TProof::GetProgressDialog() const; Int_tTProof::GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTProof::HandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tTProof::HandleOutputOptions(TString& opt, TString& target, Int_t action); Int_tTProof::Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidTProof::InitMembers(); virtual TVirtualProofPlayer*MakePlayer(const char* player = 0, TSocket* s = 0); voidTObject::MakeZombie(); virtual Int_tTProof::PollForNewWorkers(); voidTProof::PrepareInputDataFile(TString& dataFile); Int_tTProof::RemoveWorkers(TList* wrks); static Int_tTProof::SaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidTProof::SaveWorkerInfo(); Int_tTProof::SendFile(const char* file, Int_t opt = (kBinary | kForward | kCp | kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tTProof::SendInputData(TQueryResult* qr, TProof* p, TString& emsg); virtual voidTProof::SendInputDataFile(); voidTProof::SetDSet(TDSet* dset); voidTProof::SetFeedback(TString& opt, TString& optfb, Int_t action); voidTProof::SetPlayer(TVirtualProofPlayer* player); voidTProof::SetupWorkersEnv(TList* wrks, Bool_t increasingpool = kFALSE); static void*TProof::SlaveStartupThread(void* arg); virtual Bool_tStartSlaves(Bool_t); static voidTProof::SystemCmd(const char* cmd, Int_t fdout); voidTProof::UpdateDialog(); virtual voidValidateDSet(TDSet* dset); Int_tTProof::VerifyDataSetParallel(const char* uri, const char* optStr).",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:18858,Safety,abort,abort,18858,"TProof::ShowDataSet(const char* dataset = """", const char* opt = ""filter:SsCc""); virtual voidTProof::ShowDataSetCache(const char* dataset = 0); voidTProof::ShowDataSetQuota(Option_t* opt = 0); virtual voidTProof::ShowDataSets(const char* uri = """", const char* optStr = """"); voidTProof::ShowEnabledPackages(Bool_t all = kFALSE); voidTProof::ShowFeedback() const; voidTProof::ShowLog(Int_t qry = -1); voidTProof::ShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector& insp) const; voidTProof::ShowMissingFiles(TQueryResult* qr = 0); voidTProof::ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); voidTProof::ShowParameters(const char* wildcard = ""PROOF_*"") const; voidTProof::ShowQueries(Option_t* opt = """"); virtual voidTProof::ShowStagingStatusDataSet(const char* dataset, const char* optStr = ""filter:SsCc""); virtual Int_tTNamed::Sizeof() const; voidTProof::StartupMessage(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; voidTProof::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTProof::Touch(); TProofSuperMaster(const TProofSuperMaster&); TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Int_tTProof::UploadDataSet(const char*, TList*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSet(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSetFromFile(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadPackage(const char* par, TProof::EUploadPackageOpt opt = kUntar, TList* workers = 0); virtual voidTObject::UseCurrentStyle(); Bool_tTProof::UseDynamicStartup() const; virtua",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:18871,Safety,timeout,timeout,18871,"taSet(const char* dataset = """", const char* opt = ""filter:SsCc""); virtual voidTProof::ShowDataSetCache(const char* dataset = 0); voidTProof::ShowDataSetQuota(Option_t* opt = 0); virtual voidTProof::ShowDataSets(const char* uri = """", const char* optStr = """"); voidTProof::ShowEnabledPackages(Bool_t all = kFALSE); voidTProof::ShowFeedback() const; voidTProof::ShowLog(Int_t qry = -1); voidTProof::ShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector& insp) const; voidTProof::ShowMissingFiles(TQueryResult* qr = 0); voidTProof::ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); voidTProof::ShowParameters(const char* wildcard = ""PROOF_*"") const; voidTProof::ShowQueries(Option_t* opt = """"); virtual voidTProof::ShowStagingStatusDataSet(const char* dataset, const char* optStr = ""filter:SsCc""); virtual Int_tTNamed::Sizeof() const; voidTProof::StartupMessage(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; voidTProof::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTProof::Touch(); TProofSuperMaster(const TProofSuperMaster&); TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Int_tTProof::UploadDataSet(const char*, TList*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSet(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSetFromFile(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadPackage(const char* par, TProof::EUploadPackageOpt opt = kUntar, TList* workers = 0); virtual voidTObject::UseCurrentStyle(); Bool_tTProof::UseDynamicStartup() const; virtual Int_tTProof:",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:20606,Safety,timeout,timeout,20606,,MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:20713,Safety,timeout,timeout,20713,,MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:10840,Security,Hash,Hash,10840,"t& env, const char* ord = ""0""); Int_tTProof::GetRC(const char* RCenv, Double_t& env, const char* ord = ""0""); Int_tTProof::GetRC(const char* RCenv, TString& env, const char* ord = ""0""); Float_tTProof::GetRealTime() const; Int_tTProof::GetRemoteProtocol() const; TProof::ERunStatusTProof::GetRunStatus() const; Int_tTProof::GetSeqNum() const; Int_tTProof::GetSessionID() const; const char*TProof::GetSessionTag() const; virtual TFileCollection*TProof::GetStagingStatusDataSet(const char* dataset); voidTProof::GetStatistics(Bool_t verbose = kFALSE); Int_tTProof::GetStatus() const; virtual const char*TNamed::GetTitle() const; virtual TTree*TProof::GetTreeHeader(TDSet* tdset); virtual UInt_tTObject::GetUniqueID() const; const char*TProof::GetUrl(); const char*TProof::GetUser() const; const char*TProof::GetWorkDir() const; voidTProof::GoAsynchronous(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTNamed::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTProof::IsDataReady(Long64_t& totalbytes, Long64_t& bytesready); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTProof::IsFolder() const; Bool_tTProof::IsIdle() const; Bool_tTProof::IsLite() const; Bool_tTProof::IsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tTProof::IsParallel() const; Bool_tTProof::IsProofd() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTProof::IsTty() const; Bool_tTProof::IsValid() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tTProof::Load(const char* macro, Bool_t notOnClient = kF",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:28573,Security,Validat,ValidateDSet,28573,"c TSemaphore*TProof::fgSemaphoresemaphore to control no of parallel startup threads; static TProof::ESlavesTProof::kActive; static TProof::ESlavesTProof::kAll; static TProof::ESlavesTProof::kAllUnique; static TProof::ESlavesTProof::kUnique. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Start super master PROOF session. Bool_t StartSlaves(Bool_t ); Start up PROOF submasters. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void ValidateDSet(TDSet* dset); Validate a TDSet. TVirtualProofPlayer * MakePlayer(const char* player = 0, TSocket* s = 0); Construct a TProofPlayer object. The player string specifies which; player should be created: remote, slave, sm (supermaster) or base.; Default is sm. Socket is needed in case a slave player is created. TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); { }. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); { return TProof::Process(fc, sel, o, nent, fst); }. Long64_t Process(const char* dsname, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0, TObject* enl = 0); { return TProof::Process(dsname, sel, o, nent, fst, enl); }. Long64_t Process(const char* sel, Long64_t nent, Option_t* o = """"); Process via TSelector. { return TProof::Process(sel, nent, o); }. Long64_t ",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:28600,Security,Validat,Validate,28600,"c TSemaphore*TProof::fgSemaphoresemaphore to control no of parallel startup threads; static TProof::ESlavesTProof::kActive; static TProof::ESlavesTProof::kAll; static TProof::ESlavesTProof::kAllUnique; static TProof::ESlavesTProof::kUnique. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Start super master PROOF session. Bool_t StartSlaves(Bool_t ); Start up PROOF submasters. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void ValidateDSet(TDSet* dset); Validate a TDSet. TVirtualProofPlayer * MakePlayer(const char* player = 0, TSocket* s = 0); Construct a TProofPlayer object. The player string specifies which; player should be created: remote, slave, sm (supermaster) or base.; Default is sm. Socket is needed in case a slave player is created. TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); { }. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); { return TProof::Process(fc, sel, o, nent, fst); }. Long64_t Process(const char* dsname, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0, TObject* enl = 0); { return TProof::Process(dsname, sel, o, nent, fst, enl); }. Long64_t Process(const char* sel, Long64_t nent, Option_t* o = """"); Process via TSelector. { return TProof::Process(sel, nent, o); }. Long64_t ",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:6351,Testability,log,logtomacro,6351,"t_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); Int_tTProof::EnablePackage(const char* package, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tTProof::Exec(const char* cmd, Bool_t plusMaster = kFALSE); Int_tTProof::Exec(const char* cmd, const char* ord, Bool_t logtomacro = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tTProof::ExistsDataSet(const char* dataset); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTProof::Feedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tTProof::Finalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tTProof::Finalize(const char* queryref, Bool_t force = kFALSE); TList*TProof::FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTProof::GetBytesRead() const; Int_tTProof::GetClientProtocol() const; const char*TProof::GetConfDir() const; const char*TProof::GetConfFile() const; Float_tTProof::GetCpuTime",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:11906,Testability,Log,LogMessage,11906,"e, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTProof::IsDataReady(Long64_t& totalbytes, Long64_t& bytesready); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTProof::IsFolder() const; Bool_tTProof::IsIdle() const; Bool_tTProof::IsLite() const; Bool_tTProof::IsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tTProof::IsParallel() const; Bool_tTProof::IsProofd() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTProof::IsTty() const; Bool_tTProof::IsValid() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tTProof::Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); voidTProof::LogMessage(const char* msg, Bool_t all)SIGNAL ; static voidTProof::LogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*TProof::Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static TProof*TProof::Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject:",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:11973,Testability,Log,LogViewer,11973,"* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTProof::IsDataReady(Long64_t& totalbytes, Long64_t& bytesready); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTProof::IsFolder() const; Bool_tTProof::IsIdle() const; Bool_tTProof::IsLite() const; Bool_tTProof::IsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tTProof::IsParallel() const; Bool_tTProof::IsProofd() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTProof::IsTty() const; Bool_tTProof::IsValid() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tTProof::Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); voidTProof::LogMessage(const char* msg, Bool_t all)SIGNAL ; static voidTProof::LogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*TProof::Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static TProof*TProof::Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](s",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:12657,Testability,log,loglevel,12657,"::IsTty() const; Bool_tTProof::IsValid() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tTProof::Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); voidTProof::LogMessage(const char* msg, Bool_t all)SIGNAL ; static voidTProof::LogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*TProof::Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static TProof*TProof::Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofSuperMaster&operator=(const TProofSuperMaster&); virtual voidTObject::Paint(Option_t* option = """"); Int_tTProof::Ping(); virtual voidTObject::Pop(); virtual voidTProof::Print(Option_t* option = """") const; virtual Long64_tProcess(const char* sel, Long64_t nent, Option_t* o = """"); virtual Long64_tProcess(TSelector* sel, Long64_t nent, Option_t* o = """"); virtual Long64_tProcess(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); virtual Long64_tProcess(TFileCollection* fc, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); virtual Long",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:19070,Testability,Test,TestBit,19070,"howDataSets(const char* uri = """", const char* optStr = """"); voidTProof::ShowEnabledPackages(Bool_t all = kFALSE); voidTProof::ShowFeedback() const; voidTProof::ShowLog(Int_t qry = -1); voidTProof::ShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector& insp) const; voidTProof::ShowMissingFiles(TQueryResult* qr = 0); voidTProof::ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); voidTProof::ShowParameters(const char* wildcard = ""PROOF_*"") const; voidTProof::ShowQueries(Option_t* opt = """"); virtual voidTProof::ShowStagingStatusDataSet(const char* dataset, const char* optStr = ""filter:SsCc""); virtual Int_tTNamed::Sizeof() const; voidTProof::StartupMessage(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; voidTProof::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTProof::Touch(); TProofSuperMaster(const TProofSuperMaster&); TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Int_tTProof::UploadDataSet(const char*, TList*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSet(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSetFromFile(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadPackage(const char* par, TProof::EUploadPackageOpt opt = kUntar, TList* workers = 0); virtual voidTObject::UseCurrentStyle(); Bool_tTProof::UseDynamicStartup() const; virtual Int_tTProof::VerifyDataSet(const char* dataset, const char* optStr = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t optio",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:19109,Testability,Test,TestBits,19109," char* optStr = """"); voidTProof::ShowEnabledPackages(Bool_t all = kFALSE); voidTProof::ShowFeedback() const; voidTProof::ShowLog(Int_t qry = -1); voidTProof::ShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector& insp) const; voidTProof::ShowMissingFiles(TQueryResult* qr = 0); voidTProof::ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); voidTProof::ShowParameters(const char* wildcard = ""PROOF_*"") const; voidTProof::ShowQueries(Option_t* opt = """"); virtual voidTProof::ShowStagingStatusDataSet(const char* dataset, const char* optStr = ""filter:SsCc""); virtual Int_tTNamed::Sizeof() const; voidTProof::StartupMessage(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; voidTProof::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTProof::Touch(); TProofSuperMaster(const TProofSuperMaster&); TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Int_tTProof::UploadDataSet(const char*, TList*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSet(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSetFromFile(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadPackage(const char* par, TProof::EUploadPackageOpt opt = kUntar, TList* workers = 0); virtual voidTObject::UseCurrentStyle(); Bool_tTProof::UseDynamicStartup() const; virtual Int_tTProof::VerifyDataSet(const char* dataset, const char* optStr = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_t",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:19326,Testability,log,loglevel,19326,"Proof::ShowFeedback() const; voidTProof::ShowLog(Int_t qry = -1); voidTProof::ShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector& insp) const; voidTProof::ShowMissingFiles(TQueryResult* qr = 0); voidTProof::ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); voidTProof::ShowParameters(const char* wildcard = ""PROOF_*"") const; voidTProof::ShowQueries(Option_t* opt = """"); virtual voidTProof::ShowStagingStatusDataSet(const char* dataset, const char* optStr = ""filter:SsCc""); virtual Int_tTNamed::Sizeof() const; voidTProof::StartupMessage(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; voidTProof::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTProof::Touch(); TProofSuperMaster(const TProofSuperMaster&); TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Int_tTProof::UploadDataSet(const char*, TList*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSet(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSetFromFile(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadPackage(const char* par, TProof::EUploadPackageOpt opt = kUntar, TList* workers = 0); virtual voidTObject::UseCurrentStyle(); Bool_tTProof::UseDynamicStartup() const; virtual Int_tTProof::VerifyDataSet(const char* dataset, const char* optStr = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:20265,Testability,Assert,AssertDataSet,20265,,MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:20357,Testability,Assert,AssertPath,20357,,MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:21825,Testability,assert,assert,21825,"thod_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); TSlave*TProof::CreateSlave(const char* url, const char* ord, Int_t perf, const char* image, const char* workdir); TSlave*TProof::CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd, Int_t nwk = 1); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TList*TProof::GetEnabledPackages() const; static Bool_tTProof::GetFileInCmd(const char* cmd, TString& fn); static Int_tTProof::GetInputData(TList* input, const char* cachedir, TString& emsg); TList*TProof::GetListOfActiveSlaves() const; TVirtualProofPlayer*TProof::GetPlayer() const; TPluginHandler*TProof::GetProgressDialog() const; Int_tTProof::GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTProof::HandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tTProof::HandleOutputOptions(TString& opt, TString& target, Int_t action); Int_tTProof::Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidTProof::InitMembers(); virtual TVirtualProofPlayer*MakePlayer(const char* player = 0, TSocket* s = 0); voidTObject::MakeZombie(); virtual Int_tTProof::PollForNewWorkers(); voidTProof::PrepareInputDataFile(TString& dataFile); Int_tTProof::RemoveWorkers(TList* wrks); static Int_tTProof::SaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidTProof::SaveWorkerInfo(); Int_tTProof::SendFile(const char* file, Int_t opt = (kBinary | kForward | kCp | kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tTProof::SendInputData(TQueryResult* qr, TProof* p, TS",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:22203,Testability,log,loglevel,22203,"e, const char* workdir); TSlave*TProof::CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd, Int_t nwk = 1); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TList*TProof::GetEnabledPackages() const; static Bool_tTProof::GetFileInCmd(const char* cmd, TString& fn); static Int_tTProof::GetInputData(TList* input, const char* cachedir, TString& emsg); TList*TProof::GetListOfActiveSlaves() const; TVirtualProofPlayer*TProof::GetPlayer() const; TPluginHandler*TProof::GetProgressDialog() const; Int_tTProof::GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTProof::HandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tTProof::HandleOutputOptions(TString& opt, TString& target, Int_t action); Int_tTProof::Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidTProof::InitMembers(); virtual TVirtualProofPlayer*MakePlayer(const char* player = 0, TSocket* s = 0); voidTObject::MakeZombie(); virtual Int_tTProof::PollForNewWorkers(); voidTProof::PrepareInputDataFile(TString& dataFile); Int_tTProof::RemoveWorkers(TList* wrks); static Int_tTProof::SaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidTProof::SaveWorkerInfo(); Int_tTProof::SendFile(const char* file, Int_t opt = (kBinary | kForward | kCp | kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tTProof::SendInputData(TQueryResult* qr, TProof* p, TString& emsg); virtual voidTProof::SendInputDataFile(); voidTProof::SetDSet(TDSet* dset); voidTProof::SetFeedback(TString& opt, TString& optfb, Int_t action); voidTProof::SetPlayer(TVirtualProofPlayer* player); voidTProof::SetupWorkersEnv(TList* wrks, Bool_t increasingpool = kFALSE); static void*TProof::SlaveStartupThread(void* arg); virtual Bool_tStartSlaves(Bool_t); static vo",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:28049,Testability,log,loglevel,28049,"nning; TSelector*TProof::fSelectorSelector to be processed, if any; TProofMgr::EServTypeTProof::fServTypetype of server: proofd, XrdProofd; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TList*TProof::fSlaveslist of all slave servers as in config file; TList*TProof::fTerminatedSlaveInfoslist of unique infos of terminated slaves; TStringTNamed::fTitleobject title; Long64_tTProof::fTotalBytesnumber of bytes to be analyzed; TUrlTProof::fUrlUrl of the master; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TSemaphore*TProof::fgSemaphoresemaphore to control no of parallel startup threads; static TProof::ESlavesTProof::kActive; static TProof::ESlavesTProof::kAll; static TProof::ESlavesTProof::kAllUnique; static TProof::ESlavesTProof::kUnique. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Start super master PROOF session. Bool_t StartSlaves(Bool_t ); Start up PROOF submasters. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void ValidateDSet(TDSet* dset); Validate a TDSet. TVirtualProofPlayer * MakePlayer(const char* player = 0, TSocket* s = 0); Construct a TProofPlayer object. The player string specifies which; player should be created: remote, slave, sm (supermaster) or base.; Default is sm. Socket is needed in case a slave player is created. TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t ",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:29020,Testability,log,loglevel,29020,"kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Start super master PROOF session. Bool_t StartSlaves(Bool_t ); Start up PROOF submasters. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void ValidateDSet(TDSet* dset); Validate a TDSet. TVirtualProofPlayer * MakePlayer(const char* player = 0, TSocket* s = 0); Construct a TProofPlayer object. The player string specifies which; player should be created: remote, slave, sm (supermaster) or base.; Default is sm. Socket is needed in case a slave player is created. TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); { }. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); { return TProof::Process(fc, sel, o, nent, fst); }. Long64_t Process(const char* dsname, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0, TObject* enl = 0); { return TProof::Process(dsname, sel, o, nent, fst, enl); }. Long64_t Process(const char* sel, Long64_t nent, Option_t* o = """"); Process via TSelector. { return TProof::Process(sel, nent, o); }. Long64_t Process(TDSet* set, TSelector* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); { return TProof::Process(set, selector, option, nentries, firstentry); }. Long64_t Process(TFileCollection* fc, TSelector* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); { return TProof::Process(fc, sel, o, nent, fst); }. Long64_t Process(const char* dsname, TSelecto",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:1944,Usability,Clear,Clear,1944,"EnvVar(const char* name, const char* value); voidTProof::AddFeedback(const char* name); Int_tTProof::AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0, Bool_t doCollect = kTRUE); voidTProof::AddInput(TObject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tTProof::CancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* send",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:1994,Usability,Clear,ClearCache,1994,"oof::AddFeedback(const char* name); Int_tTProof::AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0, Bool_t doCollect = kTRUE); voidTProof::AddInput(TObject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tTProof::CancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_cl",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:2040,Usability,Clear,ClearData,2040,"f::AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0, Bool_t doCollect = kTRUE); voidTProof::AddInput(TObject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tTProof::CancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtu",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:2124,Usability,Clear,ClearDataSetCache,2124," doCollect = kTRUE); voidTProof::AddInput(TObject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tTProof::CancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const;",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:2180,Usability,Clear,ClearFeedback,2180,"); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tTProof::CancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProo",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:2209,Usability,Clear,ClearInput,2209,"(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tTProof::CancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char*",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:2235,Usability,Clear,ClearInputData,2235," kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tTProof::CancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t d",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:2281,Usability,Clear,ClearInputData,2281,"n_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tTProof::CancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; Int_tTProof::Deactiv",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:2328,Usability,Clear,ClearPackage,2328,"query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tTProof::CancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; Int_tTProof::DeactivateWorker(const char* ord, Bool_t save = kTRUE",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:2376,Usability,Clear,ClearPackages,2376,"st char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tTProof::CancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; Int_tTProof::DeactivateWorker(const char* ord, Bool_t save = kTRUE); static voidTProof::DelEnvVar(const char* name",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofSuperMaster.html:6757,Usability,Feedback,Feedback,6757,"a); voidTQObject::EmitVA<>(const char* signal_name, Int_t); Int_tTProof::EnablePackage(const char* package, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tTProof::Exec(const char* cmd, Bool_t plusMaster = kFALSE); Int_tTProof::Exec(const char* cmd, const char* ord, Bool_t logtomacro = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tTProof::ExistsDataSet(const char* dataset); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTProof::Feedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tTProof::Finalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tTProof::Finalize(const char* queryref, Bool_t force = kFALSE); TList*TProof::FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTProof::GetBytesRead() const; Int_tTProof::GetClientProtocol() const; const char*TProof::GetConfDir() const; const char*TProof::GetConfFile() const; Float_tTProof::GetCpuTime() const; const char*TProof::GetDataPoolUrl() const; virtual TFileCollection*TProof::GetDataSet(const char* dataset, const char* optStr = """"); TMap*TProof::GetDataSetQuota(const char* optStr = """"); virtual TMap*TProof::GetDataSets(const char* uri = """", const char* optStr = """"); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTProof::Getenv(const char* env, c",MatchSource.WIKI,root/html604/TProofSuperMaster.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofSuperMaster.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html:1374,Availability,Error,Error,1374," virtual~TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t>(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); vir",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html:1503,Availability,error,error,1503," virtual~TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t>(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); vir",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html:1587,Availability,error,error,1587,"oidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; vector<TProofDrawListOfGraphs::Point3D_t>*GetVector() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html:2572,Modifiability,Inherit,InheritsFrom,2572,", Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; vector<TProofDrawListOfGraphs::Point3D_t>*GetVector() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tMerge(TCollection* list); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html:2638,Modifiability,Inherit,InheritsFrom,2638,", Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; vector<TProofDrawListOfGraphs::Point3D_t>*GetVector() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tMerge(TCollection* list); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofVectorContain",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html:6627,Modifiability,Inherit,Inheritance,6627,"fGraphs::Point3D_t>* anVector); TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t>(const TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t>&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; vector<TProofDrawListOfGraphs::Point3D_t>*fVectorvector. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; std::vector<T> * GetVector() const; { return fVector; }. Long64_t Merge(TCollection* list). » Author: Maarten Ballintijn 24/09/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-09-08 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html:6640,Modifiability,Inherit,Inherited,6640,"fGraphs::Point3D_t>* anVector); TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t>(const TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t>&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; vector<TProofDrawListOfGraphs::Point3D_t>*fVectorvector. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; std::vector<T> * GetVector() const; { return fVector; }. Long64_t Merge(TCollection* list). » Author: Maarten Ballintijn 24/09/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-09-08 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html:2462,Security,Hash,Hash,2462,"ar* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; vector<TProofDrawListOfGraphs::Point3D_t>*GetVector() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tMerge(TCollection* list); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::opera",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html:4922,Testability,Test,TestBit,4922,"id*TObject::operator new[](size_t sz, void* vp); TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t>&operator=(const TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t>&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t>(); TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t>(vector<TProofDrawListOfGraphs::Point3D_t>* anVector); TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t>(const TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t>&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html:4961,Testability,Test,TestBits,4961,"id*TObject::operator new[](size_t sz, void* vp); TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t>&operator=(const TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t>&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t>(); TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t>(vector<TProofDrawListOfGraphs::Point3D_t>* anVector); TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t>(const TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t>&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html:831,Usability,Clear,Clear,831," virtual~TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t>(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); vir",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfGraphs__Point3D_t_.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html:1402,Availability,Error,Error,1402," virtual~TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t>(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html:1531,Availability,error,error,1531," virtual~TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t>(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html:1615,Availability,error,error,1615,"oidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; vector<TProofDrawListOfPolyMarkers3D::Point4D_t>*GetVector() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFro",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html:2607,Modifiability,Inherit,InheritsFrom,2607,"* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; vector<TProofDrawListOfPolyMarkers3D::Point4D_t>*GetVector() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tMerge(TCollection* list); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html:2673,Modifiability,Inherit,InheritsFrom,2673," px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; vector<TProofDrawListOfPolyMarkers3D::Point4D_t>*GetVector() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tMerge(TCollection* list); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofVectorContain",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html:6718,Modifiability,Inherit,Inheritance,6718,"anVector); TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t>(const TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t>&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; vector<TProofDrawListOfPolyMarkers3D::Point4D_t>*fVectorvector. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; std::vector<T> * GetVector() const; { return fVector; }. Long64_t Merge(TCollection* list). » Author: Maarten Ballintijn 24/09/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-09-08 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html:6731,Modifiability,Inherit,Inherited,6731,"anVector); TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t>(const TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t>&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; vector<TProofDrawListOfPolyMarkers3D::Point4D_t>*fVectorvector. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; std::vector<T> * GetVector() const; { return fVector; }. Long64_t Merge(TCollection* list). » Author: Maarten Ballintijn 24/09/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-09-08 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html:2497,Security,Hash,Hash,2497,"hod, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; vector<TProofDrawListOfPolyMarkers3D::Point4D_t>*GetVector() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; Long64_tMerge(TCollection* list); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::opera",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html:4971,Testability,Test,TestBit,4971,"TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t>&operator=(const TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t>&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t>(); TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t>(vector<TProofDrawListOfPolyMarkers3D::Point4D_t>* anVector); TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t>(const TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t>&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html:5010,Testability,Test,TestBits,5010,"TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t>&operator=(const TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t>&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t>(); TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t>(vector<TProofDrawListOfPolyMarkers3D::Point4D_t>* anVector); TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t>(const TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t>&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html
https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html:859,Usability,Clear,Clear,859," virtual~TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t>(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_",MatchSource.WIKI,root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProofVectorContainer_TProofDrawListOfPolyMarkers3D__Point4D_t_.html
https://root.cern/root/html604/TProtoClass.html:1153,Availability,Error,Error,1153," virtual~TProtoClass(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); Bool_tFillTClass(TClass* pcl); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetBaseList(); vector<TDataMember*>&GetData(); vector<TString>&GetDepClasses(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TList*GetEnumList(); virtual const char*TObject::GetIconName() const; const TList*GetListOfEnums(); virtual",MatchSource.WIKI,root/html604/TProtoClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProtoClass.html
https://root.cern/root/html604/TProtoClass.html:1282,Availability,error,error,1282," virtual~TProtoClass(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); Bool_tFillTClass(TClass* pcl); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetBaseList(); vector<TDataMember*>&GetData(); vector<TString>&GetDepClasses(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TList*GetEnumList(); virtual const char*TObject::GetIconName() const; const TList*GetListOfEnums(); virtual",MatchSource.WIKI,root/html604/TProtoClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProtoClass.html
https://root.cern/root/html604/TProtoClass.html:1366,Availability,error,error,1366,"~TProtoClass(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); Bool_tFillTClass(TClass* pcl); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetBaseList(); vector<TDataMember*>&GetData(); vector<TString>&GetDepClasses(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TList*GetEnumList(); virtual const char*TObject::GetIconName() const; const TList*GetListOfEnums(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; vector<TProtoClass::TProtoRealData>&GetPRDList(); intGetSize(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTi",MatchSource.WIKI,root/html604/TProtoClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProtoClass.html
https://root.cern/root/html604/TProtoClass.html:6605,Integrability,depend,dependent,6605,"atic TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TList*fBaseList of base classes; Int_tfCanSplitWhether this class can be split; Long_tfClassPropertyClass C++ properties, see EClassProperties; vector<TDataMember*>fDatacollection of data members; vector<TString>fDepClasseslist of dependent classes; TList*fEnumsList of enums in this scope; Long_tfOffsetStreamerOffset to streamer function; vector<TProtoClass::TProtoRealData>fPRealDataList of TProtoRealData; Long_tfPropertyClass properties, see EProperties; Int_tfSizeofSize of the class; Int_tfStreamerTypeWhich streaming method to use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProtoClass(TClass* cl); Initialize a TProtoClass from a TClass. ~TProtoClass(); Destructor. void Delete(Option_t* opt = """"); Delete the containers that are usually owned by their TClass.; if (fPRealData) fPRealData->Delete(opt);; delete fPRealData; fPRealData = 0;. Bool_t FillTClass(TClass* pcl); Move data from this TProtoClass into cl. Int_t DataMemberIndex(TClass* cl, const char* name). TDataMember * FindDataMember(TClass* cl, Int_t index). TProtoClass(const TProtoClass& ). TProtoClass & operator=(const TProtoClass& ). const char * GetClassName(Int_t index) const; { return (index >= 0) ? fDepClasses[index].Data() : 0; }. TProto",MatchSource.WIKI,root/html604/TProtoClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProtoClass.html
https://root.cern/root/html604/TProtoClass.html:2522,Modifiability,Inherit,InheritsFrom,2522,"voidTNamed::FillBuffer(char*& buffer); Bool_tFillTClass(TClass* pcl); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetBaseList(); vector<TDataMember*>&GetData(); vector<TString>&GetDepClasses(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TList*GetEnumList(); virtual const char*TObject::GetIconName() const; const TList*GetListOfEnums(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; vector<TProtoClass::TProtoRealData>&GetPRDList(); intGetSize(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz",MatchSource.WIKI,root/html604/TProtoClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProtoClass.html
https://root.cern/root/html604/TProtoClass.html:2588,Modifiability,Inherit,InheritsFrom,2588,"l); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetBaseList(); vector<TDataMember*>&GetData(); vector<TString>&GetDepClasses(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TList*GetEnumList(); virtual const char*TObject::GetIconName() const; const TList*GetListOfEnums(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; vector<TProtoClass::TProtoRealData>&GetPRDList(); intGetSize(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); vi",MatchSource.WIKI,root/html604/TProtoClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProtoClass.html
https://root.cern/root/html604/TProtoClass.html:6928,Modifiability,Inherit,Inheritance,6928,"StatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TList*fBaseList of base classes; Int_tfCanSplitWhether this class can be split; Long_tfClassPropertyClass C++ properties, see EClassProperties; vector<TDataMember*>fDatacollection of data members; vector<TString>fDepClasseslist of dependent classes; TList*fEnumsList of enums in this scope; Long_tfOffsetStreamerOffset to streamer function; vector<TProtoClass::TProtoRealData>fPRealDataList of TProtoRealData; Long_tfPropertyClass properties, see EProperties; Int_tfSizeofSize of the class; Int_tfStreamerTypeWhich streaming method to use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProtoClass(TClass* cl); Initialize a TProtoClass from a TClass. ~TProtoClass(); Destructor. void Delete(Option_t* opt = """"); Delete the containers that are usually owned by their TClass.; if (fPRealData) fPRealData->Delete(opt);; delete fPRealData; fPRealData = 0;. Bool_t FillTClass(TClass* pcl); Move data from this TProtoClass into cl. Int_t DataMemberIndex(TClass* cl, const char* name). TDataMember * FindDataMember(TClass* cl, Int_t index). TProtoClass(const TProtoClass& ). TProtoClass & operator=(const TProtoClass& ). const char * GetClassName(Int_t index) const; { return (index >= 0) ? fDepClasses[index].Data() : 0; }. TProtoClass(). TProtoClass(TProtoClass* pc). const TList * GetListOfEnums(). int GetSize(); { return fSizeof; }. TList * GetBaseList(); TList * GetDataList() { return fData; }. { return fBase; }. TList * GetEnumList(); { return fEnums; }. std::vector<TProtoRealData> & GetPRDList(); { return fPRealData; }. std::vecto",MatchSource.WIKI,root/html604/TProtoClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProtoClass.html
https://root.cern/root/html604/TProtoClass.html:6941,Modifiability,Inherit,Inherited,6941,"StatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TList*fBaseList of base classes; Int_tfCanSplitWhether this class can be split; Long_tfClassPropertyClass C++ properties, see EClassProperties; vector<TDataMember*>fDatacollection of data members; vector<TString>fDepClasseslist of dependent classes; TList*fEnumsList of enums in this scope; Long_tfOffsetStreamerOffset to streamer function; vector<TProtoClass::TProtoRealData>fPRealDataList of TProtoRealData; Long_tfPropertyClass properties, see EProperties; Int_tfSizeofSize of the class; Int_tfStreamerTypeWhich streaming method to use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProtoClass(TClass* cl); Initialize a TProtoClass from a TClass. ~TProtoClass(); Destructor. void Delete(Option_t* opt = """"); Delete the containers that are usually owned by their TClass.; if (fPRealData) fPRealData->Delete(opt);; delete fPRealData; fPRealData = 0;. Bool_t FillTClass(TClass* pcl); Move data from this TProtoClass into cl. Int_t DataMemberIndex(TClass* cl, const char* name). TDataMember * FindDataMember(TClass* cl, Int_t index). TProtoClass(const TProtoClass& ). TProtoClass & operator=(const TProtoClass& ). const char * GetClassName(Int_t index) const; { return (index >= 0) ? fDepClasses[index].Data() : 0; }. TProtoClass(). TProtoClass(TProtoClass* pc). const TList * GetListOfEnums(). int GetSize(); { return fSizeof; }. TList * GetBaseList(); TList * GetDataList() { return fData; }. { return fBase; }. TList * GetEnumList(); { return fEnums; }. std::vector<TProtoRealData> & GetPRDList(); { return fPRealData; }. std::vecto",MatchSource.WIKI,root/html604/TProtoClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProtoClass.html
https://root.cern/root/html604/TProtoClass.html:2412,Security,Hash,Hash,2412,"t_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); Bool_tFillTClass(TClass* pcl); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetBaseList(); vector<TDataMember*>&GetData(); vector<TString>&GetDepClasses(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TList*GetEnumList(); virtual const char*TObject::GetIconName() const; const TList*GetListOfEnums(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; vector<TProtoClass::TProtoRealData>&GetPRDList(); intGetSize(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::",MatchSource.WIKI,root/html604/TProtoClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProtoClass.html
https://root.cern/root/html604/TProtoClass.html:4705,Testability,Test,TestBit,4705,", const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProtoClass(); TProtoClass(TProtoClass* pc); TProtoClass(TClass* cl); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProtoClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProtoClass.html
https://root.cern/root/html604/TProtoClass.html:4744,Testability,Test,TestBits,4744,", const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProtoClass(); TProtoClass(TProtoClass* pc); TProtoClass(TClass* cl); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TProtoClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProtoClass.html
https://root.cern/root/html604/TProtoClass.html:627,Usability,Clear,Clear,627," virtual~TProtoClass(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); Bool_tFillTClass(TClass* pcl); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetBaseList(); vector<TDataMember*>&GetData(); vector<TString>&GetDepClasses(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TList*GetEnumList(); virtual const char*TObject::GetIconName() const; const TList*GetListOfEnums(); virtual",MatchSource.WIKI,root/html604/TProtoClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProtoClass.html
https://root.cern/root/html604/TProtoClass__TProtoRealData.html:1752,Modifiability,Inherit,Inheritance,1752,"tual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Bool_tTestFlag(UInt_t f) const; TProtoClass::TProtoRealDataTProtoRealData(); TProtoClass::TProtoRealDataTProtoRealData(const TRealData* rd); TProtoClass::TProtoRealDataTProtoRealData(const TProtoClass::TProtoRealData&). Data Members; public:. Int_tfClassIndexindex of class belonging to in list of dep classes; Int_tfDMIndexindex of data member in vector of data members; Int_tfLevelmember level (0 : belong to this class, 1 is a data member of a data member object, etc...); Long_tfOffsetdata member offset; charfStatusFlagstatus of the real data member (if bit 0 set is an object, if bit 1 set is transient if bit 2 set is a pointer); static TProtoClass::TProtoRealData::(anonymous)kBitMask; static TProtoClass::TProtoRealData::(anonymous)kIsObject; static TProtoClass::TProtoRealData::(anonymous)kIsPointer; static TProtoClass::TProtoRealData::(anonymous)kIsTransient. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProtoRealData(const TRealData* rd); TNamed(rd->GetDataMember()->GetName(), rd->GetName()),; TNamed(),; fName(rd->GetDataMember()->GetName()),; fTitle(rd->GetName()),. ~TProtoRealData(); Destructor to pin vtable.; if (gErrorIgnoreLevel==-2) printf(""destroy real data %s - "",GetName());. TRealData* CreateRealData(TClass* currentClass, TClass* parent, TRealData* parentData, int prevLevel) const; Create a TRealData from this, with its data member coming from dmClass.; find data member from protoclass. bool IsAClass() const; { return fClassIndex >= 0; }. TProtoRealData(); {}. TProtoRealData(const TRealData* rd). Bool_t TestFlag(UInt_t f) const; { return (Bool_t) ((fStatusFlag & f) != 0); }. void SetFlag(UInt_t f, Bool_t on = kTRUE). TProtoClass & operator=(const TProtoClass::TProtoRealData& ). » Author: Axel Naumann 2014-04-28 » Copyright (C) 1995-2014, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-",MatchSource.WIKI,root/html604/TProtoClass__TProtoRealData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProtoClass__TProtoRealData.html
https://root.cern/root/html604/TProtoClass__TProtoRealData.html:1765,Modifiability,Inherit,Inherited,1765,"tual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Bool_tTestFlag(UInt_t f) const; TProtoClass::TProtoRealDataTProtoRealData(); TProtoClass::TProtoRealDataTProtoRealData(const TRealData* rd); TProtoClass::TProtoRealDataTProtoRealData(const TProtoClass::TProtoRealData&). Data Members; public:. Int_tfClassIndexindex of class belonging to in list of dep classes; Int_tfDMIndexindex of data member in vector of data members; Int_tfLevelmember level (0 : belong to this class, 1 is a data member of a data member object, etc...); Long_tfOffsetdata member offset; charfStatusFlagstatus of the real data member (if bit 0 set is an object, if bit 1 set is transient if bit 2 set is a pointer); static TProtoClass::TProtoRealData::(anonymous)kBitMask; static TProtoClass::TProtoRealData::(anonymous)kIsObject; static TProtoClass::TProtoRealData::(anonymous)kIsPointer; static TProtoClass::TProtoRealData::(anonymous)kIsTransient. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProtoRealData(const TRealData* rd); TNamed(rd->GetDataMember()->GetName(), rd->GetName()),; TNamed(),; fName(rd->GetDataMember()->GetName()),; fTitle(rd->GetName()),. ~TProtoRealData(); Destructor to pin vtable.; if (gErrorIgnoreLevel==-2) printf(""destroy real data %s - "",GetName());. TRealData* CreateRealData(TClass* currentClass, TClass* parent, TRealData* parentData, int prevLevel) const; Create a TRealData from this, with its data member coming from dmClass.; find data member from protoclass. bool IsAClass() const; { return fClassIndex >= 0; }. TProtoRealData(); {}. TProtoRealData(const TRealData* rd). Bool_t TestFlag(UInt_t f) const; { return (Bool_t) ((fStatusFlag & f) != 0); }. void SetFlag(UInt_t f, Bool_t on = kTRUE). TProtoClass & operator=(const TProtoClass::TProtoRealData& ). » Author: Axel Naumann 2014-04-28 » Copyright (C) 1995-2014, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-",MatchSource.WIKI,root/html604/TProtoClass__TProtoRealData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProtoClass__TProtoRealData.html
https://root.cern/root/html604/TProtoClass__TProtoRealData.html:2451,Testability,Test,TestFlag,2451,"otoClass::TProtoRealDataTProtoRealData(const TRealData* rd); TProtoClass::TProtoRealDataTProtoRealData(const TProtoClass::TProtoRealData&). Data Members; public:. Int_tfClassIndexindex of class belonging to in list of dep classes; Int_tfDMIndexindex of data member in vector of data members; Int_tfLevelmember level (0 : belong to this class, 1 is a data member of a data member object, etc...); Long_tfOffsetdata member offset; charfStatusFlagstatus of the real data member (if bit 0 set is an object, if bit 1 set is transient if bit 2 set is a pointer); static TProtoClass::TProtoRealData::(anonymous)kBitMask; static TProtoClass::TProtoRealData::(anonymous)kIsObject; static TProtoClass::TProtoRealData::(anonymous)kIsPointer; static TProtoClass::TProtoRealData::(anonymous)kIsTransient. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProtoRealData(const TRealData* rd); TNamed(rd->GetDataMember()->GetName(), rd->GetName()),; TNamed(),; fName(rd->GetDataMember()->GetName()),; fTitle(rd->GetName()),. ~TProtoRealData(); Destructor to pin vtable.; if (gErrorIgnoreLevel==-2) printf(""destroy real data %s - "",GetName());. TRealData* CreateRealData(TClass* currentClass, TClass* parent, TRealData* parentData, int prevLevel) const; Create a TRealData from this, with its data member coming from dmClass.; find data member from protoclass. bool IsAClass() const; { return fClassIndex >= 0; }. TProtoRealData(); {}. TProtoRealData(const TRealData* rd). Bool_t TestFlag(UInt_t f) const; { return (Bool_t) ((fStatusFlag & f) != 0); }. void SetFlag(UInt_t f, Bool_t on = kTRUE). TProtoClass & operator=(const TProtoClass::TProtoRealData& ). » Author: Axel Naumann 2014-04-28 » Copyright (C) 1995-2014, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-09-08 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TProtoClass__TProtoRealData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TProtoClass__TProtoRealData.html
https://root.cern/root/html604/TPServerSocket.html:1897,Availability,Error,Error,1897,"owse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTSocket::Close(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static UChar_tTServerSocket::GetAcceptOptions(); UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() cons",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:2026,Availability,error,error,2026,"on = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTSocket::Close(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static UChar_tTServerSocket::GetAcceptOptions(); UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() const; TTimeStampTSocket::GetLastUsage(",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:2110,Availability,error,error,2110,"dTSocket::Close(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static UChar_tTServerSocket::GetAcceptOptions(); UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() const; TTimeStampTSocket::GetLastUsage(); virtual TInetAddressTServerSocket::GetLocalInetAddress(); virtual Int_tTServerSoc",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:4638,Availability,error,error,4638,":GetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSocket::GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTSocket::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Int_tTSocket::Reconnect(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tTServerSocket::Recv(TMessage*&); virtual Int_tTServerSocket::Recv(Int_t&, Int_t&); virtual Int_tTServerSocket::Recv(char*, Int_t); virtual Int_tTServerSocket::Recv(char*, Int_t, Int_t&); virtual Int_tTServerSocket",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:12056,Availability,error,error,12056,"ytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. Int_tfTcpWindowSizesize of tcp window (for window scaling). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a parallel server socket object on a specified port. Set reuse; to true to force reuse of the server socket (i.e. do not wait for the; time out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TPServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a parallel server socket object for a named service. Set reuse; to true to force reuse of the server socket (i.e. do not wait for the; time out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server so",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:12095,Availability,error,error,12095,"wSizesize of tcp window (for window scaling). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a parallel server socket object on a specified port. Set reuse; to true to force reuse of the server socket (i.e. do not wait for the; time out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TPServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a parallel server socket object for a named service. Set reuse; to true to force reuse of the server socket (i.e. do not wait for the; time out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 ",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:13084,Availability,error,error,13084,"cific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TPServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a parallel server socket object for a named service. Set reuse; to true to force reuse of the server socket (i.e. do not wait for the; time out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TSocket * Accept(UChar_t Opt = kSrvNoAuth); Accept a connection on a parallel server socket. Returns a full-duplex; parallel communication TPSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. TPServe",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:13123,Availability,error,error,13123,"ket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TPServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a parallel server socket object for a named service. Set reuse; to true to force reuse of the server socket (i.e. do not wait for the; time out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TSocket * Accept(UChar_t Opt = kSrvNoAuth); Accept a connection on a parallel server socket. Returns a full-duplex; parallel communication TPSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. TPServerSocket(const TPServerSocket& ). void operator=(const TPServerSocket& ). virtual ~TPServerSocket(); { }. » Author: Fons Rademakers 19/1/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:13934,Availability,error,error,13934,"_t tcpwindowsize = -1); Create a parallel server socket object for a named service. Set reuse; to true to force reuse of the server socket (i.e. do not wait for the; time out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TSocket * Accept(UChar_t Opt = kSrvNoAuth); Accept a connection on a parallel server socket. Returns a full-duplex; parallel communication TPSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. TPServerSocket(const TPServerSocket& ). void operator=(const TPServerSocket& ). virtual ~TPServerSocket(); { }. » Author: Fons Rademakers 19/1/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 16:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:14018,Availability,avail,available,14018,"_t tcpwindowsize = -1); Create a parallel server socket object for a named service. Set reuse; to true to force reuse of the server socket (i.e. do not wait for the; time out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TSocket * Accept(UChar_t Opt = kSrvNoAuth); Accept a connection on a parallel server socket. Returns a full-duplex; parallel communication TPSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. TPServerSocket(const TPServerSocket& ). void operator=(const TPServerSocket& ). virtual ~TPServerSocket(); { }. » Author: Fons Rademakers 19/1/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 16:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:11180,Integrability,protocol,protocol,11180,"TSocket::kPROOFD; static TSocket::EServiceTypeTSocket::kROOTD; static TSocket::EInterestTSocket::kRead; static TSocket::EServiceTypeTSocket::kSOCKD; static TObject::(anonymous)TObject::kSingleKey; static TSocket::EInterestTSocket::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. Int_tfTcpWindowSizesize of tcp window (for window scaling). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a parallel server socket object on a specified port. Set reuse; to",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:3977,Modifiability,Inherit,InheritsFrom,3977,"ress() const; TTimeStampTSocket::GetLastUsage(); virtual TInetAddressTServerSocket::GetLocalInetAddress(); virtual Int_tTServerSocket::GetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTSocket::GetOption(ESockOptions opt, Int_t& val); Int_tTSocket::GetPort() const; Int_tTSocket::GetRemoteProtocol() const; TSecContext*TSocket::GetSecContext() const; const char*TSocket::GetService() const; Int_tTSocket::GetServType() const; static ULong64_tTSocket::GetSocketBytesRecv(); static ULong64_tTSocket::GetSocketBytesSent(); Int_tTSocket::GetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSocket::GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTSocket::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::ope",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:4043,Modifiability,Inherit,InheritsFrom,4043,"essTServerSocket::GetLocalInetAddress(); virtual Int_tTServerSocket::GetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTSocket::GetOption(ESockOptions opt, Int_t& val); Int_tTSocket::GetPort() const; Int_tTSocket::GetRemoteProtocol() const; TSecContext*TSocket::GetSecContext() const; const char*TSocket::GetService() const; Int_tTSocket::GetServType() const; static ULong64_tTSocket::GetSocketBytesRecv(); static ULong64_tTSocket::GetSocketBytesSent(); Int_tTSocket::GetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSocket::GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTSocket::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* ",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:11283,Modifiability,Inherit,Inheritance,11283,"ect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. Int_tfTcpWindowSizesize of tcp window (for window scaling). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a parallel server socket object on a specified port. Set reuse; to true to force reuse of the server socket (i.e. do not wait for the; time out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make su",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:11296,Modifiability,Inherit,Inherited,11296,"ect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. Int_tfTcpWindowSizesize of tcp window (for window scaling). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a parallel server socket object on a specified port. Set reuse; to true to force reuse of the server socket (i.e. do not wait for the; time out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make su",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:447,Performance,perform,performs,447,". TPServerSocket. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TPServerSocket. class TPServerSocket: public TServerSocket. TPServerSocket. This class implements parallel server sockets. A parallel server; socket waits for requests to come in over the network. It performs; some operation based on that request and then possibly returns a; full duplex parallel socket to the requester. The actual work is; done via the TSystem class (either TUnixSystem or TWinNTSystem). Function Members (Methods); public:. virtual~TPServerSocket(); voidTObject::AbstractMethod(const char* method) const; virtual TSocket*Accept(UChar_t Opt = kSrvNoAuth); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTSocket::Close(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, co",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:11671,Performance,queue,queue,11671,"ervice (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. Int_tfTcpWindowSizesize of tcp window (for window scaling). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a parallel server socket object on a specified port. Set reuse; to true to force reuse of the server socket (i.e. do not wait for the; time out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TPServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a parallel server socket object for a named service. Set reuse; to true to force reuse of the server socket (i.e. do not wait for the; time out to pass). Using backl",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:12699,Performance,queue,queue,12699,"connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TPServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a parallel server socket object for a named service. Set reuse; to true to force reuse of the server socket (i.e. do not wait for the; time out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TSocket * Accept(UChar_t Opt = kSrvNoAuth); Accept a connection on a parallel server socket. Returns a full-duplex; parallel communication TPSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call bloc",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:13609,Performance,queue,queue,13609,"_t tcpwindowsize = -1); Create a parallel server socket object for a named service. Set reuse; to true to force reuse of the server socket (i.e. do not wait for the; time out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TSocket * Accept(UChar_t Opt = kSrvNoAuth); Accept a connection on a parallel server socket. Returns a full-duplex; parallel communication TPSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. TPServerSocket(const TPServerSocket& ). void operator=(const TPServerSocket& ). virtual ~TPServerSocket(); { }. » Author: Fons Rademakers 19/1/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 16:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:5951,Safety,timeout,timeout,5951," void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Int_tTSocket::Reconnect(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tTServerSocket::Recv(TMessage*&); virtual Int_tTServerSocket::Recv(Int_t&, Int_t&); virtual Int_tTServerSocket::Recv(char*, Int_t); virtual Int_tTServerSocket::Recv(char*, Int_t, Int_t&); virtual Int_tTServerSocket::RecvRaw(void*, Int_t, ESendRecvOptions = kDefault); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTSocket::Select(Int_t interest = kRead, Long_t timeout = -1); virtual Int_tTServerSocket::Send(const TMessage&); virtual Int_tTServerSocket::Send(Int_t); virtual Int_tTServerSocket::Send(Int_t, Int_t); virtual Int_tTServerSocket::Send(const char*, Int_t = kMESS_STRING); virtual Int_tTServerSocket::SendObject(const TObject*, Int_t = kMESS_OBJECT); virtual Int_tTServerSocket::SendRaw(const void*, Int_t, ESendRecvOptions = kDefault); static voidTServerSocket::SetAcceptOptions(UChar_t Opt); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tTSocket::SetOption(ESockOp",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:3867,Security,Hash,Hash,3867,"t_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() const; TTimeStampTSocket::GetLastUsage(); virtual TInetAddressTServerSocket::GetLocalInetAddress(); virtual Int_tTServerSocket::GetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTSocket::GetOption(ESockOptions opt, Int_t& val); Int_tTSocket::GetPort() const; Int_tTSocket::GetRemoteProtocol() const; TSecContext*TSocket::GetSecContext() const; const char*TSocket::GetService() const; Int_tTSocket::GetServType() const; static ULong64_tTSocket::GetSocketBytesRecv(); static ULong64_tTSocket::GetSocketBytesSent(); Int_tTSocket::GetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSocket::GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTSocket::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp);",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:8259,Security,Authenticat,Authenticate,8259,"amer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSocket::Touch(); TPServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); TPServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. Bool_tTSocket::Authenticate(const char* user); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); Bool_tTSocket::RecvProcessIDs(TMessage* mess); Bool_tTSocket::RecvStreamerInfos(TMessage* mess); voidTSocket::SendProcessIDs(const TMessage& mess); voidTSocket::SendStreamerInfos(const TMessage& mess); voidTSocket::SetDescriptor(Int_t desc). private:. voidoperator=(const TPServerSocket&); TPServerSocket(const TPServerSocket&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TSocket::EStatusBitsTSocket::kBrokenConn; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TServerSocket::(anonymous)TServerSocket::kDefaultBacklog; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TSocket::EStatusBitsTSocket::kIsUnix; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObjec",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:10557,Security,Authenticat,Authenticate,10557,"TSocket::kPROOFD; static TSocket::EServiceTypeTSocket::kROOTD; static TSocket::EInterestTSocket::kRead; static TSocket::EServiceTypeTSocket::kSOCKD; static TObject::(anonymous)TObject::kSingleKey; static TSocket::EInterestTSocket::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. Int_tfTcpWindowSizesize of tcp window (for window scaling). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a parallel server socket object on a specified port. Set reuse; to",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:10955,Security,authenticat,authentication,10955,"TSocket::kPROOFD; static TSocket::EServiceTypeTSocket::kROOTD; static TSocket::EInterestTSocket::kRead; static TSocket::EServiceTypeTSocket::kSOCKD; static TObject::(anonymous)TObject::kSingleKey; static TSocket::EInterestTSocket::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. Int_tfTcpWindowSizesize of tcp window (for window scaling). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a parallel server socket object on a specified port. Set reuse; to",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:7618,Testability,Test,TestBit,7618,"Int_t = kMESS_OBJECT); virtual Int_tTServerSocket::SendRaw(const void*, Int_t, ESendRecvOptions = kDefault); static voidTServerSocket::SetAcceptOptions(UChar_t Opt); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tTSocket::SetOption(ESockOptions opt, Int_t val); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSecContext* ctx); voidTSocket::SetService(const char* service); voidTSocket::SetServType(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidTSocket::SetUrl(const char* url); static voidTServerSocket::ShowAcceptOptions(); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSocket::Touch(); TPServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); TPServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:7657,Testability,Test,TestBits,7657,"Int_t = kMESS_OBJECT); virtual Int_tTServerSocket::SendRaw(const void*, Int_t, ESendRecvOptions = kDefault); static voidTServerSocket::SetAcceptOptions(UChar_t Opt); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tTSocket::SetOption(ESockOptions opt, Int_t val); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSecContext* ctx); voidTSocket::SetService(const char* service); voidTSocket::SetServType(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidTSocket::SetUrl(const char* url); static voidTServerSocket::ShowAcceptOptions(); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSocket::Touch(); TPServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); TPServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPServerSocket.html:1009,Usability,Clear,Clear,1009," virtual~TPServerSocket(); voidTObject::AbstractMethod(const char* method) const; virtual TSocket*Accept(UChar_t Opt = kSrvNoAuth); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTSocket::Close(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, co",MatchSource.WIKI,root/html604/TPServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPServerSocket.html
https://root.cern/root/html604/TPSocket.html:1798,Availability,Error,Error,1798,"bject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tGetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSo",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:1927,Availability,error,error,1927,"n_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tGetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() const; TTimeStampTSocket::GetLastUsage(); virtual TInetAddressGetLocalInetAddress(); virtual Int_tTSocket:",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:2011,Availability,error,error,2011,"rtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tGetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() const; TTimeStampTSocket::GetLastUsage(); virtual TInetAddressGetLocalInetAddress(); virtual Int_tTSocket::GetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::G",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:4455,Availability,error,error,4455,"tTSocket::GetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSocket::GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Int_tTSocket::Reconnect(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRecv(TMessage*& mess); virtual Int_tRecv(Int_t& status, Int_t& kind); virtual Int_tRecv(char* mess, Int_t max); virtual Int_tRecv(char* mess, Int_t max, Int_t& kind); virtual Int_tRecvRaw(void* buffer, Int_t lengt",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:14810,Availability,down,down,14810," window scaling).; Returns when connection has been accepted by remote side. Use IsValid(); to check the validity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TPSocket(const char* host, Int_t port, Int_t size, TSocket* sock); Create a parallel socket on a connection already opened via; TSocket sock.; This constructor is provided to optimize TNetFile opening when; instatiated via a call to TXNetFile.; Returns when connection has been accepted by remote side. Use IsValid(); to check the validity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TPSocket(TSocket*[] pSockets, Int_t size); Create a parallel socket. This ctor is called by TPServerSocket. ~TPSocket(); Cleanup the parallel socket. void Close(Option_t* opt = """"); Close a parallel socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). void Init(Int_t tcpwindowsize, TSocket* sock = 0); Create a parallel socket to the specified host. TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetDescriptor() const; Return socket descriptor. Int_t Send(const TMessage& mess); Send a TMessage object. Returns the number of bytes in the TMessage; that were sent and -1 in case of error. In case the TMessage::What; has been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified leng",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:15218,Availability,error,error,15218,"optimize TNetFile opening when; instatiated via a call to TXNetFile.; Returns when connection has been accepted by remote side. Use IsValid(); to check the validity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TPSocket(TSocket*[] pSockets, Int_t size); Create a parallel socket. This ctor is called by TPServerSocket. ~TPSocket(); Cleanup the parallel socket. void Close(Option_t* opt = """"); Close a parallel socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). void Init(Int_t tcpwindowsize, TSocket* sock = 0); Create a parallel socket to the specified host. TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetDescriptor() const; Return socket descriptor. Int_t Send(const TMessage& mess); Send a TMessage object. Returns the number of bytes in the TMessage; that were sent and -1 in case of error. In case the TMessage::What; has been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; send and -1 in case of error. Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket would; block (i.e. there is nothing to be read). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions o",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:15455,Availability,error,error,15455,"y socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TPSocket(TSocket*[] pSockets, Int_t size); Create a parallel socket. This ctor is called by TPServerSocket. ~TPSocket(); Cleanup the parallel socket. void Close(Option_t* opt = """"); Close a parallel socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). void Init(Int_t tcpwindowsize, TSocket* sock = 0); Create a parallel socket to the specified host. TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetDescriptor() const; Return socket descriptor. Int_t Send(const TMessage& mess); Send a TMessage object. Returns the number of bytes in the TMessage; that were sent and -1 in case of error. In case the TMessage::What; has been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; send and -1 in case of error. Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket would; block (i.e. there is nothing to be read). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; sent or -1 in case of error. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(E",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:15850,Availability,error,error,15850,"ion. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). void Init(Int_t tcpwindowsize, TSocket* sock = 0); Create a parallel socket to the specified host. TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetDescriptor() const; Return socket descriptor. Int_t Send(const TMessage& mess); Send a TMessage object. Returns the number of bytes in the TMessage; that were sent and -1 in case of error. In case the TMessage::What; has been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; send and -1 in case of error. Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket would; block (i.e. there is nothing to be read). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; sent or -1 in case of error. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0. TPSocket(TSocket*[] pSockets, Int_t size). void operator=(const TPSocket& ). Option_t * GetOption() const; { return TObject::GetOption(); }. Int_t Send(const TMessage& mess). Int_t Se",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:16058,Availability,error,error,16058,"Socket* sock = 0); Create a parallel socket to the specified host. TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetDescriptor() const; Return socket descriptor. Int_t Send(const TMessage& mess); Send a TMessage object. Returns the number of bytes in the TMessage; that were sent and -1 in case of error. In case the TMessage::What; has been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; send and -1 in case of error. Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket would; block (i.e. there is nothing to be read). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; sent or -1 in case of error. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0. TPSocket(TSocket*[] pSockets, Int_t size). void operator=(const TPSocket& ). Option_t * GetOption() const; { return TObject::GetOption(); }. Int_t Send(const TMessage& mess). Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Recv(TMessage*& mess). Int_t Recv(Int_t& status, Int_t& kind); { return TS",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:16329,Availability,error,error,16329," descriptor. Int_t Send(const TMessage& mess); Send a TMessage object. Returns the number of bytes in the TMessage; that were sent and -1 in case of error. In case the TMessage::What; has been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; send and -1 in case of error. Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket would; block (i.e. there is nothing to be read). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; sent or -1 in case of error. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0. TPSocket(TSocket*[] pSockets, Int_t size). void operator=(const TPSocket& ). Option_t * GetOption() const; { return TObject::GetOption(); }. Int_t Send(const TMessage& mess). Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Recv(TMessage*& mess). Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. Bool_t IsValid() const; { return fSockets ? kTRUE : kFALSE; }. Int_t GetSize() const; { return fSize; }. » Author: Fons Rademakers 20/1/2001 » Copyright (C) 1995-2001, ",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:16491,Availability,error,error,16491,"::What; has been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; send and -1 in case of error. Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket would; block (i.e. there is nothing to be read). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; sent or -1 in case of error. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0. TPSocket(TSocket*[] pSockets, Int_t size). void operator=(const TPSocket& ). Option_t * GetOption() const; { return TObject::GetOption(); }. Int_t Send(const TMessage& mess). Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Recv(TMessage*& mess). Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. Bool_t IsValid() const; { return fSockets ? kTRUE : kFALSE; }. Int_t GetSize() const; { return fSize; }. » Author: Fons Rademakers 20/1/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 16:25; This page has been automatically generated. For comments or suggestions regar",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:16534,Availability,error,error,16534,"the call will only return after having; received an acknowledgement, making the sending process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; send and -1 in case of error. Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket would; block (i.e. there is nothing to be read). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; sent or -1 in case of error. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0. TPSocket(TSocket*[] pSockets, Int_t size). void operator=(const TPSocket& ). Option_t * GetOption() const; { return TObject::GetOption(); }. Int_t Send(const TMessage& mess). Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Recv(TMessage*& mess). Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. Bool_t IsValid() const; { return fSockets ? kTRUE : kFALSE; }. Int_t GetSize() const; { return fSize; }. » Author: Fons Rademakers 20/1/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 16:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in gene",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:16600,Availability,error,error,16600,"received an acknowledgement, making the sending process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; send and -1 in case of error. Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket would; block (i.e. there is nothing to be read). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; sent or -1 in case of error. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0. TPSocket(TSocket*[] pSockets, Int_t size). void operator=(const TPSocket& ). Option_t * GetOption() const; { return TObject::GetOption(); }. Int_t Send(const TMessage& mess). Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Recv(TMessage*& mess). Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. Bool_t IsValid() const; { return fSockets ? kTRUE : kFALSE; }. Int_t GetSize() const; { return fSize; }. » Author: Fons Rademakers 20/1/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 16:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:11045,Integrability,protocol,protocol,11045,"TSocket::kPROOFD; static TSocket::EServiceTypeTSocket::kROOTD; static TSocket::EInterestTSocket::kRead; static TSocket::EServiceTypeTSocket::kSOCKD; static TObject::(anonymous)TObject::kSingleKey; static TSocket::EInterestTSocket::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. Int_t*fReadBytesLeftbytes left to read for specified socket; TMonitor*fReadMonitormonitor read from parallel sockets; char**fReadPtrpointer to read buffer for specified socket; Int_tfSizenumber of parallel sockets; TSocket**fSocketsarray of parallel sockets; Int_t*fWriteBytesLeftbytes left to write for specified socket; TMonitor*fWr",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:15974,Integrability,message,message,15974,"Socket* sock = 0); Create a parallel socket to the specified host. TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetDescriptor() const; Return socket descriptor. Int_t Send(const TMessage& mess); Send a TMessage object. Returns the number of bytes in the TMessage; that were sent and -1 in case of error. In case the TMessage::What; has been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; send and -1 in case of error. Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket would; block (i.e. there is nothing to be read). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; sent or -1 in case of error. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0. TPSocket(TSocket*[] pSockets, Int_t size). void operator=(const TPSocket& ). Option_t * GetOption() const; { return TObject::GetOption(); }. Int_t Send(const TMessage& mess). Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Recv(TMessage*& mess). Int_t Recv(Int_t& status, Int_t& kind); { return TS",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:16554,Integrability,depend,depends,16554,"received an acknowledgement, making the sending process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; send and -1 in case of error. Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket would; block (i.e. there is nothing to be read). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; sent or -1 in case of error. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0. TPSocket(TSocket*[] pSockets, Int_t size). void operator=(const TPSocket& ). Option_t * GetOption() const; { return TObject::GetOption(); }. Int_t Send(const TMessage& mess). Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Recv(TMessage*& mess). Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. Bool_t IsValid() const; { return fSockets ? kTRUE : kFALSE; }. Int_t GetSize() const; { return fSize; }. » Author: Fons Rademakers 20/1/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 16:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:3803,Modifiability,Inherit,InheritsFrom,3803,"tInetAddress() const; TTimeStampTSocket::GetLastUsage(); virtual TInetAddressGetLocalInetAddress(); virtual Int_tTSocket::GetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tGetOption(ESockOptions opt, Int_t& val); Int_tTSocket::GetPort() const; Int_tTSocket::GetRemoteProtocol() const; TSecContext*TSocket::GetSecContext() const; const char*TSocket::GetService() const; Int_tTSocket::GetServType() const; Int_tGetSize() const; static ULong64_tTSocket::GetSocketBytesRecv(); static ULong64_tTSocket::GetSocketBytesSent(); Int_tTSocket::GetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSocket::GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:3869,Modifiability,Inherit,InheritsFrom,3869,"InetAddressGetLocalInetAddress(); virtual Int_tTSocket::GetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tGetOption(ESockOptions opt, Int_t& val); Int_tTSocket::GetPort() const; Int_tTSocket::GetRemoteProtocol() const; TSecContext*TSocket::GetSecContext() const; const char*TSocket::GetService() const; Int_tTSocket::GetServType() const; Int_tGetSize() const; static ULong64_tTSocket::GetSocketBytesRecv(); static ULong64_tTSocket::GetSocketBytesSent(); Int_tTSocket::GetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSocket::GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:11528,Modifiability,Inherit,Inheritance,11528,"ote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. Int_t*fReadBytesLeftbytes left to read for specified socket; TMonitor*fReadMonitormonitor read from parallel sockets; char**fReadPtrpointer to read buffer for specified socket; Int_tfSizenumber of parallel sockets; TSocket**fSocketsarray of parallel sockets; Int_t*fWriteBytesLeftbytes left to write for specified socket; TMonitor*fWriteMonitormonitor write on parallel sockets; char**fWritePtrpointer to write buffer for specified socket. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPSocket(TInetAddress address, const char* service, Int_t size, Int_t tcpwindowsize = -1); Create a parallel socket. Connect to the named service at address addr.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Returns when connection has been accepted by remote side. Use IsValid(); to check the validity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TPSocket(TInetAddress address, Int_t port, Int_t size, Int_t tcpwindowsize = -1); Create a parallel socket. Connect to the specified port # at address addr.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for pla",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:11541,Modifiability,Inherit,Inherited,11541,"ote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. Int_t*fReadBytesLeftbytes left to read for specified socket; TMonitor*fReadMonitormonitor read from parallel sockets; char**fReadPtrpointer to read buffer for specified socket; Int_tfSizenumber of parallel sockets; TSocket**fSocketsarray of parallel sockets; Int_t*fWriteBytesLeftbytes left to write for specified socket; TMonitor*fWriteMonitormonitor write on parallel sockets; char**fWritePtrpointer to write buffer for specified socket. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPSocket(TInetAddress address, const char* service, Int_t size, Int_t tcpwindowsize = -1); Create a parallel socket. Connect to the named service at address addr.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Returns when connection has been accepted by remote side. Use IsValid(); to check the validity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TPSocket(TInetAddress address, Int_t port, Int_t size, Int_t tcpwindowsize = -1); Create a parallel socket. Connect to the specified port # at address addr.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for pla",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:594,Performance,latency,latency,594,". TPSocket. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TPSocket. class TPSocket: public TSocket. TPSocket. This class implements parallel client sockets. A parallel socket is; an endpoint for communication between two machines. It is parallel; because several TSockets are open at the same time to the same; destination. This especially speeds up communication over Big Fat; Pipes (i.e. high bandwidth, high latency WAN connections). Function Members (Methods); public:. virtual~TPSocket(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* param",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:14234,Performance,optimiz,optimize,14234,"mote side. Use IsValid(); to check the validity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TPSocket(const char* host, Int_t port, Int_t size, Int_t tcpwindowsize = -1); Create a parallel socket. Connect to specified port # on the remote host.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Returns when connection has been accepted by remote side. Use IsValid(); to check the validity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TPSocket(const char* host, Int_t port, Int_t size, TSocket* sock); Create a parallel socket on a connection already opened via; TSocket sock.; This constructor is provided to optimize TNetFile opening when; instatiated via a call to TXNetFile.; Returns when connection has been accepted by remote side. Use IsValid(); to check the validity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TPSocket(TSocket*[] pSockets, Int_t size); Create a parallel socket. This ctor is called by TPServerSocket. ~TPSocket(); Cleanup the parallel socket. void Close(Option_t* opt = """"); Close a parallel socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). void Init(Int_t tcpwindowsize, TSocket* sock = 0); Create a parallel socket to the specified host. TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() ret",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:5740,Safety,timeout,timeout,5740,"operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Int_tTSocket::Reconnect(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRecv(TMessage*& mess); virtual Int_tRecv(Int_t& status, Int_t& kind); virtual Int_tRecv(char* mess, Int_t max); virtual Int_tRecv(char* mess, Int_t max, Int_t& kind); virtual Int_tRecvRaw(void* buffer, Int_t length, ESendRecvOptions opt); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTSocket::Select(Int_t interest = kRead, Long_t timeout = -1); virtual Int_tSend(const TMessage& mess); virtual Int_tSend(Int_t kind); virtual Int_tSend(Int_t status, Int_t kind); virtual Int_tSend(const char* mess, Int_t kind = kMESS_STRING); virtual Int_tTSocket::SendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); virtual Int_tSendRaw(const void* buffer, Int_t length, ESendRecvOptions opt); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tSetOption(ESockOptions opt, Int_t val); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSe",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:3693,Security,Hash,Hash,3693,"GetDtorOnly(); Int_tGetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() const; TTimeStampTSocket::GetLastUsage(); virtual TInetAddressGetLocalInetAddress(); virtual Int_tTSocket::GetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tGetOption(ESockOptions opt, Int_t& val); Int_tTSocket::GetPort() const; Int_tTSocket::GetRemoteProtocol() const; TSecContext*TSocket::GetSecContext() const; const char*TSocket::GetService() const; Int_tTSocket::GetServType() const; Int_tGetSize() const; static ULong64_tTSocket::GetSocketBytesRecv(); static ULong64_tTSocket::GetSocketBytesSent(); Int_tTSocket::GetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSocket::GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObj",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:8078,Security,Authenticat,Authenticate,8078,"UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSocket::Touch(); TPSocket(TInetAddress address, const char* service, Int_t size, Int_t tcpwindowsize = -1); TPSocket(TInetAddress address, Int_t port, Int_t size, Int_t tcpwindowsize = -1); TPSocket(const char* host, const char* service, Int_t size, Int_t tcpwindowsize = -1); TPSocket(const char* host, Int_t port, Int_t size, Int_t tcpwindowsize = -1); TPSocket(const char* host, Int_t port, Int_t size, TSocket* sock); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. Bool_tTSocket::Authenticate(const char* user); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); Bool_tTSocket::RecvProcessIDs(TMessage* mess); Bool_tTSocket::RecvStreamerInfos(TMessage* mess); voidTSocket::SendProcessIDs(const TMessage& mess); voidTSocket::SendStreamerInfos(const TMessage& mess); voidTSocket::SetDescriptor(Int_t desc). private:. virtual Option_t*GetOption() const; voidInit(Int_t tcpwindowsize, TSocket* sock = 0); voidoperator=(const TPSocket&); TPSocket(const TPSocket&); TPSocket(TSocket*[] pSockets, Int_t size). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TSocket::EStatusBitsTSocket::kBrokenConn; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TSocket::EStatusBitsTSocket::kIsUnix; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:10422,Security,Authenticat,Authenticate,10422,"TSocket::kPROOFD; static TSocket::EServiceTypeTSocket::kROOTD; static TSocket::EInterestTSocket::kRead; static TSocket::EServiceTypeTSocket::kSOCKD; static TObject::(anonymous)TObject::kSingleKey; static TSocket::EInterestTSocket::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. Int_t*fReadBytesLeftbytes left to read for specified socket; TMonitor*fReadMonitormonitor read from parallel sockets; char**fReadPtrpointer to read buffer for specified socket; Int_tfSizenumber of parallel sockets; TSocket**fSocketsarray of parallel sockets; Int_t*fWriteBytesLeftbytes left to write for specified socket; TMonitor*fWr",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:10820,Security,authenticat,authentication,10820,"TSocket::kPROOFD; static TSocket::EServiceTypeTSocket::kROOTD; static TSocket::EInterestTSocket::kRead; static TSocket::EServiceTypeTSocket::kSOCKD; static TObject::(anonymous)TObject::kSingleKey; static TSocket::EInterestTSocket::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. Int_t*fReadBytesLeftbytes left to read for specified socket; TMonitor*fReadMonitormonitor read from parallel sockets; char**fReadPtrpointer to read buffer for specified socket; Int_tfSizenumber of parallel sockets; TSocket**fSocketsarray of parallel sockets; Int_t*fWriteBytesLeftbytes left to write for specified socket; TMonitor*fWr",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:7261,Testability,Test,TestBit,7261," buffer, Int_t length, ESendRecvOptions opt); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tSetOption(ESockOptions opt, Int_t val); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSecContext* ctx); voidTSocket::SetService(const char* service); voidTSocket::SetServType(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidTSocket::SetUrl(const char* url); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSocket::Touch(); TPSocket(TInetAddress address, const char* service, Int_t size, Int_t tcpwindowsize = -1); TPSocket(TInetAddress address, Int_t port, Int_t size, Int_t tcpwindowsize = -1); TPSocket(const char* host, const char* service, Int_t size, Int_t tcpwindowsize = -1); TPSocket(const char* host, Int_t port, Int_t size, Int_t tcpwindowsize = -1); TPSocket(const char* host, Int_t port, Int_t size, TSocket* sock); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:7300,Testability,Test,TestBits,7300," buffer, Int_t length, ESendRecvOptions opt); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tSetOption(ESockOptions opt, Int_t val); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSecContext* ctx); voidTSocket::SetService(const char* service); voidTSocket::SetServType(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidTSocket::SetUrl(const char* url); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSocket::Touch(); TPSocket(TInetAddress address, const char* service, Int_t size, Int_t tcpwindowsize = -1); TPSocket(TInetAddress address, Int_t port, Int_t size, Int_t tcpwindowsize = -1); TPSocket(const char* host, const char* service, Int_t size, Int_t tcpwindowsize = -1); TPSocket(const char* host, Int_t port, Int_t size, Int_t tcpwindowsize = -1); TPSocket(const char* host, Int_t port, Int_t size, TSocket* sock); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPSocket.html:919,Usability,Clear,Clear,919," virtual~TPSocket(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* param",MatchSource.WIKI,root/html604/TPSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPSocket.html
https://root.cern/root/html604/TPyArg.html:277,Integrability,wrap,wrapper,277,". TPyArg. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » BINDINGS; » PYROOT; » TPyArg. class TPyArg. Generic wrapper for arguments. Transport class for bringing C++ values and objects from Cling to Python. It; provides, from the selected constructor, the proper conversion to a PyObject.; In principle, there should be no need to use this class directly: it relies; on implicit conversions. Function Members (Methods); public:. virtual~TPyArg(); static voidCallConstructor(PyObject*& pyself, PyObject* pyclass); static voidCallConstructor(PyObject*& pyself, PyObject* pyclass, const vector<TPyArg>& args); static PyObject*CallMethod(PyObject* pymeth, const vector<TPyArg>& args); static TClass*Class(); virtual TClass*IsA() const; PyObject*operator _object *() const; TPyArg&operator=(const TPyArg&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPyArg(PyObject*); TPyArg(Int_t); TPyArg(Long_t); TPyArg(Double_t); TPyArg(const char*); TPyArg(const TPyArg&). Data Members; private:. PyObject*fPyObject! converted C++ value as python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void CallConstructor(PyObject*& pyself, PyObject* pyclass, const vector<TPyArg>& args). PyObject* CallMethod(PyObject* pymeth, const vector<TPyArg>& args). TPyArg(PyObject* ); Construct a TPyArg from a python object. TPyArg(Int_t ); Construct a TPyArg from an integer value. TPyArg(Long_t ); Construct a TPyArg from an integer value. TPyArg(Double_t ); Construct a TPyArg from a double value. TPyArg(const char* ); Construct a TPyArg from a C-string. TPyArg(const TPyArg& ); Copy constructor. TPyArg& operator=(const TPyArg& ); Assignment operator. ~TPyArg(); Done with held PyObject. void CallConstr",MatchSource.WIKI,root/html604/TPyArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyArg.html
https://root.cern/root/html604/TPyArg.html:1324,Modifiability,Inherit,Inheritance,1324," values and objects from Cling to Python. It; provides, from the selected constructor, the proper conversion to a PyObject.; In principle, there should be no need to use this class directly: it relies; on implicit conversions. Function Members (Methods); public:. virtual~TPyArg(); static voidCallConstructor(PyObject*& pyself, PyObject* pyclass); static voidCallConstructor(PyObject*& pyself, PyObject* pyclass, const vector<TPyArg>& args); static PyObject*CallMethod(PyObject* pymeth, const vector<TPyArg>& args); static TClass*Class(); virtual TClass*IsA() const; PyObject*operator _object *() const; TPyArg&operator=(const TPyArg&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPyArg(PyObject*); TPyArg(Int_t); TPyArg(Long_t); TPyArg(Double_t); TPyArg(const char*); TPyArg(const TPyArg&). Data Members; private:. PyObject*fPyObject! converted C++ value as python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void CallConstructor(PyObject*& pyself, PyObject* pyclass, const vector<TPyArg>& args). PyObject* CallMethod(PyObject* pymeth, const vector<TPyArg>& args). TPyArg(PyObject* ); Construct a TPyArg from a python object. TPyArg(Int_t ); Construct a TPyArg from an integer value. TPyArg(Long_t ); Construct a TPyArg from an integer value. TPyArg(Double_t ); Construct a TPyArg from a double value. TPyArg(const char* ); Construct a TPyArg from a C-string. TPyArg(const TPyArg& ); Copy constructor. TPyArg& operator=(const TPyArg& ); Assignment operator. ~TPyArg(); Done with held PyObject. void CallConstructor(PyObject*& pyself, PyObject* pyclass, const vector<TPyArg>& args); constructor and generic dispatch. » Last changed: root/pyroot:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPyArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyArg.html
https://root.cern/root/html604/TPyArg.html:1337,Modifiability,Inherit,Inherited,1337," values and objects from Cling to Python. It; provides, from the selected constructor, the proper conversion to a PyObject.; In principle, there should be no need to use this class directly: it relies; on implicit conversions. Function Members (Methods); public:. virtual~TPyArg(); static voidCallConstructor(PyObject*& pyself, PyObject* pyclass); static voidCallConstructor(PyObject*& pyself, PyObject* pyclass, const vector<TPyArg>& args); static PyObject*CallMethod(PyObject* pymeth, const vector<TPyArg>& args); static TClass*Class(); virtual TClass*IsA() const; PyObject*operator _object *() const; TPyArg&operator=(const TPyArg&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPyArg(PyObject*); TPyArg(Int_t); TPyArg(Long_t); TPyArg(Double_t); TPyArg(const char*); TPyArg(const TPyArg&). Data Members; private:. PyObject*fPyObject! converted C++ value as python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void CallConstructor(PyObject*& pyself, PyObject* pyclass, const vector<TPyArg>& args). PyObject* CallMethod(PyObject* pymeth, const vector<TPyArg>& args). TPyArg(PyObject* ); Construct a TPyArg from a python object. TPyArg(Int_t ); Construct a TPyArg from an integer value. TPyArg(Long_t ); Construct a TPyArg from an integer value. TPyArg(Double_t ); Construct a TPyArg from a double value. TPyArg(const char* ); Construct a TPyArg from a C-string. TPyArg(const TPyArg& ); Copy constructor. TPyArg& operator=(const TPyArg& ); Assignment operator. ~TPyArg(); Done with held PyObject. void CallConstructor(PyObject*& pyself, PyObject* pyclass, const vector<TPyArg>& args); constructor and generic dispatch. » Last changed: root/pyroot:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPyArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyArg.html
https://root.cern/root/html604/TPyDispatcher.html:2210,Availability,mask,mask,2210,"h(char* param); PyObject*Dispatch(Int_t param); PyObject*Dispatch(ULong_t param); PyObject*Dispatch(Event_t* event); PyObject*Dispatch(TEveElement* el); PyObject*Dispatch(TEveTrack* et); PyObject*Dispatch(TEveWindow* window); PyObject*Dispatch(TGFrame* frame); PyObject*Dispatch(TGListTreeItem* entry); PyObject*Dispatch(TGLViewerBase* viewer); PyObject*Dispatch(TGLPhysicalShape* shape); PyObject*Dispatch(TGMdiFrame* frame); PyObject*Dispatch(TGShutterItem* item); PyObject*Dispatch(TGVFileSplitter* frame); PyObject*Dispatch(TList* objs); PyObject*Dispatch(TObject* obj); PyObject*Dispatch(TSocket* sock); PyObject*Dispatch(TVirtualPad* pad); PyObject*Dispatch(TProofProgressInfo* pi); PyObject*Dispatch(TSlave* slave); PyObject*Dispatch(const char* text, Int_t len); PyObject*Dispatch(Int_t x, Int_t y); PyObject*Dispatch(Event_t* event, ULong_t wid); PyObject*Dispatch(TEveDigitSet* qs, Int_t idx); PyObject*Dispatch(TGFrame* frame, Int_t btn); PyObject*Dispatch(TGListTreeItem* entry, UInt_t mask); PyObject*Dispatch(TGListTreeItem* entry, Int_t btn); PyObject*Dispatch(TGLVEntry* entry, Int_t btn); PyObject*Dispatch(TObject* obj, Bool_t check); PyObject*Dispatch(TObject* obj, UInt_t state); PyObject*Dispatch(TGListTreeItem* item, TDNDData* data); PyObject*Dispatch(const char* name, const TList* attr); PyObject*Dispatch(const char* msg, Bool_t all); PyObject*Dispatch(Long64_t total, Long64_t processed); PyObject*Dispatch(TSlave* slave, TProofProgressInfo* pi); PyObject*Dispatch(TGFrame* frame, UInt_t keysym, UInt_t mask); PyObject*Dispatch(TGListTreeItem* entry, UInt_t keysym, UInt_t mask); PyObject*Dispatch(TGLPhysicalShape* shape, UInt_t u1, UInt_t u2); PyObject*Dispatch(TObject* obj, UInt_t button, UInt_t state); PyObject*Dispatch(TPad* selpad, TObject* selected, Int_t event); PyObject*Dispatch(TVirtualPad* pad, TObject* obj, Int_t event); PyObject*Dispatch(TSlave* slave, Long64_t total, Long64_t processed); PyObject*Dispatch(TGFrame* frame, Int_t btn, Int_t x, Int_t y); PyO",MatchSource.WIKI,root/html604/TPyDispatcher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyDispatcher.html
https://root.cern/root/html604/TPyDispatcher.html:2742,Availability,mask,mask,2742,"t* objs); PyObject*Dispatch(TObject* obj); PyObject*Dispatch(TSocket* sock); PyObject*Dispatch(TVirtualPad* pad); PyObject*Dispatch(TProofProgressInfo* pi); PyObject*Dispatch(TSlave* slave); PyObject*Dispatch(const char* text, Int_t len); PyObject*Dispatch(Int_t x, Int_t y); PyObject*Dispatch(Event_t* event, ULong_t wid); PyObject*Dispatch(TEveDigitSet* qs, Int_t idx); PyObject*Dispatch(TGFrame* frame, Int_t btn); PyObject*Dispatch(TGListTreeItem* entry, UInt_t mask); PyObject*Dispatch(TGListTreeItem* entry, Int_t btn); PyObject*Dispatch(TGLVEntry* entry, Int_t btn); PyObject*Dispatch(TObject* obj, Bool_t check); PyObject*Dispatch(TObject* obj, UInt_t state); PyObject*Dispatch(TGListTreeItem* item, TDNDData* data); PyObject*Dispatch(const char* name, const TList* attr); PyObject*Dispatch(const char* msg, Bool_t all); PyObject*Dispatch(Long64_t total, Long64_t processed); PyObject*Dispatch(TSlave* slave, TProofProgressInfo* pi); PyObject*Dispatch(TGFrame* frame, UInt_t keysym, UInt_t mask); PyObject*Dispatch(TGListTreeItem* entry, UInt_t keysym, UInt_t mask); PyObject*Dispatch(TGLPhysicalShape* shape, UInt_t u1, UInt_t u2); PyObject*Dispatch(TObject* obj, UInt_t button, UInt_t state); PyObject*Dispatch(TPad* selpad, TObject* selected, Int_t event); PyObject*Dispatch(TVirtualPad* pad, TObject* obj, Int_t event); PyObject*Dispatch(TSlave* slave, Long64_t total, Long64_t processed); PyObject*Dispatch(TGFrame* frame, Int_t btn, Int_t x, Int_t y); PyObject*Dispatch(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); PyObject*Dispatch(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); PyObject*Dispatch(Int_t event, Int_t x, Int_t y, TObject* selected); PyObject*Dispatch(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); PyObject*Dispatch(const char* msg, Bool_t status, Int_t done, Int_t total); PyObject*Dispatch(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); PyObject*Dispatch(Long64_t total, Lon",MatchSource.WIKI,root/html604/TPyDispatcher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyDispatcher.html
https://root.cern/root/html604/TPyDispatcher.html:2812,Availability,mask,mask,2812,"sock); PyObject*Dispatch(TVirtualPad* pad); PyObject*Dispatch(TProofProgressInfo* pi); PyObject*Dispatch(TSlave* slave); PyObject*Dispatch(const char* text, Int_t len); PyObject*Dispatch(Int_t x, Int_t y); PyObject*Dispatch(Event_t* event, ULong_t wid); PyObject*Dispatch(TEveDigitSet* qs, Int_t idx); PyObject*Dispatch(TGFrame* frame, Int_t btn); PyObject*Dispatch(TGListTreeItem* entry, UInt_t mask); PyObject*Dispatch(TGListTreeItem* entry, Int_t btn); PyObject*Dispatch(TGLVEntry* entry, Int_t btn); PyObject*Dispatch(TObject* obj, Bool_t check); PyObject*Dispatch(TObject* obj, UInt_t state); PyObject*Dispatch(TGListTreeItem* item, TDNDData* data); PyObject*Dispatch(const char* name, const TList* attr); PyObject*Dispatch(const char* msg, Bool_t all); PyObject*Dispatch(Long64_t total, Long64_t processed); PyObject*Dispatch(TSlave* slave, TProofProgressInfo* pi); PyObject*Dispatch(TGFrame* frame, UInt_t keysym, UInt_t mask); PyObject*Dispatch(TGListTreeItem* entry, UInt_t keysym, UInt_t mask); PyObject*Dispatch(TGLPhysicalShape* shape, UInt_t u1, UInt_t u2); PyObject*Dispatch(TObject* obj, UInt_t button, UInt_t state); PyObject*Dispatch(TPad* selpad, TObject* selected, Int_t event); PyObject*Dispatch(TVirtualPad* pad, TObject* obj, Int_t event); PyObject*Dispatch(TSlave* slave, Long64_t total, Long64_t processed); PyObject*Dispatch(TGFrame* frame, Int_t btn, Int_t x, Int_t y); PyObject*Dispatch(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); PyObject*Dispatch(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); PyObject*Dispatch(Int_t event, Int_t x, Int_t y, TObject* selected); PyObject*Dispatch(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); PyObject*Dispatch(const char* msg, Bool_t status, Int_t done, Int_t total); PyObject*Dispatch(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); PyObject*Dispatch(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTim",MatchSource.WIKI,root/html604/TPyDispatcher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyDispatcher.html
https://root.cern/root/html604/TPyDispatcher.html:4295,Availability,Error,Error,4295,"(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); PyObject*Dispatch(Int_t event, Int_t x, Int_t y, TObject* selected); PyObject*Dispatch(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); PyObject*Dispatch(const char* msg, Bool_t status, Int_t done, Int_t total); PyObject*Dispatch(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); PyObject*Dispatch(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); PyObject*DispatchVA(const char* format = 0); PyObject*DispatchVA1(const char* clname, void* obj, const char* format); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtua",MatchSource.WIKI,root/html604/TPyDispatcher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyDispatcher.html
https://root.cern/root/html604/TPyDispatcher.html:4424,Availability,error,error,4424,"spatch(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); PyObject*Dispatch(const char* msg, Bool_t status, Int_t done, Int_t total); PyObject*Dispatch(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); PyObject*Dispatch(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); PyObject*DispatchVA(const char* format = 0); PyObject*DispatchVA1(const char* clname, void* obj, const char* format); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) con",MatchSource.WIKI,root/html604/TPyDispatcher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyDispatcher.html
https://root.cern/root/html604/TPyDispatcher.html:4508,Availability,error,error,4508,"st char* msg, Bool_t status, Int_t done, Int_t total); PyObject*Dispatch(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); PyObject*Dispatch(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); PyObject*DispatchVA(const char* format = 0); PyObject*DispatchVA1(const char* clname, void* obj, const char* format); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root/html604/TPyDispatcher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyDispatcher.html
https://root.cern/root/html604/TPyDispatcher.html:11952,Availability,mask,mask,11952,"""i"", param ); }. PyObject* Dispatch(Int_t x, Int_t y); { return DispatchVA( ""ii"", x, y ); }. PyObject* Dispatch(ULong_t param); ULong_t also for Handle_t (and Window_t, etc. ... ). { return DispatchVA( ""k"", param ); }. PyObject* Dispatch(Event_t* event); { return DispatchVA1( ""Event_t"", event, 0 ); }. PyObject* Dispatch(Event_t* event, ULong_t wid); { return DispatchVA1( ""Event_t"", event, ""k"", wid ); }. PyObject* Dispatch(TEveDigitSet* qs, Int_t idx); { return DispatchVA1( ""TEveDigitSet"", qs, ""i"", idx ); }. PyObject* Dispatch(TEveElement* el); { return DispatchVA1( ""TEveElement"", el, 0 ); }. PyObject* Dispatch(TEveTrack* et); { return DispatchVA1( ""TEveTrack"", et, 0 ); }. PyObject* Dispatch(TEveWindow* window); { return DispatchVA1( ""TEveWindow"", window, 0 ); }. PyObject* Dispatch(TGFrame* frame); { return DispatchVA1( ""TGFrame"", frame, 0 ); }. PyObject* Dispatch(TGFrame* frame, Int_t btn). PyObject* Dispatch(TGFrame* frame, Int_t btn, Int_t x, Int_t y). PyObject* Dispatch(TGFrame* frame, UInt_t keysym, UInt_t mask). PyObject* Dispatch(TGListTreeItem* entry); { return DispatchVA1( ""TGListTreeItem"", entry, 0 ); }. PyObject* Dispatch(TGListTreeItem* entry, UInt_t mask). PyObject* Dispatch(TGListTreeItem* entry, UInt_t keysym, UInt_t mask). PyObject* Dispatch(TGListTreeItem* entry, Int_t btn). PyObject* Dispatch(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y). PyObject* Dispatch(TGLVEntry* entry, Int_t btn). PyObject* Dispatch(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y). PyObject* Dispatch(TGLViewerBase* viewer). PyObject* Dispatch(TGLPhysicalShape* shape). PyObject* Dispatch(TGLPhysicalShape* shape, UInt_t u1, UInt_t u2). PyObject* Dispatch(TGMdiFrame* frame); { return DispatchVA1( ""TGMdiFrame"", frame, 0 ); }. PyObject* Dispatch(TGShutterItem* item); { return DispatchVA1( ""TGShutterItem"", item, 0 ); }. PyObject* Dispatch(TGVFileSplitter* frame); { return DispatchVA1( ""TGVFileSplitter"", frame, 0 ); }. PyObject* Dispatch(TList* objs); { return DispatchVA1( ""TList",MatchSource.WIKI,root/html604/TPyDispatcher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyDispatcher.html
https://root.cern/root/html604/TPyDispatcher.html:12106,Availability,mask,mask,12106," Window_t, etc. ... ). { return DispatchVA( ""k"", param ); }. PyObject* Dispatch(Event_t* event); { return DispatchVA1( ""Event_t"", event, 0 ); }. PyObject* Dispatch(Event_t* event, ULong_t wid); { return DispatchVA1( ""Event_t"", event, ""k"", wid ); }. PyObject* Dispatch(TEveDigitSet* qs, Int_t idx); { return DispatchVA1( ""TEveDigitSet"", qs, ""i"", idx ); }. PyObject* Dispatch(TEveElement* el); { return DispatchVA1( ""TEveElement"", el, 0 ); }. PyObject* Dispatch(TEveTrack* et); { return DispatchVA1( ""TEveTrack"", et, 0 ); }. PyObject* Dispatch(TEveWindow* window); { return DispatchVA1( ""TEveWindow"", window, 0 ); }. PyObject* Dispatch(TGFrame* frame); { return DispatchVA1( ""TGFrame"", frame, 0 ); }. PyObject* Dispatch(TGFrame* frame, Int_t btn). PyObject* Dispatch(TGFrame* frame, Int_t btn, Int_t x, Int_t y). PyObject* Dispatch(TGFrame* frame, UInt_t keysym, UInt_t mask). PyObject* Dispatch(TGListTreeItem* entry); { return DispatchVA1( ""TGListTreeItem"", entry, 0 ); }. PyObject* Dispatch(TGListTreeItem* entry, UInt_t mask). PyObject* Dispatch(TGListTreeItem* entry, UInt_t keysym, UInt_t mask). PyObject* Dispatch(TGListTreeItem* entry, Int_t btn). PyObject* Dispatch(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y). PyObject* Dispatch(TGLVEntry* entry, Int_t btn). PyObject* Dispatch(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y). PyObject* Dispatch(TGLViewerBase* viewer). PyObject* Dispatch(TGLPhysicalShape* shape). PyObject* Dispatch(TGLPhysicalShape* shape, UInt_t u1, UInt_t u2). PyObject* Dispatch(TGMdiFrame* frame); { return DispatchVA1( ""TGMdiFrame"", frame, 0 ); }. PyObject* Dispatch(TGShutterItem* item); { return DispatchVA1( ""TGShutterItem"", item, 0 ); }. PyObject* Dispatch(TGVFileSplitter* frame); { return DispatchVA1( ""TGVFileSplitter"", frame, 0 ); }. PyObject* Dispatch(TList* objs); { return DispatchVA1( ""TList"", objs, 0 ); }. PyObject* Dispatch(TObject* obj); { return DispatchVA1( ""TObject"", obj, 0 ); }. PyObject* Dispatch(TObject* obj, Bool_t check). PyObject* Dis",MatchSource.WIKI,root/html604/TPyDispatcher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyDispatcher.html
https://root.cern/root/html604/TPyDispatcher.html:12177,Availability,mask,mask,12177,"Object* Dispatch(Event_t* event); { return DispatchVA1( ""Event_t"", event, 0 ); }. PyObject* Dispatch(Event_t* event, ULong_t wid); { return DispatchVA1( ""Event_t"", event, ""k"", wid ); }. PyObject* Dispatch(TEveDigitSet* qs, Int_t idx); { return DispatchVA1( ""TEveDigitSet"", qs, ""i"", idx ); }. PyObject* Dispatch(TEveElement* el); { return DispatchVA1( ""TEveElement"", el, 0 ); }. PyObject* Dispatch(TEveTrack* et); { return DispatchVA1( ""TEveTrack"", et, 0 ); }. PyObject* Dispatch(TEveWindow* window); { return DispatchVA1( ""TEveWindow"", window, 0 ); }. PyObject* Dispatch(TGFrame* frame); { return DispatchVA1( ""TGFrame"", frame, 0 ); }. PyObject* Dispatch(TGFrame* frame, Int_t btn). PyObject* Dispatch(TGFrame* frame, Int_t btn, Int_t x, Int_t y). PyObject* Dispatch(TGFrame* frame, UInt_t keysym, UInt_t mask). PyObject* Dispatch(TGListTreeItem* entry); { return DispatchVA1( ""TGListTreeItem"", entry, 0 ); }. PyObject* Dispatch(TGListTreeItem* entry, UInt_t mask). PyObject* Dispatch(TGListTreeItem* entry, UInt_t keysym, UInt_t mask). PyObject* Dispatch(TGListTreeItem* entry, Int_t btn). PyObject* Dispatch(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y). PyObject* Dispatch(TGLVEntry* entry, Int_t btn). PyObject* Dispatch(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y). PyObject* Dispatch(TGLViewerBase* viewer). PyObject* Dispatch(TGLPhysicalShape* shape). PyObject* Dispatch(TGLPhysicalShape* shape, UInt_t u1, UInt_t u2). PyObject* Dispatch(TGMdiFrame* frame); { return DispatchVA1( ""TGMdiFrame"", frame, 0 ); }. PyObject* Dispatch(TGShutterItem* item); { return DispatchVA1( ""TGShutterItem"", item, 0 ); }. PyObject* Dispatch(TGVFileSplitter* frame); { return DispatchVA1( ""TGVFileSplitter"", frame, 0 ); }. PyObject* Dispatch(TList* objs); { return DispatchVA1( ""TList"", objs, 0 ); }. PyObject* Dispatch(TObject* obj); { return DispatchVA1( ""TObject"", obj, 0 ); }. PyObject* Dispatch(TObject* obj, Bool_t check). PyObject* Dispatch(TObject* obj, UInt_t state). PyObject* Dispatch(TObject* o",MatchSource.WIKI,root/html604/TPyDispatcher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyDispatcher.html
https://root.cern/root/html604/TPyDispatcher.html:416,Deployability,install,install,416,". TPyDispatcher. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » BINDINGS; » PYROOT; » TPyDispatcher. class TPyDispatcher: public TObject. Python callback dispatcher. The TPyDispatcher class acts as a functor that can be used for TFn's and GUIs; to install callbacks from CINT. Function Members (Methods); public:. virtual~TPyDispatcher(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; PyObject*Dispatch(); PyObject*Dispatch(const char* param); PyObject*Dispatch(Double_t param); PyObject*Dispatch(Long_t param); PyObject*Dispatch(Long64_t param); PyObject*Dispatch(Bool_t param); PyObject*Dispatch(char* param); PyObject*Dispatch(Int_t param); PyObject*Dispatch(ULong_t param); PyObject*Dispatch(Event_t* event); PyObject*Dispatch(TEveElement* el); PyObject*Dispatch(TEveTrack* et); PyObject*Dispatch(TEveWindow* window); PyObject*Dispatch(TGFrame* frame); PyObject*Dispatch(TGListTreeItem* entry); PyObject*Dispatch(TGLViewerBase* viewer); PyObject*Dispatch(TGLPhysicalShape* shape); PyObject*Dispatch(TGMdiFrame* frame); PyObject*Dispatch(TGShutterItem* item); PyObject*Dispatch(TGVFileSplitter* frame); PyObject*Dispatch(TList* objs); PyObject*Dispatch(TObject* obj); PyObject*Dispatch(TSocket* sock); PyObject*Dispatch(TVirtualPad* pad); PyObject*Dispatch(TProofProgressInfo* pi); PyObject*Dispatch(TSlave* slave); PyObject*Dispatch(const char* text, Int_t len); PyObject*Dispatch(",MatchSource.WIKI,root/html604/TPyDispatcher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyDispatcher.html
https://root.cern/root/html604/TPyDispatcher.html:5388,Modifiability,Inherit,InheritsFrom,5388,"d, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TPyDispatcher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyDispatcher.html
https://root.cern/root/html604/TPyDispatcher.html:5454,Modifiability,Inherit,InheritsFrom,5454,"cute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TPyDispatcher&operator=(const TPyDispatcher&); virt",MatchSource.WIKI,root/html604/TPyDispatcher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyDispatcher.html
https://root.cern/root/html604/TPyDispatcher.html:8806,Modifiability,Inherit,Inheritance,8806,"onst. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. PyObject*fCallable! callable object to be dispatched. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyDispatcher(PyObject* callable); Construct a TPyDispatcher from a callable python object. Applies python; object reference counting. TPyDispatcher(const TPyDispatcher& ); Copy constructor. Applies python object reference counting. TPyDispatcher& operator=(const TPyDispatcher& ); Assignment operator. Applies python object reference counting. ~TPyDispatcher(); Destructor. Reference counting for the held python object is in effect. PyObject* DispatchVA( const char* format, ... ); Dispatch the arguments to the held callable python object, using format to; interpret the types of the arguments. Note that format is in python style,; not in C printf style. See: https://docs.python.org/2/c-api/arg.html . PyObject* DispatchVA1( const char* clname, void* obj, const char* format, ... ). PyObject* Dispatch(TPad* selpad, TObject* selected, Int_t event). PyObject* Dispatch(Int_t event, Int_t x, Int_t y, TObject* selected). PyObject* Dispatch(TVirtu",MatchSource.WIKI,root/html604/TPyDispatcher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyDispatcher.html
https://root.cern/root/html604/TPyDispatcher.html:8819,Modifiability,Inherit,Inherited,8819,"onst. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. PyObject*fCallable! callable object to be dispatched. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyDispatcher(PyObject* callable); Construct a TPyDispatcher from a callable python object. Applies python; object reference counting. TPyDispatcher(const TPyDispatcher& ); Copy constructor. Applies python object reference counting. TPyDispatcher& operator=(const TPyDispatcher& ); Assignment operator. Applies python object reference counting. ~TPyDispatcher(); Destructor. Reference counting for the held python object is in effect. PyObject* DispatchVA( const char* format, ... ); Dispatch the arguments to the held callable python object, using format to; interpret the types of the arguments. Note that format is in python style,; not in C printf style. See: https://docs.python.org/2/c-api/arg.html . PyObject* DispatchVA1( const char* clname, void* obj, const char* format, ... ). PyObject* Dispatch(TPad* selpad, TObject* selected, Int_t event). PyObject* Dispatch(Int_t event, Int_t x, Int_t y, TObject* selected). PyObject* Dispatch(TVirtu",MatchSource.WIKI,root/html604/TPyDispatcher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyDispatcher.html
https://root.cern/root/html604/TPyDispatcher.html:5278,Security,Hash,Hash,5278,"l voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TPyDispatcher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyDispatcher.html
https://root.cern/root/html604/TPyDispatcher.html:7402,Testability,Test,TestBit,7402,"_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TPyDispatcher&operator=(const TPyDispatcher&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TPyDispatcher(PyObject* callable); TPyDispatcher(const TPyDispatcher&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TPyDispatcher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyDispatcher.html
https://root.cern/root/html604/TPyDispatcher.html:7441,Testability,Test,TestBits,7441,"_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TPyDispatcher&operator=(const TPyDispatcher&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TPyDispatcher(PyObject* callable); TPyDispatcher(const TPyDispatcher&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TPyDispatcher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyDispatcher.html
https://root.cern/root/html604/TPyDispatcher.html:750,Usability,Clear,Clear,750," virtual~TPyDispatcher(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; PyObject*Dispatch(); PyObject*Dispatch(const char* param); PyObject*Dispatch(Double_t param); PyObject*Dispatch(Long_t param); PyObject*Dispatch(Long64_t param); PyObject*Dispatch(Bool_t param); PyObject*Dispatch(char* param); PyObject*Dispatch(Int_t param); PyObject*Dispatch(ULong_t param); PyObject*Dispatch(Event_t* event); PyObject*Dispatch(TEveElement* el); PyObject*Dispatch(TEveTrack* et); PyObject*Dispatch(TEveWindow* window); PyObject*Dispatch(TGFrame* frame); PyObject*Dispatch(TGListTreeItem* entry); PyObject*Dispatch(TGLViewerBase* viewer); PyObject*Dispatch(TGLPhysicalShape* shape); PyObject*Dispatch(TGMdiFrame* frame); PyObject*Dispatch(TGShutterItem* item); PyObject*Dispatch(TGVFileSplitter* frame); PyObject*Dispatch(TList* objs); PyObject*Dispatch(TObject* obj); PyObject*Dispatch(TSocket* sock); PyObject*Dispatch(TVirtualPad* pad); PyObject*Dispatch(TProofProgressInfo* pi); PyObject*Dispatch(TSlave* slave); PyObject*Dispatch(const char* text, Int_t len); PyObject*Dispatch(",MatchSource.WIKI,root/html604/TPyDispatcher.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyDispatcher.html
https://root.cern/root/html604/TPyMultiGenFunction.html:357,Integrability,wrap,wrapper,357,". TPyMultiGenFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » BINDINGS; » PYROOT; » TPyMultiGenFunction. class TPyMultiGenFunction: public ROOT::Math::IBaseFunctionMultiDim. Python wrapper for Fit functions. Function Members (Methods); public:. virtual~TPyMultiGenFunction(); static TClass*Class(); virtual ROOT::Math::IBaseFunctionMultiDim*Clone() const; virtual doubleDoEval(const double* x) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPyMultiGenFunction(PyObject* self = 0). private:. TPyMultiGenFunction&operator=(const TPyMultiGenFunction&); TPyMultiGenFunction(const TPyMultiGenFunction& src). Data Members; private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyMultiGenFunction(PyObject* self = 0); Construct a TPyMultiGenFunction derived with <self> as the underlying. ~TPyMultiGenFunction(); Destructor. Only deref if still holding on to Py_None (circular otherwise). unsigned int NDim() const; Simply forward the call to python self. double DoEval(const double* x) const; Simply forward the call to python self. TPyMultiGenFunction(PyObject* self = 0); ctor/dtor, and assignment. ROOT::Math::IBaseFunctionMultiDim* Clone() const; Math::IMultiGenFunction implementation. { return new TPyMultiGenFunction( fPySelf ); }. TPyMultiGenFunction& operator=(c",MatchSource.WIKI,root/html604/TPyMultiGenFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyMultiGenFunction.html
https://root.cern/root/html604/TPyMultiGenFunction.html:1329,Modifiability,Inherit,Inheritance,1329," class TPyMultiGenFunction: public ROOT::Math::IBaseFunctionMultiDim. Python wrapper for Fit functions. Function Members (Methods); public:. virtual~TPyMultiGenFunction(); static TClass*Class(); virtual ROOT::Math::IBaseFunctionMultiDim*Clone() const; virtual doubleDoEval(const double* x) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPyMultiGenFunction(PyObject* self = 0). private:. TPyMultiGenFunction&operator=(const TPyMultiGenFunction&); TPyMultiGenFunction(const TPyMultiGenFunction& src). Data Members; private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyMultiGenFunction(PyObject* self = 0); Construct a TPyMultiGenFunction derived with <self> as the underlying. ~TPyMultiGenFunction(); Destructor. Only deref if still holding on to Py_None (circular otherwise). unsigned int NDim() const; Simply forward the call to python self. double DoEval(const double* x) const; Simply forward the call to python self. TPyMultiGenFunction(PyObject* self = 0); ctor/dtor, and assignment. ROOT::Math::IBaseFunctionMultiDim* Clone() const; Math::IMultiGenFunction implementation. { return new TPyMultiGenFunction( fPySelf ); }. TPyMultiGenFunction& operator=(const TPyMultiGenFunction& ); { return *this; }. » Last changed: Tue Jun 2 16:31:14 2015 » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPyMultiGenFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyMultiGenFunction.html
https://root.cern/root/html604/TPyMultiGenFunction.html:1342,Modifiability,Inherit,Inherited,1342," class TPyMultiGenFunction: public ROOT::Math::IBaseFunctionMultiDim. Python wrapper for Fit functions. Function Members (Methods); public:. virtual~TPyMultiGenFunction(); static TClass*Class(); virtual ROOT::Math::IBaseFunctionMultiDim*Clone() const; virtual doubleDoEval(const double* x) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPyMultiGenFunction(PyObject* self = 0). private:. TPyMultiGenFunction&operator=(const TPyMultiGenFunction&); TPyMultiGenFunction(const TPyMultiGenFunction& src). Data Members; private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyMultiGenFunction(PyObject* self = 0); Construct a TPyMultiGenFunction derived with <self> as the underlying. ~TPyMultiGenFunction(); Destructor. Only deref if still holding on to Py_None (circular otherwise). unsigned int NDim() const; Simply forward the call to python self. double DoEval(const double* x) const; Simply forward the call to python self. TPyMultiGenFunction(PyObject* self = 0); ctor/dtor, and assignment. ROOT::Math::IBaseFunctionMultiDim* Clone() const; Math::IMultiGenFunction implementation. { return new TPyMultiGenFunction( fPySelf ); }. TPyMultiGenFunction& operator=(const TPyMultiGenFunction& ); { return *this; }. » Last changed: Tue Jun 2 16:31:14 2015 » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPyMultiGenFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyMultiGenFunction.html
https://root.cern/root/html604/TPyMultiGenFunction.html:1645,Usability,Simpl,Simply,1645," class TPyMultiGenFunction: public ROOT::Math::IBaseFunctionMultiDim. Python wrapper for Fit functions. Function Members (Methods); public:. virtual~TPyMultiGenFunction(); static TClass*Class(); virtual ROOT::Math::IBaseFunctionMultiDim*Clone() const; virtual doubleDoEval(const double* x) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPyMultiGenFunction(PyObject* self = 0). private:. TPyMultiGenFunction&operator=(const TPyMultiGenFunction&); TPyMultiGenFunction(const TPyMultiGenFunction& src). Data Members; private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyMultiGenFunction(PyObject* self = 0); Construct a TPyMultiGenFunction derived with <self> as the underlying. ~TPyMultiGenFunction(); Destructor. Only deref if still holding on to Py_None (circular otherwise). unsigned int NDim() const; Simply forward the call to python self. double DoEval(const double* x) const; Simply forward the call to python self. TPyMultiGenFunction(PyObject* self = 0); ctor/dtor, and assignment. ROOT::Math::IBaseFunctionMultiDim* Clone() const; Math::IMultiGenFunction implementation. { return new TPyMultiGenFunction( fPySelf ); }. TPyMultiGenFunction& operator=(const TPyMultiGenFunction& ); { return *this; }. » Last changed: Tue Jun 2 16:31:14 2015 » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPyMultiGenFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyMultiGenFunction.html
https://root.cern/root/html604/TPyMultiGenFunction.html:1723,Usability,Simpl,Simply,1723," class TPyMultiGenFunction: public ROOT::Math::IBaseFunctionMultiDim. Python wrapper for Fit functions. Function Members (Methods); public:. virtual~TPyMultiGenFunction(); static TClass*Class(); virtual ROOT::Math::IBaseFunctionMultiDim*Clone() const; virtual doubleDoEval(const double* x) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPyMultiGenFunction(PyObject* self = 0). private:. TPyMultiGenFunction&operator=(const TPyMultiGenFunction&); TPyMultiGenFunction(const TPyMultiGenFunction& src). Data Members; private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyMultiGenFunction(PyObject* self = 0); Construct a TPyMultiGenFunction derived with <self> as the underlying. ~TPyMultiGenFunction(); Destructor. Only deref if still holding on to Py_None (circular otherwise). unsigned int NDim() const; Simply forward the call to python self. double DoEval(const double* x) const; Simply forward the call to python self. TPyMultiGenFunction(PyObject* self = 0); ctor/dtor, and assignment. ROOT::Math::IBaseFunctionMultiDim* Clone() const; Math::IMultiGenFunction implementation. { return new TPyMultiGenFunction( fPySelf ); }. TPyMultiGenFunction& operator=(const TPyMultiGenFunction& ); { return *this; }. » Last changed: Tue Jun 2 16:31:14 2015 » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPyMultiGenFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyMultiGenFunction.html
https://root.cern/root/html604/TPyMultiGradFunction.html:364,Integrability,wrap,wrapper,364,". TPyMultiGradFunction. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » BINDINGS; » PYROOT; » TPyMultiGradFunction. class TPyMultiGradFunction: public ROOT::Math::IGradientFunctionMultiDim. Python wrapper for Fit functions. Function Members (Methods); public:. virtual~TPyMultiGradFunction(); static TClass*Class(); virtual ROOT::Math::IBaseFunctionMultiDim*Clone() const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPyMultiGradFunction(PyObject* self = 0). private:. TPyMultiGradFunction&operator=(const TPyMultiGradFunction&); TPyMultiGradFunction(const TPyMultiGradFunction& ",MatchSource.WIKI,root/html604/TPyMultiGradFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyMultiGradFunction.html
https://root.cern/root/html604/TPyMultiGradFunction.html:2085,Modifiability,Inherit,Inheritance,2085,"th::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPyMultiGradFunction(PyObject* self = 0). private:. TPyMultiGradFunction&operator=(const TPyMultiGradFunction&); TPyMultiGradFunction(const TPyMultiGradFunction& src). Data Members; private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyMultiGradFunction(PyObject* self = 0); Construct a TPyMultiGradFunction derived with <self> as the underlying. ~TPyMultiGradFunction(); Destructor. Only deref if still holding on to Py_None (circular otherwise). unsigned int NDim() const; Simply forward the call to python self. double DoEval(const double* x) const; Simply forward the call to python self. void Gradient(const double* x, double* grad) const; Simply forward the call to python self. void FdF(const double* x, double& f, double* df) const; Simply forward the call to python self. double DoDerivative(const double* x, unsigned int icoord) const; Simply forward the call to python self. ROOT::Math::IBaseFunctionMultiDim* Clone() const; Math::IMultiGenFunction implementation. { return new TPyMultiGenFunction( fPySelf ); }. TPyMultiGenFunction& operator=(const TPyMultiGradFunction& ); { return *this; }. TPyMultiGradFunction(PyObject* self = 0); ctor/dtor, and assignment. » Last c",MatchSource.WIKI,root/html604/TPyMultiGradFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyMultiGradFunction.html
https://root.cern/root/html604/TPyMultiGradFunction.html:2098,Modifiability,Inherit,Inherited,2098,"th::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPyMultiGradFunction(PyObject* self = 0). private:. TPyMultiGradFunction&operator=(const TPyMultiGradFunction&); TPyMultiGradFunction(const TPyMultiGradFunction& src). Data Members; private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyMultiGradFunction(PyObject* self = 0); Construct a TPyMultiGradFunction derived with <self> as the underlying. ~TPyMultiGradFunction(); Destructor. Only deref if still holding on to Py_None (circular otherwise). unsigned int NDim() const; Simply forward the call to python self. double DoEval(const double* x) const; Simply forward the call to python self. void Gradient(const double* x, double* grad) const; Simply forward the call to python self. void FdF(const double* x, double& f, double* df) const; Simply forward the call to python self. double DoDerivative(const double* x, unsigned int icoord) const; Simply forward the call to python self. ROOT::Math::IBaseFunctionMultiDim* Clone() const; Math::IMultiGenFunction implementation. { return new TPyMultiGenFunction( fPySelf ); }. TPyMultiGenFunction& operator=(const TPyMultiGradFunction& ); { return *this; }. TPyMultiGradFunction(PyObject* self = 0); ctor/dtor, and assignment. » Last c",MatchSource.WIKI,root/html604/TPyMultiGradFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyMultiGradFunction.html
https://root.cern/root/html604/TPyMultiGradFunction.html:2404,Usability,Simpl,Simply,2404,"ntFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPyMultiGradFunction(PyObject* self = 0). private:. TPyMultiGradFunction&operator=(const TPyMultiGradFunction&); TPyMultiGradFunction(const TPyMultiGradFunction& src). Data Members; private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyMultiGradFunction(PyObject* self = 0); Construct a TPyMultiGradFunction derived with <self> as the underlying. ~TPyMultiGradFunction(); Destructor. Only deref if still holding on to Py_None (circular otherwise). unsigned int NDim() const; Simply forward the call to python self. double DoEval(const double* x) const; Simply forward the call to python self. void Gradient(const double* x, double* grad) const; Simply forward the call to python self. void FdF(const double* x, double& f, double* df) const; Simply forward the call to python self. double DoDerivative(const double* x, unsigned int icoord) const; Simply forward the call to python self. ROOT::Math::IBaseFunctionMultiDim* Clone() const; Math::IMultiGenFunction implementation. { return new TPyMultiGenFunction( fPySelf ); }. TPyMultiGenFunction& operator=(const TPyMultiGradFunction& ); { return *this; }. TPyMultiGradFunction(PyObject* self = 0); ctor/dtor, and assignment. » Last changed: Tue Jun 2 16:31:16 2015 » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPyMultiGradFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyMultiGradFunction.html
https://root.cern/root/html604/TPyMultiGradFunction.html:2482,Usability,Simpl,Simply,2482,"ntFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPyMultiGradFunction(PyObject* self = 0). private:. TPyMultiGradFunction&operator=(const TPyMultiGradFunction&); TPyMultiGradFunction(const TPyMultiGradFunction& src). Data Members; private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyMultiGradFunction(PyObject* self = 0); Construct a TPyMultiGradFunction derived with <self> as the underlying. ~TPyMultiGradFunction(); Destructor. Only deref if still holding on to Py_None (circular otherwise). unsigned int NDim() const; Simply forward the call to python self. double DoEval(const double* x) const; Simply forward the call to python self. void Gradient(const double* x, double* grad) const; Simply forward the call to python self. void FdF(const double* x, double& f, double* df) const; Simply forward the call to python self. double DoDerivative(const double* x, unsigned int icoord) const; Simply forward the call to python self. ROOT::Math::IBaseFunctionMultiDim* Clone() const; Math::IMultiGenFunction implementation. { return new TPyMultiGenFunction( fPySelf ); }. TPyMultiGenFunction& operator=(const TPyMultiGradFunction& ); { return *this; }. TPyMultiGradFunction(PyObject* self = 0); ctor/dtor, and assignment. » Last changed: Tue Jun 2 16:31:16 2015 » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPyMultiGradFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyMultiGradFunction.html
https://root.cern/root/html604/TPyMultiGradFunction.html:2574,Usability,Simpl,Simply,2574,"ntFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPyMultiGradFunction(PyObject* self = 0). private:. TPyMultiGradFunction&operator=(const TPyMultiGradFunction&); TPyMultiGradFunction(const TPyMultiGradFunction& src). Data Members; private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyMultiGradFunction(PyObject* self = 0); Construct a TPyMultiGradFunction derived with <self> as the underlying. ~TPyMultiGradFunction(); Destructor. Only deref if still holding on to Py_None (circular otherwise). unsigned int NDim() const; Simply forward the call to python self. double DoEval(const double* x) const; Simply forward the call to python self. void Gradient(const double* x, double* grad) const; Simply forward the call to python self. void FdF(const double* x, double& f, double* df) const; Simply forward the call to python self. double DoDerivative(const double* x, unsigned int icoord) const; Simply forward the call to python self. ROOT::Math::IBaseFunctionMultiDim* Clone() const; Math::IMultiGenFunction implementation. { return new TPyMultiGenFunction( fPySelf ); }. TPyMultiGenFunction& operator=(const TPyMultiGradFunction& ); { return *this; }. TPyMultiGradFunction(PyObject* self = 0); ctor/dtor, and assignment. » Last changed: Tue Jun 2 16:31:16 2015 » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPyMultiGradFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyMultiGradFunction.html
https://root.cern/root/html604/TPyMultiGradFunction.html:2670,Usability,Simpl,Simply,2670,"ntFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPyMultiGradFunction(PyObject* self = 0). private:. TPyMultiGradFunction&operator=(const TPyMultiGradFunction&); TPyMultiGradFunction(const TPyMultiGradFunction& src). Data Members; private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyMultiGradFunction(PyObject* self = 0); Construct a TPyMultiGradFunction derived with <self> as the underlying. ~TPyMultiGradFunction(); Destructor. Only deref if still holding on to Py_None (circular otherwise). unsigned int NDim() const; Simply forward the call to python self. double DoEval(const double* x) const; Simply forward the call to python self. void Gradient(const double* x, double* grad) const; Simply forward the call to python self. void FdF(const double* x, double& f, double* df) const; Simply forward the call to python self. double DoDerivative(const double* x, unsigned int icoord) const; Simply forward the call to python self. ROOT::Math::IBaseFunctionMultiDim* Clone() const; Math::IMultiGenFunction implementation. { return new TPyMultiGenFunction( fPySelf ); }. TPyMultiGenFunction& operator=(const TPyMultiGradFunction& ); { return *this; }. TPyMultiGradFunction(PyObject* self = 0); ctor/dtor, and assignment. » Last changed: Tue Jun 2 16:31:16 2015 » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPyMultiGradFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyMultiGradFunction.html
https://root.cern/root/html604/TPyMultiGradFunction.html:2775,Usability,Simpl,Simply,2775,"ntFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); virtual TClass*IsA() const; virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPyMultiGradFunction(PyObject* self = 0). private:. TPyMultiGradFunction&operator=(const TPyMultiGradFunction&); TPyMultiGradFunction(const TPyMultiGradFunction& src). Data Members; private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyMultiGradFunction(PyObject* self = 0); Construct a TPyMultiGradFunction derived with <self> as the underlying. ~TPyMultiGradFunction(); Destructor. Only deref if still holding on to Py_None (circular otherwise). unsigned int NDim() const; Simply forward the call to python self. double DoEval(const double* x) const; Simply forward the call to python self. void Gradient(const double* x, double* grad) const; Simply forward the call to python self. void FdF(const double* x, double& f, double* df) const; Simply forward the call to python self. double DoDerivative(const double* x, unsigned int icoord) const; Simply forward the call to python self. ROOT::Math::IBaseFunctionMultiDim* Clone() const; Math::IMultiGenFunction implementation. { return new TPyMultiGenFunction( fPySelf ); }. TPyMultiGenFunction& operator=(const TPyMultiGradFunction& ); { return *this; }. TPyMultiGradFunction(PyObject* self = 0); ctor/dtor, and assignment. » Last changed: Tue Jun 2 16:31:16 2015 » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPyMultiGradFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyMultiGradFunction.html
https://root.cern/root/html604/TPyReturn.html:1695,Modifiability,Inherit,Inheritance,1695,"ltin types) or explicitly (through a void*; cast for pointers to ROOT objects). Examples:. root [0] TBrowser* b = (void*)TPython::Eval( ""ROOT.TBrowser()"" );; root [1] int i = TPython::Eval( ""1+1"" );; root [2] i; (int)2; root [3] double d = TPython::Eval( ""1+3.1415"" );; root [4] d; (double)4.14150000000000063e+00. Function Members (Methods); public:. virtual~TPyReturn(); static TClass*Class(); virtual TClass*IsA() const; PyObject*operator _object *() const; Char_toperator char() const; char*operator char *() const; const char*operator const char *() const; Double_toperator double() const; Float_toperator float() const; Int_toperator int() const; Long_toperator long() const; Short_toperator short() const; UInt_toperator unsigned int() const; ULong_toperator unsigned long() const; UShort_toperator unsigned short() const; void*operator void *() const; TPyReturn&operator=(const TPyReturn&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPyReturn(); TPyReturn(PyObject* pyobject); TPyReturn(const TPyReturn&). Data Members; private:. PyObject*fPyObject! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyReturn(); Construct a TPyReturn object from Py_None. TPyReturn(PyObject* pyobject); Construct a TPyReturn from a python object. The python object may represent; a ROOT object. Steals reference to given python object. TPyReturn(const TPyReturn& ); Copy constructor. Applies python object reference counting. TPyReturn& operator=(const TPyReturn& ); Assignment operator. Applies python object reference counting. ~TPyReturn(); Destructor. Reference counting for the held python object is in effect. » Last changed: root/pyroot:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPyReturn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyReturn.html
https://root.cern/root/html604/TPyReturn.html:1708,Modifiability,Inherit,Inherited,1708,"ltin types) or explicitly (through a void*; cast for pointers to ROOT objects). Examples:. root [0] TBrowser* b = (void*)TPython::Eval( ""ROOT.TBrowser()"" );; root [1] int i = TPython::Eval( ""1+1"" );; root [2] i; (int)2; root [3] double d = TPython::Eval( ""1+3.1415"" );; root [4] d; (double)4.14150000000000063e+00. Function Members (Methods); public:. virtual~TPyReturn(); static TClass*Class(); virtual TClass*IsA() const; PyObject*operator _object *() const; Char_toperator char() const; char*operator char *() const; const char*operator const char *() const; Double_toperator double() const; Float_toperator float() const; Int_toperator int() const; Long_toperator long() const; Short_toperator short() const; UInt_toperator unsigned int() const; ULong_toperator unsigned long() const; UShort_toperator unsigned short() const; void*operator void *() const; TPyReturn&operator=(const TPyReturn&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPyReturn(); TPyReturn(PyObject* pyobject); TPyReturn(const TPyReturn&). Data Members; private:. PyObject*fPyObject! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyReturn(); Construct a TPyReturn object from Py_None. TPyReturn(PyObject* pyobject); Construct a TPyReturn from a python object. The python object may represent; a ROOT object. Steals reference to given python object. TPyReturn(const TPyReturn& ); Copy constructor. Applies python object reference counting. TPyReturn& operator=(const TPyReturn& ); Assignment operator. Applies python object reference counting. ~TPyReturn(); Destructor. Reference counting for the held python object is in effect. » Last changed: root/pyroot:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPyReturn.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPyReturn.html
https://root.cern/root/html604/TPySelector.html:2551,Availability,Error,Error,2551," virtual~TPySelector(); virtual voidAbort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree = 0); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voi",MatchSource.WIKI,root/html604/TPySelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPySelector.html
https://root.cern/root/html604/TPySelector.html:2680,Availability,error,error,2680,"r* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree = 0); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*TSelector::GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() co",MatchSource.WIKI,root/html604/TPySelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPySelector.html
https://root.cern/root/html604/TPySelector.html:2764,Availability,error,error,2764,"har* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree = 0); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*TSelector::GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueI",MatchSource.WIKI,root/html604/TPySelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPySelector.html
https://root.cern/root/html604/TPySelector.html:8229,Availability,avail,available,8229,"public:. TTree*fChain; static TSelector::EAbortTSelector::kAbortFile; static TSelector::EAbortTSelector::kAbortProcess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; TList*TSelector::fInputList of objects available during processing; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupPySelf(); Install the python side identity of the TPySelector. PyObject* CallSelf(const char* method, PyObject* pyobject = 0); Forward <method> to python. TPySelector(TTree* = 0, PyObject* self = 0); Construct a TSelector derived with <self> as the underlying, which is; generally 0 to start out with in the current PROOF framework. ~TPySelector(); Destructor. Only deref if still holding on to Py_None (circular otherwise). Int_t Version() const; Return version number of this selector. First forward; if not overridden, then; yield an obvious ""undefined"" number,. Int_t ",MatchSource.WIKI,root/html604/TPySelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPySelector.html
https://root.cern/root/html604/TPySelector.html:9558,Availability,avail,available,9558,"PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupPySelf(); Install the python side identity of the TPySelector. PyObject* CallSelf(const char* method, PyObject* pyobject = 0); Forward <method> to python. TPySelector(TTree* = 0, PyObject* self = 0); Construct a TSelector derived with <self> as the underlying, which is; generally 0 to start out with in the current PROOF framework. ~TPySelector(); Destructor. Only deref if still holding on to Py_None (circular otherwise). Int_t Version() const; Return version number of this selector. First forward; if not overridden, then; yield an obvious ""undefined"" number,. Int_t GetEntry(Long64_t entry, Int_t getall = 0); Boilerplate get entry; same as for generated code; not forwarded. void Init(TTree* tree); Initialize with the current tree to be used; not forwarded (may be called; multiple times, and is called from Begin() and SlaveBegin() ). Bool_t Notify(); Forward call to derived Notify() if available. void Begin(TTree* tree = 0); First function called, and used to setup the python self; forward call. void SlaveBegin(TTree* tree); First function called on worker node, needs to make sure python self is setup,; then store the tree to be used, initialize client, and forward call. Bool_t Process(Long64_t entry); Actual processing; call is forwarded to python self. void SlaveTerminate(); End of client; call is forwarded to python self. void Terminate(); End of job; call is forwarded to python self. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); If no 'why' given, read from python error. TPySelector(TTree* = 0, PyObject* self = 0); ctor/dtor ... cctor and assignment are private in base class. » Last changed: Tue Jun 2 16:31:19 2015 » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPySelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPySelector.html
https://root.cern/root/html604/TPySelector.html:10175,Availability,error,error,10175,"PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupPySelf(); Install the python side identity of the TPySelector. PyObject* CallSelf(const char* method, PyObject* pyobject = 0); Forward <method> to python. TPySelector(TTree* = 0, PyObject* self = 0); Construct a TSelector derived with <self> as the underlying, which is; generally 0 to start out with in the current PROOF framework. ~TPySelector(); Destructor. Only deref if still holding on to Py_None (circular otherwise). Int_t Version() const; Return version number of this selector. First forward; if not overridden, then; yield an obvious ""undefined"" number,. Int_t GetEntry(Long64_t entry, Int_t getall = 0); Boilerplate get entry; same as for generated code; not forwarded. void Init(TTree* tree); Initialize with the current tree to be used; not forwarded (may be called; multiple times, and is called from Begin() and SlaveBegin() ). Bool_t Notify(); Forward call to derived Notify() if available. void Begin(TTree* tree = 0); First function called, and used to setup the python self; forward call. void SlaveBegin(TTree* tree); First function called on worker node, needs to make sure python self is setup,; then store the tree to be used, initialize client, and forward call. Bool_t Process(Long64_t entry); Actual processing; call is forwarded to python self. void SlaveTerminate(); End of client; call is forwarded to python self. void Terminate(); End of job; call is forwarded to python self. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); If no 'why' given, read from python error. TPySelector(TTree* = 0, PyObject* self = 0); ctor/dtor ... cctor and assignment are private in base class. » Last changed: Tue Jun 2 16:31:19 2015 » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPySelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPySelector.html
https://root.cern/root/html604/TPySelector.html:8671,Deployability,Install,Install,8671,"::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; TList*TSelector::fInputList of objects available during processing; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupPySelf(); Install the python side identity of the TPySelector. PyObject* CallSelf(const char* method, PyObject* pyobject = 0); Forward <method> to python. TPySelector(TTree* = 0, PyObject* self = 0); Construct a TSelector derived with <self> as the underlying, which is; generally 0 to start out with in the current PROOF framework. ~TPySelector(); Destructor. Only deref if still holding on to Py_None (circular otherwise). Int_t Version() const; Return version number of this selector. First forward; if not overridden, then; yield an obvious ""undefined"" number,. Int_t GetEntry(Long64_t entry, Int_t getall = 0); Boilerplate get entry; same as for generated code; not forwarded. void Init(TTree* tree); Initialize with the current tree to be used; not forwarded (may be called; multiple times, and is called from Begin() and SlaveBegin() ). Bool_t Notify(); Forward call to derived Notify() if available. void Begin(TTree* tree = 0); First function called, and used to setup the python self; forward call. void ",MatchSource.WIKI,root/html604/TPySelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPySelector.html
https://root.cern/root/html604/TPySelector.html:3963,Modifiability,Inherit,InheritsFrom,3963,"e) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*TSelector::GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree* tree); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* v",MatchSource.WIKI,root/html604/TPySelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPySelector.html
https://root.cern/root/html604/TPySelector.html:4029,Modifiability,Inherit,InheritsFrom,4029,"const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*TSelector::GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree* tree); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operato",MatchSource.WIKI,root/html604/TPySelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPySelector.html
https://root.cern/root/html604/TPySelector.html:8574,Modifiability,Inherit,Inheritance,8574,"ect::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; TList*TSelector::fInputList of objects available during processing; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupPySelf(); Install the python side identity of the TPySelector. PyObject* CallSelf(const char* method, PyObject* pyobject = 0); Forward <method> to python. TPySelector(TTree* = 0, PyObject* self = 0); Construct a TSelector derived with <self> as the underlying, which is; generally 0 to start out with in the current PROOF framework. ~TPySelector(); Destructor. Only deref if still holding on to Py_None (circular otherwise). Int_t Version() const; Return version number of this selector. First forward; if not overridden, then; yield an obvious ""undefined"" number,. Int_t GetEntry(Long64_t entry, Int_t getall = 0); Boilerplate get entry; same as for generated code; not forwarded. void Init(TTree* tree); Initialize with the current tree to be used; not forwarded (may be called; multiple times, and is called from Begin() and SlaveBegin() ). Bool_t Notify(); Forward call to derived Notify() if available. void Begin(TTree* tree = 0); Fi",MatchSource.WIKI,root/html604/TPySelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPySelector.html
https://root.cern/root/html604/TPySelector.html:8587,Modifiability,Inherit,Inherited,8587,"ect::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; TList*TSelector::fInputList of objects available during processing; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupPySelf(); Install the python side identity of the TPySelector. PyObject* CallSelf(const char* method, PyObject* pyobject = 0); Forward <method> to python. TPySelector(TTree* = 0, PyObject* self = 0); Construct a TSelector derived with <self> as the underlying, which is; generally 0 to start out with in the current PROOF framework. ~TPySelector(); Destructor. Only deref if still holding on to Py_None (circular otherwise). Int_t Version() const; Return version number of this selector. First forward; if not overridden, then; yield an obvious ""undefined"" number,. Int_t GetEntry(Long64_t entry, Int_t getall = 0); Boilerplate get entry; same as for generated code; not forwarded. void Init(TTree* tree); Initialize with the current tree to be used; not forwarded (may be called; multiple times, and is called from Begin() and SlaveBegin() ). Bool_t Notify(); Forward call to derived Notify() if available. void Begin(TTree* tree = 0); Fi",MatchSource.WIKI,root/html604/TPySelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPySelector.html
https://root.cern/root/html604/TPySelector.html:10075,Safety,Abort,Abort,10075,"PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupPySelf(); Install the python side identity of the TPySelector. PyObject* CallSelf(const char* method, PyObject* pyobject = 0); Forward <method> to python. TPySelector(TTree* = 0, PyObject* self = 0); Construct a TSelector derived with <self> as the underlying, which is; generally 0 to start out with in the current PROOF framework. ~TPySelector(); Destructor. Only deref if still holding on to Py_None (circular otherwise). Int_t Version() const; Return version number of this selector. First forward; if not overridden, then; yield an obvious ""undefined"" number,. Int_t GetEntry(Long64_t entry, Int_t getall = 0); Boilerplate get entry; same as for generated code; not forwarded. void Init(TTree* tree); Initialize with the current tree to be used; not forwarded (may be called; multiple times, and is called from Begin() and SlaveBegin() ). Bool_t Notify(); Forward call to derived Notify() if available. void Begin(TTree* tree = 0); First function called, and used to setup the python self; forward call. void SlaveBegin(TTree* tree); First function called on worker node, needs to make sure python self is setup,; then store the tree to be used, initialize client, and forward call. Bool_t Process(Long64_t entry); Actual processing; call is forwarded to python self. void SlaveTerminate(); End of client; call is forwarded to python self. void Terminate(); End of job; call is forwarded to python self. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); If no 'why' given, read from python error. TPySelector(TTree* = 0, PyObject* self = 0); ctor/dtor ... cctor and assignment are private in base class. » Last changed: Tue Jun 2 16:31:19 2015 » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPySelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPySelector.html
https://root.cern/root/html604/TPySelector.html:3853,Security,Hash,Hash,3853,"dTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*TSelector::GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree* tree); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator d",MatchSource.WIKI,root/html604/TPySelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPySelector.html
https://root.cern/root/html604/TPySelector.html:6519,Testability,Test,TestBit,6519,"operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TPySelector&operator=(const TPySelector&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t entry); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidTSelector::ProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSelector::ResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSelector::SetInputList(TList* input); virtual voidTSelector::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSelector::SetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree* tree); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TPySelector(const TPySelector&); TPySelector(TTree* = 0, PyObject* self = 0); virtual voidTObject::UseCurrentStyle(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TPySelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPySelector.html
https://root.cern/root/html604/TPySelector.html:6558,Testability,Test,TestBits,6558,"operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TPySelector&operator=(const TPySelector&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t entry); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidTSelector::ProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSelector::ResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSelector::SetInputList(TList* input); virtual voidTSelector::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSelector::SetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree* tree); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TPySelector(const TPySelector&); TPySelector(TTree* = 0, PyObject* self = 0); virtual voidTObject::UseCurrentStyle(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TPySelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPySelector.html
https://root.cern/root/html604/TPySelector.html:2011,Usability,Clear,Clear,2011," virtual~TPySelector(); virtual voidAbort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree = 0); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voi",MatchSource.WIKI,root/html604/TPySelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPySelector.html
https://root.cern/root/html604/TPythia8.html:670,Availability,avail,available,670,". TPythia8. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MONTECARLO; » PYTHIA8; » TPythia8. class TPythia8: public TGenerator. TPythia8. TPythia is an interface class to C++ version of Pythia 8.1; event generators, written by T.Sjostrand. The user is assumed to be familiar with the Pythia package.; This class includes only a basic interface to Pythia8. Because Pythia8 is; also written in C++, its functions/classes can be called directly from a; compiled C++ script.; To call Pythia functions not available in this interface a dictionary must; be generated.; see $ROOTSYS/tutorials/pythia/pythia8.C for an example of use from CINT. | |; | *------------------------------------------------------------------------------* |; | | | |; | | | |; | | PPP Y Y TTTTT H H III A Welcome to the Lund Monte Carlo! | |; | | P P Y Y T H H I A A This is PYTHIA version 8.100 | |; | | PPP Y T HHHHH I AAAAA Last date of change: 20 Oct 2007 | |; | | P Y T H H I A A | |; | | P Y T H H III A A Now is 27 Oct 2007 at 18:26:53 | |; | | | |; | | Main author: Torbjorn Sjostrand; CERN/PH, CH-1211 Geneva, Switzerland, | |; | | and Department of Theoretical Physics, Lund University, Lund, Sweden; | |; | | phone: + 41 - 22 - 767 82 27; e-mail: torbjorn@thep.lu.se | |; | | Author: Stephen Mrenna; Computing Division, Simulations Group, | |; | | Fermi National Accelerator Laboratory, MS 234, Batavia, IL 60510, USA; | |; | | phone: + 1 - 630 - 840 - 2556; e-mail: mrenna@fnal.gov | |; | | Author: Peter Skands; CERN/PH, CH-1211 Geneva, Switzerland, | |; | | and Theoretical Physics Department, | |; | | Fermi National Accelerator Laboratory, MS 106, Batavia, IL 60510, USA; | |; | | phone: + 41 - 22 - 767 24 59; e-mail: skands@fnal.gov | |; | | | |; | | The main program reference is the 'Brief Introduction to PYTHIA 8.1', | |; | | T. Sjostrand, S.",MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8.html:2617,Availability,error,errors,2617,"; | | Author: Peter Skands; CERN/PH, CH-1211 Geneva, Switzerland, | |; | | and Theoretical Physics Department, | |; | | Fermi National Accelerator Laboratory, MS 106, Batavia, IL 60510, USA; | |; | | phone: + 41 - 22 - 767 24 59; e-mail: skands@fnal.gov | |; | | | |; | | The main program reference is the 'Brief Introduction to PYTHIA 8.1', | |; | | T. Sjostrand, S. Mrenna and P. Skands, arXiv:0710.3820 | |; | | | |; | | The main physics reference is the 'PYTHIA 6.4 Physics and Manual', | |; | | T. Sjostrand, S. Mrenna and P. Skands, JHEP05 (2006) 026 [hep-ph/0603175]. | |; | | | |; | | An archive of program versions and documentation is found on the web: | |; | | http://www.thep.lu.se/~torbjorn/Pythia.html | |; | | | |; | | This program is released under the GNU General Public Licence version 2. | |; | | Please respect the MCnet Guidelines for Event Generator Authors and Users. | |; | | | |; | | Disclaimer: this program comes without any guarantees. | |; | | Beware of errors and use common sense when interpreting results. | |; | | | |; | | Copyright (C) 2007 Torbjorn Sjostrand | |; | | | |; | | | |; | *------------------------------------------------------------------------------* |; | |; *------------------------------------------------------------------------------------*. Function Members (Methods); public:. virtual~TPythia8(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGenerator::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGenerator::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGenerator::Draw(Option_t* option = """"); virtual voidTObject::DrawClas",MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8.html:3781,Availability,Error,Error,3781,,MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8.html:3936,Availability,error,error,3936,,MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8.html:4020,Availability,error,error,4020,"ar* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGenerator::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGenerator::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGenerator::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidEventListing() const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGenerator::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidGenerateEvent(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TObjArray*TGenerator::GetListOfParticles() const; Int_tGetN() const; virtual const char*TNamed::GetName() const; Int_tTGenerator::GetNumberOfParticles() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Double_tTGenerator::GetParameter(const char*) const; virtual TParticle*TGenerator::GetParticle(Int_t i) const; virtual TObjArray*TGenerator::GetPrimaries(Option_t* option = """"); Float_tTGe",MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8.html:2384,Deployability,release,released,2384,"l: torbjorn@thep.lu.se | |; | | Author: Stephen Mrenna; Computing Division, Simulations Group, | |; | | Fermi National Accelerator Laboratory, MS 234, Batavia, IL 60510, USA; | |; | | phone: + 1 - 630 - 840 - 2556; e-mail: mrenna@fnal.gov | |; | | Author: Peter Skands; CERN/PH, CH-1211 Geneva, Switzerland, | |; | | and Theoretical Physics Department, | |; | | Fermi National Accelerator Laboratory, MS 106, Batavia, IL 60510, USA; | |; | | phone: + 41 - 22 - 767 24 59; e-mail: skands@fnal.gov | |; | | | |; | | The main program reference is the 'Brief Introduction to PYTHIA 8.1', | |; | | T. Sjostrand, S. Mrenna and P. Skands, arXiv:0710.3820 | |; | | | |; | | The main physics reference is the 'PYTHIA 6.4 Physics and Manual', | |; | | T. Sjostrand, S. Mrenna and P. Skands, JHEP05 (2006) 026 [hep-ph/0603175]. | |; | | | |; | | An archive of program versions and documentation is found on the web: | |; | | http://www.thep.lu.se/~torbjorn/Pythia.html | |; | | | |; | | This program is released under the GNU General Public Licence version 2. | |; | | Please respect the MCnet Guidelines for Event Generator Authors and Users. | |; | | | |; | | Disclaimer: this program comes without any guarantees. | |; | | Beware of errors and use common sense when interpreting results. | |; | | | |; | | Copyright (C) 2007 Torbjorn Sjostrand | |; | | | |; | | | |; | *------------------------------------------------------------------------------* |; | |; *------------------------------------------------------------------------------------*. Function Members (Methods); public:. virtual~TPythia8(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGenerator::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual void",MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8.html:11077,Deployability,Configurat,Configuration,11077,"Zombie. protected:. TStringTNamed::fNameobject identifier; Int_tfNumberOfParticles! Number of particles; TObjArray*TGenerator::fParticles->static container of the primary particles; Float_tTGenerator::fPtCut!Pt cut. Do not show primaries below; Pythia8::Pythia*fPythia! The pythia8 instance; Bool_tTGenerator::fShowNeutrons!display neutrons if true; TStringTNamed::fTitleobject title; static TPythia8*fgInstance! singleton instance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPythia8(); Constructor. TPythia8(const char* xmlDir); Constructor with an xmlDir (eg ""../xmldoc"". ~TPythia8(); Destructor. TPythia8* Instance(); Return an instance of TPythia8. Bool_t Initialize(Int_t idAin, Int_t idBin, Double_t ecms); Initialization. Bool_t Initialize(Int_t idAin, Int_t idBin, Double_t eAin, Double_t eBin); Initialization. void GenerateEvent(); Generate the next event. Int_t ImportParticles(TClonesArray* particles, Option_t* option = """"); Import particles from Pythia stack. TObjArray* ImportParticles(Option_t* option = """"); Import particles from Pythia stack. Int_t GetN() const; Initialization. void ReadString(const char* string) const; Configuration. void ReadConfigFile(const char* string) const; Configuration. void ListAll() const; Event listing. void ListChanged() const; Event listing. void Plist(Int_t id) const; Event listing. void PlistAll() const; Event listing. void PlistChanged() const; Event listing. void PrintStatistics() const; Print end of run statistics. void EventListing() const; Event listing. void AddParticlesToPdgDataBase(); Add some pythia specific particle code to the data base. TPythia8(). » Author: Andreas Morsch 27/10/2007 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/pythia8:$Name$:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8.html:11139,Deployability,Configurat,Configuration,11139,"Zombie. protected:. TStringTNamed::fNameobject identifier; Int_tfNumberOfParticles! Number of particles; TObjArray*TGenerator::fParticles->static container of the primary particles; Float_tTGenerator::fPtCut!Pt cut. Do not show primaries below; Pythia8::Pythia*fPythia! The pythia8 instance; Bool_tTGenerator::fShowNeutrons!display neutrons if true; TStringTNamed::fTitleobject title; static TPythia8*fgInstance! singleton instance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPythia8(); Constructor. TPythia8(const char* xmlDir); Constructor with an xmlDir (eg ""../xmldoc"". ~TPythia8(); Destructor. TPythia8* Instance(); Return an instance of TPythia8. Bool_t Initialize(Int_t idAin, Int_t idBin, Double_t ecms); Initialization. Bool_t Initialize(Int_t idAin, Int_t idBin, Double_t eAin, Double_t eBin); Initialization. void GenerateEvent(); Generate the next event. Int_t ImportParticles(TClonesArray* particles, Option_t* option = """"); Import particles from Pythia stack. TObjArray* ImportParticles(Option_t* option = """"); Import particles from Pythia stack. Int_t GetN() const; Initialization. void ReadString(const char* string) const; Configuration. void ReadConfigFile(const char* string) const; Configuration. void ListAll() const; Event listing. void ListChanged() const; Event listing. void Plist(Int_t id) const; Event listing. void PlistAll() const; Event listing. void PlistChanged() const; Event listing. void PrintStatistics() const; Print end of run statistics. void EventListing() const; Event listing. void AddParticlesToPdgDataBase(); Add some pythia specific particle code to the data base. TPythia8(). » Author: Andreas Morsch 27/10/2007 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/pythia8:$Name$:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8.html:321,Integrability,interface,interface,321,". TPythia8. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MONTECARLO; » PYTHIA8; » TPythia8. class TPythia8: public TGenerator. TPythia8. TPythia is an interface class to C++ version of Pythia 8.1; event generators, written by T.Sjostrand. The user is assumed to be familiar with the Pythia package.; This class includes only a basic interface to Pythia8. Because Pythia8 is; also written in C++, its functions/classes can be called directly from a; compiled C++ script.; To call Pythia functions not available in this interface a dictionary must; be generated.; see $ROOTSYS/tutorials/pythia/pythia8.C for an example of use from CINT. | |; | *------------------------------------------------------------------------------* |; | | | |; | | | |; | | PPP Y Y TTTTT H H III A Welcome to the Lund Monte Carlo! | |; | | P P Y Y T H H I A A This is PYTHIA version 8.100 | |; | | PPP Y T HHHHH I AAAAA Last date of change: 20 Oct 2007 | |; | | P Y T H H I A A | |; | | P Y T H H III A A Now is 27 Oct 2007 at 18:26:53 | |; | | | |; | | Main author: Torbjorn Sjostrand; CERN/PH, CH-1211 Geneva, Switzerland, | |; | | and Department of Theoretical Physics, Lund University, Lund, Sweden; | |; | | phone: + 41 - 22 - 767 82 27; e-mail: torbjorn@thep.lu.se | |; | | Author: Stephen Mrenna; Computing Division, Simulations Group, | |; | | Fermi National Accelerator Laboratory, MS 234, Batavia, IL 60510, USA; | |; | | phone: + 1 - 630 - 840 - 2556; e-mail: mrenna@fnal.gov | |; | | Author: Peter Skands; CERN/PH, CH-1211 Geneva, Switzerland, | |; | | and Theoretical Physics Department, | |; | | Fermi National Accelerator Laboratory, MS 106, Batavia, IL 60510, USA; | |; | | phone: + 41 - 22 - 767 24 59; e-mail: skands@fnal.gov | |; | | | |; | | The main program reference is the 'Brief Introduction to PYTHIA 8.1', | |; | | T. Sjostrand, S.",MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8.html:503,Integrability,interface,interface,503,". TPythia8. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MONTECARLO; » PYTHIA8; » TPythia8. class TPythia8: public TGenerator. TPythia8. TPythia is an interface class to C++ version of Pythia 8.1; event generators, written by T.Sjostrand. The user is assumed to be familiar with the Pythia package.; This class includes only a basic interface to Pythia8. Because Pythia8 is; also written in C++, its functions/classes can be called directly from a; compiled C++ script.; To call Pythia functions not available in this interface a dictionary must; be generated.; see $ROOTSYS/tutorials/pythia/pythia8.C for an example of use from CINT. | |; | *------------------------------------------------------------------------------* |; | | | |; | | | |; | | PPP Y Y TTTTT H H III A Welcome to the Lund Monte Carlo! | |; | | P P Y Y T H H I A A This is PYTHIA version 8.100 | |; | | PPP Y T HHHHH I AAAAA Last date of change: 20 Oct 2007 | |; | | P Y T H H I A A | |; | | P Y T H H III A A Now is 27 Oct 2007 at 18:26:53 | |; | | | |; | | Main author: Torbjorn Sjostrand; CERN/PH, CH-1211 Geneva, Switzerland, | |; | | and Department of Theoretical Physics, Lund University, Lund, Sweden; | |; | | phone: + 41 - 22 - 767 82 27; e-mail: torbjorn@thep.lu.se | |; | | Author: Stephen Mrenna; Computing Division, Simulations Group, | |; | | Fermi National Accelerator Laboratory, MS 234, Batavia, IL 60510, USA; | |; | | phone: + 1 - 630 - 840 - 2556; e-mail: mrenna@fnal.gov | |; | | Author: Peter Skands; CERN/PH, CH-1211 Geneva, Switzerland, | |; | | and Theoretical Physics Department, | |; | | Fermi National Accelerator Laboratory, MS 106, Batavia, IL 60510, USA; | |; | | phone: + 41 - 22 - 767 24 59; e-mail: skands@fnal.gov | |; | | | |; | | The main program reference is the 'Brief Introduction to PYTHIA 8.1', | |; | | T. Sjostrand, S.",MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8.html:688,Integrability,interface,interface,688,". TPythia8. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MONTECARLO; » PYTHIA8; » TPythia8. class TPythia8: public TGenerator. TPythia8. TPythia is an interface class to C++ version of Pythia 8.1; event generators, written by T.Sjostrand. The user is assumed to be familiar with the Pythia package.; This class includes only a basic interface to Pythia8. Because Pythia8 is; also written in C++, its functions/classes can be called directly from a; compiled C++ script.; To call Pythia functions not available in this interface a dictionary must; be generated.; see $ROOTSYS/tutorials/pythia/pythia8.C for an example of use from CINT. | |; | *------------------------------------------------------------------------------* |; | | | |; | | | |; | | PPP Y Y TTTTT H H III A Welcome to the Lund Monte Carlo! | |; | | P P Y Y T H H I A A This is PYTHIA version 8.100 | |; | | PPP Y T HHHHH I AAAAA Last date of change: 20 Oct 2007 | |; | | P Y T H H I A A | |; | | P Y T H H III A A Now is 27 Oct 2007 at 18:26:53 | |; | | | |; | | Main author: Torbjorn Sjostrand; CERN/PH, CH-1211 Geneva, Switzerland, | |; | | and Department of Theoretical Physics, Lund University, Lund, Sweden; | |; | | phone: + 41 - 22 - 767 82 27; e-mail: torbjorn@thep.lu.se | |; | | Author: Stephen Mrenna; Computing Division, Simulations Group, | |; | | Fermi National Accelerator Laboratory, MS 234, Batavia, IL 60510, USA; | |; | | phone: + 1 - 630 - 840 - 2556; e-mail: mrenna@fnal.gov | |; | | Author: Peter Skands; CERN/PH, CH-1211 Geneva, Switzerland, | |; | | and Theoretical Physics Department, | |; | | Fermi National Accelerator Laboratory, MS 106, Batavia, IL 60510, USA; | |; | | phone: + 41 - 22 - 767 24 59; e-mail: skands@fnal.gov | |; | | | |; | | The main program reference is the 'Brief Introduction to PYTHIA 8.1', | |; | | T. Sjostrand, S.",MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8.html:5459,Modifiability,Inherit,InheritsFrom,5459,"rtual const char*TObject::GetIconName() const; virtual TObjArray*TGenerator::GetListOfParticles() const; Int_tGetN() const; virtual const char*TNamed::GetName() const; Int_tTGenerator::GetNumberOfParticles() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Double_tTGenerator::GetParameter(const char*) const; virtual TParticle*TGenerator::GetParticle(Int_t i) const; virtual TObjArray*TGenerator::GetPrimaries(Option_t* option = """"); Float_tTGenerator::GetPtCut() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual TObjArray*ImportParticles(Option_t* option = """"); virtual Int_tImportParticles(TClonesArray* particles, Option_t* option = """"); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; Bool_tInitialize(Int_t idAin, Int_t idBin, Double_t ecms); Bool_tInitialize(Int_t idAin, Int_t idBin, Double_t eAin, Double_t eBin); virtual voidTObject::Inspect() constMENU ; static TPythia8*Instance(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; voidListAll() const; voidListChanged() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::",MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8.html:5525,Modifiability,Inherit,InheritsFrom,5525,"Generator::GetListOfParticles() const; Int_tGetN() const; virtual const char*TNamed::GetName() const; Int_tTGenerator::GetNumberOfParticles() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Double_tTGenerator::GetParameter(const char*) const; virtual TParticle*TGenerator::GetParticle(Int_t i) const; virtual TObjArray*TGenerator::GetPrimaries(Option_t* option = """"); Float_tTGenerator::GetPtCut() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual TObjArray*ImportParticles(Option_t* option = """"); virtual Int_tImportParticles(TClonesArray* particles, Option_t* option = """"); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; Bool_tInitialize(Int_t idAin, Int_t idBin, Double_t ecms); Bool_tInitialize(Int_t idAin, Int_t idBin, Double_t eAin, Double_t eBin); virtual voidTObject::Inspect() constMENU ; static TPythia8*Instance(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; voidListAll() const; voidListChanged() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new",MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8.html:10335,Modifiability,Inherit,Inheritance,10335," TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; Int_tfNumberOfParticles! Number of particles; TObjArray*TGenerator::fParticles->static container of the primary particles; Float_tTGenerator::fPtCut!Pt cut. Do not show primaries below; Pythia8::Pythia*fPythia! The pythia8 instance; Bool_tTGenerator::fShowNeutrons!display neutrons if true; TStringTNamed::fTitleobject title; static TPythia8*fgInstance! singleton instance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPythia8(); Constructor. TPythia8(const char* xmlDir); Constructor with an xmlDir (eg ""../xmldoc"". ~TPythia8(); Destructor. TPythia8* Instance(); Return an instance of TPythia8. Bool_t Initialize(Int_t idAin, Int_t idBin, Double_t ecms); Initialization. Bool_t Initialize(Int_t idAin, Int_t idBin, Double_t eAin, Double_t eBin); Initialization. void GenerateEvent(); Generate the next event. Int_t ImportParticles(TClonesArray* particles, Option_t* option = """"); Import particles from Pythia stack. TObjArray* ImportParticles(Option_t* option = """"); Import particles from Pythia stack. Int_t GetN() const; Initialization. void ReadString(const char* string) const; Configuration. void ReadConfigFile(const char* string) const; Configuration. void ListAll() const; Event listing. void ListChanged() const; Event listing. void Plist(Int_t id) const; Event listing. void PlistAll() const; Event listing. void PlistChanged() const; Event listing. void P",MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8.html:10348,Modifiability,Inherit,Inherited,10348," TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; Int_tfNumberOfParticles! Number of particles; TObjArray*TGenerator::fParticles->static container of the primary particles; Float_tTGenerator::fPtCut!Pt cut. Do not show primaries below; Pythia8::Pythia*fPythia! The pythia8 instance; Bool_tTGenerator::fShowNeutrons!display neutrons if true; TStringTNamed::fTitleobject title; static TPythia8*fgInstance! singleton instance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPythia8(); Constructor. TPythia8(const char* xmlDir); Constructor with an xmlDir (eg ""../xmldoc"". ~TPythia8(); Destructor. TPythia8* Instance(); Return an instance of TPythia8. Bool_t Initialize(Int_t idAin, Int_t idBin, Double_t ecms); Initialization. Bool_t Initialize(Int_t idAin, Int_t idBin, Double_t eAin, Double_t eBin); Initialization. void GenerateEvent(); Generate the next event. Int_t ImportParticles(TClonesArray* particles, Option_t* option = """"); Import particles from Pythia stack. TObjArray* ImportParticles(Option_t* option = """"); Import particles from Pythia stack. Int_t GetN() const; Initialization. void ReadString(const char* string) const; Configuration. void ReadConfigFile(const char* string) const; Configuration. void ListAll() const; Event listing. void ListChanged() const; Event listing. void Plist(Int_t id) const; Event listing. void PlistAll() const; Event listing. void PlistChanged() const; Event listing. void P",MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8.html:11077,Modifiability,Config,Configuration,11077,"Zombie. protected:. TStringTNamed::fNameobject identifier; Int_tfNumberOfParticles! Number of particles; TObjArray*TGenerator::fParticles->static container of the primary particles; Float_tTGenerator::fPtCut!Pt cut. Do not show primaries below; Pythia8::Pythia*fPythia! The pythia8 instance; Bool_tTGenerator::fShowNeutrons!display neutrons if true; TStringTNamed::fTitleobject title; static TPythia8*fgInstance! singleton instance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPythia8(); Constructor. TPythia8(const char* xmlDir); Constructor with an xmlDir (eg ""../xmldoc"". ~TPythia8(); Destructor. TPythia8* Instance(); Return an instance of TPythia8. Bool_t Initialize(Int_t idAin, Int_t idBin, Double_t ecms); Initialization. Bool_t Initialize(Int_t idAin, Int_t idBin, Double_t eAin, Double_t eBin); Initialization. void GenerateEvent(); Generate the next event. Int_t ImportParticles(TClonesArray* particles, Option_t* option = """"); Import particles from Pythia stack. TObjArray* ImportParticles(Option_t* option = """"); Import particles from Pythia stack. Int_t GetN() const; Initialization. void ReadString(const char* string) const; Configuration. void ReadConfigFile(const char* string) const; Configuration. void ListAll() const; Event listing. void ListChanged() const; Event listing. void Plist(Int_t id) const; Event listing. void PlistAll() const; Event listing. void PlistChanged() const; Event listing. void PrintStatistics() const; Print end of run statistics. void EventListing() const; Event listing. void AddParticlesToPdgDataBase(); Add some pythia specific particle code to the data base. TPythia8(). » Author: Andreas Morsch 27/10/2007 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/pythia8:$Name$:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8.html:11139,Modifiability,Config,Configuration,11139,"Zombie. protected:. TStringTNamed::fNameobject identifier; Int_tfNumberOfParticles! Number of particles; TObjArray*TGenerator::fParticles->static container of the primary particles; Float_tTGenerator::fPtCut!Pt cut. Do not show primaries below; Pythia8::Pythia*fPythia! The pythia8 instance; Bool_tTGenerator::fShowNeutrons!display neutrons if true; TStringTNamed::fTitleobject title; static TPythia8*fgInstance! singleton instance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPythia8(); Constructor. TPythia8(const char* xmlDir); Constructor with an xmlDir (eg ""../xmldoc"". ~TPythia8(); Destructor. TPythia8* Instance(); Return an instance of TPythia8. Bool_t Initialize(Int_t idAin, Int_t idBin, Double_t ecms); Initialization. Bool_t Initialize(Int_t idAin, Int_t idBin, Double_t eAin, Double_t eBin); Initialization. void GenerateEvent(); Generate the next event. Int_t ImportParticles(TClonesArray* particles, Option_t* option = """"); Import particles from Pythia stack. TObjArray* ImportParticles(Option_t* option = """"); Import particles from Pythia stack. Int_t GetN() const; Initialization. void ReadString(const char* string) const; Configuration. void ReadConfigFile(const char* string) const; Configuration. void ListAll() const; Event listing. void ListChanged() const; Event listing. void Plist(Int_t id) const; Event listing. void PlistAll() const; Event listing. void PlistChanged() const; Event listing. void PrintStatistics() const; Print end of run statistics. void EventListing() const; Event listing. void AddParticlesToPdgDataBase(); Add some pythia specific particle code to the data base. TPythia8(). » Author: Andreas Morsch 27/10/2007 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/pythia8:$Name$:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8.html:5213,Security,Hash,Hash,5213,"buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidGenerateEvent(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TObjArray*TGenerator::GetListOfParticles() const; Int_tGetN() const; virtual const char*TNamed::GetName() const; Int_tTGenerator::GetNumberOfParticles() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Double_tTGenerator::GetParameter(const char*) const; virtual TParticle*TGenerator::GetParticle(Int_t i) const; virtual TObjArray*TGenerator::GetPrimaries(Option_t* option = """"); Float_tTGenerator::GetPtCut() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual TObjArray*ImportParticles(Option_t* option = """"); virtual Int_tImportParticles(TClonesArray* particles, Option_t* option = """"); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; Bool_tInitialize(Int_t idAin, Int_t idBin, Double_t ecms); Bool_tInitialize(Int_t idAin, Int_t idBin, Double_t eAin, Double_t eBin); virtual voidTObject::Inspect() constMENU ; static TPythia8*Instance(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; voidListAll() const; voidListChanged() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify()",MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8.html:8530,Testability,Test,TestBit,8530,"nst; Pythia8::Pythia*Pythia8(); virtual Int_tTObject::Read(const char* name); voidReadConfigFile(const char* string) const; voidReadString(const char* string) const; virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGenerator::SetParameter(const char*, Double_t); virtual voidTGenerator::SetPtCut(Float_t ptcut = 0)MENU ; virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGenerator::SetViewRadius(Float_t rbox = 1000)MENU ; virtual voidTGenerator::SetViewRange(Float_t xmin = -10000, Float_t ymin = -10000, Float_t zmin = -10000, Float_t xmax = 10000, Float_t ymax = 10000, Float_t zmax = 10000)MENU ; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTGenerator::ShowNeutrons(Bool_t show = 1)MENU ; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TPythia8(); TPythia8(const char* xmlDir); TPythia8(const TPythia8&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8.html:8569,Testability,Test,TestBits,8569,"nst; Pythia8::Pythia*Pythia8(); virtual Int_tTObject::Read(const char* name); voidReadConfigFile(const char* string) const; voidReadString(const char* string) const; virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGenerator::SetParameter(const char*, Double_t); virtual voidTGenerator::SetPtCut(Float_t ptcut = 0)MENU ; virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGenerator::SetViewRadius(Float_t rbox = 1000)MENU ; virtual voidTGenerator::SetViewRange(Float_t xmin = -10000, Float_t ymin = -10000, Float_t zmin = -10000, Float_t xmax = 10000, Float_t ymax = 10000, Float_t zmax = 10000)MENU ; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTGenerator::ShowNeutrons(Bool_t show = 1)MENU ; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TPythia8(); TPythia8(const char* xmlDir); TPythia8(const TPythia8&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8.html:2475,Usability,Guid,Guidelines,2475,"oup, | |; | | Fermi National Accelerator Laboratory, MS 234, Batavia, IL 60510, USA; | |; | | phone: + 1 - 630 - 840 - 2556; e-mail: mrenna@fnal.gov | |; | | Author: Peter Skands; CERN/PH, CH-1211 Geneva, Switzerland, | |; | | and Theoretical Physics Department, | |; | | Fermi National Accelerator Laboratory, MS 106, Batavia, IL 60510, USA; | |; | | phone: + 41 - 22 - 767 24 59; e-mail: skands@fnal.gov | |; | | | |; | | The main program reference is the 'Brief Introduction to PYTHIA 8.1', | |; | | T. Sjostrand, S. Mrenna and P. Skands, arXiv:0710.3820 | |; | | | |; | | The main physics reference is the 'PYTHIA 6.4 Physics and Manual', | |; | | T. Sjostrand, S. Mrenna and P. Skands, JHEP05 (2006) 026 [hep-ph/0603175]. | |; | | | |; | | An archive of program versions and documentation is found on the web: | |; | | http://www.thep.lu.se/~torbjorn/Pythia.html | |; | | | |; | | This program is released under the GNU General Public Licence version 2. | |; | | Please respect the MCnet Guidelines for Event Generator Authors and Users. | |; | | | |; | | Disclaimer: this program comes without any guarantees. | |; | | Beware of errors and use common sense when interpreting results. | |; | | | |; | | Copyright (C) 2007 Torbjorn Sjostrand | |; | | | |; | | | |; | *------------------------------------------------------------------------------* |; | |; *------------------------------------------------------------------------------------*. Function Members (Methods); public:. virtual~TPythia8(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGenerator::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MEN",MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8.html:3232,Usability,Clear,Clear,3232,,MatchSource.WIKI,root/html604/TPythia8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8.html
https://root.cern/root/html604/TPythia8Decayer.html:1221,Availability,Error,Error,1221," virtual~TPythia8Decayer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDecay(Int_t pdg, TLorentzVector* p); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceDecay(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Float_tGetLifetime(Int_t kf); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px,",MatchSource.WIKI,root/html604/TPythia8Decayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8Decayer.html
https://root.cern/root/html604/TPythia8Decayer.html:1350,Availability,error,error,1350," virtual~TPythia8Decayer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDecay(Int_t pdg, TLorentzVector* p); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceDecay(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Float_tGetLifetime(Int_t kf); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px,",MatchSource.WIKI,root/html604/TPythia8Decayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8Decayer.html
https://root.cern/root/html604/TPythia8Decayer.html:1434,Availability,error,error,1434,"const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDecay(Int_t pdg, TLorentzVector* p); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceDecay(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Float_tGetLifetime(Int_t kf); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Float_tGetPartialBranchingRatio(Int_t ipart); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual Int_tImportParticles(TClonesArray* particles); virtual voidTObject::Info(const char* method, ",MatchSource.WIKI,root/html604/TPythia8Decayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8Decayer.html
https://root.cern/root/html604/TPythia8Decayer.html:2487,Modifiability,Inherit,InheritsFrom,2487,"Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceDecay(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Float_tGetLifetime(Int_t kf); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Float_tGetPartialBranchingRatio(Int_t ipart); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual Int_tImportParticles(TClonesArray* particles); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::op",MatchSource.WIKI,root/html604/TPythia8Decayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8Decayer.html
https://root.cern/root/html604/TPythia8Decayer.html:2553,Modifiability,Inherit,InheritsFrom,2553,", const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceDecay(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Float_tGetLifetime(Int_t kf); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Float_tGetPartialBranchingRatio(Int_t ipart); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual Int_tImportParticles(TClonesArray* particles); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TPythia8Decayer&operator=(const",MatchSource.WIKI,root/html604/TPythia8Decayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8Decayer.html
https://root.cern/root/html604/TPythia8Decayer.html:6101,Modifiability,Inherit,Inheritance,6101,"arEvent(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Int_tfDebugDebug level; TPythia8*fPythia8Pointer to pythia8. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPythia8Decayer(); constructor. void Init(); Initialize the decayer. void Decay(Int_t pdg, TLorentzVector* p); Decay a single particle. Int_t ImportParticles(TClonesArray* particles); import the decay products into particles array. void SetForceDecay(Int_t type); Set forced decay mode. void ForceDecay(); ForceDecay not yet implemented. Float_t GetPartialBranchingRatio(Int_t ipart). Float_t GetLifetime(Int_t kf); return lifetime in seconds of teh particle with PDG number pdg. void ReadDecayTable(); to read a decay table (not yet implemented). void AppendParticle(Int_t pdg, TLorentzVector* p); Append a particle to the stack. void ClearEvent(); Clear the event stack. TPythia8Decayer(). virtual ~TPythia8Decayer(); {;}. void SetDebugLevel(Int_t debug); {fDebug = debug;}. » Author: Andreas Morsch 04/07/2008 » Copyright (c) 1998-2008, ALICE Experiment at CERN, All rights reserved. *; » Last changed: root/pythia8:$Name$:$Id$ » Last generated: ",MatchSource.WIKI,root/html604/TPythia8Decayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8Decayer.html
https://root.cern/root/html604/TPythia8Decayer.html:6114,Modifiability,Inherit,Inherited,6114,"arEvent(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Int_tfDebugDebug level; TPythia8*fPythia8Pointer to pythia8. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPythia8Decayer(); constructor. void Init(); Initialize the decayer. void Decay(Int_t pdg, TLorentzVector* p); Decay a single particle. Int_t ImportParticles(TClonesArray* particles); import the decay products into particles array. void SetForceDecay(Int_t type); Set forced decay mode. void ForceDecay(); ForceDecay not yet implemented. Float_t GetPartialBranchingRatio(Int_t ipart). Float_t GetLifetime(Int_t kf); return lifetime in seconds of teh particle with PDG number pdg. void ReadDecayTable(); to read a decay table (not yet implemented). void AppendParticle(Int_t pdg, TLorentzVector* p); Append a particle to the stack. void ClearEvent(); Clear the event stack. TPythia8Decayer(). virtual ~TPythia8Decayer(); {;}. void SetDebugLevel(Int_t debug); {fDebug = debug;}. » Author: Andreas Morsch 04/07/2008 » Copyright (c) 1998-2008, ALICE Experiment at CERN, All rights reserved. *; » Last changed: root/pythia8:$Name$:$Id$ » Last generated: ",MatchSource.WIKI,root/html604/TPythia8Decayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8Decayer.html
https://root.cern/root/html604/TPythia8Decayer.html:2322,Security,Hash,Hash,2322,"onst char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceDecay(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Float_tGetLifetime(Int_t kf); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Float_tGetPartialBranchingRatio(Int_t ipart); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual Int_tImportParticles(TClonesArray* particles); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[",MatchSource.WIKI,root/html604/TPythia8Decayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8Decayer.html
https://root.cern/root/html604/TPythia8Decayer.html:4634,Testability,Test,TestBit,4634,"fy(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TPythia8Decayer&operator=(const TPythia8Decayer&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidReadDecayTable(); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetDebugLevel(Int_t debug); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetForceDecay(Int_t type); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TPythia8Decayer(); TPythia8Decayer(const TPythia8Decayer&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TPythia8Decayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8Decayer.html
https://root.cern/root/html604/TPythia8Decayer.html:4673,Testability,Test,TestBits,4673,"fy(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TPythia8Decayer&operator=(const TPythia8Decayer&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidReadDecayTable(); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetDebugLevel(Int_t debug); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetForceDecay(Int_t type); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TPythia8Decayer(); TPythia8Decayer(const TPythia8Decayer&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TPythia8Decayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8Decayer.html
https://root.cern/root/html604/TPythia8Decayer.html:632,Usability,Clear,Clear,632," virtual~TPythia8Decayer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDecay(Int_t pdg, TLorentzVector* p); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceDecay(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Float_tGetLifetime(Int_t kf); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px,",MatchSource.WIKI,root/html604/TPythia8Decayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8Decayer.html
https://root.cern/root/html604/TPythia8Decayer.html:6814,Usability,Clear,ClearEvent,6814,":(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Int_tfDebugDebug level; TPythia8*fPythia8Pointer to pythia8. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPythia8Decayer(); constructor. void Init(); Initialize the decayer. void Decay(Int_t pdg, TLorentzVector* p); Decay a single particle. Int_t ImportParticles(TClonesArray* particles); import the decay products into particles array. void SetForceDecay(Int_t type); Set forced decay mode. void ForceDecay(); ForceDecay not yet implemented. Float_t GetPartialBranchingRatio(Int_t ipart). Float_t GetLifetime(Int_t kf); return lifetime in seconds of teh particle with PDG number pdg. void ReadDecayTable(); to read a decay table (not yet implemented). void AppendParticle(Int_t pdg, TLorentzVector* p); Append a particle to the stack. void ClearEvent(); Clear the event stack. TPythia8Decayer(). virtual ~TPythia8Decayer(); {;}. void SetDebugLevel(Int_t debug); {fDebug = debug;}. » Author: Andreas Morsch 04/07/2008 » Copyright (c) 1998-2008, ALICE Experiment at CERN, All rights reserved. *; » Last changed: root/pythia8:$Name$:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPythia8Decayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8Decayer.html
https://root.cern/root/html604/TPythia8Decayer.html:6828,Usability,Clear,Clear,6828,":(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Int_tfDebugDebug level; TPythia8*fPythia8Pointer to pythia8. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPythia8Decayer(); constructor. void Init(); Initialize the decayer. void Decay(Int_t pdg, TLorentzVector* p); Decay a single particle. Int_t ImportParticles(TClonesArray* particles); import the decay products into particles array. void SetForceDecay(Int_t type); Set forced decay mode. void ForceDecay(); ForceDecay not yet implemented. Float_t GetPartialBranchingRatio(Int_t ipart). Float_t GetLifetime(Int_t kf); return lifetime in seconds of teh particle with PDG number pdg. void ReadDecayTable(); to read a decay table (not yet implemented). void AppendParticle(Int_t pdg, TLorentzVector* p); Append a particle to the stack. void ClearEvent(); Clear the event stack. TPythia8Decayer(). virtual ~TPythia8Decayer(); {;}. void SetDebugLevel(Int_t debug); {fDebug = debug;}. » Author: Andreas Morsch 04/07/2008 » Copyright (c) 1998-2008, ALICE Experiment at CERN, All rights reserved. *; » Last changed: root/pythia8:$Name$:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPythia8Decayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPythia8Decayer.html
https://root.cern/root/html604/TPython.html:3772,Availability,avail,available,3772,"oxy_CheckExact(PyObject* pyobject); static void*ObjectProxy_AsVoidPtr(PyObject* pyobject); static Bool_tObjectProxy_Check(PyObject* pyobject); static Bool_tObjectProxy_CheckExact(PyObject* pyobject); static PyObject*ObjectProxy_FromVoidPtr(void* addr, const char* classname, Bool_t python_owns = kFALSE); TPython&operator=(const TPython&); static voidPrompt(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPython(); TPython(const TPython&). private:. static Bool_tInitialize(). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t Initialize(); Private initialization method: setup the python interpreter and load the; ROOT module. Bool_t Import(const char* name); Import the named python module and create Cling equivalents for its classes; and methods. void LoadMacro(const char* name); Execute the give python script as if it were a macro (effectively an; execfile in __main__), and create Cling equivalents for any newly available; python classes. void ExecScript(const char* name, int argc = 0, const char** argv = 0); Execute a python stand-alone script, with argv CLI arguments. example of use:; const char* argv[] = { ""1"", ""2"", ""3"" };; TPython::ExecScript( ""test.py"", sizeof(argv)/sizeof(argv[0]), argv );. Bool_t Exec(const char* cmd); Execute a python statement (e.g. ""import ROOT""). const TPyReturn Eval(const char* expr); Evaluate a python expression (e.g. ""ROOT.TBrowser()""). Caution: do not hold on to the return value: either store it in a builtin; type (implicit casting will work), or in a pointer to a ROOT object (explicit; casting to a void* is required). Bool_t Bind(TObject* object, const char* label); Bind a ROOT object with, at the python side, the name ""label"". void Prompt(); Enter an interactive python session (exit with ^D). State is preserved; between successive calls. Bool_t ObjectProxy_Check(PyObject* pyobject); Test w",MatchSource.WIKI,root/html604/TPython.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPython.html
https://root.cern/root/html604/TPython.html:1231,Modifiability,variab,variables,1231,"Python. class TPython. Python interpreter access. The TPython class allows for access to python objects from Cling. The current; functionality is only basic: ROOT objects and builtin types can freely cross; the boundary between the two interpreters, python objects can be instantiated; and their methods can be called. All other cross-coding is based on strings; that are run on the python interpreter. Examples:. $ cat MyPyClass.py; print 'creating class MyPyClass ... '. class MyPyClass:; def __init__( self ):; print 'in MyPyClass.__init__'. def gime( self, what ):; return what. $ root -l; // Execute a string of python code.; root [0] TPython::Exec( ""print \'Hello World!\'"" );; Hello World!. // Create a TBrowser on the python side, and transfer it back and forth.; // Note the required explicit (void*) cast!; root [1] TBrowser* b = (void*)TPython::Eval( ""ROOT.TBrowser()"" );; root [2] TPython::Bind( b, ""b"" );; root [3] b == (void*) TPython::Eval( ""b"" ); (int)1. // Builtin variables can cross-over by using implicit casts.; root [4] int i = TPython::Eval( ""1 + 1"" );; root [5] i; (int)2. // Load a python module with a class definition, and use it. Casts are; // necessary as the type information can not be otherwise derived.; root [6] TPython::LoadMacro( ""MyPyClass.py"" );; creating class MyPyClass ...; root [7] MyPyClass m;; in MyPyClass.__init__; root [8] std::string s = (char*)m.gime( ""aap"" );; root [9] s; (class TString)""aap"". It is possible to switch between interpreters by calling ""TPython::Prompt()""; on the Cling side, while returning with ^D (EOF). State is preserved between; successive switches. The API part provides (direct) C++ access to the bindings functionality of; PyROOT. It allows verifying that you deal with a PyROOT python object in the; first place (ObjectProxy_Check for ObjectProxy and any derived types, as well; as ObjectProxy_CheckExact for ObjectProxy's only); and it allows conversions; of void* to an ObjectProxy and vice versa. Function Members (Methods",MatchSource.WIKI,root/html604/TPython.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPython.html
https://root.cern/root/html604/TPython.html:3294,Modifiability,Inherit,Inheritance,3294,"st char* label); static TClass*Class(); static const TPyReturnEval(const char* expr); static Bool_tExec(const char* cmd); static voidExecScript(const char* name, int argc = 0, const char** argv = 0); static Bool_tImport(const char* name); virtual TClass*IsA() const; static voidLoadMacro(const char* name); static Bool_tMethodProxy_Check(PyObject* pyobject); static Bool_tMethodProxy_CheckExact(PyObject* pyobject); static void*ObjectProxy_AsVoidPtr(PyObject* pyobject); static Bool_tObjectProxy_Check(PyObject* pyobject); static Bool_tObjectProxy_CheckExact(PyObject* pyobject); static PyObject*ObjectProxy_FromVoidPtr(void* addr, const char* classname, Bool_t python_owns = kFALSE); TPython&operator=(const TPython&); static voidPrompt(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPython(); TPython(const TPython&). private:. static Bool_tInitialize(). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t Initialize(); Private initialization method: setup the python interpreter and load the; ROOT module. Bool_t Import(const char* name); Import the named python module and create Cling equivalents for its classes; and methods. void LoadMacro(const char* name); Execute the give python script as if it were a macro (effectively an; execfile in __main__), and create Cling equivalents for any newly available; python classes. void ExecScript(const char* name, int argc = 0, const char** argv = 0); Execute a python stand-alone script, with argv CLI arguments. example of use:; const char* argv[] = { ""1"", ""2"", ""3"" };; TPython::ExecScript( ""test.py"", sizeof(argv)/sizeof(argv[0]), argv );. Bool_t Exec(const char* cmd); Execute a python statement (e.g. ""import ROOT""). const TPyReturn Eval(const char* expr); Evaluate a python expression (e.g. ""ROOT.TBrowser()""). Caution: do not hold on to the return value: either store it in a builtin; type (imp",MatchSource.WIKI,root/html604/TPython.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPython.html
https://root.cern/root/html604/TPython.html:3307,Modifiability,Inherit,Inherited,3307,"st char* label); static TClass*Class(); static const TPyReturnEval(const char* expr); static Bool_tExec(const char* cmd); static voidExecScript(const char* name, int argc = 0, const char** argv = 0); static Bool_tImport(const char* name); virtual TClass*IsA() const; static voidLoadMacro(const char* name); static Bool_tMethodProxy_Check(PyObject* pyobject); static Bool_tMethodProxy_CheckExact(PyObject* pyobject); static void*ObjectProxy_AsVoidPtr(PyObject* pyobject); static Bool_tObjectProxy_Check(PyObject* pyobject); static Bool_tObjectProxy_CheckExact(PyObject* pyobject); static PyObject*ObjectProxy_FromVoidPtr(void* addr, const char* classname, Bool_t python_owns = kFALSE); TPython&operator=(const TPython&); static voidPrompt(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPython(); TPython(const TPython&). private:. static Bool_tInitialize(). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t Initialize(); Private initialization method: setup the python interpreter and load the; ROOT module. Bool_t Import(const char* name); Import the named python module and create Cling equivalents for its classes; and methods. void LoadMacro(const char* name); Execute the give python script as if it were a macro (effectively an; execfile in __main__), and create Cling equivalents for any newly available; python classes. void ExecScript(const char* name, int argc = 0, const char** argv = 0); Execute a python stand-alone script, with argv CLI arguments. example of use:; const char* argv[] = { ""1"", ""2"", ""3"" };; TPython::ExecScript( ""test.py"", sizeof(argv)/sizeof(argv[0]), argv );. Bool_t Exec(const char* cmd); Execute a python statement (e.g. ""import ROOT""). const TPyReturn Eval(const char* expr); Evaluate a python expression (e.g. ""ROOT.TBrowser()""). Caution: do not hold on to the return value: either store it in a builtin; type (imp",MatchSource.WIKI,root/html604/TPython.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPython.html
https://root.cern/root/html604/TPython.html:1349,Performance,Load,Load,1349,"t; functionality is only basic: ROOT objects and builtin types can freely cross; the boundary between the two interpreters, python objects can be instantiated; and their methods can be called. All other cross-coding is based on strings; that are run on the python interpreter. Examples:. $ cat MyPyClass.py; print 'creating class MyPyClass ... '. class MyPyClass:; def __init__( self ):; print 'in MyPyClass.__init__'. def gime( self, what ):; return what. $ root -l; // Execute a string of python code.; root [0] TPython::Exec( ""print \'Hello World!\'"" );; Hello World!. // Create a TBrowser on the python side, and transfer it back and forth.; // Note the required explicit (void*) cast!; root [1] TBrowser* b = (void*)TPython::Eval( ""ROOT.TBrowser()"" );; root [2] TPython::Bind( b, ""b"" );; root [3] b == (void*) TPython::Eval( ""b"" ); (int)1. // Builtin variables can cross-over by using implicit casts.; root [4] int i = TPython::Eval( ""1 + 1"" );; root [5] i; (int)2. // Load a python module with a class definition, and use it. Casts are; // necessary as the type information can not be otherwise derived.; root [6] TPython::LoadMacro( ""MyPyClass.py"" );; creating class MyPyClass ...; root [7] MyPyClass m;; in MyPyClass.__init__; root [8] std::string s = (char*)m.gime( ""aap"" );; root [9] s; (class TString)""aap"". It is possible to switch between interpreters by calling ""TPython::Prompt()""; on the Cling side, while returning with ^D (EOF). State is preserved between; successive switches. The API part provides (direct) C++ access to the bindings functionality of; PyROOT. It allows verifying that you deal with a PyROOT python object in the; first place (ObjectProxy_Check for ObjectProxy and any derived types, as well; as ObjectProxy_CheckExact for ObjectProxy's only); and it allows conversions; of void* to an ObjectProxy and vice versa. Function Members (Methods); public:. virtual~TPython(); static Bool_tBind(TObject* object, const char* label); static TClass*Class(); static const TPyR",MatchSource.WIKI,root/html604/TPython.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPython.html
https://root.cern/root/html604/TPython.html:1504,Performance,Load,LoadMacro,1504," objects can be instantiated; and their methods can be called. All other cross-coding is based on strings; that are run on the python interpreter. Examples:. $ cat MyPyClass.py; print 'creating class MyPyClass ... '. class MyPyClass:; def __init__( self ):; print 'in MyPyClass.__init__'. def gime( self, what ):; return what. $ root -l; // Execute a string of python code.; root [0] TPython::Exec( ""print \'Hello World!\'"" );; Hello World!. // Create a TBrowser on the python side, and transfer it back and forth.; // Note the required explicit (void*) cast!; root [1] TBrowser* b = (void*)TPython::Eval( ""ROOT.TBrowser()"" );; root [2] TPython::Bind( b, ""b"" );; root [3] b == (void*) TPython::Eval( ""b"" ); (int)1. // Builtin variables can cross-over by using implicit casts.; root [4] int i = TPython::Eval( ""1 + 1"" );; root [5] i; (int)2. // Load a python module with a class definition, and use it. Casts are; // necessary as the type information can not be otherwise derived.; root [6] TPython::LoadMacro( ""MyPyClass.py"" );; creating class MyPyClass ...; root [7] MyPyClass m;; in MyPyClass.__init__; root [8] std::string s = (char*)m.gime( ""aap"" );; root [9] s; (class TString)""aap"". It is possible to switch between interpreters by calling ""TPython::Prompt()""; on the Cling side, while returning with ^D (EOF). State is preserved between; successive switches. The API part provides (direct) C++ access to the bindings functionality of; PyROOT. It allows verifying that you deal with a PyROOT python object in the; first place (ObjectProxy_Check for ObjectProxy and any derived types, as well; as ObjectProxy_CheckExact for ObjectProxy's only); and it allows conversions; of void* to an ObjectProxy and vice versa. Function Members (Methods); public:. virtual~TPython(); static Bool_tBind(TObject* object, const char* label); static TClass*Class(); static const TPyReturnEval(const char* expr); static Bool_tExec(const char* cmd); static voidExecScript(const char* name, int argc = 0, const char",MatchSource.WIKI,root/html604/TPython.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPython.html
https://root.cern/root/html604/TPython.html:3456,Performance,load,load,3456,"Bool_tExec(const char* cmd); static voidExecScript(const char* name, int argc = 0, const char** argv = 0); static Bool_tImport(const char* name); virtual TClass*IsA() const; static voidLoadMacro(const char* name); static Bool_tMethodProxy_Check(PyObject* pyobject); static Bool_tMethodProxy_CheckExact(PyObject* pyobject); static void*ObjectProxy_AsVoidPtr(PyObject* pyobject); static Bool_tObjectProxy_Check(PyObject* pyobject); static Bool_tObjectProxy_CheckExact(PyObject* pyobject); static PyObject*ObjectProxy_FromVoidPtr(void* addr, const char* classname, Bool_t python_owns = kFALSE); TPython&operator=(const TPython&); static voidPrompt(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPython(); TPython(const TPython&). private:. static Bool_tInitialize(). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t Initialize(); Private initialization method: setup the python interpreter and load the; ROOT module. Bool_t Import(const char* name); Import the named python module and create Cling equivalents for its classes; and methods. void LoadMacro(const char* name); Execute the give python script as if it were a macro (effectively an; execfile in __main__), and create Cling equivalents for any newly available; python classes. void ExecScript(const char* name, int argc = 0, const char** argv = 0); Execute a python stand-alone script, with argv CLI arguments. example of use:; const char* argv[] = { ""1"", ""2"", ""3"" };; TPython::ExecScript( ""test.py"", sizeof(argv)/sizeof(argv[0]), argv );. Bool_t Exec(const char* cmd); Execute a python statement (e.g. ""import ROOT""). const TPyReturn Eval(const char* expr); Evaluate a python expression (e.g. ""ROOT.TBrowser()""). Caution: do not hold on to the return value: either store it in a builtin; type (implicit casting will work), or in a pointer to a ROOT object (explicit; casting to a void* is ",MatchSource.WIKI,root/html604/TPython.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPython.html
https://root.cern/root/html604/TPython.html:3607,Performance,Load,LoadMacro,3607,"oxy_CheckExact(PyObject* pyobject); static void*ObjectProxy_AsVoidPtr(PyObject* pyobject); static Bool_tObjectProxy_Check(PyObject* pyobject); static Bool_tObjectProxy_CheckExact(PyObject* pyobject); static PyObject*ObjectProxy_FromVoidPtr(void* addr, const char* classname, Bool_t python_owns = kFALSE); TPython&operator=(const TPython&); static voidPrompt(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPython(); TPython(const TPython&). private:. static Bool_tInitialize(). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t Initialize(); Private initialization method: setup the python interpreter and load the; ROOT module. Bool_t Import(const char* name); Import the named python module and create Cling equivalents for its classes; and methods. void LoadMacro(const char* name); Execute the give python script as if it were a macro (effectively an; execfile in __main__), and create Cling equivalents for any newly available; python classes. void ExecScript(const char* name, int argc = 0, const char** argv = 0); Execute a python stand-alone script, with argv CLI arguments. example of use:; const char* argv[] = { ""1"", ""2"", ""3"" };; TPython::ExecScript( ""test.py"", sizeof(argv)/sizeof(argv[0]), argv );. Bool_t Exec(const char* cmd); Execute a python statement (e.g. ""import ROOT""). const TPyReturn Eval(const char* expr); Evaluate a python expression (e.g. ""ROOT.TBrowser()""). Caution: do not hold on to the return value: either store it in a builtin; type (implicit casting will work), or in a pointer to a ROOT object (explicit; casting to a void* is required). Bool_t Bind(TObject* object, const char* label); Bind a ROOT object with, at the python side, the name ""label"". void Prompt(); Enter an interactive python session (exit with ^D). State is preserved; between successive calls. Bool_t ObjectProxy_Check(PyObject* pyobject); Test w",MatchSource.WIKI,root/html604/TPython.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPython.html
https://root.cern/root/html604/TPython.html:291,Security,access,access,291,". TPython. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » BINDINGS; » PYROOT; » TPython. class TPython. Python interpreter access. The TPython class allows for access to python objects from Cling. The current; functionality is only basic: ROOT objects and builtin types can freely cross; the boundary between the two interpreters, python objects can be instantiated; and their methods can be called. All other cross-coding is based on strings; that are run on the python interpreter. Examples:. $ cat MyPyClass.py; print 'creating class MyPyClass ... '. class MyPyClass:; def __init__( self ):; print 'in MyPyClass.__init__'. def gime( self, what ):; return what. $ root -l; // Execute a string of python code.; root [0] TPython::Exec( ""print \'Hello World!\'"" );; Hello World!. // Create a TBrowser on the python side, and transfer it back and forth.; // Note the required explicit (void*) cast!; root [1] TBrowser* b = (void*)TPython::Eval( ""ROOT.TBrowser()"" );; root [2] TPython::Bind( b, ""b"" );; root [3] b == (void*) TPython::Eval( ""b"" ); (int)1. // Builtin variables can cross-over by using implicit casts.; root [4] int i = TPython::Eval( ""1 + 1"" );; root [5] i; (int)2. // Load a python module with a class definition, and use it. Casts are; // necessary as the type information can not be otherwise derived.; root [6] TPython::LoadMacro( ""MyPyClass.py"" );; creating class MyPyClass ...; root [7] MyPyClass m;; in MyPyClass.__init__; root [8] std::string s = (char*)m.gime( ""aap"" );; root [9] s; (class TString)""aap"". It is possible to switch between interpreters by calling ""TPython::Prompt()""; on the Cling side, while returning with ^D (EOF). State is preserved between; successive switches. The API part provides (direct) C++ access to the bindings functionality of; PyROOT. It allows verifying that you deal with a PyROO",MatchSource.WIKI,root/html604/TPython.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPython.html
https://root.cern/root/html604/TPython.html:328,Security,access,access,328,". TPython. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » BINDINGS; » PYROOT; » TPython. class TPython. Python interpreter access. The TPython class allows for access to python objects from Cling. The current; functionality is only basic: ROOT objects and builtin types can freely cross; the boundary between the two interpreters, python objects can be instantiated; and their methods can be called. All other cross-coding is based on strings; that are run on the python interpreter. Examples:. $ cat MyPyClass.py; print 'creating class MyPyClass ... '. class MyPyClass:; def __init__( self ):; print 'in MyPyClass.__init__'. def gime( self, what ):; return what. $ root -l; // Execute a string of python code.; root [0] TPython::Exec( ""print \'Hello World!\'"" );; Hello World!. // Create a TBrowser on the python side, and transfer it back and forth.; // Note the required explicit (void*) cast!; root [1] TBrowser* b = (void*)TPython::Eval( ""ROOT.TBrowser()"" );; root [2] TPython::Bind( b, ""b"" );; root [3] b == (void*) TPython::Eval( ""b"" ); (int)1. // Builtin variables can cross-over by using implicit casts.; root [4] int i = TPython::Eval( ""1 + 1"" );; root [5] i; (int)2. // Load a python module with a class definition, and use it. Casts are; // necessary as the type information can not be otherwise derived.; root [6] TPython::LoadMacro( ""MyPyClass.py"" );; creating class MyPyClass ...; root [7] MyPyClass m;; in MyPyClass.__init__; root [8] std::string s = (char*)m.gime( ""aap"" );; root [9] s; (class TString)""aap"". It is possible to switch between interpreters by calling ""TPython::Prompt()""; on the Cling side, while returning with ^D (EOF). State is preserved between; successive switches. The API part provides (direct) C++ access to the bindings functionality of; PyROOT. It allows verifying that you deal with a PyROO",MatchSource.WIKI,root/html604/TPython.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPython.html
https://root.cern/root/html604/TPython.html:1906,Security,access,access,1906,"'Hello World!\'"" );; Hello World!. // Create a TBrowser on the python side, and transfer it back and forth.; // Note the required explicit (void*) cast!; root [1] TBrowser* b = (void*)TPython::Eval( ""ROOT.TBrowser()"" );; root [2] TPython::Bind( b, ""b"" );; root [3] b == (void*) TPython::Eval( ""b"" ); (int)1. // Builtin variables can cross-over by using implicit casts.; root [4] int i = TPython::Eval( ""1 + 1"" );; root [5] i; (int)2. // Load a python module with a class definition, and use it. Casts are; // necessary as the type information can not be otherwise derived.; root [6] TPython::LoadMacro( ""MyPyClass.py"" );; creating class MyPyClass ...; root [7] MyPyClass m;; in MyPyClass.__init__; root [8] std::string s = (char*)m.gime( ""aap"" );; root [9] s; (class TString)""aap"". It is possible to switch between interpreters by calling ""TPython::Prompt()""; on the Cling side, while returning with ^D (EOF). State is preserved between; successive switches. The API part provides (direct) C++ access to the bindings functionality of; PyROOT. It allows verifying that you deal with a PyROOT python object in the; first place (ObjectProxy_Check for ObjectProxy and any derived types, as well; as ObjectProxy_CheckExact for ObjectProxy's only); and it allows conversions; of void* to an ObjectProxy and vice versa. Function Members (Methods); public:. virtual~TPython(); static Bool_tBind(TObject* object, const char* label); static TClass*Class(); static const TPyReturnEval(const char* expr); static Bool_tExec(const char* cmd); static voidExecScript(const char* name, int argc = 0, const char** argv = 0); static Bool_tImport(const char* name); virtual TClass*IsA() const; static voidLoadMacro(const char* name); static Bool_tMethodProxy_Check(PyObject* pyobject); static Bool_tMethodProxy_CheckExact(PyObject* pyobject); static void*ObjectProxy_AsVoidPtr(PyObject* pyobject); static Bool_tObjectProxy_Check(PyObject* pyobject); static Bool_tObjectProxy_CheckExact(PyObject* pyobject); static PyObje",MatchSource.WIKI,root/html604/TPython.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPython.html
https://root.cern/root/html604/TPython.html:4013,Testability,test,test,4013,"ool_t python_owns = kFALSE); TPython&operator=(const TPython&); static voidPrompt(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPython(); TPython(const TPython&). private:. static Bool_tInitialize(). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t Initialize(); Private initialization method: setup the python interpreter and load the; ROOT module. Bool_t Import(const char* name); Import the named python module and create Cling equivalents for its classes; and methods. void LoadMacro(const char* name); Execute the give python script as if it were a macro (effectively an; execfile in __main__), and create Cling equivalents for any newly available; python classes. void ExecScript(const char* name, int argc = 0, const char** argv = 0); Execute a python stand-alone script, with argv CLI arguments. example of use:; const char* argv[] = { ""1"", ""2"", ""3"" };; TPython::ExecScript( ""test.py"", sizeof(argv)/sizeof(argv[0]), argv );. Bool_t Exec(const char* cmd); Execute a python statement (e.g. ""import ROOT""). const TPyReturn Eval(const char* expr); Evaluate a python expression (e.g. ""ROOT.TBrowser()""). Caution: do not hold on to the return value: either store it in a builtin; type (implicit casting will work), or in a pointer to a ROOT object (explicit; casting to a void* is required). Bool_t Bind(TObject* object, const char* label); Bind a ROOT object with, at the python side, the name ""label"". void Prompt(); Enter an interactive python session (exit with ^D). State is preserved; between successive calls. Bool_t ObjectProxy_Check(PyObject* pyobject); Test whether the type of the given pyobject is of ObjectProxy type or any; derived type. Bool_t ObjectProxy_CheckExact(PyObject* pyobject); Test whether the type of the given pyobject is ObjectProxy type. Bool_t MethodProxy_Check(PyObject* pyobject); Test whether the type of the g",MatchSource.WIKI,root/html604/TPython.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPython.html
https://root.cern/root/html604/TPython.html:4694,Testability,Test,Test,4694," it were a macro (effectively an; execfile in __main__), and create Cling equivalents for any newly available; python classes. void ExecScript(const char* name, int argc = 0, const char** argv = 0); Execute a python stand-alone script, with argv CLI arguments. example of use:; const char* argv[] = { ""1"", ""2"", ""3"" };; TPython::ExecScript( ""test.py"", sizeof(argv)/sizeof(argv[0]), argv );. Bool_t Exec(const char* cmd); Execute a python statement (e.g. ""import ROOT""). const TPyReturn Eval(const char* expr); Evaluate a python expression (e.g. ""ROOT.TBrowser()""). Caution: do not hold on to the return value: either store it in a builtin; type (implicit casting will work), or in a pointer to a ROOT object (explicit; casting to a void* is required). Bool_t Bind(TObject* object, const char* label); Bind a ROOT object with, at the python side, the name ""label"". void Prompt(); Enter an interactive python session (exit with ^D). State is preserved; between successive calls. Bool_t ObjectProxy_Check(PyObject* pyobject); Test whether the type of the given pyobject is of ObjectProxy type or any; derived type. Bool_t ObjectProxy_CheckExact(PyObject* pyobject); Test whether the type of the given pyobject is ObjectProxy type. Bool_t MethodProxy_Check(PyObject* pyobject); Test whether the type of the given pyobject is of MethodProxy type or any; derived type. Bool_t MethodProxy_CheckExact(PyObject* pyobject); Test whether the type of the given pyobject is MethodProxy type. void* ObjectProxy_AsVoidPtr(PyObject* pyobject); Extract the object pointer held by the ObjectProxy pyobject. PyObject* ObjectProxy_FromVoidPtr(void* addr, const char* classname, Bool_t python_owns = kFALSE); Bind the addr to a python object of class defined by classname. virtual ~TPython(); { }. » Last changed: root/pyroot:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPython.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPython.html
https://root.cern/root/html604/TPython.html:4834,Testability,Test,Test,4834," it were a macro (effectively an; execfile in __main__), and create Cling equivalents for any newly available; python classes. void ExecScript(const char* name, int argc = 0, const char** argv = 0); Execute a python stand-alone script, with argv CLI arguments. example of use:; const char* argv[] = { ""1"", ""2"", ""3"" };; TPython::ExecScript( ""test.py"", sizeof(argv)/sizeof(argv[0]), argv );. Bool_t Exec(const char* cmd); Execute a python statement (e.g. ""import ROOT""). const TPyReturn Eval(const char* expr); Evaluate a python expression (e.g. ""ROOT.TBrowser()""). Caution: do not hold on to the return value: either store it in a builtin; type (implicit casting will work), or in a pointer to a ROOT object (explicit; casting to a void* is required). Bool_t Bind(TObject* object, const char* label); Bind a ROOT object with, at the python side, the name ""label"". void Prompt(); Enter an interactive python session (exit with ^D). State is preserved; between successive calls. Bool_t ObjectProxy_Check(PyObject* pyobject); Test whether the type of the given pyobject is of ObjectProxy type or any; derived type. Bool_t ObjectProxy_CheckExact(PyObject* pyobject); Test whether the type of the given pyobject is ObjectProxy type. Bool_t MethodProxy_Check(PyObject* pyobject); Test whether the type of the given pyobject is of MethodProxy type or any; derived type. Bool_t MethodProxy_CheckExact(PyObject* pyobject); Test whether the type of the given pyobject is MethodProxy type. void* ObjectProxy_AsVoidPtr(PyObject* pyobject); Extract the object pointer held by the ObjectProxy pyobject. PyObject* ObjectProxy_FromVoidPtr(void* addr, const char* classname, Bool_t python_owns = kFALSE); Bind the addr to a python object of class defined by classname. virtual ~TPython(); { }. » Last changed: root/pyroot:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPython.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPython.html
https://root.cern/root/html604/TPython.html:4945,Testability,Test,Test,4945," it were a macro (effectively an; execfile in __main__), and create Cling equivalents for any newly available; python classes. void ExecScript(const char* name, int argc = 0, const char** argv = 0); Execute a python stand-alone script, with argv CLI arguments. example of use:; const char* argv[] = { ""1"", ""2"", ""3"" };; TPython::ExecScript( ""test.py"", sizeof(argv)/sizeof(argv[0]), argv );. Bool_t Exec(const char* cmd); Execute a python statement (e.g. ""import ROOT""). const TPyReturn Eval(const char* expr); Evaluate a python expression (e.g. ""ROOT.TBrowser()""). Caution: do not hold on to the return value: either store it in a builtin; type (implicit casting will work), or in a pointer to a ROOT object (explicit; casting to a void* is required). Bool_t Bind(TObject* object, const char* label); Bind a ROOT object with, at the python side, the name ""label"". void Prompt(); Enter an interactive python session (exit with ^D). State is preserved; between successive calls. Bool_t ObjectProxy_Check(PyObject* pyobject); Test whether the type of the given pyobject is of ObjectProxy type or any; derived type. Bool_t ObjectProxy_CheckExact(PyObject* pyobject); Test whether the type of the given pyobject is ObjectProxy type. Bool_t MethodProxy_Check(PyObject* pyobject); Test whether the type of the given pyobject is of MethodProxy type or any; derived type. Bool_t MethodProxy_CheckExact(PyObject* pyobject); Test whether the type of the given pyobject is MethodProxy type. void* ObjectProxy_AsVoidPtr(PyObject* pyobject); Extract the object pointer held by the ObjectProxy pyobject. PyObject* ObjectProxy_FromVoidPtr(void* addr, const char* classname, Bool_t python_owns = kFALSE); Bind the addr to a python object of class defined by classname. virtual ~TPython(); { }. » Last changed: root/pyroot:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPython.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPython.html
https://root.cern/root/html604/TPython.html:5085,Testability,Test,Test,5085," it were a macro (effectively an; execfile in __main__), and create Cling equivalents for any newly available; python classes. void ExecScript(const char* name, int argc = 0, const char** argv = 0); Execute a python stand-alone script, with argv CLI arguments. example of use:; const char* argv[] = { ""1"", ""2"", ""3"" };; TPython::ExecScript( ""test.py"", sizeof(argv)/sizeof(argv[0]), argv );. Bool_t Exec(const char* cmd); Execute a python statement (e.g. ""import ROOT""). const TPyReturn Eval(const char* expr); Evaluate a python expression (e.g. ""ROOT.TBrowser()""). Caution: do not hold on to the return value: either store it in a builtin; type (implicit casting will work), or in a pointer to a ROOT object (explicit; casting to a void* is required). Bool_t Bind(TObject* object, const char* label); Bind a ROOT object with, at the python side, the name ""label"". void Prompt(); Enter an interactive python session (exit with ^D). State is preserved; between successive calls. Bool_t ObjectProxy_Check(PyObject* pyobject); Test whether the type of the given pyobject is of ObjectProxy type or any; derived type. Bool_t ObjectProxy_CheckExact(PyObject* pyobject); Test whether the type of the given pyobject is ObjectProxy type. Bool_t MethodProxy_Check(PyObject* pyobject); Test whether the type of the given pyobject is of MethodProxy type or any; derived type. Bool_t MethodProxy_CheckExact(PyObject* pyobject); Test whether the type of the given pyobject is MethodProxy type. void* ObjectProxy_AsVoidPtr(PyObject* pyobject); Extract the object pointer held by the ObjectProxy pyobject. PyObject* ObjectProxy_FromVoidPtr(void* addr, const char* classname, Bool_t python_owns = kFALSE); Bind the addr to a python object of class defined by classname. virtual ~TPython(); { }. » Last changed: root/pyroot:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TPython.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TPython.html
https://root.cern/root/html604/TQApplication.html:3815,Availability,Error,Error,3815,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*TApplicat",MatchSource.WIKI,root/html604/TQApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQApplication.html
https://root.cern/root/html604/TQApplication.html:3944,Availability,error,error,3944," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*TApplication::GetIdleCommand() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*T",MatchSource.WIKI,root/html604/TQApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQApplication.html
https://root.cern/root/html604/TQApplication.html:4028,Availability,error,error,4028,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*TApplication::GetIdleCommand() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virt",MatchSource.WIKI,root/html604/TQApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQApplication.html
https://root.cern/root/html604/TQApplication.html:4172,Availability,error,error,4172,"; voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*TApplication::GetIdleCommand() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; v",MatchSource.WIKI,root/html604/TQApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQApplication.html
https://root.cern/root/html604/TQApplication.html:7995,Availability,error,error,7995,"idTApplication::NeedGraphicsLibs(); Bool_tTApplication::NoLogoOpt() const; Bool_tTApplication::NoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTApplication::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const c",MatchSource.WIKI,root/html604/TQApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQApplication.html
https://root.cern/root/html604/TQApplication.html:8116,Availability,error,error,8116,"Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTApplication::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTObject::SetObjectStat(Bool_t stat); voidTApplication::SetReturnFromRun(Bool_t ret); virtual vo",MatchSource.WIKI,root/html604/TQApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQApplication.html
https://root.cern/root/html604/TQApplication.html:11325,Availability,error,error,11325,"(const TQApplication&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static voidTApplication::Close(TApplication* app); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTApplication::Help(const char* line); virtual voidTApplication::LoadGraphicsLibs(); virtual voidTApplication::MakeBatch(); voidTObject::MakeZombie(); static TApplication*TApplication::Open(const char* url, Int_t debug, const char* script); static Int_tTApplication::ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); virtual Long_tTApplication::ProcessRemote(const char* line, Int_t* error = 0); voidTApplication::SetSignalHandler(TSignalHandler* sh). Data Members; public:. static TApplication::EExitOnExceptionTApplication::kAbort; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TApplication::EStatusBitsTApplication::kDefaultApplication; static TApplication::EExitOnExceptionTApplication::kDontExit; static TApplication::EExitOnE",MatchSource.WIKI,root/html604/TQApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQApplication.html
https://root.cern/root/html604/TQApplication.html:12945,Availability,avail,available,12945,"TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TApplication::EStatusBitsTApplication::kDefaultApplication; static TApplication::EExitOnExceptionTApplication::kDontExit; static TApplication::EExitOnExceptionTApplication::kExit; static TApplication::EFileBitsTApplication::kExpression; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TApplication::EStatusBitsTApplication::kProcessRemotely; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. private:. Bool_tfCustomizedflag for customized canvas implimentation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQApplication(); Used by Dictionary(). » Author: Denis Bertini, M. Al-Turany 01/11/2000 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/qtgsi:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQApplication.html
https://root.cern/root/html604/TQApplication.html:6956,Integrability,Message,Message,6956,"om(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTApplication::Init(); voidTApplication::InitializeGraphics(); TObjArray*TApplication::InputFiles() const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*TApplication::IsA() const; virtual Bool_tTApplication::IsCmdThread(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTApplication::IsRunning() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTApplication::KeyPressed(Int_t key)SIGNAL ; virtual voidTApplication::LineProcessed(const char* line)SIGNAL ; virtual voidTApplication::Lower(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static voidTApplication::NeedGraphicsLibs(); Bool_tTApplication::NoLogoOpt() const; Bool_tTApplication::NoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Long_tTApplication::Pr",MatchSource.WIKI,root/html604/TQApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQApplication.html
https://root.cern/root/html604/TQApplication.html:5950,Modifiability,Inherit,InheritsFrom,5950,"GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual voidTApplication::GetOptions(Int_t* argc, char** argv); TSignalHandler*TApplication::GetSignalHandler() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual voidTApplication::HandleException(Int_t sig); virtual voidTApplication::HandleIdleTimer()SIGNAL ; virtual Bool_tTApplication::HandleTermInput(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTApplication::Hide(); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTApplication::Init(); voidTApplication::InitializeGraphics(); TObjArray*TApplication::InputFiles() const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*TApplication::IsA() const; virtual Bool_tTApplication::IsCmdThread(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTApplication::IsRunning() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTApplication::KeyPressed(Int_t key)SIGNAL ; virtual voidTApplication::LineProcessed(const char* line)SIGNAL ; virtual voidTApplication::Lower(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::M",MatchSource.WIKI,root/html604/TQApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQApplication.html
https://root.cern/root/html604/TQApplication.html:6016,Modifiability,Inherit,InheritsFrom,6016,"nst; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual voidTApplication::GetOptions(Int_t* argc, char** argv); TSignalHandler*TApplication::GetSignalHandler() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual voidTApplication::HandleException(Int_t sig); virtual voidTApplication::HandleIdleTimer()SIGNAL ; virtual Bool_tTApplication::HandleTermInput(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTApplication::Hide(); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTApplication::Init(); voidTApplication::InitializeGraphics(); TObjArray*TApplication::InputFiles() const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*TApplication::IsA() const; virtual Bool_tTApplication::IsCmdThread(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTApplication::IsRunning() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTApplication::KeyPressed(Int_t key)SIGNAL ; virtual voidTApplication::LineProcessed(const char* line)SIGNAL ; virtual voidTApplication::Lower(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static voidTApplication::NeedGraph",MatchSource.WIKI,root/html604/TQApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQApplication.html
https://root.cern/root/html604/TQApplication.html:13053,Modifiability,Inherit,Inheritance,13053,"TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TApplication::EStatusBitsTApplication::kDefaultApplication; static TApplication::EExitOnExceptionTApplication::kDontExit; static TApplication::EExitOnExceptionTApplication::kExit; static TApplication::EFileBitsTApplication::kExpression; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TApplication::EStatusBitsTApplication::kProcessRemotely; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. private:. Bool_tfCustomizedflag for customized canvas implimentation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQApplication(); Used by Dictionary(). » Author: Denis Bertini, M. Al-Turany 01/11/2000 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/qtgsi:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQApplication.html
https://root.cern/root/html604/TQApplication.html:13066,Modifiability,Inherit,Inherited,13066,"TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TApplication::EStatusBitsTApplication::kDefaultApplication; static TApplication::EExitOnExceptionTApplication::kDontExit; static TApplication::EExitOnExceptionTApplication::kExit; static TApplication::EFileBitsTApplication::kExpression; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TApplication::EStatusBitsTApplication::kProcessRemotely; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. private:. Bool_tfCustomizedflag for customized canvas implimentation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQApplication(); Used by Dictionary(). » Author: Denis Bertini, M. Al-Turany 01/11/2000 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/qtgsi:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQApplication.html
https://root.cern/root/html604/TQApplication.html:10961,Performance,Load,LoadGraphicsLibs,10961,"(const TQApplication&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static voidTApplication::Close(TApplication* app); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTApplication::Help(const char* line); virtual voidTApplication::LoadGraphicsLibs(); virtual voidTApplication::MakeBatch(); voidTObject::MakeZombie(); static TApplication*TApplication::Open(const char* url, Int_t debug, const char* script); static Int_tTApplication::ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); virtual Long_tTApplication::ProcessRemote(const char* line, Int_t* error = 0); voidTApplication::SetSignalHandler(TSignalHandler* sh). Data Members; public:. static TApplication::EExitOnExceptionTApplication::kAbort; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TApplication::EStatusBitsTApplication::kDefaultApplication; static TApplication::EExitOnExceptionTApplication::kDontExit; static TApplication::EExitOnE",MatchSource.WIKI,root/html604/TQApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQApplication.html
https://root.cern/root/html604/TQApplication.html:5681,Security,Hash,Hash,5681,"ject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*TApplication::GetIdleCommand() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual voidTApplication::GetOptions(Int_t* argc, char** argv); TSignalHandler*TApplication::GetSignalHandler() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual voidTApplication::HandleException(Int_t sig); virtual voidTApplication::HandleIdleTimer()SIGNAL ; virtual Bool_tTApplication::HandleTermInput(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTApplication::Hide(); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTApplication::Init(); voidTApplication::InitializeGraphics(); TObjArray*TApplication::InputFiles() const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*TApplication::IsA() const; virtual Bool_tTApplication::IsCmdThread(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTApplication::IsRunning() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTApplication::KeyPressed(Int_t key)SIGNAL ; virtual voidTApplication::LineProcessed(const c",MatchSource.WIKI,root/html604/TQApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQApplication.html
https://root.cern/root/html604/TQApplication.html:9697,Testability,Test,TestBit,9697,"::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTApplication::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTObject::SetObjectStat(Bool_t stat); voidTApplication::SetReturnFromRun(Bool_t ret); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTApplication::Show(); virtual voidTApplication::ShowMembers(TMemberInspector& insp) const; virtual voidTApplication::StartIdleing(); virtual voidTApplication::StopIdleing(); virtual voidTApplication::Streamer(TBuffer&); voidTApplication::StreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual Int_tTApplication::TabCompletionHook(char* buf, int* pLoc, ostream& out); virtual voidTApplication::Terminate(Int_t status = 0)SIGNAL ; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQApplication(const TQApplication&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQApplication.html
https://root.cern/root/html604/TQApplication.html:9736,Testability,Test,TestBits,9736,"::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTApplication::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTObject::SetObjectStat(Bool_t stat); voidTApplication::SetReturnFromRun(Bool_t ret); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTApplication::Show(); virtual voidTApplication::ShowMembers(TMemberInspector& insp) const; virtual voidTApplication::StartIdleing(); virtual voidTApplication::StopIdleing(); virtual voidTApplication::Streamer(TBuffer&); voidTApplication::StreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual Int_tTApplication::TabCompletionHook(char* buf, int* pLoc, ostream& out); virtual voidTApplication::Terminate(Int_t status = 0)SIGNAL ; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQApplication(const TQApplication&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQApplication.html
https://root.cern/root/html604/TQApplication.html:1282,Usability,Clear,Clear,1282," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TApplication::ApplicationName() const; static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Int_tTApplication::Argc() const; char**TApplication::Argv() const; char*TApplication::Argv(Int_t index) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*TApplication::Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTApplication::ClearInputFiles(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const",MatchSource.WIKI,root/html604/TQApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQApplication.html
https://root.cern/root/html604/TQApplication.html:1323,Usability,Clear,ClearInputFiles,1323," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TApplication::ApplicationName() const; static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Int_tTApplication::Argc() const; char**TApplication::Argv() const; char*TApplication::Argv(Int_t index) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*TApplication::Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTApplication::ClearInputFiles(); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const",MatchSource.WIKI,root/html604/TQApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQApplication.html
https://root.cern/root/html604/TQCanvasImp.html:117,Modifiability,inherit,inheritance,117,". TQCanvasImp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » QTGSI; » TQCanvasImp. class TQCanvasImp: public TCanvasImp. ABC describing GUI independent main window (with menubar, scrollbars; and a drawing area). Function Members (Methods); public:. TCanvas*TCanvasImp::Canvas() const; static TClass*TCanvasImp::Class(); virtual voidTCanvasImp::Close(); virtual voidTCanvasImp::ForceUpdate(); virtual UInt_tTCanvasImp::GetWindowGeometry(Int_t& x, Int_t& y, UInt_t& w, UInt_t& h); virtual Bool_tTCanvasImp::HasEditor() const; virtual Bool_tTCanvasImp::HasMenuBar() const; virtual Bool_tTCanvasImp::HasStatusBar() const; virtual Bool_tTCanvasImp::HasToolBar() const; virtual Bool_tTCanvasImp::HasToolTips() const; virtual voidTCanvasImp::Iconify(); virtual Int_tTCanvasImp::InitWindow(); virtual TClass*TCanvasImp::IsA() const; virtual voidTCanvasImp::RaiseWindow(); virtual voidTCanvasImp::ReallyDelete(); virtual voidTCanvasImp::SetCanvasSize(UInt_t w, UInt_t h); virtual voidTCanvasImp::SetStatusText(const char* text = 0, Int_t partidx = 0); virtual voidTCanvasImp::SetWindowPosition(Int_t x, Int_t y); virtual voidTCanvasImp::SetWindowSize(UInt_t w, UInt_t h); virtual voidTCanvasImp::SetWindowTitle(const char* newTitle); virtual voidTCanvasImp::Show(); virtual voidTCanvasImp::ShowEditor(Bool_t show = kTRUE); virtual voidTCanvasImp::ShowMembers(TMemberInspector& insp) const; virtual voidTCanvasImp::ShowMenuBar(Bool_t show = kTRUE); virtual voidTCanvasImp::ShowStatusBar(Bool_t show = kTRUE); virtual voidTCanvasImp::ShowToolBar(Bool_t show = kTRUE); virtual voidTCanvasImp::ShowToolTips(Bool_t show = kTRUE); virtual voidTCanvasImp::Streamer(TBuffer&); voidTCanvasImp::StreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TQCanvasImp(const TQCanvasImp&). protected:. virtual Bool_tTCanvasImp",MatchSource.WIKI,root/html604/TQCanvasImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCanvasImp.html
https://root.cern/root/html604/TQCanvasImp.html:2311,Modifiability,Inherit,Inheritance,2311,"mp::HasStatusBar() const; virtual Bool_tTCanvasImp::HasToolBar() const; virtual Bool_tTCanvasImp::HasToolTips() const; virtual voidTCanvasImp::Iconify(); virtual Int_tTCanvasImp::InitWindow(); virtual TClass*TCanvasImp::IsA() const; virtual voidTCanvasImp::RaiseWindow(); virtual voidTCanvasImp::ReallyDelete(); virtual voidTCanvasImp::SetCanvasSize(UInt_t w, UInt_t h); virtual voidTCanvasImp::SetStatusText(const char* text = 0, Int_t partidx = 0); virtual voidTCanvasImp::SetWindowPosition(Int_t x, Int_t y); virtual voidTCanvasImp::SetWindowSize(UInt_t w, UInt_t h); virtual voidTCanvasImp::SetWindowTitle(const char* newTitle); virtual voidTCanvasImp::Show(); virtual voidTCanvasImp::ShowEditor(Bool_t show = kTRUE); virtual voidTCanvasImp::ShowMembers(TMemberInspector& insp) const; virtual voidTCanvasImp::ShowMenuBar(Bool_t show = kTRUE); virtual voidTCanvasImp::ShowStatusBar(Bool_t show = kTRUE); virtual voidTCanvasImp::ShowToolBar(Bool_t show = kTRUE); virtual voidTCanvasImp::ShowToolTips(Bool_t show = kTRUE); virtual voidTCanvasImp::Streamer(TBuffer&); voidTCanvasImp::StreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TQCanvasImp(const TQCanvasImp&). protected:. virtual Bool_tTCanvasImp::IsLocked(); virtual voidTCanvasImp::Lock(); TCanvasImp&TCanvasImp::operator=(const TCanvasImp& ci); virtual voidTCanvasImp::Unlock(). Data Members; protected:. TCanvas*TCanvasImp::fCanvasTCanvas associated with this implementation; TQRootCanvas*fQCanvasPointer to the Qt widget (TQRootCanvas). Class Charts. Inheritance Chart:. TCanvasImp. ←; TQCanvasImp. Function documentation; TQCanvasImp(TCanvas *c, const char *name, UInt_t width, UInt_t height); TQCanvasImp ctor. » Author: Denis Bertini 01/11/2000 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/qtgsi:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQCanvasImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCanvasImp.html
https://root.cern/root/html604/TQCanvasMenu.html:1641,Deployability,install,installEventFilter,1641,"t QObject* receiver, const char* member, Qt::ConnectionType = Qt::AutoConnection); static boolQObject::connect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& method, Qt::ConnectionType type = Qt::AutoConnection); voidQObject::deleteLater(); boolQObject::disconnect(const QObject* receiver, const char* member = 0); boolQObject::disconnect(const char* signal = 0, const QObject* receiver = 0, const char* member = 0); static boolQObject::disconnect(const QObject* sender, const char* signal, const QObject* receiver, const char* member); static boolQObject::disconnect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& member); voidQObject::dumpObjectInfo(); voidQObject::dumpObjectTree(); QList<QByteArray>QObject::dynamicPropertyNames() const; virtual boolQObject::event(QEvent*); virtual boolQObject::eventFilter(QObject*, QEvent*); boolQObject::inherits(const char* classname) const; voidQObject::installEventFilter(QObject*); boolQObject::isWidgetType() const; voidQObject::killTimer(int id); virtual const QMetaObject*QObject::metaObject() const; voidQObject::moveToThread(QThread* thread); QStringQObject::objectName() const; QObject*QObject::parent() const; QVariantQObject::property(const char* name) const; virtual intQObject::qt_metacall(QMetaObject::Call, int, void**); virtual void*QObject::qt_metacast(const char*); static uintQObject::registerUserData(); voidQObject::removeEventFilter(QObject*); voidQObject::setObjectName(const QString& name); voidQObject::setParent(QObject*); boolQObject::setProperty(const char* name, const QVariant& value); voidQObject::setUserData(uint id, QObjectUserData* data); boolQObject::signalsBlocked() const; intQObject::startTimer(int interval); QThread*QObject::thread() const; static QStringQObject::tr(const char* s, const char* c = 0); static QStringQObject::tr(const char* s, const char* c, int n); static QStringQObject::trUtf8(const char* s, const char* c",MatchSource.WIKI,root/html604/TQCanvasMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCanvasMenu.html
https://root.cern/root/html604/TQCanvasMenu.html:118,Modifiability,inherit,inheritance,118,". TQCanvasMenu. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » QTGSI; » TQCanvasMenu. class TQCanvasMenu: public QObject. Function Members (Methods); public:. boolQObject::blockSignals(bool b); const QObjectList&QObject::children() const; boolQObject::connect(const QObject* sender, const char* signal, const char* member, Qt::ConnectionType type = Qt::AutoConnection) const; static boolQObject::connect(const QObject* sender, const char* signal, const QObject* receiver, const char* member, Qt::ConnectionType = Qt::AutoConnection); static boolQObject::connect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& method, Qt::ConnectionType type = Qt::AutoConnection); voidQObject::deleteLater(); boolQObject::disconnect(const QObject* receiver, const char* member = 0); boolQObject::disconnect(const char* signal = 0, const QObject* receiver = 0, const char* member = 0); static boolQObject::disconnect(const QObject* sender, const char* signal, const QObject* receiver, const char* member); static boolQObject::disconnect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& member); voidQObject::dumpObjectInfo(); voidQObject::dumpObjectTree(); QList<QByteArray>QObject::dynamicPropertyNames() const; virtual boolQObject::event(QEvent*); virtual boolQObject::eventFilter(QObject*, QEvent*); boolQObject::inherits(const char* classname) const; voidQObject::installEventFilter(QObject*); boolQObject::isWidgetType() const; voidQObject::killTimer(int id); virtual const QMetaObject*QObject::metaObject() const; voidQObject::moveToThread(QThread* thread); QStringQObject::objectName() const; QObject*QObject::parent() const; QVariantQObject::property(const char* name) const; virtual intQObject::qt_metacall(QMetaObject:",MatchSource.WIKI,root/html604/TQCanvasMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCanvasMenu.html
https://root.cern/root/html604/TQCanvasMenu.html:1589,Modifiability,inherit,inherits,1589,"::connect(const QObject* sender, const char* signal, const QObject* receiver, const char* member, Qt::ConnectionType = Qt::AutoConnection); static boolQObject::connect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& method, Qt::ConnectionType type = Qt::AutoConnection); voidQObject::deleteLater(); boolQObject::disconnect(const QObject* receiver, const char* member = 0); boolQObject::disconnect(const char* signal = 0, const QObject* receiver = 0, const char* member = 0); static boolQObject::disconnect(const QObject* sender, const char* signal, const QObject* receiver, const char* member); static boolQObject::disconnect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& member); voidQObject::dumpObjectInfo(); voidQObject::dumpObjectTree(); QList<QByteArray>QObject::dynamicPropertyNames() const; virtual boolQObject::event(QEvent*); virtual boolQObject::eventFilter(QObject*, QEvent*); boolQObject::inherits(const char* classname) const; voidQObject::installEventFilter(QObject*); boolQObject::isWidgetType() const; voidQObject::killTimer(int id); virtual const QMetaObject*QObject::metaObject() const; voidQObject::moveToThread(QThread* thread); QStringQObject::objectName() const; QObject*QObject::parent() const; QVariantQObject::property(const char* name) const; virtual intQObject::qt_metacall(QMetaObject::Call, int, void**); virtual void*QObject::qt_metacast(const char*); static uintQObject::registerUserData(); voidQObject::removeEventFilter(QObject*); voidQObject::setObjectName(const QString& name); voidQObject::setParent(QObject*); boolQObject::setProperty(const char* name, const QVariant& value); voidQObject::setUserData(uint id, QObjectUserData* data); boolQObject::signalsBlocked() const; intQObject::startTimer(int interval); QThread*QObject::thread() const; static QStringQObject::tr(const char* s, const char* c = 0); static QStringQObject::tr(const char* s, const char* c, int n); s",MatchSource.WIKI,root/html604/TQCanvasMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCanvasMenu.html
https://root.cern/root/html604/TQCanvasMenu.html:3921,Modifiability,Inherit,Inheritance,3921,"ta(uint id, QObjectUserData* data); boolQObject::signalsBlocked() const; intQObject::startTimer(int interval); QThread*QObject::thread() const; static QStringQObject::tr(const char* s, const char* c = 0); static QStringQObject::tr(const char* s, const char* c, int n); static QStringQObject::trUtf8(const char* s, const char* c = 0); static QStringQObject::trUtf8(const char* s, const char* c, int n); QObjectUserData*QObject::userData(uint id) const. protected:. virtual voidQObject::childEvent(QChildEvent*); virtual voidQObject::connectNotify(const char* signal); virtual voidQObject::customEvent(QEvent*); voidQObject::destroyed(QObject* = 0); virtual voidQObject::disconnectNotify(const char* signal); intQObject::receivers(const char* signal) const; QObject*QObject::sender() const; intQObject::senderSignalIndex() const; virtual voidQObject::timerEvent(QTimerEvent*). Data Members; public:. static const QMetaObjectstaticMetaObject; static const QMetaObjectQObject::staticMetaObject. protected:. QScopedPointer<QObjectData>QObject::d_ptr; TObject*fCurrObjcurrent selected object; TQRootDialog*fDialogthe TQRootDialog which is used to prompt for; TListfMethodslist of Root metheds associated with the selected object; doublefMousePosXmouse position in user coordinate; doublefMousePosYmouse position in user coordinate; QWidget*fParentparents widgets; QPopupMenu*fPopupQt popup menu; QWidget*fTabWinparents widgets; TCanvas*fcpointer to the ROOT canvas; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance Chart:. QObject. ←; TQCanvasMenu. Function documentation. » Author: Denis Bertini, M. AL-Turany 01/11/2000 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/qtgsi:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQCanvasMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCanvasMenu.html
https://root.cern/root/html604/TQClass.html:5832,Availability,Error,Error,5832,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; char*TClass::EscapeChars(const char* text) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TVirtualStreamerInfo*TClass::FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; TVirtualStreamerInfo*TClass::FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVirtualStreamerInfo*TClass::FindStreamerInfo(UInt_t checksum) const; TVirtualStreamerInfo*TClass::FindStreamerInfoAbstractEmulated(UInt_t checksum) const; TClass*TClass::GetActualClass(const void* ob",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:6011,Availability,error,error,6011,"ouble_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; char*TClass::EscapeChars(const char* text) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TVirtualStreamerInfo*TClass::FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; TVirtualStreamerInfo*TClass::FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVirtualStreamerInfo*TClass::FindStreamerInfo(UInt_t checksum) const; TVirtualStreamerInfo*TClass::FindStreamerInfoAbstractEmulated(UInt_t checksum) const; TClass*TClass::GetActualClass(const void* object) const; TDictAttributeMap*TDictionary::GetAttributeMap() const; TClass*TClass::GetBaseClass(const char* classname); TClass*TClass::GetBaseClass(const TClass* base); Int_tTCla",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:6095,Availability,error,error,6095,"Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; char*TClass::EscapeChars(const char* text) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TVirtualStreamerInfo*TClass::FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; TVirtualStreamerInfo*TClass::FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVirtualStreamerInfo*TClass::FindStreamerInfo(UInt_t checksum) const; TVirtualStreamerInfo*TClass::FindStreamerInfoAbstractEmulated(UInt_t checksum) const; TClass*TClass::GetActualClass(const void* object) const; TDictAttributeMap*TDictionary::GetAttributeMap() const; TClass*TClass::GetBaseClass(const char* classname); TClass*TClass::GetBaseClass(const TClass* base); Int_tTClass::GetBaseClassOffset(const TClass* toBase, void* address = 0, bool isDerivedObject",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:20147,Deployability,Update,UpdateInterpreterStateMarker,20147,"t::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tTClass::WriteBuffer(TBuffer& b, void* pointer, const char* info = """"). protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TVirtualStreamerInfo*TClass::FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; voidTClass::GetMissingDictionariesForBaseClasses(TCollection& result, TCollection& visited, bool recurse); voidTClass::GetMissingDictionariesForMembers(TCollection& result, TCollection& visited, bool recurse); voidTClass::GetMissingDictionariesForPairElements(TCollection& result, TCollection& visited, bool recurse); voidTClass::GetMissingDictionariesWithRecursionCheck(TCollection& result, TCollection& visited, bool recurse); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Bool_tTDictionary::UpdateInterpreterStateMarker(). private:. TQClass&operator=(const TQClass&); TQClass(const TClass&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TDictionary::ESTLTypeTDictionary::kBitset; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TClass::ENewTypeTClass::kClassNew; static TClass::(anonymous)TClass::kClas",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:1226,Energy Efficiency,power,powerfull,1226," class charts. ROOT; » CORE; » BASE; » TQClass. class TQClass: public TQObject, public TClass. This is the ROOT implementation of the Qt object communication; mechanism (see also http://www.troll.no/qt/metaobjects.html). Signals and slots are used for communication between objects.; When an object has changed in some way that might be interesting; for the outside world, it emits a signal to tell whoever is; listening. All slots that are connected to this signal will be; activated (called). It is even possible to connect a signal; directly to another signal (this will emit the second signal; immediately whenever the first is emitted.) There is no limitation; on the number of slots that can be connected to a signal.; The slots will be activated in the order they were connected; to the signal. This mechanism allows objects to be easily reused,; because the object that emits a signal does not need to know; to which objects the signals are connected.; Together, signals and slots make up a powerfull component; programming mechanism. This implementation is provided by; Valeriy Onuchin (onuchin@sirius.ihep.su). Function Members (Methods); public:. virtual~TQClass(); voidTObject::AbstractMethod(const char* method) const; static voidTClass::AddClass(TClass* cl); static voidTClass::AddClassToDeclIdMap(TDictionary::DeclId_t id, TClass* cl); voidTClass::AddImplFile(const char* filename, int line); voidTClass::AddInstance(Bool_t heap = kFALSE); static Bool_tTClass::AddRule(const char* rule); voidTClass::AdoptMemberStreamer(const char* name, TMemberStreamer* strm); voidTClass::AdoptReferenceProxy(TVirtualRefProxy* proxy); voidTClass::AdoptSchemaRules(ROOT::TSchemaRuleSet* rules); voidTClass::AdoptStreamer(TClassStreamer* strm); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Int_tTClass::AutoBrowse(TObject* obj, TBrowser* browser); static Bool_tTQObject::BlockAllSignals(Bool_t b)",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:14045,Integrability,Message,Message,14045," TMemberInspector& insp, Bool_t isTransient); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; static TClass::ENewTypeTClass::IsCallingNew(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTClass::IsFolder() const; Bool_tTClass::IsFolder(void* obj) const; Bool_tTClass::IsForeign() const; Bool_tTClass::IsLoaded() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTClass::IsStartingWithTObject() const; Bool_tTClass::IsTObject() const; Bool_tTClass::IsVersioned() const; Bool_tTObject::IsZombie() const; static TClass*TClass::Load(TBuffer& b); static TClass*TClass::LoadClass(const char* requestedname, Bool_t silent); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTClass::ls(Option_t* opt = """") const; voidTClass::MakeCustomMenuList(); Bool_tTClass::MatchLegacyCheckSum(UInt_t checksum) const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; voidTClass::Move(void* arenaFrom, void* arenaTo) const; void*TClass::New(TClass::ENewType defConstructor = kClassNew, Bool_t quiet = kFALSE) const; void*TClass::New(void* arena, TClass::ENewType defConstructor = kClassNew) const; void*TClass::NewArray(Long_t nElements, TClass::ENewType defConstructor = kClassNew) const; void*TClass::NewArray(Long_t nElements, void* arena, TClass::ENewType defConstructor = kClassNew) const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:113,Modifiability,inherit,inheritance,113,". TQClass. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TQClass. class TQClass: public TQObject, public TClass. This is the ROOT implementation of the Qt object communication; mechanism (see also http://www.troll.no/qt/metaobjects.html). Signals and slots are used for communication between objects.; When an object has changed in some way that might be interesting; for the outside world, it emits a signal to tell whoever is; listening. All slots that are connected to this signal will be; activated (called). It is even possible to connect a signal; directly to another signal (this will emit the second signal; immediately whenever the first is emitted.) There is no limitation; on the number of slots that can be connected to a signal.; The slots will be activated in the order they were connected; to the signal. This mechanism allows objects to be easily reused,; because the object that emits a signal does not need to know; to which objects the signals are connected.; Together, signals and slots make up a powerfull component; programming mechanism. This implementation is provided by; Valeriy Onuchin (onuchin@sirius.ihep.su). Function Members (Methods); public:. virtual~TQClass(); voidTObject::AbstractMethod(const char* method) const; static voidTClass::AddClass(TClass* cl); static voidTClass::AddClassToDeclIdMap(TDictionary::DeclId_t id, TClass* cl); voidTClass::AddImplFile(const char* filename, int line); voidTClass::AddInstance(Bool_t heap = kFALSE); static Bool_tTClass::AddRule(const char* rule); voidTClass::AdoptMemberStreamer(const char* name, TMemberStreamer* strm); voidTClass::AdoptReferenceProxy(TVirtualRefProxy* proxy); voidTClass::AdoptSchemaRules(ROOT::TSchemaRuleSet* rules); voidTClass::AdoptStreamer(TClassStreamer* strm); virtual voidTObject::AppendPad(",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:12865,Modifiability,Inherit,InheritsFrom,12865,"TClass::GetStreamerInfo(Int_t version = 0) const; TVirtualStreamerInfo*TClass::GetStreamerInfoAbstractEmulated(Int_t version = 0) const; const TObjArray*TClass::GetStreamerInfos() const; virtual const char*TNamed::GetTitle() const; const type_info*TClass::GetTypeInfo() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTClass::HasDataMemberInfo() const; Bool_tTClass::HasDefaultConstructor() const; Bool_tTClass::HasDictionary(); static Bool_tTClass::HasDictionarySelection(const char* clname); virtual ULong_tTNamed::Hash() const; Bool_tTClass::HasInterpreterInfo() const; Bool_tTClass::HasInterpreterInfoInMemory() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); voidTClass::IgnoreTObjectStreamer(Bool_t ignore = kTRUE); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTClass::InheritsFrom(const char* cl) const; virtual Bool_tTClass::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTClass::InterpretedShowMembers(void* obj, TMemberInspector& insp, Bool_t isTransient); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; static TClass::ENewTypeTClass::IsCallingNew(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTClass::IsFolder() const; Bool_tTClass::IsFolder(void* obj) const; Bool_tTClass::IsForeign() const; Bool_tTClass::IsLoaded() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTClass::IsStartingWithTObject() const; Bool_tTClass::IsTObject() const; Bool_tTClass::IsVersioned() const; Bool_tTObject::IsZombie() const; static TClass*TClass::Load(TBuffer& b); static TClass*TClass::LoadClass(const char* requestedname, Bool_t silent); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTClass::ls(Option_t* opt = """"",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:12923,Modifiability,Inherit,InheritsFrom,12923,"StreamerInfo*TClass::GetStreamerInfoAbstractEmulated(Int_t version = 0) const; const TObjArray*TClass::GetStreamerInfos() const; virtual const char*TNamed::GetTitle() const; const type_info*TClass::GetTypeInfo() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTClass::HasDataMemberInfo() const; Bool_tTClass::HasDefaultConstructor() const; Bool_tTClass::HasDictionary(); static Bool_tTClass::HasDictionarySelection(const char* clname); virtual ULong_tTNamed::Hash() const; Bool_tTClass::HasInterpreterInfo() const; Bool_tTClass::HasInterpreterInfoInMemory() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); voidTClass::IgnoreTObjectStreamer(Bool_t ignore = kTRUE); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTClass::InheritsFrom(const char* cl) const; virtual Bool_tTClass::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTClass::InterpretedShowMembers(void* obj, TMemberInspector& insp, Bool_t isTransient); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; static TClass::ENewTypeTClass::IsCallingNew(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTClass::IsFolder() const; Bool_tTClass::IsFolder(void* obj) const; Bool_tTClass::IsForeign() const; Bool_tTClass::IsLoaded() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTClass::IsStartingWithTObject() const; Bool_tTClass::IsTObject() const; Bool_tTClass::IsVersioned() const; Bool_tTObject::IsZombie() const; static TClass*TClass::Load(TBuffer& b); static TClass*TClass::LoadClass(const char* requestedname, Bool_t silent); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTClass::ls(Option_t* opt = """") const; voidTClass::MakeCustomMenuList(); Bool_tTClass::M",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:23463,Modifiability,Inherit,Inheritance,23463,"Class::kReflexNoComment; static TDictionary::ESTLTypeTDictionary::kSet; static TObject::(anonymous)TObject::kSingleKey; static TClass::(anonymous)TClass::kStartWithTObject; static TClass::(anonymous)TClass::kUnloaded; static TDictionary::ESTLTypeTDictionary::kUnorderedMap; static TDictionary::ESTLTypeTDictionary::kUnorderedMultimap; static TDictionary::ESTLTypeTDictionary::kUnorderedMultiset; static TDictionary::ESTLTypeTDictionary::kUnorderedSet; static TDictionary::ESTLTypeTDictionary::kVector; static TClass::(anonymous)TClass::kWarned; static TClass::ECheckSumTClass::kWithTypeDef; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TStringTNamed::fNameobject identifier; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TStringTNamed::fTitleobject title; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance Chart:. TQObject. TObject. ←; TNamed. ←; TDictionary. ←; TClass. ←; TQClass. Function documentation; TQClass(const TClass& ); {}. TQClass& operator=(const TQClass& ); { return *this; }. TQClass(const char* name, Version_t cversion, const type_info& info, TVirtualIsAProxy* isa, const char* dfil = 0, const char* ifil = 0, Int_t dl = 0, Int_t il = 0); { }. virtual ~TQClass(); { Disconnect(); }. return new TQClass(const char* name, Version_t cversion, const type_info& info, TVirtualIsAProxy* isa, const char* dfil = 0, const char* ifil = 0, Int_t dl = 0, Int_t il = 0). » Author: Valeriy Onuchin & Fons Rademakers 15/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:7505,Performance,load,load,7505,"st; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVirtualStreamerInfo*TClass::FindStreamerInfo(UInt_t checksum) const; TVirtualStreamerInfo*TClass::FindStreamerInfoAbstractEmulated(UInt_t checksum) const; TClass*TClass::GetActualClass(const void* object) const; TDictAttributeMap*TDictionary::GetAttributeMap() const; TClass*TClass::GetBaseClass(const char* classname); TClass*TClass::GetBaseClass(const TClass* base); Int_tTClass::GetBaseClassOffset(const TClass* toBase, void* address = 0, bool isDerivedObject = true); TClass*TClass::GetBaseDataMember(const char* datamember); UInt_tTClass::GetCheckSum(TClass::ECheckSum code = kCurrentCheckSum) const; UInt_tTClass::GetCheckSum(Bool_t& isvalid) const; UInt_tTClass::GetCheckSum(TClass::ECheckSum code, Bool_t& isvalid) const; static Bool_tTClass::GetClass(TDictionary::DeclId_t id, vector<TClass*>& classes); static TClass*TClass::GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); static TClass*TClass::GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); static TClass*TClass::GetClass(ClassInfo_t* info, Bool_t load = kTRUE, Bool_t silent = kFALSE); ClassInfo_t*TClass::GetClassInfo() const; TMethod*TClass::GetClassMethod(const char* name, const char* params, Bool_t objectIsConst = kFALSE); TMethod*TClass::GetClassMethodWithPrototype(const char* name, const char* proto, Bool_t objectIsConst = kFALSE, ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch); Int_tTClass::GetClassSize() const; Version_tTClass::GetClassVersion() const; TVirtualCollectionProxy*TClass::GetCollectionProxy() const; ROOT::ESTLTypeTClass::GetCollectionType() const; const char*TClass::GetContextMenuTitle() const; TVirtualStreamerInfo*TClass::GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; TVirtualStreamerInfo*TClass::GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; ClassConv",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:7609,Performance,load,load,7609,"st TObject* obj) const; TVirtualStreamerInfo*TClass::FindStreamerInfo(UInt_t checksum) const; TVirtualStreamerInfo*TClass::FindStreamerInfoAbstractEmulated(UInt_t checksum) const; TClass*TClass::GetActualClass(const void* object) const; TDictAttributeMap*TDictionary::GetAttributeMap() const; TClass*TClass::GetBaseClass(const char* classname); TClass*TClass::GetBaseClass(const TClass* base); Int_tTClass::GetBaseClassOffset(const TClass* toBase, void* address = 0, bool isDerivedObject = true); TClass*TClass::GetBaseDataMember(const char* datamember); UInt_tTClass::GetCheckSum(TClass::ECheckSum code = kCurrentCheckSum) const; UInt_tTClass::GetCheckSum(Bool_t& isvalid) const; UInt_tTClass::GetCheckSum(TClass::ECheckSum code, Bool_t& isvalid) const; static Bool_tTClass::GetClass(TDictionary::DeclId_t id, vector<TClass*>& classes); static TClass*TClass::GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); static TClass*TClass::GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); static TClass*TClass::GetClass(ClassInfo_t* info, Bool_t load = kTRUE, Bool_t silent = kFALSE); ClassInfo_t*TClass::GetClassInfo() const; TMethod*TClass::GetClassMethod(const char* name, const char* params, Bool_t objectIsConst = kFALSE); TMethod*TClass::GetClassMethodWithPrototype(const char* name, const char* proto, Bool_t objectIsConst = kFALSE, ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch); Int_tTClass::GetClassSize() const; Version_tTClass::GetClassVersion() const; TVirtualCollectionProxy*TClass::GetCollectionProxy() const; ROOT::ESTLTypeTClass::GetCollectionType() const; const char*TClass::GetContextMenuTitle() const; TVirtualStreamerInfo*TClass::GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; TVirtualStreamerInfo*TClass::GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; ClassConvStreamerFunc_tTClass::GetConvStreamerFunc() const; TVirtualStreamerInfo*TClass::GetCurrentStreamerInfo()",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:7705,Performance,load,load,7705,"irtualStreamerInfo*TClass::FindStreamerInfoAbstractEmulated(UInt_t checksum) const; TClass*TClass::GetActualClass(const void* object) const; TDictAttributeMap*TDictionary::GetAttributeMap() const; TClass*TClass::GetBaseClass(const char* classname); TClass*TClass::GetBaseClass(const TClass* base); Int_tTClass::GetBaseClassOffset(const TClass* toBase, void* address = 0, bool isDerivedObject = true); TClass*TClass::GetBaseDataMember(const char* datamember); UInt_tTClass::GetCheckSum(TClass::ECheckSum code = kCurrentCheckSum) const; UInt_tTClass::GetCheckSum(Bool_t& isvalid) const; UInt_tTClass::GetCheckSum(TClass::ECheckSum code, Bool_t& isvalid) const; static Bool_tTClass::GetClass(TDictionary::DeclId_t id, vector<TClass*>& classes); static TClass*TClass::GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); static TClass*TClass::GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); static TClass*TClass::GetClass(ClassInfo_t* info, Bool_t load = kTRUE, Bool_t silent = kFALSE); ClassInfo_t*TClass::GetClassInfo() const; TMethod*TClass::GetClassMethod(const char* name, const char* params, Bool_t objectIsConst = kFALSE); TMethod*TClass::GetClassMethodWithPrototype(const char* name, const char* proto, Bool_t objectIsConst = kFALSE, ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch); Int_tTClass::GetClassSize() const; Version_tTClass::GetClassVersion() const; TVirtualCollectionProxy*TClass::GetCollectionProxy() const; ROOT::ESTLTypeTClass::GetCollectionType() const; const char*TClass::GetContextMenuTitle() const; TVirtualStreamerInfo*TClass::GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; TVirtualStreamerInfo*TClass::GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; ClassConvStreamerFunc_tTClass::GetConvStreamerFunc() const; TVirtualStreamerInfo*TClass::GetCurrentStreamerInfo(); TDataMember*TClass::GetDataMember(const char* datamember) const; Long_tTClass::GetDataMemberOf",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:9795,Performance,load,load,9795,"lass::GetDeclFileName() const; ROOT::DelFunc_tTClass::GetDelete() const; ROOT::DelArrFunc_tTClass::GetDeleteArray() const; ROOT::DesFunc_tTClass::GetDestructor() const; static DictFuncPtr_tTClass::GetDict(const char* cname); static DictFuncPtr_tTClass::GetDict(const type_info& info); static TDictionary*TDictionary::GetDictionary(const char* name); static TDictionary*TDictionary::GetDictionary(const type_info& typeinfo); ROOT::DirAutoAdd_tTClass::GetDirectoryAutoAdd() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFunctionTemplate*TClass::GetFunctionTemplate(const char* name); UInt_tTClass::GetHeapInstanceCount() const; virtual const char*TObject::GetIconName() const; Short_tTClass::GetImplFileLine() const; const char*TClass::GetImplFileName() const; UInt_tTClass::GetInstanceCount() const; TVirtualIsAProxy*TClass::GetIsAProxy() const; TVirtualStreamerInfo*TClass::GetLastReadInfo() const; TList*TClass::GetListOfAllPublicDataMembers(Bool_t load = kTRUE); const TList*TClass::GetListOfAllPublicMethods(Bool_t load = kTRUE); TList*TClass::GetListOfBases(); TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TClass::GetListOfDataMembers(Bool_t load = kTRUE); TList*TClass::GetListOfEnums(Bool_t load = kTRUE); TList*TClass::GetListOfFunctionTemplates(Bool_t load = kTRUE); TCollection*TClass::GetListOfMethodOverloads(const char* name) const; TList*TClass::GetListOfMethods(Bool_t load = kTRUE); TList*TClass::GetListOfRealData() const; TList*TQObject::GetListOfSignals() const; voidTClass::GetMenuItems(TList* listitems); TList*TClass::GetMenuList() const; ROOT::MergeFunc_tTClass::GetMerge() const; TMethod*TClass::GetMethod(const char* method, const char* params, Bool_t objectIsConst = kFALSE); TMethod*TClass::GetMethodAllAny(const char* method); TMethod*TClass::GetMethodAny(const char* method); TMethod*TClass::GetMethodWithPrototype(const char* method, const char* proto, Bool_t objectIsCo",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:9863,Performance,load,load,9863,"nst; ROOT::DelArrFunc_tTClass::GetDeleteArray() const; ROOT::DesFunc_tTClass::GetDestructor() const; static DictFuncPtr_tTClass::GetDict(const char* cname); static DictFuncPtr_tTClass::GetDict(const type_info& info); static TDictionary*TDictionary::GetDictionary(const char* name); static TDictionary*TDictionary::GetDictionary(const type_info& typeinfo); ROOT::DirAutoAdd_tTClass::GetDirectoryAutoAdd() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFunctionTemplate*TClass::GetFunctionTemplate(const char* name); UInt_tTClass::GetHeapInstanceCount() const; virtual const char*TObject::GetIconName() const; Short_tTClass::GetImplFileLine() const; const char*TClass::GetImplFileName() const; UInt_tTClass::GetInstanceCount() const; TVirtualIsAProxy*TClass::GetIsAProxy() const; TVirtualStreamerInfo*TClass::GetLastReadInfo() const; TList*TClass::GetListOfAllPublicDataMembers(Bool_t load = kTRUE); const TList*TClass::GetListOfAllPublicMethods(Bool_t load = kTRUE); TList*TClass::GetListOfBases(); TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TClass::GetListOfDataMembers(Bool_t load = kTRUE); TList*TClass::GetListOfEnums(Bool_t load = kTRUE); TList*TClass::GetListOfFunctionTemplates(Bool_t load = kTRUE); TCollection*TClass::GetListOfMethodOverloads(const char* name) const; TList*TClass::GetListOfMethods(Bool_t load = kTRUE); TList*TClass::GetListOfRealData() const; TList*TQObject::GetListOfSignals() const; voidTClass::GetMenuItems(TList* listitems); TList*TClass::GetMenuList() const; ROOT::MergeFunc_tTClass::GetMerge() const; TMethod*TClass::GetMethod(const char* method, const char* params, Bool_t objectIsConst = kFALSE); TMethod*TClass::GetMethodAllAny(const char* method); TMethod*TClass::GetMethodAny(const char* method); TMethod*TClass::GetMethodWithPrototype(const char* method, const char* proto, Bool_t objectIsConst = kFALSE, ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:10045,Performance,load,load,10045,"s::GetDict(const type_info& info); static TDictionary*TDictionary::GetDictionary(const char* name); static TDictionary*TDictionary::GetDictionary(const type_info& typeinfo); ROOT::DirAutoAdd_tTClass::GetDirectoryAutoAdd() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFunctionTemplate*TClass::GetFunctionTemplate(const char* name); UInt_tTClass::GetHeapInstanceCount() const; virtual const char*TObject::GetIconName() const; Short_tTClass::GetImplFileLine() const; const char*TClass::GetImplFileName() const; UInt_tTClass::GetInstanceCount() const; TVirtualIsAProxy*TClass::GetIsAProxy() const; TVirtualStreamerInfo*TClass::GetLastReadInfo() const; TList*TClass::GetListOfAllPublicDataMembers(Bool_t load = kTRUE); const TList*TClass::GetListOfAllPublicMethods(Bool_t load = kTRUE); TList*TClass::GetListOfBases(); TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TClass::GetListOfDataMembers(Bool_t load = kTRUE); TList*TClass::GetListOfEnums(Bool_t load = kTRUE); TList*TClass::GetListOfFunctionTemplates(Bool_t load = kTRUE); TCollection*TClass::GetListOfMethodOverloads(const char* name) const; TList*TClass::GetListOfMethods(Bool_t load = kTRUE); TList*TClass::GetListOfRealData() const; TList*TQObject::GetListOfSignals() const; voidTClass::GetMenuItems(TList* listitems); TList*TClass::GetMenuList() const; ROOT::MergeFunc_tTClass::GetMerge() const; TMethod*TClass::GetMethod(const char* method, const char* params, Bool_t objectIsConst = kFALSE); TMethod*TClass::GetMethodAllAny(const char* method); TMethod*TClass::GetMethodAny(const char* method); TMethod*TClass::GetMethodWithPrototype(const char* method, const char* proto, Bool_t objectIsConst = kFALSE, ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch); voidTClass::GetMissingDictionaries(THashTable& result, bool recurse = false); virtual const char*TNamed::GetName() const; Int_tTClass::GetNdata(); ROOT::NewFunc_tTClass::GetNew() ",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:10096,Performance,load,load,10096,"ry*TDictionary::GetDictionary(const char* name); static TDictionary*TDictionary::GetDictionary(const type_info& typeinfo); ROOT::DirAutoAdd_tTClass::GetDirectoryAutoAdd() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFunctionTemplate*TClass::GetFunctionTemplate(const char* name); UInt_tTClass::GetHeapInstanceCount() const; virtual const char*TObject::GetIconName() const; Short_tTClass::GetImplFileLine() const; const char*TClass::GetImplFileName() const; UInt_tTClass::GetInstanceCount() const; TVirtualIsAProxy*TClass::GetIsAProxy() const; TVirtualStreamerInfo*TClass::GetLastReadInfo() const; TList*TClass::GetListOfAllPublicDataMembers(Bool_t load = kTRUE); const TList*TClass::GetListOfAllPublicMethods(Bool_t load = kTRUE); TList*TClass::GetListOfBases(); TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TClass::GetListOfDataMembers(Bool_t load = kTRUE); TList*TClass::GetListOfEnums(Bool_t load = kTRUE); TList*TClass::GetListOfFunctionTemplates(Bool_t load = kTRUE); TCollection*TClass::GetListOfMethodOverloads(const char* name) const; TList*TClass::GetListOfMethods(Bool_t load = kTRUE); TList*TClass::GetListOfRealData() const; TList*TQObject::GetListOfSignals() const; voidTClass::GetMenuItems(TList* listitems); TList*TClass::GetMenuList() const; ROOT::MergeFunc_tTClass::GetMerge() const; TMethod*TClass::GetMethod(const char* method, const char* params, Bool_t objectIsConst = kFALSE); TMethod*TClass::GetMethodAllAny(const char* method); TMethod*TClass::GetMethodAny(const char* method); TMethod*TClass::GetMethodWithPrototype(const char* method, const char* proto, Bool_t objectIsConst = kFALSE, ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch); voidTClass::GetMissingDictionaries(THashTable& result, bool recurse = false); virtual const char*TNamed::GetName() const; Int_tTClass::GetNdata(); ROOT::NewFunc_tTClass::GetNew() const; ROOT::NewArrFunc_tTClass::GetNewArray() cons",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:10159,Performance,load,load,10159,"nary*TDictionary::GetDictionary(const type_info& typeinfo); ROOT::DirAutoAdd_tTClass::GetDirectoryAutoAdd() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFunctionTemplate*TClass::GetFunctionTemplate(const char* name); UInt_tTClass::GetHeapInstanceCount() const; virtual const char*TObject::GetIconName() const; Short_tTClass::GetImplFileLine() const; const char*TClass::GetImplFileName() const; UInt_tTClass::GetInstanceCount() const; TVirtualIsAProxy*TClass::GetIsAProxy() const; TVirtualStreamerInfo*TClass::GetLastReadInfo() const; TList*TClass::GetListOfAllPublicDataMembers(Bool_t load = kTRUE); const TList*TClass::GetListOfAllPublicMethods(Bool_t load = kTRUE); TList*TClass::GetListOfBases(); TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TClass::GetListOfDataMembers(Bool_t load = kTRUE); TList*TClass::GetListOfEnums(Bool_t load = kTRUE); TList*TClass::GetListOfFunctionTemplates(Bool_t load = kTRUE); TCollection*TClass::GetListOfMethodOverloads(const char* name) const; TList*TClass::GetListOfMethods(Bool_t load = kTRUE); TList*TClass::GetListOfRealData() const; TList*TQObject::GetListOfSignals() const; voidTClass::GetMenuItems(TList* listitems); TList*TClass::GetMenuList() const; ROOT::MergeFunc_tTClass::GetMerge() const; TMethod*TClass::GetMethod(const char* method, const char* params, Bool_t objectIsConst = kFALSE); TMethod*TClass::GetMethodAllAny(const char* method); TMethod*TClass::GetMethodAny(const char* method); TMethod*TClass::GetMethodWithPrototype(const char* method, const char* proto, Bool_t objectIsConst = kFALSE, ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch); voidTClass::GetMissingDictionaries(THashTable& result, bool recurse = false); virtual const char*TNamed::GetName() const; Int_tTClass::GetNdata(); ROOT::NewFunc_tTClass::GetNew() const; ROOT::NewArrFunc_tTClass::GetNewArray() const; Int_tTClass::GetNmethods(); virtual char*TObject::GetObjectI",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:10282,Performance,load,load,10282,"Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFunctionTemplate*TClass::GetFunctionTemplate(const char* name); UInt_tTClass::GetHeapInstanceCount() const; virtual const char*TObject::GetIconName() const; Short_tTClass::GetImplFileLine() const; const char*TClass::GetImplFileName() const; UInt_tTClass::GetInstanceCount() const; TVirtualIsAProxy*TClass::GetIsAProxy() const; TVirtualStreamerInfo*TClass::GetLastReadInfo() const; TList*TClass::GetListOfAllPublicDataMembers(Bool_t load = kTRUE); const TList*TClass::GetListOfAllPublicMethods(Bool_t load = kTRUE); TList*TClass::GetListOfBases(); TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TClass::GetListOfDataMembers(Bool_t load = kTRUE); TList*TClass::GetListOfEnums(Bool_t load = kTRUE); TList*TClass::GetListOfFunctionTemplates(Bool_t load = kTRUE); TCollection*TClass::GetListOfMethodOverloads(const char* name) const; TList*TClass::GetListOfMethods(Bool_t load = kTRUE); TList*TClass::GetListOfRealData() const; TList*TQObject::GetListOfSignals() const; voidTClass::GetMenuItems(TList* listitems); TList*TClass::GetMenuList() const; ROOT::MergeFunc_tTClass::GetMerge() const; TMethod*TClass::GetMethod(const char* method, const char* params, Bool_t objectIsConst = kFALSE); TMethod*TClass::GetMethodAllAny(const char* method); TMethod*TClass::GetMethodAny(const char* method); TMethod*TClass::GetMethodWithPrototype(const char* method, const char* proto, Bool_t objectIsConst = kFALSE, ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch); voidTClass::GetMissingDictionaries(THashTable& result, bool recurse = false); virtual const char*TNamed::GetName() const; Int_tTClass::GetNdata(); ROOT::NewFunc_tTClass::GetNew() const; ROOT::NewArrFunc_tTClass::GetNewArray() const; Int_tTClass::GetNmethods(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TClass*c",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:13651,Performance,Load,Load,13651,"ority(const char* signal_name, const char* slot_name = 0); voidTClass::IgnoreTObjectStreamer(Bool_t ignore = kTRUE); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTClass::InheritsFrom(const char* cl) const; virtual Bool_tTClass::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTClass::InterpretedShowMembers(void* obj, TMemberInspector& insp, Bool_t isTransient); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; static TClass::ENewTypeTClass::IsCallingNew(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTClass::IsFolder() const; Bool_tTClass::IsFolder(void* obj) const; Bool_tTClass::IsForeign() const; Bool_tTClass::IsLoaded() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTClass::IsStartingWithTObject() const; Bool_tTClass::IsTObject() const; Bool_tTClass::IsVersioned() const; Bool_tTObject::IsZombie() const; static TClass*TClass::Load(TBuffer& b); static TClass*TClass::LoadClass(const char* requestedname, Bool_t silent); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTClass::ls(Option_t* opt = """") const; voidTClass::MakeCustomMenuList(); Bool_tTClass::MatchLegacyCheckSum(UInt_t checksum) const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; voidTClass::Move(void* arenaFrom, void* arenaTo) const; void*TClass::New(TClass::ENewType defConstructor = kClassNew, Bool_t quiet = kFALSE) const; void*TClass::New(void* arena, TClass::ENewType defConstructor = kClassNew) const; void*TClass::NewArray(Long_t nElements, TClass::ENewType defConstructor = kClassNew) const; void*TClass::NewArray(Long_t nElements, void* arena, TClass::ENewType defConstructor = kClassNew) const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obs",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:13691,Performance,Load,LoadClass,13691,"slot_name = 0); voidTClass::IgnoreTObjectStreamer(Bool_t ignore = kTRUE); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTClass::InheritsFrom(const char* cl) const; virtual Bool_tTClass::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTClass::InterpretedShowMembers(void* obj, TMemberInspector& insp, Bool_t isTransient); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; static TClass::ENewTypeTClass::IsCallingNew(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTClass::IsFolder() const; Bool_tTClass::IsFolder(void* obj) const; Bool_tTClass::IsForeign() const; Bool_tTClass::IsLoaded() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTClass::IsStartingWithTObject() const; Bool_tTClass::IsTObject() const; Bool_tTClass::IsVersioned() const; Bool_tTObject::IsZombie() const; static TClass*TClass::Load(TBuffer& b); static TClass*TClass::LoadClass(const char* requestedname, Bool_t silent); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTClass::ls(Option_t* opt = """") const; voidTClass::MakeCustomMenuList(); Bool_tTClass::MatchLegacyCheckSum(UInt_t checksum) const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; voidTClass::Move(void* arenaFrom, void* arenaTo) const; void*TClass::New(TClass::ENewType defConstructor = kClassNew, Bool_t quiet = kFALSE) const; void*TClass::New(void* arena, TClass::ENewType defConstructor = kClassNew) const; void*TClass::NewArray(Long_t nElements, TClass::ENewType defConstructor = kClassNew) const; void*TClass::NewArray(Long_t nElements, void* arena, TClass::ENewType defConstructor = kClassNew) const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOf",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:6389,Security,checksum,checksum,6389,"al, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; char*TClass::EscapeChars(const char* text) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TVirtualStreamerInfo*TClass::FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; TVirtualStreamerInfo*TClass::FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVirtualStreamerInfo*TClass::FindStreamerInfo(UInt_t checksum) const; TVirtualStreamerInfo*TClass::FindStreamerInfoAbstractEmulated(UInt_t checksum) const; TClass*TClass::GetActualClass(const void* object) const; TDictAttributeMap*TDictionary::GetAttributeMap() const; TClass*TClass::GetBaseClass(const char* classname); TClass*TClass::GetBaseClass(const TClass* base); Int_tTClass::GetBaseClassOffset(const TClass* toBase, void* address = 0, bool isDerivedObject = true); TClass*TClass::GetBaseDataMember(const char* datamember); UInt_tTClass::GetCheckSum(TClass::ECheckSum code = kCurrentCheckSum) const; UInt_tTClass::GetCheckSum(Bool_t& isvalid) const; UInt_tTClass::GetCheckSum(TClass::ECheckSum code, Bool_t& isvalid) const; static Bool_tTClass::GetClas",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:6494,Security,checksum,checksum,6494,"signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; char*TClass::EscapeChars(const char* text) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TVirtualStreamerInfo*TClass::FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; TVirtualStreamerInfo*TClass::FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVirtualStreamerInfo*TClass::FindStreamerInfo(UInt_t checksum) const; TVirtualStreamerInfo*TClass::FindStreamerInfoAbstractEmulated(UInt_t checksum) const; TClass*TClass::GetActualClass(const void* object) const; TDictAttributeMap*TDictionary::GetAttributeMap() const; TClass*TClass::GetBaseClass(const char* classname); TClass*TClass::GetBaseClass(const TClass* base); Int_tTClass::GetBaseClassOffset(const TClass* toBase, void* address = 0, bool isDerivedObject = true); TClass*TClass::GetBaseDataMember(const char* datamember); UInt_tTClass::GetCheckSum(TClass::ECheckSum code = kCurrentCheckSum) const; UInt_tTClass::GetCheckSum(Bool_t& isvalid) const; UInt_tTClass::GetCheckSum(TClass::ECheckSum code, Bool_t& isvalid) const; static Bool_tTClass::GetClass(TDictionary::DeclId_t id, vector<TClass*>& classes); static TClass*TClass::GetClass(const char* name, B",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:6688,Security,checksum,checksum,6688,"TQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; char*TClass::EscapeChars(const char* text) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TVirtualStreamerInfo*TClass::FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; TVirtualStreamerInfo*TClass::FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVirtualStreamerInfo*TClass::FindStreamerInfo(UInt_t checksum) const; TVirtualStreamerInfo*TClass::FindStreamerInfoAbstractEmulated(UInt_t checksum) const; TClass*TClass::GetActualClass(const void* object) const; TDictAttributeMap*TDictionary::GetAttributeMap() const; TClass*TClass::GetBaseClass(const char* classname); TClass*TClass::GetBaseClass(const TClass* base); Int_tTClass::GetBaseClassOffset(const TClass* toBase, void* address = 0, bool isDerivedObject = true); TClass*TClass::GetBaseDataMember(const char* datamember); UInt_tTClass::GetCheckSum(TClass::ECheckSum code = kCurrentCheckSum) const; UInt_tTClass::GetCheckSum(Bool_t& isvalid) const; UInt_tTClass::GetCheckSum(TClass::ECheckSum code, Bool_t& isvalid) const; static Bool_tTClass::GetClass(TDictionary::DeclId_t id, vector<TClass*>& classes); static TClass*TClass::GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); static TClass*TClass::GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); static TClass*TClass::GetClass(ClassInfo_t* i",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:6774,Security,checksum,checksum,6774,"const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; char*TClass::EscapeChars(const char* text) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TVirtualStreamerInfo*TClass::FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; TVirtualStreamerInfo*TClass::FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVirtualStreamerInfo*TClass::FindStreamerInfo(UInt_t checksum) const; TVirtualStreamerInfo*TClass::FindStreamerInfoAbstractEmulated(UInt_t checksum) const; TClass*TClass::GetActualClass(const void* object) const; TDictAttributeMap*TDictionary::GetAttributeMap() const; TClass*TClass::GetBaseClass(const char* classname); TClass*TClass::GetBaseClass(const TClass* base); Int_tTClass::GetBaseClassOffset(const TClass* toBase, void* address = 0, bool isDerivedObject = true); TClass*TClass::GetBaseDataMember(const char* datamember); UInt_tTClass::GetCheckSum(TClass::ECheckSum code = kCurrentCheckSum) const; UInt_tTClass::GetCheckSum(Bool_t& isvalid) const; UInt_tTClass::GetCheckSum(TClass::ECheckSum code, Bool_t& isvalid) const; static Bool_tTClass::GetClass(TDictionary::DeclId_t id, vector<TClass*>& classes); static TClass*TClass::GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); static TClass*TClass::GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); static TClass*TClass::GetClass(ClassInfo_t* info, Bool_t load = kTRUE, Bool_t silent = kFALSE); ClassInfo_t*TClass::GetClassInfo() ",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:12518,Security,Hash,Hash,12518,"*TClass::GetSchemaRules() const; ROOT::TSchemaRuleSet*TClass::GetSchemaRules(Bool_t create = kFALSE); const char*TClass::GetSharedLibs(); ShowMembersFunc_tTClass::GetShowMembersWrapper() const; TClass::EStateTClass::GetState() const; TClassStreamer*TClass::GetStreamer() const; ClassStreamerFunc_tTClass::GetStreamerFunc() const; TVirtualStreamerInfo*TClass::GetStreamerInfo(Int_t version = 0) const; TVirtualStreamerInfo*TClass::GetStreamerInfoAbstractEmulated(Int_t version = 0) const; const TObjArray*TClass::GetStreamerInfos() const; virtual const char*TNamed::GetTitle() const; const type_info*TClass::GetTypeInfo() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; Bool_tTClass::HasDataMemberInfo() const; Bool_tTClass::HasDefaultConstructor() const; Bool_tTClass::HasDictionary(); static Bool_tTClass::HasDictionarySelection(const char* clname); virtual ULong_tTNamed::Hash() const; Bool_tTClass::HasInterpreterInfo() const; Bool_tTClass::HasInterpreterInfoInMemory() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); voidTClass::IgnoreTObjectStreamer(Bool_t ignore = kTRUE); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTClass::InheritsFrom(const char* cl) const; virtual Bool_tTClass::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTClass::InterpretedShowMembers(void* obj, TMemberInspector& insp, Bool_t isTransient); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; static TClass::ENewTypeTClass::IsCallingNew(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTClass::IsFolder() const; Bool_tTClass::IsFolder(void* obj) const; Bool_tTClass::IsForeign() const; Bool_tTClass::IsLoaded() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTClass::IsStartingWithTObject() ",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:13956,Security,checksum,checksum,13956," virtual voidTObject::Inspect() constMENU ; voidTClass::InterpretedShowMembers(void* obj, TMemberInspector& insp, Bool_t isTransient); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; static TClass::ENewTypeTClass::IsCallingNew(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTClass::IsFolder() const; Bool_tTClass::IsFolder(void* obj) const; Bool_tTClass::IsForeign() const; Bool_tTClass::IsLoaded() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTClass::IsStartingWithTObject() const; Bool_tTClass::IsTObject() const; Bool_tTClass::IsVersioned() const; Bool_tTObject::IsZombie() const; static TClass*TClass::Load(TBuffer& b); static TClass*TClass::LoadClass(const char* requestedname, Bool_t silent); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTClass::ls(Option_t* opt = """") const; voidTClass::MakeCustomMenuList(); Bool_tTClass::MatchLegacyCheckSum(UInt_t checksum) const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; voidTClass::Move(void* arenaFrom, void* arenaTo) const; void*TClass::New(TClass::ENewType defConstructor = kClassNew, Bool_t quiet = kFALSE) const; void*TClass::New(void* arena, TClass::ENewType defConstructor = kClassNew) const; void*TClass::NewArray(Long_t nElements, TClass::ENewType defConstructor = kClassNew) const; void*TClass::NewArray(Long_t nElements, void* arena, TClass::ENewType defConstructor = kClassNew) const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t s",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:19562,Security,checksum,checksum,19562,"t::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tTClass::WriteBuffer(TBuffer& b, void* pointer, const char* info = """"). protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TVirtualStreamerInfo*TClass::FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; voidTClass::GetMissingDictionariesForBaseClasses(TCollection& result, TCollection& visited, bool recurse); voidTClass::GetMissingDictionariesForMembers(TCollection& result, TCollection& visited, bool recurse); voidTClass::GetMissingDictionariesForPairElements(TCollection& result, TCollection& visited, bool recurse); voidTClass::GetMissingDictionariesWithRecursionCheck(TCollection& result, TCollection& visited, bool recurse); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Bool_tTDictionary::UpdateInterpreterStateMarker(). private:. TQClass&operator=(const TQClass&); TQClass(const TClass&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TDictionary::ESTLTypeTDictionary::kBitset; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TClass::ENewTypeTClass::kClassNew; static TClass::(anonymous)TClass::kClas",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:18271,Testability,Test,TestBit,18271,"AutoAdd_t dirAutoAddFunc); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTClass::SetGlobalIsA(IsAGlobalFunc_t); voidTClass::SetImplFileName(const char* implFileName); voidTClass::SetLastReadInfo(TVirtualStreamerInfo* info); voidTClass::SetMemberStreamer(const char* name, MemberStreamerFunc_t strm); voidTClass::SetMerge(ROOT::MergeFunc_t mergeFunc); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidTClass::SetNew(ROOT::NewFunc_t newFunc); voidTClass::SetNewArray(ROOT::NewArrFunc_t newArrayFunc); static voidTObject::SetObjectStat(Bool_t stat); voidTClass::SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); voidTClass::SetStreamerFunc(ClassStreamerFunc_t strm); TVirtualStreamerInfo*TClass::SetStreamerInfo(Int_t version, const char* info = """"); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidTClass::SetUnloaded(); virtual voidShowMembers(TMemberInspector& insp) const; Int_tTClass::Size() const; virtual Int_tTNamed::Sizeof() const; voidTClass::Store(TBuffer& b) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQClass(const TQClass&); TQClass(const char* name, Version_t cversion, const type_info& info, TVirtualIsAProxy* isa, const char* dfil = 0, const char* ifil = 0, Int_t dl = 0, Int_t il = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tTClass::WriteBuffer(TBuffer& b, void* pointer, const char* info = """").",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:18310,Testability,Test,TestBits,18310,"AutoAdd_t dirAutoAddFunc); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTClass::SetGlobalIsA(IsAGlobalFunc_t); voidTClass::SetImplFileName(const char* implFileName); voidTClass::SetLastReadInfo(TVirtualStreamerInfo* info); voidTClass::SetMemberStreamer(const char* name, MemberStreamerFunc_t strm); voidTClass::SetMerge(ROOT::MergeFunc_t mergeFunc); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidTClass::SetNew(ROOT::NewFunc_t newFunc); voidTClass::SetNewArray(ROOT::NewArrFunc_t newArrayFunc); static voidTObject::SetObjectStat(Bool_t stat); voidTClass::SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); voidTClass::SetStreamerFunc(ClassStreamerFunc_t strm); TVirtualStreamerInfo*TClass::SetStreamerInfo(Int_t version, const char* info = """"); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidTClass::SetUnloaded(); virtual voidShowMembers(TMemberInspector& insp) const; Int_tTClass::Size() const; virtual Int_tTNamed::Sizeof() const; voidTClass::Store(TBuffer& b) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQClass(const TQClass&); TQClass(const char* name, Version_t cversion, const type_info& info, TVirtualIsAProxy* isa, const char* dfil = 0, const char* ifil = 0, Int_t dl = 0, Int_t il = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tTClass::WriteBuffer(TBuffer& b, void* pointer, const char* info = """").",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQClass.html:2930,Usability,Clear,Clear,2930,"AdoptStreamer(TClassStreamer* strm); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Int_tTClass::AutoBrowse(TObject* obj, TBrowser* browser); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTClass::Browse(TBrowser* b); Int_tTClass::Browse(void* obj, TBrowser* b) const; voidTClass::BuildEmulatedRealData(const char* name, Long_t offset, TClass* cl); voidTClass::BuildRealData(void* pointer = 0, Bool_t isTransient = kFALSE); voidTClass::CalculateStreamerOffset() const; Bool_tTClass::CallShowMembers(const void* obj, TMemberInspector& insp, Bool_t isTransient = kFALSE) const; Bool_tTClass::CanIgnoreTObjectStreamer(); Bool_tTClass::CanSplit() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Long_tTClass::ClassProperty() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TClass::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; voidTClass::CopyCollectionProxy(const TVirtualCollectionProxy&); voidTDictionary::CreateAttributeMap(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTClass::DeleteArray(void* ary, Bool_t dtorOnly = kFALSE); virtual voidTQObject::Destroyed()SIGNAL ; voidTClass::Destructor(void* obj, Bool_t dtorOnly =",MatchSource.WIKI,root/html604/TQClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQClass.html
https://root.cern/root/html604/TQCommand.html:843,Availability,down,downwards,843,". TQCommand. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TQCommand. class TQCommand: public TList, public TQObject. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution.",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:7476,Availability,Error,Error,7476,"idTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TQCommand*GetCommand(); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetL",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:7605,Availability,error,error,7605,"mit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TQCommand*GetCommand(); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*GetName() const; Int_tGetNRargs() const; I",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:7689,Availability,error,error,7689,"_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TQCommand*GetCommand(); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*GetName() const; Int_tGetNRargs() const; Int_tGetNUargs() const; void*GetObject() const; virtual char*TObject::GetObjectInfo(I",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:2211,Deployability,update,update,2211,"t; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution of command's; Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that. Function Members (Methods); public:. virtual~TQCommand(); voidTObject::AbstractMethod(const ch",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:2265,Deployability,update,update,2265,"t; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution of command's; Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that. Function Members (Methods); public:. virtual~TQCommand(); voidTObject::AbstractMethod(const ch",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:10979,Integrability,Message,Message,10979,"tTCollection::IsEmpty() const; virtual Bool_tIsEqual(const TObject* obj) const; Bool_tIsExecuting() const; virtual Bool_tTCollection::IsFolder() const; Bool_tIsMacro() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; Bool_tIsRedoing() const; virtual Bool_tIsSetter() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tIsUndoing() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual TObjLink*TList::LastLink() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidls(Option_t* option = """") const; virtual TIterator*TList::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseIterator() const; voidTObject::MayNotUse(const char* method) const; virtual voidMerge(TQCommand* c); virtual Long64_tMerge(TCollection*, TFileMergeInfo*); virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; static Int_tTSeqCollection::ObjCompare(TObject* a, TObject* b); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject*TCollection::operator()(const char* name) const; virtual voidTCollection::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTCollection::Print(Option_t* option = """") const; virtual voidTCollection::Print(Option_t* option, Int_t recurse) const; virtual voidTCollection::Print(Opt",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:115,Modifiability,inherit,inheritance,115,". TQCommand. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TQCommand. class TQCommand: public TList, public TQObject. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution.",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:9658,Modifiability,Inherit,InheritsFrom,9658,"har*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TQConnection*GetRedo() const; Long_t*GetRedoArgs() const; const char*GetRedoName() const; virtual Int_tTCollection::GetSize() const; Int_tGetStatus() const; virtual const char*GetTitle() const; TQConnection*GetUndo() const; Long_t*GetUndoArgs() const; const char*GetUndoName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTCollection::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual Int_tTSeqCollection::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tIsEqual(const TObject* obj) const; Bool_tIsExecuting() const; virtual Bool_tTCollection::IsFolder() const; Bool_tIsMacro() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; Bool_tIsRedoing() const; virtual Bool_tIsSetter() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tIsUndoing() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual TObjLink*TList::LastLink() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidls(Option_",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:9724,Modifiability,Inherit,InheritsFrom,9724,"ect**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TQConnection*GetRedo() const; Long_t*GetRedoArgs() const; const char*GetRedoName() const; virtual Int_tTCollection::GetSize() const; Int_tGetStatus() const; virtual const char*GetTitle() const; TQConnection*GetUndo() const; Long_t*GetUndoArgs() const; const char*GetUndoName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTCollection::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual Int_tTSeqCollection::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tIsEqual(const TObject* obj) const; Bool_tIsExecuting() const; virtual Bool_tTCollection::IsFolder() const; Bool_tIsMacro() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; Bool_tIsRedoing() const; virtual Bool_tIsSetter() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tIsUndoing() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual TObjLink*TList::LastLink() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidls(Option_t* option = """") const; virtual TIterator*TList::MakeIterator(Bool_",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:18509,Modifiability,Inherit,Inheritance,18509,"*TQObject::fListOfSignals! list of signals from this object; Int_tfNRargsnumber of redo arguments; Int_tfNUargsnumber of undo arguments; TStringfNamecommand name. Default is ""ClassName::RedoName(args)""; TStringTCollection::fNamename of the collection; Bool_tfNewDeletekTRUE if Redo/Undo methods are new/delete; void*fObjectobject to which undo/redo actions applied; TQConnection*fRedodo/redo action; Long_t*fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←. TQUndoManager. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* u",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:22110,Modifiability,inherit,inheritied,22110," an end user; can undo and redo them with one command. Execution of TQUndoManager::Undo(),; TQUndoManager::Redo() methods only invokes the top level command as a whole. Merge method is analogous to logical join operation. Note: Merge method invokes redo action. Long64_t Merge(TCollection* , TFileMergeInfo* ); Merge a collection of TQCommand. void Add(TObject* obj, Option_t* opt); Add command to the list of merged commands. Option string can contain substrings:; ""compress"" - try to compress input command; ""radd"" - execute redo action of input command; ""uadd"" - execute undo action of input command. Bool_t CanCompress(TQCommand* c) const; By default, commands can be compressed if they are:. - equal; - setter commands. More complicated commands might want to override this function. void Compress(TQCommand* c); Compress command. Compression is analogous to arithmetic ""addition operation"". Note:; - The compressed command will be deleted.; - Execution Compress method invokes Redo action with new redo arguments; inheritied from compressed command. More complicated commands might want to override this function. Bool_t IsEqual(const TObject* obj) const; Equal comparison. The commands are equal if they are; applied to the same object and have the same Redo/Undo actions. More complicated commands might want to override this function. Bool_t IsSetter() const; Returns kTRUE is command if Redo is the same as Undo function; and is the setter action. By default, all functions with names like ""SetXXX"" or ""setXXX""; considered as setters. Another type of setters are Move, Resize operations. More complicated commands might want to override this function. void SetArgs(Int_t narg, ...); Set do/redo and undo parameters. The format is; SetArgs(number_of_params, redo_params, undo_params). Example:; move_command->SetArgs(2, 100, 100, 200, 200);; 2 params, (100,100) - do/redo position, (200,200) - undo position. void SetRedoArgs(Int_t narg, ...); Set redo parameters. The format is; SetRedoArgs",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:2765,Performance,perform,performing,2765,"etUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution of command's; Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that. Function Members (Methods); public:. virtual~TQCommand(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAdd(TObject* obj, Option_t* opt); virtual voidTList::AddAfter(const TObject* after, TObject* obj); virtual voidTList::AddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* obj, Int_t idx); virtual voidTList::AddBefore(const TObject* before, TObject* obj); virtual voidTList::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(TObject* obj); virtual",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:17246,Performance,cache,cache,17246,"ck; static TObject::EStatusBitsTObject::kHasUUID; static TCollection::(anonymous)TCollection::kInitCapacity; static TCollection::(anonymous)TCollection::kInitHashTableCapacity; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfNRargsnumber of redo arguments; Int_tfNUargsnumber of undo arguments; TStringfNamecommand name. Default is ""ClassName::RedoName(args)""; TStringTCollection::fNamename of the collection; Bool_tfNewDeletekTRUE if Redo/Undo methods are new/delete; void*fObjectobject to which undo/redo actions applied; TQConnection*fRedodo/redo action; Long_t*fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used f",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:9396,Security,Hash,Hash,9396,"Last() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*GetName() const; Int_tGetNRargs() const; Int_tGetNUargs() const; void*GetObject() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TQConnection*GetRedo() const; Long_t*GetRedoArgs() const; const char*GetRedoName() const; virtual Int_tTCollection::GetSize() const; Int_tGetStatus() const; virtual const char*GetTitle() const; TQConnection*GetUndo() const; Long_t*GetUndoArgs() const; const char*GetUndoName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTCollection::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual Int_tTSeqCollection::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tIsEqual(const TObject* obj) const; Bool_tIsExecuting() const; virtual Bool_tTCollection::IsFolder() const; Bool_tIsMacro() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; Bool_tIsRedoing() const; virtual Bool_tIsSetter() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tIsUndoing() co",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:4158,Testability,Assert,AssertClass,4158,,MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:14063,Testability,Test,TestBit,14063,"oveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTList::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetArgs(Int_t nargs); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidSetRedoArgs(Int_t nargs); virtual voidSetTitle(const char* title); virtual voidSetUndoArgs(Int_t nargs); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTList::Sort(Bool_t order = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQCommand(const TQCommand& com); TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); virtual voidUndo(Option_t* option = """")SIGNAL ; voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:14102,Testability,Test,TestBits,14102,"oveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTList::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetArgs(Int_t nargs); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidSetRedoArgs(Int_t nargs); virtual voidSetTitle(const char* title); virtual voidSetUndoArgs(Int_t nargs); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTList::Sort(Bool_t order = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQCommand(const TQCommand& com); TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); virtual voidUndo(Option_t* option = """")SIGNAL ; voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:21288,Testability,log,logical,21288,"TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; one needs to call TQCommand::SetUndoArgs(1, character) from; inside of TGTextEdit::DelChar() method, i.e. TQCommand::GetCommand()->SetUndoArgs(1, somechar);. void Delete(Option_t* option = """"); If ""opt"" is not zero delete every merged command which option string is; equal to ""opt"". If ""opt"" is zero - delete all merged commands. Bool_t CanMerge(TQCommand* c) const; Two commands can be merged if they can be composed into; a single command (Macro command). To allow merging commands user might override this function. void Merge(TQCommand* c); Add command to the list of merged commands.; This make it possible to group complex actions together so an end user; can undo and redo them with one command. Execution of TQUndoManager::Undo(),; TQUndoManager::Redo() methods only invokes the top level command as a whole. Merge method is analogous to logical join operation. Note: Merge method invokes redo action. Long64_t Merge(TCollection* , TFileMergeInfo* ); Merge a collection of TQCommand. void Add(TObject* obj, Option_t* opt); Add command to the list of merged commands. Option string can contain substrings:; ""compress"" - try to compress input command; ""radd"" - execute redo action of input command; ""uadd"" - execute undo action of input command. Bool_t CanCompress(TQCommand* c) const; By default, commands can be compressed if they are:. - equal; - setter commands. More complicated commands might want to override this function. void Compress(TQCommand* c); Compress command. Compression is analogous to arithmetic ""addition operation"". Note:; - The compressed command will be deleted.; - Execution Compress method invokes Redo action with new redo arguments; inheritied from compressed command. More complicated commands might want to override this function. Bool_t IsEqual(const TObject* obj) const; Equal comparison. The commands ar",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:595,Usability,undo,undo,595,". TQCommand. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TQCommand. class TQCommand: public TList, public TQObject. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution.",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:782,Usability,undo,undo,782,". TQCommand. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TQCommand. class TQCommand: public TList, public TQObject. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution.",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:871,Usability,undo,undo,871,". TQCommand. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TQCommand. class TQCommand: public TList, public TQObject. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution.",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:1311,Usability,undo,undo,1311," CORE; » BASE; » TQCommand. class TQCommand: public TList, public TQObject. The Command design pattern is based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:1335,Usability,undo,undo,1335," based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macr",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:1362,Usability,undo,undo,1362," based on the idea, that all editing; in an application is done by creating instances of command objects.; Command objects apply changes to the edited object and then are; stored on a command stack. Furthermore, each command knows how to; undo its changes to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macr",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:1602,Usability,undo,undo,1602,"ges to bring the edited object back to its previous; state. As long as the application only uses command objects to; change the state of the edited object, it is possible to undo; a sequence of commands by traversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in firs",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:1800,Usability,undo,undo,1800,"aversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register co",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:1845,Usability,undo,undo,1845,"aversing the command stack downwards and; calling the ""undo"" method of each command in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register co",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:1884,Usability,undo,undo,1884,"and in turn. It is also; possible to redo a sequence of commands by traversing the command; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:1973,Usability,Undo,Undo,1973,"; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution o",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:2044,Usability,Undo,Undo,2044,"h command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution of command's; Redo method. Use TQUndoManager::Undo t",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:2063,Usability,undo,undo,2063,"h command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution of command's; Redo method. Use TQUndoManager::Undo t",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:2163,Usability,undo,undo,2163,"_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution of command's; Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that. Func",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:2554,Usability,Undo,Undo,2554,"or_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution of command's; Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that. Function Members (Methods); public:. virtual~TQCommand(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAdd(TObject* obj, Option_t* opt); virtual voidTList::AddAfter(const TObject* after, TObject* obj); virtual voidTList::AddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* obj, Int_t idx); virtual voidTLi",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:2620,Usability,Undo,Undo,2620,"olor_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution of command's; Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that. Function Members (Methods); public:. virtual~TQCommand(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAdd(TObject* obj, Option_t* opt); virtual voidTList::AddAfter(const TObject* after, TObject* obj); virtual voidTList::AddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* obj, Int_t idx); virtual voidTList::AddBefore(const TObject* before, TObject*",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:2663,Usability,undo,undo,2663,"or();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution of command's; Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that. Function Members (Methods); public:. virtual~TQCommand(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAdd(TObject* obj, Option_t* opt); virtual voidTList::AddAfter(const TObject* after, TObject* obj); virtual voidTList::AddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* obj, Int_t idx); virtual voidTList::AddBefore(const TObject* before, TObject* obj); virtual voidTList::AddBefore",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:2776,Usability,undo,undo,2776,"etUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution of command's; Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that. Function Members (Methods); public:. virtual~TQCommand(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAdd(TObject* obj, Option_t* opt); virtual voidTList::AddAfter(const TObject* after, TObject* obj); virtual voidTList::AddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* obj, Int_t idx); virtual voidTList::AddBefore(const TObject* before, TObject* obj); virtual voidTList::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(TObject* obj); virtual",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:3032,Usability,Undo,Undo,3032,"m->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution of command's; Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that. Function Members (Methods); public:. virtual~TQCommand(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAdd(TObject* obj, Option_t* opt); virtual voidTList::AddAfter(const TObject* after, TObject* obj); virtual voidTList::AddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* obj, Int_t idx); virtual voidTList::AddBefore(const TObject* before, TObject* obj); virtual voidTList::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(TObject* obj); virtual voidTList::AddFirst(TObject* obj, Option_t* opt); virtual voidTList::AddLast(TObject* obj); virtual voidTList::AddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:3040,Usability,undo,undo,3040,"m->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution of command's; Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that. Function Members (Methods); public:. virtual~TQCommand(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAdd(TObject* obj, Option_t* opt); virtual voidTList::AddAfter(const TObject* after, TObject* obj); virtual voidTList::AddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* obj, Int_t idx); virtual voidTList::AddBefore(const TObject* before, TObject* obj); virtual voidTList::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(TObject* obj); virtual voidTList::AddFirst(TObject* obj, Option_t* opt); virtual voidTList::AddLast(TObject* obj); virtual voidTList::AddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:3080,Usability,Undo,Undo,3080," commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution of command's; Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that. Function Members (Methods); public:. virtual~TQCommand(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAdd(TObject* obj, Option_t* opt); virtual voidTList::AddAfter(const TObject* after, TObject* obj); virtual voidTList::AddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* obj, Int_t idx); virtual voidTList::AddBefore(const TObject* before, TObject* obj); virtual voidTList::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(TObject* obj); virtual voidTList::AddFirst(TObject* obj, Option_t* opt); virtual voidTList::AddLast(TObject* obj); virtual voidTList::AddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsB",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:3089,Usability,undo,undo,3089," commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution of command's; Redo method. Use TQUndoManager::Undo to undo commands in history list.; Redo is Undo for undo action. Use TQUndoManager::Redo method for that. Function Members (Methods); public:. virtual~TQCommand(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAdd(TObject* obj, Option_t* opt); virtual voidTList::AddAfter(const TObject* after, TObject* obj); virtual voidTList::AddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* obj, Int_t idx); virtual voidTList::AddBefore(const TObject* before, TObject* obj); virtual voidTList::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(TObject* obj); virtual voidTList::AddFirst(TObject* obj, Option_t* opt); virtual voidTList::AddLast(TObject* obj); virtual voidTList::AddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsB",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:4797,Usability,Clear,Clear,4797,"ual voidTList::AddLast(TObject* obj); virtual voidTList::AddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTCollection::Browse(TBrowser* b); virtual Bool_tCanCompress(TQCommand* c) const; virtual Bool_tCanMerge(TQCommand* c) const; virtual Bool_tCanRedo() const; virtual Bool_tCanUndo() const; Int_tTCollection::Capacity() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidCompress(TQCommand* c); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual voidTQObject::Destroyed()SIGNAL ; Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, cons",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:14219,Usability,undo,undo,14219,"oveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTList::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetArgs(Int_t nargs); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidSetRedoArgs(Int_t nargs); virtual voidSetTitle(const char* title); virtual voidSetUndoArgs(Int_t nargs); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTList::Sort(Bool_t order = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQCommand(const TQCommand& com); TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); virtual voidUndo(Option_t* option = """")SIGNAL ; voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:14312,Usability,undo,undo,14312,"oveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTList::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetArgs(Int_t nargs); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidSetRedoArgs(Int_t nargs); virtual voidSetTitle(const char* title); virtual voidSetUndoArgs(Int_t nargs); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTList::Sort(Bool_t order = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQCommand(const TQCommand& com); TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); virtual voidUndo(Option_t* option = """")SIGNAL ; voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:15748,Usability,undo,undo,15748,"ct::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTSeqCollection::Changed(); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTList::DeleteLink(TObjLink* lnk); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TObjLink**TList::DoSort(TObjLink** head, Int_t n); TObjLink*TList::FindLink(const TObject* obj, Int_t& idx) const; virtual const char*TCollection::GetCollectionEntryName(TObject* entry) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidInit(const char* cl, void* object, const char* redo, const char* undo); TObjLink*TList::LinkAt(Int_t idx) const; Bool_tTList::LnkCompare(TObjLink* l1, TObjLink* l2); voidTObject::MakeZombie(); virtual TObjLink*TList::NewLink(TObject* obj, TObjLink* prev = __null); virtual TObjLink*TList::NewOptLink(TObject* obj, Option_t* opt, TObjLink* prev = __null); virtual voidTCollection::PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; virtual voidPrintCollectionHeader(Option_t* option) const. private:. TQCommand&operator=(const TQCommand&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:17639,Usability,undo,undo,17639,"ck; static TObject::EStatusBitsTObject::kHasUUID; static TCollection::(anonymous)TCollection::kInitCapacity; static TCollection::(anonymous)TCollection::kInitHashTableCapacity; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfNRargsnumber of redo arguments; Int_tfNUargsnumber of undo arguments; TStringfNamecommand name. Default is ""ClassName::RedoName(args)""; TStringTCollection::fNamename of the collection; Bool_tfNewDeletekTRUE if Redo/Undo methods are new/delete; void*fObjectobject to which undo/redo actions applied; TQConnection*fRedodo/redo action; Long_t*fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used f",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:17800,Usability,Undo,Undo,17800,"tic TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfNRargsnumber of redo arguments; Int_tfNUargsnumber of undo arguments; TStringfNamecommand name. Default is ""ClassName::RedoName(args)""; TStringTCollection::fNamename of the collection; Bool_tfNewDeletekTRUE if Redo/Undo methods are new/delete; void*fObjectobject to which undo/redo actions applied; TQConnection*fRedodo/redo action; Long_t*fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←. TQUndoManager. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj i",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:17857,Usability,undo,undo,17857,"tic TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfNRargsnumber of redo arguments; Int_tfNUargsnumber of undo arguments; TStringfNamecommand name. Default is ""ClassName::RedoName(args)""; TStringTCollection::fNamename of the collection; Bool_tfNewDeletekTRUE if Redo/Undo methods are new/delete; void*fObjectobject to which undo/redo actions applied; TQConnection*fRedodo/redo action; Long_t*fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←. TQUndoManager. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj i",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:18154,Usability,undo,undoing,18154,"tic TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfNRargsnumber of redo arguments; Int_tfNUargsnumber of undo arguments; TStringfNamecommand name. Default is ""ClassName::RedoName(args)""; TStringTCollection::fNamename of the collection; Bool_tfNewDeletekTRUE if Redo/Undo methods are new/delete; void*fObjectobject to which undo/redo actions applied; TQConnection*fRedodo/redo action; Long_t*fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←. TQUndoManager. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj i",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:18255,Usability,Undo,Undo,18255,"tic TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfNRargsnumber of redo arguments; Int_tfNUargsnumber of undo arguments; TStringfNamecommand name. Default is ""ClassName::RedoName(args)""; TStringTCollection::fNamename of the collection; Bool_tfNewDeletekTRUE if Redo/Undo methods are new/delete; void*fObjectobject to which undo/redo actions applied; TQConnection*fRedodo/redo action; Long_t*fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←. TQUndoManager. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj i",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:18719,Usability,undo,undo,18719,"e::RedoName(args)""; TStringTCollection::fNamename of the collection; Bool_tfNewDeletekTRUE if Redo/Undo methods are new/delete; void*fObjectobject to which undo/redo actions applied; TQConnection*fRedodo/redo action; Long_t*fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←. TQUndoManager. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:18862,Usability,undo,undo,18862,"d*fObjectobject to which undo/redo actions applied; TQConnection*fRedodo/redo action; Long_t*fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←. TQUndoManager. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRU",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:19004,Usability,undo,undo,19004,"ollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←. TQUndoManager. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQComman",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:19033,Usability,undo,undo,19033,"ollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←. TQUndoManager. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQComman",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:19115,Usability,undo,undo,19115," Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←. TQUndoManager. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/und",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:19173,Usability,undo,undo,19173," Int_tfState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tfStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringfTitlecommand description; TQConnection*fUndoundo action; Long_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←. TQUndoManager. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/und",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:19316,Usability,undo,undo,19316,"_t*fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←. TQUndoManager. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:19366,Usability,undo,undo,19366,"ject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←. TQUndoManager. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:19517,Usability,undo,undo,19517,"s Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←. TQUndoManager. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; one needs to call TQCommand::SetUndoArgs(1, character) fr",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:19634,Usability,undo,undo,19634,"nit(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; one needs to call TQCommand::SetUndoArgs(1, character) from; inside of TGTextEdit::DelChar() method, i.e. TQCommand::GetCommand()->SetUndoArgs(1, somechar);. void Delete(Option_t* option = """"); If ""opt"" is not zero",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:19663,Usability,undo,undo,19663,"nit(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; one needs to call TQCommand::SetUndoArgs(1, character) from; inside of TGTextEdit::DelChar() method, i.e. TQCommand::GetCommand()->SetUndoArgs(1, somechar);. void Delete(Option_t* option = """"); If ""opt"" is not zero",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:19730,Usability,undo,undo,19730," protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; one needs to call TQCommand::SetUndoArgs(1, character) from; inside of TGTextEdit::DelChar() method, i.e. TQCommand::GetCommand()->SetUndoArgs(1, somechar);. void Delete(Option_t* option = """"); If ""opt"" is not zero delete every merged command which option string is; equal to ""opt"". If ""opt""",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:19865,Usability,undo,undo,19865,"tor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; one needs to call TQCommand::SetUndoArgs(1, character) from; inside of TGTextEdit::DelChar() method, i.e. TQCommand::GetCommand()->SetUndoArgs(1, somechar);. void Delete(Option_t* option = """"); If ""opt"" is not zero delete every merged command which option string is; equal to ""opt"". If ""opt"" is zero - delete all merged commands. Bool_t CanMerge(TQCommand* c) const; Two commands can be merged if they can be composed into; a single command",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:19916,Usability,undo,undo,19916,"ame.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; one needs to call TQCommand::SetUndoArgs(1, character) from; inside of TGTextEdit::DelChar() method, i.e. TQCommand::GetCommand()->SetUndoArgs(1, somechar);. void Delete(Option_t* option = """"); If ""opt"" is not zero delete every merged command which option string is; equal to ""opt"". If ""opt"" is zero - delete all merged commands. Bool_t CanMerge(TQCommand* c) const; Two commands can be merged if they can be composed into; a single command (Macro command). To allow merging commands",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:20136,Usability,undo,undo,20136,"redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; one needs to call TQCommand::SetUndoArgs(1, character) from; inside of TGTextEdit::DelChar() method, i.e. TQCommand::GetCommand()->SetUndoArgs(1, somechar);. void Delete(Option_t* option = """"); If ""opt"" is not zero delete every merged command which option string is; equal to ""opt"". If ""opt"" is zero - delete all merged commands. Bool_t CanMerge(TQCommand* c) const; Two commands can be merged if they can be composed into; a single command (Macro command). To allow merging commands user might override this function. void Merge(TQCommand* c); Add command to the list of merged commands.; This make it possible to group complex actions together so an end user; can un",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:20182,Usability,undo,undo,20182,"thod/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; one needs to call TQCommand::SetUndoArgs(1, character) from; inside of TGTextEdit::DelChar() method, i.e. TQCommand::GetCommand()->SetUndoArgs(1, somechar);. void Delete(Option_t* option = """"); If ""opt"" is not zero delete every merged command which option string is; equal to ""opt"". If ""opt"" is zero - delete all merged commands. Bool_t CanMerge(TQCommand* c) const; Two commands can be merged if they can be composed into; a single command (Macro command). To allow merging commands user might override this function. void Merge(TQCommand* c); Add command to the list of merged commands.; This make it possible to group complex actions together so an end user; can undo and redo them with one command. Execution of TQUndoManager::Undo(),;",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:20394,Usability,undo,undo,20394,"mitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; one needs to call TQCommand::SetUndoArgs(1, character) from; inside of TGTextEdit::DelChar() method, i.e. TQCommand::GetCommand()->SetUndoArgs(1, somechar);. void Delete(Option_t* option = """"); If ""opt"" is not zero delete every merged command which option string is; equal to ""opt"". If ""opt"" is zero - delete all merged commands. Bool_t CanMerge(TQCommand* c) const; Two commands can be merged if they can be composed into; a single command (Macro command). To allow merging commands user might override this function. void Merge(TQCommand* c); Add command to the list of merged commands.; This make it possible to group complex actions together so an end user; can undo and redo them with one command. Execution of TQUndoManager::Undo(),; TQUndoManager::Redo() methods only invokes the top level command as a whole. Merge method is analogous to logical join operation. Note: Merge method invokes redo action. Long64_t Merge(TCollection* , TFileMerg",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:21108,Usability,undo,undo,21108,"tCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; one needs to call TQCommand::SetUndoArgs(1, character) from; inside of TGTextEdit::DelChar() method, i.e. TQCommand::GetCommand()->SetUndoArgs(1, somechar);. void Delete(Option_t* option = """"); If ""opt"" is not zero delete every merged command which option string is; equal to ""opt"". If ""opt"" is zero - delete all merged commands. Bool_t CanMerge(TQCommand* c) const; Two commands can be merged if they can be composed into; a single command (Macro command). To allow merging commands user might override this function. void Merge(TQCommand* c); Add command to the list of merged commands.; This make it possible to group complex actions together so an end user; can undo and redo them with one command. Execution of TQUndoManager::Undo(),; TQUndoManager::Redo() methods only invokes the top level command as a whole. Merge method is analogous to logical join operation. Note: Merge method invokes redo action. Long64_t Merge(TCollection* , TFileMergeInfo* ); Merge a collection of TQCommand. void Add(TObject* obj, Option_t* opt); Add command to the list of merged commands. Option string can contain substrings:; ""compress"" - try to compress input command; ""radd"" - execute redo action of input command; ""uadd"" - execute undo action of input command. Bool_t CanCompress(TQCommand* c) const; By default, commands can be compressed if they are:. - equal; - setter commands. More complicated commands might want to override this function. void Compress(TQCommand* c); Compress command. Compression is analogous to arithmetic ""addition operation"". Note:; - The compressed command will be deleted.; - Execution Compress method invokes Redo action wi",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:21173,Usability,Undo,Undo,21173,"amically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; one needs to call TQCommand::SetUndoArgs(1, character) from; inside of TGTextEdit::DelChar() method, i.e. TQCommand::GetCommand()->SetUndoArgs(1, somechar);. void Delete(Option_t* option = """"); If ""opt"" is not zero delete every merged command which option string is; equal to ""opt"". If ""opt"" is zero - delete all merged commands. Bool_t CanMerge(TQCommand* c) const; Two commands can be merged if they can be composed into; a single command (Macro command). To allow merging commands user might override this function. void Merge(TQCommand* c); Add command to the list of merged commands.; This make it possible to group complex actions together so an end user; can undo and redo them with one command. Execution of TQUndoManager::Undo(),; TQUndoManager::Redo() methods only invokes the top level command as a whole. Merge method is analogous to logical join operation. Note: Merge method invokes redo action. Long64_t Merge(TCollection* , TFileMergeInfo* ); Merge a collection of TQCommand. void Add(TObject* obj, Option_t* opt); Add command to the list of merged commands. Option string can contain substrings:; ""compress"" - try to compress input command; ""radd"" - execute redo action of input command; ""uadd"" - execute undo action of input command. Bool_t CanCompress(TQCommand* c) const; By default, commands can be compressed if they are:. - equal; - setter commands. More complicated commands might want to override this function. void Compress(TQCommand* c); Compress command. Compression is analogous to arithmetic ""addition operation"". Note:; - The compressed command will be deleted.; - Execution Compress method invokes Redo action with new redo arguments; inheritied from compressed command. More complicated commands might want to override this f",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:21664,Usability,undo,undo,21664," Delete(Option_t* option = """"); If ""opt"" is not zero delete every merged command which option string is; equal to ""opt"". If ""opt"" is zero - delete all merged commands. Bool_t CanMerge(TQCommand* c) const; Two commands can be merged if they can be composed into; a single command (Macro command). To allow merging commands user might override this function. void Merge(TQCommand* c); Add command to the list of merged commands.; This make it possible to group complex actions together so an end user; can undo and redo them with one command. Execution of TQUndoManager::Undo(),; TQUndoManager::Redo() methods only invokes the top level command as a whole. Merge method is analogous to logical join operation. Note: Merge method invokes redo action. Long64_t Merge(TCollection* , TFileMergeInfo* ); Merge a collection of TQCommand. void Add(TObject* obj, Option_t* opt); Add command to the list of merged commands. Option string can contain substrings:; ""compress"" - try to compress input command; ""radd"" - execute redo action of input command; ""uadd"" - execute undo action of input command. Bool_t CanCompress(TQCommand* c) const; By default, commands can be compressed if they are:. - equal; - setter commands. More complicated commands might want to override this function. void Compress(TQCommand* c); Compress command. Compression is analogous to arithmetic ""addition operation"". Note:; - The compressed command will be deleted.; - Execution Compress method invokes Redo action with new redo arguments; inheritied from compressed command. More complicated commands might want to override this function. Bool_t IsEqual(const TObject* obj) const; Equal comparison. The commands are equal if they are; applied to the same object and have the same Redo/Undo actions. More complicated commands might want to override this function. Bool_t IsSetter() const; Returns kTRUE is command if Redo is the same as Undo function; and is the setter action. By default, all functions with names like ""SetXXX"" or ""se",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:22356,Usability,Undo,Undo,22356,"erge method invokes redo action. Long64_t Merge(TCollection* , TFileMergeInfo* ); Merge a collection of TQCommand. void Add(TObject* obj, Option_t* opt); Add command to the list of merged commands. Option string can contain substrings:; ""compress"" - try to compress input command; ""radd"" - execute redo action of input command; ""uadd"" - execute undo action of input command. Bool_t CanCompress(TQCommand* c) const; By default, commands can be compressed if they are:. - equal; - setter commands. More complicated commands might want to override this function. void Compress(TQCommand* c); Compress command. Compression is analogous to arithmetic ""addition operation"". Note:; - The compressed command will be deleted.; - Execution Compress method invokes Redo action with new redo arguments; inheritied from compressed command. More complicated commands might want to override this function. Bool_t IsEqual(const TObject* obj) const; Equal comparison. The commands are equal if they are; applied to the same object and have the same Redo/Undo actions. More complicated commands might want to override this function. Bool_t IsSetter() const; Returns kTRUE is command if Redo is the same as Undo function; and is the setter action. By default, all functions with names like ""SetXXX"" or ""setXXX""; considered as setters. Another type of setters are Move, Resize operations. More complicated commands might want to override this function. void SetArgs(Int_t narg, ...); Set do/redo and undo parameters. The format is; SetArgs(number_of_params, redo_params, undo_params). Example:; move_command->SetArgs(2, 100, 100, 200, 200);; 2 params, (100,100) - do/redo position, (200,200) - undo position. void SetRedoArgs(Int_t narg, ...); Set redo parameters. The format is; SetRedoArgs(number_of_params, params). Example:; move_command->SetRedoArgs(2, 100, 100);. void SetUndoArgs(Int_t narg, ...); Set undo parameters. The format is; SetUndoArgs(number_of_params, params). Example:; move_command->SetUndoArgs(2, 2",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:22507,Usability,Undo,Undo,22507,"e list of merged commands. Option string can contain substrings:; ""compress"" - try to compress input command; ""radd"" - execute redo action of input command; ""uadd"" - execute undo action of input command. Bool_t CanCompress(TQCommand* c) const; By default, commands can be compressed if they are:. - equal; - setter commands. More complicated commands might want to override this function. void Compress(TQCommand* c); Compress command. Compression is analogous to arithmetic ""addition operation"". Note:; - The compressed command will be deleted.; - Execution Compress method invokes Redo action with new redo arguments; inheritied from compressed command. More complicated commands might want to override this function. Bool_t IsEqual(const TObject* obj) const; Equal comparison. The commands are equal if they are; applied to the same object and have the same Redo/Undo actions. More complicated commands might want to override this function. Bool_t IsSetter() const; Returns kTRUE is command if Redo is the same as Undo function; and is the setter action. By default, all functions with names like ""SetXXX"" or ""setXXX""; considered as setters. Another type of setters are Move, Resize operations. More complicated commands might want to override this function. void SetArgs(Int_t narg, ...); Set do/redo and undo parameters. The format is; SetArgs(number_of_params, redo_params, undo_params). Example:; move_command->SetArgs(2, 100, 100, 200, 200);; 2 params, (100,100) - do/redo position, (200,200) - undo position. void SetRedoArgs(Int_t narg, ...); Set redo parameters. The format is; SetRedoArgs(number_of_params, params). Example:; move_command->SetRedoArgs(2, 100, 100);. void SetUndoArgs(Int_t narg, ...); Set undo parameters. The format is; SetUndoArgs(number_of_params, params). Example:; move_command->SetUndoArgs(2, 200, 200);. Bool_t CanRedo() const; Returns kTRUE if Redo action is possible, kFALSE if it's not.; By default, only single sequential redo action is possible. Bool_t CanUnd",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:22799,Usability,undo,undo,22799," setter commands. More complicated commands might want to override this function. void Compress(TQCommand* c); Compress command. Compression is analogous to arithmetic ""addition operation"". Note:; - The compressed command will be deleted.; - Execution Compress method invokes Redo action with new redo arguments; inheritied from compressed command. More complicated commands might want to override this function. Bool_t IsEqual(const TObject* obj) const; Equal comparison. The commands are equal if they are; applied to the same object and have the same Redo/Undo actions. More complicated commands might want to override this function. Bool_t IsSetter() const; Returns kTRUE is command if Redo is the same as Undo function; and is the setter action. By default, all functions with names like ""SetXXX"" or ""setXXX""; considered as setters. Another type of setters are Move, Resize operations. More complicated commands might want to override this function. void SetArgs(Int_t narg, ...); Set do/redo and undo parameters. The format is; SetArgs(number_of_params, redo_params, undo_params). Example:; move_command->SetArgs(2, 100, 100, 200, 200);; 2 params, (100,100) - do/redo position, (200,200) - undo position. void SetRedoArgs(Int_t narg, ...); Set redo parameters. The format is; SetRedoArgs(number_of_params, params). Example:; move_command->SetRedoArgs(2, 100, 100);. void SetUndoArgs(Int_t narg, ...); Set undo parameters. The format is; SetUndoArgs(number_of_params, params). Example:; move_command->SetUndoArgs(2, 200, 200);. Bool_t CanRedo() const; Returns kTRUE if Redo action is possible, kFALSE if it's not.; By default, only single sequential redo action is possible. Bool_t CanUndo() const; Returns kTRUE if Undo action is possible, kFALSE if it's not.; By default, only single tial undo action is possible. void Redo(Option_t* option = """"); Execute command and then smerged commands. void Undo(Option_t* option = """"); Unexecute all merged commands and the command.; Merged commands are e",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:22993,Usability,undo,undo,22993,"ogous to arithmetic ""addition operation"". Note:; - The compressed command will be deleted.; - Execution Compress method invokes Redo action with new redo arguments; inheritied from compressed command. More complicated commands might want to override this function. Bool_t IsEqual(const TObject* obj) const; Equal comparison. The commands are equal if they are; applied to the same object and have the same Redo/Undo actions. More complicated commands might want to override this function. Bool_t IsSetter() const; Returns kTRUE is command if Redo is the same as Undo function; and is the setter action. By default, all functions with names like ""SetXXX"" or ""setXXX""; considered as setters. Another type of setters are Move, Resize operations. More complicated commands might want to override this function. void SetArgs(Int_t narg, ...); Set do/redo and undo parameters. The format is; SetArgs(number_of_params, redo_params, undo_params). Example:; move_command->SetArgs(2, 100, 100, 200, 200);; 2 params, (100,100) - do/redo position, (200,200) - undo position. void SetRedoArgs(Int_t narg, ...); Set redo parameters. The format is; SetRedoArgs(number_of_params, params). Example:; move_command->SetRedoArgs(2, 100, 100);. void SetUndoArgs(Int_t narg, ...); Set undo parameters. The format is; SetUndoArgs(number_of_params, params). Example:; move_command->SetUndoArgs(2, 200, 200);. Bool_t CanRedo() const; Returns kTRUE if Redo action is possible, kFALSE if it's not.; By default, only single sequential redo action is possible. Bool_t CanUndo() const; Returns kTRUE if Undo action is possible, kFALSE if it's not.; By default, only single tial undo action is possible. void Redo(Option_t* option = """"); Execute command and then smerged commands. void Undo(Option_t* option = """"); Unexecute all merged commands and the command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged co",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:23208,Usability,undo,undo,23208,"ol_t IsEqual(const TObject* obj) const; Equal comparison. The commands are equal if they are; applied to the same object and have the same Redo/Undo actions. More complicated commands might want to override this function. Bool_t IsSetter() const; Returns kTRUE is command if Redo is the same as Undo function; and is the setter action. By default, all functions with names like ""SetXXX"" or ""setXXX""; considered as setters. Another type of setters are Move, Resize operations. More complicated commands might want to override this function. void SetArgs(Int_t narg, ...); Set do/redo and undo parameters. The format is; SetArgs(number_of_params, redo_params, undo_params). Example:; move_command->SetArgs(2, 100, 100, 200, 200);; 2 params, (100,100) - do/redo position, (200,200) - undo position. void SetRedoArgs(Int_t narg, ...); Set redo parameters. The format is; SetRedoArgs(number_of_params, params). Example:; move_command->SetRedoArgs(2, 100, 100);. void SetUndoArgs(Int_t narg, ...); Set undo parameters. The format is; SetUndoArgs(number_of_params, params). Example:; move_command->SetUndoArgs(2, 200, 200);. Bool_t CanRedo() const; Returns kTRUE if Redo action is possible, kFALSE if it's not.; By default, only single sequential redo action is possible. Bool_t CanUndo() const; Returns kTRUE if Undo action is possible, kFALSE if it's not.; By default, only single tial undo action is possible. void Redo(Option_t* option = """"); Execute command and then smerged commands. void Undo(Option_t* option = """"); Unexecute all merged commands and the command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo c",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:23518,Usability,Undo,Undo,23518,"n; and is the setter action. By default, all functions with names like ""SetXXX"" or ""setXXX""; considered as setters. Another type of setters are Move, Resize operations. More complicated commands might want to override this function. void SetArgs(Int_t narg, ...); Set do/redo and undo parameters. The format is; SetArgs(number_of_params, redo_params, undo_params). Example:; move_command->SetArgs(2, 100, 100, 200, 200);; 2 params, (100,100) - do/redo position, (200,200) - undo position. void SetRedoArgs(Int_t narg, ...); Set redo parameters. The format is; SetRedoArgs(number_of_params, params). Example:; move_command->SetRedoArgs(2, 100, 100);. void SetUndoArgs(Int_t narg, ...); Set undo parameters. The format is; SetUndoArgs(number_of_params, params). Example:; move_command->SetUndoArgs(2, 200, 200);. Bool_t CanRedo() const; Returns kTRUE if Redo action is possible, kFALSE if it's not.; By default, only single sequential redo action is possible. Bool_t CanUndo() const; Returns kTRUE if Undo action is possible, kFALSE if it's not.; By default, only single tial undo action is possible. void Redo(Option_t* option = """"); Execute command and then smerged commands. void Undo(Option_t* option = """"); Unexecute all merged commands and the command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs()",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:23593,Usability,undo,undo,23593," ""SetXXX"" or ""setXXX""; considered as setters. Another type of setters are Move, Resize operations. More complicated commands might want to override this function. void SetArgs(Int_t narg, ...); Set do/redo and undo parameters. The format is; SetArgs(number_of_params, redo_params, undo_params). Example:; move_command->SetArgs(2, 100, 100, 200, 200);; 2 params, (100,100) - do/redo position, (200,200) - undo position. void SetRedoArgs(Int_t narg, ...); Set redo parameters. The format is; SetRedoArgs(number_of_params, params). Example:; move_command->SetRedoArgs(2, 100, 100);. void SetUndoArgs(Int_t narg, ...); Set undo parameters. The format is; SetUndoArgs(number_of_params, params). Example:; move_command->SetUndoArgs(2, 200, 200);. Bool_t CanRedo() const; Returns kTRUE if Redo action is possible, kFALSE if it's not.; By default, only single sequential redo action is possible. Bool_t CanUndo() const; Returns kTRUE if Undo action is possible, kFALSE if it's not.; By default, only single tial undo action is possible. void Redo(Option_t* option = """"); Execute command and then smerged commands. void Undo(Option_t* option = """"); Unexecute all merged commands and the command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; R",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:23700,Usability,Undo,Undo,23700,"de this function. void SetArgs(Int_t narg, ...); Set do/redo and undo parameters. The format is; SetArgs(number_of_params, redo_params, undo_params). Example:; move_command->SetArgs(2, 100, 100, 200, 200);; 2 params, (100,100) - do/redo position, (200,200) - undo position. void SetRedoArgs(Int_t narg, ...); Set redo parameters. The format is; SetRedoArgs(number_of_params, params). Example:; move_command->SetRedoArgs(2, 100, 100);. void SetUndoArgs(Int_t narg, ...); Set undo parameters. The format is; SetUndoArgs(number_of_params, params). Example:; move_command->SetUndoArgs(2, 200, 200);. Bool_t CanRedo() const; Returns kTRUE if Redo action is possible, kFALSE if it's not.; By default, only single sequential redo action is possible. Bool_t CanUndo() const; Returns kTRUE if Undo action is possible, kFALSE if it's not.; By default, only single tial undo action is possible. void Redo(Option_t* option = """"); Execute command and then smerged commands. void Undo(Option_t* option = """"); Unexecute all merged commands and the command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t ",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:24136,Usability,Undo,UndoName,24136,"Example:; move_command->SetRedoArgs(2, 100, 100);. void SetUndoArgs(Int_t narg, ...); Set undo parameters. The format is; SetUndoArgs(number_of_params, params). Example:; move_command->SetUndoArgs(2, 200, 200);. Bool_t CanRedo() const; Returns kTRUE if Redo action is possible, kFALSE if it's not.; By default, only single sequential redo action is possible. Bool_t CanUndo() const; Returns kTRUE if Undo action is possible, kFALSE if it's not.; By default, only single tial undo action is possible. void Redo(Option_t* option = """"); Execute command and then smerged commands. void Undo(Option_t* option = """"); Unexecute all merged commands and the command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the comman",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:24275,Usability,undo,undo,24275,"mber_of_params, params). Example:; move_command->SetUndoArgs(2, 200, 200);. Bool_t CanRedo() const; Returns kTRUE if Redo action is possible, kFALSE if it's not.; By default, only single sequential redo action is possible. Bool_t CanUndo() const; Returns kTRUE if Undo action is possible, kFALSE if it's not.; By default, only single tial undo action is possible. void Redo(Option_t* option = """"); Execute command and then smerged commands. void Undo(Option_t* option = """"); Unexecute all merged commands and the command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print ",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:24425,Usability,undo,undo,24425," if it's not.; By default, only single sequential redo action is possible. Bool_t CanUndo() const; Returns kTRUE if Undo action is possible, kFALSE if it's not.; By default, only single tial undo action is possible. void Redo(Option_t* option = """"); Execute command and then smerged commands. void Undo(Option_t* option = """"); Unexecute all merged commands and the command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQCommand & operator=(const TQCommand& ). TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { re",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:24547,Usability,undo,undo,24547,"s possible, kFALSE if it's not.; By default, only single tial undo action is possible. void Redo(Option_t* option = """"); Execute command and then smerged commands. void Undo(Option_t* option = """"); Unexecute all merged commands and the command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQCommand & operator=(const TQCommand& ). TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun an",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:24617,Usability,undo,undo,24617," is possible. void Redo(Option_t* option = """"); Execute command and then smerged commands. void Undo(Option_t* option = """"); Unexecute all merged commands and the command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQCommand & operator=(const TQCommand& ). TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:24703,Usability,undo,undo,24703,"ommands. void Undo(Option_t* option = """"); Unexecute all merged commands and the command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQCommand & operator=(const TQCommand& ). TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or sugges",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:24786,Usability,undo,undo,24786,"command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQCommand & operator=(const TQCommand& ). TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT s",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQCommand.html:24835,Usability,Undo,Undo,24835," Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQCommand & operator=(const TQCommand& ). TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQCommand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQCommand.html
https://root.cern/root/html604/TQConnection.html:4800,Availability,Error,Error,4800,"idTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidExecuteMethod(); voidExecuteMethod(Long_t param); voidExecuteMethod(Long64_t param); voidExecuteMethod(Double_t param); voidExecuteMethod(const char* params); voidExecuteMethod(Int_t nargs, va_list va); voidExecuteMethod(Long_t* params, Int_t nparam = -1); voidExecuteMethod<>(); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); const char*GetClassName() const; static TCollection*TCollection::GetCurrentCollection(); virtual ",MatchSource.WIKI,root/html604/TQConnection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQConnection.html
https://root.cern/root/html604/TQConnection.html:4929,Availability,error,error,4929,"mit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidExecuteMethod(); voidExecuteMethod(Long_t param); voidExecuteMethod(Long64_t param); voidExecuteMethod(Double_t param); voidExecuteMethod(const char* params); voidExecuteMethod(Int_t nargs, va_list va); voidExecuteMethod(Long_t* params, Int_t nparam = -1); voidExecuteMethod<>(); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); const char*GetClassName() const; static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtu",MatchSource.WIKI,root/html604/TQConnection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQConnection.html
https://root.cern/root/html604/TQConnection.html:5013,Availability,error,error,5013,"_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidExecuteMethod(); voidExecuteMethod(Long_t param); voidExecuteMethod(Long64_t param); voidExecuteMethod(Double_t param); voidExecuteMethod(const char* params); voidExecuteMethod(Int_t nargs, va_list va); voidExecuteMethod(Long_t* params, Int_t nparam = -1); voidExecuteMethod<>(); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); const char*GetClassName() const; static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() c",MatchSource.WIKI,root/html604/TQConnection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQConnection.html
https://root.cern/root/html604/TQConnection.html:8188,Integrability,Message,Message,8188,"tBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual TObjLink*TList::LastLink() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidls(Option_t* option = """") const; virtual TIterator*TList::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseIterator() const; voidTObject::MayNotUse(const char* method) const; Long64_tTSeqCollection::Merge(TCollection* list); virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; static Int_tTSeqCollection::ObjCompare(TObject* a, TObject* b); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject*TCollection::operator()(const char* name) const; virtual voidTCollection::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTCollection::Print(Option_t* option = """") const; virtual voidTCollection::Print(Option_t* option, Int_t recurse) const; virtual voidTCollection::Print(Opt",MatchSource.WIKI,root/html604/TQConnection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQConnection.html
https://root.cern/root/html604/TQConnection.html:14897,Integrability,interface,interface,14897,"t::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TStringfClassNameclass name of the receiver; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TStringTCollection::fNamename of the collection; void*fReceiverptr to object to which slot is applied; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; TQSlot*fSlotslot-method calling interface; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQConnection. Function documentation; TQConnection(); Default constructor. TQConnection(TClass* cl, void* receiver, const char* method_name); TQConnection ctor.; cl != 0 - connection to object == receiver of class == cl; and method == method_name; cl == 0 - connection to function with name == method_name. TQConnection(const char* class_name, void* receiver, const char* method_name); TQConnection ctor.; Creates conn",MatchSource.WIKI,root/html604/TQConnection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQConnection.html
https://root.cern/root/html604/TQConnection.html:118,Modifiability,inherit,inheritance,118,". TQConnection. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TQConnection. class TQConnection: public TList, public TQObject. TQConnection class is an internal class, used in the object; communication mechanism. TQConnection:; - is a list of signal_lists containing pointers; to this connection; - receiver is the object to which slot-method is applied. This implementation is provided by; Valeriy Onuchin (onuchin@sirius.ihep.su). Function Members (Methods); public:. virtual~TQConnection(); voidTObject::AbstractMethod(const char* method) const; virtual voidTList::Add(TObject* obj); virtual voidTList::Add(TObject* obj, Option_t* opt); virtual voidTList::AddAfter(const TObject* after, TObject* obj); virtual voidTList::AddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* obj, Int_t idx); virtual voidTList::AddBefore(const TObject* before, TObject* obj); virtual voidTList::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(TObject* obj); virtual voidTList::AddFirst(TObject* obj, Option_t* opt); virtual voidTList::AddLast(TObject* obj); virtual voidTList::AddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity",MatchSource.WIKI,root/html604/TQConnection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQConnection.html
https://root.cern/root/html604/TQConnection.html:7027,Modifiability,Inherit,InheritsFrom,7027,"ect::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; void*GetReceiver() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTCollection::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual Int_tTSeqCollection::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual TObjLink*TList::LastLink() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidls(Option_t* option = """") const; virtual TIterator*TList::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollectio",MatchSource.WIKI,root/html604/TQConnection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQConnection.html
https://root.cern/root/html604/TQConnection.html:7093,Modifiability,Inherit,InheritsFrom,7093,"ctions() const; TList*TQObject::GetListOfSignals() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; void*GetReceiver() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTCollection::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual Int_tTSeqCollection::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual TObjLink*TList::LastLink() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidls(Option_t* option = """") const; virtual TIterator*TList::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseIterator() const; voidTObject::MayNotUse(const char*",MatchSource.WIKI,root/html604/TQConnection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQConnection.html
https://root.cern/root/html604/TQConnection.html:15125,Modifiability,Inherit,Inheritance,15125,"bie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TStringfClassNameclass name of the receiver; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TStringTCollection::fNamename of the collection; void*fReceiverptr to object to which slot is applied; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; TQSlot*fSlotslot-method calling interface; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQConnection. Function documentation; TQConnection(); Default constructor. TQConnection(TClass* cl, void* receiver, const char* method_name); TQConnection ctor.; cl != 0 - connection to object == receiver of class == cl; and method == method_name; cl == 0 - connection to function with name == method_name. TQConnection(const char* class_name, void* receiver, const char* method_name); TQConnection ctor.; Creates connection to method of class specified by name,; it could be interpreted class and with method == funcname. TQConnection(const TQConnection& con); Copy constructor. Ignore connections to this TQConnections. ~TQConnection(); TQConnection dtor.; - remove this connection from all signal lists; - we do not delete fSlot if it has other connections,; TQSlot::fCounter > 0 . const char * GetName() const; Returns name of connection (aka name of slot). void Destroyed(); Signal Destroyed tells that connection is ",MatchSource.WIKI,root/html604/TQConnection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQConnection.html
https://root.cern/root/html604/TQConnection.html:16915,Modifiability,variab,variable,16915,"his connection from all signal lists; - we do not delete fSlot if it has other connections,; TQSlot::fCounter > 0 . const char * GetName() const; Returns name of connection (aka name of slot). void Destroyed(); Signal Destroyed tells that connection is destroyed. void ls(Option_t* option = """") const; List TQConnection full method name and list all signals; connected to this connection. void PrintCollectionHeader(Option_t* option) const; Print TQConnection full method name and print all; signals connected to this connection. void ExecuteMethod(); Apply slot-method to the fReceiver object without arguments. void ExecuteMethod(Long_t param); Apply slot-method to the fReceiver object with; single argument value. void ExecuteMethod(Long64_t param); Apply slot-method to the fReceiver object with; single argument value. void ExecuteMethod(Double_t param); Apply slot-method to the fReceiver object with; single argument value. void ExecuteMethod(Long_t* params, Int_t nparam = -1); Apply slot-method to the fReceiver object with variable; number of argument values. void ExecuteMethod(const char* params); Apply slot-method to the fReceiver object and; with string parameter. Bool_t CheckSlot(Int_t nargs) const; Return true if the underlying method is value and the number of argument; is compatible. void * GetSlotAddress() const; Return the object address to be passed to the function. CallFunc_t * LockSlot() const; Lock the interpreter and mark the slot as executing. void UnLockSlot(TQSlot* ) const; Unlock the interpreter and mark the slot as no longer executing. TQConnection & operator=(const TQConnection& ). void * GetReceiver() const; { return fReceiver; }. const char * GetClassName() const; { return fClassName; }. void ExecuteMethod(). » Author: Valeriy Onuchin & Fons Rademakers 15/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or su",MatchSource.WIKI,root/html604/TQConnection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQConnection.html
https://root.cern/root/html604/TQConnection.html:14256,Performance,cache,cache,14256,"t::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TStringfClassNameclass name of the receiver; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TStringTCollection::fNamename of the collection; void*fReceiverptr to object to which slot is applied; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; TQSlot*fSlotslot-method calling interface; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQConnection. Function documentation; TQConnection(); Default constructor. TQConnection(TClass* cl, void* receiver, const char* method_name); TQConnection ctor.; cl != 0 - connection to object == receiver of class == cl; and method == method_name; cl == 0 - connection to function with name == method_name. TQConnection(const char* class_name, void* receiver, const char* method_name); TQConnection ctor.; Creates conn",MatchSource.WIKI,root/html604/TQConnection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQConnection.html
https://root.cern/root/html604/TQConnection.html:6765,Security,Hash,Hash,6765,"on::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; void*GetReceiver() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTCollection::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual Int_tTSeqCollection::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual ",MatchSource.WIKI,root/html604/TQConnection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQConnection.html
https://root.cern/root/html604/TQConnection.html:1674,Testability,Assert,AssertClass,1674,"irtual~TQConnection(); voidTObject::AbstractMethod(const char* method) const; virtual voidTList::Add(TObject* obj); virtual voidTList::Add(TObject* obj, Option_t* opt); virtual voidTList::AddAfter(const TObject* after, TObject* obj); virtual voidTList::AddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidTList::AddAt(TObject* obj, Int_t idx); virtual voidTList::AddBefore(const TObject* before, TObject* obj); virtual voidTList::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(TObject* obj); virtual voidTList::AddFirst(TObject* obj, Option_t* opt); virtual voidTList::AddLast(TObject* obj); virtual voidTList::AddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, ",MatchSource.WIKI,root/html604/TQConnection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQConnection.html
https://root.cern/root/html604/TQConnection.html:11078,Testability,Test,TestBit,11078,"move(TObject* obj); virtual TObject*TList::Remove(TObject* obj); virtual TObject*TList::Remove(TObjLink* lnk); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTList::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTList::Sort(Bool_t order = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQConnection(); TQConnection(const TQConnection& con); TQConnection(TClass* cl, void* receiver, const char* method_name); TQConnection(const char* class_name, void* receiver, const char* method_name); voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQConnection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQConnection.html
https://root.cern/root/html604/TQConnection.html:11117,Testability,Test,TestBits,11117,"move(TObject* obj); virtual TObject*TList::Remove(TObject* obj); virtual TObject*TList::Remove(TObjLink* lnk); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTList::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTList::Sort(Bool_t order = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQConnection(); TQConnection(const TQConnection& con); TQConnection(TClass* cl, void* receiver, const char* method_name); TQConnection(const char* class_name, void* receiver, const char* method_name); voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQConnection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQConnection.html
https://root.cern/root/html604/TQConnection.html:2160,Usability,Clear,Clear,2160,"ist::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(TObject* obj); virtual voidTList::AddFirst(TObject* obj, Option_t* opt); virtual voidTList::AddLast(TObject* obj); virtual voidTList::AddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual voidDestroyed()SIGNAL ; Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObjec",MatchSource.WIKI,root/html604/TQConnection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQConnection.html
https://root.cern/root/html604/TQMimeTypes.html:1514,Availability,Error,Error,1514," virtual~TQMimeTypes(); voidTObject::AbstractMethod(const char* method) const; voidAddType(const char* type, const char* pat, const char* icon, const char* sicon, const char* action); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) con",MatchSource.WIKI,root/html604/TQMimeTypes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQMimeTypes.html
https://root.cern/root/html604/TQMimeTypes.html:1643,Availability,error,error,1643,"tMethod(const char* method) const; voidAddType(const char* type, const char* pat, const char* icon, const char* sicon, const char* action); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Bool_tGetAction(const char* filename, char* action) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const QIcon*GetIcon(const char* filename) const; const QIcon*GetIcon(const TSystemFile* filename); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; Bool_tGetType(const char* filename, char* type) const; virtual UInt_tTObject::GetUniqueID() const; virtual Boo",MatchSource.WIKI,root/html604/TQMimeTypes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQMimeTypes.html
https://root.cern/root/html604/TQMimeTypes.html:1727,Availability,error,error,1727,"nst char* icon, const char* sicon, const char* action); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Bool_tGetAction(const char* filename, char* action) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const QIcon*GetIcon(const char* filename) const; const QIcon*GetIcon(const TSystemFile* filename); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; Bool_tGetType(const char* filename, char* type) const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); Bool_tHasChanged() const; virtual ULong_tTOb",MatchSource.WIKI,root/html604/TQMimeTypes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQMimeTypes.html
https://root.cern/root/html604/TQMimeTypes.html:117,Modifiability,inherit,inheritance,117,". TQMimeTypes. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » QT; » TQMimeTypes. class TQMimeTypes: public TObject. TQMimeTypes and TQMime. This class handles mime types, used by browsers to map file types; to applications and icons. TQMime is internally used by TQMimeType.; This class does allow the Qt-base gui to get the same Mime types; as ROOT mime defines. Function Members (Methods); public:. virtual~TQMimeTypes(); voidTObject::AbstractMethod(const char* method) const; voidAddType(const char* type, const char* pat, const char* icon, const char* sicon, const char* action); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) con",MatchSource.WIKI,root/html604/TQMimeTypes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQMimeTypes.html
https://root.cern/root/html604/TQMimeTypes.html:2846,Modifiability,Inherit,InheritsFrom,2846,", const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Bool_tGetAction(const char* filename, char* action) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const QIcon*GetIcon(const char* filename) const; const QIcon*GetIcon(const TSystemFile* filename); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; Bool_tGetType(const char* filename, char* type) const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); Bool_tHasChanged() const; virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TQMimeTypes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQMimeTypes.html
https://root.cern/root/html604/TQMimeTypes.html:2912,Modifiability,Inherit,InheritsFrom,2912,"onst char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Bool_tGetAction(const char* filename, char* action) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const QIcon*GetIcon(const char* filename) const; const QIcon*GetIcon(const TSystemFile* filename); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; Bool_tGetType(const char* filename, char* type) const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); Bool_tHasChanged() const; virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); ",MatchSource.WIKI,root/html604/TQMimeTypes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQMimeTypes.html
https://root.cern/root/html604/TQMimeTypes.html:6621,Modifiability,Inherit,Inheritance,6621,"nymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tfChangedtrue if file has changed; TStringfFilenamefile name of mime type file; TStringfIconPaththe path to the icon directory; TOrdCollection*fListlist of mime types; static QFileIconProvider*fgDefaultProviderDefault provider of the system icons;. Class Charts. Inheritance Chart:. TObject. ←; TQMimeTypes. Function documentation; IconProvider(const QFileInfo& ). TQMimeTypes(const char* iconPath, const char* file); Create a mime type cache. Read the mime types file ""filename"" and; built a list of mime types. ~TQMimeTypes(); Delete mime type pool. TQMime * Find(const char* filename) const; Given a filename find the matching mime type object. const QIcon * GetIcon(const char* filename) const; Return icon belonging to mime type of filename. const QIcon * GetIcon(const TSystemFile* filename); Return icon belonging to mime type of TSystemFile extension. const QIcon * AddType(const TSystemFile* filename). Bool_t GetAction(const char* filename, char* action) const; Return in action the mime action string belonging to filename. Bool_t GetType(const char* filename, char* type) const; Return in type the mime type belonging to filename. void Print(Option_t* option = """") const; Print list of mime types. void SaveMimes(); Save mime types in user's mime type file. vo",MatchSource.WIKI,root/html604/TQMimeTypes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQMimeTypes.html
https://root.cern/root/html604/TQMimeTypes.html:6795,Performance,cache,cache,6795,"Object::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tfChangedtrue if file has changed; TStringfFilenamefile name of mime type file; TStringfIconPaththe path to the icon directory; TOrdCollection*fListlist of mime types; static QFileIconProvider*fgDefaultProviderDefault provider of the system icons;. Class Charts. Inheritance Chart:. TObject. ←; TQMimeTypes. Function documentation; IconProvider(const QFileInfo& ). TQMimeTypes(const char* iconPath, const char* file); Create a mime type cache. Read the mime types file ""filename"" and; built a list of mime types. ~TQMimeTypes(); Delete mime type pool. TQMime * Find(const char* filename) const; Given a filename find the matching mime type object. const QIcon * GetIcon(const char* filename) const; Return icon belonging to mime type of filename. const QIcon * GetIcon(const TSystemFile* filename); Return icon belonging to mime type of TSystemFile extension. const QIcon * AddType(const TSystemFile* filename). Bool_t GetAction(const char* filename, char* action) const; Return in action the mime action string belonging to filename. Bool_t GetType(const char* filename, char* type) const; Return in type the mime type belonging to filename. void Print(Option_t* option = """") const; Print list of mime types. void SaveMimes(); Save mime types in user's mime type file. void AddType(const char* type, const char* pat, const char* icon, const char* sicon, const char* action); Add a mime type to the list ",MatchSource.WIKI,root/html604/TQMimeTypes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQMimeTypes.html
https://root.cern/root/html604/TQMimeTypes.html:2736,Security,Hash,Hash,2736," virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Bool_tGetAction(const char* filename, char* action) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const QIcon*GetIcon(const char* filename) const; const QIcon*GetIcon(const TSystemFile* filename); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; Bool_tGetType(const char* filename, char* type) const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); Bool_tHasChanged() const; virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TQMimeTypes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQMimeTypes.html
https://root.cern/root/html604/TQMimeTypes.html:4821,Testability,Test,TestBit,4821,"tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; voidSaveMimes(); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQMimeTypes(const char* iconPath, const char* file); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQMimeTypes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQMimeTypes.html
https://root.cern/root/html604/TQMimeTypes.html:4860,Testability,Test,TestBits,4860,"tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; voidSaveMimes(); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQMimeTypes(const char* iconPath, const char* file); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQMimeTypes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQMimeTypes.html
https://root.cern/root/html604/TQMimeTypes.html:974,Usability,Clear,Clear,974," virtual~TQMimeTypes(); voidTObject::AbstractMethod(const char* method) const; voidAddType(const char* type, const char* pat, const char* icon, const char* sicon, const char* action); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) con",MatchSource.WIKI,root/html604/TQMimeTypes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQMimeTypes.html
https://root.cern/root/html604/TQObject.html:5576,Availability,error,error,5576," object; Bool_tfSignalsBlocked! flag used for suppression of signals; static Bool_tfgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance Chart:. TQObject. ←. TApplication; ←. PyROOT::TPyROOTApplication. TApplicationRemote. TApplicationServer. TGApplication. TProofServ; ←. TProofServLite. TXProofServ. TQApplication. TRint.  [more...]. Function documentation; TString CompressName(const char* method_name); Removes ""const"" words and blanks from full (with prototype); method name and resolve any typedefs in the method signature.; If a null or empty string is passed in, an empty string; is returned. Example: CompressName("" Draw(const char *, const char *,; Option_t * , Int_t , Int_t)"");; returns the string ""Draw(char*,char*,char*,int,int)"". Int_t CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Checking of consitency of sender/receiver methods/arguments.; Returns -1 on error, otherwise number or arguments of signal function.; Static method. TQObject(); TQObject Constructor.; Comment:; - In order to minimize memory allocation fListOfSignals and; fListOfConnections are allocated only if it is neccesary; - When fListOfSignals/fListOfConnections are empty they will; be deleted. ~TQObject(); TQObject Destructor.; - delete all connections and signal list. TList * GetListOfClassSignals() const; Returns pointer to list of signals of this class. void CollectClassSignalLists(TList& list, TClass* cls); Collect class signal lists from class cls and all its; base-classes. The recursive traversal is not performed for classes not; deriving from TQClass. void HighPriority(const char* signal_name, const char* slot_name = 0); 1. If slot_name = 0 => makes signal defined by the signal_name; to be the first in the fListOfSignals, this decreases; the time for lookup.; 2. If slot_name != 0 => makes slot defined by the slot_name; to be executed first when signal_name is emitted.; Signal name i",MatchSource.WIKI,root/html604/TQObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQObject.html
https://root.cern/root/html604/TQObject.html:7938,Availability,Error,Error,7938,"l name is not compressed. Bool_t HasConnection(const char* signal_name) const; Return true if there is any object connected to this signal.; Only checks for object signals. Int_t NumberOfSignals() const; Return number of signals for this object.; Only checks for object signals. Int_t NumberOfConnections() const; Return number of connections for this object. void Emit(const char* signal); Acitvate signal without args.; Example:; theButton->Emit(""Clicked()"");. void Emit(const char* signal, Long_t param); Activate signal with single parameter.; Example:; theButton->Emit(""Clicked(int)"",id). void Emit(const char* signal, Long64_t param); Activate signal with single parameter.; Example:; theButton->Emit(""Progress(Long64_t)"",processed). void Emit(const char* signal, Double_t param); Activate signal with single parameter.; Example:; theButton->Emit(""Scale(float)"",factor). void Emit(const char* signal, const char* params); Activate signal with parameter text string.; Example:; myObject->Emit(""Error(char*)"",""Fatal error"");. void Emit(const char* signal, Long_t* paramArr); Emit a signal with a varying number of arguments,; paramArr is an array of the parameters.; Note: any parameter should be converted to long type.; Example:; TQObject *processor; // data processor; TH1F *hist; // filled with processor results. processor->Connect(""Evaluated(Float_t,Float_t)"",; ""TH1F"",hist,""Fill12(Axis_t,Axis_t)"");. Long_t args[2];; args[0] = (Long_t)processor->GetValue(1);; args[1] = (Long_t)processor->GetValue(2);. processor->Emit(""Evaluated(Float_t,Float_t)"",args);. Bool_t ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); Create connection between sender and receiver.; Receiver class needs to have a dictionary. Bool_t ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); This method allows to make connection from any object; of the same class to the receiver object.",MatchSource.WIKI,root/html604/TQObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQObject.html
https://root.cern/root/html604/TQObject.html:7959,Availability,error,error,7959,"l name is not compressed. Bool_t HasConnection(const char* signal_name) const; Return true if there is any object connected to this signal.; Only checks for object signals. Int_t NumberOfSignals() const; Return number of signals for this object.; Only checks for object signals. Int_t NumberOfConnections() const; Return number of connections for this object. void Emit(const char* signal); Acitvate signal without args.; Example:; theButton->Emit(""Clicked()"");. void Emit(const char* signal, Long_t param); Activate signal with single parameter.; Example:; theButton->Emit(""Clicked(int)"",id). void Emit(const char* signal, Long64_t param); Activate signal with single parameter.; Example:; theButton->Emit(""Progress(Long64_t)"",processed). void Emit(const char* signal, Double_t param); Activate signal with single parameter.; Example:; theButton->Emit(""Scale(float)"",factor). void Emit(const char* signal, const char* params); Activate signal with parameter text string.; Example:; myObject->Emit(""Error(char*)"",""Fatal error"");. void Emit(const char* signal, Long_t* paramArr); Emit a signal with a varying number of arguments,; paramArr is an array of the parameters.; Note: any parameter should be converted to long type.; Example:; TQObject *processor; // data processor; TH1F *hist; // filled with processor results. processor->Connect(""Evaluated(Float_t,Float_t)"",; ""TH1F"",hist,""Fill12(Axis_t,Axis_t)"");. Long_t args[2];; args[0] = (Long_t)processor->GetValue(1);; args[1] = (Long_t)processor->GetValue(2);. processor->Emit(""Evaluated(Float_t,Float_t)"",args);. Bool_t ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); Create connection between sender and receiver.; Receiver class needs to have a dictionary. Bool_t ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); This method allows to make connection from any object; of the same class to the receiver object.",MatchSource.WIKI,root/html604/TQObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQObject.html
https://root.cern/root/html604/TQObject.html:1197,Energy Efficiency,power,powerfull,1197,"unction members; data members; class charts. ROOT; » CORE; » BASE; » TQObject. class TQObject. This is the ROOT implementation of the Qt object communication; mechanism (see also http://www.troll.no/qt/metaobjects.html). Signals and slots are used for communication between objects.; When an object has changed in some way that might be interesting; for the outside world, it emits a signal to tell whoever is; listening. All slots that are connected to this signal will be; activated (called). It is even possible to connect a signal; directly to another signal (this will emit the second signal; immediately whenever the first is emitted.) There is no limitation; on the number of slots that can be connected to a signal.; The slots will be activated in the order they were connected; to the signal. This mechanism allows objects to be easily reused,; because the object that emits a signal does not need to know; to which objects the signals are connected.; Together, signals and slots make up a powerfull component; programming mechanism. This implementation is provided by; Valeriy Onuchin (onuchin@sirius.ihep.su). Function Members (Methods); public:. virtual~TQObject(); static Bool_tAreAllSignalsBlocked(); Bool_tAreSignalsBlocked() const; static Bool_tBlockAllSignals(Bool_t b); Bool_tBlockSignals(Bool_t b); virtual voidChangedBy(const char* method)SIGNAL ; static TClass*Class(); voidCollectClassSignalLists(TList& list, TClass* cls); Bool_tConnect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tConnect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tConnect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidConnected(const char*); virtual voidDestroyed()SIGNAL ; Bool_tDisconnect(const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tDisconnect(TQObject* sender, const char* ",MatchSource.WIKI,root/html604/TQObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQObject.html
https://root.cern/root/html604/TQObject.html:5778,Energy Efficiency,allocate,allocated,5778,"←. TApplication; ←. PyROOT::TPyROOTApplication. TApplicationRemote. TApplicationServer. TGApplication. TProofServ; ←. TProofServLite. TXProofServ. TQApplication. TRint.  [more...]. Function documentation; TString CompressName(const char* method_name); Removes ""const"" words and blanks from full (with prototype); method name and resolve any typedefs in the method signature.; If a null or empty string is passed in, an empty string; is returned. Example: CompressName("" Draw(const char *, const char *,; Option_t * , Int_t , Int_t)"");; returns the string ""Draw(char*,char*,char*,int,int)"". Int_t CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Checking of consitency of sender/receiver methods/arguments.; Returns -1 on error, otherwise number or arguments of signal function.; Static method. TQObject(); TQObject Constructor.; Comment:; - In order to minimize memory allocation fListOfSignals and; fListOfConnections are allocated only if it is neccesary; - When fListOfSignals/fListOfConnections are empty they will; be deleted. ~TQObject(); TQObject Destructor.; - delete all connections and signal list. TList * GetListOfClassSignals() const; Returns pointer to list of signals of this class. void CollectClassSignalLists(TList& list, TClass* cls); Collect class signal lists from class cls and all its; base-classes. The recursive traversal is not performed for classes not; deriving from TQClass. void HighPriority(const char* signal_name, const char* slot_name = 0); 1. If slot_name = 0 => makes signal defined by the signal_name; to be the first in the fListOfSignals, this decreases; the time for lookup.; 2. If slot_name != 0 => makes slot defined by the slot_name; to be executed first when signal_name is emitted.; Signal name is not compressed. void LowPriority(const char* signal_name, const char* slot_name = 0); 1. If slot_name = 0 => makes signal defined by the signal_name; to be the last in the fListOfSignals",MatchSource.WIKI,root/html604/TQObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQObject.html
https://root.cern/root/html604/TQObject.html:14778,Integrability,Message,Message,14778,"(TBuffer& ); Stream an object of class TQObject. Bool_t AreAllSignalsBlocked(); Returns true if all signals are blocked. Bool_t BlockAllSignals(Bool_t b); Block or unblock all signals. Returns the previous block status. void * GetSender(); { return this; }. const char * GetSenderClassName() const; { return """"; }. TQObject(const TQObject& tqo). TQObject& operator=(const TQObject& tqo). TList * GetListOfSignals() const; { return fListOfSignals; }. TList * GetListOfConnections() const; { return fListOfConnections; }. Bool_t AreSignalsBlocked() const; { return fSignalsBlocked; }. Bool_t BlockSignals(Bool_t b); { Bool_t ret = fSignalsBlocked; fSignalsBlocked = b; return ret; }. template <typename... T> void EmitVA(const char* signal, Int_t nargs, va_list va); void EmitVA(const char *signal, Int_t nargs, ...);. void Emit(const char* signal). void Emit(const char* signal, Long_t* paramArr). void Emit(const char* signal, const char* params). void Emit(const char* signal, Double_t param). void Emit(const char* signal, Long_t param). void Emit(const char* signal, Long64_t param). void Emit(const char* signal, Bool_t param); { Emit(signal, (Long_t)param); }. void Emit(const char* signal, Char_t param); { Emit(signal, (Long_t)param); }. void Emit(const char* signal, UChar_t param); { Emit(signal, (Long_t)param); }. void Emit(const char* signal, Short_t param); { Emit(signal, (Long_t)param); }. void Connected(const char* ); { }. void Disconnected(const char* ); { }. void Destroyed(); { Emit(""Destroyed()""); }. void ChangedBy(const char* method); { Emit(""ChangedBy(char*)"", method); }. void Message(const char* msg); { Emit(""Message(char*)"", msg); }. » Author: Valeriy Onuchin & Fons Rademakers 15/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQObject.html
https://root.cern/root/html604/TQObject.html:14812,Integrability,Message,Message,14812,"(TBuffer& ); Stream an object of class TQObject. Bool_t AreAllSignalsBlocked(); Returns true if all signals are blocked. Bool_t BlockAllSignals(Bool_t b); Block or unblock all signals. Returns the previous block status. void * GetSender(); { return this; }. const char * GetSenderClassName() const; { return """"; }. TQObject(const TQObject& tqo). TQObject& operator=(const TQObject& tqo). TList * GetListOfSignals() const; { return fListOfSignals; }. TList * GetListOfConnections() const; { return fListOfConnections; }. Bool_t AreSignalsBlocked() const; { return fSignalsBlocked; }. Bool_t BlockSignals(Bool_t b); { Bool_t ret = fSignalsBlocked; fSignalsBlocked = b; return ret; }. template <typename... T> void EmitVA(const char* signal, Int_t nargs, va_list va); void EmitVA(const char *signal, Int_t nargs, ...);. void Emit(const char* signal). void Emit(const char* signal, Long_t* paramArr). void Emit(const char* signal, const char* params). void Emit(const char* signal, Double_t param). void Emit(const char* signal, Long_t param). void Emit(const char* signal, Long64_t param). void Emit(const char* signal, Bool_t param); { Emit(signal, (Long_t)param); }. void Emit(const char* signal, Char_t param); { Emit(signal, (Long_t)param); }. void Emit(const char* signal, UChar_t param); { Emit(signal, (Long_t)param); }. void Emit(const char* signal, Short_t param); { Emit(signal, (Long_t)param); }. void Connected(const char* ); { }. void Disconnected(const char* ); { }. void Destroyed(); { Emit(""Destroyed()""); }. void ChangedBy(const char* method); { Emit(""ChangedBy(char*)"", method); }. void Message(const char* msg); { Emit(""Message(char*)"", msg); }. » Author: Valeriy Onuchin & Fons Rademakers 15/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQObject.html
https://root.cern/root/html604/TQObject.html:114,Modifiability,inherit,inheritance,114,". TQObject. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TQObject. class TQObject. This is the ROOT implementation of the Qt object communication; mechanism (see also http://www.troll.no/qt/metaobjects.html). Signals and slots are used for communication between objects.; When an object has changed in some way that might be interesting; for the outside world, it emits a signal to tell whoever is; listening. All slots that are connected to this signal will be; activated (called). It is even possible to connect a signal; directly to another signal (this will emit the second signal; immediately whenever the first is emitted.) There is no limitation; on the number of slots that can be connected to a signal.; The slots will be activated in the order they were connected; to the signal. This mechanism allows objects to be easily reused,; because the object that emits a signal does not need to know; to which objects the signals are connected.; Together, signals and slots make up a powerfull component; programming mechanism. This implementation is provided by; Valeriy Onuchin (onuchin@sirius.ihep.su). Function Members (Methods); public:. virtual~TQObject(); static Bool_tAreAllSignalsBlocked(); Bool_tAreSignalsBlocked() const; static Bool_tBlockAllSignals(Bool_t b); Bool_tBlockSignals(Bool_t b); virtual voidChangedBy(const char* method)SIGNAL ; static TClass*Class(); voidCollectClassSignalLists(TList& list, TClass* cls); Bool_tConnect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tConnect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tConnect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual ",MatchSource.WIKI,root/html604/TQObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQObject.html
https://root.cern/root/html604/TQObject.html:4754,Modifiability,Inherit,Inheritance,4754,"amer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TQObject(). protected:. static Int_tCheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static TStringCompressName(const char* method_name); static Bool_tConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual void*GetSender(); virtual const char*GetSenderClassName() const. private:. TQObject&operator=(const TQObject& tqo); TQObject(const TQObject& tqo). Data Members; protected:. TList*fListOfConnections! list of connections to this object; TList*fListOfSignals! list of signals from this object; Bool_tfSignalsBlocked! flag used for suppression of signals; static Bool_tfgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance Chart:. TQObject. ←. TApplication; ←. PyROOT::TPyROOTApplication. TApplicationRemote. TApplicationServer. TGApplication. TProofServ; ←. TProofServLite. TXProofServ. TQApplication. TRint.  [more...]. Function documentation; TString CompressName(const char* method_name); Removes ""const"" words and blanks from full (with prototype); method name and resolve any typedefs in the method signature.; If a null or empty string is passed in, an empty string; is returned. Example: CompressName("" Draw(const char *, const char *,; Option_t * , Int_t , Int_t)"");; returns the string ""Draw(char*,char*,char*,int,int)"". Int_t CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Checking of consitency of sender/receiver methods/arguments.; Returns -1 on error, otherwise number or arguments of signal function.; Static method. TQObject(); TQObject Constructor.; Comment:; - In order to minimize memory allocation fListOfSignals and; fListOfC",MatchSource.WIKI,root/html604/TQObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQObject.html
https://root.cern/root/html604/TQObject.html:6209,Performance,perform,performed,6209,"is returned. Example: CompressName("" Draw(const char *, const char *,; Option_t * , Int_t , Int_t)"");; returns the string ""Draw(char*,char*,char*,int,int)"". Int_t CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Checking of consitency of sender/receiver methods/arguments.; Returns -1 on error, otherwise number or arguments of signal function.; Static method. TQObject(); TQObject Constructor.; Comment:; - In order to minimize memory allocation fListOfSignals and; fListOfConnections are allocated only if it is neccesary; - When fListOfSignals/fListOfConnections are empty they will; be deleted. ~TQObject(); TQObject Destructor.; - delete all connections and signal list. TList * GetListOfClassSignals() const; Returns pointer to list of signals of this class. void CollectClassSignalLists(TList& list, TClass* cls); Collect class signal lists from class cls and all its; base-classes. The recursive traversal is not performed for classes not; deriving from TQClass. void HighPriority(const char* signal_name, const char* slot_name = 0); 1. If slot_name = 0 => makes signal defined by the signal_name; to be the first in the fListOfSignals, this decreases; the time for lookup.; 2. If slot_name != 0 => makes slot defined by the slot_name; to be executed first when signal_name is emitted.; Signal name is not compressed. void LowPriority(const char* signal_name, const char* slot_name = 0); 1. If slot_name = 0 => makes signal defined by the signal_name; to be the last in the fListOfSignals, this increase the time; for lookup.; 2. If slot_name != 0 => makes slot defined by the slot_name; to be executed last when signal_name is emitted.; Signal name is not compressed. Bool_t HasConnection(const char* signal_name) const; Return true if there is any object connected to this signal.; Only checks for object signals. Int_t NumberOfSignals() const; Return number of signals for this object.; Only checks for object signals. ",MatchSource.WIKI,root/html604/TQObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQObject.html
https://root.cern/root/html604/TQObjSender.html:1223,Energy Efficiency,power,powerfull,1223,"embers; class charts. ROOT; » CORE; » BASE; » TQObjSender. class TQObjSender: public TQObject. This is the ROOT implementation of the Qt object communication; mechanism (see also http://www.troll.no/qt/metaobjects.html). Signals and slots are used for communication between objects.; When an object has changed in some way that might be interesting; for the outside world, it emits a signal to tell whoever is; listening. All slots that are connected to this signal will be; activated (called). It is even possible to connect a signal; directly to another signal (this will emit the second signal; immediately whenever the first is emitted.) There is no limitation; on the number of slots that can be connected to a signal.; The slots will be activated in the order they were connected; to the signal. This mechanism allows objects to be easily reused,; because the object that emits a signal does not need to know; to which objects the signals are connected.; Together, signals and slots make up a powerfull component; programming mechanism. This implementation is provided by; Valeriy Onuchin (onuchin@sirius.ihep.su). Function Members (Methods); public:. virtual~TQObjSender(); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTQObject::Destroyed()SIGNAL ; Bool_tTQObject::Disconnec",MatchSource.WIKI,root/html604/TQObjSender.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQObjSender.html
https://root.cern/root/html604/TQObjSender.html:4008,Integrability,Message,Message,4008,"0, const char* slot = 0); static Bool_tTQObject::Disconnect(const char* class_name, const char* signal, void* receiver = 0, const char* slot = 0); virtual voidTQObject::Disconnected(const char*); voidTQObject::Emit(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual TClass*IsA() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; virtual voidSetSender(void* sender); voidSetSenderClassName(const char* sclass = """"); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TQObjSender().",MatchSource.WIKI,root/html604/TQObjSender.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQObjSender.html
https://root.cern/root/html604/TQObjSender.html:117,Modifiability,inherit,inheritance,117,". TQObjSender. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TQObjSender. class TQObjSender: public TQObject. This is the ROOT implementation of the Qt object communication; mechanism (see also http://www.troll.no/qt/metaobjects.html). Signals and slots are used for communication between objects.; When an object has changed in some way that might be interesting; for the outside world, it emits a signal to tell whoever is; listening. All slots that are connected to this signal will be; activated (called). It is even possible to connect a signal; directly to another signal (this will emit the second signal; immediately whenever the first is emitted.) There is no limitation; on the number of slots that can be connected to a signal.; The slots will be activated in the order they were connected; to the signal. This mechanism allows objects to be easily reused,; because the object that emits a signal does not need to know; to which objects the signals are connected.; Together, signals and slots make up a powerfull component; programming mechanism. This implementation is provided by; Valeriy Onuchin (onuchin@sirius.ihep.su). Function Members (Methods); public:. virtual~TQObjSender(); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connec",MatchSource.WIKI,root/html604/TQObjSender.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQObjSender.html
https://root.cern/root/html604/TQObjSender.html:5459,Modifiability,Inherit,Inheritance,5459,"al voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TQObjSender(). protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual void*GetSender(); virtual const char*GetSenderClassName() const. private:. TQObjSender&operator=(const TQObjSender&); TQObjSender(const TQObjSender&). Data Members; protected:. TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; void*fSenderdelegation object; TStringfSenderClassclass name of delegation object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance Chart:. TQObject. ←; TQObjSender. Function documentation; void * GetSender(); { return this; }. const char * GetSenderClassName() const; { return """"; }. TQObject& operator=(const TQObjSender& ). TQObjSender(const TQObjSender& ). TQObjSender(); { }. virtual ~TQObjSender(); { Disconnect(); }. void SetSender(void* sender); { fSender = sender; }. void SetSenderClassName(const char* sclass = """"); { fSenderClass = sclass; }. » Author: Valeriy Onuchin & Fons Rademakers 15/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQObjSender.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQObjSender.html
https://root.cern/root/html604/TQpDataBase.html:939,Availability,avail,available,939,". TQpDataBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » QUADP; » TQpDataBase. class TQpDataBase: public TObject. TQpDataBase. Data for the general QP formulation. The Data class stores the data defining the problem and provides; methods for performing the operations with this data required by; the interior-point algorithms. These operations include assembling; the linear systems (5) or (7), performing matrix-vector operations; with the data, calculating norms of the data, reading input into the; data structure from various sources, generating random problem; instances, and printing the data. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TQpDataBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidAmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidATransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Double_tDataNorm(); virtual voidDataRandom(TVectorD& x, TVectorD& y, TVectorD& z, TVectorD& s); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtua",MatchSource.WIKI,root/html604/TQpDataBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataBase.html
https://root.cern/root/html604/TQpDataBase.html:2221,Availability,Error,Error,2221,", TVectorD& y, Double_t alpha, const TVectorD& x); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Double_tDataNorm(); virtual voidDataRandom(TVectorD& x, TVectorD& y, TVectorD& z, TVectorD& s); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TVectorD&GetBa(); virtual voidGetDiagonalOfQ(TVectorD& dQ); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TVectorD&GetG(); virtual const char*TObject::GetIconName() const; virtual TVectorD&GetiSlowerBound(); virtual TVectorD&GetiSupperBound(); virtual TVectorD&GetiXlowerBound(); virtual TVectorD&GetiXupperBound(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectS",MatchSource.WIKI,root/html604/TQpDataBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataBase.html
https://root.cern/root/html604/TQpDataBase.html:2350,Availability,error,error,2350," char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Double_tDataNorm(); virtual voidDataRandom(TVectorD& x, TVectorD& y, TVectorD& z, TVectorD& s); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TVectorD&GetBa(); virtual voidGetDiagonalOfQ(TVectorD& dQ); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TVectorD&GetG(); virtual const char*TObject::GetIconName() const; virtual TVectorD&GetiSlowerBound(); virtual TVectorD&GetiSupperBound(); virtual TVectorD&GetiXlowerBound(); virtual TVectorD&GetiXupperBound(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TVectorD&GetSlowerBound(); virtual TVectorD&GetSupperBound(); virtual",MatchSource.WIKI,root/html604/TQpDataBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataBase.html
https://root.cern/root/html604/TQpDataBase.html:2434,Availability,error,error,2434,"l TObject*TObject::Clone(const char* newname = """") const; virtual voidCmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Double_tDataNorm(); virtual voidDataRandom(TVectorD& x, TVectorD& y, TVectorD& z, TVectorD& s); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TVectorD&GetBa(); virtual voidGetDiagonalOfQ(TVectorD& dQ); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TVectorD&GetG(); virtual const char*TObject::GetIconName() const; virtual TVectorD&GetiSlowerBound(); virtual TVectorD&GetiSupperBound(); virtual TVectorD&GetiXlowerBound(); virtual TVectorD&GetiXupperBound(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TVectorD&GetSlowerBound(); virtual TVectorD&GetSupperBound(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; v",MatchSource.WIKI,root/html604/TQpDataBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataBase.html
https://root.cern/root/html604/TQpDataBase.html:117,Modifiability,inherit,inheritance,117,". TQpDataBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » QUADP; » TQpDataBase. class TQpDataBase: public TObject. TQpDataBase. Data for the general QP formulation. The Data class stores the data defining the problem and provides; methods for performing the operations with this data required by; the interior-point algorithms. These operations include assembling; the linear systems (5) or (7), performing matrix-vector operations; with the data, calculating norms of the data, reading input into the; data structure from various sources, generating random problem; instances, and printing the data. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TQpDataBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidAmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidATransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Double_tDataNorm(); virtual voidDataRandom(TVectorD& x, TVectorD& y, TVectorD& z, TVectorD& s); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtua",MatchSource.WIKI,root/html604/TQpDataBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataBase.html
https://root.cern/root/html604/TQpDataBase.html:3691,Modifiability,Inherit,InheritsFrom,3691,"t* obj) const; virtual TVectorD&GetBa(); virtual voidGetDiagonalOfQ(TVectorD& dQ); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TVectorD&GetG(); virtual const char*TObject::GetIconName() const; virtual TVectorD&GetiSlowerBound(); virtual TVectorD&GetiSupperBound(); virtual TVectorD&GetiXlowerBound(); virtual TVectorD&GetiXupperBound(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TVectorD&GetSlowerBound(); virtual TVectorD&GetSupperBound(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TVectorD&GetXlowerBound(); virtual TVectorD&GetXupperBound(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); virtual Double_tObjectiveValue(TQpVar* vars); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](si",MatchSource.WIKI,root/html604/TQpDataBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataBase.html
https://root.cern/root/html604/TQpDataBase.html:3757,Modifiability,Inherit,InheritsFrom,3757,"Q(TVectorD& dQ); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TVectorD&GetG(); virtual const char*TObject::GetIconName() const; virtual TVectorD&GetiSlowerBound(); virtual TVectorD&GetiSupperBound(); virtual TVectorD&GetiXlowerBound(); virtual TVectorD&GetiXupperBound(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TVectorD&GetSlowerBound(); virtual TVectorD&GetSupperBound(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TVectorD&GetXlowerBound(); virtual TVectorD&GetXupperBound(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); virtual Double_tObjectiveValue(TQpVar* vars); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpDa",MatchSource.WIKI,root/html604/TQpDataBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataBase.html
https://root.cern/root/html604/TQpDataBase.html:7155,Modifiability,variab,variables,7155,"irtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); static voidRandomlyChooseBoundedVariables(TVectorD& x, TVectorD& dualx, TVectorD& blx, TVectorD& ixlow, TVectorD& bux, TVectorD& ixupp, Double_t& ix, Double_t percentLowerOnly, Double_t percentUpperOnly, Double_t percentBound). Data Members; public:. TVectorDfBavector of equality constraint; TVectorDfCloBound; TVectorDfCloIndex; TVectorDfCupBoundInequality constraints; TVectorDfCupIndex; TVectorDfGlinear part of Objective function; Int_tfMy; Int_tfMz; Int_tfNx; TVectorDfXloBound; TVectorDfXloIndex; TVectorDfXupBoundBounds on variables; TVectorDfXupIndex; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance Chart:. TObject. ←; TQpDataBase. ←. TQpDataDens. TQpDataSparse. Function documentation; TQpDataBase(); Default constructor. TQpDataBase(Int_t nx, Int_t my, Int_t mz); Constructor. TQpDataBase(const TQpDataBase& another); Copy constructor. void RandomlyChooseBoundedVariables(TVectorD& x, TVectorD& dualx, TVectorD& blx, TVectorD& ixlow, TVectorD& bux, TVectorD& ixupp, Double_t& ix, Double_t percentLowerOnly, Double_t percentUpperOnly, Double_t percent",MatchSource.WIKI,root/html604/TQpDataBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataBase.html
https://root.cern/root/html604/TQpDataBase.html:7930,Modifiability,Inherit,Inheritance,7930,"ctorDfCloIndex; TVectorDfCupBoundInequality constraints; TVectorDfCupIndex; TVectorDfGlinear part of Objective function; Int_tfMy; Int_tfMz; Int_tfNx; TVectorDfXloBound; TVectorDfXloIndex; TVectorDfXupBoundBounds on variables; TVectorDfXupIndex; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance Chart:. TObject. ←; TQpDataBase. ←. TQpDataDens. TQpDataSparse. Function documentation; TQpDataBase(); Default constructor. TQpDataBase(Int_t nx, Int_t my, Int_t mz); Constructor. TQpDataBase(const TQpDataBase& another); Copy constructor. void RandomlyChooseBoundedVariables(TVectorD& x, TVectorD& dualx, TVectorD& blx, TVectorD& ixlow, TVectorD& bux, TVectorD& ixupp, Double_t& ix, Double_t percentLowerOnly, Double_t percentUpperOnly, Double_t percentBound); Randomly choose x and its boundaries. TQpDataBase & operator=(const TQpDataBase& source); Assignment operator. virtual ~TQpDataBase(); {}. void PutQIntoAt(TMatrixDBase& M, Int_t row, Int_t col). void PutAIntoAt(TMatrixDBase& M, Int_t row, Int_t col). void PutCIntoAt(TMatrixDBase& M, Int_t row, Int_t col). void Qmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x). void Amult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x). void Cmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x). void",MatchSource.WIKI,root/html604/TQpDataBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataBase.html
https://root.cern/root/html604/TQpDataBase.html:447,Performance,perform,performing,447,". TQpDataBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » QUADP; » TQpDataBase. class TQpDataBase: public TObject. TQpDataBase. Data for the general QP formulation. The Data class stores the data defining the problem and provides; methods for performing the operations with this data required by; the interior-point algorithms. These operations include assembling; the linear systems (5) or (7), performing matrix-vector operations; with the data, calculating norms of the data, reading input into the; data structure from various sources, generating random problem; instances, and printing the data. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TQpDataBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidAmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidATransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Double_tDataNorm(); virtual voidDataRandom(TVectorD& x, TVectorD& y, TVectorD& z, TVectorD& s); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtua",MatchSource.WIKI,root/html604/TQpDataBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataBase.html
https://root.cern/root/html604/TQpDataBase.html:600,Performance,perform,performing,600,". TQpDataBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » QUADP; » TQpDataBase. class TQpDataBase: public TObject. TQpDataBase. Data for the general QP formulation. The Data class stores the data defining the problem and provides; methods for performing the operations with this data required by; the interior-point algorithms. These operations include assembling; the linear systems (5) or (7), performing matrix-vector operations; with the data, calculating norms of the data, reading input into the; data structure from various sources, generating random problem; instances, and printing the data. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TQpDataBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidAmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidATransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Double_tDataNorm(); virtual voidDataRandom(TVectorD& x, TVectorD& y, TVectorD& z, TVectorD& s); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtua",MatchSource.WIKI,root/html604/TQpDataBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataBase.html
https://root.cern/root/html604/TQpDataBase.html:3581,Security,Hash,Hash,3581,"nst; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TVectorD&GetBa(); virtual voidGetDiagonalOfQ(TVectorD& dQ); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TVectorD&GetG(); virtual const char*TObject::GetIconName() const; virtual TVectorD&GetiSlowerBound(); virtual TVectorD&GetiSupperBound(); virtual TVectorD&GetiXlowerBound(); virtual TVectorD&GetiXupperBound(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TVectorD&GetSlowerBound(); virtual TVectorD&GetSupperBound(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TVectorD&GetXlowerBound(); virtual TVectorD&GetXupperBound(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); virtual Double_tObjectiveValue(TQpVar* vars); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*",MatchSource.WIKI,root/html604/TQpDataBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataBase.html
https://root.cern/root/html604/TQpDataBase.html:6025,Testability,Test,TestBit,6025,"idTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpDataBase&operator=(const TQpDataBase& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidPutAIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidPutCIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidPutQIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidQmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpDataBase(); TQpDataBase(const TQpDataBase& another); TQpDataBase(Int_t nx, Int_t my, Int_t mz); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpDataBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataBase.html
https://root.cern/root/html604/TQpDataBase.html:6064,Testability,Test,TestBits,6064,"idTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpDataBase&operator=(const TQpDataBase& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidPutAIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidPutCIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidPutQIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidQmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpDataBase(); TQpDataBase(const TQpDataBase& another); TQpDataBase(Int_t nx, Int_t my, Int_t mz); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpDataBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataBase.html
https://root.cern/root/html604/TQpDataBase.html:1408,Usability,Clear,Clear,1408," virtual~TQpDataBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidAmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidATransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Double_tDataNorm(); virtual voidDataRandom(TVectorD& x, TVectorD& y, TVectorD& z, TVectorD& s); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtua",MatchSource.WIKI,root/html604/TQpDataBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataBase.html
https://root.cern/root/html604/TQpDataDens.html:1656,Availability,Error,Error,1656,", TVectorD& y, Double_t alpha, const TVectorD& x); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Double_tDataNorm(); virtual voidDataRandom(TVectorD& x, TVectorD& y, TVectorD& z, TVectorD& s); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TVectorD&TQpDataBase::GetBa(); virtual voidGetDiagonalOfQ(TVectorD& dQ); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TVectorD&TQpDataBase::GetG(); virtual const char*TObject::GetIconName() const; virtual TVectorD&TQpDataBase::GetiSlowerBound(); virtual TVectorD&TQpDataBase::GetiSupperBound(); virtual TVectorD&TQpDataBase::GetiXlowerBound(); virtual TVectorD&TQpDataBase::GetiXupperBound(); virtual const char*TObject::GetName() const; virtual char*TObj",MatchSource.WIKI,root/html604/TQpDataDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataDens.html
https://root.cern/root/html604/TQpDataDens.html:1785,Availability,error,error,1785," char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Double_tDataNorm(); virtual voidDataRandom(TVectorD& x, TVectorD& y, TVectorD& z, TVectorD& s); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TVectorD&TQpDataBase::GetBa(); virtual voidGetDiagonalOfQ(TVectorD& dQ); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TVectorD&TQpDataBase::GetG(); virtual const char*TObject::GetIconName() const; virtual TVectorD&TQpDataBase::GetiSlowerBound(); virtual TVectorD&TQpDataBase::GetiSupperBound(); virtual TVectorD&TQpDataBase::GetiXlowerBound(); virtual TVectorD&TQpDataBase::GetiXupperBound(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const;",MatchSource.WIKI,root/html604/TQpDataDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataDens.html
https://root.cern/root/html604/TQpDataDens.html:1869,Availability,error,error,1869,"l TObject*TObject::Clone(const char* newname = """") const; virtual voidCmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Double_tDataNorm(); virtual voidDataRandom(TVectorD& x, TVectorD& y, TVectorD& z, TVectorD& s); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TVectorD&TQpDataBase::GetBa(); virtual voidGetDiagonalOfQ(TVectorD& dQ); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TVectorD&TQpDataBase::GetG(); virtual const char*TObject::GetIconName() const; virtual TVectorD&TQpDataBase::GetiSlowerBound(); virtual TVectorD&TQpDataBase::GetiSupperBound(); virtual TVectorD&TQpDataBase::GetiXlowerBound(); virtual TVectorD&TQpDataBase::GetiXupperBound(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TVectorD&TQpDataBase::GetSlowerBound(); virtual TVectorD&TQpDataBase::GetSu",MatchSource.WIKI,root/html604/TQpDataDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataDens.html
https://root.cern/root/html604/TQpDataDens.html:117,Modifiability,inherit,inheritance,117,". TQpDataDens. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » QUADP; » TQpDataDens. class TQpDataDens: public TQpDataBase. TQpDataDens. Data for the dense QP formulation. Function Members (Methods); public:. virtual~TQpDataDens(); voidTObject::AbstractMethod(const char* method) const; virtual voidAmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidATransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Double_tDataNorm(); virtual voidDataRandom(TVectorD& x, TVectorD& y, TVectorD& z, TVectorD& s); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const",MatchSource.WIKI,root/html604/TQpDataDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataDens.html
https://root.cern/root/html604/TQpDataDens.html:3256,Modifiability,Inherit,InheritsFrom,3256,"ption() const; static Long_tTObject::GetDtorOnly(); virtual TVectorD&TQpDataBase::GetG(); virtual const char*TObject::GetIconName() const; virtual TVectorD&TQpDataBase::GetiSlowerBound(); virtual TVectorD&TQpDataBase::GetiSupperBound(); virtual TVectorD&TQpDataBase::GetiXlowerBound(); virtual TVectorD&TQpDataBase::GetiXupperBound(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TVectorD&TQpDataBase::GetSlowerBound(); virtual TVectorD&TQpDataBase::GetSupperBound(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TVectorD&TQpDataBase::GetXlowerBound(); virtual TVectorD&TQpDataBase::GetXupperBound(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); virtual Double_tObjectiveValue(TQpVar* vars); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](si",MatchSource.WIKI,root/html604/TQpDataDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataDens.html
https://root.cern/root/html604/TQpDataDens.html:3322,Modifiability,Inherit,InheritsFrom,3322,"rD&TQpDataBase::GetG(); virtual const char*TObject::GetIconName() const; virtual TVectorD&TQpDataBase::GetiSlowerBound(); virtual TVectorD&TQpDataBase::GetiSupperBound(); virtual TVectorD&TQpDataBase::GetiXlowerBound(); virtual TVectorD&TQpDataBase::GetiXupperBound(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TVectorD&TQpDataBase::GetSlowerBound(); virtual TVectorD&TQpDataBase::GetSupperBound(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TVectorD&TQpDataBase::GetXlowerBound(); virtual TVectorD&TQpDataBase::GetXupperBound(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); virtual Double_tObjectiveValue(TQpVar* vars); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpDa",MatchSource.WIKI,root/html604/TQpDataDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataDens.html
https://root.cern/root/html604/TQpDataDens.html:7091,Modifiability,variab,variables,7091,"cted:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); static voidTQpDataBase::RandomlyChooseBoundedVariables(TVectorD& x, TVectorD& dualx, TVectorD& blx, TVectorD& ixlow, TVectorD& bux, TVectorD& ixupp, Double_t& ix, Double_t percentLowerOnly, Double_t percentUpperOnly, Double_t percentBound). Data Members; public:. TVectorDTQpDataBase::fBavector of equality constraint; TVectorDTQpDataBase::fCloBound; TVectorDTQpDataBase::fCloIndex; TVectorDTQpDataBase::fCupBoundInequality constraints; TVectorDTQpDataBase::fCupIndex; TVectorDTQpDataBase::fGlinear part of Objective function; Int_tTQpDataBase::fMy; Int_tTQpDataBase::fMz; Int_tTQpDataBase::fNx; TVectorDTQpDataBase::fXloBound; TVectorDTQpDataBase::fXloIndex; TVectorDTQpDataBase::fXupBoundBounds on variables; TVectorDTQpDataBase::fXupIndex; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMatrixDfAEquality constraints; TMatrixDfCInequality constraints; TMatrixDSymfQQuadratic part of Objective function. Class Charts. Inheritance Chart:. TObject. ←; TQpDataBase. ←; TQpDataDens. Function documentation; TQpDataDens(Int_t nx, Int_t my, Int_t mz); Constructor. TQpDataDens(TVectorD& c, TMatrixDSym& Q, TVectorD& xlow, TVectorD& ixlow, TVectorD& xupp, TVectorD& ixupp, TMa",MatchSource.WIKI,root/html604/TQpDataDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataDens.html
https://root.cern/root/html604/TQpDataDens.html:8008,Modifiability,Inherit,Inheritance,8008,"; TVectorDTQpDataBase::fXloIndex; TVectorDTQpDataBase::fXupBoundBounds on variables; TVectorDTQpDataBase::fXupIndex; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMatrixDfAEquality constraints; TMatrixDfCInequality constraints; TMatrixDSymfQQuadratic part of Objective function. Class Charts. Inheritance Chart:. TObject. ←; TQpDataBase. ←; TQpDataDens. Function documentation; TQpDataDens(Int_t nx, Int_t my, Int_t mz); Constructor. TQpDataDens(TVectorD& c, TMatrixDSym& Q, TVectorD& xlow, TVectorD& ixlow, TVectorD& xupp, TVectorD& ixupp, TMatrixD& A, TVectorD& bA, TMatrixD& C, TVectorD& clow, TVectorD& iclow, TVectorD& cupp, TVectorD& icupp); Constructor. TQpDataDens(const TQpDataDens& another); Copy constructor. void Qmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); calculate y = beta*y + alpha*(fQ*x). void Amult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); calculate y = beta*y + alpha*(fA*x). void Cmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); calculate y = beta*y + alpha*(fC*x). void ATransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); calculate y = beta*y + alpha*(fA^T*x). void CTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); calculate y = beta*y + alpha*(fC^T*x). Double_t",MatchSource.WIKI,root/html604/TQpDataDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataDens.html
https://root.cern/root/html604/TQpDataDens.html:3146,Security,Hash,Hash,3146,"irtual TVectorD&TQpDataBase::GetBa(); virtual voidGetDiagonalOfQ(TVectorD& dQ); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TVectorD&TQpDataBase::GetG(); virtual const char*TObject::GetIconName() const; virtual TVectorD&TQpDataBase::GetiSlowerBound(); virtual TVectorD&TQpDataBase::GetiSupperBound(); virtual TVectorD&TQpDataBase::GetiXlowerBound(); virtual TVectorD&TQpDataBase::GetiXupperBound(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TVectorD&TQpDataBase::GetSlowerBound(); virtual TVectorD&TQpDataBase::GetSupperBound(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TVectorD&TQpDataBase::GetXlowerBound(); virtual TVectorD&TQpDataBase::GetXupperBound(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); virtual Double_tObjectiveValue(TQpVar* vars); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*",MatchSource.WIKI,root/html604/TQpDataDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataDens.html
https://root.cern/root/html604/TQpDataDens.html:5578,Testability,Test,TestBit,5578,"or new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpDataDens&operator=(const TQpDataDens& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* opt = """") const; virtual voidPutAIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidPutCIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidPutQIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidQmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpDataDens(); TQpDataDens(const TQpDataDens& another); TQpDataDens(Int_t nx, Int_t my, Int_t mz); TQpDataDens(TVectorD& c, TMatrixDSym& Q, TVectorD& xlow, TVectorD& ixlow, TVectorD& xupp, TVectorD& ixupp, TMatrixD& A, TVectorD& bA, TMatrixD& C, TVectorD& clow, TVectorD& iclow, TVectorD& cupp, TVectorD& icupp); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpDataDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataDens.html
https://root.cern/root/html604/TQpDataDens.html:5617,Testability,Test,TestBits,5617,"or new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpDataDens&operator=(const TQpDataDens& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* opt = """") const; virtual voidPutAIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidPutCIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidPutQIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidQmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpDataDens(); TQpDataDens(const TQpDataDens& another); TQpDataDens(Int_t nx, Int_t my, Int_t mz); TQpDataDens(TVectorD& c, TMatrixDSym& Q, TVectorD& xlow, TVectorD& ixlow, TVectorD& xupp, TVectorD& ixupp, TMatrixD& A, TVectorD& bA, TMatrixD& C, TVectorD& clow, TVectorD& iclow, TVectorD& cupp, TVectorD& icupp); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpDataDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataDens.html
https://root.cern/root/html604/TQpDataDens.html:843,Usability,Clear,Clear,843," virtual~TQpDataDens(); voidTObject::AbstractMethod(const char* method) const; virtual voidAmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidATransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Double_tDataNorm(); virtual voidDataRandom(TVectorD& x, TVectorD& y, TVectorD& z, TVectorD& s); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const",MatchSource.WIKI,root/html604/TQpDataDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataDens.html
https://root.cern/root/html604/TQpDataSparse.html:1667,Availability,Error,Error,1667,", TVectorD& y, Double_t alpha, const TVectorD& x); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Double_tDataNorm(); virtual voidDataRandom(TVectorD& x, TVectorD& y, TVectorD& z, TVectorD& s); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TVectorD&TQpDataBase::GetBa(); virtual voidGetDiagonalOfQ(TVectorD& dQ); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TVectorD&TQpDataBase::GetG(); virtual const char*TObject::GetIconName() const; virtual TVectorD&TQpDataBase::GetiSlowerBound(); virtual TVectorD&TQpDataBase::GetiSupperBound(); virtual TVectorD&TQpDataBase::GetiXlowerBound(); virtual TVectorD&TQpDataBase::GetiXupperBound(); virtual const char*TObject::GetName() const; virtual char*TObj",MatchSource.WIKI,root/html604/TQpDataSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataSparse.html
https://root.cern/root/html604/TQpDataSparse.html:1796,Availability,error,error,1796," char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Double_tDataNorm(); virtual voidDataRandom(TVectorD& x, TVectorD& y, TVectorD& z, TVectorD& s); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TVectorD&TQpDataBase::GetBa(); virtual voidGetDiagonalOfQ(TVectorD& dQ); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TVectorD&TQpDataBase::GetG(); virtual const char*TObject::GetIconName() const; virtual TVectorD&TQpDataBase::GetiSlowerBound(); virtual TVectorD&TQpDataBase::GetiSupperBound(); virtual TVectorD&TQpDataBase::GetiXlowerBound(); virtual TVectorD&TQpDataBase::GetiXupperBound(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const;",MatchSource.WIKI,root/html604/TQpDataSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataSparse.html
https://root.cern/root/html604/TQpDataSparse.html:1880,Availability,error,error,1880,"l TObject*TObject::Clone(const char* newname = """") const; virtual voidCmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Double_tDataNorm(); virtual voidDataRandom(TVectorD& x, TVectorD& y, TVectorD& z, TVectorD& s); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TVectorD&TQpDataBase::GetBa(); virtual voidGetDiagonalOfQ(TVectorD& dQ); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TVectorD&TQpDataBase::GetG(); virtual const char*TObject::GetIconName() const; virtual TVectorD&TQpDataBase::GetiSlowerBound(); virtual TVectorD&TQpDataBase::GetiSupperBound(); virtual TVectorD&TQpDataBase::GetiXlowerBound(); virtual TVectorD&TQpDataBase::GetiXupperBound(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TVectorD&TQpDataBase::GetSlowerBound(); virtual TVectorD&TQpDataBase::GetSu",MatchSource.WIKI,root/html604/TQpDataSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataSparse.html
https://root.cern/root/html604/TQpDataSparse.html:8622,Energy Efficiency,Allocate,Allocate,8622,"::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMatrixDSparsefAEquality constraints; TMatrixDSparsefCInequality constraints; TMatrixDSparsefQquadratic part of Objective function. Class Charts. Inheritance Chart:. TObject. ←; TQpDataBase. ←; TQpDataSparse. Function documentation; TQpDataSparse(Int_t nx, Int_t my, Int_t mz); Constructor. TQpDataSparse(TVectorD& c, TMatrixDSparse& Q, TVectorD& xlow, TVectorD& ixlow, TVectorD& xupp, TVectorD& ixupp, TMatrixDSparse& A, TVectorD& bA, TMatrixDSparse& C, TVectorD& clow, TVectorD& iclow, TVectorD& cupp, TVectorD& icupp); Constructor. TQpDataSparse(const TQpDataSparse& another); Copy constructor. void SetNonZeros(Int_t nnzQ, Int_t nnzA, Int_t nnzC); Allocate space for the appropriate number of non-zeros in the matrices. void Qmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); calculate y = beta*y + alpha*(fQ*x). void Amult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); calculate y = beta*y + alpha*(fA*x). void Cmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); calculate y = beta*y + alpha*(fC*x). void ATransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); calculate y = beta*y + alpha*(fA^T*x). void CTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); calculate y = beta*y + alpha*(fC^T*x). Double_t DataNorm(); Return the largest component of several vectors in the data class. void Print(Option_t* opt = """") const; Print class members. void PutQIntoAt(TMatrixDBase& M, Int_t row, Int_t col); Insert the Hessian Q into the matrix M at index (row,col) for the fundamental; linear system. void PutAIntoAt(TMatrixDBase& M, Int_t row, Int_t col); Insert th",MatchSource.WIKI,root/html604/TQpDataSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataSparse.html
https://root.cern/root/html604/TQpDataSparse.html:119,Modifiability,inherit,inheritance,119,". TQpDataSparse. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » QUADP; » TQpDataSparse. class TQpDataSparse: public TQpDataBase. TQpDataSparse. Data for the sparse QP formulation. Function Members (Methods); public:. virtual~TQpDataSparse(); voidTObject::AbstractMethod(const char* method) const; virtual voidAmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidATransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Double_tDataNorm(); virtual voidDataRandom(TVectorD& x, TVectorD& y, TVectorD& z, TVectorD& s); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* me",MatchSource.WIKI,root/html604/TQpDataSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataSparse.html
https://root.cern/root/html604/TQpDataSparse.html:3267,Modifiability,Inherit,InheritsFrom,3267,"ption() const; static Long_tTObject::GetDtorOnly(); virtual TVectorD&TQpDataBase::GetG(); virtual const char*TObject::GetIconName() const; virtual TVectorD&TQpDataBase::GetiSlowerBound(); virtual TVectorD&TQpDataBase::GetiSupperBound(); virtual TVectorD&TQpDataBase::GetiXlowerBound(); virtual TVectorD&TQpDataBase::GetiXupperBound(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TVectorD&TQpDataBase::GetSlowerBound(); virtual TVectorD&TQpDataBase::GetSupperBound(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TVectorD&TQpDataBase::GetXlowerBound(); virtual TVectorD&TQpDataBase::GetXupperBound(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); virtual Double_tObjectiveValue(TQpVar* vars); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](si",MatchSource.WIKI,root/html604/TQpDataSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataSparse.html
https://root.cern/root/html604/TQpDataSparse.html:3333,Modifiability,Inherit,InheritsFrom,3333,"rD&TQpDataBase::GetG(); virtual const char*TObject::GetIconName() const; virtual TVectorD&TQpDataBase::GetiSlowerBound(); virtual TVectorD&TQpDataBase::GetiSupperBound(); virtual TVectorD&TQpDataBase::GetiXlowerBound(); virtual TVectorD&TQpDataBase::GetiXupperBound(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TVectorD&TQpDataBase::GetSlowerBound(); virtual TVectorD&TQpDataBase::GetSupperBound(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TVectorD&TQpDataBase::GetXlowerBound(); virtual TVectorD&TQpDataBase::GetXupperBound(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); virtual Double_tObjectiveValue(TQpVar* vars); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpDa",MatchSource.WIKI,root/html604/TQpDataSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataSparse.html
https://root.cern/root/html604/TQpDataSparse.html:7184,Modifiability,variab,variables,7184,"cted:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); static voidTQpDataBase::RandomlyChooseBoundedVariables(TVectorD& x, TVectorD& dualx, TVectorD& blx, TVectorD& ixlow, TVectorD& bux, TVectorD& ixupp, Double_t& ix, Double_t percentLowerOnly, Double_t percentUpperOnly, Double_t percentBound). Data Members; public:. TVectorDTQpDataBase::fBavector of equality constraint; TVectorDTQpDataBase::fCloBound; TVectorDTQpDataBase::fCloIndex; TVectorDTQpDataBase::fCupBoundInequality constraints; TVectorDTQpDataBase::fCupIndex; TVectorDTQpDataBase::fGlinear part of Objective function; Int_tTQpDataBase::fMy; Int_tTQpDataBase::fMz; Int_tTQpDataBase::fNx; TVectorDTQpDataBase::fXloBound; TVectorDTQpDataBase::fXloIndex; TVectorDTQpDataBase::fXupBoundBounds on variables; TVectorDTQpDataBase::fXupIndex; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMatrixDSparsefAEquality constraints; TMatrixDSparsefCInequality constraints; TMatrixDSparsefQquadratic part of Objective function. Class Charts. Inheritance Chart:. TObject. ←; TQpDataBase. ←; TQpDataSparse. Function documentation; TQpDataSparse(Int_t nx, Int_t my, Int_t mz); Constructor. TQpDataSparse(TVectorD& c, TMatrixDSparse& Q, TVectorD& xlow, TVectorD& ixlow, TVectorD& xu",MatchSource.WIKI,root/html604/TQpDataSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataSparse.html
https://root.cern/root/html604/TQpDataSparse.html:8116,Modifiability,Inherit,Inheritance,8116,"taBase::fXloIndex; TVectorDTQpDataBase::fXupBoundBounds on variables; TVectorDTQpDataBase::fXupIndex; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMatrixDSparsefAEquality constraints; TMatrixDSparsefCInequality constraints; TMatrixDSparsefQquadratic part of Objective function. Class Charts. Inheritance Chart:. TObject. ←; TQpDataBase. ←; TQpDataSparse. Function documentation; TQpDataSparse(Int_t nx, Int_t my, Int_t mz); Constructor. TQpDataSparse(TVectorD& c, TMatrixDSparse& Q, TVectorD& xlow, TVectorD& ixlow, TVectorD& xupp, TVectorD& ixupp, TMatrixDSparse& A, TVectorD& bA, TMatrixDSparse& C, TVectorD& clow, TVectorD& iclow, TVectorD& cupp, TVectorD& icupp); Constructor. TQpDataSparse(const TQpDataSparse& another); Copy constructor. void SetNonZeros(Int_t nnzQ, Int_t nnzA, Int_t nnzC); Allocate space for the appropriate number of non-zeros in the matrices. void Qmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); calculate y = beta*y + alpha*(fQ*x). void Amult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); calculate y = beta*y + alpha*(fA*x). void Cmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); calculate y = beta*y + alpha*(fC*x). void ATransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); calculate y = b",MatchSource.WIKI,root/html604/TQpDataSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataSparse.html
https://root.cern/root/html604/TQpDataSparse.html:3157,Security,Hash,Hash,3157,"irtual TVectorD&TQpDataBase::GetBa(); virtual voidGetDiagonalOfQ(TVectorD& dQ); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TVectorD&TQpDataBase::GetG(); virtual const char*TObject::GetIconName() const; virtual TVectorD&TQpDataBase::GetiSlowerBound(); virtual TVectorD&TQpDataBase::GetiSupperBound(); virtual TVectorD&TQpDataBase::GetiXlowerBound(); virtual TVectorD&TQpDataBase::GetiXupperBound(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TVectorD&TQpDataBase::GetSlowerBound(); virtual TVectorD&TQpDataBase::GetSupperBound(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual TVectorD&TQpDataBase::GetXlowerBound(); virtual TVectorD&TQpDataBase::GetXupperBound(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); virtual Double_tObjectiveValue(TQpVar* vars); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*",MatchSource.WIKI,root/html604/TQpDataSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataSparse.html
https://root.cern/root/html604/TQpDataSparse.html:5646,Testability,Test,TestBit,5646,"rse&operator=(const TQpDataSparse& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* opt = """") const; virtual voidPutAIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidPutCIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidPutQIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidQmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetNonZeros(Int_t nnzQ, Int_t nnzA, Int_t nnzC); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpDataSparse(); TQpDataSparse(const TQpDataSparse& another); TQpDataSparse(Int_t nx, Int_t my, Int_t mz); TQpDataSparse(TVectorD& c, TMatrixDSparse& Q, TVectorD& xlow, TVectorD& ixlow, TVectorD& xupp, TVectorD& ixupp, TMatrixDSparse& A, TVectorD& bA, TMatrixDSparse& C, TVectorD& clow, TVectorD& iclow, TVectorD& cupp, TVectorD& icupp); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpDataSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataSparse.html
https://root.cern/root/html604/TQpDataSparse.html:5685,Testability,Test,TestBits,5685,"rse&operator=(const TQpDataSparse& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* opt = """") const; virtual voidPutAIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidPutCIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidPutQIntoAt(TMatrixDBase& M, Int_t row, Int_t col); virtual voidQmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetNonZeros(Int_t nnzQ, Int_t nnzA, Int_t nnzC); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpDataSparse(); TQpDataSparse(const TQpDataSparse& another); TQpDataSparse(Int_t nx, Int_t my, Int_t mz); TQpDataSparse(TVectorD& c, TMatrixDSparse& Q, TVectorD& xlow, TVectorD& ixlow, TVectorD& xupp, TVectorD& ixupp, TMatrixDSparse& A, TVectorD& bA, TMatrixDSparse& C, TVectorD& clow, TVectorD& iclow, TVectorD& cupp, TVectorD& icupp); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpDataSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataSparse.html
https://root.cern/root/html604/TQpDataSparse.html:854,Usability,Clear,Clear,854," virtual~TQpDataSparse(); voidTObject::AbstractMethod(const char* method) const; virtual voidAmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidATransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCTransmult(Double_t beta, TVectorD& y, Double_t alpha, const TVectorD& x); virtual Double_tDataNorm(); virtual voidDataRandom(TVectorD& x, TVectorD& y, TVectorD& z, TVectorD& s); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* me",MatchSource.WIKI,root/html604/TQpDataSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpDataSparse.html
https://root.cern/root/html604/TQpLinSolverBase.html:536,Availability,avail,available,536,". TQpLinSolverBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » QUADP; » TQpLinSolverBase. class TQpLinSolverBase: public TObject. TQpLinSolverBase. Implementation of main solver for linear systems. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TQpLinSolverBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject",MatchSource.WIKI,root/html604/TQpLinSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverBase.html
https://root.cern/root/html604/TQpLinSolverBase.html:1558,Availability,Error,Error,1558," virtual~TQpLinSolverBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject",MatchSource.WIKI,root/html604/TQpLinSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverBase.html
https://root.cern/root/html604/TQpLinSolverBase.html:1687,Availability,error,error,1687,"_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual B",MatchSource.WIKI,root/html604/TQpLinSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverBase.html
https://root.cern/root/html604/TQpLinSolverBase.html:1771,Availability,error,error,1771,"irtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::Inhe",MatchSource.WIKI,root/html604/TQpLinSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverBase.html
https://root.cern/root/html604/TQpLinSolverBase.html:8253,Availability,recover,recovers,8253,"pLinSolverDens. TQpLinSolverSparse. Function documentation; TQpLinSolverBase(); Default constructor. TQpLinSolverBase(TQpProbBase* factory, TQpDataBase* data); Constructor. TQpLinSolverBase(const TQpLinSolverBase& another); Copy constructor. void Factor(TQpDataBase* prob, TQpVar* vars); Sets up the matrix for the main linear system in ""augmented system"" form. The; actual factorization is performed by a routine specific to either the sparse; or dense case. void ComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); Computes the diagonal matrices in the augmented system from the current set of variables. void Solve(TQpDataBase* prob, TQpVar* vars, TQpResidual* resids, TQpVar* step); Solves the system for a given set of residuals. Assembles the right-hand side appropriate; to the matrix factored in factor, solves the system using the factorization produced there,; partitions the solution vector into step components, then recovers the step components; eliminated during the block elimination that produced the augmented system form . void SolveXYZS(TVectorD& stepx, TVectorD& stepy, TVectorD& stepz, TVectorD& steps, TVectorD& ztemp, TQpDataBase* data); Assemble right-hand side of augmented system and call SolveCompressed to solve it. void JoinRHS(TVectorD& rhs, TVectorD& rhs1, TVectorD& rhs2, TVectorD& rhs3); Assembles a single vector object from three given vectors .; rhs_out (output) final joined vector; rhs1_in (input) first part of rhs; rhs2_in (input) middle part of rhs; rhs3_in (input) last part of rhs . void SeparateVars(TVectorD& vars1, TVectorD& vars2, TVectorD& vars3, TVectorD& vars); Extracts three component vectors from a given aggregated vector.; vars_in (input) aggregated vector; x_in (output) first part of vars; y_in (output) middle part of vars; z_in (output) last part of vars. TQpLinSolverBase & operator=(const TQpLinSolverBase& source); Assignment",MatchSource.WIKI,root/html604/TQpLinSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverBase.html
https://root.cern/root/html604/TQpLinSolverBase.html:7617,Integrability,rout,routine,7617,"ject::kZombie. protected:. TVectorDfCloIndex; TVectorDfCupIndex; TVectorDfDdtemporary storage vectors; TVectorDfDq; TQpProbBase*fFactory; Int_tfMclo; Int_tfMcup; Int_tfMy; Int_tfMz; TVectorDfNomegaInvstores a critical diagonal matrix as a vector; Int_tfNxdimensions of the vectors in the general QP formulation; Int_tfNxlo; Int_tfNxupdimensions of the upper and lower bound vectors; TVectorDfRhsright-hand side of the system; TVectorDfXloIndex; TVectorDfXupIndexindex matrices for the upper and lower bounds on x and Cx. Class Charts. Inheritance Chart:. TObject. ←; TQpLinSolverBase. ←. TQpLinSolverDens. TQpLinSolverSparse. Function documentation; TQpLinSolverBase(); Default constructor. TQpLinSolverBase(TQpProbBase* factory, TQpDataBase* data); Constructor. TQpLinSolverBase(const TQpLinSolverBase& another); Copy constructor. void Factor(TQpDataBase* prob, TQpVar* vars); Sets up the matrix for the main linear system in ""augmented system"" form. The; actual factorization is performed by a routine specific to either the sparse; or dense case. void ComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); Computes the diagonal matrices in the augmented system from the current set of variables. void Solve(TQpDataBase* prob, TQpVar* vars, TQpResidual* resids, TQpVar* step); Solves the system for a given set of residuals. Assembles the right-hand side appropriate; to the matrix factored in factor, solves the system using the factorization produced there,; partitions the solution vector into step components, then recovers the step components; eliminated during the block elimination that produced the augmented system form . void SolveXYZS(TVectorD& stepx, TVectorD& stepy, TVectorD& stepz, TVectorD& steps, TVectorD& ztemp, TQpDataBase* data); Assemble right-hand side of augmented system and call SolveCompressed to solve it. void JoinRHS(TVectorD& rhs, TVectorD& rhs1, TVectorD&",MatchSource.WIKI,root/html604/TQpLinSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverBase.html
https://root.cern/root/html604/TQpLinSolverBase.html:122,Modifiability,inherit,inheritance,122,". TQpLinSolverBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » QUADP; » TQpLinSolverBase. class TQpLinSolverBase: public TObject. TQpLinSolverBase. Implementation of main solver for linear systems. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TQpLinSolverBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject",MatchSource.WIKI,root/html604/TQpLinSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverBase.html
https://root.cern/root/html604/TQpLinSolverBase.html:2704,Modifiability,Inherit,InheritsFrom,2704,"dTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidJoinRHS(TVectorD& rhs, TVectorD& rhs1, TVectorD& rhs2, TVectorD& rhs3); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void",MatchSource.WIKI,root/html604/TQpLinSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverBase.html
https://root.cern/root/html604/TQpLinSolverBase.html:2770,Modifiability,Inherit,InheritsFrom,2770," = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidJoinRHS(TVectorD& rhs, TVectorD& rhs1, TVectorD& rhs2, TVectorD& rhs3); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::oper",MatchSource.WIKI,root/html604/TQpLinSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverBase.html
https://root.cern/root/html604/TQpLinSolverBase.html:7156,Modifiability,Inherit,Inheritance,7156,"onymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TVectorDfCloIndex; TVectorDfCupIndex; TVectorDfDdtemporary storage vectors; TVectorDfDq; TQpProbBase*fFactory; Int_tfMclo; Int_tfMcup; Int_tfMy; Int_tfMz; TVectorDfNomegaInvstores a critical diagonal matrix as a vector; Int_tfNxdimensions of the vectors in the general QP formulation; Int_tfNxlo; Int_tfNxupdimensions of the upper and lower bound vectors; TVectorDfRhsright-hand side of the system; TVectorDfXloIndex; TVectorDfXupIndexindex matrices for the upper and lower bounds on x and Cx. Class Charts. Inheritance Chart:. TObject. ←; TQpLinSolverBase. ←. TQpLinSolverDens. TQpLinSolverSparse. Function documentation; TQpLinSolverBase(); Default constructor. TQpLinSolverBase(TQpProbBase* factory, TQpDataBase* data); Constructor. TQpLinSolverBase(const TQpLinSolverBase& another); Copy constructor. void Factor(TQpDataBase* prob, TQpVar* vars); Sets up the matrix for the main linear system in ""augmented system"" form. The; actual factorization is performed by a routine specific to either the sparse; or dense case. void ComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); Computes the diagonal matrices in the augmented system from the current set of variables. void Solve(TQpDataBase* prob, TQpVar* vars, TQpResidual* resids, TQpVar* step); Solves the system for a given set of residuals. Assembles the right-hand side appropriate; to the matrix factored in factor, solves the system using the f",MatchSource.WIKI,root/html604/TQpLinSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverBase.html
https://root.cern/root/html604/TQpLinSolverBase.html:7920,Modifiability,variab,variables,7920,"z; TVectorDfNomegaInvstores a critical diagonal matrix as a vector; Int_tfNxdimensions of the vectors in the general QP formulation; Int_tfNxlo; Int_tfNxupdimensions of the upper and lower bound vectors; TVectorDfRhsright-hand side of the system; TVectorDfXloIndex; TVectorDfXupIndexindex matrices for the upper and lower bounds on x and Cx. Class Charts. Inheritance Chart:. TObject. ←; TQpLinSolverBase. ←. TQpLinSolverDens. TQpLinSolverSparse. Function documentation; TQpLinSolverBase(); Default constructor. TQpLinSolverBase(TQpProbBase* factory, TQpDataBase* data); Constructor. TQpLinSolverBase(const TQpLinSolverBase& another); Copy constructor. void Factor(TQpDataBase* prob, TQpVar* vars); Sets up the matrix for the main linear system in ""augmented system"" form. The; actual factorization is performed by a routine specific to either the sparse; or dense case. void ComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); Computes the diagonal matrices in the augmented system from the current set of variables. void Solve(TQpDataBase* prob, TQpVar* vars, TQpResidual* resids, TQpVar* step); Solves the system for a given set of residuals. Assembles the right-hand side appropriate; to the matrix factored in factor, solves the system using the factorization produced there,; partitions the solution vector into step components, then recovers the step components; eliminated during the block elimination that produced the augmented system form . void SolveXYZS(TVectorD& stepx, TVectorD& stepy, TVectorD& stepz, TVectorD& steps, TVectorD& ztemp, TQpDataBase* data); Assemble right-hand side of augmented system and call SolveCompressed to solve it. void JoinRHS(TVectorD& rhs, TVectorD& rhs1, TVectorD& rhs2, TVectorD& rhs3); Assembles a single vector object from three given vectors .; rhs_out (output) final joined vector; rhs1_in (input) first part of rhs; rhs2_in (input) middl",MatchSource.WIKI,root/html604/TQpLinSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverBase.html
https://root.cern/root/html604/TQpLinSolverBase.html:7602,Performance,perform,performed,7602,"ject::kZombie. protected:. TVectorDfCloIndex; TVectorDfCupIndex; TVectorDfDdtemporary storage vectors; TVectorDfDq; TQpProbBase*fFactory; Int_tfMclo; Int_tfMcup; Int_tfMy; Int_tfMz; TVectorDfNomegaInvstores a critical diagonal matrix as a vector; Int_tfNxdimensions of the vectors in the general QP formulation; Int_tfNxlo; Int_tfNxupdimensions of the upper and lower bound vectors; TVectorDfRhsright-hand side of the system; TVectorDfXloIndex; TVectorDfXupIndexindex matrices for the upper and lower bounds on x and Cx. Class Charts. Inheritance Chart:. TObject. ←; TQpLinSolverBase. ←. TQpLinSolverDens. TQpLinSolverSparse. Function documentation; TQpLinSolverBase(); Default constructor. TQpLinSolverBase(TQpProbBase* factory, TQpDataBase* data); Constructor. TQpLinSolverBase(const TQpLinSolverBase& another); Copy constructor. void Factor(TQpDataBase* prob, TQpVar* vars); Sets up the matrix for the main linear system in ""augmented system"" form. The; actual factorization is performed by a routine specific to either the sparse; or dense case. void ComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); Computes the diagonal matrices in the augmented system from the current set of variables. void Solve(TQpDataBase* prob, TQpVar* vars, TQpResidual* resids, TQpVar* step); Solves the system for a given set of residuals. Assembles the right-hand side appropriate; to the matrix factored in factor, solves the system using the factorization produced there,; partitions the solution vector into step components, then recovers the step components; eliminated during the block elimination that produced the augmented system form . void SolveXYZS(TVectorD& stepx, TVectorD& stepy, TVectorD& stepz, TVectorD& steps, TVectorD& ztemp, TQpDataBase* data); Assemble right-hand side of augmented system and call SolveCompressed to solve it. void JoinRHS(TVectorD& rhs, TVectorD& rhs1, TVectorD&",MatchSource.WIKI,root/html604/TQpLinSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverBase.html
https://root.cern/root/html604/TQpLinSolverBase.html:9412,Performance,perform,perform,9412,"esiduals. Assembles the right-hand side appropriate; to the matrix factored in factor, solves the system using the factorization produced there,; partitions the solution vector into step components, then recovers the step components; eliminated during the block elimination that produced the augmented system form . void SolveXYZS(TVectorD& stepx, TVectorD& stepy, TVectorD& stepz, TVectorD& steps, TVectorD& ztemp, TQpDataBase* data); Assemble right-hand side of augmented system and call SolveCompressed to solve it. void JoinRHS(TVectorD& rhs, TVectorD& rhs1, TVectorD& rhs2, TVectorD& rhs3); Assembles a single vector object from three given vectors .; rhs_out (output) final joined vector; rhs1_in (input) first part of rhs; rhs2_in (input) middle part of rhs; rhs3_in (input) last part of rhs . void SeparateVars(TVectorD& vars1, TVectorD& vars2, TVectorD& vars3, TVectorD& vars); Extracts three component vectors from a given aggregated vector.; vars_in (input) aggregated vector; x_in (output) first part of vars; y_in (output) middle part of vars; z_in (output) last part of vars. TQpLinSolverBase & operator=(const TQpLinSolverBase& source); Assignment opeartor. virtual ~TQpLinSolverBase(); {}. void SolveCompressed(TVectorD& rhs); assemble right-hand side of augmented system and call; SolveCompressed to solve it. void PutXDiagonal(TVectorD& xdiag); perform the actual solve using the factors produced in; factor.; rhs on input contains the aggregated right-hand side of; the augmented system; on output contains the solution in; aggregated form. void PutZDiagonal(TVectorD& zdiag); places the diagonal resulting from the bounds on x into; the augmented system matrix. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQpLinSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverBase.html
https://root.cern/root/html604/TQpLinSolverBase.html:8253,Safety,recover,recovers,8253,"pLinSolverDens. TQpLinSolverSparse. Function documentation; TQpLinSolverBase(); Default constructor. TQpLinSolverBase(TQpProbBase* factory, TQpDataBase* data); Constructor. TQpLinSolverBase(const TQpLinSolverBase& another); Copy constructor. void Factor(TQpDataBase* prob, TQpVar* vars); Sets up the matrix for the main linear system in ""augmented system"" form. The; actual factorization is performed by a routine specific to either the sparse; or dense case. void ComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); Computes the diagonal matrices in the augmented system from the current set of variables. void Solve(TQpDataBase* prob, TQpVar* vars, TQpResidual* resids, TQpVar* step); Solves the system for a given set of residuals. Assembles the right-hand side appropriate; to the matrix factored in factor, solves the system using the factorization produced there,; partitions the solution vector into step components, then recovers the step components; eliminated during the block elimination that produced the augmented system form . void SolveXYZS(TVectorD& stepx, TVectorD& stepy, TVectorD& stepz, TVectorD& steps, TVectorD& ztemp, TQpDataBase* data); Assemble right-hand side of augmented system and call SolveCompressed to solve it. void JoinRHS(TVectorD& rhs, TVectorD& rhs1, TVectorD& rhs2, TVectorD& rhs3); Assembles a single vector object from three given vectors .; rhs_out (output) final joined vector; rhs1_in (input) first part of rhs; rhs2_in (input) middle part of rhs; rhs3_in (input) last part of rhs . void SeparateVars(TVectorD& vars1, TVectorD& vars2, TVectorD& vars3, TVectorD& vars); Extracts three component vectors from a given aggregated vector.; vars_in (input) aggregated vector; x_in (output) first part of vars; y_in (output) middle part of vars; z_in (output) last part of vars. TQpLinSolverBase & operator=(const TQpLinSolverBase& source); Assignment",MatchSource.WIKI,root/html604/TQpLinSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverBase.html
https://root.cern/root/html604/TQpLinSolverBase.html:2594,Security,Hash,Hash,2594,"msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidJoinRHS(TVectorD& rhs, TVectorD& rhs1, TVectorD& rhs2, TVectorD& rhs3); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operato",MatchSource.WIKI,root/html604/TQpLinSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverBase.html
https://root.cern/root/html604/TQpLinSolverBase.html:5252,Testability,Test,TestBit,5252,"w[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpLinSolverBase&operator=(const TQpLinSolverBase& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidPutXDiagonal(TVectorD& xdiag); virtual voidPutZDiagonal(TVectorD& zdiag); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSeparateVars(TVectorD& vars1, TVectorD& vars2, TVectorD& vars3, TVectorD& vars); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSolve(TQpDataBase* prob, TQpVar* vars, TQpResidual* resids, TQpVar* step); virtual voidSolveCompressed(TVectorD& rhs); virtual voidSolveXYZS(TVectorD& stepx, TVectorD& stepy, TVectorD& stepz, TVectorD& steps, TVectorD& ztemp, TQpDataBase* data); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpLinSolverBase(); TQpLinSolverBase(const TQpLinSolverBase& another); TQpLinSolverBase(TQpProbBase* factory, TQpDataBase* data); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpLinSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverBase.html
https://root.cern/root/html604/TQpLinSolverBase.html:5291,Testability,Test,TestBits,5291,"w[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpLinSolverBase&operator=(const TQpLinSolverBase& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidPutXDiagonal(TVectorD& xdiag); virtual voidPutZDiagonal(TVectorD& zdiag); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSeparateVars(TVectorD& vars1, TVectorD& vars2, TVectorD& vars3, TVectorD& vars); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSolve(TQpDataBase* prob, TQpVar* vars, TQpResidual* resids, TQpVar* step); virtual voidSolveCompressed(TVectorD& rhs); virtual voidSolveXYZS(TVectorD& stepx, TVectorD& stepy, TVectorD& stepz, TVectorD& steps, TVectorD& ztemp, TQpDataBase* data); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpLinSolverBase(); TQpLinSolverBase(const TQpLinSolverBase& another); TQpLinSolverBase(TQpProbBase* factory, TQpDataBase* data); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpLinSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverBase.html
https://root.cern/root/html604/TQpLinSolverBase.html:841,Usability,Clear,Clear,841," virtual~TQpLinSolverBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject",MatchSource.WIKI,root/html604/TQpLinSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverBase.html
https://root.cern/root/html604/TQpLinSolverDens.html:1513,Availability,Error,Error,1513,"QpLinSolverDens(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTQpLinSolverBase::ComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer*",MatchSource.WIKI,root/html604/TQpLinSolverDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverDens.html
https://root.cern/root/html604/TQpLinSolverDens.html:1642,Availability,error,error,1642,"virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTQpLinSolverBase::ComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual B",MatchSource.WIKI,root/html604/TQpLinSolverDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverDens.html
https://root.cern/root/html604/TQpLinSolverDens.html:1726,Availability,error,error,1726,"TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTQpLinSolverBase::ComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::Inhe",MatchSource.WIKI,root/html604/TQpLinSolverDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverDens.html
https://root.cern/root/html604/TQpLinSolverDens.html:122,Modifiability,inherit,inheritance,122,". TQpLinSolverDens. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » QUADP; » TQpLinSolverDens. class TQpLinSolverDens: public TQpLinSolverBase. TQpLinSolverDens. Implements the aspects of the solvers for dense general QP; formulation that are specific to the dense case. Function Members (Methods); public:. virtual~TQpLinSolverDens(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTQpLinSolverBase::ComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual",MatchSource.WIKI,root/html604/TQpLinSolverDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverDens.html
https://root.cern/root/html604/TQpLinSolverDens.html:2659,Modifiability,Inherit,InheritsFrom,2659,"dTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTQpLinSolverBase::JoinRHS(TVectorD& rhs, TVectorD& rhs1, TVectorD& rhs2, TVectorD& rhs3); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator n",MatchSource.WIKI,root/html604/TQpLinSolverDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverDens.html
https://root.cern/root/html604/TQpLinSolverDens.html:2725,Modifiability,Inherit,InheritsFrom,2725," = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTQpLinSolverBase::JoinRHS(TVectorD& rhs, TVectorD& rhs1, TVectorD& rhs2, TVectorD& rhs3); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); ",MatchSource.WIKI,root/html604/TQpLinSolverDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverDens.html
https://root.cern/root/html604/TQpLinSolverDens.html:7507,Modifiability,Inherit,Inheritance,7507,"te; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TVectorDTQpLinSolverBase::fCloIndex; TVectorDTQpLinSolverBase::fCupIndex; TVectorDTQpLinSolverBase::fDdtemporary storage vectors; TVectorDTQpLinSolverBase::fDq; TQpProbBase*TQpLinSolverBase::fFactory; TMatrixDSymfKkt; Int_tTQpLinSolverBase::fMclo; Int_tTQpLinSolverBase::fMcup; Int_tTQpLinSolverBase::fMy; Int_tTQpLinSolverBase::fMz; TVectorDTQpLinSolverBase::fNomegaInvstores a critical diagonal matrix as a vector; Int_tTQpLinSolverBase::fNxdimensions of the vectors in the general QP formulation; Int_tTQpLinSolverBase::fNxlo; Int_tTQpLinSolverBase::fNxupdimensions of the upper and lower bound vectors; TVectorDTQpLinSolverBase::fRhsright-hand side of the system; TDecompLUfSolveLU; TVectorDTQpLinSolverBase::fXloIndex; TVectorDTQpLinSolverBase::fXupIndexindex matrices for the upper and lower bounds on x and Cx. Class Charts. Inheritance Chart:. TObject. ←; TQpLinSolverBase. ←; TQpLinSolverDens. Function documentation; TQpLinSolverDens(TQpProbDens* factory, TQpDataDens* data); Constructor. TQpLinSolverDens(const TQpLinSolverDens& another); Copy constructor. void Factor(TQpDataBase* prob, TQpVar* vars); Sets up the matrix for the main linear system in ""augmented system"" form. void PutXDiagonal(TVectorD& xdiag); Places the diagonal resulting from the bounds on x into the augmented system matrix. void PutZDiagonal(TVectorD& zdiag); Places the diagonal resulting from the bounds on Cx into the augmented system matrix. void SolveCompressed(TVectorD& rhs); Perform the actual solve using the factors produced in factor.; rhs on input contains the aggregated right-hand side of the augmented system;; on output contains the solution in aggregated form . TQpLinSolverDens & operator=(const TQpLinSolverDens& source); Assignment operator. TQpLinSolverDens(); {}. virtual ~TQpLinSolverDens(); {}. » Author: Eddy Offermann May 2004 » C",MatchSource.WIKI,root/html604/TQpLinSolverDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverDens.html
https://root.cern/root/html604/TQpLinSolverDens.html:8143,Performance,Perform,Perform,8143,"ectors; TVectorDTQpLinSolverBase::fDq; TQpProbBase*TQpLinSolverBase::fFactory; TMatrixDSymfKkt; Int_tTQpLinSolverBase::fMclo; Int_tTQpLinSolverBase::fMcup; Int_tTQpLinSolverBase::fMy; Int_tTQpLinSolverBase::fMz; TVectorDTQpLinSolverBase::fNomegaInvstores a critical diagonal matrix as a vector; Int_tTQpLinSolverBase::fNxdimensions of the vectors in the general QP formulation; Int_tTQpLinSolverBase::fNxlo; Int_tTQpLinSolverBase::fNxupdimensions of the upper and lower bound vectors; TVectorDTQpLinSolverBase::fRhsright-hand side of the system; TDecompLUfSolveLU; TVectorDTQpLinSolverBase::fXloIndex; TVectorDTQpLinSolverBase::fXupIndexindex matrices for the upper and lower bounds on x and Cx. Class Charts. Inheritance Chart:. TObject. ←; TQpLinSolverBase. ←; TQpLinSolverDens. Function documentation; TQpLinSolverDens(TQpProbDens* factory, TQpDataDens* data); Constructor. TQpLinSolverDens(const TQpLinSolverDens& another); Copy constructor. void Factor(TQpDataBase* prob, TQpVar* vars); Sets up the matrix for the main linear system in ""augmented system"" form. void PutXDiagonal(TVectorD& xdiag); Places the diagonal resulting from the bounds on x into the augmented system matrix. void PutZDiagonal(TVectorD& zdiag); Places the diagonal resulting from the bounds on Cx into the augmented system matrix. void SolveCompressed(TVectorD& rhs); Perform the actual solve using the factors produced in factor.; rhs on input contains the aggregated right-hand side of the augmented system;; on output contains the solution in aggregated form . TQpLinSolverDens & operator=(const TQpLinSolverDens& source); Assignment operator. TQpLinSolverDens(); {}. virtual ~TQpLinSolverDens(); {}. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQpLinSolverDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverDens.html
https://root.cern/root/html604/TQpLinSolverDens.html:2549,Security,Hash,Hash,2549,"msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTQpLinSolverBase::JoinRHS(TVectorD& rhs, TVectorD& rhs1, TVectorD& rhs2, TVectorD& rhs3); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); vo",MatchSource.WIKI,root/html604/TQpLinSolverDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverDens.html
https://root.cern/root/html604/TQpLinSolverDens.html:5279,Testability,Test,TestBit,5279,", void* vp); TQpLinSolverDens&operator=(const TQpLinSolverDens& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidPutXDiagonal(TVectorD& xdiag); virtual voidPutZDiagonal(TVectorD& zdiag); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTQpLinSolverBase::SeparateVars(TVectorD& vars1, TVectorD& vars2, TVectorD& vars3, TVectorD& vars); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTQpLinSolverBase::Solve(TQpDataBase* prob, TQpVar* vars, TQpResidual* resids, TQpVar* step); virtual voidSolveCompressed(TVectorD& rhs); virtual voidTQpLinSolverBase::SolveXYZS(TVectorD& stepx, TVectorD& stepy, TVectorD& stepz, TVectorD& steps, TVectorD& ztemp, TQpDataBase* data); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpLinSolverDens(); TQpLinSolverDens(const TQpLinSolverDens& another); TQpLinSolverDens(TQpProbDens* factory, TQpDataDens* data); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpLinSolverDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverDens.html
https://root.cern/root/html604/TQpLinSolverDens.html:5318,Testability,Test,TestBits,5318,", void* vp); TQpLinSolverDens&operator=(const TQpLinSolverDens& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidPutXDiagonal(TVectorD& xdiag); virtual voidPutZDiagonal(TVectorD& zdiag); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTQpLinSolverBase::SeparateVars(TVectorD& vars1, TVectorD& vars2, TVectorD& vars3, TVectorD& vars); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTQpLinSolverBase::Solve(TQpDataBase* prob, TQpVar* vars, TQpResidual* resids, TQpVar* step); virtual voidSolveCompressed(TVectorD& rhs); virtual voidTQpLinSolverBase::SolveXYZS(TVectorD& stepx, TVectorD& stepy, TVectorD& stepz, TVectorD& steps, TVectorD& ztemp, TQpDataBase* data); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpLinSolverDens(); TQpLinSolverDens(const TQpLinSolverDens& another); TQpLinSolverDens(TQpProbDens* factory, TQpDataDens* data); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpLinSolverDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverDens.html
https://root.cern/root/html604/TQpLinSolverDens.html:778,Usability,Clear,Clear,778," virtual~TQpLinSolverDens(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTQpLinSolverBase::ComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual",MatchSource.WIKI,root/html604/TQpLinSolverDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverDens.html
https://root.cern/root/html604/TQpLinSolverSparse.html:1523,Availability,Error,Error,1523,"LinSolverSparse(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTQpLinSolverBase::ComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer*",MatchSource.WIKI,root/html604/TQpLinSolverSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverSparse.html
https://root.cern/root/html604/TQpLinSolverSparse.html:1652,Availability,error,error,1652,"virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTQpLinSolverBase::ComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual B",MatchSource.WIKI,root/html604/TQpLinSolverSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverSparse.html
https://root.cern/root/html604/TQpLinSolverSparse.html:1736,Availability,error,error,1736,"TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTQpLinSolverBase::ComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::Inhe",MatchSource.WIKI,root/html604/TQpLinSolverSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverSparse.html
https://root.cern/root/html604/TQpLinSolverSparse.html:124,Modifiability,inherit,inheritance,124,". TQpLinSolverSparse. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » QUADP; » TQpLinSolverSparse. class TQpLinSolverSparse: public TQpLinSolverBase. TQpLinSolverSparse. Implements the aspects of the solvers for dense general QP; formulation that are specific to the dense case. Function Members (Methods); public:. virtual~TQpLinSolverSparse(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTQpLinSolverBase::ComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) cons",MatchSource.WIKI,root/html604/TQpLinSolverSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverSparse.html
https://root.cern/root/html604/TQpLinSolverSparse.html:2669,Modifiability,Inherit,InheritsFrom,2669,"dTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTQpLinSolverBase::JoinRHS(TVectorD& rhs, TVectorD& rhs1, TVectorD& rhs2, TVectorD& rhs3); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator n",MatchSource.WIKI,root/html604/TQpLinSolverSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverSparse.html
https://root.cern/root/html604/TQpLinSolverSparse.html:2735,Modifiability,Inherit,InheritsFrom,2735," = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTQpLinSolverBase::JoinRHS(TVectorD& rhs, TVectorD& rhs1, TVectorD& rhs2, TVectorD& rhs3); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); ",MatchSource.WIKI,root/html604/TQpLinSolverSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverSparse.html
https://root.cern/root/html604/TQpLinSolverSparse.html:7544,Modifiability,Inherit,Inheritance,7544,"TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TVectorDTQpLinSolverBase::fCloIndex; TVectorDTQpLinSolverBase::fCupIndex; TVectorDTQpLinSolverBase::fDdtemporary storage vectors; TVectorDTQpLinSolverBase::fDq; TQpProbBase*TQpLinSolverBase::fFactory; TMatrixDSparsefKkt; Int_tTQpLinSolverBase::fMclo; Int_tTQpLinSolverBase::fMcup; Int_tTQpLinSolverBase::fMy; Int_tTQpLinSolverBase::fMz; TVectorDTQpLinSolverBase::fNomegaInvstores a critical diagonal matrix as a vector; Int_tTQpLinSolverBase::fNxdimensions of the vectors in the general QP formulation; Int_tTQpLinSolverBase::fNxlo; Int_tTQpLinSolverBase::fNxupdimensions of the upper and lower bound vectors; TVectorDTQpLinSolverBase::fRhsright-hand side of the system; TDecompSparsefSolveSparse; TVectorDTQpLinSolverBase::fXloIndex; TVectorDTQpLinSolverBase::fXupIndexindex matrices for the upper and lower bounds on x and Cx. Class Charts. Inheritance Chart:. TObject. ←; TQpLinSolverBase. ←; TQpLinSolverSparse. Function documentation; TQpLinSolverSparse(TQpProbSparse* factory, TQpDataSparse* data); Constructor. TQpLinSolverSparse(const TQpLinSolverSparse& another); Copy constructor. void Factor(TQpDataBase* prob, TQpVar* vars); Sets up the matrix for the main linear system in ""augmented system"" form. void PutXDiagonal(TVectorD& xdiag); Places the diagonal resulting from the bounds on x into the augmented system matrix. void PutZDiagonal(TVectorD& zdiag); Places the diagonal resulting from the bounds on Cx into the augmented system matrix. void SolveCompressed(TVectorD& rhs); Perform the actual solve using the factors produced in factor.; rhs on input contains the aggregated right-hand side of the augmented system;; on output contains the solution in aggregated form . TQpLinSolverSparse & operator=(const TQpLinSolverSparse& source); Assignment operator. TQpLinSolverSparse(); {}. virtual ~TQpLinSolverSparse(); {}. » Author: Eddy Of",MatchSource.WIKI,root/html604/TQpLinSolverSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverSparse.html
https://root.cern/root/html604/TQpLinSolverSparse.html:8192,Performance,Perform,Perform,8192,"e::fDq; TQpProbBase*TQpLinSolverBase::fFactory; TMatrixDSparsefKkt; Int_tTQpLinSolverBase::fMclo; Int_tTQpLinSolverBase::fMcup; Int_tTQpLinSolverBase::fMy; Int_tTQpLinSolverBase::fMz; TVectorDTQpLinSolverBase::fNomegaInvstores a critical diagonal matrix as a vector; Int_tTQpLinSolverBase::fNxdimensions of the vectors in the general QP formulation; Int_tTQpLinSolverBase::fNxlo; Int_tTQpLinSolverBase::fNxupdimensions of the upper and lower bound vectors; TVectorDTQpLinSolverBase::fRhsright-hand side of the system; TDecompSparsefSolveSparse; TVectorDTQpLinSolverBase::fXloIndex; TVectorDTQpLinSolverBase::fXupIndexindex matrices for the upper and lower bounds on x and Cx. Class Charts. Inheritance Chart:. TObject. ←; TQpLinSolverBase. ←; TQpLinSolverSparse. Function documentation; TQpLinSolverSparse(TQpProbSparse* factory, TQpDataSparse* data); Constructor. TQpLinSolverSparse(const TQpLinSolverSparse& another); Copy constructor. void Factor(TQpDataBase* prob, TQpVar* vars); Sets up the matrix for the main linear system in ""augmented system"" form. void PutXDiagonal(TVectorD& xdiag); Places the diagonal resulting from the bounds on x into the augmented system matrix. void PutZDiagonal(TVectorD& zdiag); Places the diagonal resulting from the bounds on Cx into the augmented system matrix. void SolveCompressed(TVectorD& rhs); Perform the actual solve using the factors produced in factor.; rhs on input contains the aggregated right-hand side of the augmented system;; on output contains the solution in aggregated form . TQpLinSolverSparse & operator=(const TQpLinSolverSparse& source); Assignment operator. TQpLinSolverSparse(); {}. virtual ~TQpLinSolverSparse(); {}. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQpLinSolverSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverSparse.html
https://root.cern/root/html604/TQpLinSolverSparse.html:2559,Security,Hash,Hash,2559,"msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTQpLinSolverBase::JoinRHS(TVectorD& rhs, TVectorD& rhs1, TVectorD& rhs2, TVectorD& rhs3); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); vo",MatchSource.WIKI,root/html604/TQpLinSolverSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverSparse.html
https://root.cern/root/html604/TQpLinSolverSparse.html:5293,Testability,Test,TestBit,5293,"LinSolverSparse&operator=(const TQpLinSolverSparse& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidPutXDiagonal(TVectorD& xdiag); virtual voidPutZDiagonal(TVectorD& zdiag); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTQpLinSolverBase::SeparateVars(TVectorD& vars1, TVectorD& vars2, TVectorD& vars3, TVectorD& vars); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTQpLinSolverBase::Solve(TQpDataBase* prob, TQpVar* vars, TQpResidual* resids, TQpVar* step); virtual voidSolveCompressed(TVectorD& rhs); virtual voidTQpLinSolverBase::SolveXYZS(TVectorD& stepx, TVectorD& stepy, TVectorD& stepz, TVectorD& steps, TVectorD& ztemp, TQpDataBase* data); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpLinSolverSparse(); TQpLinSolverSparse(const TQpLinSolverSparse& another); TQpLinSolverSparse(TQpProbSparse* factory, TQpDataSparse* data); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpLinSolverSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverSparse.html
https://root.cern/root/html604/TQpLinSolverSparse.html:5332,Testability,Test,TestBits,5332,"LinSolverSparse&operator=(const TQpLinSolverSparse& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidPutXDiagonal(TVectorD& xdiag); virtual voidPutZDiagonal(TVectorD& zdiag); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTQpLinSolverBase::SeparateVars(TVectorD& vars1, TVectorD& vars2, TVectorD& vars3, TVectorD& vars); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTQpLinSolverBase::Solve(TQpDataBase* prob, TQpVar* vars, TQpResidual* resids, TQpVar* step); virtual voidSolveCompressed(TVectorD& rhs); virtual voidTQpLinSolverBase::SolveXYZS(TVectorD& stepx, TVectorD& stepy, TVectorD& stepz, TVectorD& steps, TVectorD& ztemp, TQpDataBase* data); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpLinSolverSparse(); TQpLinSolverSparse(const TQpLinSolverSparse& another); TQpLinSolverSparse(TQpProbSparse* factory, TQpDataSparse* data); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpLinSolverSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverSparse.html
https://root.cern/root/html604/TQpLinSolverSparse.html:788,Usability,Clear,Clear,788," virtual~TQpLinSolverSparse(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTQpLinSolverBase::ComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidFactor(TQpDataBase* prob, TQpVar* vars); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) cons",MatchSource.WIKI,root/html604/TQpLinSolverSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpLinSolverSparse.html
https://root.cern/root/html604/TQpProbBase.html:602,Availability,avail,available,602,". TQpProbBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » QUADP; » TQpProbBase. class TQpProbBase: public TObject. TQpProbBase. default general problem formulation:. minimize c' x + ( 1/2 ) x' * Q x ;; subject to A x = b ;; clo <= C x <= cup ;; xlo <= x <= xup ;. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TQpProbBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObjec",MatchSource.WIKI,root/html604/TQpProbBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbBase.html
https://root.cern/root/html604/TQpProbBase.html:1442,Availability,Error,Error,1442," virtual~TQpProbBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObjec",MatchSource.WIKI,root/html604/TQpProbBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbBase.html
https://root.cern/root/html604/TQpProbBase.html:1571,Availability,error,error,1571," virtual~TQpProbBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObjec",MatchSource.WIKI,root/html604/TQpProbBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbBase.html
https://root.cern/root/html604/TQpProbBase.html:1655,Availability,error,error,1655," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root/html604/TQpProbBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbBase.html
https://root.cern/root/html604/TQpProbBase.html:117,Modifiability,inherit,inheritance,117,". TQpProbBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » QUADP; » TQpProbBase. class TQpProbBase: public TObject. TQpProbBase. default general problem formulation:. minimize c' x + ( 1/2 ) x' * Q x ;; subject to A x = b ;; clo <= C x <= cup ;; xlo <= x <= xup ;. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TQpProbBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObjec",MatchSource.WIKI,root/html604/TQpProbBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbBase.html
https://root.cern/root/html604/TQpProbBase.html:2535,Modifiability,Inherit,InheritsFrom,2535,"d, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidJoinRHS(TVectorD& rhs_in, TVectorD& rhs1_in, TVectorD& rhs2_in, TVectorD& rhs3_in); virtual voidTObject::ls(Option_t* option = """") const; virtual TQpDataBase*MakeData(TVectorD& c, TMatrixDBase& Q_in, TVectorD& xlo, TVectorD& ixlo, TVectorD& xup, TVectorD& ixup, TMatrixDBase& A_in, TVectorD& bA, TMatrixDBase& C_in, TVectorD& clo, TVectorD& iclo, TVectorD& cup, TVectorD& icup); virtual TQpLinSolverBase*MakeLinSys(const TQpDataBase* data); virtual TQpResidual*MakeResiduals(const TQpDataBase* data); virtual TQpVar*MakeVariables(const TQpDataBase* data); voidTObject::MayNotUse",MatchSource.WIKI,root/html604/TQpProbBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbBase.html
https://root.cern/root/html604/TQpProbBase.html:2601,Modifiability,Inherit,InheritsFrom,2601,"cute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidJoinRHS(TVectorD& rhs_in, TVectorD& rhs1_in, TVectorD& rhs2_in, TVectorD& rhs3_in); virtual voidTObject::ls(Option_t* option = """") const; virtual TQpDataBase*MakeData(TVectorD& c, TMatrixDBase& Q_in, TVectorD& xlo, TVectorD& ixlo, TVectorD& xup, TVectorD& ixup, TMatrixDBase& A_in, TVectorD& bA, TMatrixDBase& C_in, TVectorD& clo, TVectorD& iclo, TVectorD& cup, TVectorD& icup); virtual TQpLinSolverBase*MakeLinSys(const TQpDataBase* data); virtual TQpResidual*MakeResiduals(const TQpDataBase* data); virtual TQpVar*MakeVariables(const TQpDataBase* data); voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidT",MatchSource.WIKI,root/html604/TQpProbBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbBase.html
https://root.cern/root/html604/TQpProbBase.html:6623,Modifiability,Inherit,Inheritance,6623," virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. Int_tfMynumber of rows in A and b; Int_tfMznumber of rows in C; Int_tfNxnumber of elements in x; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance Chart:. TObject. ←; TQpProbBase. ←. TQpProbDens. TQpProbSparse. Function documentation; TQpProbBase(); Default constructor. TQpProbBase(Int_t nx, Int_t my, Int_t mz); Constructor. TQpProbBase(const TQpProbBase& another); Copy constructor. TQpProbBase & operator=(const TQpProbBase& source); Assignment operator. virtual ~TQpProbBase(); {}. TQpDataBase * MakeData(TVectorD& c, TMatrixDBase& Q_in, TVectorD& xlo, TVectorD& ixlo, TVectorD& xup, TVectorD& ixup, TMatrixDBase& A_in, TVectorD& bA, TMatrixDBase& C_in, TVectorD& clo, TVectorD& iclo, TVectorD& cup, TVectorD& icup). TQpVar * MakeVariables(const TQpDataBase* data). TQpLinSolverBase * MakeLinSys(const TQpDataBase* data). void JoinRHS(TVectorD& rhs_in, TVectorD& rhs1_in, TVectorD& rhs2_in, TVectorD& rhs3_in). void SeparateVars(TVectorD& x_in, TVectorD& y_in, TVectorD& z_in, TVectorD& vars_in). » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generate",MatchSource.WIKI,root/html604/TQpProbBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbBase.html
https://root.cern/root/html604/TQpProbBase.html:2425,Security,Hash,Hash,2425,"l voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidJoinRHS(TVectorD& rhs_in, TVectorD& rhs1_in, TVectorD& rhs2_in, TVectorD& rhs3_in); virtual voidTObject::ls(Option_t* option = """") const; virtual TQpDataBase*MakeData(TVectorD& c, TMatrixDBase& Q_in, TVectorD& xlo, TVectorD& ixlo, TVectorD& xup, TVectorD& ixup, TMatrixDBase& A_in, TVectorD& bA, TMatrixDBase& C_in, TVectorD& clo, TVectorD& iclo, TVectorD& cup, TVectorD& icup); virtual TQpLinSolverBase*MakeLinSys(const TQpDataBase* data); virtual TQpResidual*Mak",MatchSource.WIKI,root/html604/TQpProbBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbBase.html
https://root.cern/root/html604/TQpProbBase.html:5159,Testability,Test,TestBit,5159,"olete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpProbBase&operator=(const TQpProbBase& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSeparateVars(TVectorD& x_in, TVectorD& y_in, TVectorD& z_in, TVectorD& vars_in); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpProbBase(); TQpProbBase(const TQpProbBase& another); TQpProbBase(Int_t nx, Int_t my, Int_t mz); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpProbBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbBase.html
https://root.cern/root/html604/TQpProbBase.html:5198,Testability,Test,TestBits,5198,"olete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpProbBase&operator=(const TQpProbBase& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSeparateVars(TVectorD& x_in, TVectorD& y_in, TVectorD& z_in, TVectorD& vars_in); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpProbBase(); TQpProbBase(const TQpProbBase& another); TQpProbBase(Int_t nx, Int_t my, Int_t mz); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpProbBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbBase.html
https://root.cern/root/html604/TQpProbBase.html:902,Usability,Clear,Clear,902," virtual~TQpProbBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObjec",MatchSource.WIKI,root/html604/TQpProbBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbBase.html
https://root.cern/root/html604/TQpProbDens.html:1213,Availability,Error,Error,1213," virtual~TQpProbDens(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_",MatchSource.WIKI,root/html604/TQpProbDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbDens.html
https://root.cern/root/html604/TQpProbDens.html:1342,Availability,error,error,1342," virtual~TQpProbDens(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_",MatchSource.WIKI,root/html604/TQpProbDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbDens.html
https://root.cern/root/html604/TQpProbDens.html:1426,Availability,error,error,1426," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root/html604/TQpProbDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbDens.html
https://root.cern/root/html604/TQpProbDens.html:117,Modifiability,inherit,inheritance,117,". TQpProbDens. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » QUADP; » TQpProbDens. class TQpProbDens: public TQpProbBase. TQpProbDens. dense matrix problem formulation. Function Members (Methods); public:. virtual~TQpProbDens(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_",MatchSource.WIKI,root/html604/TQpProbDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbDens.html
https://root.cern/root/html604/TQpProbDens.html:2306,Modifiability,Inherit,InheritsFrom,2306,"d, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidJoinRHS(TVectorD& rhs_in, TVectorD& rhs1_in, TVectorD& rhs2_in, TVectorD& rhs3_in); virtual voidTObject::ls(Option_t* option = """") const; virtual TQpDataBase*MakeData(Double_t* c, Double_t* Q, Double_t* xlo, Bool_t* ixlo, Double_t* xup, Bool_t* ixup, Double_t* A, Double_t* bA, Double_t* C, Double_t* clo, Bool_t* iclo, Double_t* cup, Bool_t* icup); virtual TQpDataBase*MakeData(TVectorD& c, TMatrixDBase& Q_in, TVectorD& xlo, TVectorD& ixlo, TVectorD& xup, TVectorD& ixup, TMatrixDBase& A_in, TVectorD& bA, TMatrixDBase& C_in, TVectorD& clo, TVectorD& iclo, TVectorD& cup, TVec",MatchSource.WIKI,root/html604/TQpProbDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbDens.html
https://root.cern/root/html604/TQpProbDens.html:2372,Modifiability,Inherit,InheritsFrom,2372,"cute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidJoinRHS(TVectorD& rhs_in, TVectorD& rhs1_in, TVectorD& rhs2_in, TVectorD& rhs3_in); virtual voidTObject::ls(Option_t* option = """") const; virtual TQpDataBase*MakeData(Double_t* c, Double_t* Q, Double_t* xlo, Bool_t* ixlo, Double_t* xup, Bool_t* ixup, Double_t* A, Double_t* bA, Double_t* C, Double_t* clo, Bool_t* iclo, Double_t* cup, Bool_t* icup); virtual TQpDataBase*MakeData(TVectorD& c, TMatrixDBase& Q_in, TVectorD& xlo, TVectorD& ixlo, TVectorD& xup, TVectorD& ixup, TMatrixDBase& A_in, TVectorD& bA, TMatrixDBase& C_in, TVectorD& clo, TVectorD& iclo, TVectorD& cup, TVectorD& icup); virtual TQpLinSolverBase*MakeLinSys(const TQpDataBase",MatchSource.WIKI,root/html604/TQpProbDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbDens.html
https://root.cern/root/html604/TQpProbDens.html:6736,Modifiability,Inherit,Inheritance,6736,", const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. Int_tTQpProbBase::fMynumber of rows in A and b; Int_tTQpProbBase::fMznumber of rows in C; Int_tTQpProbBase::fNxnumber of elements in x; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance Chart:. TObject. ←; TQpProbBase. ←; TQpProbDens. Function documentation; TQpProbDens(Int_t nx, Int_t my, Int_t mz); Constructor. TQpProbDens(const TQpProbDens& another); Copy constructor. TQpDataBase * MakeData(Double_t* c, Double_t* Q, Double_t* xlo, Bool_t* ixlo, Double_t* xup, Bool_t* ixup, Double_t* A, Double_t* bA, Double_t* C, Double_t* clo, Bool_t* iclo, Double_t* cup, Bool_t* icup); Setup the data. TQpDataBase * MakeData(TVectorD& c, TMatrixDBase& Q_in, TVectorD& xlo, TVectorD& ixlo, TVectorD& xup, TVectorD& ixup, TMatrixDBase& A_in, TVectorD& bA, TMatrixDBase& C_in, TVectorD& clo, TVectorD& iclo, TVectorD& cup, TVectorD& icup); Setup the data. TQpResidual* MakeResiduals(const TQpDataBase* data); Setup the residuals. TQpVar* MakeVariables(const TQpDataBase* data); Setup the variables. TQpLinSolverBase* MakeLinSys(const TQpDataBase* data); Setup the linear solver. void JoinRHS(TVectorD& rhs_in, TVectorD& rhs1_in, TVectorD& rhs2_in, TVectorD& rhs3_in); Assembles a single vecto",MatchSource.WIKI,root/html604/TQpProbDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbDens.html
https://root.cern/root/html604/TQpProbDens.html:7541,Modifiability,variab,variables,7541,":kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance Chart:. TObject. ←; TQpProbBase. ←; TQpProbDens. Function documentation; TQpProbDens(Int_t nx, Int_t my, Int_t mz); Constructor. TQpProbDens(const TQpProbDens& another); Copy constructor. TQpDataBase * MakeData(Double_t* c, Double_t* Q, Double_t* xlo, Bool_t* ixlo, Double_t* xup, Bool_t* ixup, Double_t* A, Double_t* bA, Double_t* C, Double_t* clo, Bool_t* iclo, Double_t* cup, Bool_t* icup); Setup the data. TQpDataBase * MakeData(TVectorD& c, TMatrixDBase& Q_in, TVectorD& xlo, TVectorD& ixlo, TVectorD& xup, TVectorD& ixup, TMatrixDBase& A_in, TVectorD& bA, TMatrixDBase& C_in, TVectorD& clo, TVectorD& iclo, TVectorD& cup, TVectorD& icup); Setup the data. TQpResidual* MakeResiduals(const TQpDataBase* data); Setup the residuals. TQpVar* MakeVariables(const TQpDataBase* data); Setup the variables. TQpLinSolverBase* MakeLinSys(const TQpDataBase* data); Setup the linear solver. void JoinRHS(TVectorD& rhs_in, TVectorD& rhs1_in, TVectorD& rhs2_in, TVectorD& rhs3_in); Assembles a single vector object from three given vectors .; rhs_out (output) final joined vector; rhs1_in (input) first part of rhs; rhs2_in (input) middle part of rhs; rhs3_in (input) last part of rhs . void SeparateVars(TVectorD& x_in, TVectorD& y_in, TVectorD& z_in, TVectorD& vars_in); Extracts three component vectors from a given aggregated vector.; vars_in (input) aggregated vector; x_in (output) first part of vars; y_in (output) middle part of vars; z_in (output) last part of vars. void MakeRandomData(TQpDataDens*& data, TQpVar*& soln, Int_t nnzQ, Int_t nnzA, Int_t nnzC); Create a random QP problem. TQpProbDens & operator=(const TQpProbDens& source); Assignment operator. TQpProbDens(); {}. virtual ~TQpProbDens(); {}. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, R",MatchSource.WIKI,root/html604/TQpProbDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbDens.html
https://root.cern/root/html604/TQpProbDens.html:2196,Security,Hash,Hash,2196,"l voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidJoinRHS(TVectorD& rhs_in, TVectorD& rhs1_in, TVectorD& rhs2_in, TVectorD& rhs3_in); virtual voidTObject::ls(Option_t* option = """") const; virtual TQpDataBase*MakeData(Double_t* c, Double_t* Q, Double_t* xlo, Bool_t* ixlo, Double_t* xup, Bool_t* ixup, Double_t* A, Double_t* bA, Double_t* C, Double_t* clo, Bool_t* iclo, Double_t* cup, Bool_t* icup); virtual TQpDataBase*MakeData(TVectorD& c, TMatrixDBase& Q_in, TVectorD& xlo, TVectorD& ixlo, TVectorD& xup, TVecto",MatchSource.WIKI,root/html604/TQpProbDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbDens.html
https://root.cern/root/html604/TQpProbDens.html:5233,Testability,Test,TestBit,5233,"olete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpProbDens&operator=(const TQpProbDens& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSeparateVars(TVectorD& x_in, TVectorD& y_in, TVectorD& z_in, TVectorD& vars_in); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpProbDens(); TQpProbDens(const TQpProbDens& another); TQpProbDens(Int_t nx, Int_t my, Int_t mz); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpProbDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbDens.html
https://root.cern/root/html604/TQpProbDens.html:5272,Testability,Test,TestBits,5272,"olete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpProbDens&operator=(const TQpProbDens& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSeparateVars(TVectorD& x_in, TVectorD& y_in, TVectorD& z_in, TVectorD& vars_in); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpProbDens(); TQpProbDens(const TQpProbDens& another); TQpProbDens(Int_t nx, Int_t my, Int_t mz); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpProbDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbDens.html
https://root.cern/root/html604/TQpProbDens.html:673,Usability,Clear,Clear,673," virtual~TQpProbDens(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_",MatchSource.WIKI,root/html604/TQpProbDens.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbDens.html
https://root.cern/root/html604/TQpProbSparse.html:1223,Availability,Error,Error,1223," virtual~TQpProbSparse(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtu",MatchSource.WIKI,root/html604/TQpProbSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbSparse.html
https://root.cern/root/html604/TQpProbSparse.html:1352,Availability,error,error,1352," virtual~TQpProbSparse(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtu",MatchSource.WIKI,root/html604/TQpProbSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbSparse.html
https://root.cern/root/html604/TQpProbSparse.html:1436,Availability,error,error,1436," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root/html604/TQpProbSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbSparse.html
https://root.cern/root/html604/TQpProbSparse.html:119,Modifiability,inherit,inheritance,119,". TQpProbSparse. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » QUADP; » TQpProbSparse. class TQpProbSparse: public TQpProbBase. TQpProbSparse. dense matrix problem formulation. Function Members (Methods); public:. virtual~TQpProbSparse(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtu",MatchSource.WIKI,root/html604/TQpProbSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbSparse.html
https://root.cern/root/html604/TQpProbSparse.html:2316,Modifiability,Inherit,InheritsFrom,2316,"d, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidJoinRHS(TVectorD& rhs_in, TVectorD& rhs1_in, TVectorD& rhs2_in, TVectorD& rhs3_in); virtual voidTObject::ls(Option_t* option = """") const; virtual TQpDataBase*MakeData(TVectorD& c, TMatrixDBase& Q_in, TVectorD& xlo, TVectorD& ixlo, TVectorD& xup, TVectorD& ixup, TMatrixDBase& A_in, TVectorD& bA, TMatrixDBase& C_in, TVectorD& clo, TVectorD& iclo, TVectorD& cup, TVectorD& icup); virtual TQpDataBase*MakeData(Double_t* c, Int_t nnzQ, Int_t* irowQ, Int_t* icolQ, Double_t* Q, Double_t* xlo, Bool_t* ixlo, Double_t* xup, Bool_t* ixup, Int_t nnzA, Int_t* irowA, Int_t* icolA, Double",MatchSource.WIKI,root/html604/TQpProbSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbSparse.html
https://root.cern/root/html604/TQpProbSparse.html:2382,Modifiability,Inherit,InheritsFrom,2382,"cute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidJoinRHS(TVectorD& rhs_in, TVectorD& rhs1_in, TVectorD& rhs2_in, TVectorD& rhs3_in); virtual voidTObject::ls(Option_t* option = """") const; virtual TQpDataBase*MakeData(TVectorD& c, TMatrixDBase& Q_in, TVectorD& xlo, TVectorD& ixlo, TVectorD& xup, TVectorD& ixup, TMatrixDBase& A_in, TVectorD& bA, TMatrixDBase& C_in, TVectorD& clo, TVectorD& iclo, TVectorD& cup, TVectorD& icup); virtual TQpDataBase*MakeData(Double_t* c, Int_t nnzQ, Int_t* irowQ, Int_t* icolQ, Double_t* Q, Double_t* xlo, Bool_t* ixlo, Double_t* xup, Bool_t* ixup, Int_t nnzA, Int_t* irowA, Int_t* icolA, Double_t* A, Double_t* bA, Int_t nnzC, Int_t* irowC, Int_t* icolC, Doubl",MatchSource.WIKI,root/html604/TQpProbSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbSparse.html
https://root.cern/root/html604/TQpProbSparse.html:6880,Modifiability,Inherit,Inheritance,6880,", const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. Int_tTQpProbBase::fMynumber of rows in A and b; Int_tTQpProbBase::fMznumber of rows in C; Int_tTQpProbBase::fNxnumber of elements in x; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance Chart:. TObject. ←; TQpProbBase. ←; TQpProbSparse. Function documentation; TQpProbSparse(Int_t nx, Int_t my, Int_t mz); Constructor. TQpProbSparse(const TQpProbSparse& another); Copy constructor. TQpDataBase * MakeData(Double_t* c, Int_t nnzQ, Int_t* irowQ, Int_t* icolQ, Double_t* Q, Double_t* xlo, Bool_t* ixlo, Double_t* xup, Bool_t* ixup, Int_t nnzA, Int_t* irowA, Int_t* icolA, Double_t* A, Double_t* bA, Int_t nnzC, Int_t* irowC, Int_t* icolC, Double_t* C, Double_t* clo, Bool_t* iclo, Double_t* cup, Bool_t* icup); Setup the data. TQpDataBase * MakeData(TVectorD& c, TMatrixDBase& Q_in, TVectorD& xlo, TVectorD& ixlo, TVectorD& xup, TVectorD& ixup, TMatrixDBase& A_in, TVectorD& bA, TMatrixDBase& C_in, TVectorD& clo, TVectorD& iclo, TVectorD& cup, TVectorD& icup); Setup the data. TQpResidual* MakeResiduals(const TQpDataBase* data); Setup the residuals. TQpVar* MakeVariables(const TQpDataBase* data); Setup the variables. TQpLinSolverBase* MakeLinSys(const TQpDataBase* data); Setup the ",MatchSource.WIKI,root/html604/TQpProbSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbSparse.html
https://root.cern/root/html604/TQpProbSparse.html:7813,Modifiability,variab,variables,7813,"anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance Chart:. TObject. ←; TQpProbBase. ←; TQpProbSparse. Function documentation; TQpProbSparse(Int_t nx, Int_t my, Int_t mz); Constructor. TQpProbSparse(const TQpProbSparse& another); Copy constructor. TQpDataBase * MakeData(Double_t* c, Int_t nnzQ, Int_t* irowQ, Int_t* icolQ, Double_t* Q, Double_t* xlo, Bool_t* ixlo, Double_t* xup, Bool_t* ixup, Int_t nnzA, Int_t* irowA, Int_t* icolA, Double_t* A, Double_t* bA, Int_t nnzC, Int_t* irowC, Int_t* icolC, Double_t* C, Double_t* clo, Bool_t* iclo, Double_t* cup, Bool_t* icup); Setup the data. TQpDataBase * MakeData(TVectorD& c, TMatrixDBase& Q_in, TVectorD& xlo, TVectorD& ixlo, TVectorD& xup, TVectorD& ixup, TMatrixDBase& A_in, TVectorD& bA, TMatrixDBase& C_in, TVectorD& clo, TVectorD& iclo, TVectorD& cup, TVectorD& icup); Setup the data. TQpResidual* MakeResiduals(const TQpDataBase* data); Setup the residuals. TQpVar* MakeVariables(const TQpDataBase* data); Setup the variables. TQpLinSolverBase* MakeLinSys(const TQpDataBase* data); Setup the linear solver. void JoinRHS(TVectorD& rhs_in, TVectorD& rhs1_in, TVectorD& rhs2_in, TVectorD& rhs3_in); Assembles a single vector object from three given vectors .; rhs_out (output) final joined vector; rhs1_in (input) first part of rhs; rhs2_in (input) middle part of rhs; rhs3_in (input) last part of rhs . void SeparateVars(TVectorD& x_in, TVectorD& y_in, TVectorD& z_in, TVectorD& vars_in); Extracts three component vectors from a given aggregated vector.; vars_in (input) aggregated vector; x_in (output) first part of vars; y_in (output) middle part of vars; z_in (output) last part of vars. void MakeRandomData(TQpDataSparse*& data, TQpVar*& soln, Int_t nnzQ, Int_t nnzA, Int_t nnzC); Create a random QP problem. TQpProbSparse & operator=(const TQpProbSparse& source); Assignment operator. TQpProbSparse(); {}. virtual ~TQpProbSparse(); {}. » Author: Eddy Offermann May 2004 » Copyright (C) 19",MatchSource.WIKI,root/html604/TQpProbSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbSparse.html
https://root.cern/root/html604/TQpProbSparse.html:2206,Security,Hash,Hash,2206,"l voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidJoinRHS(TVectorD& rhs_in, TVectorD& rhs1_in, TVectorD& rhs2_in, TVectorD& rhs3_in); virtual voidTObject::ls(Option_t* option = """") const; virtual TQpDataBase*MakeData(TVectorD& c, TMatrixDBase& Q_in, TVectorD& xlo, TVectorD& ixlo, TVectorD& xup, TVectorD& ixup, TMatrixDBase& A_in, TVectorD& bA, TMatrixDBase& C_in, TVectorD& clo, TVectorD& iclo, TVectorD& cup, TVectorD& icup); virtual TQpDataBase*MakeData(Double_t* c, Int_t nnzQ, Int_t* irowQ, Int_t* icolQ, Dou",MatchSource.WIKI,root/html604/TQpProbSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbSparse.html
https://root.cern/root/html604/TQpProbSparse.html:5369,Testability,Test,TestBit,5369,"char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpProbSparse&operator=(const TQpProbSparse& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSeparateVars(TVectorD& x_in, TVectorD& y_in, TVectorD& z_in, TVectorD& vars_in); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpProbSparse(); TQpProbSparse(const TQpProbSparse& another); TQpProbSparse(Int_t nx, Int_t my, Int_t mz); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpProbSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbSparse.html
https://root.cern/root/html604/TQpProbSparse.html:5408,Testability,Test,TestBits,5408,"char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpProbSparse&operator=(const TQpProbSparse& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSeparateVars(TVectorD& x_in, TVectorD& y_in, TVectorD& z_in, TVectorD& vars_in); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpProbSparse(); TQpProbSparse(const TQpProbSparse& another); TQpProbSparse(Int_t nx, Int_t my, Int_t mz); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpProbSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbSparse.html
https://root.cern/root/html604/TQpProbSparse.html:683,Usability,Clear,Clear,683," virtual~TQpProbSparse(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtu",MatchSource.WIKI,root/html604/TQpProbSparse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpProbSparse.html
https://root.cern/root/html604/TQpResidual.html:1680,Availability,Error,Error,1680," virtual~TQpResidual(); voidTObject::AbstractMethod(const char* method) const; voidAdd_r3_xz_alpha(TQpVar* vars, Double_t alpha); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCalcResids(TQpDataBase* problem, TQpVar* vars); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidClear_r1r2(); voidClear_r3(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(c",MatchSource.WIKI,root/html604/TQpResidual.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpResidual.html
https://root.cern/root/html604/TQpResidual.html:1809,Availability,error,error,1809,"t; voidAdd_r3_xz_alpha(TQpVar* vars, Double_t alpha); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCalcResids(TQpDataBase* problem, TQpVar* vars); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidClear_r1r2(); voidClear_r3(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetDualityGap(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetResidualNorm(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bo",MatchSource.WIKI,root/html604/TQpResidual.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpResidual.html
https://root.cern/root/html604/TQpResidual.html:1893,Availability,error,error,1893,"(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCalcResids(TQpDataBase* problem, TQpVar* vars); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidClear_r1r2(); voidClear_r3(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetDualityGap(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetResidualNorm(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::Inher",MatchSource.WIKI,root/html604/TQpResidual.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpResidual.html
https://root.cern/root/html604/TQpResidual.html:117,Modifiability,inherit,inheritance,117,". TQpResidual. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » QUADP; » TQpResidual. class TQpResidual: public TObject. TQpResidual. The Residuals class calculates and stores the quantities that appear; on the right-hand side of the linear systems that arise at each; interior-point iteration. These residuals can be partitioned into; two fundamental categories: the components arising from the linear; equations in the KKT conditions, and the components arising from the; complementarity conditions. Function Members (Methods); public:. virtual~TQpResidual(); voidTObject::AbstractMethod(const char* method) const; voidAdd_r3_xz_alpha(TQpVar* vars, Double_t alpha); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCalcResids(TQpDataBase* problem, TQpVar* vars); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidClear_r1r2(); voidClear_r3(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(c",MatchSource.WIKI,root/html604/TQpResidual.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpResidual.html
https://root.cern/root/html604/TQpResidual.html:2825,Modifiability,Inherit,InheritsFrom,2825,"idTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetDualityGap(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetResidualNorm(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TQpResidual.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpResidual.html
https://root.cern/root/html604/TQpResidual.html:2891,Modifiability,Inherit,InheritsFrom,2891,"r = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetDualityGap(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetResidualNorm(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpResidual&operator=(const TQpResidual& source); v",MatchSource.WIKI,root/html604/TQpResidual.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpResidual.html
https://root.cern/root/html604/TQpResidual.html:6993,Modifiability,Inherit,Inheritance,6993,"bject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TVectorDfCloIndex; TVectorDfCupIndex; Double_tfDualityGapA quantity that measures progress toward feasibility. In terms; Double_tfMclo; Double_tfMcup; Int_tfMy; Int_tfMz; Int_tfNx; Double_tfNxlo; Double_tfNxup; Double_tfResidualNormThe norm of the residuals, ommiting the complementariy conditions; TVectorDfXloIndex; TVectorDfXupIndex. Class Charts. Inheritance Chart:. TObject. ←; TQpResidual. Function documentation; TQpResidual(); Constructor. TQpResidual(Int_t nx, Int_t my, Int_t mz, TVectorD& ixlow, TVectorD& ixupp, TVectorD& iclow, TVectorD& icupp); Constructor. TQpResidual(const TQpResidual& another); Copy constructor. void CalcResids(TQpDataBase* problem, TQpVar* vars); Calculate residuals, their norms, and duality complementarity gap,; given a problem and variable set. void Add_r3_xz_alpha(TQpVar* vars, Double_t alpha); Modify the ""complementarity"" component of the residuals, by adding the pairwise; products of the complementary variables plus a constant alpha to this term. void Set_r3_xz_alpha(TQpVar* vars, Double_t alpha); Set the ""complementarity"" component of the residuals to the pairwise products of; the complementary variables plus a constant alpha . void Clear_r3(); set the complementarity component of the residuals to 0. void Clear_r1r2(); set the noncomplementarity components of the residual (the terms arising from; the lin",MatchSource.WIKI,root/html604/TQpResidual.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpResidual.html
https://root.cern/root/html604/TQpResidual.html:7414,Modifiability,variab,variable,7414,"bject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TVectorDfCloIndex; TVectorDfCupIndex; Double_tfDualityGapA quantity that measures progress toward feasibility. In terms; Double_tfMclo; Double_tfMcup; Int_tfMy; Int_tfMz; Int_tfNx; Double_tfNxlo; Double_tfNxup; Double_tfResidualNormThe norm of the residuals, ommiting the complementariy conditions; TVectorDfXloIndex; TVectorDfXupIndex. Class Charts. Inheritance Chart:. TObject. ←; TQpResidual. Function documentation; TQpResidual(); Constructor. TQpResidual(Int_t nx, Int_t my, Int_t mz, TVectorD& ixlow, TVectorD& ixupp, TVectorD& iclow, TVectorD& icupp); Constructor. TQpResidual(const TQpResidual& another); Copy constructor. void CalcResids(TQpDataBase* problem, TQpVar* vars); Calculate residuals, their norms, and duality complementarity gap,; given a problem and variable set. void Add_r3_xz_alpha(TQpVar* vars, Double_t alpha); Modify the ""complementarity"" component of the residuals, by adding the pairwise; products of the complementary variables plus a constant alpha to this term. void Set_r3_xz_alpha(TQpVar* vars, Double_t alpha); Set the ""complementarity"" component of the residuals to the pairwise products of; the complementary variables plus a constant alpha . void Clear_r3(); set the complementarity component of the residuals to 0. void Clear_r1r2(); set the noncomplementarity components of the residual (the terms arising from; the linear equalities in the KKT conditions) to 0. void Project_r3(Double_t rmin, Double_t rmax); Perform the projection operation required by Gondzio algorithm: replace each; component r3_i of the complementarity component of the residuals by r3p_i-r3_i,; where r3p_i is the projection of r3_i onto the box [rmin, rmax]. Then if the; resulting value is l",MatchSource.WIKI,root/html604/TQpResidual.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpResidual.html
https://root.cern/root/html604/TQpResidual.html:7591,Modifiability,variab,variables,7591,"ey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TVectorDfCloIndex; TVectorDfCupIndex; Double_tfDualityGapA quantity that measures progress toward feasibility. In terms; Double_tfMclo; Double_tfMcup; Int_tfMy; Int_tfMz; Int_tfNx; Double_tfNxlo; Double_tfNxup; Double_tfResidualNormThe norm of the residuals, ommiting the complementariy conditions; TVectorDfXloIndex; TVectorDfXupIndex. Class Charts. Inheritance Chart:. TObject. ←; TQpResidual. Function documentation; TQpResidual(); Constructor. TQpResidual(Int_t nx, Int_t my, Int_t mz, TVectorD& ixlow, TVectorD& ixupp, TVectorD& iclow, TVectorD& icupp); Constructor. TQpResidual(const TQpResidual& another); Copy constructor. void CalcResids(TQpDataBase* problem, TQpVar* vars); Calculate residuals, their norms, and duality complementarity gap,; given a problem and variable set. void Add_r3_xz_alpha(TQpVar* vars, Double_t alpha); Modify the ""complementarity"" component of the residuals, by adding the pairwise; products of the complementary variables plus a constant alpha to this term. void Set_r3_xz_alpha(TQpVar* vars, Double_t alpha); Set the ""complementarity"" component of the residuals to the pairwise products of; the complementary variables plus a constant alpha . void Clear_r3(); set the complementarity component of the residuals to 0. void Clear_r1r2(); set the noncomplementarity components of the residual (the terms arising from; the linear equalities in the KKT conditions) to 0. void Project_r3(Double_t rmin, Double_t rmax); Perform the projection operation required by Gondzio algorithm: replace each; component r3_i of the complementarity component of the residuals by r3p_i-r3_i,; where r3p_i is the projection of r3_i onto the box [rmin, rmax]. Then if the; resulting value is less than -rmax, replace it by -rmax. Bool_t ValidNonZeroPattern(); Check if vector elements as selected through array indices are non-zero. void GondzioProjection(TVectorD& v, Double",MatchSource.WIKI,root/html604/TQpResidual.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpResidual.html
https://root.cern/root/html604/TQpResidual.html:7789,Modifiability,variab,variables,7789,"ess toward feasibility. In terms; Double_tfMclo; Double_tfMcup; Int_tfMy; Int_tfMz; Int_tfNx; Double_tfNxlo; Double_tfNxup; Double_tfResidualNormThe norm of the residuals, ommiting the complementariy conditions; TVectorDfXloIndex; TVectorDfXupIndex. Class Charts. Inheritance Chart:. TObject. ←; TQpResidual. Function documentation; TQpResidual(); Constructor. TQpResidual(Int_t nx, Int_t my, Int_t mz, TVectorD& ixlow, TVectorD& ixupp, TVectorD& iclow, TVectorD& icupp); Constructor. TQpResidual(const TQpResidual& another); Copy constructor. void CalcResids(TQpDataBase* problem, TQpVar* vars); Calculate residuals, their norms, and duality complementarity gap,; given a problem and variable set. void Add_r3_xz_alpha(TQpVar* vars, Double_t alpha); Modify the ""complementarity"" component of the residuals, by adding the pairwise; products of the complementary variables plus a constant alpha to this term. void Set_r3_xz_alpha(TQpVar* vars, Double_t alpha); Set the ""complementarity"" component of the residuals to the pairwise products of; the complementary variables plus a constant alpha . void Clear_r3(); set the complementarity component of the residuals to 0. void Clear_r1r2(); set the noncomplementarity components of the residual (the terms arising from; the linear equalities in the KKT conditions) to 0. void Project_r3(Double_t rmin, Double_t rmax); Perform the projection operation required by Gondzio algorithm: replace each; component r3_i of the complementarity component of the residuals by r3p_i-r3_i,; where r3p_i is the projection of r3_i onto the box [rmin, rmax]. Then if the; resulting value is less than -rmax, replace it by -rmax. Bool_t ValidNonZeroPattern(); Check if vector elements as selected through array indices are non-zero. void GondzioProjection(TVectorD& v, Double_t rmin, Double_t rmax); Replace each component r3_i of the complementarity component of the residuals; by r3p_i-r3_i, where r3p_i is the projection of r3_i onto the box [rmin, rmax].; Then if the ",MatchSource.WIKI,root/html604/TQpResidual.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpResidual.html
https://root.cern/root/html604/TQpResidual.html:8093,Performance,Perform,Perform,8093,"w, TVectorD& icupp); Constructor. TQpResidual(const TQpResidual& another); Copy constructor. void CalcResids(TQpDataBase* problem, TQpVar* vars); Calculate residuals, their norms, and duality complementarity gap,; given a problem and variable set. void Add_r3_xz_alpha(TQpVar* vars, Double_t alpha); Modify the ""complementarity"" component of the residuals, by adding the pairwise; products of the complementary variables plus a constant alpha to this term. void Set_r3_xz_alpha(TQpVar* vars, Double_t alpha); Set the ""complementarity"" component of the residuals to the pairwise products of; the complementary variables plus a constant alpha . void Clear_r3(); set the complementarity component of the residuals to 0. void Clear_r1r2(); set the noncomplementarity components of the residual (the terms arising from; the linear equalities in the KKT conditions) to 0. void Project_r3(Double_t rmin, Double_t rmax); Perform the projection operation required by Gondzio algorithm: replace each; component r3_i of the complementarity component of the residuals by r3p_i-r3_i,; where r3p_i is the projection of r3_i onto the box [rmin, rmax]. Then if the; resulting value is less than -rmax, replace it by -rmax. Bool_t ValidNonZeroPattern(); Check if vector elements as selected through array indices are non-zero. void GondzioProjection(TVectorD& v, Double_t rmin, Double_t rmax); Replace each component r3_i of the complementarity component of the residuals; by r3p_i-r3_i, where r3p_i is the projection of r3_i onto the box [rmin, rmax].; Then if the resulting value is less than -rmax, replace it by -rmax. TQpResidual & operator=(const TQpResidual& source); Assignment operator. virtual ~TQpResidual(); {}. Double_t GetResidualNorm(); { return fResidualNorm; }. Double_t GetDualityGap(); { return fDualityGap; }. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-06-02 16:31; This page has been automa",MatchSource.WIKI,root/html604/TQpResidual.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpResidual.html
https://root.cern/root/html604/TQpResidual.html:2715,Security,Hash,Hash,2715," msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetDualityGap(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetResidualNorm(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TQpResidual.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpResidual.html
https://root.cern/root/html604/TQpResidual.html:4939,Testability,Test,TestBit,4939,"ator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpResidual&operator=(const TQpResidual& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidProject_r3(Double_t rmin, Double_t rmax); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSet_r3_xz_alpha(TQpVar* vars, Double_t alpha); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpResidual(); TQpResidual(const TQpResidual& another); TQpResidual(Int_t nx, Int_t my, Int_t mz, TVectorD& ixlow, TVectorD& ixupp, TVectorD& iclow, TVectorD& icupp); virtual voidTObject::UseCurrentStyle(); Bool_tValidNonZeroPattern(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpResidual.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpResidual.html
https://root.cern/root/html604/TQpResidual.html:4978,Testability,Test,TestBits,4978,"ator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpResidual&operator=(const TQpResidual& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidProject_r3(Double_t rmin, Double_t rmax); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSet_r3_xz_alpha(TQpVar* vars, Double_t alpha); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpResidual(); TQpResidual(const TQpResidual& another); TQpResidual(Int_t nx, Int_t my, Int_t mz, TVectorD& ixlow, TVectorD& ixupp, TVectorD& iclow, TVectorD& icupp); virtual voidTObject::UseCurrentStyle(); Bool_tValidNonZeroPattern(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpResidual.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpResidual.html
https://root.cern/root/html604/TQpResidual.html:1106,Usability,Clear,Clear,1106," virtual~TQpResidual(); voidTObject::AbstractMethod(const char* method) const; voidAdd_r3_xz_alpha(TQpVar* vars, Double_t alpha); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCalcResids(TQpDataBase* problem, TQpVar* vars); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidClear_r1r2(); voidClear_r3(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(c",MatchSource.WIKI,root/html604/TQpResidual.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpResidual.html
https://root.cern/root/html604/TQpSolverBase.html:745,Availability,avail,available,745,". TQpSolverBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » QUADP; » TQpSolverBase. class TQpSolverBase: public TObject. TSolverBase. The Solver class contains methods for monitoring and checking the; convergence status of the algorithm, methods to determine the step; length along a given direction, methods to define the starting point,; and the solve method that implements the interior-point algorithm. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TQpSolverBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; Double_tDataNorm(); virtual voidDefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); virtual voidDefStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual Int_tDefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); virtual Int_tDoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:2392,Availability,Error,Error,2392,"_t stop_code, Int_t level); virtual voidDefStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual Int_tDefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); virtual Int_tDoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDumbStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tFinalStepLength(TQpVar* iterate, TQpVar* step); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetArTol(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TQpLinSolverBase*GetLinearSystem(); Double_tGetMuTol(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const;",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:2521,Availability,error,error,2521,", TQpVar* step); virtual Int_tDefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); virtual Int_tDoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDumbStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tFinalStepLength(TQpVar* iterate, TQpVar* step); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetArTol(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TQpLinSolverBase*GetLinearSystem(); Double_tGetMuTol(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() co",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:2605,Availability,error,error,2605,"* resids, Int_t i, Double_t mu, Int_t level); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); virtual Int_tDoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDumbStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tFinalStepLength(TQpVar* iterate, TQpVar* step); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetArTol(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TQpLinSolverBase*GetLinearSystem(); Double_tGetMuTol(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtua",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:8633,Availability,robust,robustness,8633,"axit] history of values of mu obtained on all iterations to date; Double_tfMutoltermination parameters; Double_tfPhimerit function, defined as the sum of the complementarity gap; Double_t*fPhi_history[fMaxit] history of values of phi obtained on all iterations to date; Double_t*fPhi_min_history[fMaxit] the i-th entry of this array contains the minimum value of phi; Double_t*fRnorm_history[fMaxit] history of values of residual norm obtained on all iterations to date; TQpLinSolverBase*fSys. Class Charts. Inheritance Chart:. TObject. ←; TQpSolverBase. ←. TGondzioSolver. TMehrotraSolver. Function documentation; TQpSolverBase(); Default constructor. TQpSolverBase(const TQpSolverBase& another); Copy constructor. ~TQpSolverBase(); Deconstructor. void Start(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Implements a default starting-point heuristic. While interior-point theory; places fairly loose restrictions on the choice of starting point, the choice; of heuristic can significantly affect the robustness and efficiency of the; algorithm. void DefStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Default starting point. void SteveStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Starting point algoritm according to Stephen Wright. void DumbStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Alternative starting point heuristic: sets the ""complementary"" variables to a large; positive value (based on the norm of the problem data) and the remaining variables; to zero . Double_t FinalStepLength(TQpVar* iterate, TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, I",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:376,Energy Efficiency,monitor,monitoring,376,". TQpSolverBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » QUADP; » TQpSolverBase. class TQpSolverBase: public TObject. TSolverBase. The Solver class contains methods for monitoring and checking the; convergence status of the algorithm, methods to determine the step; length along a given direction, methods to define the starting point,; and the solve method that implements the interior-point algorithm. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TQpSolverBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; Double_tDataNorm(); virtual voidDefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); virtual voidDefStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual Int_tDefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); virtual Int_tDoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:9610,Energy Efficiency,Monitor,Monitor,9610,"arting point, the choice; of heuristic can significantly affect the robustness and efficiency of the; algorithm. void DefStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Default starting point. void SteveStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Starting point algoritm according to Stephen Wright. void DumbStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Alternative starting point heuristic: sets the ""complementary"" variables to a large; positive value (based on the norm of the problem data) and the remaining variables; to zero . Double_t FinalStepLength(TQpVar* iterate, TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); Monitor progress / convergence aat each interior-point iteration. Int_t DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Tests for termination. Unless the user supplies a specific termination; routine, this method calls another method defaultStatus, which returns; a code indicating the current convergence status. Int_t DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Default status method. TQpSolverBase & operator=(const TQpSolverBase& source); Assignment operator. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resids); alternative starting point heuristic: sets the; ""complementary"" variables to a large positive value; (based on the norm of the problem data) and the; remaining variables to zero. void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:10593,Energy Efficiency,monitor,monitor,10593," TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); Monitor progress / convergence aat each interior-point iteration. Int_t DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Tests for termination. Unless the user supplies a specific termination; routine, this method calls another method defaultStatus, which returns; a code indicating the current convergence status. Int_t DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Default status method. TQpSolverBase & operator=(const TQpSolverBase& source); Assignment operator. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resids); alternative starting point heuristic: sets the; ""complementary"" variables to a large positive value; (based on the norm of the problem data) and the; remaining variables to zero. void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); perform monitor operation at each interior-point iteration. TQpLinSolverBase * GetLinearSystem(); default method for checking status. May be replaced; by a user-defined method. { return fSys; }. void SetMuTol(Double_t m); { fMutol = m; }. Double_t GetMuTol(); { return fMutol; }. void SetArTol(Double_t ar); { fArtol = ar; }. Double_t GetArTol(); { return fArtol; }. Double_t DataNorm(); { return fDnorm; }. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:9853,Integrability,rout,routine,9853,"b, TQpResidual* resid, TQpVar* step); Starting point algoritm according to Stephen Wright. void DumbStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Alternative starting point heuristic: sets the ""complementary"" variables to a large; positive value (based on the norm of the problem data) and the remaining variables; to zero . Double_t FinalStepLength(TQpVar* iterate, TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); Monitor progress / convergence aat each interior-point iteration. Int_t DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Tests for termination. Unless the user supplies a specific termination; routine, this method calls another method defaultStatus, which returns; a code indicating the current convergence status. Int_t DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Default status method. TQpSolverBase & operator=(const TQpSolverBase& source); Assignment operator. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resids); alternative starting point heuristic: sets the; ""complementary"" variables to a large positive value; (based on the norm of the problem data) and the; remaining variables to zero. void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); perform monitor operation at each interior-point iteration. TQpLinSolverBase * GetLinearSystem(); default method for checking status. May be replaced; by a user-defined method. { return fSys; }. void SetMuTol(Double_t m); { fMutol = m; }. Double_t GetMuTol(); { return fMutol; }. void SetArTol(Double_t a",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:119,Modifiability,inherit,inheritance,119,". TQpSolverBase. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » QUADP; » TQpSolverBase. class TQpSolverBase: public TObject. TSolverBase. The Solver class contains methods for monitoring and checking the; convergence status of the algorithm, methods to determine the step; length along a given direction, methods to define the starting point,; and the solve method that implements the interior-point algorithm. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TQpSolverBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; Double_tDataNorm(); virtual voidDefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); virtual voidDefStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual Int_tDefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); virtual Int_tDoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:3625,Modifiability,Inherit,InheritsFrom,3625,"bject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tFinalStepLength(TQpVar* iterate, TQpVar* step); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetArTol(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TQpLinSolverBase*GetLinearSystem(); Double_tGetMuTol(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:3691,Modifiability,Inherit,InheritsFrom,3691,"TObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tFinalStepLength(TQpVar* iterate, TQpVar* step); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetArTol(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TQpLinSolverBase*GetLinearSystem(); Double_tGetMuTol(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpSolverBase&operator=(const TQpSolverBase& source",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:8088,Modifiability,Inherit,Inheritance,8088,"ect::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_tfArtol; Double_tfDnormnorm of problem data; Double_tfGamma_a; Double_tfGamma_fparameters associated with the step length heuristic; Int_tfMaxitmaximum number of iterations allowed; Double_t*fMu_history[fMaxit] history of values of mu obtained on all iterations to date; Double_tfMutoltermination parameters; Double_tfPhimerit function, defined as the sum of the complementarity gap; Double_t*fPhi_history[fMaxit] history of values of phi obtained on all iterations to date; Double_t*fPhi_min_history[fMaxit] the i-th entry of this array contains the minimum value of phi; Double_t*fRnorm_history[fMaxit] history of values of residual norm obtained on all iterations to date; TQpLinSolverBase*fSys. Class Charts. Inheritance Chart:. TObject. ←; TQpSolverBase. ←. TGondzioSolver. TMehrotraSolver. Function documentation; TQpSolverBase(); Default constructor. TQpSolverBase(const TQpSolverBase& another); Copy constructor. ~TQpSolverBase(); Deconstructor. void Start(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Implements a default starting-point heuristic. While interior-point theory; places fairly loose restrictions on the choice of starting point, the choice; of heuristic can significantly affect the robustness and efficiency of the; algorithm. void DefStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Default starting point. void SteveStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Starting point algoritm according to Stephen Wright. void DumbStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Altern",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:9154,Modifiability,variab,variables,9154,"SolverBase. ←. TGondzioSolver. TMehrotraSolver. Function documentation; TQpSolverBase(); Default constructor. TQpSolverBase(const TQpSolverBase& another); Copy constructor. ~TQpSolverBase(); Deconstructor. void Start(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Implements a default starting-point heuristic. While interior-point theory; places fairly loose restrictions on the choice of starting point, the choice; of heuristic can significantly affect the robustness and efficiency of the; algorithm. void DefStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Default starting point. void SteveStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Starting point algoritm according to Stephen Wright. void DumbStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Alternative starting point heuristic: sets the ""complementary"" variables to a large; positive value (based on the norm of the problem data) and the remaining variables; to zero . Double_t FinalStepLength(TQpVar* iterate, TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); Monitor progress / convergence aat each interior-point iteration. Int_t DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Tests for termination. Unless the user supplies a specific termination; routine, this method calls another method defaultStatus, which returns; a code indicating the current convergence status. Int_t DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Default status method. TQpSolverBase & oper",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:9249,Modifiability,variab,variables,9249,"SolverBase. ←. TGondzioSolver. TMehrotraSolver. Function documentation; TQpSolverBase(); Default constructor. TQpSolverBase(const TQpSolverBase& another); Copy constructor. ~TQpSolverBase(); Deconstructor. void Start(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Implements a default starting-point heuristic. While interior-point theory; places fairly loose restrictions on the choice of starting point, the choice; of heuristic can significantly affect the robustness and efficiency of the; algorithm. void DefStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Default starting point. void SteveStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Starting point algoritm according to Stephen Wright. void DumbStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Alternative starting point heuristic: sets the ""complementary"" variables to a large; positive value (based on the norm of the problem data) and the remaining variables; to zero . Double_t FinalStepLength(TQpVar* iterate, TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); Monitor progress / convergence aat each interior-point iteration. Int_t DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Tests for termination. Unless the user supplies a specific termination; routine, this method calls another method defaultStatus, which returns; a code indicating the current convergence status. Int_t DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Default status method. TQpSolverBase & oper",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:9445,Modifiability,variab,variables,9445,"on, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Implements a default starting-point heuristic. While interior-point theory; places fairly loose restrictions on the choice of starting point, the choice; of heuristic can significantly affect the robustness and efficiency of the; algorithm. void DefStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Default starting point. void SteveStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Starting point algoritm according to Stephen Wright. void DumbStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Alternative starting point heuristic: sets the ""complementary"" variables to a large; positive value (based on the norm of the problem data) and the remaining variables; to zero . Double_t FinalStepLength(TQpVar* iterate, TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); Monitor progress / convergence aat each interior-point iteration. Int_t DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Tests for termination. Unless the user supplies a specific termination; routine, this method calls another method defaultStatus, which returns; a code indicating the current convergence status. Int_t DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Default status method. TQpSolverBase & operator=(const TQpSolverBase& source); Assignment operator. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resids); alternative starting point heuristic: sets the; ""complementary"" variables to a large positive value; (based on ",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:10315,Modifiability,variab,variables,10315,"terate, TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); Monitor progress / convergence aat each interior-point iteration. Int_t DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Tests for termination. Unless the user supplies a specific termination; routine, this method calls another method defaultStatus, which returns; a code indicating the current convergence status. Int_t DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Default status method. TQpSolverBase & operator=(const TQpSolverBase& source); Assignment operator. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resids); alternative starting point heuristic: sets the; ""complementary"" variables to a large positive value; (based on the norm of the problem data) and the; remaining variables to zero. void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); perform monitor operation at each interior-point iteration. TQpLinSolverBase * GetLinearSystem(); default method for checking status. May be replaced; by a user-defined method. { return fSys; }. void SetMuTol(Double_t m); { fMutol = m; }. Double_t GetMuTol(); { return fMutol; }. void SetArTol(Double_t ar); { fArtol = ar; }. Double_t GetArTol(); { return fArtol; }. Double_t DataNorm(); { return fDnorm; }. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT sup",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:10411,Modifiability,variab,variables,10411,"terate, TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); Monitor progress / convergence aat each interior-point iteration. Int_t DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Tests for termination. Unless the user supplies a specific termination; routine, this method calls another method defaultStatus, which returns; a code indicating the current convergence status. Int_t DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Default status method. TQpSolverBase & operator=(const TQpSolverBase& source); Assignment operator. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resids); alternative starting point heuristic: sets the; ""complementary"" variables to a large positive value; (based on the norm of the problem data) and the; remaining variables to zero. void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); perform monitor operation at each interior-point iteration. TQpLinSolverBase * GetLinearSystem(); default method for checking status. May be replaced; by a user-defined method. { return fSys; }. void SetMuTol(Double_t m); { fMutol = m; }. Double_t GetMuTol(); { return fMutol; }. void SetArTol(Double_t ar); { fArtol = ar; }. Double_t GetArTol(); { return fArtol; }. Double_t DataNorm(); { return fDnorm; }. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT sup",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:10585,Performance,perform,perform,10585," TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); Monitor progress / convergence aat each interior-point iteration. Int_t DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Tests for termination. Unless the user supplies a specific termination; routine, this method calls another method defaultStatus, which returns; a code indicating the current convergence status. Int_t DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Default status method. TQpSolverBase & operator=(const TQpSolverBase& source); Assignment operator. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resids); alternative starting point heuristic: sets the; ""complementary"" variables to a large positive value; (based on the norm of the problem data) and the; remaining variables to zero. void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); perform monitor operation at each interior-point iteration. TQpLinSolverBase * GetLinearSystem(); default method for checking status. May be replaced; by a user-defined method. { return fSys; }. void SetMuTol(Double_t m); { fMutol = m; }. Double_t GetMuTol(); { return fMutol; }. void SetArTol(Double_t ar); { fArtol = ar; }. Double_t GetArTol(); { return fArtol; }. Double_t DataNorm(); { return fDnorm; }. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:3515,Security,Hash,Hash,3515,"_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tFinalStepLength(TQpVar* iterate, TQpVar* step); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetArTol(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TQpLinSolverBase*GetLinearSystem(); Double_tGetMuTol(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:6011,Testability,Test,TestBit,6011,"r delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpSolverBase&operator=(const TQpSolverBase& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetArTol(Double_t ar); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMuTol(Double_t m); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tSolve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resids); virtual voidStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual voidSteveStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpSolverBase(); TQpSolverBase(const TQpSolverBase& another); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:6050,Testability,Test,TestBits,6050,"r delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQpSolverBase&operator=(const TQpSolverBase& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetArTol(Double_t ar); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMuTol(Double_t m); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tSolve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resids); virtual voidStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual voidSteveStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpSolverBase(); TQpSolverBase(const TQpSolverBase& another); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:9781,Testability,Test,Tests,9781,"ataBase* prob, TQpResidual* resid, TQpVar* step); Default starting point. void SteveStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Starting point algoritm according to Stephen Wright. void DumbStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); Alternative starting point heuristic: sets the ""complementary"" variables to a large; positive value (based on the norm of the problem data) and the remaining variables; to zero . Double_t FinalStepLength(TQpVar* iterate, TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); Monitor progress / convergence aat each interior-point iteration. Int_t DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Tests for termination. Unless the user supplies a specific termination; routine, this method calls another method defaultStatus, which returns; a code indicating the current convergence status. Int_t DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Default status method. TQpSolverBase & operator=(const TQpSolverBase& source); Assignment operator. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resids); alternative starting point heuristic: sets the; ""complementary"" variables to a large positive value; (based on the norm of the problem data) and the; remaining variables to zero. void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); perform monitor operation at each interior-point iteration. TQpLinSolverBase * GetLinearSystem(); default method for checking status. May be replaced; by ",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpSolverBase.html:1047,Usability,Clear,Clear,1047," virtual~TQpSolverBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; Double_tDataNorm(); virtual voidDefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); virtual voidDefStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual Int_tDefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); virtual Int_tDoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual",MatchSource.WIKI,root/html604/TQpSolverBase.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html
https://root.cern/root/html604/TQpVar.html:1205,Availability,Error,Error,1205," virtual~TQpVar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tFindBlocking(TQpVar* step, Double_t& primalValue, Double_t& primalStep, Double_t& dualValue, Double_t& dualStep, Int_t& firstOrSecond); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Double_tGe",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:1334,Availability,error,error,1334," virtual~TQpVar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tFindBlocking(TQpVar* step, Double_t& primalValue, Double_t& primalStep, Double_t& dualValue, Double_t& dualStep, Int_t& firstOrSecond); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Double_tGe",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:1418,Availability,error,error,1418," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tFindBlocking(TQpVar* step, Double_t& primalValue, Double_t& primalStep, Double_t& dualValue, Double_t& dualStep, Int_t& firstOrSecond); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Double_tGetMu(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* meth",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:112,Modifiability,inherit,inheritance,112,". TQpVar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » QUADP; » TQpVar. class TQpVar: public TObject. Class containing the variables for the general QP formulation. Function Members (Methods); public:. virtual~TQpVar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tFindBlocking(TQpVar* step, Double_t& primalValue, Double_t& primalStep, Double_t& dualValue, Double_t& dualStep, Int_t& firstOrSecond); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Double_tGe",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:325,Modifiability,variab,variables,325,". TQpVar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » QUADP; » TQpVar. class TQpVar: public TObject. Class containing the variables for the general QP formulation. Function Members (Methods); public:. virtual~TQpVar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tFindBlocking(TQpVar* step, Double_t& primalValue, Double_t& primalStep, Double_t& dualValue, Double_t& dualStep, Int_t& firstOrSecond); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Double_tGe",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:2475,Modifiability,Inherit,InheritsFrom,2475,"t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tFindBlocking(TQpVar* step, Double_t& primalValue, Double_t& primalStep, Double_t& dualValue, Double_t& dualStep, Int_t& firstOrSecond); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Double_tGetMu(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; virtual voidInteriorPoint(Double_t alpha, Double_t beta); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsInteriorPoint(); Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Double_tMuStep(TQpVar* step, Double_t alpha); virtual voidNegate(); virtual Double_tNorm1(); virtual Double_tNormInf(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr);",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:2541,Modifiability,Inherit,InheritsFrom,2541,"nst char* msgfmt) const; virtual Double_tFindBlocking(TQpVar* step, Double_t& primalValue, Double_t& primalStep, Double_t& dualValue, Double_t& dualStep, Int_t& firstOrSecond); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Double_tGetMu(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; virtual voidInteriorPoint(Double_t alpha, Double_t beta); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsInteriorPoint(); Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Double_tMuStep(TQpVar* step, Double_t alpha); virtual voidNegate(); virtual Double_tNorm1(); virtual Double_tNormInf(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:6518,Modifiability,variab,variables,6518,"rning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; static Double_tFindBlocking(TVectorD& w, TVectorD& wstep, TVectorD& u, TVectorD& ustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, int& first_or_second); static Double_tFindBlockingSub(Int_t n, Double_t* w, Int_t incw, Double_t* wstep, Int_t incwstep, Double_t* u, Int_t incu, Double_t* ustep, Int_t incustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, Int_t& first_or_second); voidTObject::MakeZombie(); static Double_tStepBound(TVectorD& v, TVectorD& dir, Double_t maxStep). Data Members; public:. TVectorDfGamma; TVectorDfLambda; Int_tfNComplementaryVariablesnumber of complementary primal-dual variables.; TVectorDfPhi; TVectorDfPi; TVectorDfS; TVectorDfT; TVectorDfU; TVectorDfV; TVectorDfW; TVectorDfX; TVectorDfY; TVectorDfZ; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie; static TQpVar::EVarBlockkgamma_block; static TQpVar::EVarBlockklambda_block; static TQpVar",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:7883,Modifiability,Inherit,Inheritance,7883,"; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie; static TQpVar::EVarBlockkgamma_block; static TQpVar::EVarBlockklambda_block; static TQpVar::EVarBlockkno_block; static TQpVar::EVarBlockkphi_block; static TQpVar::EVarBlockkpi_block; static TQpVar::EVarBlockkt_block; static TQpVar::EVarBlockku_block; static TQpVar::EVarBlockkv_block; static TQpVar::EVarBlockkw_block. protected:. TVectorDfCloIndex; TVectorDfCupIndex; Int_tfMclo; Int_tfMcup; Int_tfMy; Int_tfMz; Int_tfNx; Int_tfNxlo; Int_tfNxup; TVectorDfXloIndex; TVectorDfXupIndex. Class Charts. Inheritance Chart:. TObject. ←; TQpVar. Function documentation; TQpVar(); Default constructor. TQpVar(TVectorD& x_in, TVectorD& s_in, TVectorD& y_in, TVectorD& z_in, TVectorD& v_in, TVectorD& gamma_in, TVectorD& w_in, TVectorD& phi_in, TVectorD& t_in, TVectorD& lambda_in, TVectorD& u_in, TVectorD& pi_in, TVectorD& ixlow_in, TVectorD& ixupp_in, TVectorD& iclow_in, TVectorD& icupp_in); Constructor. TQpVar(Int_t nx, Int_t my, Int_t mz, TVectorD& ixlow, TVectorD& ixupp, TVectorD& iclow, TVectorD& icupp); Constructor. TQpVar(const TQpVar& another); Copy constructor. Double_t GetMu(); compute complementarity gap, obtained by taking the inner product of the; complementary vectors and dividing by the total number of components; computes mu = (t'lambda +u'pi + v'gamma + w'phi)/(mclow+mcupp+nxlow+nxupp). Double_t MuStep(TQpVar* step, Double_t alpha); Compute the complementarity gap resulting from a step of length ""alpha"" along; direction ""step"". void Saxpy(TQpVar* b, Double_t alpha); Perform a ""saxpy"" op",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:9105,Modifiability,variab,variables,9105,"VectorD& w_in, TVectorD& phi_in, TVectorD& t_in, TVectorD& lambda_in, TVectorD& u_in, TVectorD& pi_in, TVectorD& ixlow_in, TVectorD& ixupp_in, TVectorD& iclow_in, TVectorD& icupp_in); Constructor. TQpVar(Int_t nx, Int_t my, Int_t mz, TVectorD& ixlow, TVectorD& ixupp, TVectorD& iclow, TVectorD& icupp); Constructor. TQpVar(const TQpVar& another); Copy constructor. Double_t GetMu(); compute complementarity gap, obtained by taking the inner product of the; complementary vectors and dividing by the total number of components; computes mu = (t'lambda +u'pi + v'gamma + w'phi)/(mclow+mcupp+nxlow+nxupp). Double_t MuStep(TQpVar* step, Double_t alpha); Compute the complementarity gap resulting from a step of length ""alpha"" along; direction ""step"". void Saxpy(TQpVar* b, Double_t alpha); Perform a ""saxpy"" operation on all data vectors : x += alpha*y. void Negate(); Perform a ""negate"" operation on all data vectors : x = -x. Double_t StepBound(TQpVar* b); calculate the largest alpha in (0,1] such that the/ nonnegative variables stay; nonnegative in the given search direction. In the general QP problem formulation; this is the largest value of alpha such that; (t,u,v,w,lambda,pi,phi,gamma) + alpha * (b->t,b->u,b->v,b->w,b->lambda,b->pi,; b->phi,b->gamma) >= 0. Double_t StepBound(TVectorD& v, TVectorD& dir, Double_t maxStep); Find the maximum stepsize of v in direction dir; before violating the nonnegativity constraints. Bool_t IsInteriorPoint(); Is the current position an interior point ?. Double_t FindBlocking(TQpVar* step, Double_t& primalValue, Double_t& primalStep, Double_t& dualValue, Double_t& dualStep, Int_t& firstOrSecond); Performs the same function as StepBound, and supplies additional information about; which component of the nonnegative variables is responsible for restricting alpha.; In terms of the abstract formulation, the components have the following meanings :. primalValue : the value of the blocking component of the primal variables (u,t,v,w).; primalStep : the c",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:9849,Modifiability,variab,variables,9849,"ute the complementarity gap resulting from a step of length ""alpha"" along; direction ""step"". void Saxpy(TQpVar* b, Double_t alpha); Perform a ""saxpy"" operation on all data vectors : x += alpha*y. void Negate(); Perform a ""negate"" operation on all data vectors : x = -x. Double_t StepBound(TQpVar* b); calculate the largest alpha in (0,1] such that the/ nonnegative variables stay; nonnegative in the given search direction. In the general QP problem formulation; this is the largest value of alpha such that; (t,u,v,w,lambda,pi,phi,gamma) + alpha * (b->t,b->u,b->v,b->w,b->lambda,b->pi,; b->phi,b->gamma) >= 0. Double_t StepBound(TVectorD& v, TVectorD& dir, Double_t maxStep); Find the maximum stepsize of v in direction dir; before violating the nonnegativity constraints. Bool_t IsInteriorPoint(); Is the current position an interior point ?. Double_t FindBlocking(TQpVar* step, Double_t& primalValue, Double_t& primalStep, Double_t& dualValue, Double_t& dualStep, Int_t& firstOrSecond); Performs the same function as StepBound, and supplies additional information about; which component of the nonnegative variables is responsible for restricting alpha.; In terms of the abstract formulation, the components have the following meanings :. primalValue : the value of the blocking component of the primal variables (u,t,v,w).; primalStep : the corresponding value of the blocking component of the primal step; variables (b->u,b->t,b->v,b->w); dualValue : the value of the blocking component of the dual variables; (lambda,pi,phi,gamma).; dualStep : the corresponding value of the blocking component of the dual step; variables (b->lambda,b->pi,b->phi,b->gamma); firstOrSecond : 1 if the primal step is blocking,; 2 if the dual step is block,; 0 if no step is blocking. Double_t FindBlocking(TVectorD& w, TVectorD& wstep, TVectorD& u, TVectorD& ustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, int& first_or_second); See other FindBlocking function",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:10046,Modifiability,variab,variables,10046,"Bound(TQpVar* b); calculate the largest alpha in (0,1] such that the/ nonnegative variables stay; nonnegative in the given search direction. In the general QP problem formulation; this is the largest value of alpha such that; (t,u,v,w,lambda,pi,phi,gamma) + alpha * (b->t,b->u,b->v,b->w,b->lambda,b->pi,; b->phi,b->gamma) >= 0. Double_t StepBound(TVectorD& v, TVectorD& dir, Double_t maxStep); Find the maximum stepsize of v in direction dir; before violating the nonnegativity constraints. Bool_t IsInteriorPoint(); Is the current position an interior point ?. Double_t FindBlocking(TQpVar* step, Double_t& primalValue, Double_t& primalStep, Double_t& dualValue, Double_t& dualStep, Int_t& firstOrSecond); Performs the same function as StepBound, and supplies additional information about; which component of the nonnegative variables is responsible for restricting alpha.; In terms of the abstract formulation, the components have the following meanings :. primalValue : the value of the blocking component of the primal variables (u,t,v,w).; primalStep : the corresponding value of the blocking component of the primal step; variables (b->u,b->t,b->v,b->w); dualValue : the value of the blocking component of the dual variables; (lambda,pi,phi,gamma).; dualStep : the corresponding value of the blocking component of the dual step; variables (b->lambda,b->pi,b->phi,b->gamma); firstOrSecond : 1 if the primal step is blocking,; 2 if the dual step is block,; 0 if no step is blocking. Double_t FindBlocking(TVectorD& w, TVectorD& wstep, TVectorD& u, TVectorD& ustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, int& first_or_second); See other FindBlocking function. Double_t FindBlockingSub(Int_t n, Double_t* w, Int_t incw, Double_t* wstep, Int_t incwstep, Double_t* u, Int_t incu, Double_t* ustep, Int_t incustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, Int_t& first_or_second); See FindBlock",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:10151,Modifiability,variab,variables,10151,"general QP problem formulation; this is the largest value of alpha such that; (t,u,v,w,lambda,pi,phi,gamma) + alpha * (b->t,b->u,b->v,b->w,b->lambda,b->pi,; b->phi,b->gamma) >= 0. Double_t StepBound(TVectorD& v, TVectorD& dir, Double_t maxStep); Find the maximum stepsize of v in direction dir; before violating the nonnegativity constraints. Bool_t IsInteriorPoint(); Is the current position an interior point ?. Double_t FindBlocking(TQpVar* step, Double_t& primalValue, Double_t& primalStep, Double_t& dualValue, Double_t& dualStep, Int_t& firstOrSecond); Performs the same function as StepBound, and supplies additional information about; which component of the nonnegative variables is responsible for restricting alpha.; In terms of the abstract formulation, the components have the following meanings :. primalValue : the value of the blocking component of the primal variables (u,t,v,w).; primalStep : the corresponding value of the blocking component of the primal step; variables (b->u,b->t,b->v,b->w); dualValue : the value of the blocking component of the dual variables; (lambda,pi,phi,gamma).; dualStep : the corresponding value of the blocking component of the dual step; variables (b->lambda,b->pi,b->phi,b->gamma); firstOrSecond : 1 if the primal step is blocking,; 2 if the dual step is block,; 0 if no step is blocking. Double_t FindBlocking(TVectorD& w, TVectorD& wstep, TVectorD& u, TVectorD& ustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, int& first_or_second); See other FindBlocking function. Double_t FindBlockingSub(Int_t n, Double_t* w, Int_t incw, Double_t* wstep, Int_t incwstep, Double_t* u, Int_t incu, Double_t* ustep, Int_t incustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, Int_t& first_or_second); See FindBlocking function. void InteriorPoint(Double_t alpha, Double_t beta); Sets components of (u,t,v,w) to alpha and of (lambda,pi,phi,gamma) to beta. Double_",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:10244,Modifiability,variab,variables,10244,"general QP problem formulation; this is the largest value of alpha such that; (t,u,v,w,lambda,pi,phi,gamma) + alpha * (b->t,b->u,b->v,b->w,b->lambda,b->pi,; b->phi,b->gamma) >= 0. Double_t StepBound(TVectorD& v, TVectorD& dir, Double_t maxStep); Find the maximum stepsize of v in direction dir; before violating the nonnegativity constraints. Bool_t IsInteriorPoint(); Is the current position an interior point ?. Double_t FindBlocking(TQpVar* step, Double_t& primalValue, Double_t& primalStep, Double_t& dualValue, Double_t& dualStep, Int_t& firstOrSecond); Performs the same function as StepBound, and supplies additional information about; which component of the nonnegative variables is responsible for restricting alpha.; In terms of the abstract formulation, the components have the following meanings :. primalValue : the value of the blocking component of the primal variables (u,t,v,w).; primalStep : the corresponding value of the blocking component of the primal step; variables (b->u,b->t,b->v,b->w); dualValue : the value of the blocking component of the dual variables; (lambda,pi,phi,gamma).; dualStep : the corresponding value of the blocking component of the dual step; variables (b->lambda,b->pi,b->phi,b->gamma); firstOrSecond : 1 if the primal step is blocking,; 2 if the dual step is block,; 0 if no step is blocking. Double_t FindBlocking(TVectorD& w, TVectorD& wstep, TVectorD& u, TVectorD& ustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, int& first_or_second); See other FindBlocking function. Double_t FindBlockingSub(Int_t n, Double_t* w, Int_t incw, Double_t* wstep, Int_t incwstep, Double_t* u, Int_t incu, Double_t* ustep, Int_t incustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, Int_t& first_or_second); See FindBlocking function. void InteriorPoint(Double_t alpha, Double_t beta); Sets components of (u,t,v,w) to alpha and of (lambda,pi,phi,gamma) to beta. Double_",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:10358,Modifiability,variab,variables,10358,"dir, Double_t maxStep); Find the maximum stepsize of v in direction dir; before violating the nonnegativity constraints. Bool_t IsInteriorPoint(); Is the current position an interior point ?. Double_t FindBlocking(TQpVar* step, Double_t& primalValue, Double_t& primalStep, Double_t& dualValue, Double_t& dualStep, Int_t& firstOrSecond); Performs the same function as StepBound, and supplies additional information about; which component of the nonnegative variables is responsible for restricting alpha.; In terms of the abstract formulation, the components have the following meanings :. primalValue : the value of the blocking component of the primal variables (u,t,v,w).; primalStep : the corresponding value of the blocking component of the primal step; variables (b->u,b->t,b->v,b->w); dualValue : the value of the blocking component of the dual variables; (lambda,pi,phi,gamma).; dualStep : the corresponding value of the blocking component of the dual step; variables (b->lambda,b->pi,b->phi,b->gamma); firstOrSecond : 1 if the primal step is blocking,; 2 if the dual step is block,; 0 if no step is blocking. Double_t FindBlocking(TVectorD& w, TVectorD& wstep, TVectorD& u, TVectorD& ustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, int& first_or_second); See other FindBlocking function. Double_t FindBlockingSub(Int_t n, Double_t* w, Int_t incw, Double_t* wstep, Int_t incwstep, Double_t* u, Int_t incu, Double_t* ustep, Int_t incustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, Int_t& first_or_second); See FindBlocking function. void InteriorPoint(Double_t alpha, Double_t beta); Sets components of (u,t,v,w) to alpha and of (lambda,pi,phi,gamma) to beta. Double_t Violation(); The amount by which the current variables violate the non-negativity constraints. void ShiftBoundVariables(Double_t alpha, Double_t beta); Add alpha to components of (u,t,v,w) and beta to components of (lam",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:11219,Modifiability,variab,variables,11219,"he corresponding value of the blocking component of the primal step; variables (b->u,b->t,b->v,b->w); dualValue : the value of the blocking component of the dual variables; (lambda,pi,phi,gamma).; dualStep : the corresponding value of the blocking component of the dual step; variables (b->lambda,b->pi,b->phi,b->gamma); firstOrSecond : 1 if the primal step is blocking,; 2 if the dual step is block,; 0 if no step is blocking. Double_t FindBlocking(TVectorD& w, TVectorD& wstep, TVectorD& u, TVectorD& ustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, int& first_or_second); See other FindBlocking function. Double_t FindBlockingSub(Int_t n, Double_t* w, Int_t incw, Double_t* wstep, Int_t incwstep, Double_t* u, Int_t incu, Double_t* ustep, Int_t incustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, Int_t& first_or_second); See FindBlocking function. void InteriorPoint(Double_t alpha, Double_t beta); Sets components of (u,t,v,w) to alpha and of (lambda,pi,phi,gamma) to beta. Double_t Violation(); The amount by which the current variables violate the non-negativity constraints. void ShiftBoundVariables(Double_t alpha, Double_t beta); Add alpha to components of (u,t,v,w) and beta to components of (lambda,pi,phi,gamma). void Print(Option_t* option = """") const; Print class members. Double_t Norm1(); Return the sum of the vector-norm1's. Double_t NormInf(); Return the sum of the vector-normInf's. Bool_t ValidNonZeroPattern(); Check that the variables conform to the non-zero indices. TQpVar & operator=(const TQpVar& source); Assignment operator. virtual ~TQpVar(); {}. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:11635,Modifiability,variab,variables,11635,"he corresponding value of the blocking component of the primal step; variables (b->u,b->t,b->v,b->w); dualValue : the value of the blocking component of the dual variables; (lambda,pi,phi,gamma).; dualStep : the corresponding value of the blocking component of the dual step; variables (b->lambda,b->pi,b->phi,b->gamma); firstOrSecond : 1 if the primal step is blocking,; 2 if the dual step is block,; 0 if no step is blocking. Double_t FindBlocking(TVectorD& w, TVectorD& wstep, TVectorD& u, TVectorD& ustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, int& first_or_second); See other FindBlocking function. Double_t FindBlockingSub(Int_t n, Double_t* w, Int_t incw, Double_t* wstep, Int_t incwstep, Double_t* u, Int_t incu, Double_t* ustep, Int_t incustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, Int_t& first_or_second); See FindBlocking function. void InteriorPoint(Double_t alpha, Double_t beta); Sets components of (u,t,v,w) to alpha and of (lambda,pi,phi,gamma) to beta. Double_t Violation(); The amount by which the current variables violate the non-negativity constraints. void ShiftBoundVariables(Double_t alpha, Double_t beta); Add alpha to components of (u,t,v,w) and beta to components of (lambda,pi,phi,gamma). void Print(Option_t* option = """") const; Print class members. Double_t Norm1(); Return the sum of the vector-norm1's. Double_t NormInf(); Return the sum of the vector-normInf's. Bool_t ValidNonZeroPattern(); Check that the variables conform to the non-zero indices. TQpVar & operator=(const TQpVar& source); Assignment operator. virtual ~TQpVar(); {}. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:8872,Performance,Perform,Perform,8872,"Inheritance Chart:. TObject. ←; TQpVar. Function documentation; TQpVar(); Default constructor. TQpVar(TVectorD& x_in, TVectorD& s_in, TVectorD& y_in, TVectorD& z_in, TVectorD& v_in, TVectorD& gamma_in, TVectorD& w_in, TVectorD& phi_in, TVectorD& t_in, TVectorD& lambda_in, TVectorD& u_in, TVectorD& pi_in, TVectorD& ixlow_in, TVectorD& ixupp_in, TVectorD& iclow_in, TVectorD& icupp_in); Constructor. TQpVar(Int_t nx, Int_t my, Int_t mz, TVectorD& ixlow, TVectorD& ixupp, TVectorD& iclow, TVectorD& icupp); Constructor. TQpVar(const TQpVar& another); Copy constructor. Double_t GetMu(); compute complementarity gap, obtained by taking the inner product of the; complementary vectors and dividing by the total number of components; computes mu = (t'lambda +u'pi + v'gamma + w'phi)/(mclow+mcupp+nxlow+nxupp). Double_t MuStep(TQpVar* step, Double_t alpha); Compute the complementarity gap resulting from a step of length ""alpha"" along; direction ""step"". void Saxpy(TQpVar* b, Double_t alpha); Perform a ""saxpy"" operation on all data vectors : x += alpha*y. void Negate(); Perform a ""negate"" operation on all data vectors : x = -x. Double_t StepBound(TQpVar* b); calculate the largest alpha in (0,1] such that the/ nonnegative variables stay; nonnegative in the given search direction. In the general QP problem formulation; this is the largest value of alpha such that; (t,u,v,w,lambda,pi,phi,gamma) + alpha * (b->t,b->u,b->v,b->w,b->lambda,b->pi,; b->phi,b->gamma) >= 0. Double_t StepBound(TVectorD& v, TVectorD& dir, Double_t maxStep); Find the maximum stepsize of v in direction dir; before violating the nonnegativity constraints. Bool_t IsInteriorPoint(); Is the current position an interior point ?. Double_t FindBlocking(TQpVar* step, Double_t& primalValue, Double_t& primalStep, Double_t& dualValue, Double_t& dualStep, Int_t& firstOrSecond); Performs the same function as StepBound, and supplies additional information about; which component of the nonnegative variables is responsible for restri",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:8951,Performance,Perform,Perform,8951,"ctor. TQpVar(TVectorD& x_in, TVectorD& s_in, TVectorD& y_in, TVectorD& z_in, TVectorD& v_in, TVectorD& gamma_in, TVectorD& w_in, TVectorD& phi_in, TVectorD& t_in, TVectorD& lambda_in, TVectorD& u_in, TVectorD& pi_in, TVectorD& ixlow_in, TVectorD& ixupp_in, TVectorD& iclow_in, TVectorD& icupp_in); Constructor. TQpVar(Int_t nx, Int_t my, Int_t mz, TVectorD& ixlow, TVectorD& ixupp, TVectorD& iclow, TVectorD& icupp); Constructor. TQpVar(const TQpVar& another); Copy constructor. Double_t GetMu(); compute complementarity gap, obtained by taking the inner product of the; complementary vectors and dividing by the total number of components; computes mu = (t'lambda +u'pi + v'gamma + w'phi)/(mclow+mcupp+nxlow+nxupp). Double_t MuStep(TQpVar* step, Double_t alpha); Compute the complementarity gap resulting from a step of length ""alpha"" along; direction ""step"". void Saxpy(TQpVar* b, Double_t alpha); Perform a ""saxpy"" operation on all data vectors : x += alpha*y. void Negate(); Perform a ""negate"" operation on all data vectors : x = -x. Double_t StepBound(TQpVar* b); calculate the largest alpha in (0,1] such that the/ nonnegative variables stay; nonnegative in the given search direction. In the general QP problem formulation; this is the largest value of alpha such that; (t,u,v,w,lambda,pi,phi,gamma) + alpha * (b->t,b->u,b->v,b->w,b->lambda,b->pi,; b->phi,b->gamma) >= 0. Double_t StepBound(TVectorD& v, TVectorD& dir, Double_t maxStep); Find the maximum stepsize of v in direction dir; before violating the nonnegativity constraints. Bool_t IsInteriorPoint(); Is the current position an interior point ?. Double_t FindBlocking(TQpVar* step, Double_t& primalValue, Double_t& primalStep, Double_t& dualValue, Double_t& dualStep, Int_t& firstOrSecond); Performs the same function as StepBound, and supplies additional information about; which component of the nonnegative variables is responsible for restricting alpha.; In terms of the abstract formulation, the components have the following me",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:9730,Performance,Perform,Performs,9730,"ute the complementarity gap resulting from a step of length ""alpha"" along; direction ""step"". void Saxpy(TQpVar* b, Double_t alpha); Perform a ""saxpy"" operation on all data vectors : x += alpha*y. void Negate(); Perform a ""negate"" operation on all data vectors : x = -x. Double_t StepBound(TQpVar* b); calculate the largest alpha in (0,1] such that the/ nonnegative variables stay; nonnegative in the given search direction. In the general QP problem formulation; this is the largest value of alpha such that; (t,u,v,w,lambda,pi,phi,gamma) + alpha * (b->t,b->u,b->v,b->w,b->lambda,b->pi,; b->phi,b->gamma) >= 0. Double_t StepBound(TVectorD& v, TVectorD& dir, Double_t maxStep); Find the maximum stepsize of v in direction dir; before violating the nonnegativity constraints. Bool_t IsInteriorPoint(); Is the current position an interior point ?. Double_t FindBlocking(TQpVar* step, Double_t& primalValue, Double_t& primalStep, Double_t& dualValue, Double_t& dualStep, Int_t& firstOrSecond); Performs the same function as StepBound, and supplies additional information about; which component of the nonnegative variables is responsible for restricting alpha.; In terms of the abstract formulation, the components have the following meanings :. primalValue : the value of the blocking component of the primal variables (u,t,v,w).; primalStep : the corresponding value of the blocking component of the primal step; variables (b->u,b->t,b->v,b->w); dualValue : the value of the blocking component of the dual variables; (lambda,pi,phi,gamma).; dualStep : the corresponding value of the blocking component of the dual step; variables (b->lambda,b->pi,b->phi,b->gamma); firstOrSecond : 1 if the primal step is blocking,; 2 if the dual step is block,; 0 if no step is blocking. Double_t FindBlocking(TVectorD& w, TVectorD& wstep, TVectorD& u, TVectorD& ustep, Double_t maxStep, Double_t& w_elt, Double_t& wstep_elt, Double_t& u_elt, Double_t& ustep_elt, int& first_or_second); See other FindBlocking function",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:2365,Security,Hash,Hash,2365,"Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tFindBlocking(TQpVar* step, Double_t& primalValue, Double_t& primalStep, Double_t& dualValue, Double_t& dualStep, Int_t& firstOrSecond); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Double_tGetMu(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; virtual voidInteriorPoint(Double_t alpha, Double_t beta); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsInteriorPoint(); Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Double_tMuStep(TQpVar* step, Double_t alpha); virtual voidNegate(); virtual Double_tNorm1(); virtual Double_tNormInf(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operato",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:4840,Testability,Test,TestBit,4840,"oid* vp); TQpVar&operator=(const TQpVar& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSaxpy(TQpVar* b, Double_t alpha); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShiftBoundVariables(Double_t alpha, Double_t beta); virtual voidShowMembers(TMemberInspector& insp) const; virtual Double_tStepBound(TQpVar* b); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpVar(); TQpVar(const TQpVar& another); TQpVar(Int_t nx, Int_t my, Int_t mz, TVectorD& ixlow, TVectorD& ixupp, TVectorD& iclow, TVectorD& icupp); TQpVar(TVectorD& x_in, TVectorD& s_in, TVectorD& y_in, TVectorD& z_in, TVectorD& v_in, TVectorD& gamma_in, TVectorD& w_in, TVectorD& phi_in, TVectorD& t_in, TVectorD& lambda_in, TVectorD& u_in, TVectorD& pi_in, TVectorD& ixlow_in, TVectorD& ixupp_in, TVectorD& iclow_in, TVectorD& icupp_in); virtual voidTObject::UseCurrentStyle(); virtual Bool_tValidNonZeroPattern(); virtual Double_tViolation(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:4879,Testability,Test,TestBits,4879,"oid* vp); TQpVar&operator=(const TQpVar& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSaxpy(TQpVar* b, Double_t alpha); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShiftBoundVariables(Double_t alpha, Double_t beta); virtual voidShowMembers(TMemberInspector& insp) const; virtual Double_tStepBound(TQpVar* b); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQpVar(); TQpVar(const TQpVar& another); TQpVar(Int_t nx, Int_t my, Int_t mz, TVectorD& ixlow, TVectorD& ixupp, TVectorD& iclow, TVectorD& icupp); TQpVar(TVectorD& x_in, TVectorD& s_in, TVectorD& y_in, TVectorD& z_in, TVectorD& v_in, TVectorD& gamma_in, TVectorD& w_in, TVectorD& phi_in, TVectorD& t_in, TVectorD& lambda_in, TVectorD& u_in, TVectorD& pi_in, TVectorD& ixlow_in, TVectorD& ixupp_in, TVectorD& iclow_in, TVectorD& icupp_in); virtual voidTObject::UseCurrentStyle(); virtual Bool_tValidNonZeroPattern(); virtual Double_tViolation(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQpVar.html:665,Usability,Clear,Clear,665," virtual~TQpVar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tFindBlocking(TQpVar* step, Double_t& primalValue, Double_t& primalStep, Double_t& dualValue, Double_t& dualStep, Int_t& firstOrSecond); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Double_tGe",MatchSource.WIKI,root/html604/TQpVar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQpVar.html
https://root.cern/root/html604/TQRootApplication.html:3474,Deployability,install,installEventFilter,3474,"nst char* member); static boolQObject::disconnect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& member); static intQApplication::doubleClickInterval(); voidQObject::dumpObjectInfo(); voidQObject::dumpObjectTree(); QList<QByteArray>QObject::dynamicPropertyNames() const; virtual boolQObject::eventFilter(QObject*, QEvent*); static intQApplication::exec(); static voidQCoreApplication::exit(int retcode = 0); boolQCoreApplication::filterEvent(void* message, long* result); static voidQCoreApplication::flush(); static QWidget*QApplication::focusWidget(); static QFontQApplication::font(); static QFontQApplication::font(const QWidget*); static QFontQApplication::font(const char* className); static QFontMetricsQApplication::fontMetrics(); static QSizeQApplication::globalStrut(); static boolQCoreApplication::hasPendingEvents(); boolQObject::inherits(const char* classname) const; QInputContext*QApplication::inputContext() const; voidQObject::installEventFilter(QObject*); static voidQCoreApplication::installTranslator(QTranslator* messageFile); static QCoreApplication*QCoreApplication::instance(); static boolQApplication::isEffectEnabled(Qt::UIEffect); static boolQApplication::isLeftToRight(); static boolQApplication::isRightToLeft(); boolQApplication::isSessionRestored() const; boolQObject::isWidgetType() const; static Qt::LayoutDirectionQApplication::keyboardInputDirection(); static intQApplication::keyboardInputInterval(); static QLocaleQApplication::keyboardInputLocale(); static Qt::KeyboardModifiersQApplication::keyboardModifiers(); voidQObject::killTimer(int id); static Qt::LayoutDirectionQApplication::layoutDirection(); static QStringListQCoreApplication::libraryPaths(); virtual const QMetaObject*QApplication::metaObject() const; static Qt::MouseButtonsQApplication::mouseButtons(); voidQObject::moveToThread(QThread* thread); virtual boolQApplication::notify(QObject*, QEvent*); QStringQObject::objectName() const; static QString",MatchSource.WIKI,root/html604/TQRootApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootApplication.html
https://root.cern/root/html604/TQRootApplication.html:3533,Deployability,install,installTranslator,3533,"ject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& member); static intQApplication::doubleClickInterval(); voidQObject::dumpObjectInfo(); voidQObject::dumpObjectTree(); QList<QByteArray>QObject::dynamicPropertyNames() const; virtual boolQObject::eventFilter(QObject*, QEvent*); static intQApplication::exec(); static voidQCoreApplication::exit(int retcode = 0); boolQCoreApplication::filterEvent(void* message, long* result); static voidQCoreApplication::flush(); static QWidget*QApplication::focusWidget(); static QFontQApplication::font(); static QFontQApplication::font(const QWidget*); static QFontQApplication::font(const char* className); static QFontMetricsQApplication::fontMetrics(); static QSizeQApplication::globalStrut(); static boolQCoreApplication::hasPendingEvents(); boolQObject::inherits(const char* classname) const; QInputContext*QApplication::inputContext() const; voidQObject::installEventFilter(QObject*); static voidQCoreApplication::installTranslator(QTranslator* messageFile); static QCoreApplication*QCoreApplication::instance(); static boolQApplication::isEffectEnabled(Qt::UIEffect); static boolQApplication::isLeftToRight(); static boolQApplication::isRightToLeft(); boolQApplication::isSessionRestored() const; boolQObject::isWidgetType() const; static Qt::LayoutDirectionQApplication::keyboardInputDirection(); static intQApplication::keyboardInputInterval(); static QLocaleQApplication::keyboardInputLocale(); static Qt::KeyboardModifiersQApplication::keyboardModifiers(); voidQObject::killTimer(int id); static Qt::LayoutDirectionQApplication::layoutDirection(); static QStringListQCoreApplication::libraryPaths(); virtual const QMetaObject*QApplication::metaObject() const; static Qt::MouseButtonsQApplication::mouseButtons(); voidQObject::moveToThread(QThread* thread); virtual boolQApplication::notify(QObject*, QEvent*); QStringQObject::objectName() const; static QStringQCoreApplication::organizationDomain(); static QStringQCor",MatchSource.WIKI,root/html604/TQRootApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootApplication.html
https://root.cern/root/html604/TQRootApplication.html:2978,Integrability,message,message,2978,"& method, Qt::ConnectionType type = Qt::AutoConnection); static intQApplication::cursorFlashTime(); voidQObject::deleteLater(); static QDesktopWidget*QApplication::desktop(); static boolQApplication::desktopSettingsAware(); boolQObject::disconnect(const QObject* receiver, const char* member = 0); boolQObject::disconnect(const char* signal = 0, const QObject* receiver = 0, const char* member = 0); static boolQObject::disconnect(const QObject* sender, const char* signal, const QObject* receiver, const char* member); static boolQObject::disconnect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& member); static intQApplication::doubleClickInterval(); voidQObject::dumpObjectInfo(); voidQObject::dumpObjectTree(); QList<QByteArray>QObject::dynamicPropertyNames() const; virtual boolQObject::eventFilter(QObject*, QEvent*); static intQApplication::exec(); static voidQCoreApplication::exit(int retcode = 0); boolQCoreApplication::filterEvent(void* message, long* result); static voidQCoreApplication::flush(); static QWidget*QApplication::focusWidget(); static QFontQApplication::font(); static QFontQApplication::font(const QWidget*); static QFontQApplication::font(const char* className); static QFontMetricsQApplication::fontMetrics(); static QSizeQApplication::globalStrut(); static boolQCoreApplication::hasPendingEvents(); boolQObject::inherits(const char* classname) const; QInputContext*QApplication::inputContext() const; voidQObject::installEventFilter(QObject*); static voidQCoreApplication::installTranslator(QTranslator* messageFile); static QCoreApplication*QCoreApplication::instance(); static boolQApplication::isEffectEnabled(Qt::UIEffect); static boolQApplication::isLeftToRight(); static boolQApplication::isRightToLeft(); boolQApplication::isSessionRestored() const; boolQObject::isWidgetType() const; static Qt::LayoutDirectionQApplication::keyboardInputDirection(); static intQApplication::keyboardInputInterval(); static QLocaleQ",MatchSource.WIKI,root/html604/TQRootApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootApplication.html
https://root.cern/root/html604/TQRootApplication.html:3564,Integrability,message,messageFile,3564,"hod& signal, const QObject* receiver, const QMetaMethod& member); static intQApplication::doubleClickInterval(); voidQObject::dumpObjectInfo(); voidQObject::dumpObjectTree(); QList<QByteArray>QObject::dynamicPropertyNames() const; virtual boolQObject::eventFilter(QObject*, QEvent*); static intQApplication::exec(); static voidQCoreApplication::exit(int retcode = 0); boolQCoreApplication::filterEvent(void* message, long* result); static voidQCoreApplication::flush(); static QWidget*QApplication::focusWidget(); static QFontQApplication::font(); static QFontQApplication::font(const QWidget*); static QFontQApplication::font(const char* className); static QFontMetricsQApplication::fontMetrics(); static QSizeQApplication::globalStrut(); static boolQCoreApplication::hasPendingEvents(); boolQObject::inherits(const char* classname) const; QInputContext*QApplication::inputContext() const; voidQObject::installEventFilter(QObject*); static voidQCoreApplication::installTranslator(QTranslator* messageFile); static QCoreApplication*QCoreApplication::instance(); static boolQApplication::isEffectEnabled(Qt::UIEffect); static boolQApplication::isLeftToRight(); static boolQApplication::isRightToLeft(); boolQApplication::isSessionRestored() const; boolQObject::isWidgetType() const; static Qt::LayoutDirectionQApplication::keyboardInputDirection(); static intQApplication::keyboardInputInterval(); static QLocaleQApplication::keyboardInputLocale(); static Qt::KeyboardModifiersQApplication::keyboardModifiers(); voidQObject::killTimer(int id); static Qt::LayoutDirectionQApplication::layoutDirection(); static QStringListQCoreApplication::libraryPaths(); virtual const QMetaObject*QApplication::metaObject() const; static Qt::MouseButtonsQApplication::mouseButtons(); voidQObject::moveToThread(QThread* thread); virtual boolQApplication::notify(QObject*, QEvent*); QStringQObject::objectName() const; static QStringQCoreApplication::organizationDomain(); static QStringQCoreApplication::organizationNa",MatchSource.WIKI,root/html604/TQRootApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootApplication.html
https://root.cern/root/html604/TQRootApplication.html:5860,Integrability,message,messageFile,5860,"r, QEvent* event); static voidQCoreApplication::postEvent(QObject* receiver, QEvent* event, int priority); static voidQCoreApplication::processEvents(QEventLoop::ProcessEventsFlags flags = QEventLoop::AllEvents); static voidQCoreApplication::processEvents(QEventLoop::ProcessEventsFlags flags, int maxtime); QVariantQObject::property(const char* name) const; virtual intQApplication::qt_metacall(QMetaObject::Call, int, void**); virtual void*QApplication::qt_metacast(const char*); static Qt::KeyboardModifiersQApplication::queryKeyboardModifiers(); static voidQCoreApplication::quit(); static boolQApplication::quitOnLastWindowClosed(); static uintQObject::registerUserData(); voidQObject::removeEventFilter(QObject*); static voidQCoreApplication::removeLibraryPath(const QString&); static voidQCoreApplication::removePostedEvents(QObject* receiver); static voidQCoreApplication::removePostedEvents(QObject* receiver, int eventType); static voidQCoreApplication::removeTranslator(QTranslator* messageFile); static voidQApplication::restoreOverrideCursor(); virtual voidQApplication::saveState(QSessionManager& sm); static boolQCoreApplication::sendEvent(QObject* receiver, QEvent* event); static voidQCoreApplication::sendPostedEvents(); static voidQCoreApplication::sendPostedEvents(QObject* receiver, int event_type); QStringQApplication::sessionId() const; QStringQApplication::sessionKey() const; static voidQApplication::setActiveWindow(QWidget* act); static voidQCoreApplication::setApplicationName(const QString& application); static voidQCoreApplication::setApplicationVersion(const QString& version); static voidQCoreApplication::setAttribute(Qt::ApplicationAttribute attribute, bool on = true); voidQApplication::setAutoSipEnabled(const bool enabled); static voidQApplication::setColorSpec(int); static voidQApplication::setCursorFlashTime(int); static voidQApplication::setDesktopSettingsAware(bool); static voidQApplication::setDoubleClickInterval(int); static voidQApplication::setEffec",MatchSource.WIKI,root/html604/TQRootApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootApplication.html
https://root.cern/root/html604/TQRootApplication.html:123,Modifiability,inherit,inheritance,123,". TQRootApplication. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » QTGSI; » TQRootApplication. class TQRootApplication: public QApplication. Function Members (Methods); public:. static voidQApplication::aboutQt(); static QWidget*QApplication::activeModalWidget(); static QWidget*QApplication::activePopupWidget(); static QWidget*QApplication::activeWindow(); static voidQCoreApplication::addLibraryPath(const QString&); static voidQApplication::alert(QWidget* widget, int duration = 0); static QWidgetListQApplication::allWidgets(); static QStringQCoreApplication::applicationDirPath(); static QStringQCoreApplication::applicationFilePath(); static QStringQCoreApplication::applicationName(); static qint64QCoreApplication::applicationPid(); static QStringQCoreApplication::applicationVersion(); static intQCoreApplication::argc(); static QStringListQCoreApplication::arguments(); static char**QCoreApplication::argv(); boolQApplication::autoSipEnabled() const; static voidQApplication::beep(); boolQObject::blockSignals(bool b); static voidQApplication::changeOverrideCursor(const QCursor&); const QObjectList&QObject::children() const; static QClipboard*QApplication::clipboard(); static voidQApplication::closeAllWindows(); static boolQCoreApplication::closingDown(); static intQApplication::colorSpec(); virtual voidQApplication::commitData(QSessionManager& sm); boolQObject::connect(const QObject* sender, const char* signal, const char* member, Qt::ConnectionType type = Qt::AutoConnection) const; static boolQObject::connect(const QObject* sender, const char* signal, const QObject* receiver, const char* member, Qt::ConnectionType = Qt::AutoConnection); static boolQObject::connect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& method, Qt::Conne",MatchSource.WIKI,root/html604/TQRootApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootApplication.html
https://root.cern/root/html604/TQRootApplication.html:3372,Modifiability,inherit,inherits,3372,"= 0); static boolQObject::disconnect(const QObject* sender, const char* signal, const QObject* receiver, const char* member); static boolQObject::disconnect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& member); static intQApplication::doubleClickInterval(); voidQObject::dumpObjectInfo(); voidQObject::dumpObjectTree(); QList<QByteArray>QObject::dynamicPropertyNames() const; virtual boolQObject::eventFilter(QObject*, QEvent*); static intQApplication::exec(); static voidQCoreApplication::exit(int retcode = 0); boolQCoreApplication::filterEvent(void* message, long* result); static voidQCoreApplication::flush(); static QWidget*QApplication::focusWidget(); static QFontQApplication::font(); static QFontQApplication::font(const QWidget*); static QFontQApplication::font(const char* className); static QFontMetricsQApplication::fontMetrics(); static QSizeQApplication::globalStrut(); static boolQCoreApplication::hasPendingEvents(); boolQObject::inherits(const char* classname) const; QInputContext*QApplication::inputContext() const; voidQObject::installEventFilter(QObject*); static voidQCoreApplication::installTranslator(QTranslator* messageFile); static QCoreApplication*QCoreApplication::instance(); static boolQApplication::isEffectEnabled(Qt::UIEffect); static boolQApplication::isLeftToRight(); static boolQApplication::isRightToLeft(); boolQApplication::isSessionRestored() const; boolQObject::isWidgetType() const; static Qt::LayoutDirectionQApplication::keyboardInputDirection(); static intQApplication::keyboardInputInterval(); static QLocaleQApplication::keyboardInputLocale(); static Qt::KeyboardModifiersQApplication::keyboardModifiers(); voidQObject::killTimer(int id); static Qt::LayoutDirectionQApplication::layoutDirection(); static QStringListQCoreApplication::libraryPaths(); virtual const QMetaObject*QApplication::metaObject() const; static Qt::MouseButtonsQApplication::mouseButtons(); voidQObject::moveToThread(QThread* threa",MatchSource.WIKI,root/html604/TQRootApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootApplication.html
https://root.cern/root/html604/TQRootApplication.html:12185,Modifiability,Inherit,Inheritance,12185,"QApplication::focusChanged(QWidget* old, QWidget* now); voidQApplication::fontDatabaseChanged(); voidQApplication::lastWindowClosed(); intQObject::receivers(const char* signal) const; voidQApplication::saveStateRequest(QSessionManager& sessionManager); QObject*QObject::sender() const; intQObject::senderSignalIndex() const; virtual voidQObject::timerEvent(QTimerEvent*); voidQCoreApplication::unixSignal(int). Data Members; public:. static QCoreApplication::(anonymous)QCoreApplication::ApplicationFlags; static QCoreApplication::EncodingQCoreApplication::CodecForTr; static QApplication::ColorSpecQApplication::CustomColor; static QCoreApplication::EncodingQCoreApplication::DefaultCodec; static QApplication::TypeQApplication::GuiClient; static QApplication::TypeQApplication::GuiServer; static QApplication::ColorSpecQApplication::ManyColor; static QApplication::ColorSpecQApplication::NormalColor; static QApplication::TypeQApplication::Tty; static QCoreApplication::EncodingQCoreApplication::UnicodeUTF8; static Bool_tfgDebugdebug and warning flags; static Bool_tfgWarningdebug and warning flags; static const QMetaObjectstaticMetaObject; static const QMetaObjectQApplication::staticMetaObject; static const QMetaObjectQCoreApplication::staticMetaObject; static const QMetaObjectQObject::staticMetaObject. protected:. QScopedPointer<QObjectData>QObject::d_ptr; QTimer*fQTimerQt timer that poll the event loop of ROOT; TTimer*fRTimerRoot timer; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance Chart:. QApplication. ←; TQRootApplication. Function documentation. » Author: Denis Bertini, M. AL-Turany 01/11/2000 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/qtgsi:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQRootApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootApplication.html
https://root.cern/root/html604/TQRootApplication.html:8727,Testability,test,testAttribute,8727,"::setPalette(const QPalette&, const char* className = 0); voidQObject::setParent(QObject*); boolQObject::setProperty(const char* name, const QVariant& value); static voidQApplication::setQuitOnLastWindowClosed(bool quit); static voidQApplication::setStartDragDistance(int l); static voidQApplication::setStartDragTime(int ms); static voidQApplication::setStyle(QStyle*); static QStyle*QApplication::setStyle(const QString&); voidQApplication::setStyleSheet(const QString& sheet); voidQObject::setUserData(uint id, QObjectUserData* data); static voidQApplication::setWheelScrollLines(int); static voidQApplication::setWindowIcon(const QIcon& icon); boolQObject::signalsBlocked() const; static intQApplication::startDragDistance(); static intQApplication::startDragTime(); static boolQCoreApplication::startingUp(); intQObject::startTimer(int interval); static QStyle*QApplication::style(); QStringQApplication::styleSheet() const; static voidQApplication::syncX(); static boolQCoreApplication::testAttribute(Qt::ApplicationAttribute attribute); QThread*QObject::thread() const; static QWidget*QApplication::topLevelAt(const QPoint& p); static QWidget*QApplication::topLevelAt(int x, int y); static QWidgetListQApplication::topLevelWidgets(); static QStringQApplication::tr(const char* s, const char* c = 0); static QStringQApplication::tr(const char* s, const char* c, int n); static QStringQCoreApplication::translate(const char* context, const char* key, const char* disambiguation = 0, QCoreApplication::Encoding encoding = CodecForTr); static QStringQCoreApplication::translate(const char* context, const char* key, const char* disambiguation, QCoreApplication::Encoding encoding, int n); static QStringQApplication::trUtf8(const char* s, const char* c = 0); static QStringQApplication::trUtf8(const char* s, const char* c, int n); static QApplication::TypeQApplication::type(); QObjectUserData*QObject::userData(uint id) const; static voidQCoreApplication::watchUnixSignal(int signal, bool watch)",MatchSource.WIKI,root/html604/TQRootApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootApplication.html
https://root.cern/root/html604/TQRootCanvas.html:5434,Availability,mask,mask,5434," boolQWidget::isLeftToRight() const; boolQWidget::isMaximized() const; boolQWidget::isMinimized() const; boolQWidget::isModal() const; boolQWidget::isRightToLeft() const; boolQWidget::isTopLevel() const; boolQWidget::isVisible() const; boolQWidget::isVisibleTo(QWidget*) const; boolQObject::isWidgetType() const; boolQWidget::isWindow() const; boolQWidget::isWindowModified() const; static QWidget*QWidget::keyboardGrabber(); voidQObject::killTimer(int id); QLayout*QWidget::layout() const; Qt::LayoutDirectionQWidget::layoutDirection() const; QLocaleQWidget::locale() const; intQPaintDevice::logicalDpiX() const; intQPaintDevice::logicalDpiY() const; voidQWidget::lower(); QPointQWidget::mapFrom(QWidget*, const QPoint&) const; QPointQWidget::mapFromGlobal(const QPoint&) const; QPointQWidget::mapFromParent(const QPoint&) const; QPointQWidget::mapTo(QWidget*, const QPoint&) const; QPointQWidget::mapToGlobal(const QPoint&) const; QPointQWidget::mapToParent(const QPoint&) const; QRegionQWidget::mask() const; intQWidget::maximumHeight() const; QSizeQWidget::maximumSize() const; intQWidget::maximumWidth() const; virtual const QMetaObject*QWidget::metaObject() const; intQWidget::minimumHeight() const; QSizeQWidget::minimumSize() const; virtual QSizeQWidget::minimumSizeHint() const; intQWidget::minimumWidth() const; static QWidget*QWidget::mouseGrabber(); voidQWidget::move(const QPoint&); voidQWidget::move(int x, int y); voidQObject::moveToThread(QThread* thread); QWidget*QWidget::nativeParentWidget() const; QWidget*QWidget::nextInFocusChain() const; QRectQWidget::normalGeometry() const; intQPaintDevice::numColors() const; QStringQObject::objectName() const; voidQWidget::overrideWindowFlags(Qt::WindowFlags type); voidQWidget::overrideWindowState(Qt::WindowStates state); virtual QPaintEngine*QWidget::paintEngine() const; boolQPaintDevice::paintingActive() const; const QPalette&QWidget::palette() const; QObject*QObject::parent() const; QWidget*QWidget::parentWidget() const; intQPaintD",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootCanvas.html:4103,Deployability,install,installEventFilter,4103,"dQWidget::grabGesture(Qt::GestureType type, Qt::GestureFlags flags = Qt::GestureFlags()); voidQWidget::grabKeyboard(); voidQWidget::grabMouse(); voidQWidget::grabMouse(const QCursor&); intQWidget::grabShortcut(const QKeySequence& key, Qt::ShortcutContext context = Qt::WindowShortcut); QGraphicsEffect*QWidget::graphicsEffect() const; QGraphicsProxyWidget*QWidget::graphicsProxyWidget() const; Qt::HANDLEQWidget::handle() const; boolQWidget::hasFocus() const; boolQWidget::hasMouseTracking() const; intQWidget::height() const; virtual intQWidget::heightForWidth(int) const; intQPaintDevice::heightMM() const; voidQWidget::hide(); boolQObject::inherits(const char* classname) const; QInputContext*QWidget::inputContext(); Qt::InputMethodHintsQWidget::inputMethodHints() const; virtual QVariantQWidget::inputMethodQuery(Qt::InputMethodQuery) const; voidQWidget::insertAction(QAction* before, QAction* action); voidQWidget::insertActions(QAction* before, QList<QAction*> actions); voidQObject::installEventFilter(QObject*); WIdQWidget::internalWinId() const; boolQWidget::isActiveWindow() const; boolQWidget::isAncestorOf(const QWidget* child) const; boolQWidget::isEnabled() const; boolQWidget::isEnabledTo(QWidget*) const; boolQWidget::isEnabledToTLW() const; boolQWidget::isFullScreen() const; boolQWidget::isHidden() const; boolQWidget::isLeftToRight() const; boolQWidget::isMaximized() const; boolQWidget::isMinimized() const; boolQWidget::isModal() const; boolQWidget::isRightToLeft() const; boolQWidget::isTopLevel() const; boolQWidget::isVisible() const; boolQWidget::isVisibleTo(QWidget*) const; boolQObject::isWidgetType() const; boolQWidget::isWindow() const; boolQWidget::isWindowModified() const; static QWidget*QWidget::keyboardGrabber(); voidQObject::killTimer(int id); QLayout*QWidget::layout() const; Qt::LayoutDirectionQWidget::layoutDirection() const; QLocaleQWidget::locale() const; intQPaintDevice::logicalDpiX() const; intQPaintDevice::logicalDpiY() const; voidQWidget::lower(); QPo",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootCanvas.html:6847,Deployability,release,releaseKeyboard,6847,", int y); voidQObject::moveToThread(QThread* thread); QWidget*QWidget::nativeParentWidget() const; QWidget*QWidget::nextInFocusChain() const; QRectQWidget::normalGeometry() const; intQPaintDevice::numColors() const; QStringQObject::objectName() const; voidQWidget::overrideWindowFlags(Qt::WindowFlags type); voidQWidget::overrideWindowState(Qt::WindowStates state); virtual QPaintEngine*QWidget::paintEngine() const; boolQPaintDevice::paintingActive() const; const QPalette&QWidget::palette() const; QObject*QObject::parent() const; QWidget*QWidget::parentWidget() const; intQPaintDevice::physicalDpiX() const; intQPaintDevice::physicalDpiY() const; QPointQWidget::pos() const; QWidget*QWidget::previousInFocusChain() const; QVariantQObject::property(const char* name) const; virtual intQWidget::qt_metacall(QMetaObject::Call, int, void**); virtual void*QWidget::qt_metacast(const char*); voidQWidget::raise(); QRectQWidget::rect() const; static uintQObject::registerUserData(); voidQWidget::releaseKeyboard(); voidQWidget::releaseMouse(); voidQWidget::releaseShortcut(int id); voidQWidget::removeAction(QAction* action); voidQObject::removeEventFilter(QObject*); voidQWidget::render(QPaintDevice* target, const QPoint& targetOffset = QPoint(), const QRegion& sourceRegion = QRegion(), QWidget::RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren)); voidQWidget::render(QPainter* painter, const QPoint& targetOffset = QPoint(), const QRegion& sourceRegion = QRegion(), QWidget::RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren)); voidQWidget::repaint(); voidQWidget::repaint(const QRect&); voidQWidget::repaint(const QRegion&); voidQWidget::repaint(int x, int y, int w, int h); voidQWidget::resize(const QSize&); voidQWidget::resize(int w, int h); boolQWidget::restoreGeometry(const QByteArray& geometry); QByteArrayQWidget::saveGeometry() const; voidQWidget::scroll(int dx, int dy); voidQWidget::scroll(int dx, int dy, const QRect&); voidQWidget::setAc",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootCanvas.html:6879,Deployability,release,releaseMouse,6879,"hread(QThread* thread); QWidget*QWidget::nativeParentWidget() const; QWidget*QWidget::nextInFocusChain() const; QRectQWidget::normalGeometry() const; intQPaintDevice::numColors() const; QStringQObject::objectName() const; voidQWidget::overrideWindowFlags(Qt::WindowFlags type); voidQWidget::overrideWindowState(Qt::WindowStates state); virtual QPaintEngine*QWidget::paintEngine() const; boolQPaintDevice::paintingActive() const; const QPalette&QWidget::palette() const; QObject*QObject::parent() const; QWidget*QWidget::parentWidget() const; intQPaintDevice::physicalDpiX() const; intQPaintDevice::physicalDpiY() const; QPointQWidget::pos() const; QWidget*QWidget::previousInFocusChain() const; QVariantQObject::property(const char* name) const; virtual intQWidget::qt_metacall(QMetaObject::Call, int, void**); virtual void*QWidget::qt_metacast(const char*); voidQWidget::raise(); QRectQWidget::rect() const; static uintQObject::registerUserData(); voidQWidget::releaseKeyboard(); voidQWidget::releaseMouse(); voidQWidget::releaseShortcut(int id); voidQWidget::removeAction(QAction* action); voidQObject::removeEventFilter(QObject*); voidQWidget::render(QPaintDevice* target, const QPoint& targetOffset = QPoint(), const QRegion& sourceRegion = QRegion(), QWidget::RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren)); voidQWidget::render(QPainter* painter, const QPoint& targetOffset = QPoint(), const QRegion& sourceRegion = QRegion(), QWidget::RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren)); voidQWidget::repaint(); voidQWidget::repaint(const QRect&); voidQWidget::repaint(const QRegion&); voidQWidget::repaint(int x, int y, int w, int h); voidQWidget::resize(const QSize&); voidQWidget::resize(int w, int h); boolQWidget::restoreGeometry(const QByteArray& geometry); QByteArrayQWidget::saveGeometry() const; voidQWidget::scroll(int dx, int dy); voidQWidget::scroll(int dx, int dy, const QRect&); voidQWidget::setAcceptDrops(bool on); voidQWidget",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootCanvas.html:6908,Deployability,release,releaseShortcut,6908,"*QWidget::nativeParentWidget() const; QWidget*QWidget::nextInFocusChain() const; QRectQWidget::normalGeometry() const; intQPaintDevice::numColors() const; QStringQObject::objectName() const; voidQWidget::overrideWindowFlags(Qt::WindowFlags type); voidQWidget::overrideWindowState(Qt::WindowStates state); virtual QPaintEngine*QWidget::paintEngine() const; boolQPaintDevice::paintingActive() const; const QPalette&QWidget::palette() const; QObject*QObject::parent() const; QWidget*QWidget::parentWidget() const; intQPaintDevice::physicalDpiX() const; intQPaintDevice::physicalDpiY() const; QPointQWidget::pos() const; QWidget*QWidget::previousInFocusChain() const; QVariantQObject::property(const char* name) const; virtual intQWidget::qt_metacall(QMetaObject::Call, int, void**); virtual void*QWidget::qt_metacast(const char*); voidQWidget::raise(); QRectQWidget::rect() const; static uintQObject::registerUserData(); voidQWidget::releaseKeyboard(); voidQWidget::releaseMouse(); voidQWidget::releaseShortcut(int id); voidQWidget::removeAction(QAction* action); voidQObject::removeEventFilter(QObject*); voidQWidget::render(QPaintDevice* target, const QPoint& targetOffset = QPoint(), const QRegion& sourceRegion = QRegion(), QWidget::RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren)); voidQWidget::render(QPainter* painter, const QPoint& targetOffset = QPoint(), const QRegion& sourceRegion = QRegion(), QWidget::RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren)); voidQWidget::repaint(); voidQWidget::repaint(const QRect&); voidQWidget::repaint(const QRegion&); voidQWidget::repaint(int x, int y, int w, int h); voidQWidget::resize(const QSize&); voidQWidget::resize(int w, int h); boolQWidget::restoreGeometry(const QByteArray& geometry); QByteArrayQWidget::saveGeometry() const; voidQWidget::scroll(int dx, int dy); voidQWidget::scroll(int dx, int dy, const QRect&); voidQWidget::setAcceptDrops(bool on); voidQWidget::setAccessibleDescription(con",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootCanvas.html:12575,Deployability,update,update,12575,"(); voidQWidget::showNormal(); boolQObject::signalsBlocked() const; QSizeQWidget::size() const; virtual QSizeQWidget::sizeHint() const; QSizeQWidget::sizeIncrement() const; QSizePolicyQWidget::sizePolicy() const; voidQWidget::stackUnder(QWidget*); intQObject::startTimer(int interval); QStringQWidget::statusTip() const; QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; static QStringQWidget::tr(const char* s, const char* c = 0); static QStringQWidget::tr(const char* s, const char* c, int n); static QStringQWidget::trUtf8(const char* s, const char* c = 0); static QStringQWidget::trUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidQWidget::unsetCursor(); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::width() const; intQPaintDevice::widthMM() const; QWidget*QWidget::window() const; QStringQWidget::windowFilePath() const; Qt::WindowFlagsQWidget::windowFlags() const; QIconQWidget::windowIcon() const; QStringQWidget::windowIconText() const; Qt::WindowModalityQWidget::windowModality() const; qrealQWidget::windowOpacity() const; QStringQWidget::windowRole() const; Qt::WindowStatesQWidget::windowState() const; QWindowSurface*QWidget::windowSurface() const; QStringQWidget::windowTitle() const; Qt::WindowTypeQWidget::windowType() const; WIdQWidget::winId() const; intQWidget::x() const; const QX11Info&QWidget::x11Info() const; Qt::HANDLEQWidget::x11PictureHandle() co",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootCanvas.html:12598,Deployability,update,update,12598,"rmal(); boolQObject::signalsBlocked() const; QSizeQWidget::size() const; virtual QSizeQWidget::sizeHint() const; QSizeQWidget::sizeIncrement() const; QSizePolicyQWidget::sizePolicy() const; voidQWidget::stackUnder(QWidget*); intQObject::startTimer(int interval); QStringQWidget::statusTip() const; QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; static QStringQWidget::tr(const char* s, const char* c = 0); static QStringQWidget::tr(const char* s, const char* c, int n); static QStringQWidget::trUtf8(const char* s, const char* c = 0); static QStringQWidget::trUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidQWidget::unsetCursor(); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::width() const; intQPaintDevice::widthMM() const; QWidget*QWidget::window() const; QStringQWidget::windowFilePath() const; Qt::WindowFlagsQWidget::windowFlags() const; QIconQWidget::windowIcon() const; QStringQWidget::windowIconText() const; Qt::WindowModalityQWidget::windowModality() const; qrealQWidget::windowOpacity() const; QStringQWidget::windowRole() const; Qt::WindowStatesQWidget::windowState() const; QWindowSurface*QWidget::windowSurface() const; QStringQWidget::windowTitle() const; Qt::WindowTypeQWidget::windowType() const; WIdQWidget::winId() const; intQWidget::x() const; const QX11Info&QWidget::x11Info() const; Qt::HANDLEQWidget::x11PictureHandle() const; intQWidget::y() co",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootCanvas.html:12633,Deployability,update,update,12633,"(); boolQObject::signalsBlocked() const; QSizeQWidget::size() const; virtual QSizeQWidget::sizeHint() const; QSizeQWidget::sizeIncrement() const; QSizePolicyQWidget::sizePolicy() const; voidQWidget::stackUnder(QWidget*); intQObject::startTimer(int interval); QStringQWidget::statusTip() const; QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; static QStringQWidget::tr(const char* s, const char* c = 0); static QStringQWidget::tr(const char* s, const char* c, int n); static QStringQWidget::trUtf8(const char* s, const char* c = 0); static QStringQWidget::trUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidQWidget::unsetCursor(); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::width() const; intQPaintDevice::widthMM() const; QWidget*QWidget::window() const; QStringQWidget::windowFilePath() const; Qt::WindowFlagsQWidget::windowFlags() const; QIconQWidget::windowIcon() const; QStringQWidget::windowIconText() const; Qt::WindowModalityQWidget::windowModality() const; qrealQWidget::windowOpacity() const; QStringQWidget::windowRole() const; Qt::WindowStatesQWidget::windowState() const; QWindowSurface*QWidget::windowSurface() const; QStringQWidget::windowTitle() const; Qt::WindowTypeQWidget::windowType() const; WIdQWidget::winId() const; intQWidget::x() const; const QX11Info&QWidget::x11Info() const; Qt::HANDLEQWidget::x11PictureHandle() const; intQWidget::y() const.",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootCanvas.html:12670,Deployability,update,update,12670,"(); boolQObject::signalsBlocked() const; QSizeQWidget::size() const; virtual QSizeQWidget::sizeHint() const; QSizeQWidget::sizeIncrement() const; QSizePolicyQWidget::sizePolicy() const; voidQWidget::stackUnder(QWidget*); intQObject::startTimer(int interval); QStringQWidget::statusTip() const; QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; static QStringQWidget::tr(const char* s, const char* c = 0); static QStringQWidget::tr(const char* s, const char* c, int n); static QStringQWidget::trUtf8(const char* s, const char* c = 0); static QStringQWidget::trUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidQWidget::unsetCursor(); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::width() const; intQPaintDevice::widthMM() const; QWidget*QWidget::window() const; QStringQWidget::windowFilePath() const; Qt::WindowFlagsQWidget::windowFlags() const; QIconQWidget::windowIcon() const; QStringQWidget::windowIconText() const; Qt::WindowModalityQWidget::windowModality() const; qrealQWidget::windowOpacity() const; QStringQWidget::windowRole() const; Qt::WindowStatesQWidget::windowState() const; QWindowSurface*QWidget::windowSurface() const; QStringQWidget::windowTitle() const; Qt::WindowTypeQWidget::windowType() const; WIdQWidget::winId() const; intQWidget::x() const; const QX11Info&QWidget::x11Info() const; Qt::HANDLEQWidget::x11PictureHandle() const; intQWidget::y() const.",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootCanvas.html:12719,Deployability,update,updateGeometry,12719,"(); boolQObject::signalsBlocked() const; QSizeQWidget::size() const; virtual QSizeQWidget::sizeHint() const; QSizeQWidget::sizeIncrement() const; QSizePolicyQWidget::sizePolicy() const; voidQWidget::stackUnder(QWidget*); intQObject::startTimer(int interval); QStringQWidget::statusTip() const; QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; static QStringQWidget::tr(const char* s, const char* c = 0); static QStringQWidget::tr(const char* s, const char* c, int n); static QStringQWidget::trUtf8(const char* s, const char* c = 0); static QStringQWidget::trUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidQWidget::unsetCursor(); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::width() const; intQPaintDevice::widthMM() const; QWidget*QWidget::window() const; QStringQWidget::windowFilePath() const; Qt::WindowFlagsQWidget::windowFlags() const; QIconQWidget::windowIcon() const; QStringQWidget::windowIconText() const; Qt::WindowModalityQWidget::windowModality() const; qrealQWidget::windowOpacity() const; QStringQWidget::windowRole() const; Qt::WindowStatesQWidget::windowState() const; QWindowSurface*QWidget::windowSurface() const; QStringQWidget::windowTitle() const; Qt::WindowTypeQWidget::windowType() const; WIdQWidget::winId() const; intQWidget::x() const; const QX11Info&QWidget::x11Info() const; Qt::HANDLEQWidget::x11PictureHandle() const; intQWidget::y() const.",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootCanvas.html:12750,Deployability,update,updatesEnabled,12750,"(); boolQObject::signalsBlocked() const; QSizeQWidget::size() const; virtual QSizeQWidget::sizeHint() const; QSizeQWidget::sizeIncrement() const; QSizePolicyQWidget::sizePolicy() const; voidQWidget::stackUnder(QWidget*); intQObject::startTimer(int interval); QStringQWidget::statusTip() const; QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; static QStringQWidget::tr(const char* s, const char* c = 0); static QStringQWidget::tr(const char* s, const char* c, int n); static QStringQWidget::trUtf8(const char* s, const char* c = 0); static QStringQWidget::trUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidQWidget::unsetCursor(); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::width() const; intQPaintDevice::widthMM() const; QWidget*QWidget::window() const; QStringQWidget::windowFilePath() const; Qt::WindowFlagsQWidget::windowFlags() const; QIconQWidget::windowIcon() const; QStringQWidget::windowIconText() const; Qt::WindowModalityQWidget::windowModality() const; qrealQWidget::windowOpacity() const; QStringQWidget::windowRole() const; Qt::WindowStatesQWidget::windowState() const; QWindowSurface*QWidget::windowSurface() const; QStringQWidget::windowTitle() const; Qt::WindowTypeQWidget::windowType() const; WIdQWidget::winId() const; intQWidget::x() const; const QX11Info&QWidget::x11Info() const; Qt::HANDLEQWidget::x11PictureHandle() const; intQWidget::y() const.",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootCanvas.html:15994,Deployability,update,updateMicroFocus,15994,"ow = true, bool destroySubWindows = true); voidQObject::destroyed(QObject* = 0); virtual voidQObject::disconnectNotify(const char* signal); virtual voidQWidget::dragEnterEvent(QDragEnterEvent*); virtual voidQWidget::dragLeaveEvent(QDragLeaveEvent*); virtual voidQWidget::dragMoveEvent(QDragMoveEvent*); virtual voidQWidget::dropEvent(QDropEvent*); virtual voidQWidget::enabledChange(bool); virtual voidQWidget::enterEvent(QEvent*); virtual boolQWidget::event(QEvent*); virtual voidQWidget::focusInEvent(QFocusEvent*); boolQWidget::focusNextChild(); virtual boolQWidget::focusNextPrevChild(bool next); virtual voidQWidget::focusOutEvent(QFocusEvent*); boolQWidget::focusPreviousChild(); virtual voidQWidget::fontChange(const QFont&); virtual voidQWidget::hideEvent(QHideEvent*); virtual voidQWidget::inputMethodEvent(QInputMethodEvent*); virtual voidQWidget::keyPressEvent(QKeyEvent*); virtual voidQWidget::keyReleaseEvent(QKeyEvent*); virtual voidQWidget::languageChange(); virtual voidQWidget::leaveEvent(QEvent*); virtual intQWidget::metric(QPaintDevice::PaintDeviceMetric) const; virtual voidQWidget::mouseDoubleClickEvent(QMouseEvent*); virtual voidQWidget::mouseMoveEvent(QMouseEvent*); virtual voidQWidget::mousePressEvent(QMouseEvent*); virtual voidQWidget::mouseReleaseEvent(QMouseEvent*); virtual voidQWidget::moveEvent(QMoveEvent*); virtual voidQWidget::paintEvent(QPaintEvent*); virtual voidQWidget::paletteChange(const QPalette&); intQObject::receivers(const char* signal) const; voidQWidget::resetInputContext(); virtual voidQWidget::resizeEvent(QResizeEvent*); QObject*QObject::sender() const; intQObject::senderSignalIndex() const; virtual voidQWidget::showEvent(QShowEvent*); virtual voidQWidget::styleChange(QStyle&); virtual voidQWidget::tabletEvent(QTabletEvent*); virtual voidQObject::timerEvent(QTimerEvent*); voidQWidget::updateMicroFocus(); virtual voidQWidget::wheelEvent(QWheelEvent*); virtual voidQWidget::windowActivationChange(bool); virtual boolQWidget::x11Event(XEvent*).",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootCanvas.html:118,Modifiability,inherit,inheritance,118,". TQRootCanvas. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » QTGSI; » TQRootCanvas. class TQRootCanvas: public QWidget. Function Members (Methods); public:. boolQWidget::acceptDrops() const; QStringQWidget::accessibleDescription() const; QStringQWidget::accessibleName() const; QList<QAction*>QWidget::actions() const; voidQWidget::activateWindow(); voidQWidget::addAction(QAction* action); voidQWidget::addActions(QList<QAction*> actions); voidQWidget::adjustSize(); boolQWidget::autoFillBackground() const; QPalette::ColorRoleQWidget::backgroundRole() const; QSizeQWidget::baseSize() const; boolQObject::blockSignals(bool b); QWidget*QWidget::childAt(const QPoint& p) const; QWidget*QWidget::childAt(int x, int y) const; const QObjectList&QObject::children() const; QRectQWidget::childrenRect() const; QRegionQWidget::childrenRegion() const; voidQWidget::clearFocus(); voidQWidget::clearMask(); boolQWidget::close(); intQPaintDevice::colorCount() const; boolQObject::connect(const QObject* sender, const char* signal, const char* member, Qt::ConnectionType type = Qt::AutoConnection) const; static boolQObject::connect(const QObject* sender, const char* signal, const QObject* receiver, const char* member, Qt::ConnectionType = Qt::AutoConnection); static boolQObject::connect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& method, Qt::ConnectionType type = Qt::AutoConnection); QMarginsQWidget::contentsMargins() const; QRectQWidget::contentsRect() const; Qt::ContextMenuPolicyQWidget::contextMenuPolicy() const; voidQWidget::createWinId(); QCursorQWidget::cursor() const; voidQObject::deleteLater(); intQPaintDevice::depth() const; virtual intQWidget::devType() const; boolQObject::disconnect(const QObject* receiver, const char* member = 0); boolQO",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootCanvas.html:3755,Modifiability,inherit,inherits,3755,"nt&QWidget::font() const; QFontInfoQWidget::fontInfo() const; QFontMetricsQWidget::fontMetrics() const; QPalette::ColorRoleQWidget::foregroundRole() const; QRectQWidget::frameGeometry() const; QSizeQWidget::frameSize() const; const QRect&QWidget::geometry() const; voidQWidget::getContentsMargins(int* left, int* top, int* right, int* bottom) const; voidQWidget::grabGesture(Qt::GestureType type, Qt::GestureFlags flags = Qt::GestureFlags()); voidQWidget::grabKeyboard(); voidQWidget::grabMouse(); voidQWidget::grabMouse(const QCursor&); intQWidget::grabShortcut(const QKeySequence& key, Qt::ShortcutContext context = Qt::WindowShortcut); QGraphicsEffect*QWidget::graphicsEffect() const; QGraphicsProxyWidget*QWidget::graphicsProxyWidget() const; Qt::HANDLEQWidget::handle() const; boolQWidget::hasFocus() const; boolQWidget::hasMouseTracking() const; intQWidget::height() const; virtual intQWidget::heightForWidth(int) const; intQPaintDevice::heightMM() const; voidQWidget::hide(); boolQObject::inherits(const char* classname) const; QInputContext*QWidget::inputContext(); Qt::InputMethodHintsQWidget::inputMethodHints() const; virtual QVariantQWidget::inputMethodQuery(Qt::InputMethodQuery) const; voidQWidget::insertAction(QAction* before, QAction* action); voidQWidget::insertActions(QAction* before, QList<QAction*> actions); voidQObject::installEventFilter(QObject*); WIdQWidget::internalWinId() const; boolQWidget::isActiveWindow() const; boolQWidget::isAncestorOf(const QWidget* child) const; boolQWidget::isEnabled() const; boolQWidget::isEnabledTo(QWidget*) const; boolQWidget::isEnabledToTLW() const; boolQWidget::isFullScreen() const; boolQWidget::isHidden() const; boolQWidget::isLeftToRight() const; boolQWidget::isMaximized() const; boolQWidget::isMinimized() const; boolQWidget::isModal() const; boolQWidget::isRightToLeft() const; boolQWidget::isTopLevel() const; boolQWidget::isVisible() const; boolQWidget::isVisibleTo(QWidget*) const; boolQObject::isWidgetType() const; boolQWidget",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootCanvas.html:17593,Modifiability,Inherit,Inheritance,17593,"dateMicroFocus(); virtual voidQWidget::wheelEvent(QWheelEvent*); virtual voidQWidget::windowActivationChange(bool); virtual boolQWidget::x11Event(XEvent*). Data Members; public:. static QWidget::RenderFlagQWidget::DrawChildren; static QWidget::RenderFlagQWidget::DrawWindowBackground; static QWidget::RenderFlagQWidget::IgnoreMask; static QPaintDevice::PaintDeviceMetricQPaintDevice::PdmDepth; static QPaintDevice::PaintDeviceMetricQPaintDevice::PdmDpiX; static QPaintDevice::PaintDeviceMetricQPaintDevice::PdmDpiY; static QPaintDevice::PaintDeviceMetricQPaintDevice::PdmHeight; static QPaintDevice::PaintDeviceMetricQPaintDevice::PdmHeightMM; static QPaintDevice::PaintDeviceMetricQPaintDevice::PdmNumColors; static QPaintDevice::PaintDeviceMetricQPaintDevice::PdmPhysicalDpiX; static QPaintDevice::PaintDeviceMetricQPaintDevice::PdmPhysicalDpiY; static QPaintDevice::PaintDeviceMetricQPaintDevice::PdmWidth; static QPaintDevice::PaintDeviceMetricQPaintDevice::PdmWidthMM; static const QMetaObjectstaticMetaObject; static const QMetaObjectQWidget::staticMetaObject; static const QMetaObjectQObject::staticMetaObject. protected:. QScopedPointer<QObjectData>QObject::d_ptr; TCanvas*fCanvasRoot Canvas; TQCanvasMenu*fContextMenuQt Context menu for this canvas; Bool_tfIsCanvasOwnedOwnership flag; Bool_tfNeedResizeResize flag; QWidget*fParentparent widgets; QWidget*fTabWinparent widgets; Int_tfWidWindows Id of the Canvas; ushortQPaintDevice::paintersrefcount; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance Chart:. QWidget. ←; TQRootCanvas. Function documentation. » Author: Denis Bertini, M. AL-Turany 01/11/2000 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/qtgsi:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootCanvas.html:408,Security,access,accessibleDescription,408," boolQWidget::acceptDrops() const; QStringQWidget::accessibleDescription() const; QStringQWidget::accessibleName() const; QList<QAction*>QWidget::actions() const; voidQWidget::activateWindow(); voidQWidget::addAction(QAction* action); voidQWidget::addActions(QList<QAction*> actions); voidQWidget::adjustSize(); boolQWidget::autoFillBackground() const; QPalette::ColorRoleQWidget::backgroundRole() const; QSizeQWidget::baseSize() const; boolQObject::blockSignals(bool b); QWidget*QWidget::childAt(const QPoint& p) const; QWidget*QWidget::childAt(int x, int y) const; const QObjectList&QObject::children() const; QRectQWidget::childrenRect() const; QRegionQWidget::childrenRegion() const; voidQWidget::clearFocus(); voidQWidget::clearMask(); boolQWidget::close(); intQPaintDevice::colorCount() const; boolQObject::connect(const QObject* sender, const char* signal, const char* member, Qt::ConnectionType type = Qt::AutoConnection) const; static boolQObject::connect(const QObject* sender, const char* signal, const QObject* receiver, const char* member, Qt::ConnectionType = Qt::AutoConnection); static boolQObject::connect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& method, Qt::ConnectionType type = Qt::AutoConnection); QMarginsQWidget::contentsMargins() const; QRectQWidget::contentsRect() const; Qt::ContextMenuPolicyQWidget::contextMenuPolicy() const; voidQWidget::createWinId(); QCursorQWidget::cursor() const; voidQObject::deleteLater(); intQPaintDevice::depth() const; virtual intQWidget::devType() const; boolQObject::disconnect(const QObject* receiver, const char* member = 0); boolQO",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootCanvas.html:455,Security,access,accessibleName,455," boolQWidget::acceptDrops() const; QStringQWidget::accessibleDescription() const; QStringQWidget::accessibleName() const; QList<QAction*>QWidget::actions() const; voidQWidget::activateWindow(); voidQWidget::addAction(QAction* action); voidQWidget::addActions(QList<QAction*> actions); voidQWidget::adjustSize(); boolQWidget::autoFillBackground() const; QPalette::ColorRoleQWidget::backgroundRole() const; QSizeQWidget::baseSize() const; boolQObject::blockSignals(bool b); QWidget*QWidget::childAt(const QPoint& p) const; QWidget*QWidget::childAt(int x, int y) const; const QObjectList&QObject::children() const; QRectQWidget::childrenRect() const; QRegionQWidget::childrenRegion() const; voidQWidget::clearFocus(); voidQWidget::clearMask(); boolQWidget::close(); intQPaintDevice::colorCount() const; boolQObject::connect(const QObject* sender, const char* signal, const char* member, Qt::ConnectionType type = Qt::AutoConnection) const; static boolQObject::connect(const QObject* sender, const char* signal, const QObject* receiver, const char* member, Qt::ConnectionType = Qt::AutoConnection); static boolQObject::connect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& method, Qt::ConnectionType type = Qt::AutoConnection); QMarginsQWidget::contentsMargins() const; QRectQWidget::contentsRect() const; Qt::ContextMenuPolicyQWidget::contextMenuPolicy() const; voidQWidget::createWinId(); QCursorQWidget::cursor() const; voidQObject::deleteLater(); intQPaintDevice::depth() const; virtual intQWidget::devType() const; boolQObject::disconnect(const QObject* receiver, const char* member = 0); boolQO",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootCanvas.html:5029,Testability,log,logicalDpiX,5029,"sertActions(QAction* before, QList<QAction*> actions); voidQObject::installEventFilter(QObject*); WIdQWidget::internalWinId() const; boolQWidget::isActiveWindow() const; boolQWidget::isAncestorOf(const QWidget* child) const; boolQWidget::isEnabled() const; boolQWidget::isEnabledTo(QWidget*) const; boolQWidget::isEnabledToTLW() const; boolQWidget::isFullScreen() const; boolQWidget::isHidden() const; boolQWidget::isLeftToRight() const; boolQWidget::isMaximized() const; boolQWidget::isMinimized() const; boolQWidget::isModal() const; boolQWidget::isRightToLeft() const; boolQWidget::isTopLevel() const; boolQWidget::isVisible() const; boolQWidget::isVisibleTo(QWidget*) const; boolQObject::isWidgetType() const; boolQWidget::isWindow() const; boolQWidget::isWindowModified() const; static QWidget*QWidget::keyboardGrabber(); voidQObject::killTimer(int id); QLayout*QWidget::layout() const; Qt::LayoutDirectionQWidget::layoutDirection() const; QLocaleQWidget::locale() const; intQPaintDevice::logicalDpiX() const; intQPaintDevice::logicalDpiY() const; voidQWidget::lower(); QPointQWidget::mapFrom(QWidget*, const QPoint&) const; QPointQWidget::mapFromGlobal(const QPoint&) const; QPointQWidget::mapFromParent(const QPoint&) const; QPointQWidget::mapTo(QWidget*, const QPoint&) const; QPointQWidget::mapToGlobal(const QPoint&) const; QPointQWidget::mapToParent(const QPoint&) const; QRegionQWidget::mask() const; intQWidget::maximumHeight() const; QSizeQWidget::maximumSize() const; intQWidget::maximumWidth() const; virtual const QMetaObject*QWidget::metaObject() const; intQWidget::minimumHeight() const; QSizeQWidget::minimumSize() const; virtual QSizeQWidget::minimumSizeHint() const; intQWidget::minimumWidth() const; static QWidget*QWidget::mouseGrabber(); voidQWidget::move(const QPoint&); voidQWidget::move(int x, int y); voidQObject::moveToThread(QThread* thread); QWidget*QWidget::nativeParentWidget() const; QWidget*QWidget::nextInFocusChain() const; QRectQWidget::normalGeometry() const; ",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootCanvas.html:5067,Testability,log,logicalDpiY,5067,"tion*> actions); voidQObject::installEventFilter(QObject*); WIdQWidget::internalWinId() const; boolQWidget::isActiveWindow() const; boolQWidget::isAncestorOf(const QWidget* child) const; boolQWidget::isEnabled() const; boolQWidget::isEnabledTo(QWidget*) const; boolQWidget::isEnabledToTLW() const; boolQWidget::isFullScreen() const; boolQWidget::isHidden() const; boolQWidget::isLeftToRight() const; boolQWidget::isMaximized() const; boolQWidget::isMinimized() const; boolQWidget::isModal() const; boolQWidget::isRightToLeft() const; boolQWidget::isTopLevel() const; boolQWidget::isVisible() const; boolQWidget::isVisibleTo(QWidget*) const; boolQObject::isWidgetType() const; boolQWidget::isWindow() const; boolQWidget::isWindowModified() const; static QWidget*QWidget::keyboardGrabber(); voidQObject::killTimer(int id); QLayout*QWidget::layout() const; Qt::LayoutDirectionQWidget::layoutDirection() const; QLocaleQWidget::locale() const; intQPaintDevice::logicalDpiX() const; intQPaintDevice::logicalDpiY() const; voidQWidget::lower(); QPointQWidget::mapFrom(QWidget*, const QPoint&) const; QPointQWidget::mapFromGlobal(const QPoint&) const; QPointQWidget::mapFromParent(const QPoint&) const; QPointQWidget::mapTo(QWidget*, const QPoint&) const; QPointQWidget::mapToGlobal(const QPoint&) const; QPointQWidget::mapToParent(const QPoint&) const; QRegionQWidget::mask() const; intQWidget::maximumHeight() const; QSizeQWidget::maximumSize() const; intQWidget::maximumWidth() const; virtual const QMetaObject*QWidget::metaObject() const; intQWidget::minimumHeight() const; QSizeQWidget::minimumSize() const; virtual QSizeQWidget::minimumSizeHint() const; intQWidget::minimumWidth() const; static QWidget*QWidget::mouseGrabber(); voidQWidget::move(const QPoint&); voidQWidget::move(int x, int y); voidQObject::moveToThread(QThread* thread); QWidget*QWidget::nativeParentWidget() const; QWidget*QWidget::nextInFocusChain() const; QRectQWidget::normalGeometry() const; intQPaintDevice::numColors() const; QS",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootCanvas.html:11979,Testability,test,testAttribute,11979,"et::setWindowFlags(Qt::WindowFlags type); voidQWidget::setWindowIcon(const QIcon& icon); voidQWidget::setWindowIconText(const QString&); voidQWidget::setWindowModality(Qt::WindowModality windowModality); voidQWidget::setWindowModified(bool); voidQWidget::setWindowOpacity(qreal level); voidQWidget::setWindowRole(const QString&); voidQWidget::setWindowState(Qt::WindowStates state); voidQWidget::setWindowSurface(QWindowSurface* surface); voidQWidget::setWindowTitle(const QString&); voidQWidget::show(); voidQWidget::showFullScreen(); voidQWidget::showMaximized(); voidQWidget::showMinimized(); voidQWidget::showNormal(); boolQObject::signalsBlocked() const; QSizeQWidget::size() const; virtual QSizeQWidget::sizeHint() const; QSizeQWidget::sizeIncrement() const; QSizePolicyQWidget::sizePolicy() const; voidQWidget::stackUnder(QWidget*); intQObject::startTimer(int interval); QStringQWidget::statusTip() const; QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; static QStringQWidget::tr(const char* s, const char* c = 0); static QStringQWidget::tr(const char* s, const char* c, int n); static QStringQWidget::trUtf8(const char* s, const char* c = 0); static QStringQWidget::trUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidQWidget::unsetCursor(); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::width() const; intQPaintDevice::widthMM() const; QWidget*QWidget::window() c",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootCanvas.html:1058,Usability,clear,clearFocus,1058," boolQWidget::acceptDrops() const; QStringQWidget::accessibleDescription() const; QStringQWidget::accessibleName() const; QList<QAction*>QWidget::actions() const; voidQWidget::activateWindow(); voidQWidget::addAction(QAction* action); voidQWidget::addActions(QList<QAction*> actions); voidQWidget::adjustSize(); boolQWidget::autoFillBackground() const; QPalette::ColorRoleQWidget::backgroundRole() const; QSizeQWidget::baseSize() const; boolQObject::blockSignals(bool b); QWidget*QWidget::childAt(const QPoint& p) const; QWidget*QWidget::childAt(int x, int y) const; const QObjectList&QObject::children() const; QRectQWidget::childrenRect() const; QRegionQWidget::childrenRegion() const; voidQWidget::clearFocus(); voidQWidget::clearMask(); boolQWidget::close(); intQPaintDevice::colorCount() const; boolQObject::connect(const QObject* sender, const char* signal, const char* member, Qt::ConnectionType type = Qt::AutoConnection) const; static boolQObject::connect(const QObject* sender, const char* signal, const QObject* receiver, const char* member, Qt::ConnectionType = Qt::AutoConnection); static boolQObject::connect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& method, Qt::ConnectionType type = Qt::AutoConnection); QMarginsQWidget::contentsMargins() const; QRectQWidget::contentsRect() const; Qt::ContextMenuPolicyQWidget::contextMenuPolicy() const; voidQWidget::createWinId(); QCursorQWidget::cursor() const; voidQObject::deleteLater(); intQPaintDevice::depth() const; virtual intQWidget::devType() const; boolQObject::disconnect(const QObject* receiver, const char* member = 0); boolQO",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootCanvas.html:1085,Usability,clear,clearMask,1085," boolQWidget::acceptDrops() const; QStringQWidget::accessibleDescription() const; QStringQWidget::accessibleName() const; QList<QAction*>QWidget::actions() const; voidQWidget::activateWindow(); voidQWidget::addAction(QAction* action); voidQWidget::addActions(QList<QAction*> actions); voidQWidget::adjustSize(); boolQWidget::autoFillBackground() const; QPalette::ColorRoleQWidget::backgroundRole() const; QSizeQWidget::baseSize() const; boolQObject::blockSignals(bool b); QWidget*QWidget::childAt(const QPoint& p) const; QWidget*QWidget::childAt(int x, int y) const; const QObjectList&QObject::children() const; QRectQWidget::childrenRect() const; QRegionQWidget::childrenRegion() const; voidQWidget::clearFocus(); voidQWidget::clearMask(); boolQWidget::close(); intQPaintDevice::colorCount() const; boolQObject::connect(const QObject* sender, const char* signal, const char* member, Qt::ConnectionType type = Qt::AutoConnection) const; static boolQObject::connect(const QObject* sender, const char* signal, const QObject* receiver, const char* member, Qt::ConnectionType = Qt::AutoConnection); static boolQObject::connect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& method, Qt::ConnectionType type = Qt::AutoConnection); QMarginsQWidget::contentsMargins() const; QRectQWidget::contentsRect() const; Qt::ContextMenuPolicyQWidget::contextMenuPolicy() const; voidQWidget::createWinId(); QCursorQWidget::cursor() const; voidQObject::deleteLater(); intQPaintDevice::depth() const; virtual intQWidget::devType() const; boolQObject::disconnect(const QObject* receiver, const char* member = 0); boolQO",MatchSource.WIKI,root/html604/TQRootCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootCanvas.html
https://root.cern/root/html604/TQRootDialog.html:118,Modifiability,inherit,inheritance,118,". TQRootDialog. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » QTGSI; » TQRootDialog. class TQRootDialog: public Q3VBox. Function Members (Methods). Data Members; public:. static const QMetaObjectstaticMetaObject. protected:. QVBox*fArgBoxBox layout; TCanvas*fCurCanvascurrent canvas; TMethod*fCurMethodmethod to be executed; TObject*fCurObjSelected object; QLineEdit*fLineEditLineEdit widget for arguments; QList<QLineEdit*>fListlist of widget corresponding to the number of arguments; QWidget*fParentparent widget. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance Chart:. Q3VBox. ←; TQRootDialog. Function documentation. » Author: Denis Bertini, M. Al-Turany 01/11/2000 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/qtgsi:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQRootDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootDialog.html
https://root.cern/root/html604/TQRootDialog.html:800,Modifiability,Inherit,Inheritance,800,". TQRootDialog. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » QTGSI; » TQRootDialog. class TQRootDialog: public Q3VBox. Function Members (Methods). Data Members; public:. static const QMetaObjectstaticMetaObject. protected:. QVBox*fArgBoxBox layout; TCanvas*fCurCanvascurrent canvas; TMethod*fCurMethodmethod to be executed; TObject*fCurObjSelected object; QLineEdit*fLineEditLineEdit widget for arguments; QList<QLineEdit*>fListlist of widget corresponding to the number of arguments; QWidget*fParentparent widget. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance Chart:. Q3VBox. ←; TQRootDialog. Function documentation. » Author: Denis Bertini, M. Al-Turany 01/11/2000 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/qtgsi:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQRootDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootDialog.html
https://root.cern/root/html604/TQRootGuiFactory.html:2379,Availability,Error,Error,2379,"GuiFactory::CreateCanvasImp(TCanvas* c, const char* title, UInt_t width, UInt_t height); virtual TCanvasImp*TRootGuiFactory::CreateCanvasImp(TCanvas* c, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height); virtual TContextMenuImp*TRootGuiFactory::CreateContextMenuImp(TContextMenu* c, const char* name, const char* title); virtual TControlBarImp*TRootGuiFactory::CreateControlBarImp(TControlBar* c, const char* title); virtual TControlBarImp*TRootGuiFactory::CreateControlBarImp(TControlBar* c, const char* title, Int_t x, Int_t y); virtual TInspectorImp*TGuiFactory::CreateInspectorImp(const TObject* obj, UInt_t width, UInt_t height); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer);",MatchSource.WIKI,root/html604/TQRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootGuiFactory.html
https://root.cern/root/html604/TQRootGuiFactory.html:2508,Availability,error,error,2508,"teCanvasImp(TCanvas* c, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height); virtual TContextMenuImp*TRootGuiFactory::CreateContextMenuImp(TContextMenu* c, const char* name, const char* title); virtual TControlBarImp*TRootGuiFactory::CreateControlBarImp(TControlBar* c, const char* title); virtual TControlBarImp*TRootGuiFactory::CreateControlBarImp(TControlBar* c, const char* title, Int_t x, Int_t y); virtual TInspectorImp*TGuiFactory::CreateInspectorImp(const TObject* obj, UInt_t width, UInt_t height); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObj",MatchSource.WIKI,root/html604/TQRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootGuiFactory.html
https://root.cern/root/html604/TQRootGuiFactory.html:2592,Availability,error,error,2592,"ight); virtual TContextMenuImp*TRootGuiFactory::CreateContextMenuImp(TContextMenu* c, const char* name, const char* title); virtual TControlBarImp*TRootGuiFactory::CreateControlBarImp(TControlBar* c, const char* title); virtual TControlBarImp*TRootGuiFactory::CreateControlBarImp(TControlBar* c, const char* title, Int_t x, Int_t y); virtual TInspectorImp*TGuiFactory::CreateInspectorImp(const TObject* obj, UInt_t width, UInt_t height); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(",MatchSource.WIKI,root/html604/TQRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootGuiFactory.html
https://root.cern/root/html604/TQRootGuiFactory.html:122,Modifiability,inherit,inheritance,122,". TQRootGuiFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » QTGSI; » TQRootGuiFactory. class TQRootGuiFactory: public TRootGuiFactory. TQRootGuiFactory. This class is a factory for Qt GUI components. It overrides; the member functions of the ABS TGuiFactory. Function Members (Methods); public:. voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*TRootGuiFactory::Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual TApplicationImp*TRootGuiFactory::CreateApplicationImp(const char* classname, int* argc, char** argv); virtual TBrowserImp*TRootGuiFactory::CreateBrowserImp(TBrowser* b, const char* title, UInt_t width, UInt_t height, Option_t* opt = """"); virtual TBrowserImp*TRootGuiFactory::CreateBrowserImp(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt = """"); virtual TCanvasImp*TRootGuiFactory::CreateCanvasImp(TCanvas* c, const char* title, UInt_t width, UInt_t height); virtual TCanvasImp*TRootGuiFactory::CreateCanvasImp(TCanvas* c, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height); virtual TContextMenuImp*TRootGuiFactory::CreateContextMenuImp(TContextMenu* c, const char* name, const char* title); virtual TControlBarImp*TRootGuiFactory::CreateControlBarImp(TControlBar* c, const char* title); virtual TControlBarImp*TRootGuiFactory::CreateControlBarImp(TControlBar* c, const char* title, Int_t x, Int_t y); virtual TInspectorImp*TGuiFactory::CreateInspectorImp(const TObject* obj",MatchSource.WIKI,root/html604/TQRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootGuiFactory.html
https://root.cern/root/html604/TQRootGuiFactory.html:3516,Modifiability,Inherit,InheritsFrom,3516,"rtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*TRootGuiFactory::IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operato",MatchSource.WIKI,root/html604/TQRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootGuiFactory.html
https://root.cern/root/html604/TQRootGuiFactory.html:3582,Modifiability,Inherit,InheritsFrom,3582,"_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*TRootGuiFactory::IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootGuiFactory&TRootGuiFactory::ope",MatchSource.WIKI,root/html604/TQRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootGuiFactory.html
https://root.cern/root/html604/TQRootGuiFactory.html:7257,Modifiability,Inherit,Inheritance,7257,"TObject::TestBits(UInt_t f) const; TQRootGuiFactory(const TQRootGuiFactory&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Bool_tfCustom. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TGuiFactory. ←; TRootGuiFactory. ←; TQRootGuiFactory. Function documentation; TQRootGuiFactory(const char *name, const char *title); TQRootGuiFactory ctor.; The default implementation is not customized.; The ROOT TRootCanvas class is being used. » Author: Denis Bertini 01/11/2000 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/qtgsi:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootGuiFactory.html
https://root.cern/root/html604/TQRootGuiFactory.html:3406,Security,Hash,Hash,3406,"st char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*TRootGuiFactory::IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz",MatchSource.WIKI,root/html604/TQRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootGuiFactory.html
https://root.cern/root/html604/TQRootGuiFactory.html:5835,Testability,Test,TestBit,5835,"operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootGuiFactory&TRootGuiFactory::operator=(const TRootGuiFactory&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTRootGuiFactory::ShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTRootGuiFactory::Streamer(TBuffer&); voidTRootGuiFactory::StreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQRootGuiFactory(const TQRootGuiFactory&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootGuiFactory.html
https://root.cern/root/html604/TQRootGuiFactory.html:5874,Testability,Test,TestBits,5874,"operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootGuiFactory&TRootGuiFactory::operator=(const TRootGuiFactory&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTRootGuiFactory::ShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTRootGuiFactory::Streamer(TBuffer&); voidTRootGuiFactory::StreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQRootGuiFactory(const TQRootGuiFactory&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootGuiFactory.html
https://root.cern/root/html604/TQRootGuiFactory.html:761,Usability,Clear,Clear,761," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*TRootGuiFactory::Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual TApplicationImp*TRootGuiFactory::CreateApplicationImp(const char* classname, int* argc, char** argv); virtual TBrowserImp*TRootGuiFactory::CreateBrowserImp(TBrowser* b, const char* title, UInt_t width, UInt_t height, Option_t* opt = """"); virtual TBrowserImp*TRootGuiFactory::CreateBrowserImp(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt = """"); virtual TCanvasImp*TRootGuiFactory::CreateCanvasImp(TCanvas* c, const char* title, UInt_t width, UInt_t height); virtual TCanvasImp*TRootGuiFactory::CreateCanvasImp(TCanvas* c, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height); virtual TContextMenuImp*TRootGuiFactory::CreateContextMenuImp(TContextMenu* c, const char* name, const char* title); virtual TControlBarImp*TRootGuiFactory::CreateControlBarImp(TControlBar* c, const char* title); virtual TControlBarImp*TRootGuiFactory::CreateControlBarImp(TControlBar* c, const char* title, Int_t x, Int_t y); virtual TInspectorImp*TGuiFactory::CreateInspectorImp(const TObject* obj",MatchSource.WIKI,root/html604/TQRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQRootGuiFactory.html
https://root.cern/root/html604/TQtApplication.html:120,Modifiability,inherit,inheritance,120,". TQtApplication. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » QT; » TQtApplication. class TQtApplication. TQtApplication - Instantiate the Qt system within ROOT environment. Instantiate the Qt package by createing Qapplication object if any. Function Members (Methods); public:. virtual~TQtApplication(); static TClass*Class(); static TQtApplication*GetQtApplication(); virtual TClass*IsA() const; static boolIsThisGuiThread(); static Int_tQtVersion(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static boolTerminate(); TQtApplication(); TQtApplication(const char* appClassName, int& argc, char** argv). private:. voidCreateGUIThread(int& argc, char** argv); static voidCreateQApplication(int& argc, char** argv, bool GUIenabled); voidoperator=(const TQtApplication&); TQtApplication(const TQtApplication&). Data Members; protected:. static TQtApplication*fgQtApplication. private:. TQtApplicationThread*fGUIThread. Class Charts. Inheritance Chart:. TQtApplication. Function documentation; TQtApplication(const char* appClassName, int& argc, char** argv). ~TQtApplication(). { }. void CreateQApplication(int& argc, char** argv, bool GUIenabled); Initialize the Qt package; Check the QT_BATCH environment variable to disactivate Qt GUI mode. void CreateGUIThread(int& argc, char** argv); Create GUI thread to Qt event loop. TQtApplication * GetQtApplication(). {return fgQtApplication;}. bool Terminate(); Terminate GUI thread. Int_t QtVersion(); The Qt version the package was compiled with. bool IsThisGuiThread(); Check whether the current thread belongs the GUI. void operator=(const TQtApplication& ). TQtApplication(const TQtApplication& ). TQtApplication(); {fGUIThread=0;}. » Author: V",MatchSource.WIKI,root/html604/TQtApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtApplication.html
https://root.cern/root/html604/TQtApplication.html:1239,Modifiability,Inherit,Inheritance,1239," ROOT; » GRAF2D; » QT; » TQtApplication. class TQtApplication. TQtApplication - Instantiate the Qt system within ROOT environment. Instantiate the Qt package by createing Qapplication object if any. Function Members (Methods); public:. virtual~TQtApplication(); static TClass*Class(); static TQtApplication*GetQtApplication(); virtual TClass*IsA() const; static boolIsThisGuiThread(); static Int_tQtVersion(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static boolTerminate(); TQtApplication(); TQtApplication(const char* appClassName, int& argc, char** argv). private:. voidCreateGUIThread(int& argc, char** argv); static voidCreateQApplication(int& argc, char** argv, bool GUIenabled); voidoperator=(const TQtApplication&); TQtApplication(const TQtApplication&). Data Members; protected:. static TQtApplication*fgQtApplication. private:. TQtApplicationThread*fGUIThread. Class Charts. Inheritance Chart:. TQtApplication. Function documentation; TQtApplication(const char* appClassName, int& argc, char** argv). ~TQtApplication(). { }. void CreateQApplication(int& argc, char** argv, bool GUIenabled); Initialize the Qt package; Check the QT_BATCH environment variable to disactivate Qt GUI mode. void CreateGUIThread(int& argc, char** argv); Create GUI thread to Qt event loop. TQtApplication * GetQtApplication(). {return fgQtApplication;}. bool Terminate(); Terminate GUI thread. Int_t QtVersion(); The Qt version the package was compiled with. bool IsThisGuiThread(); Check whether the current thread belongs the GUI. void operator=(const TQtApplication& ). TQtApplication(const TQtApplication& ). TQtApplication(); {fGUIThread=0;}. » Author: Valeri Fine 21/01/2002 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/qt:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation",MatchSource.WIKI,root/html604/TQtApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtApplication.html
https://root.cern/root/html604/TQtApplication.html:1513,Modifiability,variab,variable,1513,"ation. TQtApplication - Instantiate the Qt system within ROOT environment. Instantiate the Qt package by createing Qapplication object if any. Function Members (Methods); public:. virtual~TQtApplication(); static TClass*Class(); static TQtApplication*GetQtApplication(); virtual TClass*IsA() const; static boolIsThisGuiThread(); static Int_tQtVersion(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); static boolTerminate(); TQtApplication(); TQtApplication(const char* appClassName, int& argc, char** argv). private:. voidCreateGUIThread(int& argc, char** argv); static voidCreateQApplication(int& argc, char** argv, bool GUIenabled); voidoperator=(const TQtApplication&); TQtApplication(const TQtApplication&). Data Members; protected:. static TQtApplication*fgQtApplication. private:. TQtApplicationThread*fGUIThread. Class Charts. Inheritance Chart:. TQtApplication. Function documentation; TQtApplication(const char* appClassName, int& argc, char** argv). ~TQtApplication(). { }. void CreateQApplication(int& argc, char** argv, bool GUIenabled); Initialize the Qt package; Check the QT_BATCH environment variable to disactivate Qt GUI mode. void CreateGUIThread(int& argc, char** argv); Create GUI thread to Qt event loop. TQtApplication * GetQtApplication(). {return fgQtApplication;}. bool Terminate(); Terminate GUI thread. Int_t QtVersion(); The Qt version the package was compiled with. bool IsThisGuiThread(); Check whether the current thread belongs the GUI. void operator=(const TQtApplication& ). TQtApplication(const TQtApplication& ). TQtApplication(); {fGUIThread=0;}. » Author: Valeri Fine 21/01/2002 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/qt:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQtApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtApplication.html
https://root.cern/root/html604/TQtBrush.html:114,Modifiability,inherit,inheritance,114,". TQtBrush. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » QT; » TQtBrush. class TQtBrush: public QBrush. TQtBrush creates the QBrush Qt object based on the ROOT ""TAttFill"" attributes. Function Members (Methods); public:. virtual~TQtBrush(); static TClass*Class(); const QColor&QBrush::color() const; QBrush::DataPtr&QBrush::data_ptr(); const QColor&GetColor() const; intGetStyle() const; const QGradient*QBrush::gradient() const; virtual TClass*IsA() const; boolQBrush::isDetached() const; boolQBrush::isOpaque() const; Bool_tIsTransparent() const; const QMatrix&QBrush::matrix() const; QVariantQBrush::operator QVariant() const; boolQBrush::operator!=(const QBrush& b) const; TQtBrush&operator=(const TAttFill& rootFillAttributes); TQtBrush&operator=(const TQtBrush&); boolQBrush::operator==(const QBrush& b) const; voidSetColor(const QColor& qtcolor); voidSetColor(Color_t cindex); voidQBrush::setColor(const QColor& color); voidQBrush::setColor(Qt::GlobalColor color); voidSetFillAttributes(const TAttFill& rootFillAttributes); voidQBrush::setMatrix(const QMatrix& mat); voidSetStyle(int newStyle = 1000); voidQBrush::setStyle(Qt::BrushStyle); voidSetStyle(int style, int fasi); voidQBrush::setTexture(const QPixmap& pixmap); voidQBrush::setTextureImage(const QImage& image); voidQBrush::setTransform(const QTransform&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Qt::BrushStyleQBrush::style() const; voidQBrush::swap(QBrush& other); QPixmapQBrush::texture() const; QImageQBrush::textureImage() const; TQtBrush(); TQtBrush(const TQtBrush& src); TQtBrush(const TAttFill& rootFillAttributes); QTransformQBrush::transform() const. protected:. voidSetColorOwn(). Data Members; protected:. intfAl",MatchSource.WIKI,root/html604/TQtBrush.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtBrush.html
https://root.cern/root/html604/TQtBrush.html:2072,Modifiability,Inherit,Inheritance,2072,"dex); voidQBrush::setColor(const QColor& color); voidQBrush::setColor(Qt::GlobalColor color); voidSetFillAttributes(const TAttFill& rootFillAttributes); voidQBrush::setMatrix(const QMatrix& mat); voidSetStyle(int newStyle = 1000); voidQBrush::setStyle(Qt::BrushStyle); voidSetStyle(int style, int fasi); voidQBrush::setTexture(const QPixmap& pixmap); voidQBrush::setTextureImage(const QImage& image); voidQBrush::setTransform(const QTransform&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Qt::BrushStyleQBrush::style() const; voidQBrush::swap(QBrush& other); QPixmapQBrush::texture() const; QImageQBrush::textureImage() const; TQtBrush(); TQtBrush(const TQtBrush& src); TQtBrush(const TAttFill& rootFillAttributes); QTransformQBrush::transform() const. protected:. voidSetColorOwn(). Data Members; protected:. intfAlphatransparency; QColorfBackground; intfFasi; intfStyle. Class Charts. Inheritance Chart:. QBrush. ←; TQtBrush. Function documentation; TQtBrush(). {}. TQtBrush(const TAttFill& rootFillAttributes); TQtBrush ctor from ROOT TAttFill object. ~TQtBrush(); TQtBrush dtor. TQtBrush & operator=(const TAttFill& rootFillAttributes). void SetFillAttributes(const TAttFill& rootFillAttributes). void SetColor(Color_t cindex); Set color index for to fill shapes; cindex : color index. void SetColor(const QColor& qtcolor); remember the user's alpha value and set the brush color. void SetColorOwn(); Set the brush color and adjust its alpha value from fStyle; Take in account the new transperency if needed. void SetStyle(int style, int fasi); Set fill area style index*-*-*-*-*-; *-* =========================; *-* style : fill area interior style hollow or solid; *. Bool_t IsTransparent() const; { return fStyle >= 4000 && fStyle <= 4100 ? kTRUE : kFALSE; }. TQtBrush(). TQtBrush & operator=(const TAttFill& rootFillAttributes). void SetStyle(int newStyle = 1000). const QColor & GetColor",MatchSource.WIKI,root/html604/TQtBrush.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtBrush.html
https://root.cern/root/html604/TQtClientFilter.html:449,Deployability,install,installEventFilter,449,". TQtClientFilter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » QT; » TQtClientFilter. class TQtClientFilter: public QObject. QtClientFilter provides QOject event filter to map Qt and ROOT events; (see: http://doc.trolltech.com/4.3/qobject.html#installEventFilter ). Function Members (Methods); public:. virtual~TQtClientFilter(); voidAppendButtonGrab(TQtClientWidget*); boolQObject::blockSignals(bool b); const QObjectList&QObject::children() const; static TClass*Class(); boolQObject::connect(const QObject* sender, const char* signal, const char* member, Qt::ConnectionType type = Qt::AutoConnection) const; static boolQObject::connect(const QObject* sender, const char* signal, const QObject* receiver, const char* member, Qt::ConnectionType = Qt::AutoConnection); static boolQObject::connect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& method, Qt::ConnectionType type = Qt::AutoConnection); voidQObject::deleteLater(); boolQObject::disconnect(const QObject* receiver, const char* member = 0); boolQObject::disconnect(const char* signal = 0, const QObject* receiver = 0, const char* member = 0); static boolQObject::disconnect(const QObject* sender, const char* signal, const QObject* receiver, const char* member); static boolQObject::disconnect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& member); voidQObject::dumpObjectInfo(); voidQObject::dumpObjectTree(); QList<QByteArray>QObject::dynamicPropertyNames() const; virtual boolQObject::event(QEvent*); static TQtClientWidget*GetButtonGrabber(); static TQtClientWidget*GetPointerGrabber(); static voidGrabPointer(TQtClientWidget* grabber, UInt_t evmask, Window_t confine, QCursor* cursor, Bool_t grab = kTRUE, Bool_t owner_events = kTRUE); b",MatchSource.WIKI,root/html604/TQtClientFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientFilter.html
https://root.cern/root/html604/TQtClientFilter.html:2065,Deployability,install,installEventFilter,2065,", const QMetaMethod& method, Qt::ConnectionType type = Qt::AutoConnection); voidQObject::deleteLater(); boolQObject::disconnect(const QObject* receiver, const char* member = 0); boolQObject::disconnect(const char* signal = 0, const QObject* receiver = 0, const char* member = 0); static boolQObject::disconnect(const QObject* sender, const char* signal, const QObject* receiver, const char* member); static boolQObject::disconnect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& member); voidQObject::dumpObjectInfo(); voidQObject::dumpObjectTree(); QList<QByteArray>QObject::dynamicPropertyNames() const; virtual boolQObject::event(QEvent*); static TQtClientWidget*GetButtonGrabber(); static TQtClientWidget*GetPointerGrabber(); static voidGrabPointer(TQtClientWidget* grabber, UInt_t evmask, Window_t confine, QCursor* cursor, Bool_t grab = kTRUE, Bool_t owner_events = kTRUE); boolQObject::inherits(const char* classname) const; voidQObject::installEventFilter(QObject*); virtual TClass*IsA() const; boolQObject::isWidgetType() const; voidQObject::killTimer(int id); virtual const QMetaObject*metaObject() const; voidQObject::moveToThread(QThread* thread); QStringQObject::objectName() const; QObject*QObject::parent() const; static TQtPointerGrabber*PointerGrabber(); QVariantQObject::property(const char* name) const; virtual intqt_metacall(QMetaObject::Call, int, void**); virtual void*qt_metacast(const char*); static uintQObject::registerUserData(); voidRemoveButtonGrab(QObject*); voidQObject::removeEventFilter(QObject*); static voidSetButtonGrabber(TQtClientWidget* grabber); voidQObject::setObjectName(const QString& name); voidQObject::setParent(QObject*); boolQObject::setProperty(const char* name, const QVariant& value); voidQObject::setUserData(uint id, QObjectUserData* data); virtual voidShowMembers(TMemberInspector& insp) const; boolQObject::signalsBlocked() const; intQObject::startTimer(int interval); virtual voidStreamer(TBuffer&)",MatchSource.WIKI,root/html604/TQtClientFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientFilter.html
https://root.cern/root/html604/TQtClientFilter.html:121,Modifiability,inherit,inheritance,121,". TQtClientFilter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » QT; » TQtClientFilter. class TQtClientFilter: public QObject. QtClientFilter provides QOject event filter to map Qt and ROOT events; (see: http://doc.trolltech.com/4.3/qobject.html#installEventFilter ). Function Members (Methods); public:. virtual~TQtClientFilter(); voidAppendButtonGrab(TQtClientWidget*); boolQObject::blockSignals(bool b); const QObjectList&QObject::children() const; static TClass*Class(); boolQObject::connect(const QObject* sender, const char* signal, const char* member, Qt::ConnectionType type = Qt::AutoConnection) const; static boolQObject::connect(const QObject* sender, const char* signal, const QObject* receiver, const char* member, Qt::ConnectionType = Qt::AutoConnection); static boolQObject::connect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& method, Qt::ConnectionType type = Qt::AutoConnection); voidQObject::deleteLater(); boolQObject::disconnect(const QObject* receiver, const char* member = 0); boolQObject::disconnect(const char* signal = 0, const QObject* receiver = 0, const char* member = 0); static boolQObject::disconnect(const QObject* sender, const char* signal, const QObject* receiver, const char* member); static boolQObject::disconnect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& member); voidQObject::dumpObjectInfo(); voidQObject::dumpObjectTree(); QList<QByteArray>QObject::dynamicPropertyNames() const; virtual boolQObject::event(QEvent*); static TQtClientWidget*GetButtonGrabber(); static TQtClientWidget*GetPointerGrabber(); static voidGrabPointer(TQtClientWidget* grabber, UInt_t evmask, Window_t confine, QCursor* cursor, Bool_t grab = kTRUE, Bool_t owner_events = kTRUE); b",MatchSource.WIKI,root/html604/TQtClientFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientFilter.html
https://root.cern/root/html604/TQtClientFilter.html:2013,Modifiability,inherit,inherits,2013,"ender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& method, Qt::ConnectionType type = Qt::AutoConnection); voidQObject::deleteLater(); boolQObject::disconnect(const QObject* receiver, const char* member = 0); boolQObject::disconnect(const char* signal = 0, const QObject* receiver = 0, const char* member = 0); static boolQObject::disconnect(const QObject* sender, const char* signal, const QObject* receiver, const char* member); static boolQObject::disconnect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& member); voidQObject::dumpObjectInfo(); voidQObject::dumpObjectTree(); QList<QByteArray>QObject::dynamicPropertyNames() const; virtual boolQObject::event(QEvent*); static TQtClientWidget*GetButtonGrabber(); static TQtClientWidget*GetPointerGrabber(); static voidGrabPointer(TQtClientWidget* grabber, UInt_t evmask, Window_t confine, QCursor* cursor, Bool_t grab = kTRUE, Bool_t owner_events = kTRUE); boolQObject::inherits(const char* classname) const; voidQObject::installEventFilter(QObject*); virtual TClass*IsA() const; boolQObject::isWidgetType() const; voidQObject::killTimer(int id); virtual const QMetaObject*metaObject() const; voidQObject::moveToThread(QThread* thread); QStringQObject::objectName() const; QObject*QObject::parent() const; static TQtPointerGrabber*PointerGrabber(); QVariantQObject::property(const char* name) const; virtual intqt_metacall(QMetaObject::Call, int, void**); virtual void*qt_metacast(const char*); static uintQObject::registerUserData(); voidRemoveButtonGrab(QObject*); voidQObject::removeEventFilter(QObject*); static voidSetButtonGrabber(TQtClientWidget* grabber); voidQObject::setObjectName(const QString& name); voidQObject::setParent(QObject*); boolQObject::setProperty(const char* name, const QVariant& value); voidQObject::setUserData(uint id, QObjectUserData* data); virtual voidShowMembers(TMemberInspector& insp) const; boolQObject::signalsBlocked() const; intQObject:",MatchSource.WIKI,root/html604/TQtClientFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientFilter.html
https://root.cern/root/html604/TQtClientFilter.html:5181,Modifiability,Inherit,Inheritance,5181,"er); virtual voidQObject::timerEvent(QTimerEvent*); voidUnSetKeyGrabber(TQtClientWidget* grabber). private:. voidoperator=(const TQtClientFilter&); static voidqt_static_metacall(QObject*, QMetaObject::Call, int, void**); TQtClientFilter(const TQtClientFilter&). Data Members; public:. static const QMetaObjectstaticMetaObject; static const QMetaObjectQObject::staticMetaObject. protected:. QScopedPointer<QObjectData>QObject::d_ptr; QList<TQtClientWidget*>fButtonGrabList; UInt_tfInputEventMask; TQtClientWidget*fKeyGrabber; TQtNextEventMessage*fNotifyClient; TQtEventQueue*fRootEventQueue; static TQtClientWidget*fgActiveGrabber; static TQtClientWidget*fgButtonGrabber; static QCursor*fgGrabPointerCursor; static UInt_tfgGrabPointerEventMask; static Bool_tfgGrabPointerOwner; static TQtPointerGrabber*fgGrabber; static TQtClientWidget*fgPointerGrabber; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance Chart:. QObject. ←; TQtClientFilter. Function documentation; Bool_t IsGrabSelected(UInt_t selectEventMask); return the selection by ""grabButton"" / ""grabPointer"". ~TQtClientFilter(). void AddKeyEvent(const QKeyEvent& event, TQtClientWidget* widget); Map and and to the ROOT event queue Qt KeyBoard event mapped to the ROOT Event_t; For ""dest"" widget. bool SelectGrab(Event_t& event, UInt_t selectEventMask, QMouseEvent& me); Select Event: -- 04.12.2005 --. bool eventFilter(QObject* o, QEvent* e); Dispatch The Qt event from event queue to Event_t structure; Not all of the event fields are valid for each event type,; except fType and fWindow. void GrabPointer(TQtClientWidget* grabber, UInt_t evmask, Window_t confine, QCursor* cursor, Bool_t grab = kTRUE, Bool_t owner_events = kTRUE); Set the X11 style active grabbing for ROOT TG widgets. TQtPointerGrabber * PointerGrabber(); { return fgGrabber; }. TQtClientWidget * GetPointerGrabber(); { return fgPointerGrabber; }. TQtClientWidget * GetBut",MatchSource.WIKI,root/html604/TQtClientFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientFilter.html
https://root.cern/root/html604/TQtClientFilter.html:3897,Performance,Queue,Queue,3897,"a(uint id, QObjectUserData* data); virtual voidShowMembers(TMemberInspector& insp) const; boolQObject::signalsBlocked() const; intQObject::startTimer(int interval); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); QThread*QObject::thread() const; TQtClientFilter(); static QStringtr(const char* s, const char* c = 0); static QStringtr(const char* s, const char* c, int n); static QStringtrUtf8(const char* s, const char* c = 0); static QStringtrUtf8(const char* s, const char* c, int n); QObjectUserData*QObject::userData(uint id) const. protected:. voidAddKeyEvent(const QKeyEvent& event, TQtClientWidget* widget); virtual voidQObject::childEvent(QChildEvent*); virtual voidQObject::connectNotify(const char* signal); virtual voidQObject::customEvent(QEvent*); voidQObject::destroyed(QObject* = 0); virtual voidQObject::disconnectNotify(const char* signal); virtual booleventFilter(QObject* o, QEvent* e); static Bool_tIsGrabSelected(UInt_t selectEventMask); TQtEventQueue*Queue(); intQObject::receivers(const char* signal) const; voidRestoreLostGrabbing(Event_t& event); static Bool_tSelectGrab(Event_t& event, UInt_t selectEventMask, QMouseEvent& me); QObject*QObject::sender() const; intQObject::senderSignalIndex() const; voidSetKeyGrabber(TQtClientWidget* grabber); virtual voidQObject::timerEvent(QTimerEvent*); voidUnSetKeyGrabber(TQtClientWidget* grabber). private:. voidoperator=(const TQtClientFilter&); static voidqt_static_metacall(QObject*, QMetaObject::Call, int, void**); TQtClientFilter(const TQtClientFilter&). Data Members; public:. static const QMetaObjectstaticMetaObject; static const QMetaObjectQObject::staticMetaObject. protected:. QScopedPointer<QObjectData>QObject::d_ptr; QList<TQtClientWidget*>fButtonGrabList; UInt_tfInputEventMask; TQtClientWidget*fKeyGrabber; TQtNextEventMessage*fNotifyClient; TQtEventQueue*fRootEventQueue; static TQtClientWidget*fgActiveGrabber; static TQtClientWidget*fgButtonGrabber; static QCursor*fgGr",MatchSource.WIKI,root/html604/TQtClientFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientFilter.html
https://root.cern/root/html604/TQtClientFilter.html:5472,Performance,queue,queue,5472,"embers; public:. static const QMetaObjectstaticMetaObject; static const QMetaObjectQObject::staticMetaObject. protected:. QScopedPointer<QObjectData>QObject::d_ptr; QList<TQtClientWidget*>fButtonGrabList; UInt_tfInputEventMask; TQtClientWidget*fKeyGrabber; TQtNextEventMessage*fNotifyClient; TQtEventQueue*fRootEventQueue; static TQtClientWidget*fgActiveGrabber; static TQtClientWidget*fgButtonGrabber; static QCursor*fgGrabPointerCursor; static UInt_tfgGrabPointerEventMask; static Bool_tfgGrabPointerOwner; static TQtPointerGrabber*fgGrabber; static TQtClientWidget*fgPointerGrabber; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance Chart:. QObject. ←; TQtClientFilter. Function documentation; Bool_t IsGrabSelected(UInt_t selectEventMask); return the selection by ""grabButton"" / ""grabPointer"". ~TQtClientFilter(). void AddKeyEvent(const QKeyEvent& event, TQtClientWidget* widget); Map and and to the ROOT event queue Qt KeyBoard event mapped to the ROOT Event_t; For ""dest"" widget. bool SelectGrab(Event_t& event, UInt_t selectEventMask, QMouseEvent& me); Select Event: -- 04.12.2005 --. bool eventFilter(QObject* o, QEvent* e); Dispatch The Qt event from event queue to Event_t structure; Not all of the event fields are valid for each event type,; except fType and fWindow. void GrabPointer(TQtClientWidget* grabber, UInt_t evmask, Window_t confine, QCursor* cursor, Bool_t grab = kTRUE, Bool_t owner_events = kTRUE); Set the X11 style active grabbing for ROOT TG widgets. TQtPointerGrabber * PointerGrabber(); { return fgGrabber; }. TQtClientWidget * GetPointerGrabber(); { return fgPointerGrabber; }. TQtClientWidget * GetButtonGrabber(); { return fgButtonGrabber; }. void SetButtonGrabber(TQtClientWidget* grabber); { fgButtonGrabber = grabber; }. void AppendButtonGrab(TQtClientWidget* ); { fButtonGrabList.append(widget); }. void RemoveButtonGrab(QObject* ). TQtEventQueue * Queue(). void o",MatchSource.WIKI,root/html604/TQtClientFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientFilter.html
https://root.cern/root/html604/TQtClientFilter.html:5723,Performance,queue,queue,5723,"Client; TQtEventQueue*fRootEventQueue; static TQtClientWidget*fgActiveGrabber; static TQtClientWidget*fgButtonGrabber; static QCursor*fgGrabPointerCursor; static UInt_tfgGrabPointerEventMask; static Bool_tfgGrabPointerOwner; static TQtPointerGrabber*fgGrabber; static TQtClientWidget*fgPointerGrabber; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance Chart:. QObject. ←; TQtClientFilter. Function documentation; Bool_t IsGrabSelected(UInt_t selectEventMask); return the selection by ""grabButton"" / ""grabPointer"". ~TQtClientFilter(). void AddKeyEvent(const QKeyEvent& event, TQtClientWidget* widget); Map and and to the ROOT event queue Qt KeyBoard event mapped to the ROOT Event_t; For ""dest"" widget. bool SelectGrab(Event_t& event, UInt_t selectEventMask, QMouseEvent& me); Select Event: -- 04.12.2005 --. bool eventFilter(QObject* o, QEvent* e); Dispatch The Qt event from event queue to Event_t structure; Not all of the event fields are valid for each event type,; except fType and fWindow. void GrabPointer(TQtClientWidget* grabber, UInt_t evmask, Window_t confine, QCursor* cursor, Bool_t grab = kTRUE, Bool_t owner_events = kTRUE); Set the X11 style active grabbing for ROOT TG widgets. TQtPointerGrabber * PointerGrabber(); { return fgGrabber; }. TQtClientWidget * GetPointerGrabber(); { return fgPointerGrabber; }. TQtClientWidget * GetButtonGrabber(); { return fgButtonGrabber; }. void SetButtonGrabber(TQtClientWidget* grabber); { fgButtonGrabber = grabber; }. void AppendButtonGrab(TQtClientWidget* ); { fButtonGrabList.append(widget); }. void RemoveButtonGrab(QObject* ). TQtEventQueue * Queue(). void operator=(const TQtClientFilter& ). TQtClientFilter(const TQtClientFilter& ). void SetKeyGrabber(TQtClientWidget* grabber); { fKeyGrabber = grabber;}. void UnSetKeyGrabber(TQtClientWidget* grabber); { if (fKeyGrabber == grabber) fKeyGrabber = 0; }. void RestoreLostGrabbing(Event_t& ev",MatchSource.WIKI,root/html604/TQtClientFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientFilter.html
https://root.cern/root/html604/TQtClientFilter.html:6443,Performance,Queue,Queue,6443,"etaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance Chart:. QObject. ←; TQtClientFilter. Function documentation; Bool_t IsGrabSelected(UInt_t selectEventMask); return the selection by ""grabButton"" / ""grabPointer"". ~TQtClientFilter(). void AddKeyEvent(const QKeyEvent& event, TQtClientWidget* widget); Map and and to the ROOT event queue Qt KeyBoard event mapped to the ROOT Event_t; For ""dest"" widget. bool SelectGrab(Event_t& event, UInt_t selectEventMask, QMouseEvent& me); Select Event: -- 04.12.2005 --. bool eventFilter(QObject* o, QEvent* e); Dispatch The Qt event from event queue to Event_t structure; Not all of the event fields are valid for each event type,; except fType and fWindow. void GrabPointer(TQtClientWidget* grabber, UInt_t evmask, Window_t confine, QCursor* cursor, Bool_t grab = kTRUE, Bool_t owner_events = kTRUE); Set the X11 style active grabbing for ROOT TG widgets. TQtPointerGrabber * PointerGrabber(); { return fgGrabber; }. TQtClientWidget * GetPointerGrabber(); { return fgPointerGrabber; }. TQtClientWidget * GetButtonGrabber(); { return fgButtonGrabber; }. void SetButtonGrabber(TQtClientWidget* grabber); { fgButtonGrabber = grabber; }. void AppendButtonGrab(TQtClientWidget* ); { fButtonGrabList.append(widget); }. void RemoveButtonGrab(QObject* ). TQtEventQueue * Queue(). void operator=(const TQtClientFilter& ). TQtClientFilter(const TQtClientFilter& ). void SetKeyGrabber(TQtClientWidget* grabber); { fKeyGrabber = grabber;}. void UnSetKeyGrabber(TQtClientWidget* grabber); { if (fKeyGrabber == grabber) fKeyGrabber = 0; }. void RestoreLostGrabbing(Event_t& event). TQtClientFilter(); {;}. » Author: Valeri Fine 21/01/2002 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/qt:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQtClientFilter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientFilter.html
https://root.cern/root/html604/TQtClientWidget.html:6706,Availability,mask,mask,6706,"const; boolQWidget::isMaximized() const; boolQWidget::isMinimized() const; boolQWidget::isModal() const; boolQWidget::isRightToLeft() const; boolQWidget::isTopLevel() const; boolQWidget::isVisible() const; boolQWidget::isVisibleTo(QWidget*) const; boolQObject::isWidgetType() const; boolQWidget::isWindow() const; boolQWidget::isWindowModified() const; static QWidget*QWidget::keyboardGrabber(); voidQObject::killTimer(int id); QLayout*QWidget::layout() const; Qt::LayoutDirectionQWidget::layoutDirection() const; intQFrame::lineWidth() const; QLocaleQWidget::locale() const; intQPaintDevice::logicalDpiX() const; intQPaintDevice::logicalDpiY() const; voidQWidget::lower(); QPointQWidget::mapFrom(QWidget*, const QPoint&) const; QPointQWidget::mapFromGlobal(const QPoint&) const; QPointQWidget::mapFromParent(const QPoint&) const; QPointQWidget::mapTo(QWidget*, const QPoint&) const; QPointQWidget::mapToGlobal(const QPoint&) const; QPointQWidget::mapToParent(const QPoint&) const; QRegionQWidget::mask() const; intQWidget::maximumHeight() const; QSizeQWidget::maximumSize() const; intQWidget::maximumWidth() const; virtual const QMetaObject*metaObject() const; intQFrame::midLineWidth() const; intQWidget::minimumHeight() const; QSizeQWidget::minimumSize() const; virtual QSizeQWidget::minimumSizeHint() const; intQWidget::minimumWidth() const; static QWidget*QWidget::mouseGrabber(); voidQWidget::move(const QPoint&); voidQWidget::move(int x, int y); voidQObject::moveToThread(QThread* thread); QWidget*QWidget::nativeParentWidget() const; QWidget*QWidget::nextInFocusChain() const; QRectQWidget::normalGeometry() const; intQPaintDevice::numColors() const; QStringQObject::objectName() const; voidQWidget::overrideWindowFlags(Qt::WindowFlags type); voidQWidget::overrideWindowState(Qt::WindowStates state); virtual QPaintEngine*QWidget::paintEngine() const; boolQPaintDevice::paintingActive() const; const QPalette&QWidget::palette() const; QObject*QObject::parent() const; QWidget*QWidget::parentWi",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:20689,Availability,mask,mask,20689,"ask; static QFrame::StyleMaskQFrame::Shape_Mask; static QFrame::ShapeQFrame::StyledPanel; static QFrame::ShadowQFrame::Sunken; static QFrame::ShapeQFrame::VLine; static QFrame::ShapeQFrame::WinPanel; static TQtClientWidget::(anonymous)kInsert; static TQtClientWidget::(anonymous)kRemove; static TQtClientWidget::(anonymous)kTestKey; static const QMetaObjectstaticMetaObject; static const QMetaObjectQFrame::staticMetaObject; static const QMetaObjectQWidget::staticMetaObject; static const QMetaObjectQObject::staticMetaObject. protected:. QScopedPointer<QObjectData>QObject::d_ptr; EMouseButtonfButton; TQtWidget*fCanvasWidget; boolfDeleteNotify; QColor*fEraseColorColor to paint widget background with our PainEvent; QPixmap*fErasePixmappixmap to paint widget background with our PainEvent; QCursor*fGrabButtonCursor; UInt_tfGrabButtonMaskmodifier button mask for TVirtualX::GrabButton; UInt_tfGrabEventButtonMaskinput event mask for TVirtualX::GrabButton; UInt_tfGrabEventPointerMaskinput event mask for TVirtualX::GrabPointer; QCursor*fGrabPointerCursor; map<QKeySequence,QShortcut*>fGrabbedKey; TQtClientGuard*fGuard; boolfIsClosing; TGWindow*fMyRootWindowback pointer to the host window object; QCursor*fNormalPointerCursor; Bool_tfPointerOwner; UInt_tfSaveSelectInputMaskTo save dutinr the grabbing the selectInput; UInt_tfSelectEventMaskinput mask for SelectInput; ushortQPaintDevice::paintersrefcount; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQtClientWidget(TQtClientGuard* guard, QWidget* parent = 0, const char* name = 0, Qt::WFlags f = 0). ~TQtClientWidget(); fprintf(stderr, ""TQtClientWidget::~TQtClientWidget dtor %p\n"", this);; remove the event filter. void closeEvent(QCloseEvent* ev); This Qt QCloseEvent event handler. void setEraseColor(const QColor& color); Color to paint widget background with our PainEve",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:20759,Availability,mask,mask,20759,"ask; static QFrame::StyleMaskQFrame::Shape_Mask; static QFrame::ShapeQFrame::StyledPanel; static QFrame::ShadowQFrame::Sunken; static QFrame::ShapeQFrame::VLine; static QFrame::ShapeQFrame::WinPanel; static TQtClientWidget::(anonymous)kInsert; static TQtClientWidget::(anonymous)kRemove; static TQtClientWidget::(anonymous)kTestKey; static const QMetaObjectstaticMetaObject; static const QMetaObjectQFrame::staticMetaObject; static const QMetaObjectQWidget::staticMetaObject; static const QMetaObjectQObject::staticMetaObject. protected:. QScopedPointer<QObjectData>QObject::d_ptr; EMouseButtonfButton; TQtWidget*fCanvasWidget; boolfDeleteNotify; QColor*fEraseColorColor to paint widget background with our PainEvent; QPixmap*fErasePixmappixmap to paint widget background with our PainEvent; QCursor*fGrabButtonCursor; UInt_tfGrabButtonMaskmodifier button mask for TVirtualX::GrabButton; UInt_tfGrabEventButtonMaskinput event mask for TVirtualX::GrabButton; UInt_tfGrabEventPointerMaskinput event mask for TVirtualX::GrabPointer; QCursor*fGrabPointerCursor; map<QKeySequence,QShortcut*>fGrabbedKey; TQtClientGuard*fGuard; boolfIsClosing; TGWindow*fMyRootWindowback pointer to the host window object; QCursor*fNormalPointerCursor; Bool_tfPointerOwner; UInt_tfSaveSelectInputMaskTo save dutinr the grabbing the selectInput; UInt_tfSelectEventMaskinput mask for SelectInput; ushortQPaintDevice::paintersrefcount; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQtClientWidget(TQtClientGuard* guard, QWidget* parent = 0, const char* name = 0, Qt::WFlags f = 0). ~TQtClientWidget(); fprintf(stderr, ""TQtClientWidget::~TQtClientWidget dtor %p\n"", this);; remove the event filter. void closeEvent(QCloseEvent* ev); This Qt QCloseEvent event handler. void setEraseColor(const QColor& color); Color to paint widget background with our PainEve",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:20830,Availability,mask,mask,20830,"ask; static QFrame::StyleMaskQFrame::Shape_Mask; static QFrame::ShapeQFrame::StyledPanel; static QFrame::ShadowQFrame::Sunken; static QFrame::ShapeQFrame::VLine; static QFrame::ShapeQFrame::WinPanel; static TQtClientWidget::(anonymous)kInsert; static TQtClientWidget::(anonymous)kRemove; static TQtClientWidget::(anonymous)kTestKey; static const QMetaObjectstaticMetaObject; static const QMetaObjectQFrame::staticMetaObject; static const QMetaObjectQWidget::staticMetaObject; static const QMetaObjectQObject::staticMetaObject. protected:. QScopedPointer<QObjectData>QObject::d_ptr; EMouseButtonfButton; TQtWidget*fCanvasWidget; boolfDeleteNotify; QColor*fEraseColorColor to paint widget background with our PainEvent; QPixmap*fErasePixmappixmap to paint widget background with our PainEvent; QCursor*fGrabButtonCursor; UInt_tfGrabButtonMaskmodifier button mask for TVirtualX::GrabButton; UInt_tfGrabEventButtonMaskinput event mask for TVirtualX::GrabButton; UInt_tfGrabEventPointerMaskinput event mask for TVirtualX::GrabPointer; QCursor*fGrabPointerCursor; map<QKeySequence,QShortcut*>fGrabbedKey; TQtClientGuard*fGuard; boolfIsClosing; TGWindow*fMyRootWindowback pointer to the host window object; QCursor*fNormalPointerCursor; Bool_tfPointerOwner; UInt_tfSaveSelectInputMaskTo save dutinr the grabbing the selectInput; UInt_tfSelectEventMaskinput mask for SelectInput; ushortQPaintDevice::paintersrefcount; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQtClientWidget(TQtClientGuard* guard, QWidget* parent = 0, const char* name = 0, Qt::WFlags f = 0). ~TQtClientWidget(); fprintf(stderr, ""TQtClientWidget::~TQtClientWidget dtor %p\n"", this);; remove the event filter. void closeEvent(QCloseEvent* ev); This Qt QCloseEvent event handler. void setEraseColor(const QColor& color); Color to paint widget background with our PainEve",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:21183,Availability,mask,mask,21183,"ask; static QFrame::StyleMaskQFrame::Shape_Mask; static QFrame::ShapeQFrame::StyledPanel; static QFrame::ShadowQFrame::Sunken; static QFrame::ShapeQFrame::VLine; static QFrame::ShapeQFrame::WinPanel; static TQtClientWidget::(anonymous)kInsert; static TQtClientWidget::(anonymous)kRemove; static TQtClientWidget::(anonymous)kTestKey; static const QMetaObjectstaticMetaObject; static const QMetaObjectQFrame::staticMetaObject; static const QMetaObjectQWidget::staticMetaObject; static const QMetaObjectQObject::staticMetaObject. protected:. QScopedPointer<QObjectData>QObject::d_ptr; EMouseButtonfButton; TQtWidget*fCanvasWidget; boolfDeleteNotify; QColor*fEraseColorColor to paint widget background with our PainEvent; QPixmap*fErasePixmappixmap to paint widget background with our PainEvent; QCursor*fGrabButtonCursor; UInt_tfGrabButtonMaskmodifier button mask for TVirtualX::GrabButton; UInt_tfGrabEventButtonMaskinput event mask for TVirtualX::GrabButton; UInt_tfGrabEventPointerMaskinput event mask for TVirtualX::GrabPointer; QCursor*fGrabPointerCursor; map<QKeySequence,QShortcut*>fGrabbedKey; TQtClientGuard*fGuard; boolfIsClosing; TGWindow*fMyRootWindowback pointer to the host window object; QCursor*fNormalPointerCursor; Bool_tfPointerOwner; UInt_tfSaveSelectInputMaskTo save dutinr the grabbing the selectInput; UInt_tfSelectEventMaskinput mask for SelectInput; ushortQPaintDevice::paintersrefcount; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQtClientWidget(TQtClientGuard* guard, QWidget* parent = 0, const char* name = 0, Qt::WFlags f = 0). ~TQtClientWidget(); fprintf(stderr, ""TQtClientWidget::~TQtClientWidget dtor %p\n"", this);; remove the event filter. void closeEvent(QCloseEvent* ev); This Qt QCloseEvent event handler. void setEraseColor(const QColor& color); Color to paint widget background with our PainEve",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:22221,Availability,down,down,22221,"kTo save dutinr the grabbing the selectInput; UInt_tfSelectEventMaskinput mask for SelectInput; ushortQPaintDevice::paintersrefcount; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQtClientWidget(TQtClientGuard* guard, QWidget* parent = 0, const char* name = 0, Qt::WFlags f = 0). ~TQtClientWidget(); fprintf(stderr, ""TQtClientWidget::~TQtClientWidget dtor %p\n"", this);; remove the event filter. void closeEvent(QCloseEvent* ev); This Qt QCloseEvent event handler. void setEraseColor(const QColor& color); Color to paint widget background with our PainEvent. void setErasePixmap(const QPixmap& pixmap); pixmap to paint widget background with our PainEvent. bool IsGrabbed(Event_t& ev); - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -; XGrabButton(3X11) XLIB FUNCTIONS XGrabButton(3X11); * The pointer is not grabbed, and the specified button is logically; pressed when the specified modifier keys are logically down,; and no other buttons or modifier keys are logically down.; * The grab_window contains the pointer.; * The confine_to window (if any) is viewable.; * A passive grab on the same button/key combination does not exist; on any ancestor of grab_window.; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -. TQtClientWidget * IsKeyGrabbed(const Event_t& ev); Check ROOT Event_t ev structure for the KeyGrab mask. void GrabEvent(Event_t& ev, bool own = true); replace the original Windows_t with the grabbing id and; re-caclulate the mouse coordinate; to respect the new Windows_t id if any. void SelectInput(UInt_t evmask); Select input and chech whether qwe nat mouse tracking. void SetButtonMask(UInt_t modifier = kAnyModifier, EMouseButton button = kAnyButton); Set the Button mask. void UnSetButtonMask(bool dtor = false); Unset the Button mask. Bool_t SetK",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:22280,Availability,down,down,22280,"kTo save dutinr the grabbing the selectInput; UInt_tfSelectEventMaskinput mask for SelectInput; ushortQPaintDevice::paintersrefcount; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQtClientWidget(TQtClientGuard* guard, QWidget* parent = 0, const char* name = 0, Qt::WFlags f = 0). ~TQtClientWidget(); fprintf(stderr, ""TQtClientWidget::~TQtClientWidget dtor %p\n"", this);; remove the event filter. void closeEvent(QCloseEvent* ev); This Qt QCloseEvent event handler. void setEraseColor(const QColor& color); Color to paint widget background with our PainEvent. void setErasePixmap(const QPixmap& pixmap); pixmap to paint widget background with our PainEvent. bool IsGrabbed(Event_t& ev); - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -; XGrabButton(3X11) XLIB FUNCTIONS XGrabButton(3X11); * The pointer is not grabbed, and the specified button is logically; pressed when the specified modifier keys are logically down,; and no other buttons or modifier keys are logically down.; * The grab_window contains the pointer.; * The confine_to window (if any) is viewable.; * A passive grab on the same button/key combination does not exist; on any ancestor of grab_window.; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -. TQtClientWidget * IsKeyGrabbed(const Event_t& ev); Check ROOT Event_t ev structure for the KeyGrab mask. void GrabEvent(Event_t& ev, bool own = true); replace the original Windows_t with the grabbing id and; re-caclulate the mouse coordinate; to respect the new Windows_t id if any. void SelectInput(UInt_t evmask); Select input and chech whether qwe nat mouse tracking. void SetButtonMask(UInt_t modifier = kAnyModifier, EMouseButton button = kAnyButton); Set the Button mask. void UnSetButtonMask(bool dtor = false); Unset the Button mask. Bool_t SetK",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:22656,Availability,mask,mask,22656,"et::~TQtClientWidget dtor %p\n"", this);; remove the event filter. void closeEvent(QCloseEvent* ev); This Qt QCloseEvent event handler. void setEraseColor(const QColor& color); Color to paint widget background with our PainEvent. void setErasePixmap(const QPixmap& pixmap); pixmap to paint widget background with our PainEvent. bool IsGrabbed(Event_t& ev); - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -; XGrabButton(3X11) XLIB FUNCTIONS XGrabButton(3X11); * The pointer is not grabbed, and the specified button is logically; pressed when the specified modifier keys are logically down,; and no other buttons or modifier keys are logically down.; * The grab_window contains the pointer.; * The confine_to window (if any) is viewable.; * A passive grab on the same button/key combination does not exist; on any ancestor of grab_window.; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -. TQtClientWidget * IsKeyGrabbed(const Event_t& ev); Check ROOT Event_t ev structure for the KeyGrab mask. void GrabEvent(Event_t& ev, bool own = true); replace the original Windows_t with the grabbing id and; re-caclulate the mouse coordinate; to respect the new Windows_t id if any. void SelectInput(UInt_t evmask); Select input and chech whether qwe nat mouse tracking. void SetButtonMask(UInt_t modifier = kAnyModifier, EMouseButton button = kAnyButton); Set the Button mask. void UnSetButtonMask(bool dtor = false); Unset the Button mask. Bool_t SetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier, int insert = kInsert); Set the key button mask; insert = -1 - remove; 0 - test; +1 - insert. void SetCanvasWidget(TQtWidget* widget); Associate this widget with the parent ROOT gui widget. void UnSetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier); Unset the key button mask. void Accelerate(); Qt slot to respond to the ""Keyboard accelerator signal"". void Disconnect(); Disconnect the Canvas and ROOT gui widget before destroy. vo",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:23029,Availability,mask,mask,23029,"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -; XGrabButton(3X11) XLIB FUNCTIONS XGrabButton(3X11); * The pointer is not grabbed, and the specified button is logically; pressed when the specified modifier keys are logically down,; and no other buttons or modifier keys are logically down.; * The grab_window contains the pointer.; * The confine_to window (if any) is viewable.; * A passive grab on the same button/key combination does not exist; on any ancestor of grab_window.; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -. TQtClientWidget * IsKeyGrabbed(const Event_t& ev); Check ROOT Event_t ev structure for the KeyGrab mask. void GrabEvent(Event_t& ev, bool own = true); replace the original Windows_t with the grabbing id and; re-caclulate the mouse coordinate; to respect the new Windows_t id if any. void SelectInput(UInt_t evmask); Select input and chech whether qwe nat mouse tracking. void SetButtonMask(UInt_t modifier = kAnyModifier, EMouseButton button = kAnyButton); Set the Button mask. void UnSetButtonMask(bool dtor = false); Unset the Button mask. Bool_t SetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier, int insert = kInsert); Set the key button mask; insert = -1 - remove; 0 - test; +1 - insert. void SetCanvasWidget(TQtWidget* widget); Associate this widget with the parent ROOT gui widget. void UnSetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier); Unset the key button mask. void Accelerate(); Qt slot to respond to the ""Keyboard accelerator signal"". void Disconnect(); Disconnect the Canvas and ROOT gui widget before destroy. void paintEvent(QPaintEvent* ). bool DeleteNotify(). {return fDeleteNotify; }. TQtWidget * GetCanvasWidget() const. { return fCanvasWidget;}. bool IsClosing(). { return fIsClosing; }. UInt_t IsEventSelected(UInt_t evmask) const. void SetCursor(). void SetCursor(Cursor_t cursor). void SetClosing(bool flag = kTRUE). { fIsClosing = flag;}. void SetDeleteNotify(bool flag = tr",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:23093,Availability,mask,mask,23093,"B FUNCTIONS XGrabButton(3X11); * The pointer is not grabbed, and the specified button is logically; pressed when the specified modifier keys are logically down,; and no other buttons or modifier keys are logically down.; * The grab_window contains the pointer.; * The confine_to window (if any) is viewable.; * A passive grab on the same button/key combination does not exist; on any ancestor of grab_window.; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -. TQtClientWidget * IsKeyGrabbed(const Event_t& ev); Check ROOT Event_t ev structure for the KeyGrab mask. void GrabEvent(Event_t& ev, bool own = true); replace the original Windows_t with the grabbing id and; re-caclulate the mouse coordinate; to respect the new Windows_t id if any. void SelectInput(UInt_t evmask); Select input and chech whether qwe nat mouse tracking. void SetButtonMask(UInt_t modifier = kAnyModifier, EMouseButton button = kAnyButton); Set the Button mask. void UnSetButtonMask(bool dtor = false); Unset the Button mask. Bool_t SetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier, int insert = kInsert); Set the key button mask; insert = -1 - remove; 0 - test; +1 - insert. void SetCanvasWidget(TQtWidget* widget); Associate this widget with the parent ROOT gui widget. void UnSetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier); Unset the key button mask. void Accelerate(); Qt slot to respond to the ""Keyboard accelerator signal"". void Disconnect(); Disconnect the Canvas and ROOT gui widget before destroy. void paintEvent(QPaintEvent* ). bool DeleteNotify(). {return fDeleteNotify; }. TQtWidget * GetCanvasWidget() const. { return fCanvasWidget;}. bool IsClosing(). { return fIsClosing; }. UInt_t IsEventSelected(UInt_t evmask) const. void SetCursor(). void SetCursor(Cursor_t cursor). void SetClosing(bool flag = kTRUE). { fIsClosing = flag;}. void SetDeleteNotify(bool flag = true). {fDeleteNotify = flag;}. void SetAttributeEventMask(UInt_t evmask). { SelectInpu",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:23210,Availability,mask,mask,23210,"the specified modifier keys are logically down,; and no other buttons or modifier keys are logically down.; * The grab_window contains the pointer.; * The confine_to window (if any) is viewable.; * A passive grab on the same button/key combination does not exist; on any ancestor of grab_window.; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -. TQtClientWidget * IsKeyGrabbed(const Event_t& ev); Check ROOT Event_t ev structure for the KeyGrab mask. void GrabEvent(Event_t& ev, bool own = true); replace the original Windows_t with the grabbing id and; re-caclulate the mouse coordinate; to respect the new Windows_t id if any. void SelectInput(UInt_t evmask); Select input and chech whether qwe nat mouse tracking. void SetButtonMask(UInt_t modifier = kAnyModifier, EMouseButton button = kAnyButton); Set the Button mask. void UnSetButtonMask(bool dtor = false); Unset the Button mask. Bool_t SetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier, int insert = kInsert); Set the key button mask; insert = -1 - remove; 0 - test; +1 - insert. void SetCanvasWidget(TQtWidget* widget); Associate this widget with the parent ROOT gui widget. void UnSetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier); Unset the key button mask. void Accelerate(); Qt slot to respond to the ""Keyboard accelerator signal"". void Disconnect(); Disconnect the Canvas and ROOT gui widget before destroy. void paintEvent(QPaintEvent* ). bool DeleteNotify(). {return fDeleteNotify; }. TQtWidget * GetCanvasWidget() const. { return fCanvasWidget;}. bool IsClosing(). { return fIsClosing; }. UInt_t IsEventSelected(UInt_t evmask) const. void SetCursor(). void SetCursor(Cursor_t cursor). void SetClosing(bool flag = kTRUE). { fIsClosing = flag;}. void SetDeleteNotify(bool flag = true). {fDeleteNotify = flag;}. void SetAttributeEventMask(UInt_t evmask). { SelectInput (evmask);}. void SetButtonEventMask(UInt_t evmask, Cursor_t cursor = 0). { fGrabEventButtonMask = evmask; fGrab",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:23448,Availability,mask,mask,23448,"button/key combination does not exist; on any ancestor of grab_window.; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -. TQtClientWidget * IsKeyGrabbed(const Event_t& ev); Check ROOT Event_t ev structure for the KeyGrab mask. void GrabEvent(Event_t& ev, bool own = true); replace the original Windows_t with the grabbing id and; re-caclulate the mouse coordinate; to respect the new Windows_t id if any. void SelectInput(UInt_t evmask); Select input and chech whether qwe nat mouse tracking. void SetButtonMask(UInt_t modifier = kAnyModifier, EMouseButton button = kAnyButton); Set the Button mask. void UnSetButtonMask(bool dtor = false); Unset the Button mask. Bool_t SetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier, int insert = kInsert); Set the key button mask; insert = -1 - remove; 0 - test; +1 - insert. void SetCanvasWidget(TQtWidget* widget); Associate this widget with the parent ROOT gui widget. void UnSetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier); Unset the key button mask. void Accelerate(); Qt slot to respond to the ""Keyboard accelerator signal"". void Disconnect(); Disconnect the Canvas and ROOT gui widget before destroy. void paintEvent(QPaintEvent* ). bool DeleteNotify(). {return fDeleteNotify; }. TQtWidget * GetCanvasWidget() const. { return fCanvasWidget;}. bool IsClosing(). { return fIsClosing; }. UInt_t IsEventSelected(UInt_t evmask) const. void SetCursor(). void SetCursor(Cursor_t cursor). void SetClosing(bool flag = kTRUE). { fIsClosing = flag;}. void SetDeleteNotify(bool flag = true). {fDeleteNotify = flag;}. void SetAttributeEventMask(UInt_t evmask). { SelectInput (evmask);}. void SetButtonEventMask(UInt_t evmask, Cursor_t cursor = 0). { fGrabEventButtonMask = evmask; fGrabButtonCursor =(QCursor *) crsr; }. EMouseButton Button() const. { return fButton; }. UInt_t ButtonEventMask() const. { return fGrabEventButtonMask;}. UInt_t ButtonMask() const. { return fGrabButtonMask; }. UInt_t PointerMask()",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:5065,Deployability,install,installEventFilter,5065,"pe type, Qt::GestureFlags flags = Qt::GestureFlags()); voidQWidget::grabKeyboard(); voidQWidget::grabMouse(); voidQWidget::grabMouse(const QCursor&); QCursor*GrabPointerCursor() const; intQWidget::grabShortcut(const QKeySequence& key, Qt::ShortcutContext context = Qt::WindowShortcut); QGraphicsEffect*QWidget::graphicsEffect() const; QGraphicsProxyWidget*QWidget::graphicsProxyWidget() const; Qt::HANDLEQWidget::handle() const; boolQWidget::hasFocus() const; boolQWidget::hasMouseTracking() const; intQWidget::height() const; virtual intQWidget::heightForWidth(int) const; intQPaintDevice::heightMM() const; voidQWidget::hide(); boolQObject::inherits(const char* classname) const; QInputContext*QWidget::inputContext(); Qt::InputMethodHintsQWidget::inputMethodHints() const; virtual QVariantQWidget::inputMethodQuery(Qt::InputMethodQuery) const; voidQWidget::insertAction(QAction* before, QAction* action); voidQWidget::insertActions(QAction* before, QList<QAction*> actions); voidQObject::installEventFilter(QObject*); WIdQWidget::internalWinId() const; virtual TClass*IsA() const; boolQWidget::isActiveWindow() const; boolQWidget::isAncestorOf(const QWidget* child) const; boolIsClosing(); boolQWidget::isEnabled() const; boolQWidget::isEnabledTo(QWidget*) const; boolQWidget::isEnabledToTLW() const; UInt_tIsEventSelected(UInt_t evmask) const; boolQWidget::isFullScreen() const; boolIsGrabbed(Event_t& ev); boolIsGrabButtonSelected(UInt_t evmask) const; boolIsGrabOwner(); boolIsGrabPointerSelected(UInt_t evmask) const; boolQWidget::isHidden() const; TQtClientWidget*IsKeyGrabbed(const Event_t& ev); boolQWidget::isLeftToRight() const; boolQWidget::isMaximized() const; boolQWidget::isMinimized() const; boolQWidget::isModal() const; boolQWidget::isRightToLeft() const; boolQWidget::isTopLevel() const; boolQWidget::isVisible() const; boolQWidget::isVisibleTo(QWidget*) const; boolQObject::isWidgetType() const; boolQWidget::isWindow() const; boolQWidget::isWindowModified() const; static QWidget",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:8152,Deployability,release,releaseKeyboard,8152," voidQObject::moveToThread(QThread* thread); QWidget*QWidget::nativeParentWidget() const; QWidget*QWidget::nextInFocusChain() const; QRectQWidget::normalGeometry() const; intQPaintDevice::numColors() const; QStringQObject::objectName() const; voidQWidget::overrideWindowFlags(Qt::WindowFlags type); voidQWidget::overrideWindowState(Qt::WindowStates state); virtual QPaintEngine*QWidget::paintEngine() const; boolQPaintDevice::paintingActive() const; const QPalette&QWidget::palette() const; QObject*QObject::parent() const; QWidget*QWidget::parentWidget() const; intQPaintDevice::physicalDpiX() const; intQPaintDevice::physicalDpiY() const; UInt_tPointerMask() const; QPointQWidget::pos() const; QWidget*QWidget::previousInFocusChain() const; QVariantQObject::property(const char* name) const; virtual intqt_metacall(QMetaObject::Call, int, void**); virtual void*qt_metacast(const char*); voidQWidget::raise(); QRectQWidget::rect() const; static uintQObject::registerUserData(); voidQWidget::releaseKeyboard(); voidQWidget::releaseMouse(); voidQWidget::releaseShortcut(int id); voidQWidget::removeAction(QAction* action); voidQObject::removeEventFilter(QObject*); voidQWidget::render(QPaintDevice* target, const QPoint& targetOffset = QPoint(), const QRegion& sourceRegion = QRegion(), QWidget::RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren)); voidQWidget::render(QPainter* painter, const QPoint& targetOffset = QPoint(), const QRegion& sourceRegion = QRegion(), QWidget::RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren)); voidQWidget::repaint(); voidQWidget::repaint(const QRect&); voidQWidget::repaint(const QRegion&); voidQWidget::repaint(int x, int y, int w, int h); voidQWidget::resize(const QSize&); voidQWidget::resize(int w, int h); boolQWidget::restoreGeometry(const QByteArray& geometry); QByteArrayQWidget::saveGeometry() const; voidQWidget::scroll(int dx, int dy); voidQWidget::scroll(int dx, int dy, const QRect&); UInt_tSelectEventM",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:8184,Deployability,release,releaseMouse,8184,"read* thread); QWidget*QWidget::nativeParentWidget() const; QWidget*QWidget::nextInFocusChain() const; QRectQWidget::normalGeometry() const; intQPaintDevice::numColors() const; QStringQObject::objectName() const; voidQWidget::overrideWindowFlags(Qt::WindowFlags type); voidQWidget::overrideWindowState(Qt::WindowStates state); virtual QPaintEngine*QWidget::paintEngine() const; boolQPaintDevice::paintingActive() const; const QPalette&QWidget::palette() const; QObject*QObject::parent() const; QWidget*QWidget::parentWidget() const; intQPaintDevice::physicalDpiX() const; intQPaintDevice::physicalDpiY() const; UInt_tPointerMask() const; QPointQWidget::pos() const; QWidget*QWidget::previousInFocusChain() const; QVariantQObject::property(const char* name) const; virtual intqt_metacall(QMetaObject::Call, int, void**); virtual void*qt_metacast(const char*); voidQWidget::raise(); QRectQWidget::rect() const; static uintQObject::registerUserData(); voidQWidget::releaseKeyboard(); voidQWidget::releaseMouse(); voidQWidget::releaseShortcut(int id); voidQWidget::removeAction(QAction* action); voidQObject::removeEventFilter(QObject*); voidQWidget::render(QPaintDevice* target, const QPoint& targetOffset = QPoint(), const QRegion& sourceRegion = QRegion(), QWidget::RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren)); voidQWidget::render(QPainter* painter, const QPoint& targetOffset = QPoint(), const QRegion& sourceRegion = QRegion(), QWidget::RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren)); voidQWidget::repaint(); voidQWidget::repaint(const QRect&); voidQWidget::repaint(const QRegion&); voidQWidget::repaint(int x, int y, int w, int h); voidQWidget::resize(const QSize&); voidQWidget::resize(int w, int h); boolQWidget::restoreGeometry(const QByteArray& geometry); QByteArrayQWidget::saveGeometry() const; voidQWidget::scroll(int dx, int dy); voidQWidget::scroll(int dx, int dy, const QRect&); UInt_tSelectEventMask() const; voidSelectInput(UI",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:8213,Deployability,release,releaseShortcut,8213,":nativeParentWidget() const; QWidget*QWidget::nextInFocusChain() const; QRectQWidget::normalGeometry() const; intQPaintDevice::numColors() const; QStringQObject::objectName() const; voidQWidget::overrideWindowFlags(Qt::WindowFlags type); voidQWidget::overrideWindowState(Qt::WindowStates state); virtual QPaintEngine*QWidget::paintEngine() const; boolQPaintDevice::paintingActive() const; const QPalette&QWidget::palette() const; QObject*QObject::parent() const; QWidget*QWidget::parentWidget() const; intQPaintDevice::physicalDpiX() const; intQPaintDevice::physicalDpiY() const; UInt_tPointerMask() const; QPointQWidget::pos() const; QWidget*QWidget::previousInFocusChain() const; QVariantQObject::property(const char* name) const; virtual intqt_metacall(QMetaObject::Call, int, void**); virtual void*qt_metacast(const char*); voidQWidget::raise(); QRectQWidget::rect() const; static uintQObject::registerUserData(); voidQWidget::releaseKeyboard(); voidQWidget::releaseMouse(); voidQWidget::releaseShortcut(int id); voidQWidget::removeAction(QAction* action); voidQObject::removeEventFilter(QObject*); voidQWidget::render(QPaintDevice* target, const QPoint& targetOffset = QPoint(), const QRegion& sourceRegion = QRegion(), QWidget::RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren)); voidQWidget::render(QPainter* painter, const QPoint& targetOffset = QPoint(), const QRegion& sourceRegion = QRegion(), QWidget::RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren)); voidQWidget::repaint(); voidQWidget::repaint(const QRect&); voidQWidget::repaint(const QRegion&); voidQWidget::repaint(int x, int y, int w, int h); voidQWidget::resize(const QSize&); voidQWidget::resize(int w, int h); boolQWidget::restoreGeometry(const QByteArray& geometry); QByteArrayQWidget::saveGeometry() const; voidQWidget::scroll(int dx, int dy); voidQWidget::scroll(int dx, int dy, const QRect&); UInt_tSelectEventMask() const; voidSelectInput(UInt_t evmask); voidQWidget::set",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:14885,Deployability,update,update,14885," const; QSizePolicyQWidget::sizePolicy() const; voidQWidget::stackUnder(QWidget*); intQObject::startTimer(int interval); QStringQWidget::statusTip() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; static QStringtr(const char* s, const char* c = 0); static QStringtr(const char* s, const char* c, int n); static QStringtrUtf8(const char* s, const char* c = 0); static QStringtrUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidUnSetButtonMask(bool dtor = false); voidQWidget::unsetCursor(); voidUnSetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::width() const; intQPaintDevice::widthMM() const; QWidget*QWidget::window() const; QStringQWidget::windowFilePath() const; Qt::WindowFlagsQWidget::windowFlags() const; QIconQWidget::windowIcon() const; QStringQWidget::windowIconText() const; Qt::WindowModalityQWidget::windowModality() const; qrealQWidget::windowOpacity() const; QStringQWidget::windowRole() const; Qt::WindowStatesQWidget::windowState() const; QWindowSurface*QWidget::windowSurface() const; QStringQWidget::windowTitle() const; Qt::WindowTypeQWidget::windowType() const; WIdQWidget::winId() const; intQWidget::x() const; const QX11Info&QWidget::x11Info() const; Qt::HANDLEQWidget::x11PictureHandle() co",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:14908,Deployability,update,update,14908,"get::sizePolicy() const; voidQWidget::stackUnder(QWidget*); intQObject::startTimer(int interval); QStringQWidget::statusTip() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; static QStringtr(const char* s, const char* c = 0); static QStringtr(const char* s, const char* c, int n); static QStringtrUtf8(const char* s, const char* c = 0); static QStringtrUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidUnSetButtonMask(bool dtor = false); voidQWidget::unsetCursor(); voidUnSetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::width() const; intQPaintDevice::widthMM() const; QWidget*QWidget::window() const; QStringQWidget::windowFilePath() const; Qt::WindowFlagsQWidget::windowFlags() const; QIconQWidget::windowIcon() const; QStringQWidget::windowIconText() const; Qt::WindowModalityQWidget::windowModality() const; qrealQWidget::windowOpacity() const; QStringQWidget::windowRole() const; Qt::WindowStatesQWidget::windowState() const; QWindowSurface*QWidget::windowSurface() const; QStringQWidget::windowTitle() const; Qt::WindowTypeQWidget::windowType() const; WIdQWidget::winId() const; intQWidget::x() const; const QX11Info&QWidget::x11Info() const; Qt::HANDLEQWidget::x11PictureHandle() const; intQWidget::y() co",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:14943,Deployability,update,update,14943,":sizePolicy() const; voidQWidget::stackUnder(QWidget*); intQObject::startTimer(int interval); QStringQWidget::statusTip() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; static QStringtr(const char* s, const char* c = 0); static QStringtr(const char* s, const char* c, int n); static QStringtrUtf8(const char* s, const char* c = 0); static QStringtrUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidUnSetButtonMask(bool dtor = false); voidQWidget::unsetCursor(); voidUnSetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::width() const; intQPaintDevice::widthMM() const; QWidget*QWidget::window() const; QStringQWidget::windowFilePath() const; Qt::WindowFlagsQWidget::windowFlags() const; QIconQWidget::windowIcon() const; QStringQWidget::windowIconText() const; Qt::WindowModalityQWidget::windowModality() const; qrealQWidget::windowOpacity() const; QStringQWidget::windowRole() const; Qt::WindowStatesQWidget::windowState() const; QWindowSurface*QWidget::windowSurface() const; QStringQWidget::windowTitle() const; Qt::WindowTypeQWidget::windowType() const; WIdQWidget::winId() const; intQWidget::x() const; const QX11Info&QWidget::x11Info() const; Qt::HANDLEQWidget::x11PictureHandle() const; intQWidget::y() const.",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:14980,Deployability,update,update,14980,":sizePolicy() const; voidQWidget::stackUnder(QWidget*); intQObject::startTimer(int interval); QStringQWidget::statusTip() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; static QStringtr(const char* s, const char* c = 0); static QStringtr(const char* s, const char* c, int n); static QStringtrUtf8(const char* s, const char* c = 0); static QStringtrUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidUnSetButtonMask(bool dtor = false); voidQWidget::unsetCursor(); voidUnSetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::width() const; intQPaintDevice::widthMM() const; QWidget*QWidget::window() const; QStringQWidget::windowFilePath() const; Qt::WindowFlagsQWidget::windowFlags() const; QIconQWidget::windowIcon() const; QStringQWidget::windowIconText() const; Qt::WindowModalityQWidget::windowModality() const; qrealQWidget::windowOpacity() const; QStringQWidget::windowRole() const; Qt::WindowStatesQWidget::windowState() const; QWindowSurface*QWidget::windowSurface() const; QStringQWidget::windowTitle() const; Qt::WindowTypeQWidget::windowType() const; WIdQWidget::winId() const; intQWidget::x() const; const QX11Info&QWidget::x11Info() const; Qt::HANDLEQWidget::x11PictureHandle() const; intQWidget::y() const.",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:15029,Deployability,update,updateGeometry,15029,":sizePolicy() const; voidQWidget::stackUnder(QWidget*); intQObject::startTimer(int interval); QStringQWidget::statusTip() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; static QStringtr(const char* s, const char* c = 0); static QStringtr(const char* s, const char* c, int n); static QStringtrUtf8(const char* s, const char* c = 0); static QStringtrUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidUnSetButtonMask(bool dtor = false); voidQWidget::unsetCursor(); voidUnSetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::width() const; intQPaintDevice::widthMM() const; QWidget*QWidget::window() const; QStringQWidget::windowFilePath() const; Qt::WindowFlagsQWidget::windowFlags() const; QIconQWidget::windowIcon() const; QStringQWidget::windowIconText() const; Qt::WindowModalityQWidget::windowModality() const; qrealQWidget::windowOpacity() const; QStringQWidget::windowRole() const; Qt::WindowStatesQWidget::windowState() const; QWindowSurface*QWidget::windowSurface() const; QStringQWidget::windowTitle() const; Qt::WindowTypeQWidget::windowType() const; WIdQWidget::winId() const; intQWidget::x() const; const QX11Info&QWidget::x11Info() const; Qt::HANDLEQWidget::x11PictureHandle() const; intQWidget::y() const.",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:15060,Deployability,update,updatesEnabled,15060,":sizePolicy() const; voidQWidget::stackUnder(QWidget*); intQObject::startTimer(int interval); QStringQWidget::statusTip() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; static QStringtr(const char* s, const char* c = 0); static QStringtr(const char* s, const char* c, int n); static QStringtrUtf8(const char* s, const char* c = 0); static QStringtrUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidUnSetButtonMask(bool dtor = false); voidQWidget::unsetCursor(); voidUnSetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::width() const; intQPaintDevice::widthMM() const; QWidget*QWidget::window() const; QStringQWidget::windowFilePath() const; Qt::WindowFlagsQWidget::windowFlags() const; QIconQWidget::windowIcon() const; QStringQWidget::windowIconText() const; Qt::WindowModalityQWidget::windowModality() const; qrealQWidget::windowOpacity() const; QStringQWidget::windowRole() const; Qt::WindowStatesQWidget::windowState() const; QWindowSurface*QWidget::windowSurface() const; QStringQWidget::windowTitle() const; Qt::WindowTypeQWidget::windowType() const; WIdQWidget::winId() const; intQWidget::x() const; const QX11Info&QWidget::x11Info() const; Qt::HANDLEQWidget::x11PictureHandle() const; intQWidget::y() const.",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:18441,Deployability,update,updateMicroFocus,18441,"terEvent(QDragEnterEvent*); virtual voidQWidget::dragLeaveEvent(QDragLeaveEvent*); virtual voidQWidget::dragMoveEvent(QDragMoveEvent*); voidQFrame::drawFrame(QPainter*); virtual voidQWidget::dropEvent(QDropEvent*); virtual voidQWidget::enabledChange(bool); virtual voidQWidget::enterEvent(QEvent*); virtual boolQFrame::event(QEvent* e); virtual voidQWidget::focusInEvent(QFocusEvent*); boolQWidget::focusNextChild(); virtual boolQWidget::focusNextPrevChild(bool next); virtual voidQWidget::focusOutEvent(QFocusEvent*); boolQWidget::focusPreviousChild(); virtual voidQWidget::fontChange(const QFont&); virtual voidQWidget::hideEvent(QHideEvent*); virtual voidQWidget::inputMethodEvent(QInputMethodEvent*); virtual voidQWidget::keyPressEvent(QKeyEvent*); virtual voidQWidget::keyReleaseEvent(QKeyEvent*); virtual voidQWidget::languageChange(); virtual voidQWidget::leaveEvent(QEvent*); virtual intQWidget::metric(QPaintDevice::PaintDeviceMetric) const; virtual voidQWidget::mouseDoubleClickEvent(QMouseEvent*); virtual voidQWidget::mouseMoveEvent(QMouseEvent*); virtual voidQWidget::mousePressEvent(QMouseEvent*); virtual voidQWidget::mouseReleaseEvent(QMouseEvent*); virtual voidQWidget::moveEvent(QMoveEvent*); virtual voidpaintEvent(QPaintEvent*); virtual voidQWidget::paletteChange(const QPalette&); intQObject::receivers(const char* signal) const; voidQWidget::resetInputContext(); virtual voidQWidget::resizeEvent(QResizeEvent*); QObject*QObject::sender() const; intQObject::senderSignalIndex() const; voidSetCanvasWidget(TQtWidget* widget); virtual voidQWidget::showEvent(QShowEvent*); virtual voidQWidget::styleChange(QStyle&); virtual voidQWidget::tabletEvent(QTabletEvent*); virtual voidQObject::timerEvent(QTimerEvent*); TQtClientWidget(TQtClientGuard* guard, QWidget* parent = 0, const char* name = 0, Qt::WFlags f = 0); voidQWidget::updateMicroFocus(); virtual voidQWidget::wheelEvent(QWheelEvent*); virtual voidQWidget::windowActivationChange(bool); virtual boolQWidget::x11Event(XEvent*).",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:4717,Modifiability,inherit,inherits,4717,"eSize() const; intQFrame::frameStyle() const; intQFrame::frameWidth() const; const QRect&QWidget::geometry() const; TQtWidget*GetCanvasWidget() const; voidQWidget::getContentsMargins(int* left, int* top, int* right, int* bottom) const; QCursor*GrabButtonCursor() const; voidGrabEvent(Event_t& ev, bool own = true); voidQWidget::grabGesture(Qt::GestureType type, Qt::GestureFlags flags = Qt::GestureFlags()); voidQWidget::grabKeyboard(); voidQWidget::grabMouse(); voidQWidget::grabMouse(const QCursor&); QCursor*GrabPointerCursor() const; intQWidget::grabShortcut(const QKeySequence& key, Qt::ShortcutContext context = Qt::WindowShortcut); QGraphicsEffect*QWidget::graphicsEffect() const; QGraphicsProxyWidget*QWidget::graphicsProxyWidget() const; Qt::HANDLEQWidget::handle() const; boolQWidget::hasFocus() const; boolQWidget::hasMouseTracking() const; intQWidget::height() const; virtual intQWidget::heightForWidth(int) const; intQPaintDevice::heightMM() const; voidQWidget::hide(); boolQObject::inherits(const char* classname) const; QInputContext*QWidget::inputContext(); Qt::InputMethodHintsQWidget::inputMethodHints() const; virtual QVariantQWidget::inputMethodQuery(Qt::InputMethodQuery) const; voidQWidget::insertAction(QAction* before, QAction* action); voidQWidget::insertActions(QAction* before, QList<QAction*> actions); voidQObject::installEventFilter(QObject*); WIdQWidget::internalWinId() const; virtual TClass*IsA() const; boolQWidget::isActiveWindow() const; boolQWidget::isAncestorOf(const QWidget* child) const; boolIsClosing(); boolQWidget::isEnabled() const; boolQWidget::isEnabledTo(QWidget*) const; boolQWidget::isEnabledToTLW() const; UInt_tIsEventSelected(UInt_t evmask) const; boolQWidget::isFullScreen() const; boolIsGrabbed(Event_t& ev); boolIsGrabButtonSelected(UInt_t evmask) const; boolIsGrabOwner(); boolIsGrabPointerSelected(UInt_t evmask) const; boolQWidget::isHidden() const; TQtClientWidget*IsKeyGrabbed(const Event_t& ev); boolQWidget::isLeftToRight() const; boolQWi",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:21380,Modifiability,Inherit,Inheritance,21380,"t::d_ptr; EMouseButtonfButton; TQtWidget*fCanvasWidget; boolfDeleteNotify; QColor*fEraseColorColor to paint widget background with our PainEvent; QPixmap*fErasePixmappixmap to paint widget background with our PainEvent; QCursor*fGrabButtonCursor; UInt_tfGrabButtonMaskmodifier button mask for TVirtualX::GrabButton; UInt_tfGrabEventButtonMaskinput event mask for TVirtualX::GrabButton; UInt_tfGrabEventPointerMaskinput event mask for TVirtualX::GrabPointer; QCursor*fGrabPointerCursor; map<QKeySequence,QShortcut*>fGrabbedKey; TQtClientGuard*fGuard; boolfIsClosing; TGWindow*fMyRootWindowback pointer to the host window object; QCursor*fNormalPointerCursor; Bool_tfPointerOwner; UInt_tfSaveSelectInputMaskTo save dutinr the grabbing the selectInput; UInt_tfSelectEventMaskinput mask for SelectInput; ushortQPaintDevice::paintersrefcount; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQtClientWidget(TQtClientGuard* guard, QWidget* parent = 0, const char* name = 0, Qt::WFlags f = 0). ~TQtClientWidget(); fprintf(stderr, ""TQtClientWidget::~TQtClientWidget dtor %p\n"", this);; remove the event filter. void closeEvent(QCloseEvent* ev); This Qt QCloseEvent event handler. void setEraseColor(const QColor& color); Color to paint widget background with our PainEvent. void setErasePixmap(const QPixmap& pixmap); pixmap to paint widget background with our PainEvent. bool IsGrabbed(Event_t& ev); - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -; XGrabButton(3X11) XLIB FUNCTIONS XGrabButton(3X11); * The pointer is not grabbed, and the specified button is logically; pressed when the specified modifier keys are logically down,; and no other buttons or modifier keys are logically down.; * The grab_window contains the pointer.; * The confine_to window (if any) is viewable.; * A passive grab on the same bu",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:21393,Modifiability,Inherit,Inherited,21393,"t::d_ptr; EMouseButtonfButton; TQtWidget*fCanvasWidget; boolfDeleteNotify; QColor*fEraseColorColor to paint widget background with our PainEvent; QPixmap*fErasePixmappixmap to paint widget background with our PainEvent; QCursor*fGrabButtonCursor; UInt_tfGrabButtonMaskmodifier button mask for TVirtualX::GrabButton; UInt_tfGrabEventButtonMaskinput event mask for TVirtualX::GrabButton; UInt_tfGrabEventPointerMaskinput event mask for TVirtualX::GrabPointer; QCursor*fGrabPointerCursor; map<QKeySequence,QShortcut*>fGrabbedKey; TQtClientGuard*fGuard; boolfIsClosing; TGWindow*fMyRootWindowback pointer to the host window object; QCursor*fNormalPointerCursor; Bool_tfPointerOwner; UInt_tfSaveSelectInputMaskTo save dutinr the grabbing the selectInput; UInt_tfSelectEventMaskinput mask for SelectInput; ushortQPaintDevice::paintersrefcount; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQtClientWidget(TQtClientGuard* guard, QWidget* parent = 0, const char* name = 0, Qt::WFlags f = 0). ~TQtClientWidget(); fprintf(stderr, ""TQtClientWidget::~TQtClientWidget dtor %p\n"", this);; remove the event filter. void closeEvent(QCloseEvent* ev); This Qt QCloseEvent event handler. void setEraseColor(const QColor& color); Color to paint widget background with our PainEvent. void setErasePixmap(const QPixmap& pixmap); pixmap to paint widget background with our PainEvent. bool IsGrabbed(Event_t& ev); - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -; XGrabButton(3X11) XLIB FUNCTIONS XGrabButton(3X11); * The pointer is not grabbed, and the specified button is logically; pressed when the specified modifier keys are logically down,; and no other buttons or modifier keys are logically down.; * The grab_window contains the pointer.; * The confine_to window (if any) is viewable.; * A passive grab on the same bu",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:874,Security,access,accessibleDescription,874," virtual~TQtClientWidget(); virtual voidAccelerate(); boolQWidget::acceptDrops() const; QStringQWidget::accessibleDescription() const; QStringQWidget::accessibleName() const; QList<QAction*>QWidget::actions() const; voidQWidget::activateWindow(); voidQWidget::addAction(QAction* action); voidQWidget::addActions(QList<QAction*> actions); voidQWidget::adjustSize(); boolQWidget::autoFillBackground() const; QPalette::ColorRoleQWidget::backgroundRole() const; QSizeQWidget::baseSize() const; boolQObject::blockSignals(bool b); EMouseButtonButton() const; UInt_tButtonEventMask() const; UInt_tButtonMask() const; QWidget*QWidget::childAt(const QPoint& p) const; QWidget*QWidget::childAt(int x, int y) const; const QObjectList&QObject::children() const; QRectQWidget::childrenRect() const; QRegionQWidget::childrenRegion() const; static TClass*Class(); voidQWidget::clearFocus(); voidQWidget::clearMask(); boolQWidget::close(); virtual voidcloseEvent(QCloseEvent* ev); intQPaintDevice::colorCount() const; boolQObject::connect(const QObject* sender, const char* signal, const char* member, Qt::ConnectionType type = Qt::AutoConnection) const; static boolQObject::connect(const QObject* sender, const char* signal, const QObject* receiv",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:921,Security,access,accessibleName,921," virtual~TQtClientWidget(); virtual voidAccelerate(); boolQWidget::acceptDrops() const; QStringQWidget::accessibleDescription() const; QStringQWidget::accessibleName() const; QList<QAction*>QWidget::actions() const; voidQWidget::activateWindow(); voidQWidget::addAction(QAction* action); voidQWidget::addActions(QList<QAction*> actions); voidQWidget::adjustSize(); boolQWidget::autoFillBackground() const; QPalette::ColorRoleQWidget::backgroundRole() const; QSizeQWidget::baseSize() const; boolQObject::blockSignals(bool b); EMouseButtonButton() const; UInt_tButtonEventMask() const; UInt_tButtonMask() const; QWidget*QWidget::childAt(const QPoint& p) const; QWidget*QWidget::childAt(int x, int y) const; const QObjectList&QObject::children() const; QRectQWidget::childrenRect() const; QRegionQWidget::childrenRegion() const; static TClass*Class(); voidQWidget::clearFocus(); voidQWidget::clearMask(); boolQWidget::close(); virtual voidcloseEvent(QCloseEvent* ev); intQPaintDevice::colorCount() const; boolQObject::connect(const QObject* sender, const char* signal, const char* member, Qt::ConnectionType type = Qt::AutoConnection) const; static boolQObject::connect(const QObject* sender, const char* signal, const QObject* receiv",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:6301,Testability,log,logicalDpiX,6301,"get::isEnabledTo(QWidget*) const; boolQWidget::isEnabledToTLW() const; UInt_tIsEventSelected(UInt_t evmask) const; boolQWidget::isFullScreen() const; boolIsGrabbed(Event_t& ev); boolIsGrabButtonSelected(UInt_t evmask) const; boolIsGrabOwner(); boolIsGrabPointerSelected(UInt_t evmask) const; boolQWidget::isHidden() const; TQtClientWidget*IsKeyGrabbed(const Event_t& ev); boolQWidget::isLeftToRight() const; boolQWidget::isMaximized() const; boolQWidget::isMinimized() const; boolQWidget::isModal() const; boolQWidget::isRightToLeft() const; boolQWidget::isTopLevel() const; boolQWidget::isVisible() const; boolQWidget::isVisibleTo(QWidget*) const; boolQObject::isWidgetType() const; boolQWidget::isWindow() const; boolQWidget::isWindowModified() const; static QWidget*QWidget::keyboardGrabber(); voidQObject::killTimer(int id); QLayout*QWidget::layout() const; Qt::LayoutDirectionQWidget::layoutDirection() const; intQFrame::lineWidth() const; QLocaleQWidget::locale() const; intQPaintDevice::logicalDpiX() const; intQPaintDevice::logicalDpiY() const; voidQWidget::lower(); QPointQWidget::mapFrom(QWidget*, const QPoint&) const; QPointQWidget::mapFromGlobal(const QPoint&) const; QPointQWidget::mapFromParent(const QPoint&) const; QPointQWidget::mapTo(QWidget*, const QPoint&) const; QPointQWidget::mapToGlobal(const QPoint&) const; QPointQWidget::mapToParent(const QPoint&) const; QRegionQWidget::mask() const; intQWidget::maximumHeight() const; QSizeQWidget::maximumSize() const; intQWidget::maximumWidth() const; virtual const QMetaObject*metaObject() const; intQFrame::midLineWidth() const; intQWidget::minimumHeight() const; QSizeQWidget::minimumSize() const; virtual QSizeQWidget::minimumSizeHint() const; intQWidget::minimumWidth() const; static QWidget*QWidget::mouseGrabber(); voidQWidget::move(const QPoint&); voidQWidget::move(int x, int y); voidQObject::moveToThread(QThread* thread); QWidget*QWidget::nativeParentWidget() const; QWidget*QWidget::nextInFocusChain() const; QRectQWidget::",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:6339,Testability,log,logicalDpiY,6339,"QWidget::isEnabledToTLW() const; UInt_tIsEventSelected(UInt_t evmask) const; boolQWidget::isFullScreen() const; boolIsGrabbed(Event_t& ev); boolIsGrabButtonSelected(UInt_t evmask) const; boolIsGrabOwner(); boolIsGrabPointerSelected(UInt_t evmask) const; boolQWidget::isHidden() const; TQtClientWidget*IsKeyGrabbed(const Event_t& ev); boolQWidget::isLeftToRight() const; boolQWidget::isMaximized() const; boolQWidget::isMinimized() const; boolQWidget::isModal() const; boolQWidget::isRightToLeft() const; boolQWidget::isTopLevel() const; boolQWidget::isVisible() const; boolQWidget::isVisibleTo(QWidget*) const; boolQObject::isWidgetType() const; boolQWidget::isWindow() const; boolQWidget::isWindowModified() const; static QWidget*QWidget::keyboardGrabber(); voidQObject::killTimer(int id); QLayout*QWidget::layout() const; Qt::LayoutDirectionQWidget::layoutDirection() const; intQFrame::lineWidth() const; QLocaleQWidget::locale() const; intQPaintDevice::logicalDpiX() const; intQPaintDevice::logicalDpiY() const; voidQWidget::lower(); QPointQWidget::mapFrom(QWidget*, const QPoint&) const; QPointQWidget::mapFromGlobal(const QPoint&) const; QPointQWidget::mapFromParent(const QPoint&) const; QPointQWidget::mapTo(QWidget*, const QPoint&) const; QPointQWidget::mapToGlobal(const QPoint&) const; QPointQWidget::mapToParent(const QPoint&) const; QRegionQWidget::mask() const; intQWidget::maximumHeight() const; QSizeQWidget::maximumSize() const; intQWidget::maximumWidth() const; virtual const QMetaObject*metaObject() const; intQFrame::midLineWidth() const; intQWidget::minimumHeight() const; QSizeQWidget::minimumSize() const; virtual QSizeQWidget::minimumSizeHint() const; intQWidget::minimumWidth() const; static QWidget*QWidget::mouseGrabber(); voidQWidget::move(const QPoint&); voidQWidget::move(int x, int y); voidQObject::moveToThread(QThread* thread); QWidget*QWidget::nativeParentWidget() const; QWidget*QWidget::nextInFocusChain() const; QRectQWidget::normalGeometry() const; intQPaintDevic",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:14216,Testability,test,testAttribute,14216,"et::setWindowModality(Qt::WindowModality windowModality); voidQWidget::setWindowModified(bool); voidQWidget::setWindowOpacity(qreal level); voidQWidget::setWindowRole(const QString&); voidQWidget::setWindowState(Qt::WindowStates state); voidQWidget::setWindowSurface(QWindowSurface* surface); voidQWidget::setWindowTitle(const QString&); voidQWidget::show(); voidQWidget::showFullScreen(); voidQWidget::showMaximized(); virtual voidShowMembers(TMemberInspector& insp) const; voidQWidget::showMinimized(); voidQWidget::showNormal(); boolQObject::signalsBlocked() const; QSizeQWidget::size() const; virtual QSizeQFrame::sizeHint() const; QSizeQWidget::sizeIncrement() const; QSizePolicyQWidget::sizePolicy() const; voidQWidget::stackUnder(QWidget*); intQObject::startTimer(int interval); QStringQWidget::statusTip() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; static QStringtr(const char* s, const char* c = 0); static QStringtr(const char* s, const char* c, int n); static QStringtrUtf8(const char* s, const char* c = 0); static QStringtrUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidUnSetButtonMask(bool dtor = false); voidQWidget::unsetCursor(); voidUnSetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::wid",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:22155,Testability,log,logically,22155,"kTo save dutinr the grabbing the selectInput; UInt_tfSelectEventMaskinput mask for SelectInput; ushortQPaintDevice::paintersrefcount; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQtClientWidget(TQtClientGuard* guard, QWidget* parent = 0, const char* name = 0, Qt::WFlags f = 0). ~TQtClientWidget(); fprintf(stderr, ""TQtClientWidget::~TQtClientWidget dtor %p\n"", this);; remove the event filter. void closeEvent(QCloseEvent* ev); This Qt QCloseEvent event handler. void setEraseColor(const QColor& color); Color to paint widget background with our PainEvent. void setErasePixmap(const QPixmap& pixmap); pixmap to paint widget background with our PainEvent. bool IsGrabbed(Event_t& ev); - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -; XGrabButton(3X11) XLIB FUNCTIONS XGrabButton(3X11); * The pointer is not grabbed, and the specified button is logically; pressed when the specified modifier keys are logically down,; and no other buttons or modifier keys are logically down.; * The grab_window contains the pointer.; * The confine_to window (if any) is viewable.; * A passive grab on the same button/key combination does not exist; on any ancestor of grab_window.; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -. TQtClientWidget * IsKeyGrabbed(const Event_t& ev); Check ROOT Event_t ev structure for the KeyGrab mask. void GrabEvent(Event_t& ev, bool own = true); replace the original Windows_t with the grabbing id and; re-caclulate the mouse coordinate; to respect the new Windows_t id if any. void SelectInput(UInt_t evmask); Select input and chech whether qwe nat mouse tracking. void SetButtonMask(UInt_t modifier = kAnyModifier, EMouseButton button = kAnyButton); Set the Button mask. void UnSetButtonMask(bool dtor = false); Unset the Button mask. Bool_t SetK",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:22211,Testability,log,logically,22211,"kTo save dutinr the grabbing the selectInput; UInt_tfSelectEventMaskinput mask for SelectInput; ushortQPaintDevice::paintersrefcount; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQtClientWidget(TQtClientGuard* guard, QWidget* parent = 0, const char* name = 0, Qt::WFlags f = 0). ~TQtClientWidget(); fprintf(stderr, ""TQtClientWidget::~TQtClientWidget dtor %p\n"", this);; remove the event filter. void closeEvent(QCloseEvent* ev); This Qt QCloseEvent event handler. void setEraseColor(const QColor& color); Color to paint widget background with our PainEvent. void setErasePixmap(const QPixmap& pixmap); pixmap to paint widget background with our PainEvent. bool IsGrabbed(Event_t& ev); - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -; XGrabButton(3X11) XLIB FUNCTIONS XGrabButton(3X11); * The pointer is not grabbed, and the specified button is logically; pressed when the specified modifier keys are logically down,; and no other buttons or modifier keys are logically down.; * The grab_window contains the pointer.; * The confine_to window (if any) is viewable.; * A passive grab on the same button/key combination does not exist; on any ancestor of grab_window.; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -. TQtClientWidget * IsKeyGrabbed(const Event_t& ev); Check ROOT Event_t ev structure for the KeyGrab mask. void GrabEvent(Event_t& ev, bool own = true); replace the original Windows_t with the grabbing id and; re-caclulate the mouse coordinate; to respect the new Windows_t id if any. void SelectInput(UInt_t evmask); Select input and chech whether qwe nat mouse tracking. void SetButtonMask(UInt_t modifier = kAnyModifier, EMouseButton button = kAnyButton); Set the Button mask. void UnSetButtonMask(bool dtor = false); Unset the Button mask. Bool_t SetK",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:22270,Testability,log,logically,22270,"kTo save dutinr the grabbing the selectInput; UInt_tfSelectEventMaskinput mask for SelectInput; ushortQPaintDevice::paintersrefcount; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQtClientWidget(TQtClientGuard* guard, QWidget* parent = 0, const char* name = 0, Qt::WFlags f = 0). ~TQtClientWidget(); fprintf(stderr, ""TQtClientWidget::~TQtClientWidget dtor %p\n"", this);; remove the event filter. void closeEvent(QCloseEvent* ev); This Qt QCloseEvent event handler. void setEraseColor(const QColor& color); Color to paint widget background with our PainEvent. void setErasePixmap(const QPixmap& pixmap); pixmap to paint widget background with our PainEvent. bool IsGrabbed(Event_t& ev); - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -; XGrabButton(3X11) XLIB FUNCTIONS XGrabButton(3X11); * The pointer is not grabbed, and the specified button is logically; pressed when the specified modifier keys are logically down,; and no other buttons or modifier keys are logically down.; * The grab_window contains the pointer.; * The confine_to window (if any) is viewable.; * A passive grab on the same button/key combination does not exist; on any ancestor of grab_window.; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -. TQtClientWidget * IsKeyGrabbed(const Event_t& ev); Check ROOT Event_t ev structure for the KeyGrab mask. void GrabEvent(Event_t& ev, bool own = true); replace the original Windows_t with the grabbing id and; re-caclulate the mouse coordinate; to respect the new Windows_t id if any. void SelectInput(UInt_t evmask); Select input and chech whether qwe nat mouse tracking. void SetButtonMask(UInt_t modifier = kAnyModifier, EMouseButton button = kAnyButton); Set the Button mask. void UnSetButtonMask(bool dtor = false); Unset the Button mask. Bool_t SetK",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:23242,Testability,test,test,23242,"the specified modifier keys are logically down,; and no other buttons or modifier keys are logically down.; * The grab_window contains the pointer.; * The confine_to window (if any) is viewable.; * A passive grab on the same button/key combination does not exist; on any ancestor of grab_window.; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -. TQtClientWidget * IsKeyGrabbed(const Event_t& ev); Check ROOT Event_t ev structure for the KeyGrab mask. void GrabEvent(Event_t& ev, bool own = true); replace the original Windows_t with the grabbing id and; re-caclulate the mouse coordinate; to respect the new Windows_t id if any. void SelectInput(UInt_t evmask); Select input and chech whether qwe nat mouse tracking. void SetButtonMask(UInt_t modifier = kAnyModifier, EMouseButton button = kAnyButton); Set the Button mask. void UnSetButtonMask(bool dtor = false); Unset the Button mask. Bool_t SetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier, int insert = kInsert); Set the key button mask; insert = -1 - remove; 0 - test; +1 - insert. void SetCanvasWidget(TQtWidget* widget); Associate this widget with the parent ROOT gui widget. void UnSetKeyMask(Int_t keycode = 0, UInt_t modifier = kAnyModifier); Unset the key button mask. void Accelerate(); Qt slot to respond to the ""Keyboard accelerator signal"". void Disconnect(); Disconnect the Canvas and ROOT gui widget before destroy. void paintEvent(QPaintEvent* ). bool DeleteNotify(). {return fDeleteNotify; }. TQtWidget * GetCanvasWidget() const. { return fCanvasWidget;}. bool IsClosing(). { return fIsClosing; }. UInt_t IsEventSelected(UInt_t evmask) const. void SetCursor(). void SetCursor(Cursor_t cursor). void SetClosing(bool flag = kTRUE). { fIsClosing = flag;}. void SetDeleteNotify(bool flag = true). {fDeleteNotify = flag;}. void SetAttributeEventMask(UInt_t evmask). { SelectInput (evmask);}. void SetButtonEventMask(UInt_t evmask, Cursor_t cursor = 0). { fGrabEventButtonMask = evmask; fGrab",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:1632,Usability,clear,clearFocus,1632," virtual~TQtClientWidget(); virtual voidAccelerate(); boolQWidget::acceptDrops() const; QStringQWidget::accessibleDescription() const; QStringQWidget::accessibleName() const; QList<QAction*>QWidget::actions() const; voidQWidget::activateWindow(); voidQWidget::addAction(QAction* action); voidQWidget::addActions(QList<QAction*> actions); voidQWidget::adjustSize(); boolQWidget::autoFillBackground() const; QPalette::ColorRoleQWidget::backgroundRole() const; QSizeQWidget::baseSize() const; boolQObject::blockSignals(bool b); EMouseButtonButton() const; UInt_tButtonEventMask() const; UInt_tButtonMask() const; QWidget*QWidget::childAt(const QPoint& p) const; QWidget*QWidget::childAt(int x, int y) const; const QObjectList&QObject::children() const; QRectQWidget::childrenRect() const; QRegionQWidget::childrenRegion() const; static TClass*Class(); voidQWidget::clearFocus(); voidQWidget::clearMask(); boolQWidget::close(); virtual voidcloseEvent(QCloseEvent* ev); intQPaintDevice::colorCount() const; boolQObject::connect(const QObject* sender, const char* signal, const char* member, Qt::ConnectionType type = Qt::AutoConnection) const; static boolQObject::connect(const QObject* sender, const char* signal, const QObject* receiv",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtClientWidget.html:1659,Usability,clear,clearMask,1659," virtual~TQtClientWidget(); virtual voidAccelerate(); boolQWidget::acceptDrops() const; QStringQWidget::accessibleDescription() const; QStringQWidget::accessibleName() const; QList<QAction*>QWidget::actions() const; voidQWidget::activateWindow(); voidQWidget::addAction(QAction* action); voidQWidget::addActions(QList<QAction*> actions); voidQWidget::adjustSize(); boolQWidget::autoFillBackground() const; QPalette::ColorRoleQWidget::backgroundRole() const; QSizeQWidget::baseSize() const; boolQObject::blockSignals(bool b); EMouseButtonButton() const; UInt_tButtonEventMask() const; UInt_tButtonMask() const; QWidget*QWidget::childAt(const QPoint& p) const; QWidget*QWidget::childAt(int x, int y) const; const QObjectList&QObject::children() const; QRectQWidget::childrenRect() const; QRegionQWidget::childrenRegion() const; static TClass*Class(); voidQWidget::clearFocus(); voidQWidget::clearMask(); boolQWidget::close(); virtual voidcloseEvent(QCloseEvent* ev); intQPaintDevice::colorCount() const; boolQObject::connect(const QObject* sender, const char* signal, const char* member, Qt::ConnectionType type = Qt::AutoConnection) const; static boolQObject::connect(const QObject* sender, const char* signal, const QObject* receiv",MatchSource.WIKI,root/html604/TQtClientWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtClientWidget.html
https://root.cern/root/html604/TQtMarker.html:115,Modifiability,inherit,inheritance,115,". TQtMarker. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » QT; » TQtMarker. class TQtMarker. TQtMarker - class-utility to convert the ROOT TMarker object shape; into the Qt QPointArray. Function Members (Methods); public:. virtual~TQtMarker(); static TClass*Class(); voidDrawPolyMarker(QPainter& p, int n, TPoint* xy); Color_tGetColor() const; const QPolygon&GetNodes() const; intGetNumber() const; intGetType() const; intGetWidth() const; virtual TClass*IsA() const; TQtMarker&operator=(const TQtMarker&); TQtMarker&operator=(const TAttMarker&); voidSetColor(Color_t mcolor); voidSetMarker(int n, TPoint* xy, int type); voidSetMarkerAttributes(const TAttMarker& markerAttributes); voidSetPenAttributes(int type); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TQtMarker(const TQtMarker&); TQtMarker(const TAttMarker&); TQtMarker(int n = 0, TPoint* xy = 0, int type = 0). Data Members; private:. QPolygonfChainarray of the n chains to build a shaped marker; Color_tfCindexColor index of the marker;; intfLineOptionConnect the markers with the segments; intfLineWidthThe width of the line used to outline the markers; intfMarkerTypeType of the current marker; intfNumNodeNumber of chain in the marker shape. Class Charts. Inheritance Chart:. TQtMarker. Function documentation; TQtMarker(int n = 0, TPoint* xy = 0, int type = 0). ~TQtMarker(); {}. TQtMarker & operator=(const TAttMarker& ); Assign the TQtMarker from ROOT TAttMarker. TQtMarker(const TAttMarker& ); Create the TQtMarker from ROOT TAttMarker. void SetMarkerAttributes(const TAttMarker& markerAttributes); Map Qt marker attributes to ROOT TAttMaker parameters. void SetPenAttributes(int type); Pen attrbutes is 100000*LineFlag + 1000*wi",MatchSource.WIKI,root/html604/TQtMarker.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtMarker.html
https://root.cern/root/html604/TQtMarker.html:1524,Modifiability,Inherit,Inheritance,1524,"olor() const; const QPolygon&GetNodes() const; intGetNumber() const; intGetType() const; intGetWidth() const; virtual TClass*IsA() const; TQtMarker&operator=(const TQtMarker&); TQtMarker&operator=(const TAttMarker&); voidSetColor(Color_t mcolor); voidSetMarker(int n, TPoint* xy, int type); voidSetMarkerAttributes(const TAttMarker& markerAttributes); voidSetPenAttributes(int type); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TQtMarker(const TQtMarker&); TQtMarker(const TAttMarker&); TQtMarker(int n = 0, TPoint* xy = 0, int type = 0). Data Members; private:. QPolygonfChainarray of the n chains to build a shaped marker; Color_tfCindexColor index of the marker;; intfLineOptionConnect the markers with the segments; intfLineWidthThe width of the line used to outline the markers; intfMarkerTypeType of the current marker; intfNumNodeNumber of chain in the marker shape. Class Charts. Inheritance Chart:. TQtMarker. Function documentation; TQtMarker(int n = 0, TPoint* xy = 0, int type = 0). ~TQtMarker(); {}. TQtMarker & operator=(const TAttMarker& ); Assign the TQtMarker from ROOT TAttMarker. TQtMarker(const TAttMarker& ); Create the TQtMarker from ROOT TAttMarker. void SetMarkerAttributes(const TAttMarker& markerAttributes); Map Qt marker attributes to ROOT TAttMaker parameters. void SetPenAttributes(int type); Pen attrbutes is 100000*LineFlag + 1000*width + ""marker style"". int GetNumber() const. {return fNumNode;}. const QPolygon & GetNodes() const. {return fChain;}. int GetType() const; {return fMarkerType;}. int GetWidth() const; { return fLineWidth;}. void SetMarker(int n, TPoint* xy, int type); *-* Did we have a chain ?. void DrawPolyMarker(QPainter& p, int n, TPoint* xy); Draw n markers with the current attributes at positions xy.; p : the external QPainter; n : number of markers to draw; xy : x,y coordinates of markers. TQtMarker & operator=(const TQtMarker& ). inline",MatchSource.WIKI,root/html604/TQtMarker.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtMarker.html
https://root.cern/root/html604/TQtPadFont.html:2367,Availability,mask,mask,2367,"ertSubstitutions(const QString&, const QStringList&); virtual TClass*IsA() const; boolQFont::isCopyOf(const QFont&) const; boolQFont::italic() const; boolQFont::kerning() const; QStringQFont::key() const; QStringQFont::lastResortFamily() const; QStringQFont::lastResortFont() const; qrealQFont::letterSpacing() const; QFont::SpacingTypeQFont::letterSpacingType() const; virtual voidTAttText::Modify(); QVariantQFont::operator QVariant() const; boolQFont::operator!=(const QFont&) const; boolQFont::operator<(const QFont&) const; TQtPadFont&operator=(const TQtPadFont&); boolQFont::operator==(const QFont&) const; boolQFont::overline() const; intQFont::pixelSize() const; intQFont::pointSize() const; qrealQFont::pointSizeF() const; boolQFont::rawMode() const; QStringQFont::rawName() const; static voidQFont::removeSubstitution(const QString&); virtual voidTAttText::ResetAttText(Option_t* toption = """"); uintQFont::resolve() const; QFontQFont::resolve(const QFont&) const; voidQFont::resolve(uint mask); static const char*RomanFontName(); virtual voidTAttText::SaveTextAttributes(ostream& out, const char* name, Int_t alidef = 12, Float_t angdef = 0, Int_t coldef = 1, Int_t fondef = 61, Float_t sizdef = 1); voidQFont::setBold(bool); voidQFont::setCapitalization(QFont::Capitalization); voidQFont::setFamily(const QString&); voidQFont::setFixedPitch(bool); voidQFont::setHintingPreference(QFont::HintingPreference hintingPreference); voidQFont::setItalic(bool b); voidQFont::setKerning(bool); voidQFont::setLetterSpacing(QFont::SpacingType type, qreal spacing); voidQFont::setOverline(bool); voidQFont::setPixelSize(int); voidQFont::setPointSize(int); voidQFont::setPointSizeF(qreal); voidQFont::setRawMode(bool); voidQFont::setRawName(const QString&); voidQFont::setStretch(int); voidQFont::setStrikeOut(bool); voidQFont::setStyle(QFont::Style style); voidQFont::setStyleHint(QFont::StyleHint, QFont::StyleStrategy = PreferDefault); voidQFont::setStyleName(const QString&); voidQFont::setStyleStrat",MatchSource.WIKI,root/html604/TQtPadFont.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtPadFont.html
https://root.cern/root/html604/TQtPadFont.html:366,Integrability,interface,interface,366,". TQtPadFont. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » QT; » TQtPadFont. class TQtPadFont: public QFont, public TAttText. TQtPadFont class is Qt QFont class with TAttText ROOT class interface. Function Members (Methods); public:. virtual~TQtPadFont(); static const char*ArialFontName(); boolQFont::bold() const; static voidQFont::cacheStatistics(); QFont::CapitalizationQFont::capitalization() const; static TClass*Class(); static voidQFont::cleanup(); voidTAttText::Copy(TAttText& atttext) const; static const char*CourierFontName(); QStringQFont::defaultFamily() const; boolQFont::exactMatch() const; QStringQFont::family() const; boolQFont::fixedPitch() const; FT_FaceQFont::freetypeFace() const; boolQFont::fromString(const QString&); virtual Short_tTAttText::GetTextAlign() const; virtual Float_tTAttText::GetTextAngle() const; virtual Color_tTAttText::GetTextColor() const; virtual Font_tTAttText::GetTextFont() const; virtual Float_tTAttText::GetTextSize() const; Qt::HANDLEQFont::handle() const; QFont::HintingPreferenceQFont::hintingPreference() const; static voidQFont::initialize(); static voidQFont::insertSubstitution(const QString&, const QString&); static voidQFont::insertSubstitutions(const QString&, const QStringList&); virtual TClass*IsA() const; boolQFont::isCopyOf(const QFont&) const; boolQFont::italic() const; boolQFont::kerning() const; QStringQFont::key() const; QStringQFont::lastResortFamily() const; QStringQFont::lastResortFont() const; qrealQFont::letterSpacing() const; QFont::SpacingTypeQFont::letterSpacingType() const; virtual voidTAttText::Modify(); QVariantQFont::operator QVariant() const; boolQFont::operator!=(const QFont&) const; boolQFont::operator<(const QFont&) const; TQtPadFont&operator=(const TQtPadFont&); boolQFont::operator==(const QFont&) const; boolQFont::overline",MatchSource.WIKI,root/html604/TQtPadFont.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtPadFont.html
https://root.cern/root/html604/TQtPadFont.html:8640,Modifiability,Inherit,Inheritance,8640,"tyleQFont::StyleOblique; static QFont::ResolvePropertiesQFont::StyleResolved; static QFont::ResolvePropertiesQFont::StyleStrategyResolved; static QFont::StyleHintQFont::System; static QFont::StyleHintQFont::Times; static QFont::StyleHintQFont::TypeWriter; static QFont::StretchQFont::UltraCondensed; static QFont::StretchQFont::UltraExpanded; static QFont::ResolvePropertiesQFont::UnderlineResolved; static QFont::StretchQFont::Unstretched; static QFont::ResolvePropertiesQFont::WeightResolved; static QFont::ResolvePropertiesQFont::WordSpacingResolved; static const QMetaObjectQFont::staticMetaObject. protected:. Short_tTAttText::fTextAlignText alignment; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tTAttText::fTextSizeText size. private:. static TStringfgArialFontName; static TStringfgCourierFontName; static TStringfgRomanFontName; static TStringfgSymbolFontFamily. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQtPadFont(); {fTextFont = -1;fTextSize = -1; }. void SetTextFont(const char* fontname, int italic, int bold). void SetTextFont(Font_t fontnumber = 62); -*Set current text font number; *-* ===========================; *-* List of the currently supported fonts (screen and PostScript); *-* =============================================================; *-* Font ID X11 Win32 TTF lfItalic lfWeight x 10; *-* 1 : times-medium-i-normal ""Times New Roman"" 1 5; *-* 2 : times-bold-r-normal ""Times New Roman"" 0 8; *-* 3 : times-bold-i-normal ""Times New Roman"" 1 8; *-* 4 : helvetica-medium-r-normal ""Arial"" 0 5; *-* 5 : helvetica-medium-o-normal ""Arial"" 1 5; *-* 6 : helvetica-bold-r-normal ""Arial"" 0 8; *-* 7 : helvetica-bold-o-normal ""Arial"" 1 8; *-* 8 : courier-medium-r-normal ""Courier New"" 0 5; *-* 9 : courier-medium-o-normal ""Courier New"" 1 5; *-* 10 : courier-bold-r-normal ""Courier New"" 0 8; *-* 11 : courier-bold-o-normal ""Courier New"" 1 8; *-* 12",MatchSource.WIKI,root/html604/TQtPadFont.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtPadFont.html
https://root.cern/root/html604/TQtPadFont.html:8653,Modifiability,Inherit,Inherited,8653,"tyleQFont::StyleOblique; static QFont::ResolvePropertiesQFont::StyleResolved; static QFont::ResolvePropertiesQFont::StyleStrategyResolved; static QFont::StyleHintQFont::System; static QFont::StyleHintQFont::Times; static QFont::StyleHintQFont::TypeWriter; static QFont::StretchQFont::UltraCondensed; static QFont::StretchQFont::UltraExpanded; static QFont::ResolvePropertiesQFont::UnderlineResolved; static QFont::StretchQFont::Unstretched; static QFont::ResolvePropertiesQFont::WeightResolved; static QFont::ResolvePropertiesQFont::WordSpacingResolved; static const QMetaObjectQFont::staticMetaObject. protected:. Short_tTAttText::fTextAlignText alignment; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tTAttText::fTextSizeText size. private:. static TStringfgArialFontName; static TStringfgCourierFontName; static TStringfgRomanFontName; static TStringfgSymbolFontFamily. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQtPadFont(); {fTextFont = -1;fTextSize = -1; }. void SetTextFont(const char* fontname, int italic, int bold). void SetTextFont(Font_t fontnumber = 62); -*Set current text font number; *-* ===========================; *-* List of the currently supported fonts (screen and PostScript); *-* =============================================================; *-* Font ID X11 Win32 TTF lfItalic lfWeight x 10; *-* 1 : times-medium-i-normal ""Times New Roman"" 1 5; *-* 2 : times-bold-r-normal ""Times New Roman"" 0 8; *-* 3 : times-bold-i-normal ""Times New Roman"" 1 8; *-* 4 : helvetica-medium-r-normal ""Arial"" 0 5; *-* 5 : helvetica-medium-o-normal ""Arial"" 1 5; *-* 6 : helvetica-bold-r-normal ""Arial"" 0 8; *-* 7 : helvetica-bold-o-normal ""Arial"" 1 8; *-* 8 : courier-medium-r-normal ""Courier New"" 0 5; *-* 9 : courier-medium-o-normal ""Courier New"" 1 5; *-* 10 : courier-bold-r-normal ""Courier New"" 0 8; *-* 11 : courier-bold-o-normal ""Courier New"" 1 8; *-* 12",MatchSource.WIKI,root/html604/TQtPadFont.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtPadFont.html
https://root.cern/root/html604/TQtPadFont.html:514,Performance,cache,cacheStatistics,514," virtual~TQtPadFont(); static const char*ArialFontName(); boolQFont::bold() const; static voidQFont::cacheStatistics(); QFont::CapitalizationQFont::capitalization() const; static TClass*Class(); static voidQFont::cleanup(); voidTAttText::Copy(TAttText& atttext) const; static const char*CourierFontName(); QStringQFont::defaultFamily() const; boolQFont::exactMatch() const; QStringQFont::family() const; boolQFont::fixedPitch() const; FT_FaceQFont::freetypeFace() const; boolQFont::fromString(const QString&); virtual Short_tTAttText::GetTextAlign() const; virtual Float_tTAttText::GetTextAngle() const; virtual Color_tTAttText::GetTextColor() const; virtual Font_tTAttText::GetTextFont() const; virtual Float_tTAttText::GetTextSize() const; Qt::HANDLEQFont::handle() const; QFont::HintingPreferenceQFont::hintingPreference() const; static voidQFont::initialize(); static voidQFont::insertSubstitution(const QString&, const QString&); static voidQFont::insertSubstitutions(const QString&, const QStringList&); virtual TClass*IsA() const; boolQFont::isCopyOf(const QFont&) const; boolQFont::italic() const; boolQFont::kerning() const; QStringQFont::key() const; QStringQFont::lastResortFamily() const; QStringQFont::lastResortFont() const; qrealQFont::letterSpacing() const; QFont::SpacingTypeQFont::letterSpacingType() const; virtual voidTAttText::Modify(); QVariantQFont::operator QVariant() const; boolQFont::operator!=(const QFont&) const; boolQFont::operator<(const QFont&) const; TQtPadFont&operator=(const TQtPadFont&); boolQFont::operator==(const QFont&) const; boolQFont::overline",MatchSource.WIKI,root/html604/TQtPadFont.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtPadFont.html
https://root.cern/root/html604/TQtRootGuiFactory.html:2449,Availability,Error,Error,2449,"ar* title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt); virtual TCanvasImp*CreateCanvasImp(TCanvas* c, const char* title, UInt_t width, UInt_t height); virtual TCanvasImp*CreateCanvasImp(TCanvas* c, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height); virtual TContextMenuImp*CreateContextMenuImp(TContextMenu* c, const char* name, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title, Int_t x, Int_t y); virtual TInspectorImp*CreateInspectorImp(const TObject* obj, UInt_t width, UInt_t height); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static TGClient*GetRootClient(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTOb",MatchSource.WIKI,root/html604/TQtRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtRootGuiFactory.html
https://root.cern/root/html604/TQtRootGuiFactory.html:2578,Availability,error,error,2578,"ar* title, UInt_t width, UInt_t height); virtual TCanvasImp*CreateCanvasImp(TCanvas* c, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height); virtual TContextMenuImp*CreateContextMenuImp(TContextMenu* c, const char* name, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title, Int_t x, Int_t y); virtual TInspectorImp*CreateInspectorImp(const TObject* obj, UInt_t width, UInt_t height); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static TGClient*GetRootClient(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* ",MatchSource.WIKI,root/html604/TQtRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtRootGuiFactory.html
https://root.cern/root/html604/TQtRootGuiFactory.html:2662,Availability,error,error,2662," c, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height); virtual TContextMenuImp*CreateContextMenuImp(TContextMenu* c, const char* name, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title, Int_t x, Int_t y); virtual TInspectorImp*CreateInspectorImp(const TObject* obj, UInt_t width, UInt_t height); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static TGClient*GetRootClient(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; vir",MatchSource.WIKI,root/html604/TQtRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtRootGuiFactory.html
https://root.cern/root/html604/TQtRootGuiFactory.html:123,Modifiability,inherit,inheritance,123,". TQtRootGuiFactory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » QTROOT; » TQtRootGuiFactory. class TQtRootGuiFactory: public TGuiFactory. TQtRootGuiFactory. This class is a factory for Qt GUI components. It overrides; the member functions of the ABS TGuiFactory. Function Members (Methods); public:. virtual~TQtRootGuiFactory(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual TApplicationImp*CreateApplicationImp(const char* classname, int* argc, char** argv); virtual TBrowserImp*CreateBrowserImp(TBrowser* b, const char* title, UInt_t width, UInt_t height); virtual TBrowserImp*CreateBrowserImp(TBrowser* b, const char* title, UInt_t width, UInt_t height, Option_t* opt); virtual TBrowserImp*CreateBrowserImp(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height); virtual TBrowserImp*CreateBrowserImp(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt); virtual TCanvasImp*CreateCanvasImp(TCanvas* c, const char* title, UInt_t width, UInt_t height); virtual TCanvasImp*CreateCanvasImp(TCanvas* c, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height); virtual TContextMenuImp*CreateContextMenuImp(TContextMenu* c, const char* name, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title, Int_t x,",MatchSource.WIKI,root/html604/TQtRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtRootGuiFactory.html
https://root.cern/root/html604/TQtRootGuiFactory.html:3619,Modifiability,Inherit,InheritsFrom,3619,"d* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static TGClient*GetRootClient(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz",MatchSource.WIKI,root/html604/TQtRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtRootGuiFactory.html
https://root.cern/root/html604/TQtRootGuiFactory.html:3685,Modifiability,Inherit,InheritsFrom,3685,"ct::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static TGClient*GetRootClient(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQtRootGuiFactory&operator=(const TQtRootGuiFactory&)",MatchSource.WIKI,root/html604/TQtRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtRootGuiFactory.html
https://root.cern/root/html604/TQtRootGuiFactory.html:7452,Modifiability,Inherit,Inheritance,7452,"r* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; static TGClient*gfQtClient. private:. TGuiFactory*fGuiProxy. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TGuiFactory. ←; TQtRootGuiFactory. Function documentation; TQtRootGuiFactory(); TQtRootGuiFactory ctor.; Restore the right TVirtualX pointer. TQtRootGuiFactory(const char* name, const char* title = ""Qt-based ROOT GUI Factory""); TQtRootGuiFactory ctor.; Restore the right TVirtualX pointer. TApplicationImp * CreateApplicationImp(const char* classname, int* argc, char** argv). void CreateQClient(). TCanvasImp * CreateCanvasImp(TCanvas* c, const char* title, UInt_t width, UInt_t height); { return fGuiProxy ? fGuiProxy->CreateCanvasImp( c, title, width, height) : 0; }. TCanvasImp * CreateCanvasImp(TCanvas* c, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height); { return fGuiProxy ? fGuiProxy->CreateCanvasImp(c, title, x, y, width, height) : 0 ;}. TBrowserImp * CreateBrowserImp(TBrowser* b, const char* title, UInt_t width, UInt_t height). TBrowserImp * CreateBrowserImp(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t heigh",MatchSource.WIKI,root/html604/TQtRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtRootGuiFactory.html
https://root.cern/root/html604/TQtRootGuiFactory.html:3509,Security,Hash,Hash,3509,"oidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static TGClient*GetRootClient(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::",MatchSource.WIKI,root/html604/TQtRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtRootGuiFactory.html
https://root.cern/root/html604/TQtRootGuiFactory.html:5857,Testability,Test,TestBit,5857,"ject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQtRootGuiFactory&operator=(const TQtRootGuiFactory&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQtRootGuiFactory(); TQtRootGuiFactory(const TQtRootGuiFactory&); TQtRootGuiFactory(const char* name, const char* title = ""Qt-based ROOT GUI Factory""); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQtRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtRootGuiFactory.html
https://root.cern/root/html604/TQtRootGuiFactory.html:5896,Testability,Test,TestBits,5896,"ject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TQtRootGuiFactory&operator=(const TQtRootGuiFactory&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TQtRootGuiFactory(); TQtRootGuiFactory(const TQtRootGuiFactory&); TQtRootGuiFactory(const char* name, const char* title = ""Qt-based ROOT GUI Factory""); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TQtRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtRootGuiFactory.html
https://root.cern/root/html604/TQtRootGuiFactory.html:774,Usability,Clear,Clear,774," virtual~TQtRootGuiFactory(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual TApplicationImp*CreateApplicationImp(const char* classname, int* argc, char** argv); virtual TBrowserImp*CreateBrowserImp(TBrowser* b, const char* title, UInt_t width, UInt_t height); virtual TBrowserImp*CreateBrowserImp(TBrowser* b, const char* title, UInt_t width, UInt_t height, Option_t* opt); virtual TBrowserImp*CreateBrowserImp(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height); virtual TBrowserImp*CreateBrowserImp(TBrowser* b, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height, Option_t* opt); virtual TCanvasImp*CreateCanvasImp(TCanvas* c, const char* title, UInt_t width, UInt_t height); virtual TCanvasImp*CreateCanvasImp(TCanvas* c, const char* title, Int_t x, Int_t y, UInt_t width, UInt_t height); virtual TContextMenuImp*CreateContextMenuImp(TContextMenu* c, const char* name, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title, Int_t x,",MatchSource.WIKI,root/html604/TQtRootGuiFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtRootGuiFactory.html
https://root.cern/root/html604/TQtRootSlot.html:3175,Availability,error,error,3175," char*); static uintQObject::registerUserData(); voidQObject::removeEventFilter(QObject*); voidQObject::setObjectName(const QString& name); voidQObject::setParent(QObject*); boolQObject::setProperty(const char* name, const QVariant& value); voidQObject::setUserData(uint id, QObjectUserData* data); boolQObject::signalsBlocked() const; intQObject::startTimer(int interval); voidTerminate() const; voidTerminate(int status) const; voidTerminateAndQuit() const; QThread*QObject::thread() const; static QStringtr(const char* s, const char* c = 0); static QStringtr(const char* s, const char* c, int n); static QStringtrUtf8(const char* s, const char* c = 0); static QStringtrUtf8(const char* s, const char* c, int n); QObjectUserData*QObject::userData(uint id) const. protected:. virtual voidQObject::childEvent(QChildEvent*); virtual voidQObject::connectNotify(const char* signal); virtual voidQObject::customEvent(QEvent*); voidQObject::destroyed(QObject* = 0); virtual voidQObject::disconnectNotify(const char* signal); voidError(int error); intQObject::receivers(const char* signal) const; QObject*QObject::sender() const; intQObject::senderSignalIndex() const; virtual voidQObject::timerEvent(QTimerEvent*); TQtRootSlot(). private:. voidoperator=(const TQtRootSlot&); static voidqt_static_metacall(QObject*, QMetaObject::Call, int, void**); TQtRootSlot(const TQtRootSlot&). Data Members; public:. static const QMetaObjectstaticMetaObject; static const QMetaObjectQObject::staticMetaObject. protected:. QScopedPointer<QObjectData>QObject::d_ptr; static TQtRootSlot*fgTQtRootSlot; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQtRootSlot * CintSlot(); create and return the singleton. void EndOfLine(); slot to perform the standard ""EndOfLine"" ROOT action; it used to update the current gPad. void ProcessLine(const QString& ); exe",MatchSource.WIKI,root/html604/TQtRootSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtRootSlot.html
https://root.cern/root/html604/TQtRootSlot.html:4798,Availability,Error,Error,4798,"(const char* signal); voidError(int error); intQObject::receivers(const char* signal) const; QObject*QObject::sender() const; intQObject::senderSignalIndex() const; virtual voidQObject::timerEvent(QTimerEvent*); TQtRootSlot(). private:. voidoperator=(const TQtRootSlot&); static voidqt_static_metacall(QObject*, QMetaObject::Call, int, void**); TQtRootSlot(const TQtRootSlot&). Data Members; public:. static const QMetaObjectstaticMetaObject; static const QMetaObjectQObject::staticMetaObject. protected:. QScopedPointer<QObjectData>QObject::d_ptr; static TQtRootSlot*fgTQtRootSlot; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQtRootSlot * CintSlot(); create and return the singleton. void EndOfLine(); slot to perform the standard ""EndOfLine"" ROOT action; it used to update the current gPad. void ProcessLine(const QString& ); execute the arbitrary ROOT /CINt command via; CINT C++ interpreter and emit the result. void ProcessLine(const char* ); execute the arbitrary ROOT /CINt command via; CINT C++ interpreter and emit the result. void Terminate(int status) const; the dedicated slot to terminate the ROOT application; with ""status"". void Terminate() const; the dedicated slot to terminate the ROOT application; and return the ""0"" status. void TerminateAndQuit() const; the dedicated slot to terminate the ROOT application; and quit the Qt Application if any. TQtRootSlot(const TQtRootSlot& ). void operator=(const TQtRootSlot& ). TQtRootSlot(); {}. virtual ~TQtRootSlot(); {}. void Error(int error). » Author: Valery Fine 18/01/2007 » Copyright (C) 2007 by Valeri Fine. Brookhaven National Laboratory.; » Last changed: root/qt:$Id$ » Last generated: 2015-09-08 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQtRootSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtRootSlot.html
https://root.cern/root/html604/TQtRootSlot.html:4808,Availability,error,error,4808,"(const char* signal); voidError(int error); intQObject::receivers(const char* signal) const; QObject*QObject::sender() const; intQObject::senderSignalIndex() const; virtual voidQObject::timerEvent(QTimerEvent*); TQtRootSlot(). private:. voidoperator=(const TQtRootSlot&); static voidqt_static_metacall(QObject*, QMetaObject::Call, int, void**); TQtRootSlot(const TQtRootSlot&). Data Members; public:. static const QMetaObjectstaticMetaObject; static const QMetaObjectQObject::staticMetaObject. protected:. QScopedPointer<QObjectData>QObject::d_ptr; static TQtRootSlot*fgTQtRootSlot; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQtRootSlot * CintSlot(); create and return the singleton. void EndOfLine(); slot to perform the standard ""EndOfLine"" ROOT action; it used to update the current gPad. void ProcessLine(const QString& ); execute the arbitrary ROOT /CINt command via; CINT C++ interpreter and emit the result. void ProcessLine(const char* ); execute the arbitrary ROOT /CINt command via; CINT C++ interpreter and emit the result. void Terminate(int status) const; the dedicated slot to terminate the ROOT application; with ""status"". void Terminate() const; the dedicated slot to terminate the ROOT application; and return the ""0"" status. void TerminateAndQuit() const; the dedicated slot to terminate the ROOT application; and quit the Qt Application if any. TQtRootSlot(const TQtRootSlot& ). void operator=(const TQtRootSlot& ). TQtRootSlot(); {}. virtual ~TQtRootSlot(); {}. void Error(int error). » Author: Valery Fine 18/01/2007 » Copyright (C) 2007 by Valeri Fine. Brookhaven National Laboratory.; » Last changed: root/qt:$Id$ » Last generated: 2015-09-08 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQtRootSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtRootSlot.html
https://root.cern/root/html604/TQtRootSlot.html:1685,Deployability,install,installEventFilter,1685,"er, const char* member, Qt::ConnectionType = Qt::AutoConnection); static boolQObject::connect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& method, Qt::ConnectionType type = Qt::AutoConnection); voidQObject::deleteLater(); boolQObject::disconnect(const QObject* receiver, const char* member = 0); boolQObject::disconnect(const char* signal = 0, const QObject* receiver = 0, const char* member = 0); static boolQObject::disconnect(const QObject* sender, const char* signal, const QObject* receiver, const char* member); static boolQObject::disconnect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& member); voidQObject::dumpObjectInfo(); voidQObject::dumpObjectTree(); QList<QByteArray>QObject::dynamicPropertyNames() const; voidEndOfLine(); virtual boolQObject::event(QEvent*); virtual boolQObject::eventFilter(QObject*, QEvent*); boolQObject::inherits(const char* classname) const; voidQObject::installEventFilter(QObject*); boolQObject::isWidgetType() const; voidQObject::killTimer(int id); virtual const QMetaObject*metaObject() const; voidQObject::moveToThread(QThread* thread); QStringQObject::objectName() const; QObject*QObject::parent() const; voidProcessLine(const char*); voidProcessLine(const QString&); QVariantQObject::property(const char* name) const; virtual intqt_metacall(QMetaObject::Call, int, void**); virtual void*qt_metacast(const char*); static uintQObject::registerUserData(); voidQObject::removeEventFilter(QObject*); voidQObject::setObjectName(const QString& name); voidQObject::setParent(QObject*); boolQObject::setProperty(const char* name, const QVariant& value); voidQObject::setUserData(uint id, QObjectUserData* data); boolQObject::signalsBlocked() const; intQObject::startTimer(int interval); voidTerminate() const; voidTerminate(int status) const; voidTerminateAndQuit() const; QThread*QObject::thread() const; static QStringtr(const char* s, const char* c = 0); static QS",MatchSource.WIKI,root/html604/TQtRootSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtRootSlot.html
https://root.cern/root/html604/TQtRootSlot.html:4078,Deployability,update,update,4078,"Event(QEvent*); voidQObject::destroyed(QObject* = 0); virtual voidQObject::disconnectNotify(const char* signal); voidError(int error); intQObject::receivers(const char* signal) const; QObject*QObject::sender() const; intQObject::senderSignalIndex() const; virtual voidQObject::timerEvent(QTimerEvent*); TQtRootSlot(). private:. voidoperator=(const TQtRootSlot&); static voidqt_static_metacall(QObject*, QMetaObject::Call, int, void**); TQtRootSlot(const TQtRootSlot&). Data Members; public:. static const QMetaObjectstaticMetaObject; static const QMetaObjectQObject::staticMetaObject. protected:. QScopedPointer<QObjectData>QObject::d_ptr; static TQtRootSlot*fgTQtRootSlot; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQtRootSlot * CintSlot(); create and return the singleton. void EndOfLine(); slot to perform the standard ""EndOfLine"" ROOT action; it used to update the current gPad. void ProcessLine(const QString& ); execute the arbitrary ROOT /CINt command via; CINT C++ interpreter and emit the result. void ProcessLine(const char* ); execute the arbitrary ROOT /CINt command via; CINT C++ interpreter and emit the result. void Terminate(int status) const; the dedicated slot to terminate the ROOT application; with ""status"". void Terminate() const; the dedicated slot to terminate the ROOT application; and return the ""0"" status. void TerminateAndQuit() const; the dedicated slot to terminate the ROOT application; and quit the Qt Application if any. TQtRootSlot(const TQtRootSlot& ). void operator=(const TQtRootSlot& ). TQtRootSlot(); {}. virtual ~TQtRootSlot(); {}. void Error(int error). » Author: Valery Fine 18/01/2007 » Copyright (C) 2007 by Valeri Fine. Brookhaven National Laboratory.; » Last changed: root/qt:$Id$ » Last generated: 2015-09-08 17:48; This page has been automatically generated. For comments or sugg",MatchSource.WIKI,root/html604/TQtRootSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtRootSlot.html
https://root.cern/root/html604/TQtRootSlot.html:1633,Modifiability,inherit,inherits,1633,"Object* sender, const char* signal, const QObject* receiver, const char* member, Qt::ConnectionType = Qt::AutoConnection); static boolQObject::connect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& method, Qt::ConnectionType type = Qt::AutoConnection); voidQObject::deleteLater(); boolQObject::disconnect(const QObject* receiver, const char* member = 0); boolQObject::disconnect(const char* signal = 0, const QObject* receiver = 0, const char* member = 0); static boolQObject::disconnect(const QObject* sender, const char* signal, const QObject* receiver, const char* member); static boolQObject::disconnect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& member); voidQObject::dumpObjectInfo(); voidQObject::dumpObjectTree(); QList<QByteArray>QObject::dynamicPropertyNames() const; voidEndOfLine(); virtual boolQObject::event(QEvent*); virtual boolQObject::eventFilter(QObject*, QEvent*); boolQObject::inherits(const char* classname) const; voidQObject::installEventFilter(QObject*); boolQObject::isWidgetType() const; voidQObject::killTimer(int id); virtual const QMetaObject*metaObject() const; voidQObject::moveToThread(QThread* thread); QStringQObject::objectName() const; QObject*QObject::parent() const; voidProcessLine(const char*); voidProcessLine(const QString&); QVariantQObject::property(const char* name) const; virtual intqt_metacall(QMetaObject::Call, int, void**); virtual void*qt_metacast(const char*); static uintQObject::registerUserData(); voidQObject::removeEventFilter(QObject*); voidQObject::setObjectName(const QString& name); voidQObject::setParent(QObject*); boolQObject::setProperty(const char* name, const QVariant& value); voidQObject::setUserData(uint id, QObjectUserData* data); boolQObject::signalsBlocked() const; intQObject::startTimer(int interval); voidTerminate() const; voidTerminate(int status) const; voidTerminateAndQuit() const; QThread*QObject::thread() const; stat",MatchSource.WIKI,root/html604/TQtRootSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtRootSlot.html
https://root.cern/root/html604/TQtRootSlot.html:3859,Modifiability,Inherit,Inheritance,3859,"rData(uint id) const. protected:. virtual voidQObject::childEvent(QChildEvent*); virtual voidQObject::connectNotify(const char* signal); virtual voidQObject::customEvent(QEvent*); voidQObject::destroyed(QObject* = 0); virtual voidQObject::disconnectNotify(const char* signal); voidError(int error); intQObject::receivers(const char* signal) const; QObject*QObject::sender() const; intQObject::senderSignalIndex() const; virtual voidQObject::timerEvent(QTimerEvent*); TQtRootSlot(). private:. voidoperator=(const TQtRootSlot&); static voidqt_static_metacall(QObject*, QMetaObject::Call, int, void**); TQtRootSlot(const TQtRootSlot&). Data Members; public:. static const QMetaObjectstaticMetaObject; static const QMetaObjectQObject::staticMetaObject. protected:. QScopedPointer<QObjectData>QObject::d_ptr; static TQtRootSlot*fgTQtRootSlot; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQtRootSlot * CintSlot(); create and return the singleton. void EndOfLine(); slot to perform the standard ""EndOfLine"" ROOT action; it used to update the current gPad. void ProcessLine(const QString& ); execute the arbitrary ROOT /CINt command via; CINT C++ interpreter and emit the result. void ProcessLine(const char* ); execute the arbitrary ROOT /CINt command via; CINT C++ interpreter and emit the result. void Terminate(int status) const; the dedicated slot to terminate the ROOT application; with ""status"". void Terminate() const; the dedicated slot to terminate the ROOT application; and return the ""0"" status. void TerminateAndQuit() const; the dedicated slot to terminate the ROOT application; and quit the Qt Application if any. TQtRootSlot(const TQtRootSlot& ). void operator=(const TQtRootSlot& ). TQtRootSlot(); {}. virtual ~TQtRootSlot(); {}. void Error(int error). » Author: Valery Fine 18/01/2007 » Copyright (C) 2007 by Valeri Fine.",MatchSource.WIKI,root/html604/TQtRootSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtRootSlot.html
https://root.cern/root/html604/TQtRootSlot.html:3872,Modifiability,Inherit,Inherited,3872,"rData(uint id) const. protected:. virtual voidQObject::childEvent(QChildEvent*); virtual voidQObject::connectNotify(const char* signal); virtual voidQObject::customEvent(QEvent*); voidQObject::destroyed(QObject* = 0); virtual voidQObject::disconnectNotify(const char* signal); voidError(int error); intQObject::receivers(const char* signal) const; QObject*QObject::sender() const; intQObject::senderSignalIndex() const; virtual voidQObject::timerEvent(QTimerEvent*); TQtRootSlot(). private:. voidoperator=(const TQtRootSlot&); static voidqt_static_metacall(QObject*, QMetaObject::Call, int, void**); TQtRootSlot(const TQtRootSlot&). Data Members; public:. static const QMetaObjectstaticMetaObject; static const QMetaObjectQObject::staticMetaObject. protected:. QScopedPointer<QObjectData>QObject::d_ptr; static TQtRootSlot*fgTQtRootSlot; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQtRootSlot * CintSlot(); create and return the singleton. void EndOfLine(); slot to perform the standard ""EndOfLine"" ROOT action; it used to update the current gPad. void ProcessLine(const QString& ); execute the arbitrary ROOT /CINt command via; CINT C++ interpreter and emit the result. void ProcessLine(const char* ); execute the arbitrary ROOT /CINt command via; CINT C++ interpreter and emit the result. void Terminate(int status) const; the dedicated slot to terminate the ROOT application; with ""status"". void Terminate() const; the dedicated slot to terminate the ROOT application; and return the ""0"" status. void TerminateAndQuit() const; the dedicated slot to terminate the ROOT application; and quit the Qt Application if any. TQtRootSlot(const TQtRootSlot& ). void operator=(const TQtRootSlot& ). TQtRootSlot(); {}. virtual ~TQtRootSlot(); {}. void Error(int error). » Author: Valery Fine 18/01/2007 » Copyright (C) 2007 by Valeri Fine.",MatchSource.WIKI,root/html604/TQtRootSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtRootSlot.html
https://root.cern/root/html604/TQtRootSlot.html:4021,Performance,perform,perform,4021,"Event(QEvent*); voidQObject::destroyed(QObject* = 0); virtual voidQObject::disconnectNotify(const char* signal); voidError(int error); intQObject::receivers(const char* signal) const; QObject*QObject::sender() const; intQObject::senderSignalIndex() const; virtual voidQObject::timerEvent(QTimerEvent*); TQtRootSlot(). private:. voidoperator=(const TQtRootSlot&); static voidqt_static_metacall(QObject*, QMetaObject::Call, int, void**); TQtRootSlot(const TQtRootSlot&). Data Members; public:. static const QMetaObjectstaticMetaObject; static const QMetaObjectQObject::staticMetaObject. protected:. QScopedPointer<QObjectData>QObject::d_ptr; static TQtRootSlot*fgTQtRootSlot; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQtRootSlot * CintSlot(); create and return the singleton. void EndOfLine(); slot to perform the standard ""EndOfLine"" ROOT action; it used to update the current gPad. void ProcessLine(const QString& ); execute the arbitrary ROOT /CINt command via; CINT C++ interpreter and emit the result. void ProcessLine(const char* ); execute the arbitrary ROOT /CINt command via; CINT C++ interpreter and emit the result. void Terminate(int status) const; the dedicated slot to terminate the ROOT application; with ""status"". void Terminate() const; the dedicated slot to terminate the ROOT application; and return the ""0"" status. void TerminateAndQuit() const; the dedicated slot to terminate the ROOT application; and quit the Qt Application if any. TQtRootSlot(const TQtRootSlot& ). void operator=(const TQtRootSlot& ). TQtRootSlot(); {}. virtual ~TQtRootSlot(); {}. void Error(int error). » Author: Valery Fine 18/01/2007 » Copyright (C) 2007 by Valeri Fine. Brookhaven National Laboratory.; » Last changed: root/qt:$Id$ » Last generated: 2015-09-08 17:48; This page has been automatically generated. For comments or sugg",MatchSource.WIKI,root/html604/TQtRootSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtRootSlot.html
https://root.cern/root/html604/TQtTimer.html:1807,Deployability,install,installEventFilter,1807,"ConnectionType = Qt::AutoConnection); static boolQObject::connect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& method, Qt::ConnectionType type = Qt::AutoConnection); static TQtTimer*Create(QObject* parent = 0); voidQObject::deleteLater(); boolQObject::disconnect(const QObject* receiver, const char* member = 0); boolQObject::disconnect(const char* signal = 0, const QObject* receiver = 0, const char* member = 0); static boolQObject::disconnect(const QObject* sender, const char* signal, const QObject* receiver, const char* member); static boolQObject::disconnect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& member); voidQObject::dumpObjectInfo(); voidQObject::dumpObjectTree(); QList<QByteArray>QObject::dynamicPropertyNames() const; virtual boolQObject::event(QEvent*); virtual boolQObject::eventFilter(QObject*, QEvent*); boolQObject::inherits(const char* classname) const; voidQObject::installEventFilter(QObject*); intQTimer::interval() const; virtual TClass*IsA() const; boolQTimer::isActive() const; boolQTimer::isSingleShot() const; boolQObject::isWidgetType() const; voidQObject::killTimer(int id); virtual const QMetaObject*metaObject() const; voidQObject::moveToThread(QThread* thread); QStringQObject::objectName() const; QObject*QObject::parent() const; QVariantQObject::property(const char* name) const; virtual intqt_metacall(QMetaObject::Call, int, void**); virtual void*qt_metacast(const char*); static TQtTimer*QtTimer(); static uintQObject::registerUserData(); voidQObject::removeEventFilter(QObject*); voidQTimer::setInterval(int msec); voidQObject::setObjectName(const QString& name); voidQObject::setParent(QObject*); boolQObject::setProperty(const char* name, const QVariant& value); voidQTimer::setSingleShot(bool singleShot); voidQObject::setUserData(uint id, QObjectUserData* data); virtual voidShowMembers(TMemberInspector& insp) const; boolQObject::signalsBlocked() const;",MatchSource.WIKI,root/html604/TQtTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtTimer.html
https://root.cern/root/html604/TQtTimer.html:114,Modifiability,inherit,inheritance,114,". TQtTimer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » QT; » TQtTimer. class TQtTimer: public QTimer. TQtTimer is a singelton singleshot QTimer to awake the ROOT event loop from Qt event loop. Function Members (Methods); public:. virtual~TQtTimer(); boolQObject::blockSignals(bool b); const QObjectList&QObject::children() const; static TClass*Class(); boolQObject::connect(const QObject* sender, const char* signal, const char* member, Qt::ConnectionType type = Qt::AutoConnection) const; static boolQObject::connect(const QObject* sender, const char* signal, const QObject* receiver, const char* member, Qt::ConnectionType = Qt::AutoConnection); static boolQObject::connect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& method, Qt::ConnectionType type = Qt::AutoConnection); static TQtTimer*Create(QObject* parent = 0); voidQObject::deleteLater(); boolQObject::disconnect(const QObject* receiver, const char* member = 0); boolQObject::disconnect(const char* signal = 0, const QObject* receiver = 0, const char* member = 0); static boolQObject::disconnect(const QObject* sender, const char* signal, const QObject* receiver, const char* member); static boolQObject::disconnect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& member); voidQObject::dumpObjectInfo(); voidQObject::dumpObjectTree(); QList<QByteArray>QObject::dynamicPropertyNames() const; virtual boolQObject::event(QEvent*); virtual boolQObject::eventFilter(QObject*, QEvent*); boolQObject::inherits(const char* classname) const; voidQObject::installEventFilter(QObject*); intQTimer::interval() const; virtual TClass*IsA() const; boolQTimer::isActive() const; boolQTimer::isSingleShot() const; boolQObject::isWidgetType() const; voidQObj",MatchSource.WIKI,root/html604/TQtTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtTimer.html
https://root.cern/root/html604/TQtTimer.html:1755,Modifiability,inherit,inherits,1755,"signal, const QObject* receiver, const char* member, Qt::ConnectionType = Qt::AutoConnection); static boolQObject::connect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& method, Qt::ConnectionType type = Qt::AutoConnection); static TQtTimer*Create(QObject* parent = 0); voidQObject::deleteLater(); boolQObject::disconnect(const QObject* receiver, const char* member = 0); boolQObject::disconnect(const char* signal = 0, const QObject* receiver = 0, const char* member = 0); static boolQObject::disconnect(const QObject* sender, const char* signal, const QObject* receiver, const char* member); static boolQObject::disconnect(const QObject* sender, const QMetaMethod& signal, const QObject* receiver, const QMetaMethod& member); voidQObject::dumpObjectInfo(); voidQObject::dumpObjectTree(); QList<QByteArray>QObject::dynamicPropertyNames() const; virtual boolQObject::event(QEvent*); virtual boolQObject::eventFilter(QObject*, QEvent*); boolQObject::inherits(const char* classname) const; voidQObject::installEventFilter(QObject*); intQTimer::interval() const; virtual TClass*IsA() const; boolQTimer::isActive() const; boolQTimer::isSingleShot() const; boolQObject::isWidgetType() const; voidQObject::killTimer(int id); virtual const QMetaObject*metaObject() const; voidQObject::moveToThread(QThread* thread); QStringQObject::objectName() const; QObject*QObject::parent() const; QVariantQObject::property(const char* name) const; virtual intqt_metacall(QMetaObject::Call, int, void**); virtual void*qt_metacast(const char*); static TQtTimer*QtTimer(); static uintQObject::registerUserData(); voidQObject::removeEventFilter(QObject*); voidQTimer::setInterval(int msec); voidQObject::setObjectName(const QString& name); voidQObject::setParent(QObject*); boolQObject::setProperty(const char* name, const QVariant& value); voidQTimer::setSingleShot(bool singleShot); voidQObject::setUserData(uint id, QObjectUserData* data); virtual voidShowMembers(TMemberIns",MatchSource.WIKI,root/html604/TQtTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtTimer.html
https://root.cern/root/html604/TQtTimer.html:4476,Modifiability,Inherit,Inheritance,4476,"* s, const char* c = 0); static QStringtr(const char* s, const char* c, int n); static QStringtrUtf8(const char* s, const char* c = 0); static QStringtrUtf8(const char* s, const char* c, int n); QObjectUserData*QObject::userData(uint id) const. protected:. virtual voidAwakeRootEvent(); virtual voidQObject::childEvent(QChildEvent*); virtual voidQObject::connectNotify(const char* signal); virtual voidQObject::customEvent(QEvent*); voidQObject::destroyed(QObject* = 0); virtual voidQObject::disconnectNotify(const char* signal); intQObject::receivers(const char* signal) const; QObject*QObject::sender() const; intQObject::senderSignalIndex() const; voidQTimer::timeout(); virtual voidQTimer::timerEvent(QTimerEvent*); TQtTimer(QObject* mother = 0). private:. voidoperator=(const TQtTimer&); static voidqt_static_metacall(QObject*, QMetaObject::Call, int, void**); TQtTimer(const TQtTimer&). Data Members; public:. static const QMetaObjectstaticMetaObject; static const QMetaObjectQTimer::staticMetaObject; static const QMetaObjectQObject::staticMetaObject. protected:. QScopedPointer<QObjectData>QObject::d_ptr; intfCounter; static TQtTimer*fgQTimer; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance Chart:. QTimer. ←; TQtTimer. Function documentation; void AwakeRootEvent(); proceess the ROOT events inside of Qt event loop. TQtTimer * Create(QObject* parent = 0); Create a singelton object TQtTimer. TQtTimer * QtTimer(); Return the singelton TQtTimer object. void operator=(const TQtTimer& ). TQtTimer(const TQtTimer& ). TQtTimer(QObject* mother = 0); {}. virtual ~TQtTimer(); {}. » Author: Valery Fine 09/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/qt:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQtTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtTimer.html
https://root.cern/root/html604/TQtTimer.html:3849,Safety,timeout,timeout,3849,"ata(uint id, QObjectUserData* data); virtual voidShowMembers(TMemberInspector& insp) const; boolQObject::signalsBlocked() const; static voidQTimer::singleShot(int msec, QObject* receiver, const char* member); voidQTimer::start(); voidQTimer::start(int msec); intQObject::startTimer(int interval); voidQTimer::stop(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); QThread*QObject::thread() const; intQTimer::timerId() const; static QStringtr(const char* s, const char* c = 0); static QStringtr(const char* s, const char* c, int n); static QStringtrUtf8(const char* s, const char* c = 0); static QStringtrUtf8(const char* s, const char* c, int n); QObjectUserData*QObject::userData(uint id) const. protected:. virtual voidAwakeRootEvent(); virtual voidQObject::childEvent(QChildEvent*); virtual voidQObject::connectNotify(const char* signal); virtual voidQObject::customEvent(QEvent*); voidQObject::destroyed(QObject* = 0); virtual voidQObject::disconnectNotify(const char* signal); intQObject::receivers(const char* signal) const; QObject*QObject::sender() const; intQObject::senderSignalIndex() const; voidQTimer::timeout(); virtual voidQTimer::timerEvent(QTimerEvent*); TQtTimer(QObject* mother = 0). private:. voidoperator=(const TQtTimer&); static voidqt_static_metacall(QObject*, QMetaObject::Call, int, void**); TQtTimer(const TQtTimer&). Data Members; public:. static const QMetaObjectstaticMetaObject; static const QMetaObjectQTimer::staticMetaObject; static const QMetaObjectQObject::staticMetaObject. protected:. QScopedPointer<QObjectData>QObject::d_ptr; intfCounter; static TQtTimer*fgQTimer; static const QMetaObjectQObject::staticQtMetaObject. private:. static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance Chart:. QTimer. ←; TQtTimer. Function documentation; void AwakeRootEvent(); proceess the ROOT events inside of Qt event loop. TQtTimer * Create(QObject* parent = 0); Create a singelton object TQtTimer.",MatchSource.WIKI,root/html604/TQtTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtTimer.html
https://root.cern/root/html604/TQtWidget.html:9409,Availability,mask,mask,9409,"dget::isMaximized() const; boolQWidget::isMinimized() const; boolQWidget::isModal() const; boolQWidget::isRightToLeft() const; Bool_tIsSignalEventEnabled(UInt_t f) const; boolQWidget::isTopLevel() const; boolQWidget::isVisible() const; boolQWidget::isVisibleTo(QWidget*) const; boolQObject::isWidgetType() const; boolQWidget::isWindow() const; boolQWidget::isWindowModified() const; static QWidget*QWidget::keyboardGrabber(); voidQObject::killTimer(int id); QLayout*QWidget::layout() const; Qt::LayoutDirectionQWidget::layoutDirection() const; QLocaleQWidget::locale() const; intQPaintDevice::logicalDpiX() const; intQPaintDevice::logicalDpiY() const; voidQWidget::lower(); QPointQWidget::mapFrom(QWidget*, const QPoint&) const; QPointQWidget::mapFromGlobal(const QPoint&) const; QPointQWidget::mapFromParent(const QPoint&) const; QPointQWidget::mapTo(QWidget*, const QPoint&) const; QPointQWidget::mapToGlobal(const QPoint&) const; QPointQWidget::mapToParent(const QPoint&) const; QRegionQWidget::mask() const; intQWidget::maximumHeight() const; QSizeQWidget::maximumSize() const; intQWidget::maximumWidth() const; virtual const QMetaObject*metaObject() const; intQWidget::minimumHeight() const; QSizeQWidget::minimumSize() const; virtual QSizeminimumSizeHint() const; intQWidget::minimumWidth() const; static QWidget*QWidget::mouseGrabber(); voidQWidget::move(const QPoint&); voidQWidget::move(int x, int y); voidQObject::moveToThread(QThread* thread); QWidget*QWidget::nativeParentWidget() const; QWidget*QWidget::nextInFocusChain() const; QRectQWidget::normalGeometry() const; intQPaintDevice::numColors() const; QStringQObject::objectName() const; voidQWidget::overrideWindowFlags(Qt::WindowFlags type); voidQWidget::overrideWindowState(Qt::WindowStates state); virtual QPaintEngine*QWidget::paintEngine() const; boolQPaintDevice::paintingActive() const; const QPalette&QWidget::palette() const; QObject*QObject::parent() const; QWidget*QWidget::parentWidget() const; intQPaintDevice::physicalDpi",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:1031,Deployability,Update,Update,1031,"omepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » QT; » TQtWidget. class TQtWidget: public QWidget. TQtWidget is a QWidget with the QPixmap double buffer; It is designed to back the ROOT TCanvasImp class interface and it can be used; as a regular Qt Widget to create Qt-based GUI with the embedded TCanvas objects. This widget can be used as a Qt ""custom widget""; to build a custom GUI interfaces with Qt Designer. The class emits the Qt signals and has Qt public slots. Public slots: (Qt). virtual void cd(); // make the associated TCanvas the current one (shortcut to TCanvas::cd()); virtual void cd(int subpadnumber); // as above - shortcut to Canvas::cd(int subpadnumber); void Disconnect(); // disconnect the QWidget from the ROOT TCanvas (used in the class dtor); void Refresh(); // force the associated TCanvas::Update to be called; virtual bool Save(const QString &fileName) const; // Save the widget image with some ppixmap file; virtual bool Save(const char *fileName) const;; virtual bool Save(const QString &fileName,const char *format,int quality=60) const;; virtual bool Save(const char *fileName,const char *format,int quality=60) const;. signals (Qt). CanvasPainted(); // Signal the TCanvas has been painted onto the screen; Saved(bool ok); // Signal the TCanvas has been saved into the file; RootEventProcessed(TObject *selected, unsigned int event, TCanvas *c);; // Signal the Qt mouse/keyboard event has been process by ROOT; // This ""signal"" is emitted by the enabled mouse events only.; // See: EnableSignalEvents; // --- DisableSignalEvents. public methods:; The methods below define whether the TQtWidget object emits ""RootEventProcessed"" Qt signals; (By default no RootEventProcessed Qt signal is emitted ); void EnableSignalEvents (UInt_t f); void DisableSignalEvents(UInt_t f),; where f is a bitw",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:7951,Deployability,install,installEventFilter,7951,"intQWidget::grabShortcut(const QKeySequence& key, Qt::ShortcutContext context = Qt::WindowShortcut); QGraphicsEffect*QWidget::graphicsEffect() const; QGraphicsProxyWidget*QWidget::graphicsProxyWidget() const; Qt::HANDLEQWidget::handle() const; boolQWidget::hasFocus() const; boolQWidget::hasMouseTracking() const; intQWidget::height() const; virtual intQWidget::heightForWidth(int) const; intQPaintDevice::heightMM() const; voidQWidget::hide(); boolQObject::inherits(const char* classname) const; static TApplication*InitRint(Bool_t prompt = kFALSE, const char* appClassName = ""QtRint"", int* argc = 0, char** argv = 0, void* options = 0, int numOptions = 0, Bool_t noLogo = kTRUE); QInputContext*QWidget::inputContext(); Qt::InputMethodHintsQWidget::inputMethodHints() const; virtual QVariantQWidget::inputMethodQuery(Qt::InputMethodQuery) const; voidQWidget::insertAction(QAction* before, QAction* action); voidQWidget::insertActions(QAction* before, QList<QAction*> actions); voidQObject::installEventFilter(QObject*); WIdQWidget::internalWinId() const; voidInvertBit(UInt_t f); virtual TClass*IsA() const; boolQWidget::isActiveWindow() const; boolQWidget::isAncestorOf(const QWidget* child) const; boolIsDoubleBuffered() const; boolQWidget::isEnabled() const; boolQWidget::isEnabledTo(QWidget*) const; boolQWidget::isEnabledToTLW() const; boolQWidget::isFullScreen() const; boolQWidget::isHidden() const; boolQWidget::isLeftToRight() const; boolQWidget::isMaximized() const; boolQWidget::isMinimized() const; boolQWidget::isModal() const; boolQWidget::isRightToLeft() const; Bool_tIsSignalEventEnabled(UInt_t f) const; boolQWidget::isTopLevel() const; boolQWidget::isVisible() const; boolQWidget::isVisibleTo(QWidget*) const; boolQObject::isWidgetType() const; boolQWidget::isWindow() const; boolQWidget::isWindowModified() const; static QWidget*QWidget::keyboardGrabber(); voidQObject::killTimer(int id); QLayout*QWidget::layout() const; Qt::LayoutDirectionQWidget::layoutDirection() const; QLocal",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:10801,Deployability,release,releaseKeyboard,10801,"t x, int y); voidQObject::moveToThread(QThread* thread); QWidget*QWidget::nativeParentWidget() const; QWidget*QWidget::nextInFocusChain() const; QRectQWidget::normalGeometry() const; intQPaintDevice::numColors() const; QStringQObject::objectName() const; voidQWidget::overrideWindowFlags(Qt::WindowFlags type); voidQWidget::overrideWindowState(Qt::WindowStates state); virtual QPaintEngine*QWidget::paintEngine() const; boolQPaintDevice::paintingActive() const; const QPalette&QWidget::palette() const; QObject*QObject::parent() const; QWidget*QWidget::parentWidget() const; intQPaintDevice::physicalDpiX() const; intQPaintDevice::physicalDpiY() const; QPointQWidget::pos() const; QWidget*QWidget::previousInFocusChain() const; QVariantQObject::property(const char* name) const; virtual intqt_metacall(QMetaObject::Call, int, void**); virtual void*qt_metacast(const char*); voidQWidget::raise(); QRectQWidget::rect() const; voidRefresh(); static uintQObject::registerUserData(); voidQWidget::releaseKeyboard(); voidQWidget::releaseMouse(); voidQWidget::releaseShortcut(int id); voidQWidget::removeAction(QAction* action); voidQObject::removeEventFilter(QObject*); voidQWidget::render(QPaintDevice* target, const QPoint& targetOffset = QPoint(), const QRegion& sourceRegion = QRegion(), QWidget::RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren)); voidQWidget::render(QPainter* painter, const QPoint& targetOffset = QPoint(), const QRegion& sourceRegion = QRegion(), QWidget::RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren)); voidQWidget::repaint(); voidQWidget::repaint(const QRect&); voidQWidget::repaint(const QRegion&); voidQWidget::repaint(int x, int y, int w, int h); voidResetBit(UInt_t f); voidQWidget::resize(const QSize&); voidQWidget::resize(int w, int h); boolQWidget::restoreGeometry(const QByteArray& geometry); virtual boolSave(const QString& fileName) const; virtual boolSave(const char* fileName) const; virtual boolSave(const QStri",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:10833,Deployability,release,releaseMouse,10833,"ToThread(QThread* thread); QWidget*QWidget::nativeParentWidget() const; QWidget*QWidget::nextInFocusChain() const; QRectQWidget::normalGeometry() const; intQPaintDevice::numColors() const; QStringQObject::objectName() const; voidQWidget::overrideWindowFlags(Qt::WindowFlags type); voidQWidget::overrideWindowState(Qt::WindowStates state); virtual QPaintEngine*QWidget::paintEngine() const; boolQPaintDevice::paintingActive() const; const QPalette&QWidget::palette() const; QObject*QObject::parent() const; QWidget*QWidget::parentWidget() const; intQPaintDevice::physicalDpiX() const; intQPaintDevice::physicalDpiY() const; QPointQWidget::pos() const; QWidget*QWidget::previousInFocusChain() const; QVariantQObject::property(const char* name) const; virtual intqt_metacall(QMetaObject::Call, int, void**); virtual void*qt_metacast(const char*); voidQWidget::raise(); QRectQWidget::rect() const; voidRefresh(); static uintQObject::registerUserData(); voidQWidget::releaseKeyboard(); voidQWidget::releaseMouse(); voidQWidget::releaseShortcut(int id); voidQWidget::removeAction(QAction* action); voidQObject::removeEventFilter(QObject*); voidQWidget::render(QPaintDevice* target, const QPoint& targetOffset = QPoint(), const QRegion& sourceRegion = QRegion(), QWidget::RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren)); voidQWidget::render(QPainter* painter, const QPoint& targetOffset = QPoint(), const QRegion& sourceRegion = QRegion(), QWidget::RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren)); voidQWidget::repaint(); voidQWidget::repaint(const QRect&); voidQWidget::repaint(const QRegion&); voidQWidget::repaint(int x, int y, int w, int h); voidResetBit(UInt_t f); voidQWidget::resize(const QSize&); voidQWidget::resize(int w, int h); boolQWidget::restoreGeometry(const QByteArray& geometry); virtual boolSave(const QString& fileName) const; virtual boolSave(const char* fileName) const; virtual boolSave(const QString& fileName, const char* forma",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:10862,Deployability,release,releaseShortcut,10862,"get*QWidget::nativeParentWidget() const; QWidget*QWidget::nextInFocusChain() const; QRectQWidget::normalGeometry() const; intQPaintDevice::numColors() const; QStringQObject::objectName() const; voidQWidget::overrideWindowFlags(Qt::WindowFlags type); voidQWidget::overrideWindowState(Qt::WindowStates state); virtual QPaintEngine*QWidget::paintEngine() const; boolQPaintDevice::paintingActive() const; const QPalette&QWidget::palette() const; QObject*QObject::parent() const; QWidget*QWidget::parentWidget() const; intQPaintDevice::physicalDpiX() const; intQPaintDevice::physicalDpiY() const; QPointQWidget::pos() const; QWidget*QWidget::previousInFocusChain() const; QVariantQObject::property(const char* name) const; virtual intqt_metacall(QMetaObject::Call, int, void**); virtual void*qt_metacast(const char*); voidQWidget::raise(); QRectQWidget::rect() const; voidRefresh(); static uintQObject::registerUserData(); voidQWidget::releaseKeyboard(); voidQWidget::releaseMouse(); voidQWidget::releaseShortcut(int id); voidQWidget::removeAction(QAction* action); voidQObject::removeEventFilter(QObject*); voidQWidget::render(QPaintDevice* target, const QPoint& targetOffset = QPoint(), const QRegion& sourceRegion = QRegion(), QWidget::RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren)); voidQWidget::render(QPainter* painter, const QPoint& targetOffset = QPoint(), const QRegion& sourceRegion = QRegion(), QWidget::RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren)); voidQWidget::repaint(); voidQWidget::repaint(const QRect&); voidQWidget::repaint(const QRegion&); voidQWidget::repaint(int x, int y, int w, int h); voidResetBit(UInt_t f); voidQWidget::resize(const QSize&); voidQWidget::resize(int w, int h); boolQWidget::restoreGeometry(const QByteArray& geometry); virtual boolSave(const QString& fileName) const; virtual boolSave(const char* fileName) const; virtual boolSave(const QString& fileName, const char* format, int quality = 60) const; vi",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:17415,Deployability,update,update,17415,"nterval); QStringQWidget::statusTip() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; Bool_tTestBit(UInt_t f) const; Int_tTestBits(UInt_t f) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; TQtWidget(QWidget* parent = 0, Qt::WFlags f = 0, bool embedded = true); TQtWidget(QWidget* parent, const char* name, Qt::WFlags f = 0, bool embedded = true); static QStringtr(const char* s, const char* c = 0); static QStringtr(const char* s, const char* c, int n); static QStringtrUtf8(const char* s, const char* c = 0); static QStringtrUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidQWidget::unsetCursor(); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::width() const; intQPaintDevice::widthMM() const; QWidget*QWidget::window() const; QStringQWidget::windowFilePath() const; Qt::WindowFlagsQWidget::windowFlags() const; QIconQWidget::windowIcon() const; QStringQWidget::windowIconText() const; Qt::WindowModalityQWidget::windowModality() const; qrealQWidget::windowOpacity() const; QStringQWidget::windowRole() const; Qt::WindowStatesQWidget::windowState() const; QWindowSurface*QWidget::windowSurface() const; QStringQWidget::windowTitle() const; Qt::WindowTypeQWidget::windowType() const; WIdQWidget::winId() const; intQWidget::x() const; const QX11Info&QWidget::x11Info() const; Qt::HANDLEQWidget::x11PictureHandle() co",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:17438,Deployability,update,update,17438,"t::statusTip() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; Bool_tTestBit(UInt_t f) const; Int_tTestBits(UInt_t f) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; TQtWidget(QWidget* parent = 0, Qt::WFlags f = 0, bool embedded = true); TQtWidget(QWidget* parent, const char* name, Qt::WFlags f = 0, bool embedded = true); static QStringtr(const char* s, const char* c = 0); static QStringtr(const char* s, const char* c, int n); static QStringtrUtf8(const char* s, const char* c = 0); static QStringtrUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidQWidget::unsetCursor(); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::width() const; intQPaintDevice::widthMM() const; QWidget*QWidget::window() const; QStringQWidget::windowFilePath() const; Qt::WindowFlagsQWidget::windowFlags() const; QIconQWidget::windowIcon() const; QStringQWidget::windowIconText() const; Qt::WindowModalityQWidget::windowModality() const; qrealQWidget::windowOpacity() const; QStringQWidget::windowRole() const; Qt::WindowStatesQWidget::windowState() const; QWindowSurface*QWidget::windowSurface() const; QStringQWidget::windowTitle() const; Qt::WindowTypeQWidget::windowType() const; WIdQWidget::winId() const; intQWidget::x() const; const QX11Info&QWidget::x11Info() const; Qt::HANDLEQWidget::x11PictureHandle() const; intQWidget::y() co",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:17473,Deployability,update,update,17473,"tatusTip() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; Bool_tTestBit(UInt_t f) const; Int_tTestBits(UInt_t f) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; TQtWidget(QWidget* parent = 0, Qt::WFlags f = 0, bool embedded = true); TQtWidget(QWidget* parent, const char* name, Qt::WFlags f = 0, bool embedded = true); static QStringtr(const char* s, const char* c = 0); static QStringtr(const char* s, const char* c, int n); static QStringtrUtf8(const char* s, const char* c = 0); static QStringtrUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidQWidget::unsetCursor(); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::width() const; intQPaintDevice::widthMM() const; QWidget*QWidget::window() const; QStringQWidget::windowFilePath() const; Qt::WindowFlagsQWidget::windowFlags() const; QIconQWidget::windowIcon() const; QStringQWidget::windowIconText() const; Qt::WindowModalityQWidget::windowModality() const; qrealQWidget::windowOpacity() const; QStringQWidget::windowRole() const; Qt::WindowStatesQWidget::windowState() const; QWindowSurface*QWidget::windowSurface() const; QStringQWidget::windowTitle() const; Qt::WindowTypeQWidget::windowType() const; WIdQWidget::winId() const; intQWidget::x() const; const QX11Info&QWidget::x11Info() const; Qt::HANDLEQWidget::x11PictureHandle() const; intQWidget::y() const.",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:17510,Deployability,update,update,17510,"tatusTip() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; Bool_tTestBit(UInt_t f) const; Int_tTestBits(UInt_t f) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; TQtWidget(QWidget* parent = 0, Qt::WFlags f = 0, bool embedded = true); TQtWidget(QWidget* parent, const char* name, Qt::WFlags f = 0, bool embedded = true); static QStringtr(const char* s, const char* c = 0); static QStringtr(const char* s, const char* c, int n); static QStringtrUtf8(const char* s, const char* c = 0); static QStringtrUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidQWidget::unsetCursor(); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::width() const; intQPaintDevice::widthMM() const; QWidget*QWidget::window() const; QStringQWidget::windowFilePath() const; Qt::WindowFlagsQWidget::windowFlags() const; QIconQWidget::windowIcon() const; QStringQWidget::windowIconText() const; Qt::WindowModalityQWidget::windowModality() const; qrealQWidget::windowOpacity() const; QStringQWidget::windowRole() const; Qt::WindowStatesQWidget::windowState() const; QWindowSurface*QWidget::windowSurface() const; QStringQWidget::windowTitle() const; Qt::WindowTypeQWidget::windowType() const; WIdQWidget::winId() const; intQWidget::x() const; const QX11Info&QWidget::x11Info() const; Qt::HANDLEQWidget::x11PictureHandle() const; intQWidget::y() const.",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:17559,Deployability,update,updateGeometry,17559,"tatusTip() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; Bool_tTestBit(UInt_t f) const; Int_tTestBits(UInt_t f) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; TQtWidget(QWidget* parent = 0, Qt::WFlags f = 0, bool embedded = true); TQtWidget(QWidget* parent, const char* name, Qt::WFlags f = 0, bool embedded = true); static QStringtr(const char* s, const char* c = 0); static QStringtr(const char* s, const char* c, int n); static QStringtrUtf8(const char* s, const char* c = 0); static QStringtrUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidQWidget::unsetCursor(); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::width() const; intQPaintDevice::widthMM() const; QWidget*QWidget::window() const; QStringQWidget::windowFilePath() const; Qt::WindowFlagsQWidget::windowFlags() const; QIconQWidget::windowIcon() const; QStringQWidget::windowIconText() const; Qt::WindowModalityQWidget::windowModality() const; qrealQWidget::windowOpacity() const; QStringQWidget::windowRole() const; Qt::WindowStatesQWidget::windowState() const; QWindowSurface*QWidget::windowSurface() const; QStringQWidget::windowTitle() const; Qt::WindowTypeQWidget::windowType() const; WIdQWidget::winId() const; intQWidget::x() const; const QX11Info&QWidget::x11Info() const; Qt::HANDLEQWidget::x11PictureHandle() const; intQWidget::y() const.",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:17590,Deployability,update,updatesEnabled,17590,"tatusTip() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; Bool_tTestBit(UInt_t f) const; Int_tTestBits(UInt_t f) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; TQtWidget(QWidget* parent = 0, Qt::WFlags f = 0, bool embedded = true); TQtWidget(QWidget* parent, const char* name, Qt::WFlags f = 0, bool embedded = true); static QStringtr(const char* s, const char* c = 0); static QStringtr(const char* s, const char* c, int n); static QStringtrUtf8(const char* s, const char* c = 0); static QStringtrUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidQWidget::unsetCursor(); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::userData(uint id) const; QRegionQWidget::visibleRegion() const; QStringQWidget::whatsThis() const; intQWidget::width() const; intQPaintDevice::widthMM() const; QWidget*QWidget::window() const; QStringQWidget::windowFilePath() const; Qt::WindowFlagsQWidget::windowFlags() const; QIconQWidget::windowIcon() const; QStringQWidget::windowIconText() const; Qt::WindowModalityQWidget::windowModality() const; qrealQWidget::windowOpacity() const; QStringQWidget::windowRole() const; Qt::WindowStatesQWidget::windowState() const; QWindowSurface*QWidget::windowSurface() const; QStringQWidget::windowTitle() const; Qt::WindowTypeQWidget::windowType() const; WIdQWidget::winId() const; intQWidget::x() const; const QX11Info&QWidget::x11Info() const; Qt::HANDLEQWidget::x11PictureHandle() const; intQWidget::y() const.",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:21255,Deployability,update,updateMicroFocus,21255,"vent*); virtual voidEmitCanvasPainted(); virtual voidQWidget::enabledChange(bool); virtual voidenterEvent(QEvent*); virtual boolQWidget::event(QEvent*); virtual voidexitSizeEvent(); virtual voidfocusInEvent(QFocusEvent*); boolQWidget::focusNextChild(); virtual boolQWidget::focusNextPrevChild(bool next); virtual voidfocusOutEvent(QFocusEvent*); boolQWidget::focusPreviousChild(); virtual voidQWidget::fontChange(const QFont&); QWidget*GetRootID() const; virtual voidQWidget::hideEvent(QHideEvent*); voidInit(); virtual voidQWidget::inputMethodEvent(QInputMethodEvent*); virtual voidkeyPressEvent(QKeyEvent*); virtual voidkeyReleaseEvent(QKeyEvent*); virtual voidQWidget::languageChange(); virtual voidleaveEvent(QEvent*); virtual intQWidget::metric(QPaintDevice::PaintDeviceMetric) const; virtual voidmouseDoubleClickEvent(QMouseEvent*); virtual voidmouseMoveEvent(QMouseEvent*); virtual voidmousePressEvent(QMouseEvent*); virtual voidmouseReleaseEvent(QMouseEvent*); virtual voidQWidget::moveEvent(QMoveEvent*); virtual voidpaintEvent(QPaintEvent*); boolpaintFlag(bool mode = true); boolPaintingActive() const; virtual voidQWidget::paletteChange(const QPalette&); intQObject::receivers(const char* signal) const; voidRefreshCB(); voidResetCanvas(); voidQWidget::resetInputContext(); virtual voidresizeEvent(QResizeEvent*); voidRootEventProcessed(TObject* selected, unsigned int event, TCanvas* c); voidSaved(bool ok); QObject*QObject::sender() const; intQObject::senderSignalIndex() const; voidSetIgnoreLeaveEnter(int ignoreLE = 1); voidSetRootID(QWidget* wrapper); virtual voidSetSizeHint(const QSize& size); virtual voidshowEvent(QShowEvent*); virtual voidstretchWidget(QResizeEvent* e); virtual voidQWidget::styleChange(QStyle&); virtual voidQWidget::tabletEvent(QTabletEvent*); virtual voidQObject::timerEvent(QTimerEvent*); voidQWidget::updateMicroFocus(); virtual voidQWidget::wheelEvent(QWheelEvent*); virtual voidQWidget::windowActivationChange(bool); virtual boolQWidget::x11Event(XEvent*).",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:26132,Deployability,release,released,26132,"f needed; use the permanent single shot timer to eliminate; the redundand refreshing for the sake of the performance. void RefreshCB(); [slot] to allow Qt signal refreshing the ROOT TCanvas if needed. void SetCanvas(TCanvas* c); remember my host TCanvas and adopt its name. customEvent(QEvent* ); The custom response to the special WIN32 events; These events are not present with X11 systems. void contextMenuEvent(QContextMenuEvent* ); The custom response to the Qt QContextMenuEvent; Map QContextMenuEvent to the ROOT kButton3Down = 3 event. void focusInEvent(QFocusEvent* ); The custom response to the Qt QFocusEvent ""in""; this imposes an extra protection to avoid TObject interaction with; mouse event accidently. void focusOutEvent(QFocusEvent* ); The custom response to the Qt QFocusEvent ""out""; this imposes an extra protection to avoid TObject interaction with; mouse event accidently. void mousePressEvent(QMouseEvent* ); Map the Qt mouse press button event to the ROOT TCanvas events; Mouse events occur when a mouse button is pressed or released inside; a widget or when the mouse cursor is moved. void mouseMoveEvent(QMouseEvent* ); Map the Qt mouse move pointer event to the ROOT TCanvas events; kMouseMotion = 51,; kButton1Motion = 21, kButton2Motion = 22, kButton3Motion = 23, kKeyPress = 24. void mouseReleaseEvent(QMouseEvent* ); Map the Qt mouse button release event to the ROOT TCanvas events; kButton1Up = 11, kButton2Up = 12, kButton3Up = 13. void mouseDoubleClickEvent(QMouseEvent* ); Map the Qt mouse double click button event to the ROOT TCanvas events; kButton1Double = 61, kButton2Double = 62, kButton3Double = 63. void keyPressEvent(QKeyEvent* ); Map the Qt key press event to the ROOT TCanvas events; kKeyDown = 4. void keyReleaseEvent(QKeyEvent* ); Map the Qt key release event to the ROOT TCanvas events; kKeyUp = 14. void enterEvent(QEvent* ); Map the Qt mouse enters widget event to the ROOT TCanvas events; kMouseEnter = 52. void leaveEvent(QEvent* ); Map the Qt mouse",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:26455,Deployability,release,release,26455,"ystems. void contextMenuEvent(QContextMenuEvent* ); The custom response to the Qt QContextMenuEvent; Map QContextMenuEvent to the ROOT kButton3Down = 3 event. void focusInEvent(QFocusEvent* ); The custom response to the Qt QFocusEvent ""in""; this imposes an extra protection to avoid TObject interaction with; mouse event accidently. void focusOutEvent(QFocusEvent* ); The custom response to the Qt QFocusEvent ""out""; this imposes an extra protection to avoid TObject interaction with; mouse event accidently. void mousePressEvent(QMouseEvent* ); Map the Qt mouse press button event to the ROOT TCanvas events; Mouse events occur when a mouse button is pressed or released inside; a widget or when the mouse cursor is moved. void mouseMoveEvent(QMouseEvent* ); Map the Qt mouse move pointer event to the ROOT TCanvas events; kMouseMotion = 51,; kButton1Motion = 21, kButton2Motion = 22, kButton3Motion = 23, kKeyPress = 24. void mouseReleaseEvent(QMouseEvent* ); Map the Qt mouse button release event to the ROOT TCanvas events; kButton1Up = 11, kButton2Up = 12, kButton3Up = 13. void mouseDoubleClickEvent(QMouseEvent* ); Map the Qt mouse double click button event to the ROOT TCanvas events; kButton1Double = 61, kButton2Double = 62, kButton3Double = 63. void keyPressEvent(QKeyEvent* ); Map the Qt key press event to the ROOT TCanvas events; kKeyDown = 4. void keyReleaseEvent(QKeyEvent* ); Map the Qt key release event to the ROOT TCanvas events; kKeyUp = 14. void enterEvent(QEvent* ); Map the Qt mouse enters widget event to the ROOT TCanvas events; kMouseEnter = 52. void leaveEvent(QEvent* ); Map the Qt mouse leaves widget event to the ROOT TCanvas events; kMouseLeave = 53. void resizeEvent(QResizeEvent* ); The widget will be erased and receive a paint event immediately after; processing the resize event.; No drawing need be (or should be) done inside this handler. void SetSaveFormat(const char* format); Set the default save format for the widget. bool Save(const char* fileName) const.",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:26877,Deployability,release,release,26877," ""out""; this imposes an extra protection to avoid TObject interaction with; mouse event accidently. void mousePressEvent(QMouseEvent* ); Map the Qt mouse press button event to the ROOT TCanvas events; Mouse events occur when a mouse button is pressed or released inside; a widget or when the mouse cursor is moved. void mouseMoveEvent(QMouseEvent* ); Map the Qt mouse move pointer event to the ROOT TCanvas events; kMouseMotion = 51,; kButton1Motion = 21, kButton2Motion = 22, kButton3Motion = 23, kKeyPress = 24. void mouseReleaseEvent(QMouseEvent* ); Map the Qt mouse button release event to the ROOT TCanvas events; kButton1Up = 11, kButton2Up = 12, kButton3Up = 13. void mouseDoubleClickEvent(QMouseEvent* ); Map the Qt mouse double click button event to the ROOT TCanvas events; kButton1Double = 61, kButton2Double = 62, kButton3Double = 63. void keyPressEvent(QKeyEvent* ); Map the Qt key press event to the ROOT TCanvas events; kKeyDown = 4. void keyReleaseEvent(QKeyEvent* ); Map the Qt key release event to the ROOT TCanvas events; kKeyUp = 14. void enterEvent(QEvent* ); Map the Qt mouse enters widget event to the ROOT TCanvas events; kMouseEnter = 52. void leaveEvent(QEvent* ); Map the Qt mouse leaves widget event to the ROOT TCanvas events; kMouseLeave = 53. void resizeEvent(QResizeEvent* ); The widget will be erased and receive a paint event immediately after; processing the resize event.; No drawing need be (or should be) done inside this handler. void SetSaveFormat(const char* format); Set the default save format for the widget. bool Save(const char* fileName) const. TQtWidget::Save(const QString &fileName) is a public Qt slot.; it saves the double buffer of this object using the default save; format defined the file extension; If the ""fileName"" has no extension the ""default"" format is to be used instead; The default format is ""PNG"".; It can be changed with the TQtWidget::SetSaveFormat method. bool Save(const QString& fileName) const. TQtWidget::Save(const QString &fil",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:29145,Deployability,update,update,29145,"hod. bool Save(const char* fileName, const char* format, int quality = 60) const. bool Save(const QString& fileName, const char* format, int quality = 60) const; TQtWidget::save is a public Qt slot.; it saves the double buffer of this object using QPixmap facility. void SetDoubleBuffer(bool on = true); Set the double buffered mode on/off. void stretchWidget(QResizeEvent* e); Stretch the widget during sizing. void exitSizeEvent(); Response to the ""exit size event"". bool paintFlag(bool mode = true); Set new fPaint flag; Returns: the previous version of the flag. void showEvent(QShowEvent* ); Custom handler of the Qt show event; Non-spontaneous show events are sent to widgets immediately before; they are shown.; The spontaneous show events of top-level widgets are delivered afterwards. void paintEvent(QPaintEvent* ); Custom handler of the Qt paint event; A paint event is a request to repaint all or part of the widget.; It can happen as a result of repaint() or update(), or because the widget; was obscured and has now been uncovered, or for many other reasons. void SetSizeHint(const QSize& size); sets the preferred size of the widget. QSize sizeHint() const; returns the preferred size of the widget. QSize minimumSizeHint() const; returns the smallest size the widget can have. QSizePolicy sizePolicy() const; returns a QSizePolicy; a value describing the space requirements. void EmitTestedSignal(). void SetBit(UInt_t f, Bool_t set); Set or unset the user status bits as specified in f. TQtWidgetBuffer & SetBuffer(); Create (if needed) and return the buffer. QPixmap * GetOffScreenBuffer() const; return the current widget buffer;. TCanvas * GetCanvas() const. { return fCanvas; }. const TQtWidgetBuffer * GetBuffer() const. bool PaintingActive() const. void SetRootID(QWidget* wrapper). { fWrapper = wrapper;}. QWidget * GetRootID() const. { return fWrapper;}. Int_t GetEvent() const. Proxy methods to access the TCanvas selected TObject; and last processed event. { return GetCanv",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:416,Integrability,interface,interface,416,". TQtWidget. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » QT; » TQtWidget. class TQtWidget: public QWidget. TQtWidget is a QWidget with the QPixmap double buffer; It is designed to back the ROOT TCanvasImp class interface and it can be used; as a regular Qt Widget to create Qt-based GUI with the embedded TCanvas objects. This widget can be used as a Qt ""custom widget""; to build a custom GUI interfaces with Qt Designer. The class emits the Qt signals and has Qt public slots. Public slots: (Qt). virtual void cd(); // make the associated TCanvas the current one (shortcut to TCanvas::cd()); virtual void cd(int subpadnumber); // as above - shortcut to Canvas::cd(int subpadnumber); void Disconnect(); // disconnect the QWidget from the ROOT TCanvas (used in the class dtor); void Refresh(); // force the associated TCanvas::Update to be called; virtual bool Save(const QString &fileName) const; // Save the widget image with some ppixmap file; virtual bool Save(const char *fileName) const;; virtual bool Save(const QString &fileName,const char *format,int quality=60) const;; virtual bool Save(const char *fileName,const char *format,int quality=60) const;. signals (Qt). CanvasPainted(); // Signal the TCanvas has been painted onto the screen; Saved(bool ok); // Signal the TCanvas has been saved into the file; RootEventProcessed(TObject *selected, unsigned int event, TCanvas *c);; // Signal the Qt mouse/keyboard event has been process by ROOT; // This ""signal"" is emitted by the enabled mouse events only.; // See: EnableSignalEvents; // --- DisableSignalEvents. public methods:; The methods below define whether the TQtWidget object emits ""RootEventProcessed"" Qt signals; (By default no RootEventProcessed Qt signal is emitted ); void EnableSignalEvents (UInt_t f); void DisableSignalEve",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:598,Integrability,interface,interfaces,598,". TQtWidget. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » QT; » TQtWidget. class TQtWidget: public QWidget. TQtWidget is a QWidget with the QPixmap double buffer; It is designed to back the ROOT TCanvasImp class interface and it can be used; as a regular Qt Widget to create Qt-based GUI with the embedded TCanvas objects. This widget can be used as a Qt ""custom widget""; to build a custom GUI interfaces with Qt Designer. The class emits the Qt signals and has Qt public slots. Public slots: (Qt). virtual void cd(); // make the associated TCanvas the current one (shortcut to TCanvas::cd()); virtual void cd(int subpadnumber); // as above - shortcut to Canvas::cd(int subpadnumber); void Disconnect(); // disconnect the QWidget from the ROOT TCanvas (used in the class dtor); void Refresh(); // force the associated TCanvas::Update to be called; virtual bool Save(const QString &fileName) const; // Save the widget image with some ppixmap file; virtual bool Save(const char *fileName) const;; virtual bool Save(const QString &fileName,const char *format,int quality=60) const;; virtual bool Save(const char *fileName,const char *format,int quality=60) const;. signals (Qt). CanvasPainted(); // Signal the TCanvas has been painted onto the screen; Saved(bool ok); // Signal the TCanvas has been saved into the file; RootEventProcessed(TObject *selected, unsigned int event, TCanvas *c);; // Signal the Qt mouse/keyboard event has been process by ROOT; // This ""signal"" is emitted by the enabled mouse events only.; // See: EnableSignalEvents; // --- DisableSignalEvents. public methods:; The methods below define whether the TQtWidget object emits ""RootEventProcessed"" Qt signals; (By default no RootEventProcessed Qt signal is emitted ); void EnableSignalEvents (UInt_t f); void DisableSignalEve",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:20969,Integrability,wrap,wrapper,20969,"vent*); virtual voidEmitCanvasPainted(); virtual voidQWidget::enabledChange(bool); virtual voidenterEvent(QEvent*); virtual boolQWidget::event(QEvent*); virtual voidexitSizeEvent(); virtual voidfocusInEvent(QFocusEvent*); boolQWidget::focusNextChild(); virtual boolQWidget::focusNextPrevChild(bool next); virtual voidfocusOutEvent(QFocusEvent*); boolQWidget::focusPreviousChild(); virtual voidQWidget::fontChange(const QFont&); QWidget*GetRootID() const; virtual voidQWidget::hideEvent(QHideEvent*); voidInit(); virtual voidQWidget::inputMethodEvent(QInputMethodEvent*); virtual voidkeyPressEvent(QKeyEvent*); virtual voidkeyReleaseEvent(QKeyEvent*); virtual voidQWidget::languageChange(); virtual voidleaveEvent(QEvent*); virtual intQWidget::metric(QPaintDevice::PaintDeviceMetric) const; virtual voidmouseDoubleClickEvent(QMouseEvent*); virtual voidmouseMoveEvent(QMouseEvent*); virtual voidmousePressEvent(QMouseEvent*); virtual voidmouseReleaseEvent(QMouseEvent*); virtual voidQWidget::moveEvent(QMoveEvent*); virtual voidpaintEvent(QPaintEvent*); boolpaintFlag(bool mode = true); boolPaintingActive() const; virtual voidQWidget::paletteChange(const QPalette&); intQObject::receivers(const char* signal) const; voidRefreshCB(); voidResetCanvas(); voidQWidget::resetInputContext(); virtual voidresizeEvent(QResizeEvent*); voidRootEventProcessed(TObject* selected, unsigned int event, TCanvas* c); voidSaved(bool ok); QObject*QObject::sender() const; intQObject::senderSignalIndex() const; voidSetIgnoreLeaveEnter(int ignoreLE = 1); voidSetRootID(QWidget* wrapper); virtual voidSetSizeHint(const QSize& size); virtual voidshowEvent(QShowEvent*); virtual voidstretchWidget(QResizeEvent* e); virtual voidQWidget::styleChange(QStyle&); virtual voidQWidget::tabletEvent(QTabletEvent*); virtual voidQObject::timerEvent(QTimerEvent*); voidQWidget::updateMicroFocus(); virtual voidQWidget::wheelEvent(QWheelEvent*); virtual voidQWidget::windowActivationChange(bool); virtual boolQWidget::x11Event(XEvent*).",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:29969,Integrability,wrap,wrapper,29969,"ards. void paintEvent(QPaintEvent* ); Custom handler of the Qt paint event; A paint event is a request to repaint all or part of the widget.; It can happen as a result of repaint() or update(), or because the widget; was obscured and has now been uncovered, or for many other reasons. void SetSizeHint(const QSize& size); sets the preferred size of the widget. QSize sizeHint() const; returns the preferred size of the widget. QSize minimumSizeHint() const; returns the smallest size the widget can have. QSizePolicy sizePolicy() const; returns a QSizePolicy; a value describing the space requirements. void EmitTestedSignal(). void SetBit(UInt_t f, Bool_t set); Set or unset the user status bits as specified in f. TQtWidgetBuffer & SetBuffer(); Create (if needed) and return the buffer. QPixmap * GetOffScreenBuffer() const; return the current widget buffer;. TCanvas * GetCanvas() const. { return fCanvas; }. const TQtWidgetBuffer * GetBuffer() const. bool PaintingActive() const. void SetRootID(QWidget* wrapper). { fWrapper = wrapper;}. QWidget * GetRootID() const. { return fWrapper;}. Int_t GetEvent() const. Proxy methods to access the TCanvas selected TObject; and last processed event. { return GetCanvas()->GetEvent(); }. Int_t GetEventX() const. { return GetCanvas()->GetEventX(); }. Int_t GetEventY() const. { return GetCanvas()->GetEventY(); }. TObject * GetSelected() const. { return GetCanvas()->GetSelected(); }. Int_t GetSelectedX() const. { return GetCanvas()->GetSelectedX(); }. Int_t GetSelectedY() const. { return GetCanvas()->GetSelectedY(); }. TVirtualPad * GetSelectedPad() const. { return GetCanvas()->GetSelectedPad(); }. UInt_t GetAllBits() const; ----- bit manipulation. { return fBits; }. void SetAllBits(UInt_t f); { fBits = f; }. void SetBit(UInt_t f); { fBits |= f & kBitMask; }. void ResetBit(UInt_t f); { fBits &= ~(f & kBitMask); }. Bool_t TestBit(UInt_t f) const; { return (Bool_t) ((fBits & f) != 0); }. Int_t TestBits(UInt_t f) const; { return (Int_t) (fBits & ",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:29992,Integrability,wrap,wrapper,29992,"vent* ); Custom handler of the Qt paint event; A paint event is a request to repaint all or part of the widget.; It can happen as a result of repaint() or update(), or because the widget; was obscured and has now been uncovered, or for many other reasons. void SetSizeHint(const QSize& size); sets the preferred size of the widget. QSize sizeHint() const; returns the preferred size of the widget. QSize minimumSizeHint() const; returns the smallest size the widget can have. QSizePolicy sizePolicy() const; returns a QSizePolicy; a value describing the space requirements. void EmitTestedSignal(). void SetBit(UInt_t f, Bool_t set); Set or unset the user status bits as specified in f. TQtWidgetBuffer & SetBuffer(); Create (if needed) and return the buffer. QPixmap * GetOffScreenBuffer() const; return the current widget buffer;. TCanvas * GetCanvas() const. { return fCanvas; }. const TQtWidgetBuffer * GetBuffer() const. bool PaintingActive() const. void SetRootID(QWidget* wrapper). { fWrapper = wrapper;}. QWidget * GetRootID() const. { return fWrapper;}. Int_t GetEvent() const. Proxy methods to access the TCanvas selected TObject; and last processed event. { return GetCanvas()->GetEvent(); }. Int_t GetEventX() const. { return GetCanvas()->GetEventX(); }. Int_t GetEventY() const. { return GetCanvas()->GetEventY(); }. TObject * GetSelected() const. { return GetCanvas()->GetSelected(); }. Int_t GetSelectedX() const. { return GetCanvas()->GetSelectedX(); }. Int_t GetSelectedY() const. { return GetCanvas()->GetSelectedY(); }. TVirtualPad * GetSelectedPad() const. { return GetCanvas()->GetSelectedPad(); }. UInt_t GetAllBits() const; ----- bit manipulation. { return fBits; }. void SetAllBits(UInt_t f); { fBits = f; }. void SetBit(UInt_t f); { fBits |= f & kBitMask; }. void ResetBit(UInt_t f); { fBits &= ~(f & kBitMask); }. Bool_t TestBit(UInt_t f) const; { return (Bool_t) ((fBits & f) != 0); }. Int_t TestBits(UInt_t f) const; { return (Int_t) (fBits & f); }. void InvertBit(UInt_t ",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:115,Modifiability,inherit,inheritance,115,". TQtWidget. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » QT; » TQtWidget. class TQtWidget: public QWidget. TQtWidget is a QWidget with the QPixmap double buffer; It is designed to back the ROOT TCanvasImp class interface and it can be used; as a regular Qt Widget to create Qt-based GUI with the embedded TCanvas objects. This widget can be used as a Qt ""custom widget""; to build a custom GUI interfaces with Qt Designer. The class emits the Qt signals and has Qt public slots. Public slots: (Qt). virtual void cd(); // make the associated TCanvas the current one (shortcut to TCanvas::cd()); virtual void cd(int subpadnumber); // as above - shortcut to Canvas::cd(int subpadnumber); void Disconnect(); // disconnect the QWidget from the ROOT TCanvas (used in the class dtor); void Refresh(); // force the associated TCanvas::Update to be called; virtual bool Save(const QString &fileName) const; // Save the widget image with some ppixmap file; virtual bool Save(const char *fileName) const;; virtual bool Save(const QString &fileName,const char *format,int quality=60) const;; virtual bool Save(const char *fileName,const char *format,int quality=60) const;. signals (Qt). CanvasPainted(); // Signal the TCanvas has been painted onto the screen; Saved(bool ok); // Signal the TCanvas has been saved into the file; RootEventProcessed(TObject *selected, unsigned int event, TCanvas *c);; // Signal the Qt mouse/keyboard event has been process by ROOT; // This ""signal"" is emitted by the enabled mouse events only.; // See: EnableSignalEvents; // --- DisableSignalEvents. public methods:; The methods below define whether the TQtWidget object emits ""RootEventProcessed"" Qt signals; (By default no RootEventProcessed Qt signal is emitted ); void EnableSignalEvents (UInt_t f); void DisableSignalEve",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:7418,Modifiability,inherit,inherits,7418,"er() const; TCanvas*GetCanvas() const; voidQWidget::getContentsMargins(int* left, int* top, int* right, int* bottom) const; Int_tGetEvent() const; Int_tGetEventX() const; Int_tGetEventY() const; QPixmap*GetOffScreenBuffer() const; TObject*GetSelected() const; TVirtualPad*GetSelectedPad() const; Int_tGetSelectedX() const; Int_tGetSelectedY() const; voidQWidget::grabGesture(Qt::GestureType type, Qt::GestureFlags flags = Qt::GestureFlags()); voidQWidget::grabKeyboard(); voidQWidget::grabMouse(); voidQWidget::grabMouse(const QCursor&); intQWidget::grabShortcut(const QKeySequence& key, Qt::ShortcutContext context = Qt::WindowShortcut); QGraphicsEffect*QWidget::graphicsEffect() const; QGraphicsProxyWidget*QWidget::graphicsProxyWidget() const; Qt::HANDLEQWidget::handle() const; boolQWidget::hasFocus() const; boolQWidget::hasMouseTracking() const; intQWidget::height() const; virtual intQWidget::heightForWidth(int) const; intQPaintDevice::heightMM() const; voidQWidget::hide(); boolQObject::inherits(const char* classname) const; static TApplication*InitRint(Bool_t prompt = kFALSE, const char* appClassName = ""QtRint"", int* argc = 0, char** argv = 0, void* options = 0, int numOptions = 0, Bool_t noLogo = kTRUE); QInputContext*QWidget::inputContext(); Qt::InputMethodHintsQWidget::inputMethodHints() const; virtual QVariantQWidget::inputMethodQuery(Qt::InputMethodQuery) const; voidQWidget::insertAction(QAction* before, QAction* action); voidQWidget::insertActions(QAction* before, QList<QAction*> actions); voidQObject::installEventFilter(QObject*); WIdQWidget::internalWinId() const; voidInvertBit(UInt_t f); virtual TClass*IsA() const; boolQWidget::isActiveWindow() const; boolQWidget::isAncestorOf(const QWidget* child) const; boolIsDoubleBuffered() const; boolQWidget::isEnabled() const; boolQWidget::isEnabledTo(QWidget*) const; boolQWidget::isEnabledToTLW() const; boolQWidget::isFullScreen() const; boolQWidget::isHidden() const; boolQWidget::isLeftToRight() const; boolQWidget::isMaxi",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:23437,Modifiability,Inherit,Inheritance,23437,"ous)kEXITSIZEMOVE; static TQtWidget::(anonymous)kFORCESIZE; static const QMetaObjectstaticMetaObject; static const QMetaObjectQWidget::staticMetaObject; static const QMetaObjectQObject::staticMetaObject. protected:. QScopedPointer<QObjectData>QObject::d_ptr; TCanvas*fCanvas; boolfDoubleBufferOn; boolfEmbedded; intfIgnoreLeaveEnter; boolfInsidePaintEvent; QPointfOldMousePos; boolfPaint; TQtWidgetBuffer*fPixmapIDDouble buffer of this widget; TQtWidgetBuffer*fPixmapScreenDouble buffer for no-double buffer operation; QTimer*fRefreshTimer; QStringfSaveFormat; boolfSizeChanged; QSizefSizeHint; QWidget*fWrapper; ushortQPaintDevice::paintersrefcount; static const QMetaObjectQObject::staticQtMetaObject. private:. UInt_tfBitsbit field status word; QPointer<TQtCanvasPainter>fCanvasDecorator< The object to paint onto the TQtWidget on the top of TCanvas image; boolfNeedStretch; static TQtWidget::(anonymous)kBitMask; static const QMetaObjectExtraDatastaticMetaObjectExtraData. Class Charts. Inheritance Chart:. QWidget. ←; TQtWidget. Function documentation; TQtWidget(QWidget* parent, const char* name, Qt::WFlags f = 0, bool embedded = true). TQtWidget(QWidget* parent = 0, Qt::WFlags f = 0, bool embedded = true); { setObjectName(""tqtwidget""); Init() ;}. void Init(). ~TQtWidget(). void AdjustBufferSize(); Adjust the widget buffer size. TCanvas * Canvas(); Alias for GetCanvas method. TCanvas * Canvas(TQtWidget* widget); static: return TCanvas by TQtWidget pointer. TQtWidget * Canvas(const TCanvas* canvas); static: return the TQtWidget backend for TCanvas *canvas object. TQtWidget * Canvas(Int_t id); static: return TQtWidget by TCanvas id. TApplication * InitRint(Bool_t prompt = kFALSE, const char* appClassName = ""QtRint"", int* argc = 0, char** argv = 0, void* options = 0, int numOptions = 0, Bool_t noLogo = kTRUE). Instantiate ROOT from within Qt application if needed; Return the TRint pointer; Most parametrs are passed to TRint class ctor. Bool_t prompt = kTRUE; Instantiate ROOT with",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:25189,Performance,perform,performance,25189," * InitRint(Bool_t prompt = kFALSE, const char* appClassName = ""QtRint"", int* argc = 0, char** argv = 0, void* options = 0, int numOptions = 0, Bool_t noLogo = kTRUE). Instantiate ROOT from within Qt application if needed; Return the TRint pointer; Most parametrs are passed to TRint class ctor. Bool_t prompt = kTRUE; Instantiate ROOT with ROOT command prompt; kFALSE; No ROOT prompt. The default for Qt GUI applications. The prompt option can be defined via ROOT parameter file "".rootrc""; .rootrc:; . . .; Gui.Prompt yes. void Erase(); Erases the entire widget and its double buffer. void cd(); [slot] to make this embedded canvas the current one. void cd(int subpadnumber); [slot] to make this embedded canvas / pad the current one. void Disconnect(); [slot] Disconnect the Qt widget from TCanvas object before deleting; to avoid the dead lock; one has to set CanvasID = 0 to disconnect things properly. void Refresh(); [slot] to allow Qt signal refreshing the ROOT TCanvas if needed; use the permanent single shot timer to eliminate; the redundand refreshing for the sake of the performance. void RefreshCB(); [slot] to allow Qt signal refreshing the ROOT TCanvas if needed. void SetCanvas(TCanvas* c); remember my host TCanvas and adopt its name. customEvent(QEvent* ); The custom response to the special WIN32 events; These events are not present with X11 systems. void contextMenuEvent(QContextMenuEvent* ); The custom response to the Qt QContextMenuEvent; Map QContextMenuEvent to the ROOT kButton3Down = 3 event. void focusInEvent(QFocusEvent* ); The custom response to the Qt QFocusEvent ""in""; this imposes an extra protection to avoid TObject interaction with; mouse event accidently. void focusOutEvent(QFocusEvent* ); The custom response to the Qt QFocusEvent ""out""; this imposes an extra protection to avoid TObject interaction with; mouse event accidently. void mousePressEvent(QMouseEvent* ); Map the Qt mouse press button event to the ROOT TCanvas events; Mouse events occur when a mo",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:24933,Safety,avoid,avoid,24933,"* Canvas(const TCanvas* canvas); static: return the TQtWidget backend for TCanvas *canvas object. TQtWidget * Canvas(Int_t id); static: return TQtWidget by TCanvas id. TApplication * InitRint(Bool_t prompt = kFALSE, const char* appClassName = ""QtRint"", int* argc = 0, char** argv = 0, void* options = 0, int numOptions = 0, Bool_t noLogo = kTRUE). Instantiate ROOT from within Qt application if needed; Return the TRint pointer; Most parametrs are passed to TRint class ctor. Bool_t prompt = kTRUE; Instantiate ROOT with ROOT command prompt; kFALSE; No ROOT prompt. The default for Qt GUI applications. The prompt option can be defined via ROOT parameter file "".rootrc""; .rootrc:; . . .; Gui.Prompt yes. void Erase(); Erases the entire widget and its double buffer. void cd(); [slot] to make this embedded canvas the current one. void cd(int subpadnumber); [slot] to make this embedded canvas / pad the current one. void Disconnect(); [slot] Disconnect the Qt widget from TCanvas object before deleting; to avoid the dead lock; one has to set CanvasID = 0 to disconnect things properly. void Refresh(); [slot] to allow Qt signal refreshing the ROOT TCanvas if needed; use the permanent single shot timer to eliminate; the redundand refreshing for the sake of the performance. void RefreshCB(); [slot] to allow Qt signal refreshing the ROOT TCanvas if needed. void SetCanvas(TCanvas* c); remember my host TCanvas and adopt its name. customEvent(QEvent* ); The custom response to the special WIN32 events; These events are not present with X11 systems. void contextMenuEvent(QContextMenuEvent* ); The custom response to the Qt QContextMenuEvent; Map QContextMenuEvent to the ROOT kButton3Down = 3 event. void focusInEvent(QFocusEvent* ); The custom response to the Qt QFocusEvent ""in""; this imposes an extra protection to avoid TObject interaction with; mouse event accidently. void focusOutEvent(QFocusEvent* ); The custom response to the Qt QFocusEvent ""out""; this imposes an extra protection to avoid",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:25148,Safety,redund,redundand,25148," * InitRint(Bool_t prompt = kFALSE, const char* appClassName = ""QtRint"", int* argc = 0, char** argv = 0, void* options = 0, int numOptions = 0, Bool_t noLogo = kTRUE). Instantiate ROOT from within Qt application if needed; Return the TRint pointer; Most parametrs are passed to TRint class ctor. Bool_t prompt = kTRUE; Instantiate ROOT with ROOT command prompt; kFALSE; No ROOT prompt. The default for Qt GUI applications. The prompt option can be defined via ROOT parameter file "".rootrc""; .rootrc:; . . .; Gui.Prompt yes. void Erase(); Erases the entire widget and its double buffer. void cd(); [slot] to make this embedded canvas the current one. void cd(int subpadnumber); [slot] to make this embedded canvas / pad the current one. void Disconnect(); [slot] Disconnect the Qt widget from TCanvas object before deleting; to avoid the dead lock; one has to set CanvasID = 0 to disconnect things properly. void Refresh(); [slot] to allow Qt signal refreshing the ROOT TCanvas if needed; use the permanent single shot timer to eliminate; the redundand refreshing for the sake of the performance. void RefreshCB(); [slot] to allow Qt signal refreshing the ROOT TCanvas if needed. void SetCanvas(TCanvas* c); remember my host TCanvas and adopt its name. customEvent(QEvent* ); The custom response to the special WIN32 events; These events are not present with X11 systems. void contextMenuEvent(QContextMenuEvent* ); The custom response to the Qt QContextMenuEvent; Map QContextMenuEvent to the ROOT kButton3Down = 3 event. void focusInEvent(QFocusEvent* ); The custom response to the Qt QFocusEvent ""in""; this imposes an extra protection to avoid TObject interaction with; mouse event accidently. void focusOutEvent(QFocusEvent* ); The custom response to the Qt QFocusEvent ""out""; this imposes an extra protection to avoid TObject interaction with; mouse event accidently. void mousePressEvent(QMouseEvent* ); Map the Qt mouse press button event to the ROOT TCanvas events; Mouse events occur when a mo",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:25746,Safety,avoid,avoid,25746,"ake this embedded canvas the current one. void cd(int subpadnumber); [slot] to make this embedded canvas / pad the current one. void Disconnect(); [slot] Disconnect the Qt widget from TCanvas object before deleting; to avoid the dead lock; one has to set CanvasID = 0 to disconnect things properly. void Refresh(); [slot] to allow Qt signal refreshing the ROOT TCanvas if needed; use the permanent single shot timer to eliminate; the redundand refreshing for the sake of the performance. void RefreshCB(); [slot] to allow Qt signal refreshing the ROOT TCanvas if needed. void SetCanvas(TCanvas* c); remember my host TCanvas and adopt its name. customEvent(QEvent* ); The custom response to the special WIN32 events; These events are not present with X11 systems. void contextMenuEvent(QContextMenuEvent* ); The custom response to the Qt QContextMenuEvent; Map QContextMenuEvent to the ROOT kButton3Down = 3 event. void focusInEvent(QFocusEvent* ); The custom response to the Qt QFocusEvent ""in""; this imposes an extra protection to avoid TObject interaction with; mouse event accidently. void focusOutEvent(QFocusEvent* ); The custom response to the Qt QFocusEvent ""out""; this imposes an extra protection to avoid TObject interaction with; mouse event accidently. void mousePressEvent(QMouseEvent* ); Map the Qt mouse press button event to the ROOT TCanvas events; Mouse events occur when a mouse button is pressed or released inside; a widget or when the mouse cursor is moved. void mouseMoveEvent(QMouseEvent* ); Map the Qt mouse move pointer event to the ROOT TCanvas events; kMouseMotion = 51,; kButton1Motion = 21, kButton2Motion = 22, kButton3Motion = 23, kKeyPress = 24. void mouseReleaseEvent(QMouseEvent* ); Map the Qt mouse button release event to the ROOT TCanvas events; kButton1Up = 11, kButton2Up = 12, kButton3Up = 13. void mouseDoubleClickEvent(QMouseEvent* ); Map the Qt mouse double click button event to the ROOT TCanvas events; kButton1Double = 61, kButton2Double = 62, kButton3Do",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:25922,Safety,avoid,avoid,25922,"get from TCanvas object before deleting; to avoid the dead lock; one has to set CanvasID = 0 to disconnect things properly. void Refresh(); [slot] to allow Qt signal refreshing the ROOT TCanvas if needed; use the permanent single shot timer to eliminate; the redundand refreshing for the sake of the performance. void RefreshCB(); [slot] to allow Qt signal refreshing the ROOT TCanvas if needed. void SetCanvas(TCanvas* c); remember my host TCanvas and adopt its name. customEvent(QEvent* ); The custom response to the special WIN32 events; These events are not present with X11 systems. void contextMenuEvent(QContextMenuEvent* ); The custom response to the Qt QContextMenuEvent; Map QContextMenuEvent to the ROOT kButton3Down = 3 event. void focusInEvent(QFocusEvent* ); The custom response to the Qt QFocusEvent ""in""; this imposes an extra protection to avoid TObject interaction with; mouse event accidently. void focusOutEvent(QFocusEvent* ); The custom response to the Qt QFocusEvent ""out""; this imposes an extra protection to avoid TObject interaction with; mouse event accidently. void mousePressEvent(QMouseEvent* ); Map the Qt mouse press button event to the ROOT TCanvas events; Mouse events occur when a mouse button is pressed or released inside; a widget or when the mouse cursor is moved. void mouseMoveEvent(QMouseEvent* ); Map the Qt mouse move pointer event to the ROOT TCanvas events; kMouseMotion = 51,; kButton1Motion = 21, kButton2Motion = 22, kButton3Motion = 23, kKeyPress = 24. void mouseReleaseEvent(QMouseEvent* ); Map the Qt mouse button release event to the ROOT TCanvas events; kButton1Up = 11, kButton2Up = 12, kButton3Up = 13. void mouseDoubleClickEvent(QMouseEvent* ); Map the Qt mouse double click button event to the ROOT TCanvas events; kButton1Double = 61, kButton2Double = 62, kButton3Double = 63. void keyPressEvent(QKeyEvent* ); Map the Qt key press event to the ROOT TCanvas events; kKeyDown = 4. void keyReleaseEvent(QKeyEvent* ); Map the Qt key release even",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:3393,Security,access,accessibleDescription,3393,,MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:3440,Security,access,accessibleName,3440,,MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:30094,Security,access,access,30094," as a result of repaint() or update(), or because the widget; was obscured and has now been uncovered, or for many other reasons. void SetSizeHint(const QSize& size); sets the preferred size of the widget. QSize sizeHint() const; returns the preferred size of the widget. QSize minimumSizeHint() const; returns the smallest size the widget can have. QSizePolicy sizePolicy() const; returns a QSizePolicy; a value describing the space requirements. void EmitTestedSignal(). void SetBit(UInt_t f, Bool_t set); Set or unset the user status bits as specified in f. TQtWidgetBuffer & SetBuffer(); Create (if needed) and return the buffer. QPixmap * GetOffScreenBuffer() const; return the current widget buffer;. TCanvas * GetCanvas() const. { return fCanvas; }. const TQtWidgetBuffer * GetBuffer() const. bool PaintingActive() const. void SetRootID(QWidget* wrapper). { fWrapper = wrapper;}. QWidget * GetRootID() const. { return fWrapper;}. Int_t GetEvent() const. Proxy methods to access the TCanvas selected TObject; and last processed event. { return GetCanvas()->GetEvent(); }. Int_t GetEventX() const. { return GetCanvas()->GetEventX(); }. Int_t GetEventY() const. { return GetCanvas()->GetEventY(); }. TObject * GetSelected() const. { return GetCanvas()->GetSelected(); }. Int_t GetSelectedX() const. { return GetCanvas()->GetSelectedX(); }. Int_t GetSelectedY() const. { return GetCanvas()->GetSelectedY(); }. TVirtualPad * GetSelectedPad() const. { return GetCanvas()->GetSelectedPad(); }. UInt_t GetAllBits() const; ----- bit manipulation. { return fBits; }. void SetAllBits(UInt_t f); { fBits = f; }. void SetBit(UInt_t f); { fBits |= f & kBitMask; }. void ResetBit(UInt_t f); { fBits &= ~(f & kBitMask); }. Bool_t TestBit(UInt_t f) const; { return (Bool_t) ((fBits & f) != 0); }. Int_t TestBits(UInt_t f) const; { return (Int_t) (fBits & f); }. void InvertBit(UInt_t f); { fBits ^= f & kBitMask; }. TQtCanvasPainter * CanvasDecorator(); { return fCanvasDecorator; }. void SetCanvasDecorator(TQ",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:9004,Testability,log,logicalDpiX,9004,"onst; voidInvertBit(UInt_t f); virtual TClass*IsA() const; boolQWidget::isActiveWindow() const; boolQWidget::isAncestorOf(const QWidget* child) const; boolIsDoubleBuffered() const; boolQWidget::isEnabled() const; boolQWidget::isEnabledTo(QWidget*) const; boolQWidget::isEnabledToTLW() const; boolQWidget::isFullScreen() const; boolQWidget::isHidden() const; boolQWidget::isLeftToRight() const; boolQWidget::isMaximized() const; boolQWidget::isMinimized() const; boolQWidget::isModal() const; boolQWidget::isRightToLeft() const; Bool_tIsSignalEventEnabled(UInt_t f) const; boolQWidget::isTopLevel() const; boolQWidget::isVisible() const; boolQWidget::isVisibleTo(QWidget*) const; boolQObject::isWidgetType() const; boolQWidget::isWindow() const; boolQWidget::isWindowModified() const; static QWidget*QWidget::keyboardGrabber(); voidQObject::killTimer(int id); QLayout*QWidget::layout() const; Qt::LayoutDirectionQWidget::layoutDirection() const; QLocaleQWidget::locale() const; intQPaintDevice::logicalDpiX() const; intQPaintDevice::logicalDpiY() const; voidQWidget::lower(); QPointQWidget::mapFrom(QWidget*, const QPoint&) const; QPointQWidget::mapFromGlobal(const QPoint&) const; QPointQWidget::mapFromParent(const QPoint&) const; QPointQWidget::mapTo(QWidget*, const QPoint&) const; QPointQWidget::mapToGlobal(const QPoint&) const; QPointQWidget::mapToParent(const QPoint&) const; QRegionQWidget::mask() const; intQWidget::maximumHeight() const; QSizeQWidget::maximumSize() const; intQWidget::maximumWidth() const; virtual const QMetaObject*metaObject() const; intQWidget::minimumHeight() const; QSizeQWidget::minimumSize() const; virtual QSizeminimumSizeHint() const; intQWidget::minimumWidth() const; static QWidget*QWidget::mouseGrabber(); voidQWidget::move(const QPoint&); voidQWidget::move(int x, int y); voidQObject::moveToThread(QThread* thread); QWidget*QWidget::nativeParentWidget() const; QWidget*QWidget::nextInFocusChain() const; QRectQWidget::normalGeometry() const; intQPaintDevice::n",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:9042,Testability,log,logicalDpiY,9042," TClass*IsA() const; boolQWidget::isActiveWindow() const; boolQWidget::isAncestorOf(const QWidget* child) const; boolIsDoubleBuffered() const; boolQWidget::isEnabled() const; boolQWidget::isEnabledTo(QWidget*) const; boolQWidget::isEnabledToTLW() const; boolQWidget::isFullScreen() const; boolQWidget::isHidden() const; boolQWidget::isLeftToRight() const; boolQWidget::isMaximized() const; boolQWidget::isMinimized() const; boolQWidget::isModal() const; boolQWidget::isRightToLeft() const; Bool_tIsSignalEventEnabled(UInt_t f) const; boolQWidget::isTopLevel() const; boolQWidget::isVisible() const; boolQWidget::isVisibleTo(QWidget*) const; boolQObject::isWidgetType() const; boolQWidget::isWindow() const; boolQWidget::isWindowModified() const; static QWidget*QWidget::keyboardGrabber(); voidQObject::killTimer(int id); QLayout*QWidget::layout() const; Qt::LayoutDirectionQWidget::layoutDirection() const; QLocaleQWidget::locale() const; intQPaintDevice::logicalDpiX() const; intQPaintDevice::logicalDpiY() const; voidQWidget::lower(); QPointQWidget::mapFrom(QWidget*, const QPoint&) const; QPointQWidget::mapFromGlobal(const QPoint&) const; QPointQWidget::mapFromParent(const QPoint&) const; QPointQWidget::mapTo(QWidget*, const QPoint&) const; QPointQWidget::mapToGlobal(const QPoint&) const; QPointQWidget::mapToParent(const QPoint&) const; QRegionQWidget::mask() const; intQWidget::maximumHeight() const; QSizeQWidget::maximumSize() const; intQWidget::maximumWidth() const; virtual const QMetaObject*metaObject() const; intQWidget::minimumHeight() const; QSizeQWidget::minimumSize() const; virtual QSizeminimumSizeHint() const; intQWidget::minimumWidth() const; static QWidget*QWidget::mouseGrabber(); voidQWidget::move(const QPoint&); voidQWidget::move(int x, int y); voidQObject::moveToThread(QThread* thread); QWidget*QWidget::nativeParentWidget() const; QWidget*QWidget::nextInFocusChain() const; QRectQWidget::normalGeometry() const; intQPaintDevice::numColors() const; QStringQObject::obje",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:16635,Testability,test,testAttribute,16635,"voidQWidget::setWindowModality(Qt::WindowModality windowModality); voidQWidget::setWindowModified(bool); voidQWidget::setWindowOpacity(qreal level); voidQWidget::setWindowRole(const QString&); voidQWidget::setWindowState(Qt::WindowStates state); voidQWidget::setWindowSurface(QWindowSurface* surface); voidQWidget::setWindowTitle(const QString&); voidQWidget::show(); voidQWidget::showFullScreen(); voidQWidget::showMaximized(); virtual voidShowMembers(TMemberInspector& insp) const; voidQWidget::showMinimized(); voidQWidget::showNormal(); boolQObject::signalsBlocked() const; QSizeQWidget::size() const; virtual QSizesizeHint() const; QSizeQWidget::sizeIncrement() const; virtual QSizePolicysizePolicy() const; voidQWidget::stackUnder(QWidget*); intQObject::startTimer(int interval); QStringQWidget::statusTip() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); QStyle*QWidget::style() const; QStringQWidget::styleSheet() const; boolQWidget::testAttribute(Qt::WidgetAttribute) const; Bool_tTestBit(UInt_t f) const; Int_tTestBits(UInt_t f) const; QThread*QObject::thread() const; QStringQWidget::toolTip() const; QWidget*QWidget::topLevelWidget() const; TQtWidget(QWidget* parent = 0, Qt::WFlags f = 0, bool embedded = true); TQtWidget(QWidget* parent, const char* name, Qt::WFlags f = 0, bool embedded = true); static QStringtr(const char* s, const char* c = 0); static QStringtr(const char* s, const char* c, int n); static QStringtrUtf8(const char* s, const char* c = 0); static QStringtrUtf8(const char* s, const char* c, int n); boolQWidget::underMouse() const; voidQWidget::ungrabGesture(Qt::GestureType type); voidQWidget::unsetCursor(); voidQWidget::unsetLayoutDirection(); voidQWidget::unsetLocale(); voidQWidget::update(); voidQWidget::update(const QRect&); voidQWidget::update(const QRegion&); voidQWidget::update(int x, int y, int w, int h); voidQWidget::updateGeometry(); boolQWidget::updatesEnabled() const; QObjectUserData*QObject::use",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:30837,Testability,Test,TestBit,30837,"vas; }. const TQtWidgetBuffer * GetBuffer() const. bool PaintingActive() const. void SetRootID(QWidget* wrapper). { fWrapper = wrapper;}. QWidget * GetRootID() const. { return fWrapper;}. Int_t GetEvent() const. Proxy methods to access the TCanvas selected TObject; and last processed event. { return GetCanvas()->GetEvent(); }. Int_t GetEventX() const. { return GetCanvas()->GetEventX(); }. Int_t GetEventY() const. { return GetCanvas()->GetEventY(); }. TObject * GetSelected() const. { return GetCanvas()->GetSelected(); }. Int_t GetSelectedX() const. { return GetCanvas()->GetSelectedX(); }. Int_t GetSelectedY() const. { return GetCanvas()->GetSelectedY(); }. TVirtualPad * GetSelectedPad() const. { return GetCanvas()->GetSelectedPad(); }. UInt_t GetAllBits() const; ----- bit manipulation. { return fBits; }. void SetAllBits(UInt_t f); { fBits = f; }. void SetBit(UInt_t f); { fBits |= f & kBitMask; }. void ResetBit(UInt_t f); { fBits &= ~(f & kBitMask); }. Bool_t TestBit(UInt_t f) const; { return (Bool_t) ((fBits & f) != 0); }. Int_t TestBits(UInt_t f) const; { return (Int_t) (fBits & f); }. void InvertBit(UInt_t f); { fBits ^= f & kBitMask; }. TQtCanvasPainter * CanvasDecorator(); { return fCanvasDecorator; }. void SetCanvasDecorator(TQtCanvasPainter* decorator); { fCanvasDecorator = decorator;}. void EnableSignalEvents(UInt_t f); { SetBit (f); }. void DisableSignalEvents(UInt_t f); { ResetBit(f); }. Bool_t IsSignalEventEnabled(UInt_t f) const; { return TestBit (f); }. void EmitSignal(UInt_t f); {if (IsSignalEventEnabled(f)) EmitTestedSignal();}. void SetIgnoreLeaveEnter(int ignoreLE = 1); { fIgnoreLeaveEnter = ignoreLE; }. TQtWidget(const TQtWidget& ). void operator=(const TQtWidget& ); ----- Private bits, clients can only test but not change them. void ResetCanvas(); { fCanvas = 0;}. bool IsDoubleBuffered() const; { return fDoubleBufferOn; }. void EmitCanvasPainted(); { emit CanvasPainted(); }. void CanvasPainted(); emit the Qt signal when the double buffer of the TCamv",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:30909,Testability,Test,TestBits,30909,"e() const. void SetRootID(QWidget* wrapper). { fWrapper = wrapper;}. QWidget * GetRootID() const. { return fWrapper;}. Int_t GetEvent() const. Proxy methods to access the TCanvas selected TObject; and last processed event. { return GetCanvas()->GetEvent(); }. Int_t GetEventX() const. { return GetCanvas()->GetEventX(); }. Int_t GetEventY() const. { return GetCanvas()->GetEventY(); }. TObject * GetSelected() const. { return GetCanvas()->GetSelected(); }. Int_t GetSelectedX() const. { return GetCanvas()->GetSelectedX(); }. Int_t GetSelectedY() const. { return GetCanvas()->GetSelectedY(); }. TVirtualPad * GetSelectedPad() const. { return GetCanvas()->GetSelectedPad(); }. UInt_t GetAllBits() const; ----- bit manipulation. { return fBits; }. void SetAllBits(UInt_t f); { fBits = f; }. void SetBit(UInt_t f); { fBits |= f & kBitMask; }. void ResetBit(UInt_t f); { fBits &= ~(f & kBitMask); }. Bool_t TestBit(UInt_t f) const; { return (Bool_t) ((fBits & f) != 0); }. Int_t TestBits(UInt_t f) const; { return (Int_t) (fBits & f); }. void InvertBit(UInt_t f); { fBits ^= f & kBitMask; }. TQtCanvasPainter * CanvasDecorator(); { return fCanvasDecorator; }. void SetCanvasDecorator(TQtCanvasPainter* decorator); { fCanvasDecorator = decorator;}. void EnableSignalEvents(UInt_t f); { SetBit (f); }. void DisableSignalEvents(UInt_t f); { ResetBit(f); }. Bool_t IsSignalEventEnabled(UInt_t f) const; { return TestBit (f); }. void EmitSignal(UInt_t f); {if (IsSignalEventEnabled(f)) EmitTestedSignal();}. void SetIgnoreLeaveEnter(int ignoreLE = 1); { fIgnoreLeaveEnter = ignoreLE; }. TQtWidget(const TQtWidget& ). void operator=(const TQtWidget& ); ----- Private bits, clients can only test but not change them. void ResetCanvas(); { fCanvas = 0;}. bool IsDoubleBuffered() const; { return fDoubleBufferOn; }. void EmitCanvasPainted(); { emit CanvasPainted(); }. void CanvasPainted(); emit the Qt signal when the double buffer of the TCamvas has been filled up. void Saved(bool ok). void RootEventProcessed(T",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
https://root.cern/root/html604/TQtWidget.html:31338,Testability,Test,TestBit,31338,"()->GetEventY(); }. TObject * GetSelected() const. { return GetCanvas()->GetSelected(); }. Int_t GetSelectedX() const. { return GetCanvas()->GetSelectedX(); }. Int_t GetSelectedY() const. { return GetCanvas()->GetSelectedY(); }. TVirtualPad * GetSelectedPad() const. { return GetCanvas()->GetSelectedPad(); }. UInt_t GetAllBits() const; ----- bit manipulation. { return fBits; }. void SetAllBits(UInt_t f); { fBits = f; }. void SetBit(UInt_t f); { fBits |= f & kBitMask; }. void ResetBit(UInt_t f); { fBits &= ~(f & kBitMask); }. Bool_t TestBit(UInt_t f) const; { return (Bool_t) ((fBits & f) != 0); }. Int_t TestBits(UInt_t f) const; { return (Int_t) (fBits & f); }. void InvertBit(UInt_t f); { fBits ^= f & kBitMask; }. TQtCanvasPainter * CanvasDecorator(); { return fCanvasDecorator; }. void SetCanvasDecorator(TQtCanvasPainter* decorator); { fCanvasDecorator = decorator;}. void EnableSignalEvents(UInt_t f); { SetBit (f); }. void DisableSignalEvents(UInt_t f); { ResetBit(f); }. Bool_t IsSignalEventEnabled(UInt_t f) const; { return TestBit (f); }. void EmitSignal(UInt_t f); {if (IsSignalEventEnabled(f)) EmitTestedSignal();}. void SetIgnoreLeaveEnter(int ignoreLE = 1); { fIgnoreLeaveEnter = ignoreLE; }. TQtWidget(const TQtWidget& ). void operator=(const TQtWidget& ); ----- Private bits, clients can only test but not change them. void ResetCanvas(); { fCanvas = 0;}. bool IsDoubleBuffered() const; { return fDoubleBufferOn; }. void EmitCanvasPainted(); { emit CanvasPainted(); }. void CanvasPainted(); emit the Qt signal when the double buffer of the TCamvas has been filled up. void Saved(bool ok). void RootEventProcessed(TObject* selected, unsigned int event, TCanvas* c). » Author: Valeri Fine 21/01/2002 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/qt:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TQtWidget.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TQtWidget.html
