id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/qutip/qutip/pull/1696:358,Testability,test,test,358,"**Description**; Add support for setting the numpy version in test runs. **Related issues or PRs**; * See #1694 for the strange steadystate test failures on Python 3.9, numpy 1.21.2 and on certain Azure VMs.; * See #1689 for earlier discussion of the above failures in an unrelated PR. **Changelog**; * Add support for specifying the numpy version in the CI test matrix and pin numpy to the latest 1.20.X by default.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1696
https://github.com/qutip/qutip/pull/1697:267,Usability,simpl,simple,267,"The `qutip.lattice` module is currently unmaintained and the complicated display functions are untested. As reported in https://groups.google.com/g/qutip/c/HKEK60R6HOI/m/6rY7EF-CBQAJ `.display_lattice()` and `.display_unit_cell()` raise exceptions with the following simple code:. ```python; from qutip.lattice import Lattice1d; chain = Lattice1d(num_cell=3, boundary=""periodic""); chain.display_lattice(); chain.display_unit_cell(); ```. **Related issues or PRs**; * None yet. **Changelog**; * Fix setting of lattice site dimensions with displaying a Lattice1d with display_lattice or display_unit_cell.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1697
https://github.com/qutip/qutip/pull/1698:37,Deployability,Update,Updated,37,@hodgestar @Ericgig @nathanshammah . Updated the functions. I hope all functions work now.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1698
https://github.com/qutip/qutip/pull/1700:1444,Availability,avail,available,1444,"**Description**; Add a `Solver` class for better task distribution in `sesolve` and `mesolve`. `sesolve`, `mesolve`, etc. are presently mostly independent: each create their time dependant system, the function to integrator with scipy's ode solver, loop over the `tlist` and store results. With this PR, the `[se/me]solve` functions will reuse most of the code and be more modular.; We already have a `Result` class to manage e_ops and store result, `Integrator` to solve the ode system. `QobjEvo` can support any time-dependant format we support. This PR introduce a new class `Solver` to join all these. Basis usage looks like:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); result = solver.run(psi, tlist, e_ops=e_ops); result.expect; ```. It can also do step evolution:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); solver.start(psi, t0); psi_t1 = solver.step(t1); psi_t2 = solver.step(t2, args=new_args) # Can be inefficient depending on integrator.; psi_t3 = solver.step(t3, options=new_opt) # Inefficient but supported.; ```; When stepping, the output is always the state as `Qobj`. The solver class promote ket state to density matrices when the rhs is a super-operator. `rhs` support `Qobj` and `QobjEvo`, but not list or function. This PR also add `MeSolver` and `SeSolver` classes, but they are very light:; `MeSolver(H, c_ops)` is equivalent to `Solver(liouvillian(H, c_ops))`. `Solver` store a list of available `Integrator` as a class property. `Solver.avail_integrator` has all integrators available to all solvers. `SeSolver.avail_integrator` has all these with those registered directly to `SeSolver`. This is to allow Integrator for specific system. We could think for the floquet sesolve method to be made into an integrator specific to `SeSolver`. . The interface for `sesolve` and `mesolve` is mostly unchanged, but `progress_bar` keyword is moved to an options and the `_safe_mode` keyword is removed. **Changelog**; Added `Solver` class.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1700
https://github.com/qutip/qutip/pull/1700:1534,Availability,avail,available,1534,"**Description**; Add a `Solver` class for better task distribution in `sesolve` and `mesolve`. `sesolve`, `mesolve`, etc. are presently mostly independent: each create their time dependant system, the function to integrator with scipy's ode solver, loop over the `tlist` and store results. With this PR, the `[se/me]solve` functions will reuse most of the code and be more modular.; We already have a `Result` class to manage e_ops and store result, `Integrator` to solve the ode system. `QobjEvo` can support any time-dependant format we support. This PR introduce a new class `Solver` to join all these. Basis usage looks like:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); result = solver.run(psi, tlist, e_ops=e_ops); result.expect; ```. It can also do step evolution:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); solver.start(psi, t0); psi_t1 = solver.step(t1); psi_t2 = solver.step(t2, args=new_args) # Can be inefficient depending on integrator.; psi_t3 = solver.step(t3, options=new_opt) # Inefficient but supported.; ```; When stepping, the output is always the state as `Qobj`. The solver class promote ket state to density matrices when the rhs is a super-operator. `rhs` support `Qobj` and `QobjEvo`, but not list or function. This PR also add `MeSolver` and `SeSolver` classes, but they are very light:; `MeSolver(H, c_ops)` is equivalent to `Solver(liouvillian(H, c_ops))`. `Solver` store a list of available `Integrator` as a class property. `Solver.avail_integrator` has all integrators available to all solvers. `SeSolver.avail_integrator` has all these with those registered directly to `SeSolver`. This is to allow Integrator for specific system. We could think for the floquet sesolve method to be made into an integrator specific to `SeSolver`. . The interface for `sesolve` and `mesolve` is mostly unchanged, but `progress_bar` keyword is moved to an options and the `_safe_mode` keyword is removed. **Changelog**; Added `Solver` class.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1700
https://github.com/qutip/qutip/pull/1700:213,Deployability,integrat,integrator,213,"**Description**; Add a `Solver` class for better task distribution in `sesolve` and `mesolve`. `sesolve`, `mesolve`, etc. are presently mostly independent: each create their time dependant system, the function to integrator with scipy's ode solver, loop over the `tlist` and store results. With this PR, the `[se/me]solve` functions will reuse most of the code and be more modular.; We already have a `Result` class to manage e_ops and store result, `Integrator` to solve the ode system. `QobjEvo` can support any time-dependant format we support. This PR introduce a new class `Solver` to join all these. Basis usage looks like:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); result = solver.run(psi, tlist, e_ops=e_ops); result.expect; ```. It can also do step evolution:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); solver.start(psi, t0); psi_t1 = solver.step(t1); psi_t2 = solver.step(t2, args=new_args) # Can be inefficient depending on integrator.; psi_t3 = solver.step(t3, options=new_opt) # Inefficient but supported.; ```; When stepping, the output is always the state as `Qobj`. The solver class promote ket state to density matrices when the rhs is a super-operator. `rhs` support `Qobj` and `QobjEvo`, but not list or function. This PR also add `MeSolver` and `SeSolver` classes, but they are very light:; `MeSolver(H, c_ops)` is equivalent to `Solver(liouvillian(H, c_ops))`. `Solver` store a list of available `Integrator` as a class property. `Solver.avail_integrator` has all integrators available to all solvers. `SeSolver.avail_integrator` has all these with those registered directly to `SeSolver`. This is to allow Integrator for specific system. We could think for the floquet sesolve method to be made into an integrator specific to `SeSolver`. . The interface for `sesolve` and `mesolve` is mostly unchanged, but `progress_bar` keyword is moved to an options and the `_safe_mode` keyword is removed. **Changelog**; Added `Solver` class.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1700
https://github.com/qutip/qutip/pull/1700:451,Deployability,Integrat,Integrator,451,"**Description**; Add a `Solver` class for better task distribution in `sesolve` and `mesolve`. `sesolve`, `mesolve`, etc. are presently mostly independent: each create their time dependant system, the function to integrator with scipy's ode solver, loop over the `tlist` and store results. With this PR, the `[se/me]solve` functions will reuse most of the code and be more modular.; We already have a `Result` class to manage e_ops and store result, `Integrator` to solve the ode system. `QobjEvo` can support any time-dependant format we support. This PR introduce a new class `Solver` to join all these. Basis usage looks like:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); result = solver.run(psi, tlist, e_ops=e_ops); result.expect; ```. It can also do step evolution:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); solver.start(psi, t0); psi_t1 = solver.step(t1); psi_t2 = solver.step(t2, args=new_args) # Can be inefficient depending on integrator.; psi_t3 = solver.step(t3, options=new_opt) # Inefficient but supported.; ```; When stepping, the output is always the state as `Qobj`. The solver class promote ket state to density matrices when the rhs is a super-operator. `rhs` support `Qobj` and `QobjEvo`, but not list or function. This PR also add `MeSolver` and `SeSolver` classes, but they are very light:; `MeSolver(H, c_ops)` is equivalent to `Solver(liouvillian(H, c_ops))`. `Solver` store a list of available `Integrator` as a class property. `Solver.avail_integrator` has all integrators available to all solvers. `SeSolver.avail_integrator` has all these with those registered directly to `SeSolver`. This is to allow Integrator for specific system. We could think for the floquet sesolve method to be made into an integrator specific to `SeSolver`. . The interface for `sesolve` and `mesolve` is mostly unchanged, but `progress_bar` keyword is moved to an options and the `_safe_mode` keyword is removed. **Changelog**; Added `Solver` class.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1700
https://github.com/qutip/qutip/pull/1700:972,Deployability,integrat,integrator,972,"**Description**; Add a `Solver` class for better task distribution in `sesolve` and `mesolve`. `sesolve`, `mesolve`, etc. are presently mostly independent: each create their time dependant system, the function to integrator with scipy's ode solver, loop over the `tlist` and store results. With this PR, the `[se/me]solve` functions will reuse most of the code and be more modular.; We already have a `Result` class to manage e_ops and store result, `Integrator` to solve the ode system. `QobjEvo` can support any time-dependant format we support. This PR introduce a new class `Solver` to join all these. Basis usage looks like:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); result = solver.run(psi, tlist, e_ops=e_ops); result.expect; ```. It can also do step evolution:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); solver.start(psi, t0); psi_t1 = solver.step(t1); psi_t2 = solver.step(t2, args=new_args) # Can be inefficient depending on integrator.; psi_t3 = solver.step(t3, options=new_opt) # Inefficient but supported.; ```; When stepping, the output is always the state as `Qobj`. The solver class promote ket state to density matrices when the rhs is a super-operator. `rhs` support `Qobj` and `QobjEvo`, but not list or function. This PR also add `MeSolver` and `SeSolver` classes, but they are very light:; `MeSolver(H, c_ops)` is equivalent to `Solver(liouvillian(H, c_ops))`. `Solver` store a list of available `Integrator` as a class property. `Solver.avail_integrator` has all integrators available to all solvers. `SeSolver.avail_integrator` has all these with those registered directly to `SeSolver`. This is to allow Integrator for specific system. We could think for the floquet sesolve method to be made into an integrator specific to `SeSolver`. . The interface for `sesolve` and `mesolve` is mostly unchanged, but `progress_bar` keyword is moved to an options and the `_safe_mode` keyword is removed. **Changelog**; Added `Solver` class.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1700
https://github.com/qutip/qutip/pull/1700:1455,Deployability,Integrat,Integrator,1455,"**Description**; Add a `Solver` class for better task distribution in `sesolve` and `mesolve`. `sesolve`, `mesolve`, etc. are presently mostly independent: each create their time dependant system, the function to integrator with scipy's ode solver, loop over the `tlist` and store results. With this PR, the `[se/me]solve` functions will reuse most of the code and be more modular.; We already have a `Result` class to manage e_ops and store result, `Integrator` to solve the ode system. `QobjEvo` can support any time-dependant format we support. This PR introduce a new class `Solver` to join all these. Basis usage looks like:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); result = solver.run(psi, tlist, e_ops=e_ops); result.expect; ```. It can also do step evolution:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); solver.start(psi, t0); psi_t1 = solver.step(t1); psi_t2 = solver.step(t2, args=new_args) # Can be inefficient depending on integrator.; psi_t3 = solver.step(t3, options=new_opt) # Inefficient but supported.; ```; When stepping, the output is always the state as `Qobj`. The solver class promote ket state to density matrices when the rhs is a super-operator. `rhs` support `Qobj` and `QobjEvo`, but not list or function. This PR also add `MeSolver` and `SeSolver` classes, but they are very light:; `MeSolver(H, c_ops)` is equivalent to `Solver(liouvillian(H, c_ops))`. `Solver` store a list of available `Integrator` as a class property. `Solver.avail_integrator` has all integrators available to all solvers. `SeSolver.avail_integrator` has all these with those registered directly to `SeSolver`. This is to allow Integrator for specific system. We could think for the floquet sesolve method to be made into an integrator specific to `SeSolver`. . The interface for `sesolve` and `mesolve` is mostly unchanged, but `progress_bar` keyword is moved to an options and the `_safe_mode` keyword is removed. **Changelog**; Added `Solver` class.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1700
https://github.com/qutip/qutip/pull/1700:1522,Deployability,integrat,integrators,1522,"**Description**; Add a `Solver` class for better task distribution in `sesolve` and `mesolve`. `sesolve`, `mesolve`, etc. are presently mostly independent: each create their time dependant system, the function to integrator with scipy's ode solver, loop over the `tlist` and store results. With this PR, the `[se/me]solve` functions will reuse most of the code and be more modular.; We already have a `Result` class to manage e_ops and store result, `Integrator` to solve the ode system. `QobjEvo` can support any time-dependant format we support. This PR introduce a new class `Solver` to join all these. Basis usage looks like:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); result = solver.run(psi, tlist, e_ops=e_ops); result.expect; ```. It can also do step evolution:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); solver.start(psi, t0); psi_t1 = solver.step(t1); psi_t2 = solver.step(t2, args=new_args) # Can be inefficient depending on integrator.; psi_t3 = solver.step(t3, options=new_opt) # Inefficient but supported.; ```; When stepping, the output is always the state as `Qobj`. The solver class promote ket state to density matrices when the rhs is a super-operator. `rhs` support `Qobj` and `QobjEvo`, but not list or function. This PR also add `MeSolver` and `SeSolver` classes, but they are very light:; `MeSolver(H, c_ops)` is equivalent to `Solver(liouvillian(H, c_ops))`. `Solver` store a list of available `Integrator` as a class property. `Solver.avail_integrator` has all integrators available to all solvers. `SeSolver.avail_integrator` has all these with those registered directly to `SeSolver`. This is to allow Integrator for specific system. We could think for the floquet sesolve method to be made into an integrator specific to `SeSolver`. . The interface for `sesolve` and `mesolve` is mostly unchanged, but `progress_bar` keyword is moved to an options and the `_safe_mode` keyword is removed. **Changelog**; Added `Solver` class.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1700
https://github.com/qutip/qutip/pull/1700:1665,Deployability,Integrat,Integrator,1665,"**Description**; Add a `Solver` class for better task distribution in `sesolve` and `mesolve`. `sesolve`, `mesolve`, etc. are presently mostly independent: each create their time dependant system, the function to integrator with scipy's ode solver, loop over the `tlist` and store results. With this PR, the `[se/me]solve` functions will reuse most of the code and be more modular.; We already have a `Result` class to manage e_ops and store result, `Integrator` to solve the ode system. `QobjEvo` can support any time-dependant format we support. This PR introduce a new class `Solver` to join all these. Basis usage looks like:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); result = solver.run(psi, tlist, e_ops=e_ops); result.expect; ```. It can also do step evolution:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); solver.start(psi, t0); psi_t1 = solver.step(t1); psi_t2 = solver.step(t2, args=new_args) # Can be inefficient depending on integrator.; psi_t3 = solver.step(t3, options=new_opt) # Inefficient but supported.; ```; When stepping, the output is always the state as `Qobj`. The solver class promote ket state to density matrices when the rhs is a super-operator. `rhs` support `Qobj` and `QobjEvo`, but not list or function. This PR also add `MeSolver` and `SeSolver` classes, but they are very light:; `MeSolver(H, c_ops)` is equivalent to `Solver(liouvillian(H, c_ops))`. `Solver` store a list of available `Integrator` as a class property. `Solver.avail_integrator` has all integrators available to all solvers. `SeSolver.avail_integrator` has all these with those registered directly to `SeSolver`. This is to allow Integrator for specific system. We could think for the floquet sesolve method to be made into an integrator specific to `SeSolver`. . The interface for `sesolve` and `mesolve` is mostly unchanged, but `progress_bar` keyword is moved to an options and the `_safe_mode` keyword is removed. **Changelog**; Added `Solver` class.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1700
https://github.com/qutip/qutip/pull/1700:1762,Deployability,integrat,integrator,1762,"**Description**; Add a `Solver` class for better task distribution in `sesolve` and `mesolve`. `sesolve`, `mesolve`, etc. are presently mostly independent: each create their time dependant system, the function to integrator with scipy's ode solver, loop over the `tlist` and store results. With this PR, the `[se/me]solve` functions will reuse most of the code and be more modular.; We already have a `Result` class to manage e_ops and store result, `Integrator` to solve the ode system. `QobjEvo` can support any time-dependant format we support. This PR introduce a new class `Solver` to join all these. Basis usage looks like:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); result = solver.run(psi, tlist, e_ops=e_ops); result.expect; ```. It can also do step evolution:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); solver.start(psi, t0); psi_t1 = solver.step(t1); psi_t2 = solver.step(t2, args=new_args) # Can be inefficient depending on integrator.; psi_t3 = solver.step(t3, options=new_opt) # Inefficient but supported.; ```; When stepping, the output is always the state as `Qobj`. The solver class promote ket state to density matrices when the rhs is a super-operator. `rhs` support `Qobj` and `QobjEvo`, but not list or function. This PR also add `MeSolver` and `SeSolver` classes, but they are very light:; `MeSolver(H, c_ops)` is equivalent to `Solver(liouvillian(H, c_ops))`. `Solver` store a list of available `Integrator` as a class property. `Solver.avail_integrator` has all integrators available to all solvers. `SeSolver.avail_integrator` has all these with those registered directly to `SeSolver`. This is to allow Integrator for specific system. We could think for the floquet sesolve method to be made into an integrator specific to `SeSolver`. . The interface for `sesolve` and `mesolve` is mostly unchanged, but `progress_bar` keyword is moved to an options and the `_safe_mode` keyword is removed. **Changelog**; Added `Solver` class.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1700
https://github.com/qutip/qutip/pull/1700:179,Integrability,depend,dependant,179,"**Description**; Add a `Solver` class for better task distribution in `sesolve` and `mesolve`. `sesolve`, `mesolve`, etc. are presently mostly independent: each create their time dependant system, the function to integrator with scipy's ode solver, loop over the `tlist` and store results. With this PR, the `[se/me]solve` functions will reuse most of the code and be more modular.; We already have a `Result` class to manage e_ops and store result, `Integrator` to solve the ode system. `QobjEvo` can support any time-dependant format we support. This PR introduce a new class `Solver` to join all these. Basis usage looks like:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); result = solver.run(psi, tlist, e_ops=e_ops); result.expect; ```. It can also do step evolution:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); solver.start(psi, t0); psi_t1 = solver.step(t1); psi_t2 = solver.step(t2, args=new_args) # Can be inefficient depending on integrator.; psi_t3 = solver.step(t3, options=new_opt) # Inefficient but supported.; ```; When stepping, the output is always the state as `Qobj`. The solver class promote ket state to density matrices when the rhs is a super-operator. `rhs` support `Qobj` and `QobjEvo`, but not list or function. This PR also add `MeSolver` and `SeSolver` classes, but they are very light:; `MeSolver(H, c_ops)` is equivalent to `Solver(liouvillian(H, c_ops))`. `Solver` store a list of available `Integrator` as a class property. `Solver.avail_integrator` has all integrators available to all solvers. `SeSolver.avail_integrator` has all these with those registered directly to `SeSolver`. This is to allow Integrator for specific system. We could think for the floquet sesolve method to be made into an integrator specific to `SeSolver`. . The interface for `sesolve` and `mesolve` is mostly unchanged, but `progress_bar` keyword is moved to an options and the `_safe_mode` keyword is removed. **Changelog**; Added `Solver` class.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1700
https://github.com/qutip/qutip/pull/1700:213,Integrability,integrat,integrator,213,"**Description**; Add a `Solver` class for better task distribution in `sesolve` and `mesolve`. `sesolve`, `mesolve`, etc. are presently mostly independent: each create their time dependant system, the function to integrator with scipy's ode solver, loop over the `tlist` and store results. With this PR, the `[se/me]solve` functions will reuse most of the code and be more modular.; We already have a `Result` class to manage e_ops and store result, `Integrator` to solve the ode system. `QobjEvo` can support any time-dependant format we support. This PR introduce a new class `Solver` to join all these. Basis usage looks like:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); result = solver.run(psi, tlist, e_ops=e_ops); result.expect; ```. It can also do step evolution:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); solver.start(psi, t0); psi_t1 = solver.step(t1); psi_t2 = solver.step(t2, args=new_args) # Can be inefficient depending on integrator.; psi_t3 = solver.step(t3, options=new_opt) # Inefficient but supported.; ```; When stepping, the output is always the state as `Qobj`. The solver class promote ket state to density matrices when the rhs is a super-operator. `rhs` support `Qobj` and `QobjEvo`, but not list or function. This PR also add `MeSolver` and `SeSolver` classes, but they are very light:; `MeSolver(H, c_ops)` is equivalent to `Solver(liouvillian(H, c_ops))`. `Solver` store a list of available `Integrator` as a class property. `Solver.avail_integrator` has all integrators available to all solvers. `SeSolver.avail_integrator` has all these with those registered directly to `SeSolver`. This is to allow Integrator for specific system. We could think for the floquet sesolve method to be made into an integrator specific to `SeSolver`. . The interface for `sesolve` and `mesolve` is mostly unchanged, but `progress_bar` keyword is moved to an options and the `_safe_mode` keyword is removed. **Changelog**; Added `Solver` class.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1700
https://github.com/qutip/qutip/pull/1700:451,Integrability,Integrat,Integrator,451,"**Description**; Add a `Solver` class for better task distribution in `sesolve` and `mesolve`. `sesolve`, `mesolve`, etc. are presently mostly independent: each create their time dependant system, the function to integrator with scipy's ode solver, loop over the `tlist` and store results. With this PR, the `[se/me]solve` functions will reuse most of the code and be more modular.; We already have a `Result` class to manage e_ops and store result, `Integrator` to solve the ode system. `QobjEvo` can support any time-dependant format we support. This PR introduce a new class `Solver` to join all these. Basis usage looks like:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); result = solver.run(psi, tlist, e_ops=e_ops); result.expect; ```. It can also do step evolution:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); solver.start(psi, t0); psi_t1 = solver.step(t1); psi_t2 = solver.step(t2, args=new_args) # Can be inefficient depending on integrator.; psi_t3 = solver.step(t3, options=new_opt) # Inefficient but supported.; ```; When stepping, the output is always the state as `Qobj`. The solver class promote ket state to density matrices when the rhs is a super-operator. `rhs` support `Qobj` and `QobjEvo`, but not list or function. This PR also add `MeSolver` and `SeSolver` classes, but they are very light:; `MeSolver(H, c_ops)` is equivalent to `Solver(liouvillian(H, c_ops))`. `Solver` store a list of available `Integrator` as a class property. `Solver.avail_integrator` has all integrators available to all solvers. `SeSolver.avail_integrator` has all these with those registered directly to `SeSolver`. This is to allow Integrator for specific system. We could think for the floquet sesolve method to be made into an integrator specific to `SeSolver`. . The interface for `sesolve` and `mesolve` is mostly unchanged, but `progress_bar` keyword is moved to an options and the `_safe_mode` keyword is removed. **Changelog**; Added `Solver` class.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1700
https://github.com/qutip/qutip/pull/1700:519,Integrability,depend,dependant,519,"**Description**; Add a `Solver` class for better task distribution in `sesolve` and `mesolve`. `sesolve`, `mesolve`, etc. are presently mostly independent: each create their time dependant system, the function to integrator with scipy's ode solver, loop over the `tlist` and store results. With this PR, the `[se/me]solve` functions will reuse most of the code and be more modular.; We already have a `Result` class to manage e_ops and store result, `Integrator` to solve the ode system. `QobjEvo` can support any time-dependant format we support. This PR introduce a new class `Solver` to join all these. Basis usage looks like:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); result = solver.run(psi, tlist, e_ops=e_ops); result.expect; ```. It can also do step evolution:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); solver.start(psi, t0); psi_t1 = solver.step(t1); psi_t2 = solver.step(t2, args=new_args) # Can be inefficient depending on integrator.; psi_t3 = solver.step(t3, options=new_opt) # Inefficient but supported.; ```; When stepping, the output is always the state as `Qobj`. The solver class promote ket state to density matrices when the rhs is a super-operator. `rhs` support `Qobj` and `QobjEvo`, but not list or function. This PR also add `MeSolver` and `SeSolver` classes, but they are very light:; `MeSolver(H, c_ops)` is equivalent to `Solver(liouvillian(H, c_ops))`. `Solver` store a list of available `Integrator` as a class property. `Solver.avail_integrator` has all integrators available to all solvers. `SeSolver.avail_integrator` has all these with those registered directly to `SeSolver`. This is to allow Integrator for specific system. We could think for the floquet sesolve method to be made into an integrator specific to `SeSolver`. . The interface for `sesolve` and `mesolve` is mostly unchanged, but `progress_bar` keyword is moved to an options and the `_safe_mode` keyword is removed. **Changelog**; Added `Solver` class.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1700
https://github.com/qutip/qutip/pull/1700:959,Integrability,depend,depending,959,"**Description**; Add a `Solver` class for better task distribution in `sesolve` and `mesolve`. `sesolve`, `mesolve`, etc. are presently mostly independent: each create their time dependant system, the function to integrator with scipy's ode solver, loop over the `tlist` and store results. With this PR, the `[se/me]solve` functions will reuse most of the code and be more modular.; We already have a `Result` class to manage e_ops and store result, `Integrator` to solve the ode system. `QobjEvo` can support any time-dependant format we support. This PR introduce a new class `Solver` to join all these. Basis usage looks like:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); result = solver.run(psi, tlist, e_ops=e_ops); result.expect; ```. It can also do step evolution:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); solver.start(psi, t0); psi_t1 = solver.step(t1); psi_t2 = solver.step(t2, args=new_args) # Can be inefficient depending on integrator.; psi_t3 = solver.step(t3, options=new_opt) # Inefficient but supported.; ```; When stepping, the output is always the state as `Qobj`. The solver class promote ket state to density matrices when the rhs is a super-operator. `rhs` support `Qobj` and `QobjEvo`, but not list or function. This PR also add `MeSolver` and `SeSolver` classes, but they are very light:; `MeSolver(H, c_ops)` is equivalent to `Solver(liouvillian(H, c_ops))`. `Solver` store a list of available `Integrator` as a class property. `Solver.avail_integrator` has all integrators available to all solvers. `SeSolver.avail_integrator` has all these with those registered directly to `SeSolver`. This is to allow Integrator for specific system. We could think for the floquet sesolve method to be made into an integrator specific to `SeSolver`. . The interface for `sesolve` and `mesolve` is mostly unchanged, but `progress_bar` keyword is moved to an options and the `_safe_mode` keyword is removed. **Changelog**; Added `Solver` class.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1700
https://github.com/qutip/qutip/pull/1700:972,Integrability,integrat,integrator,972,"**Description**; Add a `Solver` class for better task distribution in `sesolve` and `mesolve`. `sesolve`, `mesolve`, etc. are presently mostly independent: each create their time dependant system, the function to integrator with scipy's ode solver, loop over the `tlist` and store results. With this PR, the `[se/me]solve` functions will reuse most of the code and be more modular.; We already have a `Result` class to manage e_ops and store result, `Integrator` to solve the ode system. `QobjEvo` can support any time-dependant format we support. This PR introduce a new class `Solver` to join all these. Basis usage looks like:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); result = solver.run(psi, tlist, e_ops=e_ops); result.expect; ```. It can also do step evolution:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); solver.start(psi, t0); psi_t1 = solver.step(t1); psi_t2 = solver.step(t2, args=new_args) # Can be inefficient depending on integrator.; psi_t3 = solver.step(t3, options=new_opt) # Inefficient but supported.; ```; When stepping, the output is always the state as `Qobj`. The solver class promote ket state to density matrices when the rhs is a super-operator. `rhs` support `Qobj` and `QobjEvo`, but not list or function. This PR also add `MeSolver` and `SeSolver` classes, but they are very light:; `MeSolver(H, c_ops)` is equivalent to `Solver(liouvillian(H, c_ops))`. `Solver` store a list of available `Integrator` as a class property. `Solver.avail_integrator` has all integrators available to all solvers. `SeSolver.avail_integrator` has all these with those registered directly to `SeSolver`. This is to allow Integrator for specific system. We could think for the floquet sesolve method to be made into an integrator specific to `SeSolver`. . The interface for `sesolve` and `mesolve` is mostly unchanged, but `progress_bar` keyword is moved to an options and the `_safe_mode` keyword is removed. **Changelog**; Added `Solver` class.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1700
https://github.com/qutip/qutip/pull/1700:1455,Integrability,Integrat,Integrator,1455,"**Description**; Add a `Solver` class for better task distribution in `sesolve` and `mesolve`. `sesolve`, `mesolve`, etc. are presently mostly independent: each create their time dependant system, the function to integrator with scipy's ode solver, loop over the `tlist` and store results. With this PR, the `[se/me]solve` functions will reuse most of the code and be more modular.; We already have a `Result` class to manage e_ops and store result, `Integrator` to solve the ode system. `QobjEvo` can support any time-dependant format we support. This PR introduce a new class `Solver` to join all these. Basis usage looks like:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); result = solver.run(psi, tlist, e_ops=e_ops); result.expect; ```. It can also do step evolution:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); solver.start(psi, t0); psi_t1 = solver.step(t1); psi_t2 = solver.step(t2, args=new_args) # Can be inefficient depending on integrator.; psi_t3 = solver.step(t3, options=new_opt) # Inefficient but supported.; ```; When stepping, the output is always the state as `Qobj`. The solver class promote ket state to density matrices when the rhs is a super-operator. `rhs` support `Qobj` and `QobjEvo`, but not list or function. This PR also add `MeSolver` and `SeSolver` classes, but they are very light:; `MeSolver(H, c_ops)` is equivalent to `Solver(liouvillian(H, c_ops))`. `Solver` store a list of available `Integrator` as a class property. `Solver.avail_integrator` has all integrators available to all solvers. `SeSolver.avail_integrator` has all these with those registered directly to `SeSolver`. This is to allow Integrator for specific system. We could think for the floquet sesolve method to be made into an integrator specific to `SeSolver`. . The interface for `sesolve` and `mesolve` is mostly unchanged, but `progress_bar` keyword is moved to an options and the `_safe_mode` keyword is removed. **Changelog**; Added `Solver` class.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1700
https://github.com/qutip/qutip/pull/1700:1522,Integrability,integrat,integrators,1522,"**Description**; Add a `Solver` class for better task distribution in `sesolve` and `mesolve`. `sesolve`, `mesolve`, etc. are presently mostly independent: each create their time dependant system, the function to integrator with scipy's ode solver, loop over the `tlist` and store results. With this PR, the `[se/me]solve` functions will reuse most of the code and be more modular.; We already have a `Result` class to manage e_ops and store result, `Integrator` to solve the ode system. `QobjEvo` can support any time-dependant format we support. This PR introduce a new class `Solver` to join all these. Basis usage looks like:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); result = solver.run(psi, tlist, e_ops=e_ops); result.expect; ```. It can also do step evolution:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); solver.start(psi, t0); psi_t1 = solver.step(t1); psi_t2 = solver.step(t2, args=new_args) # Can be inefficient depending on integrator.; psi_t3 = solver.step(t3, options=new_opt) # Inefficient but supported.; ```; When stepping, the output is always the state as `Qobj`. The solver class promote ket state to density matrices when the rhs is a super-operator. `rhs` support `Qobj` and `QobjEvo`, but not list or function. This PR also add `MeSolver` and `SeSolver` classes, but they are very light:; `MeSolver(H, c_ops)` is equivalent to `Solver(liouvillian(H, c_ops))`. `Solver` store a list of available `Integrator` as a class property. `Solver.avail_integrator` has all integrators available to all solvers. `SeSolver.avail_integrator` has all these with those registered directly to `SeSolver`. This is to allow Integrator for specific system. We could think for the floquet sesolve method to be made into an integrator specific to `SeSolver`. . The interface for `sesolve` and `mesolve` is mostly unchanged, but `progress_bar` keyword is moved to an options and the `_safe_mode` keyword is removed. **Changelog**; Added `Solver` class.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1700
https://github.com/qutip/qutip/pull/1700:1665,Integrability,Integrat,Integrator,1665,"**Description**; Add a `Solver` class for better task distribution in `sesolve` and `mesolve`. `sesolve`, `mesolve`, etc. are presently mostly independent: each create their time dependant system, the function to integrator with scipy's ode solver, loop over the `tlist` and store results. With this PR, the `[se/me]solve` functions will reuse most of the code and be more modular.; We already have a `Result` class to manage e_ops and store result, `Integrator` to solve the ode system. `QobjEvo` can support any time-dependant format we support. This PR introduce a new class `Solver` to join all these. Basis usage looks like:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); result = solver.run(psi, tlist, e_ops=e_ops); result.expect; ```. It can also do step evolution:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); solver.start(psi, t0); psi_t1 = solver.step(t1); psi_t2 = solver.step(t2, args=new_args) # Can be inefficient depending on integrator.; psi_t3 = solver.step(t3, options=new_opt) # Inefficient but supported.; ```; When stepping, the output is always the state as `Qobj`. The solver class promote ket state to density matrices when the rhs is a super-operator. `rhs` support `Qobj` and `QobjEvo`, but not list or function. This PR also add `MeSolver` and `SeSolver` classes, but they are very light:; `MeSolver(H, c_ops)` is equivalent to `Solver(liouvillian(H, c_ops))`. `Solver` store a list of available `Integrator` as a class property. `Solver.avail_integrator` has all integrators available to all solvers. `SeSolver.avail_integrator` has all these with those registered directly to `SeSolver`. This is to allow Integrator for specific system. We could think for the floquet sesolve method to be made into an integrator specific to `SeSolver`. . The interface for `sesolve` and `mesolve` is mostly unchanged, but `progress_bar` keyword is moved to an options and the `_safe_mode` keyword is removed. **Changelog**; Added `Solver` class.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1700
https://github.com/qutip/qutip/pull/1700:1762,Integrability,integrat,integrator,1762,"**Description**; Add a `Solver` class for better task distribution in `sesolve` and `mesolve`. `sesolve`, `mesolve`, etc. are presently mostly independent: each create their time dependant system, the function to integrator with scipy's ode solver, loop over the `tlist` and store results. With this PR, the `[se/me]solve` functions will reuse most of the code and be more modular.; We already have a `Result` class to manage e_ops and store result, `Integrator` to solve the ode system. `QobjEvo` can support any time-dependant format we support. This PR introduce a new class `Solver` to join all these. Basis usage looks like:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); result = solver.run(psi, tlist, e_ops=e_ops); result.expect; ```. It can also do step evolution:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); solver.start(psi, t0); psi_t1 = solver.step(t1); psi_t2 = solver.step(t2, args=new_args) # Can be inefficient depending on integrator.; psi_t3 = solver.step(t3, options=new_opt) # Inefficient but supported.; ```; When stepping, the output is always the state as `Qobj`. The solver class promote ket state to density matrices when the rhs is a super-operator. `rhs` support `Qobj` and `QobjEvo`, but not list or function. This PR also add `MeSolver` and `SeSolver` classes, but they are very light:; `MeSolver(H, c_ops)` is equivalent to `Solver(liouvillian(H, c_ops))`. `Solver` store a list of available `Integrator` as a class property. `Solver.avail_integrator` has all integrators available to all solvers. `SeSolver.avail_integrator` has all these with those registered directly to `SeSolver`. This is to allow Integrator for specific system. We could think for the floquet sesolve method to be made into an integrator specific to `SeSolver`. . The interface for `sesolve` and `mesolve` is mostly unchanged, but `progress_bar` keyword is moved to an options and the `_safe_mode` keyword is removed. **Changelog**; Added `Solver` class.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1700
https://github.com/qutip/qutip/pull/1700:1803,Integrability,interface,interface,1803,"**Description**; Add a `Solver` class for better task distribution in `sesolve` and `mesolve`. `sesolve`, `mesolve`, etc. are presently mostly independent: each create their time dependant system, the function to integrator with scipy's ode solver, loop over the `tlist` and store results. With this PR, the `[se/me]solve` functions will reuse most of the code and be more modular.; We already have a `Result` class to manage e_ops and store result, `Integrator` to solve the ode system. `QobjEvo` can support any time-dependant format we support. This PR introduce a new class `Solver` to join all these. Basis usage looks like:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); result = solver.run(psi, tlist, e_ops=e_ops); result.expect; ```. It can also do step evolution:; ```; rhs = QobjEvo(...); solver = Solver(rhs, options=opt); solver.start(psi, t0); psi_t1 = solver.step(t1); psi_t2 = solver.step(t2, args=new_args) # Can be inefficient depending on integrator.; psi_t3 = solver.step(t3, options=new_opt) # Inefficient but supported.; ```; When stepping, the output is always the state as `Qobj`. The solver class promote ket state to density matrices when the rhs is a super-operator. `rhs` support `Qobj` and `QobjEvo`, but not list or function. This PR also add `MeSolver` and `SeSolver` classes, but they are very light:; `MeSolver(H, c_ops)` is equivalent to `Solver(liouvillian(H, c_ops))`. `Solver` store a list of available `Integrator` as a class property. `Solver.avail_integrator` has all integrators available to all solvers. `SeSolver.avail_integrator` has all these with those registered directly to `SeSolver`. This is to allow Integrator for specific system. We could think for the floquet sesolve method to be made into an integrator specific to `SeSolver`. . The interface for `sesolve` and `mesolve` is mostly unchanged, but `progress_bar` keyword is moved to an options and the `_safe_mode` keyword is removed. **Changelog**; Added `Solver` class.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1700
https://github.com/qutip/qutip/pull/1701:58,Testability,test,test,58,"**Description**; Fix numpy's version in github actions so test passed.; I cherry-picked the merge commit from #1696, hoping it will make the merge of `master` into `dev.major` easier when done.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1701
https://github.com/qutip/qutip/pull/1702:142,Testability,log,logical,142,1. _unit_site_H() is added that is used by display_unit_cell() and display_lattice(); 2. ImportError for matplotlib.pyplot is added.; 3. Some logical problems were fixed. @hodgestar Please review this branch.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1702
https://github.com/qutip/qutip/issues/1703:1725,Availability,avail,available,1725,"ps://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not installed, is; ```; $ pytest qutip/tests/test_metrics.py ; ============================= test session starts ==============================; platform linux -- Python 3.9.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1; rootdir: /home/florian/code/qutip/qutip/qutip/tests, configfile: pytest.ini; plugins: rerunfailures-10.1; collected 0 items / 1 skipped ; ```; That issue seems to be addressed on the dev.major branch. Would it make sense to take the test file from there and use it in the master branch also?. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1703
https://github.com/qutip/qutip/issues/1703:1905,Availability,avail,available,1905,"ps://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not installed, is; ```; $ pytest qutip/tests/test_metrics.py ; ============================= test session starts ==============================; platform linux -- Python 3.9.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1; rootdir: /home/florian/code/qutip/qutip/qutip/tests, configfile: pytest.ini; plugins: rerunfailures-10.1; collected 0 items / 1 skipped ; ```; That issue seems to be addressed on the dev.major branch. Would it make sense to take the test file from there and use it in the master branch also?. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1703
https://github.com/qutip/qutip/issues/1703:1996,Deployability,install,installed,1996,"ps://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not installed, is; ```; $ pytest qutip/tests/test_metrics.py ; ============================= test session starts ==============================; platform linux -- Python 3.9.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1; rootdir: /home/florian/code/qutip/qutip/qutip/tests, configfile: pytest.ini; plugins: rerunfailures-10.1; collected 0 items / 1 skipped ; ```; That issue seems to be addressed on the dev.major branch. Would it make sense to take the test file from there and use it in the master branch also?. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1703
https://github.com/qutip/qutip/issues/1703:1513,Integrability,depend,depending,1513,"om a superoperator, see, e.g., https://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not installed, is; ```; $ pytest qutip/tests/test_metrics.py ; ============================= test session starts ==============================; platform linux -- Python 3.9.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1; rootdir: /home/florian/code/qutip/qutip/qutip/tests, configfile: pytest.ini; plugins: rerunfailures-10.1; collected 0 items / 1 skipped ; ```; That issue seems to be addressed on the dev.major branch. Would it make sense to take the test file from there and use it in",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1703
https://github.com/qutip/qutip/issues/1703:1748,Integrability,depend,depends,1748,"ps://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not installed, is; ```; $ pytest qutip/tests/test_metrics.py ; ============================= test session starts ==============================; platform linux -- Python 3.9.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1; rootdir: /home/florian/code/qutip/qutip/qutip/tests, configfile: pytest.ini; plugins: rerunfailures-10.1; collected 0 items / 1 skipped ; ```; That issue seems to be addressed on the dev.major branch. Would it make sense to take the test file from there and use it in the master branch also?. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1703
https://github.com/qutip/qutip/issues/1703:2262,Modifiability,config,configfile,2262,"ps://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not installed, is; ```; $ pytest qutip/tests/test_metrics.py ; ============================= test session starts ==============================; platform linux -- Python 3.9.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1; rootdir: /home/florian/code/qutip/qutip/qutip/tests, configfile: pytest.ini; plugins: rerunfailures-10.1; collected 0 items / 1 skipped ; ```; That issue seems to be addressed on the dev.major branch. Would it make sense to take the test file from there and use it in the master branch also?. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1703
https://github.com/qutip/qutip/issues/1703:2286,Modifiability,plugin,plugins,2286,"ps://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not installed, is; ```; $ pytest qutip/tests/test_metrics.py ; ============================= test session starts ==============================; platform linux -- Python 3.9.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1; rootdir: /home/florian/code/qutip/qutip/qutip/tests, configfile: pytest.ini; plugins: rerunfailures-10.1; collected 0 items / 1 skipped ; ```; That issue seems to be addressed on the dev.major branch. Would it make sense to take the test file from there and use it in the master branch also?. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1703
https://github.com/qutip/qutip/issues/1703:412,Performance,perform,performance,412,"Hello,. I have some suggestions for improvements in some functions in `metrics.py`. I'd be happy to put together a PR. The current implementation of `average_gate_fidelity` is based on the Kraus representation of the input quantum channel. If the input is a superoperator, it is first converted to its Kraus representation (involving diagonalization) before computing the average gate fidelity, which sacrifices performance and accuracy. There is a direct formula starting from a superoperator, see, e.g., https://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not insta",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1703
https://github.com/qutip/qutip/issues/1703:539,Testability,stub,stubs,539,"Hello,. I have some suggestions for improvements in some functions in `metrics.py`. I'd be happy to put together a PR. The current implementation of `average_gate_fidelity` is based on the Kraus representation of the input quantum channel. If the input is a superoperator, it is first converted to its Kraus representation (involving diagonalization) before computing the average gate fidelity, which sacrifices performance and accuracy. There is a direct formula starting from a superoperator, see, e.g., https://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not insta",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1703
https://github.com/qutip/qutip/issues/1703:689,Testability,stub,stubs,689,"Hello,. I have some suggestions for improvements in some functions in `metrics.py`. I'd be happy to put together a PR. The current implementation of `average_gate_fidelity` is based on the Kraus representation of the input quantum channel. If the input is a superoperator, it is first converted to its Kraus representation (involving diagonalization) before computing the average gate fidelity, which sacrifices performance and accuracy. There is a direct formula starting from a superoperator, see, e.g., https://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not insta",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1703
https://github.com/qutip/qutip/issues/1703:1630,Testability,test,tests,1630,"ps://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not installed, is; ```; $ pytest qutip/tests/test_metrics.py ; ============================= test session starts ==============================; platform linux -- Python 3.9.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1; rootdir: /home/florian/code/qutip/qutip/qutip/tests, configfile: pytest.ini; plugins: rerunfailures-10.1; collected 0 items / 1 skipped ; ```; That issue seems to be addressed on the dev.major branch. Would it make sense to take the test file from there and use it in the master branch also?. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1703
https://github.com/qutip/qutip/issues/1703:1686,Testability,test,tests,1686,"ps://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not installed, is; ```; $ pytest qutip/tests/test_metrics.py ; ============================= test session starts ==============================; platform linux -- Python 3.9.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1; rootdir: /home/florian/code/qutip/qutip/qutip/tests, configfile: pytest.ini; plugins: rerunfailures-10.1; collected 0 items / 1 skipped ; ```; That issue seems to be addressed on the dev.major branch. Would it make sense to take the test file from there and use it in the master branch also?. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1703
https://github.com/qutip/qutip/issues/1703:1871,Testability,test,tests,1871,"ps://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not installed, is; ```; $ pytest qutip/tests/test_metrics.py ; ============================= test session starts ==============================; platform linux -- Python 3.9.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1; rootdir: /home/florian/code/qutip/qutip/qutip/tests, configfile: pytest.ini; plugins: rerunfailures-10.1; collected 0 items / 1 skipped ; ```; That issue seems to be addressed on the dev.major branch. Would it make sense to take the test file from there and use it in the master branch also?. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1703
https://github.com/qutip/qutip/issues/1703:1965,Testability,test,test,1965,"ps://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not installed, is; ```; $ pytest qutip/tests/test_metrics.py ; ============================= test session starts ==============================; platform linux -- Python 3.9.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1; rootdir: /home/florian/code/qutip/qutip/qutip/tests, configfile: pytest.ini; plugins: rerunfailures-10.1; collected 0 items / 1 skipped ; ```; That issue seems to be addressed on the dev.major branch. Would it make sense to take the test file from there and use it in the master branch also?. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1703
https://github.com/qutip/qutip/issues/1703:2031,Testability,test,tests,2031,"ps://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not installed, is; ```; $ pytest qutip/tests/test_metrics.py ; ============================= test session starts ==============================; platform linux -- Python 3.9.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1; rootdir: /home/florian/code/qutip/qutip/qutip/tests, configfile: pytest.ini; plugins: rerunfailures-10.1; collected 0 items / 1 skipped ; ```; That issue seems to be addressed on the dev.major branch. Would it make sense to take the test file from there and use it in the master branch also?. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1703
https://github.com/qutip/qutip/issues/1703:2085,Testability,test,test,2085,"ps://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not installed, is; ```; $ pytest qutip/tests/test_metrics.py ; ============================= test session starts ==============================; platform linux -- Python 3.9.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1; rootdir: /home/florian/code/qutip/qutip/qutip/tests, configfile: pytest.ini; plugins: rerunfailures-10.1; collected 0 items / 1 skipped ; ```; That issue seems to be addressed on the dev.major branch. Would it make sense to take the test file from there and use it in the master branch also?. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1703
https://github.com/qutip/qutip/issues/1703:2255,Testability,test,tests,2255,"ps://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not installed, is; ```; $ pytest qutip/tests/test_metrics.py ; ============================= test session starts ==============================; platform linux -- Python 3.9.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1; rootdir: /home/florian/code/qutip/qutip/qutip/tests, configfile: pytest.ini; plugins: rerunfailures-10.1; collected 0 items / 1 skipped ; ```; That issue seems to be addressed on the dev.major branch. Would it make sense to take the test file from there and use it in the master branch also?. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1703
https://github.com/qutip/qutip/issues/1703:2442,Testability,test,test,2442,"ps://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not installed, is; ```; $ pytest qutip/tests/test_metrics.py ; ============================= test session starts ==============================; platform linux -- Python 3.9.7, pytest-6.2.4, py-1.10.0, pluggy-0.13.1; rootdir: /home/florian/code/qutip/qutip/qutip/tests, configfile: pytest.ini; plugins: rerunfailures-10.1; collected 0 items / 1 skipped ; ```; That issue seems to be addressed on the dev.major branch. Would it make sense to take the test file from there and use it in the master branch also?. Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1703
https://github.com/qutip/qutip/pull/1704:84,Deployability,install,installed,84,"Previously, all tests in `test_metrics.py` were skipped if cvxpy or cvxopt were not installed. Addresses part 1 of https://github.com/qutip/qutip/issues/1703. **Changelog**; Only skip the dnorm tests if cvxpy is not installed (previously all metrics tests were skipped).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1704
https://github.com/qutip/qutip/pull/1704:216,Deployability,install,installed,216,"Previously, all tests in `test_metrics.py` were skipped if cvxpy or cvxopt were not installed. Addresses part 1 of https://github.com/qutip/qutip/issues/1703. **Changelog**; Only skip the dnorm tests if cvxpy is not installed (previously all metrics tests were skipped).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1704
https://github.com/qutip/qutip/pull/1704:16,Testability,test,tests,16,"Previously, all tests in `test_metrics.py` were skipped if cvxpy or cvxopt were not installed. Addresses part 1 of https://github.com/qutip/qutip/issues/1703. **Changelog**; Only skip the dnorm tests if cvxpy is not installed (previously all metrics tests were skipped).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1704
https://github.com/qutip/qutip/pull/1704:194,Testability,test,tests,194,"Previously, all tests in `test_metrics.py` were skipped if cvxpy or cvxopt were not installed. Addresses part 1 of https://github.com/qutip/qutip/issues/1703. **Changelog**; Only skip the dnorm tests if cvxpy is not installed (previously all metrics tests were skipped).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1704
https://github.com/qutip/qutip/pull/1704:250,Testability,test,tests,250,"Previously, all tests in `test_metrics.py` were skipped if cvxpy or cvxopt were not installed. Addresses part 1 of https://github.com/qutip/qutip/issues/1703. **Changelog**; Only skip the dnorm tests if cvxpy is not installed (previously all metrics tests were skipped).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1704
https://github.com/qutip/qutip/issues/1705:187,Deployability,install,installations,187,"An issue has come when calculating eigenstates with the sparse = True option, which did not happen before. This issue has appeared in two different computers (both Linux), and with fresh installations of qutip. An example that illustrates the issue is:. import qutip as qt; A = qt.tensor(qt.sigmax(),qt.sigmay()); A.eigenstates(sparse = True, eigvals = 1). When this runs, the Kernel dies:. ![Screenshot from 2021-11-02 17-28-16](https://user-images.githubusercontent.com/48872344/139960518-9708a7f9-5f6f-4be3-a5f0-1db498736d9b.png). I'm not sure what the source of the issue is. I have used the sparse=True option many times before without any problem. Any suggestions are appreciated. This is the output of qutip.about() for one of the computers:. QuTiP: Quantum Toolbox in Python; -------------------------------------------------; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.2; Scipy Version: 1.7.1; Cython Version: 0.29.24; Matplotlib Version: 3.4.3; Python Version: 3.8.12; Number of CPUs: 8; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Linux (x86_64); Installation path: /home/shemian29/anaconda3/envs/Tokyo38/lib/python3.8/site-packages/qutip; -------------------------------------------------; Please cite QuTiP in your publication.; -------------------------------------------------; For your convenience a bibtex reference can be easily generated using `qutip.cite()`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1705
https://github.com/qutip/qutip/issues/1705:1505,Deployability,Install,Installed,1505,"An issue has come when calculating eigenstates with the sparse = True option, which did not happen before. This issue has appeared in two different computers (both Linux), and with fresh installations of qutip. An example that illustrates the issue is:. import qutip as qt; A = qt.tensor(qt.sigmax(),qt.sigmay()); A.eigenstates(sparse = True, eigvals = 1). When this runs, the Kernel dies:. ![Screenshot from 2021-11-02 17-28-16](https://user-images.githubusercontent.com/48872344/139960518-9708a7f9-5f6f-4be3-a5f0-1db498736d9b.png). I'm not sure what the source of the issue is. I have used the sparse=True option many times before without any problem. Any suggestions are appreciated. This is the output of qutip.about() for one of the computers:. QuTiP: Quantum Toolbox in Python; -------------------------------------------------; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.2; Scipy Version: 1.7.1; Cython Version: 0.29.24; Matplotlib Version: 3.4.3; Python Version: 3.8.12; Number of CPUs: 8; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Linux (x86_64); Installation path: /home/shemian29/anaconda3/envs/Tokyo38/lib/python3.8/site-packages/qutip; -------------------------------------------------; Please cite QuTiP in your publication.; -------------------------------------------------; For your convenience a bibtex reference can be easily generated using `qutip.cite()`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1705
https://github.com/qutip/qutip/issues/1705:1575,Deployability,Install,Installation,1575,"An issue has come when calculating eigenstates with the sparse = True option, which did not happen before. This issue has appeared in two different computers (both Linux), and with fresh installations of qutip. An example that illustrates the issue is:. import qutip as qt; A = qt.tensor(qt.sigmax(),qt.sigmay()); A.eigenstates(sparse = True, eigvals = 1). When this runs, the Kernel dies:. ![Screenshot from 2021-11-02 17-28-16](https://user-images.githubusercontent.com/48872344/139960518-9708a7f9-5f6f-4be3-a5f0-1db498736d9b.png). I'm not sure what the source of the issue is. I have used the sparse=True option many times before without any problem. Any suggestions are appreciated. This is the output of qutip.about() for one of the computers:. QuTiP: Quantum Toolbox in Python; -------------------------------------------------; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.21.2; Scipy Version: 1.7.1; Cython Version: 0.29.24; Matplotlib Version: 3.4.3; Python Version: 3.8.12; Number of CPUs: 8; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Linux (x86_64); Installation path: /home/shemian29/anaconda3/envs/Tokyo38/lib/python3.8/site-packages/qutip; -------------------------------------------------; Please cite QuTiP in your publication.; -------------------------------------------------; For your convenience a bibtex reference can be easily generated using `qutip.cite()`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1705
https://github.com/qutip/qutip/issues/1706:616,Safety,detect,detection,616,"**Describe the issue**. The ""Stochastic Solver"" page on the users guide currently have typos on equations and the text. Additionally, I believe the page could be improved by: ; - adding an example for qutip.smesolve;; - adding references for the equations discussed on the page (Chapter 4, Quantum Measurement and Control, from Wiseman and Milburn, for example);; - add links on the page for [this](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/smesolve-heterodyne.ipynb) and [this](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/smesolve-inefficient-detection.ipynb) tutorials. I would like to volunteer to make these changes.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1706
https://github.com/qutip/qutip/issues/1706:66,Usability,guid,guide,66,"**Describe the issue**. The ""Stochastic Solver"" page on the users guide currently have typos on equations and the text. Additionally, I believe the page could be improved by: ; - adding an example for qutip.smesolve;; - adding references for the equations discussed on the page (Chapter 4, Quantum Measurement and Control, from Wiseman and Milburn, for example);; - add links on the page for [this](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/smesolve-heterodyne.ipynb) and [this](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/smesolve-inefficient-detection.ipynb) tutorials. I would like to volunteer to make these changes.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1706
https://github.com/qutip/qutip/pull/1707:202,Safety,avoid,avoid,202,"**Description**; Hinton plots accept a `title` argument, but the code does not actually set the plot's title. Along with this fix, I also removed unused imports and fixed the other function's titles to avoid verbose such as. ```python; if title:; ax.set_title(title); ```; where the simple `ax.set_title(title)` does nothing when `title` is `None`. **Related issues or PRs**; No related issues or PRs. **Changelog**; Display a title for hinton and matrix_histogram plots when a title is given.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1707
https://github.com/qutip/qutip/pull/1707:283,Usability,simpl,simple,283,"**Description**; Hinton plots accept a `title` argument, but the code does not actually set the plot's title. Along with this fix, I also removed unused imports and fixed the other function's titles to avoid verbose such as. ```python; if title:; ax.set_title(title); ```; where the simple `ax.set_title(title)` does nothing when `title` is `None`. **Related issues or PRs**; No related issues or PRs. **Changelog**; Display a title for hinton and matrix_histogram plots when a title is given.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1707
https://github.com/qutip/qutip/pull/1708:269,Integrability,Depend,Depending,269,"A re-implementation of `qutip.metrics.process_fidelity`. ; The definition implemented here follows Gilchrist, Langford, Nielsen, Phys. Rev. A 71, 062310 (2005), https://journals.aps.org/pra/abstract/10.1103/PhysRevA.71.062310 (https://arxiv.org/abs/quant-ph/0408063).; Depending on how the quantum channels passed to `process_fidelity` are represented (unitary, supermatrix, choi, chi, or Kraus), computational shortcuts are used. They are all tested against each other. **Related issues or PRs**; Proposed in https://github.com/qutip/qutip/issues/1703. **Changelog**; Fixed implementation of qutip.metrics.process_fidelity and added tests",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1708
https://github.com/qutip/qutip/pull/1708:444,Testability,test,tested,444,"A re-implementation of `qutip.metrics.process_fidelity`. ; The definition implemented here follows Gilchrist, Langford, Nielsen, Phys. Rev. A 71, 062310 (2005), https://journals.aps.org/pra/abstract/10.1103/PhysRevA.71.062310 (https://arxiv.org/abs/quant-ph/0408063).; Depending on how the quantum channels passed to `process_fidelity` are represented (unitary, supermatrix, choi, chi, or Kraus), computational shortcuts are used. They are all tested against each other. **Related issues or PRs**; Proposed in https://github.com/qutip/qutip/issues/1703. **Changelog**; Fixed implementation of qutip.metrics.process_fidelity and added tests",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1708
https://github.com/qutip/qutip/pull/1708:634,Testability,test,tests,634,"A re-implementation of `qutip.metrics.process_fidelity`. ; The definition implemented here follows Gilchrist, Langford, Nielsen, Phys. Rev. A 71, 062310 (2005), https://journals.aps.org/pra/abstract/10.1103/PhysRevA.71.062310 (https://arxiv.org/abs/quant-ph/0408063).; Depending on how the quantum channels passed to `process_fidelity` are represented (unitary, supermatrix, choi, chi, or Kraus), computational shortcuts are used. They are all tested against each other. **Related issues or PRs**; Proposed in https://github.com/qutip/qutip/issues/1703. **Changelog**; Fixed implementation of qutip.metrics.process_fidelity and added tests",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1708
https://github.com/qutip/qutip/pull/1709:223,Availability,toler,tolerance,223,**Description**; I added the option to specify `rtol` in the tests. The default value is the same as for `numpy.testing.all_close` which was being used 'silently' (tests for the exponential pretty much ignored the absolute tolerance specified by us). I also made the tests more consistent. Now the assertion for scalar outputs also use `rtol` in the same way `numpy.testing.all_close` does. . **Related issues or PRs**; This is useful for qutip/qutip-tensorflow#34 where I plan to add support for complex64. **Changelog**; Aded rtol for specialisation tests.; Changed comparison of scalars to be consistent with `numpy.testing.all_close`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1709
https://github.com/qutip/qutip/pull/1709:61,Testability,test,tests,61,**Description**; I added the option to specify `rtol` in the tests. The default value is the same as for `numpy.testing.all_close` which was being used 'silently' (tests for the exponential pretty much ignored the absolute tolerance specified by us). I also made the tests more consistent. Now the assertion for scalar outputs also use `rtol` in the same way `numpy.testing.all_close` does. . **Related issues or PRs**; This is useful for qutip/qutip-tensorflow#34 where I plan to add support for complex64. **Changelog**; Aded rtol for specialisation tests.; Changed comparison of scalars to be consistent with `numpy.testing.all_close`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1709
https://github.com/qutip/qutip/pull/1709:112,Testability,test,testing,112,**Description**; I added the option to specify `rtol` in the tests. The default value is the same as for `numpy.testing.all_close` which was being used 'silently' (tests for the exponential pretty much ignored the absolute tolerance specified by us). I also made the tests more consistent. Now the assertion for scalar outputs also use `rtol` in the same way `numpy.testing.all_close` does. . **Related issues or PRs**; This is useful for qutip/qutip-tensorflow#34 where I plan to add support for complex64. **Changelog**; Aded rtol for specialisation tests.; Changed comparison of scalars to be consistent with `numpy.testing.all_close`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1709
https://github.com/qutip/qutip/pull/1709:164,Testability,test,tests,164,**Description**; I added the option to specify `rtol` in the tests. The default value is the same as for `numpy.testing.all_close` which was being used 'silently' (tests for the exponential pretty much ignored the absolute tolerance specified by us). I also made the tests more consistent. Now the assertion for scalar outputs also use `rtol` in the same way `numpy.testing.all_close` does. . **Related issues or PRs**; This is useful for qutip/qutip-tensorflow#34 where I plan to add support for complex64. **Changelog**; Aded rtol for specialisation tests.; Changed comparison of scalars to be consistent with `numpy.testing.all_close`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1709
https://github.com/qutip/qutip/pull/1709:267,Testability,test,tests,267,**Description**; I added the option to specify `rtol` in the tests. The default value is the same as for `numpy.testing.all_close` which was being used 'silently' (tests for the exponential pretty much ignored the absolute tolerance specified by us). I also made the tests more consistent. Now the assertion for scalar outputs also use `rtol` in the same way `numpy.testing.all_close` does. . **Related issues or PRs**; This is useful for qutip/qutip-tensorflow#34 where I plan to add support for complex64. **Changelog**; Aded rtol for specialisation tests.; Changed comparison of scalars to be consistent with `numpy.testing.all_close`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1709
https://github.com/qutip/qutip/pull/1709:298,Testability,assert,assertion,298,**Description**; I added the option to specify `rtol` in the tests. The default value is the same as for `numpy.testing.all_close` which was being used 'silently' (tests for the exponential pretty much ignored the absolute tolerance specified by us). I also made the tests more consistent. Now the assertion for scalar outputs also use `rtol` in the same way `numpy.testing.all_close` does. . **Related issues or PRs**; This is useful for qutip/qutip-tensorflow#34 where I plan to add support for complex64. **Changelog**; Aded rtol for specialisation tests.; Changed comparison of scalars to be consistent with `numpy.testing.all_close`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1709
https://github.com/qutip/qutip/pull/1709:366,Testability,test,testing,366,**Description**; I added the option to specify `rtol` in the tests. The default value is the same as for `numpy.testing.all_close` which was being used 'silently' (tests for the exponential pretty much ignored the absolute tolerance specified by us). I also made the tests more consistent. Now the assertion for scalar outputs also use `rtol` in the same way `numpy.testing.all_close` does. . **Related issues or PRs**; This is useful for qutip/qutip-tensorflow#34 where I plan to add support for complex64. **Changelog**; Aded rtol for specialisation tests.; Changed comparison of scalars to be consistent with `numpy.testing.all_close`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1709
https://github.com/qutip/qutip/pull/1709:552,Testability,test,tests,552,**Description**; I added the option to specify `rtol` in the tests. The default value is the same as for `numpy.testing.all_close` which was being used 'silently' (tests for the exponential pretty much ignored the absolute tolerance specified by us). I also made the tests more consistent. Now the assertion for scalar outputs also use `rtol` in the same way `numpy.testing.all_close` does. . **Related issues or PRs**; This is useful for qutip/qutip-tensorflow#34 where I plan to add support for complex64. **Changelog**; Aded rtol for specialisation tests.; Changed comparison of scalars to be consistent with `numpy.testing.all_close`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1709
https://github.com/qutip/qutip/pull/1709:619,Testability,test,testing,619,**Description**; I added the option to specify `rtol` in the tests. The default value is the same as for `numpy.testing.all_close` which was being used 'silently' (tests for the exponential pretty much ignored the absolute tolerance specified by us). I also made the tests more consistent. Now the assertion for scalar outputs also use `rtol` in the same way `numpy.testing.all_close` does. . **Related issues or PRs**; This is useful for qutip/qutip-tensorflow#34 where I plan to add support for complex64. **Changelog**; Aded rtol for specialisation tests.; Changed comparison of scalars to be consistent with `numpy.testing.all_close`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1709
https://github.com/qutip/qutip/pull/1710:234,Availability,redundant,redundant,234,"**Description**; Rewrite `mcsolve` using class as was done for `sesolve` and `mesolve` in #1700. This add new capacities to `mcsolve`:; - `measurement` and `photocurrent` are added to result making the `photocurrent_..solve` function redundant.; - The `H` input can be a super operator, allowing to do evolution with some collapse operator being treated democratically and some with discrete jumps (as was done in `photocurrent_mesolve`.; - Result are compiled at the end of each trajectories. Previously the result of each trajectories would be stored until the end of the map function, even if only the average are desired, making it quite memory inefficient, see #1667.; - New end condition are added. `mcsolve` can run for a desired number of trajectories, a desired time or the expectation values have converged within a desired tolerance (computed using jackknife re-sampling). ; - Stepping capacities have been added. However, collapse are not available this way, so it's still open to improvement. Other changes include reworking `MultitrajResults`, it was added in a previous PR but was not used. Also the 2 versions: trajectories stored or averaged are merged. **Related issues or PRs**; Follow up to #1700 . **Changelog**; Rewrite mcsolve with a class approach.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1710
https://github.com/qutip/qutip/pull/1710:834,Availability,toler,tolerance,834,"**Description**; Rewrite `mcsolve` using class as was done for `sesolve` and `mesolve` in #1700. This add new capacities to `mcsolve`:; - `measurement` and `photocurrent` are added to result making the `photocurrent_..solve` function redundant.; - The `H` input can be a super operator, allowing to do evolution with some collapse operator being treated democratically and some with discrete jumps (as was done in `photocurrent_mesolve`.; - Result are compiled at the end of each trajectories. Previously the result of each trajectories would be stored until the end of the map function, even if only the average are desired, making it quite memory inefficient, see #1667.; - New end condition are added. `mcsolve` can run for a desired number of trajectories, a desired time or the expectation values have converged within a desired tolerance (computed using jackknife re-sampling). ; - Stepping capacities have been added. However, collapse are not available this way, so it's still open to improvement. Other changes include reworking `MultitrajResults`, it was added in a previous PR but was not used. Also the 2 versions: trajectories stored or averaged are merged. **Related issues or PRs**; Follow up to #1700 . **Changelog**; Rewrite mcsolve with a class approach.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1710
https://github.com/qutip/qutip/pull/1710:951,Availability,avail,available,951,"**Description**; Rewrite `mcsolve` using class as was done for `sesolve` and `mesolve` in #1700. This add new capacities to `mcsolve`:; - `measurement` and `photocurrent` are added to result making the `photocurrent_..solve` function redundant.; - The `H` input can be a super operator, allowing to do evolution with some collapse operator being treated democratically and some with discrete jumps (as was done in `photocurrent_mesolve`.; - Result are compiled at the end of each trajectories. Previously the result of each trajectories would be stored until the end of the map function, even if only the average are desired, making it quite memory inefficient, see #1667.; - New end condition are added. `mcsolve` can run for a desired number of trajectories, a desired time or the expectation values have converged within a desired tolerance (computed using jackknife re-sampling). ; - Stepping capacities have been added. However, collapse are not available this way, so it's still open to improvement. Other changes include reworking `MultitrajResults`, it was added in a previous PR but was not used. Also the 2 versions: trajectories stored or averaged are merged. **Related issues or PRs**; Follow up to #1700 . **Changelog**; Rewrite mcsolve with a class approach.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1710
https://github.com/qutip/qutip/pull/1710:17,Modifiability,Rewrite,Rewrite,17,"**Description**; Rewrite `mcsolve` using class as was done for `sesolve` and `mesolve` in #1700. This add new capacities to `mcsolve`:; - `measurement` and `photocurrent` are added to result making the `photocurrent_..solve` function redundant.; - The `H` input can be a super operator, allowing to do evolution with some collapse operator being treated democratically and some with discrete jumps (as was done in `photocurrent_mesolve`.; - Result are compiled at the end of each trajectories. Previously the result of each trajectories would be stored until the end of the map function, even if only the average are desired, making it quite memory inefficient, see #1667.; - New end condition are added. `mcsolve` can run for a desired number of trajectories, a desired time or the expectation values have converged within a desired tolerance (computed using jackknife re-sampling). ; - Stepping capacities have been added. However, collapse are not available this way, so it's still open to improvement. Other changes include reworking `MultitrajResults`, it was added in a previous PR but was not used. Also the 2 versions: trajectories stored or averaged are merged. **Related issues or PRs**; Follow up to #1700 . **Changelog**; Rewrite mcsolve with a class approach.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1710
https://github.com/qutip/qutip/pull/1710:1234,Modifiability,Rewrite,Rewrite,1234,"**Description**; Rewrite `mcsolve` using class as was done for `sesolve` and `mesolve` in #1700. This add new capacities to `mcsolve`:; - `measurement` and `photocurrent` are added to result making the `photocurrent_..solve` function redundant.; - The `H` input can be a super operator, allowing to do evolution with some collapse operator being treated democratically and some with discrete jumps (as was done in `photocurrent_mesolve`.; - Result are compiled at the end of each trajectories. Previously the result of each trajectories would be stored until the end of the map function, even if only the average are desired, making it quite memory inefficient, see #1667.; - New end condition are added. `mcsolve` can run for a desired number of trajectories, a desired time or the expectation values have converged within a desired tolerance (computed using jackknife re-sampling). ; - Stepping capacities have been added. However, collapse are not available this way, so it's still open to improvement. Other changes include reworking `MultitrajResults`, it was added in a previous PR but was not used. Also the 2 versions: trajectories stored or averaged are merged. **Related issues or PRs**; Follow up to #1700 . **Changelog**; Rewrite mcsolve with a class approach.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1710
https://github.com/qutip/qutip/pull/1710:234,Safety,redund,redundant,234,"**Description**; Rewrite `mcsolve` using class as was done for `sesolve` and `mesolve` in #1700. This add new capacities to `mcsolve`:; - `measurement` and `photocurrent` are added to result making the `photocurrent_..solve` function redundant.; - The `H` input can be a super operator, allowing to do evolution with some collapse operator being treated democratically and some with discrete jumps (as was done in `photocurrent_mesolve`.; - Result are compiled at the end of each trajectories. Previously the result of each trajectories would be stored until the end of the map function, even if only the average are desired, making it quite memory inefficient, see #1667.; - New end condition are added. `mcsolve` can run for a desired number of trajectories, a desired time or the expectation values have converged within a desired tolerance (computed using jackknife re-sampling). ; - Stepping capacities have been added. However, collapse are not available this way, so it's still open to improvement. Other changes include reworking `MultitrajResults`, it was added in a previous PR but was not used. Also the 2 versions: trajectories stored or averaged are merged. **Related issues or PRs**; Follow up to #1700 . **Changelog**; Rewrite mcsolve with a class approach.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1710
https://github.com/qutip/qutip/issues/1711:3086,Availability,error,error,3086,"t cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),; qutip\qutip\parallel.py:234: in parallel_map; return [ar.get() for ar in async_res]; qutip\qutip\parallel.py:234: in <listcomp>; return [ar.get() for ar in async_res]; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <multiprocessing.pool.ApplyResult object at 0x000001E7390028B0>, timeout = None. def get(self, timeout=None):; self.wait(timeout); if not self.ready():; raise TimeoutError; if self._success:; return self._value; else:; > raise self._value; E ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. C:\ ... \Python\Python39\lib\multiprocessing\pool.py:771: ValueError; ----------------------------------------------------- Captured stdout call ------------------------------------------------------ . ```. **To Reproduce**; ```; import qutip.testing. inp = input(""Proceed with full test? [Y/N]: ""); if inp == ""y"" or inp == ""Y"":; qutip.testing.run(). print(""Process Complete!""); ```. System Information:; Windows 10; Python 3.9.6. The error: - incompatible Liouvillian and state dimensions; didn't seem like it was because of missing a requirement, so I'm posting this here. Also, as a side note, to reach 61% it took my system 4 hours, which doesn't sound right (I have a decent system with 8GB ram and core i5). Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1711
https://github.com/qutip/qutip/issues/1711:124,Deployability,install,install,124,"**Describe the issue**; Hi there! Actually, I'm new to QuTiP, so I'm not sure about this, but here's my issue. . I tried to install it from source by following the [documentation](https://qutip.org/docs/latest/installation.html#direct-setuptools-source-builds). ; After installing the build requirements, I ran the following command,; ```; qutip.testing.run() ; ```. At around 61%, the testPropHOSteadyPar test failed and gave the following report. ```; ______________________________________________________ testPropHOSteadyPar ______________________________________________________ ; multiprocessing.pool.RemoteTraceback:; """"""; Traceback (most recent call last):; File ""C:\ ... \Python\Python39\lib\multiprocessing\pool.py"", line 125, in worker; result = (True, func(*args, **kwds)); File ""c:\ ... \qutip\qutip\propagator.py"", line 279, in _parallel_mesolve ; output = mesolve(; File ""c:\ ... \qutip\qutip\mesolve.py"", line 237, in mesolve; func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); File ""c:\ ... \qutip\qutip\mesolve.py"", line 323, in _qobjevo_set; _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); File ""c:\ ... \qutip\qutip\mesolve.py"", line 304, in _test_liouvillian_dimensions; raise ValueError("""".join([; ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. The above exception was the direct cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1711
https://github.com/qutip/qutip/issues/1711:210,Deployability,install,installation,210,"**Describe the issue**; Hi there! Actually, I'm new to QuTiP, so I'm not sure about this, but here's my issue. . I tried to install it from source by following the [documentation](https://qutip.org/docs/latest/installation.html#direct-setuptools-source-builds). ; After installing the build requirements, I ran the following command,; ```; qutip.testing.run() ; ```. At around 61%, the testPropHOSteadyPar test failed and gave the following report. ```; ______________________________________________________ testPropHOSteadyPar ______________________________________________________ ; multiprocessing.pool.RemoteTraceback:; """"""; Traceback (most recent call last):; File ""C:\ ... \Python\Python39\lib\multiprocessing\pool.py"", line 125, in worker; result = (True, func(*args, **kwds)); File ""c:\ ... \qutip\qutip\propagator.py"", line 279, in _parallel_mesolve ; output = mesolve(; File ""c:\ ... \qutip\qutip\mesolve.py"", line 237, in mesolve; func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); File ""c:\ ... \qutip\qutip\mesolve.py"", line 323, in _qobjevo_set; _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); File ""c:\ ... \qutip\qutip\mesolve.py"", line 304, in _test_liouvillian_dimensions; raise ValueError("""".join([; ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. The above exception was the direct cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1711
https://github.com/qutip/qutip/issues/1711:270,Deployability,install,installing,270,"**Describe the issue**; Hi there! Actually, I'm new to QuTiP, so I'm not sure about this, but here's my issue. . I tried to install it from source by following the [documentation](https://qutip.org/docs/latest/installation.html#direct-setuptools-source-builds). ; After installing the build requirements, I ran the following command,; ```; qutip.testing.run() ; ```. At around 61%, the testPropHOSteadyPar test failed and gave the following report. ```; ______________________________________________________ testPropHOSteadyPar ______________________________________________________ ; multiprocessing.pool.RemoteTraceback:; """"""; Traceback (most recent call last):; File ""C:\ ... \Python\Python39\lib\multiprocessing\pool.py"", line 125, in worker; result = (True, func(*args, **kwds)); File ""c:\ ... \qutip\qutip\propagator.py"", line 279, in _parallel_mesolve ; output = mesolve(; File ""c:\ ... \qutip\qutip\mesolve.py"", line 237, in mesolve; func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); File ""c:\ ... \qutip\qutip\mesolve.py"", line 323, in _qobjevo_set; _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); File ""c:\ ... \qutip\qutip\mesolve.py"", line 304, in _test_liouvillian_dimensions; raise ValueError("""".join([; ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. The above exception was the direct cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1711
https://github.com/qutip/qutip/issues/1711:2374,Safety,timeout,timeout,2374,"as the direct cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),; qutip\qutip\parallel.py:234: in parallel_map; return [ar.get() for ar in async_res]; qutip\qutip\parallel.py:234: in <listcomp>; return [ar.get() for ar in async_res]; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <multiprocessing.pool.ApplyResult object at 0x000001E7390028B0>, timeout = None. def get(self, timeout=None):; self.wait(timeout); if not self.ready():; raise TimeoutError; if self._success:; return self._value; else:; > raise self._value; E ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. C:\ ... \Python\Python39\lib\multiprocessing\pool.py:771: ValueError; ----------------------------------------------------- Captured stdout call ------------------------------------------------------ . ```. **To Reproduce**; ```; import qutip.testing. inp = input(""Proceed with full test? [Y/N]: ""); if inp == ""y"" or inp == ""Y"":; qutip.testing.run(). print(""Process Complete!""); ```. System Information:; Windows 10; Python 3.9.6. The error: - incompatible Liouvillian and state dimensions; didn't seem like it was because of missing a requirement, so I'm posting this here. Also, as a side note, to reach 61% it took my system 4 hours, which doesn't sound right (I have a decent system with 8GB ram and core ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1711
https://github.com/qutip/qutip/issues/1711:2404,Safety,timeout,timeout,2404,"t cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),; qutip\qutip\parallel.py:234: in parallel_map; return [ar.get() for ar in async_res]; qutip\qutip\parallel.py:234: in <listcomp>; return [ar.get() for ar in async_res]; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <multiprocessing.pool.ApplyResult object at 0x000001E7390028B0>, timeout = None. def get(self, timeout=None):; self.wait(timeout); if not self.ready():; raise TimeoutError; if self._success:; return self._value; else:; > raise self._value; E ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. C:\ ... \Python\Python39\lib\multiprocessing\pool.py:771: ValueError; ----------------------------------------------------- Captured stdout call ------------------------------------------------------ . ```. **To Reproduce**; ```; import qutip.testing. inp = input(""Proceed with full test? [Y/N]: ""); if inp == ""y"" or inp == ""Y"":; qutip.testing.run(). print(""Process Complete!""); ```. System Information:; Windows 10; Python 3.9.6. The error: - incompatible Liouvillian and state dimensions; didn't seem like it was because of missing a requirement, so I'm posting this here. Also, as a side note, to reach 61% it took my system 4 hours, which doesn't sound right (I have a decent system with 8GB ram and core i5). Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1711
https://github.com/qutip/qutip/issues/1711:2430,Safety,timeout,timeout,2430,"t cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),; qutip\qutip\parallel.py:234: in parallel_map; return [ar.get() for ar in async_res]; qutip\qutip\parallel.py:234: in <listcomp>; return [ar.get() for ar in async_res]; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <multiprocessing.pool.ApplyResult object at 0x000001E7390028B0>, timeout = None. def get(self, timeout=None):; self.wait(timeout); if not self.ready():; raise TimeoutError; if self._success:; return self._value; else:; > raise self._value; E ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. C:\ ... \Python\Python39\lib\multiprocessing\pool.py:771: ValueError; ----------------------------------------------------- Captured stdout call ------------------------------------------------------ . ```. **To Reproduce**; ```; import qutip.testing. inp = input(""Proceed with full test? [Y/N]: ""); if inp == ""y"" or inp == ""Y"":; qutip.testing.run(). print(""Process Complete!""); ```. System Information:; Windows 10; Python 3.9.6. The error: - incompatible Liouvillian and state dimensions; didn't seem like it was because of missing a requirement, so I'm posting this here. Also, as a side note, to reach 61% it took my system 4 hours, which doesn't sound right (I have a decent system with 8GB ram and core i5). Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1711
https://github.com/qutip/qutip/issues/1711:2468,Safety,Timeout,TimeoutError,2468,"t cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),; qutip\qutip\parallel.py:234: in parallel_map; return [ar.get() for ar in async_res]; qutip\qutip\parallel.py:234: in <listcomp>; return [ar.get() for ar in async_res]; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <multiprocessing.pool.ApplyResult object at 0x000001E7390028B0>, timeout = None. def get(self, timeout=None):; self.wait(timeout); if not self.ready():; raise TimeoutError; if self._success:; return self._value; else:; > raise self._value; E ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. C:\ ... \Python\Python39\lib\multiprocessing\pool.py:771: ValueError; ----------------------------------------------------- Captured stdout call ------------------------------------------------------ . ```. **To Reproduce**; ```; import qutip.testing. inp = input(""Proceed with full test? [Y/N]: ""); if inp == ""y"" or inp == ""Y"":; qutip.testing.run(). print(""Process Complete!""); ```. System Information:; Windows 10; Python 3.9.6. The error: - incompatible Liouvillian and state dimensions; didn't seem like it was because of missing a requirement, so I'm posting this here. Also, as a side note, to reach 61% it took my system 4 hours, which doesn't sound right (I have a decent system with 8GB ram and core i5). Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1711
https://github.com/qutip/qutip/issues/1711:346,Testability,test,testing,346,"**Describe the issue**; Hi there! Actually, I'm new to QuTiP, so I'm not sure about this, but here's my issue. . I tried to install it from source by following the [documentation](https://qutip.org/docs/latest/installation.html#direct-setuptools-source-builds). ; After installing the build requirements, I ran the following command,; ```; qutip.testing.run() ; ```. At around 61%, the testPropHOSteadyPar test failed and gave the following report. ```; ______________________________________________________ testPropHOSteadyPar ______________________________________________________ ; multiprocessing.pool.RemoteTraceback:; """"""; Traceback (most recent call last):; File ""C:\ ... \Python\Python39\lib\multiprocessing\pool.py"", line 125, in worker; result = (True, func(*args, **kwds)); File ""c:\ ... \qutip\qutip\propagator.py"", line 279, in _parallel_mesolve ; output = mesolve(; File ""c:\ ... \qutip\qutip\mesolve.py"", line 237, in mesolve; func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); File ""c:\ ... \qutip\qutip\mesolve.py"", line 323, in _qobjevo_set; _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); File ""c:\ ... \qutip\qutip\mesolve.py"", line 304, in _test_liouvillian_dimensions; raise ValueError("""".join([; ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. The above exception was the direct cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1711
https://github.com/qutip/qutip/issues/1711:386,Testability,test,testPropHOSteadyPar,386,"**Describe the issue**; Hi there! Actually, I'm new to QuTiP, so I'm not sure about this, but here's my issue. . I tried to install it from source by following the [documentation](https://qutip.org/docs/latest/installation.html#direct-setuptools-source-builds). ; After installing the build requirements, I ran the following command,; ```; qutip.testing.run() ; ```. At around 61%, the testPropHOSteadyPar test failed and gave the following report. ```; ______________________________________________________ testPropHOSteadyPar ______________________________________________________ ; multiprocessing.pool.RemoteTraceback:; """"""; Traceback (most recent call last):; File ""C:\ ... \Python\Python39\lib\multiprocessing\pool.py"", line 125, in worker; result = (True, func(*args, **kwds)); File ""c:\ ... \qutip\qutip\propagator.py"", line 279, in _parallel_mesolve ; output = mesolve(; File ""c:\ ... \qutip\qutip\mesolve.py"", line 237, in mesolve; func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); File ""c:\ ... \qutip\qutip\mesolve.py"", line 323, in _qobjevo_set; _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); File ""c:\ ... \qutip\qutip\mesolve.py"", line 304, in _test_liouvillian_dimensions; raise ValueError("""".join([; ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. The above exception was the direct cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1711
https://github.com/qutip/qutip/issues/1711:406,Testability,test,test,406,"**Describe the issue**; Hi there! Actually, I'm new to QuTiP, so I'm not sure about this, but here's my issue. . I tried to install it from source by following the [documentation](https://qutip.org/docs/latest/installation.html#direct-setuptools-source-builds). ; After installing the build requirements, I ran the following command,; ```; qutip.testing.run() ; ```. At around 61%, the testPropHOSteadyPar test failed and gave the following report. ```; ______________________________________________________ testPropHOSteadyPar ______________________________________________________ ; multiprocessing.pool.RemoteTraceback:; """"""; Traceback (most recent call last):; File ""C:\ ... \Python\Python39\lib\multiprocessing\pool.py"", line 125, in worker; result = (True, func(*args, **kwds)); File ""c:\ ... \qutip\qutip\propagator.py"", line 279, in _parallel_mesolve ; output = mesolve(; File ""c:\ ... \qutip\qutip\mesolve.py"", line 237, in mesolve; func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); File ""c:\ ... \qutip\qutip\mesolve.py"", line 323, in _qobjevo_set; _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); File ""c:\ ... \qutip\qutip\mesolve.py"", line 304, in _test_liouvillian_dimensions; raise ValueError("""".join([; ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. The above exception was the direct cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1711
https://github.com/qutip/qutip/issues/1711:509,Testability,test,testPropHOSteadyPar,509,"**Describe the issue**; Hi there! Actually, I'm new to QuTiP, so I'm not sure about this, but here's my issue. . I tried to install it from source by following the [documentation](https://qutip.org/docs/latest/installation.html#direct-setuptools-source-builds). ; After installing the build requirements, I ran the following command,; ```; qutip.testing.run() ; ```. At around 61%, the testPropHOSteadyPar test failed and gave the following report. ```; ______________________________________________________ testPropHOSteadyPar ______________________________________________________ ; multiprocessing.pool.RemoteTraceback:; """"""; Traceback (most recent call last):; File ""C:\ ... \Python\Python39\lib\multiprocessing\pool.py"", line 125, in worker; result = (True, func(*args, **kwds)); File ""c:\ ... \qutip\qutip\propagator.py"", line 279, in _parallel_mesolve ; output = mesolve(; File ""c:\ ... \qutip\qutip\mesolve.py"", line 237, in mesolve; func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); File ""c:\ ... \qutip\qutip\mesolve.py"", line 323, in _qobjevo_set; _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); File ""c:\ ... \qutip\qutip\mesolve.py"", line 304, in _test_liouvillian_dimensions; raise ValueError("""".join([; ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. The above exception was the direct cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1711
https://github.com/qutip/qutip/issues/1711:1413,Testability,test,testPropHOSteadyPar,1413,"; ______________________________________________________ testPropHOSteadyPar ______________________________________________________ ; multiprocessing.pool.RemoteTraceback:; """"""; Traceback (most recent call last):; File ""C:\ ... \Python\Python39\lib\multiprocessing\pool.py"", line 125, in worker; result = (True, func(*args, **kwds)); File ""c:\ ... \qutip\qutip\propagator.py"", line 279, in _parallel_mesolve ; output = mesolve(; File ""c:\ ... \qutip\qutip\mesolve.py"", line 237, in mesolve; func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); File ""c:\ ... \qutip\qutip\mesolve.py"", line 323, in _qobjevo_set; _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); File ""c:\ ... \qutip\qutip\mesolve.py"", line 304, in _test_liouvillian_dimensions; raise ValueError("""".join([; ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. The above exception was the direct cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),; qutip\qutip\parallel.py:234: in parallel_map; return [ar.get() for ar in async_res]; qutip\qutip\parallel.py:234: in <listcomp>; return [ar.get() for ar in async_res]; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <multiprocessing.pool.ApplyResult object at 0x000001E7390028B0>, timeout = None. def get(self, timeout=None):; self.wait(timeout); if not self.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1711
https://github.com/qutip/qutip/issues/1711:1738,Testability,test,tests,1738,"rker; result = (True, func(*args, **kwds)); File ""c:\ ... \qutip\qutip\propagator.py"", line 279, in _parallel_mesolve ; output = mesolve(; File ""c:\ ... \qutip\qutip\mesolve.py"", line 237, in mesolve; func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); File ""c:\ ... \qutip\qutip\mesolve.py"", line 323, in _qobjevo_set; _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); File ""c:\ ... \qutip\qutip\mesolve.py"", line 304, in _test_liouvillian_dimensions; raise ValueError("""".join([; ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. The above exception was the direct cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),; qutip\qutip\parallel.py:234: in parallel_map; return [ar.get() for ar in async_res]; qutip\qutip\parallel.py:234: in <listcomp>; return [ar.get() for ar in async_res]; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <multiprocessing.pool.ApplyResult object at 0x000001E7390028B0>, timeout = None. def get(self, timeout=None):; self.wait(timeout); if not self.ready():; raise TimeoutError; if self._success:; return self._value; else:; > raise self._value; E ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. C:\ ... \Python\Python39\lib\multiprocessing\pool.py:771: ValueError; ----------------------",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1711
https://github.com/qutip/qutip/issues/1711:2894,Testability,test,testing,2894,"t cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),; qutip\qutip\parallel.py:234: in parallel_map; return [ar.get() for ar in async_res]; qutip\qutip\parallel.py:234: in <listcomp>; return [ar.get() for ar in async_res]; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <multiprocessing.pool.ApplyResult object at 0x000001E7390028B0>, timeout = None. def get(self, timeout=None):; self.wait(timeout); if not self.ready():; raise TimeoutError; if self._success:; return self._value; else:; > raise self._value; E ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. C:\ ... \Python\Python39\lib\multiprocessing\pool.py:771: ValueError; ----------------------------------------------------- Captured stdout call ------------------------------------------------------ . ```. **To Reproduce**; ```; import qutip.testing. inp = input(""Proceed with full test? [Y/N]: ""); if inp == ""y"" or inp == ""Y"":; qutip.testing.run(). print(""Process Complete!""); ```. System Information:; Windows 10; Python 3.9.6. The error: - incompatible Liouvillian and state dimensions; didn't seem like it was because of missing a requirement, so I'm posting this here. Also, as a side note, to reach 61% it took my system 4 hours, which doesn't sound right (I have a decent system with 8GB ram and core i5). Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1711
https://github.com/qutip/qutip/issues/1711:2934,Testability,test,test,2934,"t cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),; qutip\qutip\parallel.py:234: in parallel_map; return [ar.get() for ar in async_res]; qutip\qutip\parallel.py:234: in <listcomp>; return [ar.get() for ar in async_res]; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <multiprocessing.pool.ApplyResult object at 0x000001E7390028B0>, timeout = None. def get(self, timeout=None):; self.wait(timeout); if not self.ready():; raise TimeoutError; if self._success:; return self._value; else:; > raise self._value; E ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. C:\ ... \Python\Python39\lib\multiprocessing\pool.py:771: ValueError; ----------------------------------------------------- Captured stdout call ------------------------------------------------------ . ```. **To Reproduce**; ```; import qutip.testing. inp = input(""Proceed with full test? [Y/N]: ""); if inp == ""y"" or inp == ""Y"":; qutip.testing.run(). print(""Process Complete!""); ```. System Information:; Windows 10; Python 3.9.6. The error: - incompatible Liouvillian and state dimensions; didn't seem like it was because of missing a requirement, so I'm posting this here. Also, as a side note, to reach 61% it took my system 4 hours, which doesn't sound right (I have a decent system with 8GB ram and core i5). Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1711
https://github.com/qutip/qutip/issues/1711:2987,Testability,test,testing,2987,"t cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),; qutip\qutip\parallel.py:234: in parallel_map; return [ar.get() for ar in async_res]; qutip\qutip\parallel.py:234: in <listcomp>; return [ar.get() for ar in async_res]; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <multiprocessing.pool.ApplyResult object at 0x000001E7390028B0>, timeout = None. def get(self, timeout=None):; self.wait(timeout); if not self.ready():; raise TimeoutError; if self._success:; return self._value; else:; > raise self._value; E ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. C:\ ... \Python\Python39\lib\multiprocessing\pool.py:771: ValueError; ----------------------------------------------------- Captured stdout call ------------------------------------------------------ . ```. **To Reproduce**; ```; import qutip.testing. inp = input(""Proceed with full test? [Y/N]: ""); if inp == ""y"" or inp == ""Y"":; qutip.testing.run(). print(""Process Complete!""); ```. System Information:; Windows 10; Python 3.9.6. The error: - incompatible Liouvillian and state dimensions; didn't seem like it was because of missing a requirement, so I'm posting this here. Also, as a side note, to reach 61% it took my system 4 hours, which doesn't sound right (I have a decent system with 8GB ram and core i5). Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1711
https://github.com/qutip/qutip/pull/1712:535,Energy Efficiency,adapt,adapted,535,"**Description**; This PR implements and tests a new version of `process_fidelity`.; The new version follows the definition in Gilchrist et al., Physical Review A 71, 062310 (2005). **Related issues or PRs**; Discussion at https://github.com/qutip/qutip/issues/1703.; I previously submitted a similar PR at https://github.com/qutip/qutip/pull/1708, targeting `master`. ; This PR targets `dev.major` rather than `master` because existing functionality is changed, and contains improvements following @Ericgig 's suggestions. I have also adapted the tests to match the style of the tests in `dev.major`. Addresses part 2 of https://github.com/qutip/qutip/issues/1703. **Changelog**; Implement and test a new version of `process_fidelity` (https://github.com/qutip/qutip/issues/1703)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1712
https://github.com/qutip/qutip/pull/1712:535,Modifiability,adapt,adapted,535,"**Description**; This PR implements and tests a new version of `process_fidelity`.; The new version follows the definition in Gilchrist et al., Physical Review A 71, 062310 (2005). **Related issues or PRs**; Discussion at https://github.com/qutip/qutip/issues/1703.; I previously submitted a similar PR at https://github.com/qutip/qutip/pull/1708, targeting `master`. ; This PR targets `dev.major` rather than `master` because existing functionality is changed, and contains improvements following @Ericgig 's suggestions. I have also adapted the tests to match the style of the tests in `dev.major`. Addresses part 2 of https://github.com/qutip/qutip/issues/1703. **Changelog**; Implement and test a new version of `process_fidelity` (https://github.com/qutip/qutip/issues/1703)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1712
https://github.com/qutip/qutip/pull/1712:40,Testability,test,tests,40,"**Description**; This PR implements and tests a new version of `process_fidelity`.; The new version follows the definition in Gilchrist et al., Physical Review A 71, 062310 (2005). **Related issues or PRs**; Discussion at https://github.com/qutip/qutip/issues/1703.; I previously submitted a similar PR at https://github.com/qutip/qutip/pull/1708, targeting `master`. ; This PR targets `dev.major` rather than `master` because existing functionality is changed, and contains improvements following @Ericgig 's suggestions. I have also adapted the tests to match the style of the tests in `dev.major`. Addresses part 2 of https://github.com/qutip/qutip/issues/1703. **Changelog**; Implement and test a new version of `process_fidelity` (https://github.com/qutip/qutip/issues/1703)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1712
https://github.com/qutip/qutip/pull/1712:547,Testability,test,tests,547,"**Description**; This PR implements and tests a new version of `process_fidelity`.; The new version follows the definition in Gilchrist et al., Physical Review A 71, 062310 (2005). **Related issues or PRs**; Discussion at https://github.com/qutip/qutip/issues/1703.; I previously submitted a similar PR at https://github.com/qutip/qutip/pull/1708, targeting `master`. ; This PR targets `dev.major` rather than `master` because existing functionality is changed, and contains improvements following @Ericgig 's suggestions. I have also adapted the tests to match the style of the tests in `dev.major`. Addresses part 2 of https://github.com/qutip/qutip/issues/1703. **Changelog**; Implement and test a new version of `process_fidelity` (https://github.com/qutip/qutip/issues/1703)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1712
https://github.com/qutip/qutip/pull/1712:579,Testability,test,tests,579,"**Description**; This PR implements and tests a new version of `process_fidelity`.; The new version follows the definition in Gilchrist et al., Physical Review A 71, 062310 (2005). **Related issues or PRs**; Discussion at https://github.com/qutip/qutip/issues/1703.; I previously submitted a similar PR at https://github.com/qutip/qutip/pull/1708, targeting `master`. ; This PR targets `dev.major` rather than `master` because existing functionality is changed, and contains improvements following @Ericgig 's suggestions. I have also adapted the tests to match the style of the tests in `dev.major`. Addresses part 2 of https://github.com/qutip/qutip/issues/1703. **Changelog**; Implement and test a new version of `process_fidelity` (https://github.com/qutip/qutip/issues/1703)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1712
https://github.com/qutip/qutip/pull/1712:694,Testability,test,test,694,"**Description**; This PR implements and tests a new version of `process_fidelity`.; The new version follows the definition in Gilchrist et al., Physical Review A 71, 062310 (2005). **Related issues or PRs**; Discussion at https://github.com/qutip/qutip/issues/1703.; I previously submitted a similar PR at https://github.com/qutip/qutip/pull/1708, targeting `master`. ; This PR targets `dev.major` rather than `master` because existing functionality is changed, and contains improvements following @Ericgig 's suggestions. I have also adapted the tests to match the style of the tests in `dev.major`. Addresses part 2 of https://github.com/qutip/qutip/issues/1703. **Changelog**; Implement and test a new version of `process_fidelity` (https://github.com/qutip/qutip/issues/1703)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1712
https://github.com/qutip/qutip/issues/1714:345,Deployability,integrat,integrate,345,":eyes: Some source code analysis tools can help to find opportunities for improving software components.; :thought_balloon: I propose to [increase the usage of augmented assignment statements](https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements ""Augmented assignment statements"") accordingly. Would you like to integrate anything from a transformation result which can be generated by a command like the following?; (:point_right: Please check also for questionable change suggestions because of an evolving search pattern.); ```; lokal$ perl -p -i.orig -0777 -e 's/^(?<indentation>\s+)(?<target>\S+)\s*=\s*\k<target>[ \t]*(?<operator>[+\-%&|^@]|\*\*?|\/\/?|<<|>>)/$+{indentation}$+{target} $+{operator}=/gm' $(find ~/Projekte/QuTiP/lokal -name '*.py'); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1714
https://github.com/qutip/qutip/issues/1714:345,Integrability,integrat,integrate,345,":eyes: Some source code analysis tools can help to find opportunities for improving software components.; :thought_balloon: I propose to [increase the usage of augmented assignment statements](https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements ""Augmented assignment statements"") accordingly. Would you like to integrate anything from a transformation result which can be generated by a command like the following?; (:point_right: Please check also for questionable change suggestions because of an evolving search pattern.); ```; lokal$ perl -p -i.orig -0777 -e 's/^(?<indentation>\s+)(?<target>\S+)\s*=\s*\k<target>[ \t]*(?<operator>[+\-%&|^@]|\*\*?|\/\/?|<<|>>)/$+{indentation}$+{target} $+{operator}=/gm' $(find ~/Projekte/QuTiP/lokal -name '*.py'); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1714
https://github.com/qutip/qutip/pull/1715:55,Deployability,install,installation,55,**Changelog**; Added packaging to the requirements in `installation.rst`.; Update requirements.txt with the information in setup.cfg.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1715
https://github.com/qutip/qutip/pull/1715:75,Deployability,Update,Update,75,**Changelog**; Added packaging to the requirements in `installation.rst`.; Update requirements.txt with the information in setup.cfg.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1715
https://github.com/qutip/qutip/issues/1716:1540,Availability,error,error,1540,"args:; warnings.warn(""c_op_list argument name has been deprecated in favor of c_ops for consistency in the library. This will be remover in future versions."",; category=DeprecationWarning); c_ops = c_op_list; ```. To be honest, it looks like `kwargs` in `mesolve` should not be an option. It is only used to retrieve the `num_cpus` input from it. I would suggest deprecating it too and just add a new argument, `num_cpus` that is properly documented. . **To Reproduce**; ```python; a = qutip.destroy(10); H = a.dag() * a; c_ops = [a]; psi0 = qutip.coherent(10, 0.1); t_list = np.linspace(0, 25.0, 1001). # This works; result = qutip.mesolve(H, psi0, t_list, c_ops=c_ops, e_ops=[a]) . # This works and can be used to reproduce the above result. Note the kwarg is c_ops_list instead; # of c_ops as in mesolve.; U = qutip.propagator(H, t_list, c_op_list=c_ops). # This does not work as intended but it gets executed. That is because c_ops in interpreted as being part of kwargs. ; # The biggest issue is that no error is raised.; U1 = qutip.propagator(H, t_list, c_ops=c_ops); ```. **Expected behavior**; Functions in QuTiP should use the same name for the argument `c_ops`. **Your Environment**; ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0.dev0+5c73300; Numpy Version: 1.21.2; Scipy Version: 1.7.1; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.9.5; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Inf",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1716
https://github.com/qutip/qutip/issues/1716:2479,Deployability,Install,Installed,2479,"= np.linspace(0, 25.0, 1001). # This works; result = qutip.mesolve(H, psi0, t_list, c_ops=c_ops, e_ops=[a]) . # This works and can be used to reproduce the above result. Note the kwarg is c_ops_list instead; # of c_ops as in mesolve.; U = qutip.propagator(H, t_list, c_op_list=c_ops). # This does not work as intended but it gets executed. That is because c_ops in interpreted as being part of kwargs. ; # The biggest issue is that no error is raised.; U1 = qutip.propagator(H, t_list, c_ops=c_ops); ```. **Expected behavior**; Functions in QuTiP should use the same name for the argument `c_ops`. **Your Environment**; ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0.dev0+5c73300; Numpy Version: 1.21.2; Scipy Version: 1.7.1; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.9.5; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/kaladin/Documents/git/qutip/qutip4/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ```. **Additional context**; See https://groups.google.com/g/qutip/c/GPm8e702HN4 for the full discussion.; There may also be other functions in QuTiP that suffer from the same inconsistency problem.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1716
https://github.com/qutip/qutip/issues/1716:2550,Deployability,Install,Installation,2550,"= np.linspace(0, 25.0, 1001). # This works; result = qutip.mesolve(H, psi0, t_list, c_ops=c_ops, e_ops=[a]) . # This works and can be used to reproduce the above result. Note the kwarg is c_ops_list instead; # of c_ops as in mesolve.; U = qutip.propagator(H, t_list, c_op_list=c_ops). # This does not work as intended but it gets executed. That is because c_ops in interpreted as being part of kwargs. ; # The biggest issue is that no error is raised.; U1 = qutip.propagator(H, t_list, c_ops=c_ops); ```. **Expected behavior**; Functions in QuTiP should use the same name for the argument `c_ops`. **Your Environment**; ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0.dev0+5c73300; Numpy Version: 1.21.2; Scipy Version: 1.7.1; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.9.5; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/kaladin/Documents/git/qutip/qutip4/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ```. **Additional context**; See https://groups.google.com/g/qutip/c/GPm8e702HN4 for the full discussion.; There may also be other functions in QuTiP that suffer from the same inconsistency problem.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1716
https://github.com/qutip/qutip/issues/1720:155,Deployability,install,installed,155,"setup.cfg is configured with; ```; setup_requires =; numpy>=1.16.6,<1.20; ```; This means that qutip cannot (easily) be built when numpy 1.20 or higher is installed. The current stable release of numpy is 1.21. Can qutip be updated to run with current versions of numpy?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1720
https://github.com/qutip/qutip/issues/1720:185,Deployability,release,release,185,"setup.cfg is configured with; ```; setup_requires =; numpy>=1.16.6,<1.20; ```; This means that qutip cannot (easily) be built when numpy 1.20 or higher is installed. The current stable release of numpy is 1.21. Can qutip be updated to run with current versions of numpy?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1720
https://github.com/qutip/qutip/issues/1720:224,Deployability,update,updated,224,"setup.cfg is configured with; ```; setup_requires =; numpy>=1.16.6,<1.20; ```; This means that qutip cannot (easily) be built when numpy 1.20 or higher is installed. The current stable release of numpy is 1.21. Can qutip be updated to run with current versions of numpy?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1720
https://github.com/qutip/qutip/issues/1720:13,Modifiability,config,configured,13,"setup.cfg is configured with; ```; setup_requires =; numpy>=1.16.6,<1.20; ```; This means that qutip cannot (easily) be built when numpy 1.20 or higher is installed. The current stable release of numpy is 1.21. Can qutip be updated to run with current versions of numpy?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1720
https://github.com/qutip/qutip/issues/1721:73,Integrability,protocol,protocol,73,"**Describe the bug**; Tried to access the tutorial for the teleportation protocol (under quantum information processing). **To Reproduce**; [Qutip Tutorials](https://qutip.org/tutorials.html#quantum-information-processing). **Screenshots**; <img width=""418"" alt=""image"" src=""https://user-images.githubusercontent.com/62545147/142829630-60ac71b2-eb2e-41a8-b307-ad83ab0f681a.png"">. <br><br>. ![image](https://user-images.githubusercontent.com/62545147/142829702-1dee6e69-21ca-4dbc-a717-e74f9ef80cda.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1721
https://github.com/qutip/qutip/issues/1721:31,Security,access,access,31,"**Describe the bug**; Tried to access the tutorial for the teleportation protocol (under quantum information processing). **To Reproduce**; [Qutip Tutorials](https://qutip.org/tutorials.html#quantum-information-processing). **Screenshots**; <img width=""418"" alt=""image"" src=""https://user-images.githubusercontent.com/62545147/142829630-60ac71b2-eb2e-41a8-b307-ad83ab0f681a.png"">. <br><br>. ![image](https://user-images.githubusercontent.com/62545147/142829702-1dee6e69-21ca-4dbc-a717-e74f9ef80cda.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1721
https://github.com/qutip/qutip/issues/1722:1235,Integrability,depend,depending,1235,"**Is your feature request related to a problem? Please describe.**; The dimension argument of qutip operators are quite inconsistent in the **naming**, **type** and **description**. Here are a few examples picked from the [functions doc page](https://qutip.org/docs/latest/apidoc/functions.html):; - `basis` > `dimensions: int or list of ints` _Number of Fock states in Hilbert space. If a list, then the resultant object will be a tensor product over spaces with those dimensions._; - `enr_fock` > `dims: list` _A list of the dimensions of each subsystem of a composite quantum system._; - `enr_state_dictionaries` > `dims: list` _A list with the number of states in each sub-system._; - `phase_basis` > `N: int` _Number of basis vectors in Hilbert space._; - `projection` > `N: int` _Number of basis states in Hilbert space._; - `momentum` > `N: int` _Number of Fock states in Hilbert space._; - `num` > `N: int` _The dimension of the Hilbert space._; - `qeye` > `dimensions: (int) or (list of int) or (list of list of int)` _Dimension of Hilbert space. If provided as a list of ints, then the dimension is the product over this list, but the dims property of the new Qobj are set to this list. This can produce either oper or super depending on the passed dimensions._. Is there a reason for this apparent disorder? I'd be happy to propose a PR. **Describe the solution you'd like**; Harmonise the naming, type and description of the operators dimension argument. **Describe alternatives you've considered**; Even if not all operators are meant to work on composite Hilbert spaces, harmonising the naming and docstring would already be helpful. **Additional context**; Cc @francois-marie for indicating the issue.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1722
https://github.com/qutip/qutip/pull/1723:88,Testability,test,tests,88,"**Description**. Previously I was using (in qutip-tensorflow):; ```python; import qutip.tests.core.data.test_mathematics; import qutip.tests.core.data.test_reshape. class TestAdd_2(test_mathematic.TestAdd):; 	pass. class TestReshape_2(test_reshape.TestReshape):; 	pass; ```. This PR allows using instead:; ```python; import qutip.tests.core.data as testing. class TestAdd_2(testing.TestAdd):; 	pass. class TestReshape_2(testing.TestReshape):; 	pass; ```; which is more convenient, specially because there are multiple modules that need to be imported in this way. Importing the classes individually is not a valid option as it will run qutip's tests also in qutip-tensorflow. . **Related issues or PRs**; This is currently planned to be used in qutip/qutip-tensorflow#34.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1723
https://github.com/qutip/qutip/pull/1723:135,Testability,test,tests,135,"**Description**. Previously I was using (in qutip-tensorflow):; ```python; import qutip.tests.core.data.test_mathematics; import qutip.tests.core.data.test_reshape. class TestAdd_2(test_mathematic.TestAdd):; 	pass. class TestReshape_2(test_reshape.TestReshape):; 	pass; ```. This PR allows using instead:; ```python; import qutip.tests.core.data as testing. class TestAdd_2(testing.TestAdd):; 	pass. class TestReshape_2(testing.TestReshape):; 	pass; ```; which is more convenient, specially because there are multiple modules that need to be imported in this way. Importing the classes individually is not a valid option as it will run qutip's tests also in qutip-tensorflow. . **Related issues or PRs**; This is currently planned to be used in qutip/qutip-tensorflow#34.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1723
https://github.com/qutip/qutip/pull/1723:197,Testability,Test,TestAdd,197,"**Description**. Previously I was using (in qutip-tensorflow):; ```python; import qutip.tests.core.data.test_mathematics; import qutip.tests.core.data.test_reshape. class TestAdd_2(test_mathematic.TestAdd):; 	pass. class TestReshape_2(test_reshape.TestReshape):; 	pass; ```. This PR allows using instead:; ```python; import qutip.tests.core.data as testing. class TestAdd_2(testing.TestAdd):; 	pass. class TestReshape_2(testing.TestReshape):; 	pass; ```; which is more convenient, specially because there are multiple modules that need to be imported in this way. Importing the classes individually is not a valid option as it will run qutip's tests also in qutip-tensorflow. . **Related issues or PRs**; This is currently planned to be used in qutip/qutip-tensorflow#34.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1723
https://github.com/qutip/qutip/pull/1723:248,Testability,Test,TestReshape,248,"**Description**. Previously I was using (in qutip-tensorflow):; ```python; import qutip.tests.core.data.test_mathematics; import qutip.tests.core.data.test_reshape. class TestAdd_2(test_mathematic.TestAdd):; 	pass. class TestReshape_2(test_reshape.TestReshape):; 	pass; ```. This PR allows using instead:; ```python; import qutip.tests.core.data as testing. class TestAdd_2(testing.TestAdd):; 	pass. class TestReshape_2(testing.TestReshape):; 	pass; ```; which is more convenient, specially because there are multiple modules that need to be imported in this way. Importing the classes individually is not a valid option as it will run qutip's tests also in qutip-tensorflow. . **Related issues or PRs**; This is currently planned to be used in qutip/qutip-tensorflow#34.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1723
https://github.com/qutip/qutip/pull/1723:330,Testability,test,tests,330,"**Description**. Previously I was using (in qutip-tensorflow):; ```python; import qutip.tests.core.data.test_mathematics; import qutip.tests.core.data.test_reshape. class TestAdd_2(test_mathematic.TestAdd):; 	pass. class TestReshape_2(test_reshape.TestReshape):; 	pass; ```. This PR allows using instead:; ```python; import qutip.tests.core.data as testing. class TestAdd_2(testing.TestAdd):; 	pass. class TestReshape_2(testing.TestReshape):; 	pass; ```; which is more convenient, specially because there are multiple modules that need to be imported in this way. Importing the classes individually is not a valid option as it will run qutip's tests also in qutip-tensorflow. . **Related issues or PRs**; This is currently planned to be used in qutip/qutip-tensorflow#34.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1723
https://github.com/qutip/qutip/pull/1723:349,Testability,test,testing,349,"**Description**. Previously I was using (in qutip-tensorflow):; ```python; import qutip.tests.core.data.test_mathematics; import qutip.tests.core.data.test_reshape. class TestAdd_2(test_mathematic.TestAdd):; 	pass. class TestReshape_2(test_reshape.TestReshape):; 	pass; ```. This PR allows using instead:; ```python; import qutip.tests.core.data as testing. class TestAdd_2(testing.TestAdd):; 	pass. class TestReshape_2(testing.TestReshape):; 	pass; ```; which is more convenient, specially because there are multiple modules that need to be imported in this way. Importing the classes individually is not a valid option as it will run qutip's tests also in qutip-tensorflow. . **Related issues or PRs**; This is currently planned to be used in qutip/qutip-tensorflow#34.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1723
https://github.com/qutip/qutip/pull/1723:374,Testability,test,testing,374,"**Description**. Previously I was using (in qutip-tensorflow):; ```python; import qutip.tests.core.data.test_mathematics; import qutip.tests.core.data.test_reshape. class TestAdd_2(test_mathematic.TestAdd):; 	pass. class TestReshape_2(test_reshape.TestReshape):; 	pass; ```. This PR allows using instead:; ```python; import qutip.tests.core.data as testing. class TestAdd_2(testing.TestAdd):; 	pass. class TestReshape_2(testing.TestReshape):; 	pass; ```; which is more convenient, specially because there are multiple modules that need to be imported in this way. Importing the classes individually is not a valid option as it will run qutip's tests also in qutip-tensorflow. . **Related issues or PRs**; This is currently planned to be used in qutip/qutip-tensorflow#34.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1723
https://github.com/qutip/qutip/pull/1723:382,Testability,Test,TestAdd,382,"**Description**. Previously I was using (in qutip-tensorflow):; ```python; import qutip.tests.core.data.test_mathematics; import qutip.tests.core.data.test_reshape. class TestAdd_2(test_mathematic.TestAdd):; 	pass. class TestReshape_2(test_reshape.TestReshape):; 	pass; ```. This PR allows using instead:; ```python; import qutip.tests.core.data as testing. class TestAdd_2(testing.TestAdd):; 	pass. class TestReshape_2(testing.TestReshape):; 	pass; ```; which is more convenient, specially because there are multiple modules that need to be imported in this way. Importing the classes individually is not a valid option as it will run qutip's tests also in qutip-tensorflow. . **Related issues or PRs**; This is currently planned to be used in qutip/qutip-tensorflow#34.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1723
https://github.com/qutip/qutip/pull/1723:420,Testability,test,testing,420,"**Description**. Previously I was using (in qutip-tensorflow):; ```python; import qutip.tests.core.data.test_mathematics; import qutip.tests.core.data.test_reshape. class TestAdd_2(test_mathematic.TestAdd):; 	pass. class TestReshape_2(test_reshape.TestReshape):; 	pass; ```. This PR allows using instead:; ```python; import qutip.tests.core.data as testing. class TestAdd_2(testing.TestAdd):; 	pass. class TestReshape_2(testing.TestReshape):; 	pass; ```; which is more convenient, specially because there are multiple modules that need to be imported in this way. Importing the classes individually is not a valid option as it will run qutip's tests also in qutip-tensorflow. . **Related issues or PRs**; This is currently planned to be used in qutip/qutip-tensorflow#34.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1723
https://github.com/qutip/qutip/pull/1723:428,Testability,Test,TestReshape,428,"**Description**. Previously I was using (in qutip-tensorflow):; ```python; import qutip.tests.core.data.test_mathematics; import qutip.tests.core.data.test_reshape. class TestAdd_2(test_mathematic.TestAdd):; 	pass. class TestReshape_2(test_reshape.TestReshape):; 	pass; ```. This PR allows using instead:; ```python; import qutip.tests.core.data as testing. class TestAdd_2(testing.TestAdd):; 	pass. class TestReshape_2(testing.TestReshape):; 	pass; ```; which is more convenient, specially because there are multiple modules that need to be imported in this way. Importing the classes individually is not a valid option as it will run qutip's tests also in qutip-tensorflow. . **Related issues or PRs**; This is currently planned to be used in qutip/qutip-tensorflow#34.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1723
https://github.com/qutip/qutip/pull/1723:644,Testability,test,tests,644,"**Description**. Previously I was using (in qutip-tensorflow):; ```python; import qutip.tests.core.data.test_mathematics; import qutip.tests.core.data.test_reshape. class TestAdd_2(test_mathematic.TestAdd):; 	pass. class TestReshape_2(test_reshape.TestReshape):; 	pass; ```. This PR allows using instead:; ```python; import qutip.tests.core.data as testing. class TestAdd_2(testing.TestAdd):; 	pass. class TestReshape_2(testing.TestReshape):; 	pass; ```; which is more convenient, specially because there are multiple modules that need to be imported in this way. Importing the classes individually is not a valid option as it will run qutip's tests also in qutip-tensorflow. . **Related issues or PRs**; This is currently planned to be used in qutip/qutip-tensorflow#34.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1723
https://github.com/qutip/qutip/pull/1724:349,Availability,avail,available,349,"**Description**; This add documentation of the new BoFiN-based HEOM solver added in #1601. **Todo**; - [x] Rework the documentation structure.; - [x] Update the introduction; - [x] Update the bosonic example; - [x] Update the fermionic example; - [x] Add a short history of the HEOM implementation; - [x] Mention that the old HEOM implementation is available as `dl_heom`; - [x] Add a link to the HEOM notebooks.; - [x] Update `.run(..., ado_init=True)` to accept an instance of `HierarchyADOsState` since this is what `.run(..., ado_return=True)` returns. Add tests for `ado_init=True`. **Related PRs**; - #1601; - #1726. **Changelog**; Add and rework the HEOM documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1724
https://github.com/qutip/qutip/pull/1724:150,Deployability,Update,Update,150,"**Description**; This add documentation of the new BoFiN-based HEOM solver added in #1601. **Todo**; - [x] Rework the documentation structure.; - [x] Update the introduction; - [x] Update the bosonic example; - [x] Update the fermionic example; - [x] Add a short history of the HEOM implementation; - [x] Mention that the old HEOM implementation is available as `dl_heom`; - [x] Add a link to the HEOM notebooks.; - [x] Update `.run(..., ado_init=True)` to accept an instance of `HierarchyADOsState` since this is what `.run(..., ado_return=True)` returns. Add tests for `ado_init=True`. **Related PRs**; - #1601; - #1726. **Changelog**; Add and rework the HEOM documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1724
https://github.com/qutip/qutip/pull/1724:181,Deployability,Update,Update,181,"**Description**; This add documentation of the new BoFiN-based HEOM solver added in #1601. **Todo**; - [x] Rework the documentation structure.; - [x] Update the introduction; - [x] Update the bosonic example; - [x] Update the fermionic example; - [x] Add a short history of the HEOM implementation; - [x] Mention that the old HEOM implementation is available as `dl_heom`; - [x] Add a link to the HEOM notebooks.; - [x] Update `.run(..., ado_init=True)` to accept an instance of `HierarchyADOsState` since this is what `.run(..., ado_return=True)` returns. Add tests for `ado_init=True`. **Related PRs**; - #1601; - #1726. **Changelog**; Add and rework the HEOM documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1724
https://github.com/qutip/qutip/pull/1724:215,Deployability,Update,Update,215,"**Description**; This add documentation of the new BoFiN-based HEOM solver added in #1601. **Todo**; - [x] Rework the documentation structure.; - [x] Update the introduction; - [x] Update the bosonic example; - [x] Update the fermionic example; - [x] Add a short history of the HEOM implementation; - [x] Mention that the old HEOM implementation is available as `dl_heom`; - [x] Add a link to the HEOM notebooks.; - [x] Update `.run(..., ado_init=True)` to accept an instance of `HierarchyADOsState` since this is what `.run(..., ado_return=True)` returns. Add tests for `ado_init=True`. **Related PRs**; - #1601; - #1726. **Changelog**; Add and rework the HEOM documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1724
https://github.com/qutip/qutip/pull/1724:420,Deployability,Update,Update,420,"**Description**; This add documentation of the new BoFiN-based HEOM solver added in #1601. **Todo**; - [x] Rework the documentation structure.; - [x] Update the introduction; - [x] Update the bosonic example; - [x] Update the fermionic example; - [x] Add a short history of the HEOM implementation; - [x] Mention that the old HEOM implementation is available as `dl_heom`; - [x] Add a link to the HEOM notebooks.; - [x] Update `.run(..., ado_init=True)` to accept an instance of `HierarchyADOsState` since this is what `.run(..., ado_return=True)` returns. Add tests for `ado_init=True`. **Related PRs**; - #1601; - #1726. **Changelog**; Add and rework the HEOM documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1724
https://github.com/qutip/qutip/pull/1724:561,Testability,test,tests,561,"**Description**; This add documentation of the new BoFiN-based HEOM solver added in #1601. **Todo**; - [x] Rework the documentation structure.; - [x] Update the introduction; - [x] Update the bosonic example; - [x] Update the fermionic example; - [x] Add a short history of the HEOM implementation; - [x] Mention that the old HEOM implementation is available as `dl_heom`; - [x] Add a link to the HEOM notebooks.; - [x] Update `.run(..., ado_init=True)` to accept an instance of `HierarchyADOsState` since this is what `.run(..., ado_return=True)` returns. Add tests for `ado_init=True`. **Related PRs**; - #1601; - #1726. **Changelog**; Add and rework the HEOM documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1724
https://github.com/qutip/qutip/pull/1726:271,Testability,test,tests,271,**Description**; Add Matsubara and Padé expansion Lorentzian baths for the HEOM solver. **Todo**; - [x] Clean-up the Pade expansion code.; - [x] ~~Somehow get the Matsubara and Pade results for the current to match.~~ (These are not supposed to match!); - [x] Add solver tests for the Lorentzian baths.; - [x] Add bath tests for the Lorentzian baths.; - [x] Add tests for the DrudeLorentzPadeBath terminator.; - [x] Convert the slightly awkward terminator= argument for Drude-Lorentz baths to a terminator method. **Related issues or PRs**; * #1601; * #1724. **Changelog**; Add Matsubara and Padé expansion Lorentzian baths for the HEOM solver.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1726
https://github.com/qutip/qutip/pull/1726:319,Testability,test,tests,319,**Description**; Add Matsubara and Padé expansion Lorentzian baths for the HEOM solver. **Todo**; - [x] Clean-up the Pade expansion code.; - [x] ~~Somehow get the Matsubara and Pade results for the current to match.~~ (These are not supposed to match!); - [x] Add solver tests for the Lorentzian baths.; - [x] Add bath tests for the Lorentzian baths.; - [x] Add tests for the DrudeLorentzPadeBath terminator.; - [x] Convert the slightly awkward terminator= argument for Drude-Lorentz baths to a terminator method. **Related issues or PRs**; * #1601; * #1724. **Changelog**; Add Matsubara and Padé expansion Lorentzian baths for the HEOM solver.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1726
https://github.com/qutip/qutip/pull/1726:362,Testability,test,tests,362,**Description**; Add Matsubara and Padé expansion Lorentzian baths for the HEOM solver. **Todo**; - [x] Clean-up the Pade expansion code.; - [x] ~~Somehow get the Matsubara and Pade results for the current to match.~~ (These are not supposed to match!); - [x] Add solver tests for the Lorentzian baths.; - [x] Add bath tests for the Lorentzian baths.; - [x] Add tests for the DrudeLorentzPadeBath terminator.; - [x] Convert the slightly awkward terminator= argument for Drude-Lorentz baths to a terminator method. **Related issues or PRs**; * #1601; * #1724. **Changelog**; Add Matsubara and Padé expansion Lorentzian baths for the HEOM solver.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1726
https://github.com/qutip/qutip/pull/1728:17,Deployability,Update,Updated,17,"**Description**; Updated Issues templates (Bug Report, Feature Request, Others). **Related issues or PRs**; Fixes issue #1266. **Changelog**; Update the issue templates.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1728
https://github.com/qutip/qutip/pull/1728:142,Deployability,Update,Update,142,"**Description**; Updated Issues templates (Bug Report, Feature Request, Others). **Related issues or PRs**; Fixes issue #1266. **Changelog**; Update the issue templates.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1728
https://github.com/qutip/qutip/issues/1729:198,Modifiability,maintainab,maintainability,198,"**Is your feature request related to a problem? Please describe.**; I noticed that QuTiP got a C in the [Code Climate Report](https://codeclimate.com/github/qutip/qutip) in terms of readability and maintainability. Also, apart from the FIXMEs and the TODOs, there's many pep8 related issues (which can be fixed easily). I understand that this is not top priority stuff, but it might help in the long run. **Additional context**; For example, in the file `qutip/qip/compiler/cavityqedcompiler.py`, the functions ; `sqrtiswap_compiler` and `iswap_compiler` are very similar, and under sqrtiswap_compiler, it says to use iswap_compiler instead. In the same file `rz_compiler()` and `rx_compiler()` have the exact same code barring a string ""sz"" and ""sx"" which could be; passed as an argument.; [link to the report for this file](https://codeclimate.com/github/qutip/qutip/qutip/qip/compiler/cavityqedcompiler.py/source#issue-99d25ce9cdbd1dc34f5899352286755d)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1729
https://github.com/qutip/qutip/issues/1732:377,Availability,error,error,377,"### Bug Description. In a fresh conda environment with python 3.10, qutip installation from pip fails. It seems that this was due to people jumping to Python 3.10 too early https://github.com/numpy/numpy/issues/20039. Since October this issue is resolved and we can install Numpy from pip with Python 3.10. However, trying to install qutip with Python 3.10 still leads to this error. Even if I had Numpy (numpy==1.21.4) already installed, qutip tries to build Numpy again. I cannot install numpy 1.20.0 with Python 3.10 and so downgrading my Python to 3.9 is the only solution for now. @hodgestar @jakelishman We should try to find a fix for this ASAP . Any thoughts on this?. ### Code to Reproduce the Bug. ```shell; conda create -n py310 python=3.10; conda activate py310; pip install qutip; ```. ### Code Output. ```shell; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ```; ```. ### Expected Behaviour. Qutip should have got installed after installing the dependencies. ### Your Environment. ```shell; N/A.; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1732
https://github.com/qutip/qutip/issues/1732:527,Availability,down,downgrading,527,"### Bug Description. In a fresh conda environment with python 3.10, qutip installation from pip fails. It seems that this was due to people jumping to Python 3.10 too early https://github.com/numpy/numpy/issues/20039. Since October this issue is resolved and we can install Numpy from pip with Python 3.10. However, trying to install qutip with Python 3.10 still leads to this error. Even if I had Numpy (numpy==1.21.4) already installed, qutip tries to build Numpy again. I cannot install numpy 1.20.0 with Python 3.10 and so downgrading my Python to 3.9 is the only solution for now. @hodgestar @jakelishman We should try to find a fix for this ASAP . Any thoughts on this?. ### Code to Reproduce the Bug. ```shell; conda create -n py310 python=3.10; conda activate py310; pip install qutip; ```. ### Code Output. ```shell; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ```; ```. ### Expected Behaviour. Qutip should have got installed after installing the dependencies. ### Your Environment. ```shell; N/A.; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1732
https://github.com/qutip/qutip/issues/1732:826,Availability,ERROR,ERROR,826,"### Bug Description. In a fresh conda environment with python 3.10, qutip installation from pip fails. It seems that this was due to people jumping to Python 3.10 too early https://github.com/numpy/numpy/issues/20039. Since October this issue is resolved and we can install Numpy from pip with Python 3.10. However, trying to install qutip with Python 3.10 still leads to this error. Even if I had Numpy (numpy==1.21.4) already installed, qutip tries to build Numpy again. I cannot install numpy 1.20.0 with Python 3.10 and so downgrading my Python to 3.9 is the only solution for now. @hodgestar @jakelishman We should try to find a fix for this ASAP . Any thoughts on this?. ### Code to Reproduce the Bug. ```shell; conda create -n py310 python=3.10; conda activate py310; pip install qutip; ```. ### Code Output. ```shell; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ```; ```. ### Expected Behaviour. Qutip should have got installed after installing the dependencies. ### Your Environment. ```shell; N/A.; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1732
https://github.com/qutip/qutip/issues/1732:889,Availability,ERROR,ERROR,889,"### Bug Description. In a fresh conda environment with python 3.10, qutip installation from pip fails. It seems that this was due to people jumping to Python 3.10 too early https://github.com/numpy/numpy/issues/20039. Since October this issue is resolved and we can install Numpy from pip with Python 3.10. However, trying to install qutip with Python 3.10 still leads to this error. Even if I had Numpy (numpy==1.21.4) already installed, qutip tries to build Numpy again. I cannot install numpy 1.20.0 with Python 3.10 and so downgrading my Python to 3.9 is the only solution for now. @hodgestar @jakelishman We should try to find a fix for this ASAP . Any thoughts on this?. ### Code to Reproduce the Bug. ```shell; conda create -n py310 python=3.10; conda activate py310; pip install qutip; ```. ### Code Output. ```shell; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ```; ```. ### Expected Behaviour. Qutip should have got installed after installing the dependencies. ### Your Environment. ```shell; N/A.; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1732
https://github.com/qutip/qutip/issues/1732:74,Deployability,install,installation,74,"### Bug Description. In a fresh conda environment with python 3.10, qutip installation from pip fails. It seems that this was due to people jumping to Python 3.10 too early https://github.com/numpy/numpy/issues/20039. Since October this issue is resolved and we can install Numpy from pip with Python 3.10. However, trying to install qutip with Python 3.10 still leads to this error. Even if I had Numpy (numpy==1.21.4) already installed, qutip tries to build Numpy again. I cannot install numpy 1.20.0 with Python 3.10 and so downgrading my Python to 3.9 is the only solution for now. @hodgestar @jakelishman We should try to find a fix for this ASAP . Any thoughts on this?. ### Code to Reproduce the Bug. ```shell; conda create -n py310 python=3.10; conda activate py310; pip install qutip; ```. ### Code Output. ```shell; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ```; ```. ### Expected Behaviour. Qutip should have got installed after installing the dependencies. ### Your Environment. ```shell; N/A.; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1732
https://github.com/qutip/qutip/issues/1732:266,Deployability,install,install,266,"### Bug Description. In a fresh conda environment with python 3.10, qutip installation from pip fails. It seems that this was due to people jumping to Python 3.10 too early https://github.com/numpy/numpy/issues/20039. Since October this issue is resolved and we can install Numpy from pip with Python 3.10. However, trying to install qutip with Python 3.10 still leads to this error. Even if I had Numpy (numpy==1.21.4) already installed, qutip tries to build Numpy again. I cannot install numpy 1.20.0 with Python 3.10 and so downgrading my Python to 3.9 is the only solution for now. @hodgestar @jakelishman We should try to find a fix for this ASAP . Any thoughts on this?. ### Code to Reproduce the Bug. ```shell; conda create -n py310 python=3.10; conda activate py310; pip install qutip; ```. ### Code Output. ```shell; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ```; ```. ### Expected Behaviour. Qutip should have got installed after installing the dependencies. ### Your Environment. ```shell; N/A.; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1732
https://github.com/qutip/qutip/issues/1732:326,Deployability,install,install,326,"### Bug Description. In a fresh conda environment with python 3.10, qutip installation from pip fails. It seems that this was due to people jumping to Python 3.10 too early https://github.com/numpy/numpy/issues/20039. Since October this issue is resolved and we can install Numpy from pip with Python 3.10. However, trying to install qutip with Python 3.10 still leads to this error. Even if I had Numpy (numpy==1.21.4) already installed, qutip tries to build Numpy again. I cannot install numpy 1.20.0 with Python 3.10 and so downgrading my Python to 3.9 is the only solution for now. @hodgestar @jakelishman We should try to find a fix for this ASAP . Any thoughts on this?. ### Code to Reproduce the Bug. ```shell; conda create -n py310 python=3.10; conda activate py310; pip install qutip; ```. ### Code Output. ```shell; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ```; ```. ### Expected Behaviour. Qutip should have got installed after installing the dependencies. ### Your Environment. ```shell; N/A.; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1732
https://github.com/qutip/qutip/issues/1732:428,Deployability,install,installed,428,"### Bug Description. In a fresh conda environment with python 3.10, qutip installation from pip fails. It seems that this was due to people jumping to Python 3.10 too early https://github.com/numpy/numpy/issues/20039. Since October this issue is resolved and we can install Numpy from pip with Python 3.10. However, trying to install qutip with Python 3.10 still leads to this error. Even if I had Numpy (numpy==1.21.4) already installed, qutip tries to build Numpy again. I cannot install numpy 1.20.0 with Python 3.10 and so downgrading my Python to 3.9 is the only solution for now. @hodgestar @jakelishman We should try to find a fix for this ASAP . Any thoughts on this?. ### Code to Reproduce the Bug. ```shell; conda create -n py310 python=3.10; conda activate py310; pip install qutip; ```. ### Code Output. ```shell; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ```; ```. ### Expected Behaviour. Qutip should have got installed after installing the dependencies. ### Your Environment. ```shell; N/A.; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1732
https://github.com/qutip/qutip/issues/1732:482,Deployability,install,install,482,"### Bug Description. In a fresh conda environment with python 3.10, qutip installation from pip fails. It seems that this was due to people jumping to Python 3.10 too early https://github.com/numpy/numpy/issues/20039. Since October this issue is resolved and we can install Numpy from pip with Python 3.10. However, trying to install qutip with Python 3.10 still leads to this error. Even if I had Numpy (numpy==1.21.4) already installed, qutip tries to build Numpy again. I cannot install numpy 1.20.0 with Python 3.10 and so downgrading my Python to 3.9 is the only solution for now. @hodgestar @jakelishman We should try to find a fix for this ASAP . Any thoughts on this?. ### Code to Reproduce the Bug. ```shell; conda create -n py310 python=3.10; conda activate py310; pip install qutip; ```. ### Code Output. ```shell; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ```; ```. ### Expected Behaviour. Qutip should have got installed after installing the dependencies. ### Your Environment. ```shell; N/A.; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1732
https://github.com/qutip/qutip/issues/1732:779,Deployability,install,install,779,"### Bug Description. In a fresh conda environment with python 3.10, qutip installation from pip fails. It seems that this was due to people jumping to Python 3.10 too early https://github.com/numpy/numpy/issues/20039. Since October this issue is resolved and we can install Numpy from pip with Python 3.10. However, trying to install qutip with Python 3.10 still leads to this error. Even if I had Numpy (numpy==1.21.4) already installed, qutip tries to build Numpy again. I cannot install numpy 1.20.0 with Python 3.10 and so downgrading my Python to 3.9 is the only solution for now. @hodgestar @jakelishman We should try to find a fix for this ASAP . Any thoughts on this?. ### Code to Reproduce the Bug. ```shell; conda create -n py310 python=3.10; conda activate py310; pip install qutip; ```. ### Code Output. ```shell; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ```; ```. ### Expected Behaviour. Qutip should have got installed after installing the dependencies. ### Your Environment. ```shell; N/A.; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1732
https://github.com/qutip/qutip/issues/1732:951,Deployability,install,install,951,"### Bug Description. In a fresh conda environment with python 3.10, qutip installation from pip fails. It seems that this was due to people jumping to Python 3.10 too early https://github.com/numpy/numpy/issues/20039. Since October this issue is resolved and we can install Numpy from pip with Python 3.10. However, trying to install qutip with Python 3.10 still leads to this error. Even if I had Numpy (numpy==1.21.4) already installed, qutip tries to build Numpy again. I cannot install numpy 1.20.0 with Python 3.10 and so downgrading my Python to 3.9 is the only solution for now. @hodgestar @jakelishman We should try to find a fix for this ASAP . Any thoughts on this?. ### Code to Reproduce the Bug. ```shell; conda create -n py310 python=3.10; conda activate py310; pip install qutip; ```. ### Code Output. ```shell; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ```; ```. ### Expected Behaviour. Qutip should have got installed after installing the dependencies. ### Your Environment. ```shell; N/A.; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1732
https://github.com/qutip/qutip/issues/1732:1046,Deployability,install,installed,1046,"### Bug Description. In a fresh conda environment with python 3.10, qutip installation from pip fails. It seems that this was due to people jumping to Python 3.10 too early https://github.com/numpy/numpy/issues/20039. Since October this issue is resolved and we can install Numpy from pip with Python 3.10. However, trying to install qutip with Python 3.10 still leads to this error. Even if I had Numpy (numpy==1.21.4) already installed, qutip tries to build Numpy again. I cannot install numpy 1.20.0 with Python 3.10 and so downgrading my Python to 3.9 is the only solution for now. @hodgestar @jakelishman We should try to find a fix for this ASAP . Any thoughts on this?. ### Code to Reproduce the Bug. ```shell; conda create -n py310 python=3.10; conda activate py310; pip install qutip; ```. ### Code Output. ```shell; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ```; ```. ### Expected Behaviour. Qutip should have got installed after installing the dependencies. ### Your Environment. ```shell; N/A.; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1732
https://github.com/qutip/qutip/issues/1732:1062,Deployability,install,installing,1062,"### Bug Description. In a fresh conda environment with python 3.10, qutip installation from pip fails. It seems that this was due to people jumping to Python 3.10 too early https://github.com/numpy/numpy/issues/20039. Since October this issue is resolved and we can install Numpy from pip with Python 3.10. However, trying to install qutip with Python 3.10 still leads to this error. Even if I had Numpy (numpy==1.21.4) already installed, qutip tries to build Numpy again. I cannot install numpy 1.20.0 with Python 3.10 and so downgrading my Python to 3.9 is the only solution for now. @hodgestar @jakelishman We should try to find a fix for this ASAP . Any thoughts on this?. ### Code to Reproduce the Bug. ```shell; conda create -n py310 python=3.10; conda activate py310; pip install qutip; ```. ### Code Output. ```shell; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ```; ```. ### Expected Behaviour. Qutip should have got installed after installing the dependencies. ### Your Environment. ```shell; N/A.; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1732
https://github.com/qutip/qutip/issues/1732:1077,Integrability,depend,dependencies,1077,"### Bug Description. In a fresh conda environment with python 3.10, qutip installation from pip fails. It seems that this was due to people jumping to Python 3.10 too early https://github.com/numpy/numpy/issues/20039. Since October this issue is resolved and we can install Numpy from pip with Python 3.10. However, trying to install qutip with Python 3.10 still leads to this error. Even if I had Numpy (numpy==1.21.4) already installed, qutip tries to build Numpy again. I cannot install numpy 1.20.0 with Python 3.10 and so downgrading my Python to 3.9 is the only solution for now. @hodgestar @jakelishman We should try to find a fix for this ASAP . Any thoughts on this?. ### Code to Reproduce the Bug. ```shell; conda create -n py310 python=3.10; conda activate py310; pip install qutip; ```. ### Code Output. ```shell; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ```; ```. ### Expected Behaviour. Qutip should have got installed after installing the dependencies. ### Your Environment. ```shell; N/A.; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1732
https://github.com/qutip/qutip/issues/1733:335,Integrability,depend,dependent,335,"### Describe the Issue!. I am writing a code for a quantum thermal machine which includes both coherent and dissipative time evolutions in its different stages of operation. However, evolving the system with ""mesolve"" function of QuTiP (which uses either Adams or BDF methods) and Runge-Kutta gives different results. My code has time dependent Hamiltonians and collapse operators. For demonstration purposes I wrote a simple code which deals with the master equation of a time-dependent harmonic oscillator of mass and frequency equal to 1. The jump operator is the position operator times a time-dependent coefficient. . ```python; import numpy as np; import scipy as sp; from qutip import *; ; tend = 5; tvec = np.linspace(0,tend,1000); ω1 = 1 #initial frequency; ω2 = 2 #final frequency; gamma = 1 #dissipation rate; ; def omg_fun(t, args): #time-dependent frequency; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun(t, args): #time dependent collapse operator coefficient; return np.sqrt(gamma * np.exp(-t)); ; def omg_fun_rk(t): #time-dependent frequency for RK45; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun_rk(t): #time dependent collapse operator coefficient for RK45; return np.sqrt(gamma * np.exp(-t)); ; N=10; m = 1 #mass; ħ = 1; x = np.sqrt(ħ/(2*m*ω1))*(create(N)+destroy(N)) #position operator; p = 1j*np.sqrt((ħ*m*ω1)/2)*(create(N)-destroy(N)) #momentum operator; H = [(p**2)/(2*m), [(1/2)*m*x**2,omg_fun]]; c_ops = [[x,col_fun]]; rho_init = fock_dm(N,1); rhot_vec = mesolve(H,rho_init,tvec,c_ops); rhot_qutip = rhot_vec.states[-1]; ; #Right hand side of the master equation; def rhs(ρ,H,gamma,op):; c_op = np.sqrt(gamma)*op; res = -1j*(H*ρ - ρ*H)+(1/2)*(2*c_op*ρ*c_op.dag()-ρ*c_op.dag()*c_op-c_op*c_op.dag()*ρ); return res; ; #Runge-Kutta Solver; def rksolver(ρ,dt,H,gamma,op):; k1 = rhs(ρ,H,gamma,op); k2 = rhs(ρ+(dt/2)*k1,H,gamma,op); k3 = rhs(ρ+(dt/2)*k2,H,gamma,op); k4 = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1733
https://github.com/qutip/qutip/issues/1733:478,Integrability,depend,dependent,478,"### Describe the Issue!. I am writing a code for a quantum thermal machine which includes both coherent and dissipative time evolutions in its different stages of operation. However, evolving the system with ""mesolve"" function of QuTiP (which uses either Adams or BDF methods) and Runge-Kutta gives different results. My code has time dependent Hamiltonians and collapse operators. For demonstration purposes I wrote a simple code which deals with the master equation of a time-dependent harmonic oscillator of mass and frequency equal to 1. The jump operator is the position operator times a time-dependent coefficient. . ```python; import numpy as np; import scipy as sp; from qutip import *; ; tend = 5; tvec = np.linspace(0,tend,1000); ω1 = 1 #initial frequency; ω2 = 2 #final frequency; gamma = 1 #dissipation rate; ; def omg_fun(t, args): #time-dependent frequency; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun(t, args): #time dependent collapse operator coefficient; return np.sqrt(gamma * np.exp(-t)); ; def omg_fun_rk(t): #time-dependent frequency for RK45; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun_rk(t): #time dependent collapse operator coefficient for RK45; return np.sqrt(gamma * np.exp(-t)); ; N=10; m = 1 #mass; ħ = 1; x = np.sqrt(ħ/(2*m*ω1))*(create(N)+destroy(N)) #position operator; p = 1j*np.sqrt((ħ*m*ω1)/2)*(create(N)-destroy(N)) #momentum operator; H = [(p**2)/(2*m), [(1/2)*m*x**2,omg_fun]]; c_ops = [[x,col_fun]]; rho_init = fock_dm(N,1); rhot_vec = mesolve(H,rho_init,tvec,c_ops); rhot_qutip = rhot_vec.states[-1]; ; #Right hand side of the master equation; def rhs(ρ,H,gamma,op):; c_op = np.sqrt(gamma)*op; res = -1j*(H*ρ - ρ*H)+(1/2)*(2*c_op*ρ*c_op.dag()-ρ*c_op.dag()*c_op-c_op*c_op.dag()*ρ); return res; ; #Runge-Kutta Solver; def rksolver(ρ,dt,H,gamma,op):; k1 = rhs(ρ,H,gamma,op); k2 = rhs(ρ+(dt/2)*k1,H,gamma,op); k3 = rhs(ρ+(dt/2)*k2,H,gamma,op); k4 = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1733
https://github.com/qutip/qutip/issues/1733:598,Integrability,depend,dependent,598,"### Describe the Issue!. I am writing a code for a quantum thermal machine which includes both coherent and dissipative time evolutions in its different stages of operation. However, evolving the system with ""mesolve"" function of QuTiP (which uses either Adams or BDF methods) and Runge-Kutta gives different results. My code has time dependent Hamiltonians and collapse operators. For demonstration purposes I wrote a simple code which deals with the master equation of a time-dependent harmonic oscillator of mass and frequency equal to 1. The jump operator is the position operator times a time-dependent coefficient. . ```python; import numpy as np; import scipy as sp; from qutip import *; ; tend = 5; tvec = np.linspace(0,tend,1000); ω1 = 1 #initial frequency; ω2 = 2 #final frequency; gamma = 1 #dissipation rate; ; def omg_fun(t, args): #time-dependent frequency; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun(t, args): #time dependent collapse operator coefficient; return np.sqrt(gamma * np.exp(-t)); ; def omg_fun_rk(t): #time-dependent frequency for RK45; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun_rk(t): #time dependent collapse operator coefficient for RK45; return np.sqrt(gamma * np.exp(-t)); ; N=10; m = 1 #mass; ħ = 1; x = np.sqrt(ħ/(2*m*ω1))*(create(N)+destroy(N)) #position operator; p = 1j*np.sqrt((ħ*m*ω1)/2)*(create(N)-destroy(N)) #momentum operator; H = [(p**2)/(2*m), [(1/2)*m*x**2,omg_fun]]; c_ops = [[x,col_fun]]; rho_init = fock_dm(N,1); rhot_vec = mesolve(H,rho_init,tvec,c_ops); rhot_qutip = rhot_vec.states[-1]; ; #Right hand side of the master equation; def rhs(ρ,H,gamma,op):; c_op = np.sqrt(gamma)*op; res = -1j*(H*ρ - ρ*H)+(1/2)*(2*c_op*ρ*c_op.dag()-ρ*c_op.dag()*c_op-c_op*c_op.dag()*ρ); return res; ; #Runge-Kutta Solver; def rksolver(ρ,dt,H,gamma,op):; k1 = rhs(ρ,H,gamma,op); k2 = rhs(ρ+(dt/2)*k1,H,gamma,op); k3 = rhs(ρ+(dt/2)*k2,H,gamma,op); k4 = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1733
https://github.com/qutip/qutip/issues/1733:851,Integrability,depend,dependent,851,"### Describe the Issue!. I am writing a code for a quantum thermal machine which includes both coherent and dissipative time evolutions in its different stages of operation. However, evolving the system with ""mesolve"" function of QuTiP (which uses either Adams or BDF methods) and Runge-Kutta gives different results. My code has time dependent Hamiltonians and collapse operators. For demonstration purposes I wrote a simple code which deals with the master equation of a time-dependent harmonic oscillator of mass and frequency equal to 1. The jump operator is the position operator times a time-dependent coefficient. . ```python; import numpy as np; import scipy as sp; from qutip import *; ; tend = 5; tvec = np.linspace(0,tend,1000); ω1 = 1 #initial frequency; ω2 = 2 #final frequency; gamma = 1 #dissipation rate; ; def omg_fun(t, args): #time-dependent frequency; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun(t, args): #time dependent collapse operator coefficient; return np.sqrt(gamma * np.exp(-t)); ; def omg_fun_rk(t): #time-dependent frequency for RK45; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun_rk(t): #time dependent collapse operator coefficient for RK45; return np.sqrt(gamma * np.exp(-t)); ; N=10; m = 1 #mass; ħ = 1; x = np.sqrt(ħ/(2*m*ω1))*(create(N)+destroy(N)) #position operator; p = 1j*np.sqrt((ħ*m*ω1)/2)*(create(N)-destroy(N)) #momentum operator; H = [(p**2)/(2*m), [(1/2)*m*x**2,omg_fun]]; c_ops = [[x,col_fun]]; rho_init = fock_dm(N,1); rhot_vec = mesolve(H,rho_init,tvec,c_ops); rhot_qutip = rhot_vec.states[-1]; ; #Right hand side of the master equation; def rhs(ρ,H,gamma,op):; c_op = np.sqrt(gamma)*op; res = -1j*(H*ρ - ρ*H)+(1/2)*(2*c_op*ρ*c_op.dag()-ρ*c_op.dag()*c_op-c_op*c_op.dag()*ρ); return res; ; #Runge-Kutta Solver; def rksolver(ρ,dt,H,gamma,op):; k1 = rhs(ρ,H,gamma,op); k2 = rhs(ρ+(dt/2)*k1,H,gamma,op); k3 = rhs(ρ+(dt/2)*k2,H,gamma,op); k4 = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1733
https://github.com/qutip/qutip/issues/1733:989,Integrability,depend,dependent,989,"### Describe the Issue!. I am writing a code for a quantum thermal machine which includes both coherent and dissipative time evolutions in its different stages of operation. However, evolving the system with ""mesolve"" function of QuTiP (which uses either Adams or BDF methods) and Runge-Kutta gives different results. My code has time dependent Hamiltonians and collapse operators. For demonstration purposes I wrote a simple code which deals with the master equation of a time-dependent harmonic oscillator of mass and frequency equal to 1. The jump operator is the position operator times a time-dependent coefficient. . ```python; import numpy as np; import scipy as sp; from qutip import *; ; tend = 5; tvec = np.linspace(0,tend,1000); ω1 = 1 #initial frequency; ω2 = 2 #final frequency; gamma = 1 #dissipation rate; ; def omg_fun(t, args): #time-dependent frequency; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun(t, args): #time dependent collapse operator coefficient; return np.sqrt(gamma * np.exp(-t)); ; def omg_fun_rk(t): #time-dependent frequency for RK45; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun_rk(t): #time dependent collapse operator coefficient for RK45; return np.sqrt(gamma * np.exp(-t)); ; N=10; m = 1 #mass; ħ = 1; x = np.sqrt(ħ/(2*m*ω1))*(create(N)+destroy(N)) #position operator; p = 1j*np.sqrt((ħ*m*ω1)/2)*(create(N)-destroy(N)) #momentum operator; H = [(p**2)/(2*m), [(1/2)*m*x**2,omg_fun]]; c_ops = [[x,col_fun]]; rho_init = fock_dm(N,1); rhot_vec = mesolve(H,rho_init,tvec,c_ops); rhot_qutip = rhot_vec.states[-1]; ; #Right hand side of the master equation; def rhs(ρ,H,gamma,op):; c_op = np.sqrt(gamma)*op; res = -1j*(H*ρ - ρ*H)+(1/2)*(2*c_op*ρ*c_op.dag()-ρ*c_op.dag()*c_op-c_op*c_op.dag()*ρ); return res; ; #Runge-Kutta Solver; def rksolver(ρ,dt,H,gamma,op):; k1 = rhs(ρ,H,gamma,op); k2 = rhs(ρ+(dt/2)*k1,H,gamma,op); k3 = rhs(ρ+(dt/2)*k2,H,gamma,op); k4 = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1733
https://github.com/qutip/qutip/issues/1733:1093,Integrability,depend,dependent,1093,"wever, evolving the system with ""mesolve"" function of QuTiP (which uses either Adams or BDF methods) and Runge-Kutta gives different results. My code has time dependent Hamiltonians and collapse operators. For demonstration purposes I wrote a simple code which deals with the master equation of a time-dependent harmonic oscillator of mass and frequency equal to 1. The jump operator is the position operator times a time-dependent coefficient. . ```python; import numpy as np; import scipy as sp; from qutip import *; ; tend = 5; tvec = np.linspace(0,tend,1000); ω1 = 1 #initial frequency; ω2 = 2 #final frequency; gamma = 1 #dissipation rate; ; def omg_fun(t, args): #time-dependent frequency; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun(t, args): #time dependent collapse operator coefficient; return np.sqrt(gamma * np.exp(-t)); ; def omg_fun_rk(t): #time-dependent frequency for RK45; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun_rk(t): #time dependent collapse operator coefficient for RK45; return np.sqrt(gamma * np.exp(-t)); ; N=10; m = 1 #mass; ħ = 1; x = np.sqrt(ħ/(2*m*ω1))*(create(N)+destroy(N)) #position operator; p = 1j*np.sqrt((ħ*m*ω1)/2)*(create(N)-destroy(N)) #momentum operator; H = [(p**2)/(2*m), [(1/2)*m*x**2,omg_fun]]; c_ops = [[x,col_fun]]; rho_init = fock_dm(N,1); rhot_vec = mesolve(H,rho_init,tvec,c_ops); rhot_qutip = rhot_vec.states[-1]; ; #Right hand side of the master equation; def rhs(ρ,H,gamma,op):; c_op = np.sqrt(gamma)*op; res = -1j*(H*ρ - ρ*H)+(1/2)*(2*c_op*ρ*c_op.dag()-ρ*c_op.dag()*c_op-c_op*c_op.dag()*ρ); return res; ; #Runge-Kutta Solver; def rksolver(ρ,dt,H,gamma,op):; k1 = rhs(ρ,H,gamma,op); k2 = rhs(ρ+(dt/2)*k1,H,gamma,op); k3 = rhs(ρ+(dt/2)*k2,H,gamma,op); k4 = rhs(ρ+dt*k3,H,gamma,op); rho = ρ+dt*(k1+2*k2+2*k3+k4)/6; return rho; ; dt = tvec[1]-tvec[0]; for i in range(len(tvec)):; H_rk = (p**2)/(2*m) + (1/2)*m*x**2*omg_fun_rk(tvec[i]);",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1733
https://github.com/qutip/qutip/issues/1733:1237,Integrability,depend,dependent,1237,"wever, evolving the system with ""mesolve"" function of QuTiP (which uses either Adams or BDF methods) and Runge-Kutta gives different results. My code has time dependent Hamiltonians and collapse operators. For demonstration purposes I wrote a simple code which deals with the master equation of a time-dependent harmonic oscillator of mass and frequency equal to 1. The jump operator is the position operator times a time-dependent coefficient. . ```python; import numpy as np; import scipy as sp; from qutip import *; ; tend = 5; tvec = np.linspace(0,tend,1000); ω1 = 1 #initial frequency; ω2 = 2 #final frequency; gamma = 1 #dissipation rate; ; def omg_fun(t, args): #time-dependent frequency; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun(t, args): #time dependent collapse operator coefficient; return np.sqrt(gamma * np.exp(-t)); ; def omg_fun_rk(t): #time-dependent frequency for RK45; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun_rk(t): #time dependent collapse operator coefficient for RK45; return np.sqrt(gamma * np.exp(-t)); ; N=10; m = 1 #mass; ħ = 1; x = np.sqrt(ħ/(2*m*ω1))*(create(N)+destroy(N)) #position operator; p = 1j*np.sqrt((ħ*m*ω1)/2)*(create(N)-destroy(N)) #momentum operator; H = [(p**2)/(2*m), [(1/2)*m*x**2,omg_fun]]; c_ops = [[x,col_fun]]; rho_init = fock_dm(N,1); rhot_vec = mesolve(H,rho_init,tvec,c_ops); rhot_qutip = rhot_vec.states[-1]; ; #Right hand side of the master equation; def rhs(ρ,H,gamma,op):; c_op = np.sqrt(gamma)*op; res = -1j*(H*ρ - ρ*H)+(1/2)*(2*c_op*ρ*c_op.dag()-ρ*c_op.dag()*c_op-c_op*c_op.dag()*ρ); return res; ; #Runge-Kutta Solver; def rksolver(ρ,dt,H,gamma,op):; k1 = rhs(ρ,H,gamma,op); k2 = rhs(ρ+(dt/2)*k1,H,gamma,op); k3 = rhs(ρ+(dt/2)*k2,H,gamma,op); k4 = rhs(ρ+dt*k3,H,gamma,op); rho = ρ+dt*(k1+2*k2+2*k3+k4)/6; return rho; ; dt = tvec[1]-tvec[0]; for i in range(len(tvec)):; H_rk = (p**2)/(2*m) + (1/2)*m*x**2*omg_fun_rk(tvec[i]);",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1733
https://github.com/qutip/qutip/issues/1733:2525,Integrability,depend,dependent-systems,2525,"_t; ; def col_fun(t, args): #time dependent collapse operator coefficient; return np.sqrt(gamma * np.exp(-t)); ; def omg_fun_rk(t): #time-dependent frequency for RK45; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun_rk(t): #time dependent collapse operator coefficient for RK45; return np.sqrt(gamma * np.exp(-t)); ; N=10; m = 1 #mass; ħ = 1; x = np.sqrt(ħ/(2*m*ω1))*(create(N)+destroy(N)) #position operator; p = 1j*np.sqrt((ħ*m*ω1)/2)*(create(N)-destroy(N)) #momentum operator; H = [(p**2)/(2*m), [(1/2)*m*x**2,omg_fun]]; c_ops = [[x,col_fun]]; rho_init = fock_dm(N,1); rhot_vec = mesolve(H,rho_init,tvec,c_ops); rhot_qutip = rhot_vec.states[-1]; ; #Right hand side of the master equation; def rhs(ρ,H,gamma,op):; c_op = np.sqrt(gamma)*op; res = -1j*(H*ρ - ρ*H)+(1/2)*(2*c_op*ρ*c_op.dag()-ρ*c_op.dag()*c_op-c_op*c_op.dag()*ρ); return res; ; #Runge-Kutta Solver; def rksolver(ρ,dt,H,gamma,op):; k1 = rhs(ρ,H,gamma,op); k2 = rhs(ρ+(dt/2)*k1,H,gamma,op); k3 = rhs(ρ+(dt/2)*k2,H,gamma,op); k4 = rhs(ρ+dt*k3,H,gamma,op); rho = ρ+dt*(k1+2*k2+2*k3+k4)/6; return rho; ; dt = tvec[1]-tvec[0]; for i in range(len(tvec)):; H_rk = (p**2)/(2*m) + (1/2)*m*x**2*omg_fun_rk(tvec[i]); gamma_rk = col_fun_rk(tvec[i]); rhot_rk = rksolver(rho_init,dt,H_rk,gamma_rk,x); rho_init = rhot_rk; ```. The fidelity of the final density matrices for these two methods is 0.9312276926316011. This question is also asked [here](https://quantumcomputing.stackexchange.com/questions/22187/qutip-vs-rk45-which-one-gives-the-correct-results-for-time-dependent-systems) and the final density matrices using these two approaches are shown. Basically the density matrices are not close enough. So the question is, which one is correct and why these two methods are giving different results?. Note: For time-independent problems and for time-dependent but coherent evolution the results agree pretty well. However for the case of time-dependent Hamiltonian and dissipation they don't.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1733
https://github.com/qutip/qutip/issues/1733:2813,Integrability,depend,dependent,2813,"_t; ; def col_fun(t, args): #time dependent collapse operator coefficient; return np.sqrt(gamma * np.exp(-t)); ; def omg_fun_rk(t): #time-dependent frequency for RK45; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun_rk(t): #time dependent collapse operator coefficient for RK45; return np.sqrt(gamma * np.exp(-t)); ; N=10; m = 1 #mass; ħ = 1; x = np.sqrt(ħ/(2*m*ω1))*(create(N)+destroy(N)) #position operator; p = 1j*np.sqrt((ħ*m*ω1)/2)*(create(N)-destroy(N)) #momentum operator; H = [(p**2)/(2*m), [(1/2)*m*x**2,omg_fun]]; c_ops = [[x,col_fun]]; rho_init = fock_dm(N,1); rhot_vec = mesolve(H,rho_init,tvec,c_ops); rhot_qutip = rhot_vec.states[-1]; ; #Right hand side of the master equation; def rhs(ρ,H,gamma,op):; c_op = np.sqrt(gamma)*op; res = -1j*(H*ρ - ρ*H)+(1/2)*(2*c_op*ρ*c_op.dag()-ρ*c_op.dag()*c_op-c_op*c_op.dag()*ρ); return res; ; #Runge-Kutta Solver; def rksolver(ρ,dt,H,gamma,op):; k1 = rhs(ρ,H,gamma,op); k2 = rhs(ρ+(dt/2)*k1,H,gamma,op); k3 = rhs(ρ+(dt/2)*k2,H,gamma,op); k4 = rhs(ρ+dt*k3,H,gamma,op); rho = ρ+dt*(k1+2*k2+2*k3+k4)/6; return rho; ; dt = tvec[1]-tvec[0]; for i in range(len(tvec)):; H_rk = (p**2)/(2*m) + (1/2)*m*x**2*omg_fun_rk(tvec[i]); gamma_rk = col_fun_rk(tvec[i]); rhot_rk = rksolver(rho_init,dt,H_rk,gamma_rk,x); rho_init = rhot_rk; ```. The fidelity of the final density matrices for these two methods is 0.9312276926316011. This question is also asked [here](https://quantumcomputing.stackexchange.com/questions/22187/qutip-vs-rk45-which-one-gives-the-correct-results-for-time-dependent-systems) and the final density matrices using these two approaches are shown. Basically the density matrices are not close enough. So the question is, which one is correct and why these two methods are giving different results?. Note: For time-independent problems and for time-dependent but coherent evolution the results agree pretty well. However for the case of time-dependent Hamiltonian and dissipation they don't.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1733
https://github.com/qutip/qutip/issues/1733:2906,Integrability,depend,dependent,2906,"_t; ; def col_fun(t, args): #time dependent collapse operator coefficient; return np.sqrt(gamma * np.exp(-t)); ; def omg_fun_rk(t): #time-dependent frequency for RK45; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun_rk(t): #time dependent collapse operator coefficient for RK45; return np.sqrt(gamma * np.exp(-t)); ; N=10; m = 1 #mass; ħ = 1; x = np.sqrt(ħ/(2*m*ω1))*(create(N)+destroy(N)) #position operator; p = 1j*np.sqrt((ħ*m*ω1)/2)*(create(N)-destroy(N)) #momentum operator; H = [(p**2)/(2*m), [(1/2)*m*x**2,omg_fun]]; c_ops = [[x,col_fun]]; rho_init = fock_dm(N,1); rhot_vec = mesolve(H,rho_init,tvec,c_ops); rhot_qutip = rhot_vec.states[-1]; ; #Right hand side of the master equation; def rhs(ρ,H,gamma,op):; c_op = np.sqrt(gamma)*op; res = -1j*(H*ρ - ρ*H)+(1/2)*(2*c_op*ρ*c_op.dag()-ρ*c_op.dag()*c_op-c_op*c_op.dag()*ρ); return res; ; #Runge-Kutta Solver; def rksolver(ρ,dt,H,gamma,op):; k1 = rhs(ρ,H,gamma,op); k2 = rhs(ρ+(dt/2)*k1,H,gamma,op); k3 = rhs(ρ+(dt/2)*k2,H,gamma,op); k4 = rhs(ρ+dt*k3,H,gamma,op); rho = ρ+dt*(k1+2*k2+2*k3+k4)/6; return rho; ; dt = tvec[1]-tvec[0]; for i in range(len(tvec)):; H_rk = (p**2)/(2*m) + (1/2)*m*x**2*omg_fun_rk(tvec[i]); gamma_rk = col_fun_rk(tvec[i]); rhot_rk = rksolver(rho_init,dt,H_rk,gamma_rk,x); rho_init = rhot_rk; ```. The fidelity of the final density matrices for these two methods is 0.9312276926316011. This question is also asked [here](https://quantumcomputing.stackexchange.com/questions/22187/qutip-vs-rk45-which-one-gives-the-correct-results-for-time-dependent-systems) and the final density matrices using these two approaches are shown. Basically the density matrices are not close enough. So the question is, which one is correct and why these two methods are giving different results?. Note: For time-independent problems and for time-dependent but coherent evolution the results agree pretty well. However for the case of time-dependent Hamiltonian and dissipation they don't.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1733
https://github.com/qutip/qutip/issues/1733:419,Usability,simpl,simple,419,"### Describe the Issue!. I am writing a code for a quantum thermal machine which includes both coherent and dissipative time evolutions in its different stages of operation. However, evolving the system with ""mesolve"" function of QuTiP (which uses either Adams or BDF methods) and Runge-Kutta gives different results. My code has time dependent Hamiltonians and collapse operators. For demonstration purposes I wrote a simple code which deals with the master equation of a time-dependent harmonic oscillator of mass and frequency equal to 1. The jump operator is the position operator times a time-dependent coefficient. . ```python; import numpy as np; import scipy as sp; from qutip import *; ; tend = 5; tvec = np.linspace(0,tend,1000); ω1 = 1 #initial frequency; ω2 = 2 #final frequency; gamma = 1 #dissipation rate; ; def omg_fun(t, args): #time-dependent frequency; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun(t, args): #time dependent collapse operator coefficient; return np.sqrt(gamma * np.exp(-t)); ; def omg_fun_rk(t): #time-dependent frequency for RK45; s = t/tend; ω_t = ω1 + 10*(ω2-ω1)*s**3 - 15*(ω2-ω1)*s**4 + 6*(ω2-ω1)*s**5; return ω_t; ; def col_fun_rk(t): #time dependent collapse operator coefficient for RK45; return np.sqrt(gamma * np.exp(-t)); ; N=10; m = 1 #mass; ħ = 1; x = np.sqrt(ħ/(2*m*ω1))*(create(N)+destroy(N)) #position operator; p = 1j*np.sqrt((ħ*m*ω1)/2)*(create(N)-destroy(N)) #momentum operator; H = [(p**2)/(2*m), [(1/2)*m*x**2,omg_fun]]; c_ops = [[x,col_fun]]; rho_init = fock_dm(N,1); rhot_vec = mesolve(H,rho_init,tvec,c_ops); rhot_qutip = rhot_vec.states[-1]; ; #Right hand side of the master equation; def rhs(ρ,H,gamma,op):; c_op = np.sqrt(gamma)*op; res = -1j*(H*ρ - ρ*H)+(1/2)*(2*c_op*ρ*c_op.dag()-ρ*c_op.dag()*c_op-c_op*c_op.dag()*ρ); return res; ; #Runge-Kutta Solver; def rksolver(ρ,dt,H,gamma,op):; k1 = rhs(ρ,H,gamma,op); k2 = rhs(ρ+(dt/2)*k1,H,gamma,op); k3 = rhs(ρ+(dt/2)*k2,H,gamma,op); k4 = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1733
https://github.com/qutip/qutip/pull/1734:26,Deployability,integrat,integrator,26,"**Description**; Make our integrator re-entrant. Scipy'ode is can only have one active instance active for some of the methods. This cuased no issue when the whole integration is done at once as when used in `mesolve`. But with solver as class, this mean using them will have side effect on other solver instances. This PR make the check for concurrent integrator usage before scipy does and force a reset if needed. Switching between system will be inefficient, but will return the expected results. In lsoda's integrator's `_backstep` we are catching a warning before acting on it, but catching the warnings still printed them at the end of tests, bloating the output. In this PR, I also do the check before scipy does so the warning is never raised. **Related issues or PRs**; Point raised in discussion with @hodgestar and @AGaliciaMartinez on #1710 . **Changelog**; Front run some safety check in scipy.ode",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1734
https://github.com/qutip/qutip/pull/1734:164,Deployability,integrat,integration,164,"**Description**; Make our integrator re-entrant. Scipy'ode is can only have one active instance active for some of the methods. This cuased no issue when the whole integration is done at once as when used in `mesolve`. But with solver as class, this mean using them will have side effect on other solver instances. This PR make the check for concurrent integrator usage before scipy does and force a reset if needed. Switching between system will be inefficient, but will return the expected results. In lsoda's integrator's `_backstep` we are catching a warning before acting on it, but catching the warnings still printed them at the end of tests, bloating the output. In this PR, I also do the check before scipy does so the warning is never raised. **Related issues or PRs**; Point raised in discussion with @hodgestar and @AGaliciaMartinez on #1710 . **Changelog**; Front run some safety check in scipy.ode",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1734
https://github.com/qutip/qutip/pull/1734:353,Deployability,integrat,integrator,353,"**Description**; Make our integrator re-entrant. Scipy'ode is can only have one active instance active for some of the methods. This cuased no issue when the whole integration is done at once as when used in `mesolve`. But with solver as class, this mean using them will have side effect on other solver instances. This PR make the check for concurrent integrator usage before scipy does and force a reset if needed. Switching between system will be inefficient, but will return the expected results. In lsoda's integrator's `_backstep` we are catching a warning before acting on it, but catching the warnings still printed them at the end of tests, bloating the output. In this PR, I also do the check before scipy does so the warning is never raised. **Related issues or PRs**; Point raised in discussion with @hodgestar and @AGaliciaMartinez on #1710 . **Changelog**; Front run some safety check in scipy.ode",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1734
https://github.com/qutip/qutip/pull/1734:512,Deployability,integrat,integrator,512,"**Description**; Make our integrator re-entrant. Scipy'ode is can only have one active instance active for some of the methods. This cuased no issue when the whole integration is done at once as when used in `mesolve`. But with solver as class, this mean using them will have side effect on other solver instances. This PR make the check for concurrent integrator usage before scipy does and force a reset if needed. Switching between system will be inefficient, but will return the expected results. In lsoda's integrator's `_backstep` we are catching a warning before acting on it, but catching the warnings still printed them at the end of tests, bloating the output. In this PR, I also do the check before scipy does so the warning is never raised. **Related issues or PRs**; Point raised in discussion with @hodgestar and @AGaliciaMartinez on #1710 . **Changelog**; Front run some safety check in scipy.ode",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1734
https://github.com/qutip/qutip/pull/1734:26,Integrability,integrat,integrator,26,"**Description**; Make our integrator re-entrant. Scipy'ode is can only have one active instance active for some of the methods. This cuased no issue when the whole integration is done at once as when used in `mesolve`. But with solver as class, this mean using them will have side effect on other solver instances. This PR make the check for concurrent integrator usage before scipy does and force a reset if needed. Switching between system will be inefficient, but will return the expected results. In lsoda's integrator's `_backstep` we are catching a warning before acting on it, but catching the warnings still printed them at the end of tests, bloating the output. In this PR, I also do the check before scipy does so the warning is never raised. **Related issues or PRs**; Point raised in discussion with @hodgestar and @AGaliciaMartinez on #1710 . **Changelog**; Front run some safety check in scipy.ode",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1734
https://github.com/qutip/qutip/pull/1734:164,Integrability,integrat,integration,164,"**Description**; Make our integrator re-entrant. Scipy'ode is can only have one active instance active for some of the methods. This cuased no issue when the whole integration is done at once as when used in `mesolve`. But with solver as class, this mean using them will have side effect on other solver instances. This PR make the check for concurrent integrator usage before scipy does and force a reset if needed. Switching between system will be inefficient, but will return the expected results. In lsoda's integrator's `_backstep` we are catching a warning before acting on it, but catching the warnings still printed them at the end of tests, bloating the output. In this PR, I also do the check before scipy does so the warning is never raised. **Related issues or PRs**; Point raised in discussion with @hodgestar and @AGaliciaMartinez on #1710 . **Changelog**; Front run some safety check in scipy.ode",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1734
https://github.com/qutip/qutip/pull/1734:353,Integrability,integrat,integrator,353,"**Description**; Make our integrator re-entrant. Scipy'ode is can only have one active instance active for some of the methods. This cuased no issue when the whole integration is done at once as when used in `mesolve`. But with solver as class, this mean using them will have side effect on other solver instances. This PR make the check for concurrent integrator usage before scipy does and force a reset if needed. Switching between system will be inefficient, but will return the expected results. In lsoda's integrator's `_backstep` we are catching a warning before acting on it, but catching the warnings still printed them at the end of tests, bloating the output. In this PR, I also do the check before scipy does so the warning is never raised. **Related issues or PRs**; Point raised in discussion with @hodgestar and @AGaliciaMartinez on #1710 . **Changelog**; Front run some safety check in scipy.ode",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1734
https://github.com/qutip/qutip/pull/1734:512,Integrability,integrat,integrator,512,"**Description**; Make our integrator re-entrant. Scipy'ode is can only have one active instance active for some of the methods. This cuased no issue when the whole integration is done at once as when used in `mesolve`. But with solver as class, this mean using them will have side effect on other solver instances. This PR make the check for concurrent integrator usage before scipy does and force a reset if needed. Switching between system will be inefficient, but will return the expected results. In lsoda's integrator's `_backstep` we are catching a warning before acting on it, but catching the warnings still printed them at the end of tests, bloating the output. In this PR, I also do the check before scipy does so the warning is never raised. **Related issues or PRs**; Point raised in discussion with @hodgestar and @AGaliciaMartinez on #1710 . **Changelog**; Front run some safety check in scipy.ode",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1734
https://github.com/qutip/qutip/pull/1734:342,Performance,concurren,concurrent,342,"**Description**; Make our integrator re-entrant. Scipy'ode is can only have one active instance active for some of the methods. This cuased no issue when the whole integration is done at once as when used in `mesolve`. But with solver as class, this mean using them will have side effect on other solver instances. This PR make the check for concurrent integrator usage before scipy does and force a reset if needed. Switching between system will be inefficient, but will return the expected results. In lsoda's integrator's `_backstep` we are catching a warning before acting on it, but catching the warnings still printed them at the end of tests, bloating the output. In this PR, I also do the check before scipy does so the warning is never raised. **Related issues or PRs**; Point raised in discussion with @hodgestar and @AGaliciaMartinez on #1710 . **Changelog**; Front run some safety check in scipy.ode",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1734
https://github.com/qutip/qutip/pull/1734:886,Safety,safe,safety,886,"**Description**; Make our integrator re-entrant. Scipy'ode is can only have one active instance active for some of the methods. This cuased no issue when the whole integration is done at once as when used in `mesolve`. But with solver as class, this mean using them will have side effect on other solver instances. This PR make the check for concurrent integrator usage before scipy does and force a reset if needed. Switching between system will be inefficient, but will return the expected results. In lsoda's integrator's `_backstep` we are catching a warning before acting on it, but catching the warnings still printed them at the end of tests, bloating the output. In this PR, I also do the check before scipy does so the warning is never raised. **Related issues or PRs**; Point raised in discussion with @hodgestar and @AGaliciaMartinez on #1710 . **Changelog**; Front run some safety check in scipy.ode",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1734
https://github.com/qutip/qutip/pull/1734:643,Testability,test,tests,643,"**Description**; Make our integrator re-entrant. Scipy'ode is can only have one active instance active for some of the methods. This cuased no issue when the whole integration is done at once as when used in `mesolve`. But with solver as class, this mean using them will have side effect on other solver instances. This PR make the check for concurrent integrator usage before scipy does and force a reset if needed. Switching between system will be inefficient, but will return the expected results. In lsoda's integrator's `_backstep` we are catching a warning before acting on it, but catching the warnings still printed them at the end of tests, bloating the output. In this PR, I also do the check before scipy does so the warning is never raised. **Related issues or PRs**; Point raised in discussion with @hodgestar and @AGaliciaMartinez on #1710 . **Changelog**; Front run some safety check in scipy.ode",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1734
https://github.com/qutip/qutip/pull/1735:127,Deployability,Update,Update,127,"**Description**; - [x] Remove the restriction to `numpy<1.20` in `setup.cfg` (numpy >= 1.20 is required by Python 3.10); - [x] Update the build process to explicitly build with the lowest supported numpy; - [x] While we're here, update to a more recent version of ciwheelbuild. ; - [x] Build documentation on Python 3.9. **Related issues or PRs**; * Fixes #1732; * Fixes #1720; * Fixes #1740; * We also need to update our conda-forge feedstock -- https://github.com/conda-forge/qutip-feedstock/pull/72; * Alternative implementation from @henryiii in #1738. **Changelog**; * Updated the build process to support building on Python 3.10 by removing the install requirement for `numpy < 1.20`.; * Update the version of cibuildwheel used to build wheels to 2.3.0.; * Update the version of Python used in documentation builds to Python 3.9.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1735
https://github.com/qutip/qutip/pull/1735:229,Deployability,update,update,229,"**Description**; - [x] Remove the restriction to `numpy<1.20` in `setup.cfg` (numpy >= 1.20 is required by Python 3.10); - [x] Update the build process to explicitly build with the lowest supported numpy; - [x] While we're here, update to a more recent version of ciwheelbuild. ; - [x] Build documentation on Python 3.9. **Related issues or PRs**; * Fixes #1732; * Fixes #1720; * Fixes #1740; * We also need to update our conda-forge feedstock -- https://github.com/conda-forge/qutip-feedstock/pull/72; * Alternative implementation from @henryiii in #1738. **Changelog**; * Updated the build process to support building on Python 3.10 by removing the install requirement for `numpy < 1.20`.; * Update the version of cibuildwheel used to build wheels to 2.3.0.; * Update the version of Python used in documentation builds to Python 3.9.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1735
https://github.com/qutip/qutip/pull/1735:411,Deployability,update,update,411,"**Description**; - [x] Remove the restriction to `numpy<1.20` in `setup.cfg` (numpy >= 1.20 is required by Python 3.10); - [x] Update the build process to explicitly build with the lowest supported numpy; - [x] While we're here, update to a more recent version of ciwheelbuild. ; - [x] Build documentation on Python 3.9. **Related issues or PRs**; * Fixes #1732; * Fixes #1720; * Fixes #1740; * We also need to update our conda-forge feedstock -- https://github.com/conda-forge/qutip-feedstock/pull/72; * Alternative implementation from @henryiii in #1738. **Changelog**; * Updated the build process to support building on Python 3.10 by removing the install requirement for `numpy < 1.20`.; * Update the version of cibuildwheel used to build wheels to 2.3.0.; * Update the version of Python used in documentation builds to Python 3.9.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1735
https://github.com/qutip/qutip/pull/1735:574,Deployability,Update,Updated,574,"**Description**; - [x] Remove the restriction to `numpy<1.20` in `setup.cfg` (numpy >= 1.20 is required by Python 3.10); - [x] Update the build process to explicitly build with the lowest supported numpy; - [x] While we're here, update to a more recent version of ciwheelbuild. ; - [x] Build documentation on Python 3.9. **Related issues or PRs**; * Fixes #1732; * Fixes #1720; * Fixes #1740; * We also need to update our conda-forge feedstock -- https://github.com/conda-forge/qutip-feedstock/pull/72; * Alternative implementation from @henryiii in #1738. **Changelog**; * Updated the build process to support building on Python 3.10 by removing the install requirement for `numpy < 1.20`.; * Update the version of cibuildwheel used to build wheels to 2.3.0.; * Update the version of Python used in documentation builds to Python 3.9.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1735
https://github.com/qutip/qutip/pull/1735:651,Deployability,install,install,651,"**Description**; - [x] Remove the restriction to `numpy<1.20` in `setup.cfg` (numpy >= 1.20 is required by Python 3.10); - [x] Update the build process to explicitly build with the lowest supported numpy; - [x] While we're here, update to a more recent version of ciwheelbuild. ; - [x] Build documentation on Python 3.9. **Related issues or PRs**; * Fixes #1732; * Fixes #1720; * Fixes #1740; * We also need to update our conda-forge feedstock -- https://github.com/conda-forge/qutip-feedstock/pull/72; * Alternative implementation from @henryiii in #1738. **Changelog**; * Updated the build process to support building on Python 3.10 by removing the install requirement for `numpy < 1.20`.; * Update the version of cibuildwheel used to build wheels to 2.3.0.; * Update the version of Python used in documentation builds to Python 3.9.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1735
https://github.com/qutip/qutip/pull/1735:694,Deployability,Update,Update,694,"**Description**; - [x] Remove the restriction to `numpy<1.20` in `setup.cfg` (numpy >= 1.20 is required by Python 3.10); - [x] Update the build process to explicitly build with the lowest supported numpy; - [x] While we're here, update to a more recent version of ciwheelbuild. ; - [x] Build documentation on Python 3.9. **Related issues or PRs**; * Fixes #1732; * Fixes #1720; * Fixes #1740; * We also need to update our conda-forge feedstock -- https://github.com/conda-forge/qutip-feedstock/pull/72; * Alternative implementation from @henryiii in #1738. **Changelog**; * Updated the build process to support building on Python 3.10 by removing the install requirement for `numpy < 1.20`.; * Update the version of cibuildwheel used to build wheels to 2.3.0.; * Update the version of Python used in documentation builds to Python 3.9.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1735
https://github.com/qutip/qutip/pull/1735:763,Deployability,Update,Update,763,"**Description**; - [x] Remove the restriction to `numpy<1.20` in `setup.cfg` (numpy >= 1.20 is required by Python 3.10); - [x] Update the build process to explicitly build with the lowest supported numpy; - [x] While we're here, update to a more recent version of ciwheelbuild. ; - [x] Build documentation on Python 3.9. **Related issues or PRs**; * Fixes #1732; * Fixes #1720; * Fixes #1740; * We also need to update our conda-forge feedstock -- https://github.com/conda-forge/qutip-feedstock/pull/72; * Alternative implementation from @henryiii in #1738. **Changelog**; * Updated the build process to support building on Python 3.10 by removing the install requirement for `numpy < 1.20`.; * Update the version of cibuildwheel used to build wheels to 2.3.0.; * Update the version of Python used in documentation builds to Python 3.9.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1735
https://github.com/qutip/qutip/pull/1738:8,Testability,test,testing,8,This is testing using oldest supported numpy and enabling 3.10.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1738
https://github.com/qutip/qutip/issues/1740:706,Availability,error,error,706,"### Bug Description. Installing qutip with `pip install qutip` fails on a MacBook Pro with M1 Pro running macOS 12.0.1, due to the build dependency `numpy<1.20` failing to build. This happens both with miniconda python 3.9.6 and miniforge python 3.9.7. Same happens if I clone the master branch and build. If I edit `pyproject.toml` and `setup.cfg` to remove the `<1.20` in Numpy, then qutip builds correctly (then I get same problem as Issue #1606 when importing, but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:713,Availability,ERROR,ERROR,713,"### Bug Description. Installing qutip with `pip install qutip` fails on a MacBook Pro with M1 Pro running macOS 12.0.1, due to the build dependency `numpy<1.20` failing to build. This happens both with miniconda python 3.9.6 and miniforge python 3.9.7. Same happens if I clone the master branch and build. If I edit `pyproject.toml` and `setup.cfg` to remove the `<1.20` in Numpy, then qutip builds correctly (then I get same problem as Issue #1606 when importing, but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:728,Availability,error,errored,728,"### Bug Description. Installing qutip with `pip install qutip` fails on a MacBook Pro with M1 Pro running macOS 12.0.1, due to the build dependency `numpy<1.20` failing to build. This happens both with miniconda python 3.9.6 and miniforge python 3.9.7. Same happens if I clone the master branch and build. If I edit `pyproject.toml` and `setup.cfg` to remove the `<1.20` in Numpy, then qutip builds correctly (then I get same problem as Issue #1606 when importing, but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:2358,Availability,error,error,2358,"d packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Building wheel for numpy (pyproject.toml): finished with status 'error'; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmp8u8pmfcw_in_process.py build_wheel /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmpcrdfx79e; cwd: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1; Complete output (881 lines):; Running from numpy source directory.; numpy/random/_bounded_integers.pxd.in has not changed; numpy/random/_philox.pyx has not changed; numpy/random/_bounded_integers.pyx.in has not changed; numpy/random/_sfc64.pyx has not changed; numpy/random/_mt19937.pyx has not changed; numpy/random/bit_generator.pyx has not changed; Processing numpy/random/_bounded_integers.pyx; numpy/random/mtrand.pyx has not changed; numpy/random/_generator.pyx has not changed; numpy/random/_pcg64.pyx has not changed; numpy/random/_common.pyx has not changed; Cythonizing sources; blas_opt_info:; blas_mkl_info:; customize UnixCCompiler; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:2366,Availability,ERROR,ERROR,2366,"d packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Building wheel for numpy (pyproject.toml): finished with status 'error'; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmp8u8pmfcw_in_process.py build_wheel /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmpcrdfx79e; cwd: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1; Complete output (881 lines):; Running from numpy source directory.; numpy/random/_bounded_integers.pxd.in has not changed; numpy/random/_philox.pyx has not changed; numpy/random/_bounded_integers.pyx.in has not changed; numpy/random/_sfc64.pyx has not changed; numpy/random/_mt19937.pyx has not changed; numpy/random/bit_generator.pyx has not changed; Processing numpy/random/_bounded_integers.pyx; numpy/random/mtrand.pyx has not changed; numpy/random/_generator.pyx has not changed; numpy/random/_pcg64.pyx has not changed; numpy/random/_common.pyx has not changed; Cythonizing sources; blas_opt_info:; blas_mkl_info:; customize UnixCCompiler; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:2381,Availability,error,errored,2381,"d packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Building wheel for numpy (pyproject.toml): finished with status 'error'; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmp8u8pmfcw_in_process.py build_wheel /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmpcrdfx79e; cwd: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1; Complete output (881 lines):; Running from numpy source directory.; numpy/random/_bounded_integers.pxd.in has not changed; numpy/random/_philox.pyx has not changed; numpy/random/_bounded_integers.pyx.in has not changed; numpy/random/_sfc64.pyx has not changed; numpy/random/_mt19937.pyx has not changed; numpy/random/bit_generator.pyx has not changed; Processing numpy/random/_bounded_integers.pyx; numpy/random/mtrand.pyx has not changed; numpy/random/_generator.pyx has not changed; numpy/random/_pcg64.pyx has not changed; numpy/random/_common.pyx has not changed; Cythonizing sources; blas_opt_info:; blas_mkl_info:; customize UnixCCompiler; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:3536,Availability,AVAIL,AVAILABLE,3536,"t19937.pyx has not changed; numpy/random/bit_generator.pyx has not changed; Processing numpy/random/_bounded_integers.pyx; numpy/random/mtrand.pyx has not changed; numpy/random/_generator.pyx has not changed; numpy/random/_pcg64.pyx has not changed; numpy/random/_common.pyx has not changed; Cythonizing sources; blas_opt_info:; blas_mkl_info:; customize UnixCCompiler; libraries mkl_rt not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; blis_info:; libraries blis not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; openblas_info:; libraries openblas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_3_10_blas_threads_info:; Setting PTATLAS=ATLAS; libraries tatlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_3_10_blas_info:; libraries satlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_blas_threads_info:; Setting PTATLAS=ATLAS; libraries ptf77blas,ptcblas,atlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_blas_info:; libraries f77blas,cblas,atlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; accelerate_info:; libraries accelerate not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; Library accelerate was not found. Ignoring; libraries veclib not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; Library veclib was not found. Ignoring; FOUND:; extra_compile_args = ['-faltivec', '-I/System/Library/Frameworks/vecLib.framework/Headers",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:3686,Availability,AVAIL,AVAILABLE,3686,"t19937.pyx has not changed; numpy/random/bit_generator.pyx has not changed; Processing numpy/random/_bounded_integers.pyx; numpy/random/mtrand.pyx has not changed; numpy/random/_generator.pyx has not changed; numpy/random/_pcg64.pyx has not changed; numpy/random/_common.pyx has not changed; Cythonizing sources; blas_opt_info:; blas_mkl_info:; customize UnixCCompiler; libraries mkl_rt not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; blis_info:; libraries blis not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; openblas_info:; libraries openblas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_3_10_blas_threads_info:; Setting PTATLAS=ATLAS; libraries tatlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_3_10_blas_info:; libraries satlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_blas_threads_info:; Setting PTATLAS=ATLAS; libraries ptf77blas,ptcblas,atlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_blas_info:; libraries f77blas,cblas,atlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; accelerate_info:; libraries accelerate not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; Library accelerate was not found. Ignoring; libraries veclib not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; Library veclib was not found. Ignoring; FOUND:; extra_compile_args = ['-faltivec', '-I/System/Library/Frameworks/vecLib.framework/Headers",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:3844,Availability,AVAIL,AVAILABLE,3844,"t19937.pyx has not changed; numpy/random/bit_generator.pyx has not changed; Processing numpy/random/_bounded_integers.pyx; numpy/random/mtrand.pyx has not changed; numpy/random/_generator.pyx has not changed; numpy/random/_pcg64.pyx has not changed; numpy/random/_common.pyx has not changed; Cythonizing sources; blas_opt_info:; blas_mkl_info:; customize UnixCCompiler; libraries mkl_rt not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; blis_info:; libraries blis not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; openblas_info:; libraries openblas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_3_10_blas_threads_info:; Setting PTATLAS=ATLAS; libraries tatlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_3_10_blas_info:; libraries satlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_blas_threads_info:; Setting PTATLAS=ATLAS; libraries ptf77blas,ptcblas,atlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_blas_info:; libraries f77blas,cblas,atlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; accelerate_info:; libraries accelerate not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; Library accelerate was not found. Ignoring; libraries veclib not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; Library veclib was not found. Ignoring; FOUND:; extra_compile_args = ['-faltivec', '-I/System/Library/Frameworks/vecLib.framework/Headers",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:4038,Availability,AVAIL,AVAILABLE,4038,"t19937.pyx has not changed; numpy/random/bit_generator.pyx has not changed; Processing numpy/random/_bounded_integers.pyx; numpy/random/mtrand.pyx has not changed; numpy/random/_generator.pyx has not changed; numpy/random/_pcg64.pyx has not changed; numpy/random/_common.pyx has not changed; Cythonizing sources; blas_opt_info:; blas_mkl_info:; customize UnixCCompiler; libraries mkl_rt not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; blis_info:; libraries blis not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; openblas_info:; libraries openblas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_3_10_blas_threads_info:; Setting PTATLAS=ATLAS; libraries tatlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_3_10_blas_info:; libraries satlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_blas_threads_info:; Setting PTATLAS=ATLAS; libraries ptf77blas,ptcblas,atlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_blas_info:; libraries f77blas,cblas,atlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; accelerate_info:; libraries accelerate not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; Library accelerate was not found. Ignoring; libraries veclib not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; Library veclib was not found. Ignoring; FOUND:; extra_compile_args = ['-faltivec', '-I/System/Library/Frameworks/vecLib.framework/Headers",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:4201,Availability,AVAIL,AVAILABLE,4201,"t19937.pyx has not changed; numpy/random/bit_generator.pyx has not changed; Processing numpy/random/_bounded_integers.pyx; numpy/random/mtrand.pyx has not changed; numpy/random/_generator.pyx has not changed; numpy/random/_pcg64.pyx has not changed; numpy/random/_common.pyx has not changed; Cythonizing sources; blas_opt_info:; blas_mkl_info:; customize UnixCCompiler; libraries mkl_rt not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; blis_info:; libraries blis not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; openblas_info:; libraries openblas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_3_10_blas_threads_info:; Setting PTATLAS=ATLAS; libraries tatlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_3_10_blas_info:; libraries satlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_blas_threads_info:; Setting PTATLAS=ATLAS; libraries ptf77blas,ptcblas,atlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_blas_info:; libraries f77blas,cblas,atlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; accelerate_info:; libraries accelerate not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; Library accelerate was not found. Ignoring; libraries veclib not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; Library veclib was not found. Ignoring; FOUND:; extra_compile_args = ['-faltivec', '-I/System/Library/Frameworks/vecLib.framework/Headers",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:4407,Availability,AVAIL,AVAILABLE,4407,"t19937.pyx has not changed; numpy/random/bit_generator.pyx has not changed; Processing numpy/random/_bounded_integers.pyx; numpy/random/mtrand.pyx has not changed; numpy/random/_generator.pyx has not changed; numpy/random/_pcg64.pyx has not changed; numpy/random/_common.pyx has not changed; Cythonizing sources; blas_opt_info:; blas_mkl_info:; customize UnixCCompiler; libraries mkl_rt not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; blis_info:; libraries blis not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; openblas_info:; libraries openblas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_3_10_blas_threads_info:; Setting PTATLAS=ATLAS; libraries tatlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_3_10_blas_info:; libraries satlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_blas_threads_info:; Setting PTATLAS=ATLAS; libraries ptf77blas,ptcblas,atlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_blas_info:; libraries f77blas,cblas,atlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; accelerate_info:; libraries accelerate not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; Library accelerate was not found. Ignoring; libraries veclib not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; Library veclib was not found. Ignoring; FOUND:; extra_compile_args = ['-faltivec', '-I/System/Library/Frameworks/vecLib.framework/Headers",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:4578,Availability,AVAIL,AVAILABLE,4578,"t19937.pyx has not changed; numpy/random/bit_generator.pyx has not changed; Processing numpy/random/_bounded_integers.pyx; numpy/random/mtrand.pyx has not changed; numpy/random/_generator.pyx has not changed; numpy/random/_pcg64.pyx has not changed; numpy/random/_common.pyx has not changed; Cythonizing sources; blas_opt_info:; blas_mkl_info:; customize UnixCCompiler; libraries mkl_rt not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; blis_info:; libraries blis not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; openblas_info:; libraries openblas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_3_10_blas_threads_info:; Setting PTATLAS=ATLAS; libraries tatlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_3_10_blas_info:; libraries satlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_blas_threads_info:; Setting PTATLAS=ATLAS; libraries ptf77blas,ptcblas,atlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_blas_info:; libraries f77blas,cblas,atlas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; accelerate_info:; libraries accelerate not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; Library accelerate was not found. Ignoring; libraries veclib not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; Library veclib was not found. Ignoring; FOUND:; extra_compile_args = ['-faltivec', '-I/System/Library/Frameworks/vecLib.framework/Headers",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:5600,Availability,AVAIL,AVAILABLE,5600,"tem/Library/Frameworks/vecLib.framework/Headers']; extra_link_args = ['-Wl,-framework', '-Wl,Accelerate']; define_macros = [('NO_ATLAS_INFO', 3), ('HAVE_CBLAS', None)]; ; FOUND:; extra_compile_args = ['-faltivec', '-I/System/Library/Frameworks/vecLib.framework/Headers']; extra_link_args = ['-Wl,-framework', '-Wl,Accelerate']; define_macros = [('NO_ATLAS_INFO', 3), ('HAVE_CBLAS', None)]; ; non-existing path in 'numpy/distutils': 'site.cfg'; lapack_opt_info:; lapack_mkl_info:; libraries mkl_rt not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; openblas_lapack_info:; libraries openblas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; openblas_clapack_info:; libraries openblas,lapack not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; flame_info:; libraries flame not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_3_10_threads_info:; Setting PTATLAS=ATLAS; libraries lapack_atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries tatlas,tatlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries tatlas,tatlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries tatlas,tatlas not found in /usr/lib; <class 'numpy.distutils.system_info.atlas_3_10_threads_info'>; NOT AVAILABLE; ; atlas_3_10_info:; libraries lapack_atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries satlas,satlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries satlas,satlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries sa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:5765,Availability,AVAIL,AVAILABLE,5765,"tem/Library/Frameworks/vecLib.framework/Headers']; extra_link_args = ['-Wl,-framework', '-Wl,Accelerate']; define_macros = [('NO_ATLAS_INFO', 3), ('HAVE_CBLAS', None)]; ; FOUND:; extra_compile_args = ['-faltivec', '-I/System/Library/Frameworks/vecLib.framework/Headers']; extra_link_args = ['-Wl,-framework', '-Wl,Accelerate']; define_macros = [('NO_ATLAS_INFO', 3), ('HAVE_CBLAS', None)]; ; non-existing path in 'numpy/distutils': 'site.cfg'; lapack_opt_info:; lapack_mkl_info:; libraries mkl_rt not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; openblas_lapack_info:; libraries openblas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; openblas_clapack_info:; libraries openblas,lapack not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; flame_info:; libraries flame not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_3_10_threads_info:; Setting PTATLAS=ATLAS; libraries lapack_atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries tatlas,tatlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries tatlas,tatlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries tatlas,tatlas not found in /usr/lib; <class 'numpy.distutils.system_info.atlas_3_10_threads_info'>; NOT AVAILABLE; ; atlas_3_10_info:; libraries lapack_atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries satlas,satlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries satlas,satlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries sa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:5938,Availability,AVAIL,AVAILABLE,5938,"tem/Library/Frameworks/vecLib.framework/Headers']; extra_link_args = ['-Wl,-framework', '-Wl,Accelerate']; define_macros = [('NO_ATLAS_INFO', 3), ('HAVE_CBLAS', None)]; ; FOUND:; extra_compile_args = ['-faltivec', '-I/System/Library/Frameworks/vecLib.framework/Headers']; extra_link_args = ['-Wl,-framework', '-Wl,Accelerate']; define_macros = [('NO_ATLAS_INFO', 3), ('HAVE_CBLAS', None)]; ; non-existing path in 'numpy/distutils': 'site.cfg'; lapack_opt_info:; lapack_mkl_info:; libraries mkl_rt not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; openblas_lapack_info:; libraries openblas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; openblas_clapack_info:; libraries openblas,lapack not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; flame_info:; libraries flame not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_3_10_threads_info:; Setting PTATLAS=ATLAS; libraries lapack_atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries tatlas,tatlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries tatlas,tatlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries tatlas,tatlas not found in /usr/lib; <class 'numpy.distutils.system_info.atlas_3_10_threads_info'>; NOT AVAILABLE; ; atlas_3_10_info:; libraries lapack_atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries satlas,satlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries satlas,satlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries sa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:6090,Availability,AVAIL,AVAILABLE,6090,"tem/Library/Frameworks/vecLib.framework/Headers']; extra_link_args = ['-Wl,-framework', '-Wl,Accelerate']; define_macros = [('NO_ATLAS_INFO', 3), ('HAVE_CBLAS', None)]; ; FOUND:; extra_compile_args = ['-faltivec', '-I/System/Library/Frameworks/vecLib.framework/Headers']; extra_link_args = ['-Wl,-framework', '-Wl,Accelerate']; define_macros = [('NO_ATLAS_INFO', 3), ('HAVE_CBLAS', None)]; ; non-existing path in 'numpy/distutils': 'site.cfg'; lapack_opt_info:; lapack_mkl_info:; libraries mkl_rt not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; openblas_lapack_info:; libraries openblas not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; openblas_clapack_info:; libraries openblas,lapack not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; flame_info:; libraries flame not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_3_10_threads_info:; Setting PTATLAS=ATLAS; libraries lapack_atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries tatlas,tatlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries tatlas,tatlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries tatlas,tatlas not found in /usr/lib; <class 'numpy.distutils.system_info.atlas_3_10_threads_info'>; NOT AVAILABLE; ; atlas_3_10_info:; libraries lapack_atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries satlas,satlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries satlas,satlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries sa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:6608,Availability,AVAIL,AVAILABLE,6608,"es openblas,lapack not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; flame_info:; libraries flame not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; atlas_3_10_threads_info:; Setting PTATLAS=ATLAS; libraries lapack_atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries tatlas,tatlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries tatlas,tatlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries tatlas,tatlas not found in /usr/lib; <class 'numpy.distutils.system_info.atlas_3_10_threads_info'>; NOT AVAILABLE; ; atlas_3_10_info:; libraries lapack_atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries satlas,satlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries satlas,satlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries satlas,satlas not found in /usr/lib; <class 'numpy.distutils.system_info.atlas_3_10_info'>; NOT AVAILABLE; ; atlas_threads_info:; Setting PTATLAS=ATLAS; libraries lapack_atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries ptf77blas,ptcblas,atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries ptf77blas,ptcblas,atlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries ptf77blas,ptcblas,atlas not found in /usr/lib; <class 'numpy.distutils.system_info.atlas_threads_info'>; NOT AVAILABLE; ; atlas_info:; libraries lapack_atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries f77blas,cblas,atlas not found in /opt/homebrew/Caskroo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:7087,Availability,AVAIL,AVAILABLE,7087,"e/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries tatlas,tatlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries tatlas,tatlas not found in /usr/lib; <class 'numpy.distutils.system_info.atlas_3_10_threads_info'>; NOT AVAILABLE; ; atlas_3_10_info:; libraries lapack_atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries satlas,satlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries satlas,satlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries satlas,satlas not found in /usr/lib; <class 'numpy.distutils.system_info.atlas_3_10_info'>; NOT AVAILABLE; ; atlas_threads_info:; Setting PTATLAS=ATLAS; libraries lapack_atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries ptf77blas,ptcblas,atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries ptf77blas,ptcblas,atlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries ptf77blas,ptcblas,atlas not found in /usr/lib; <class 'numpy.distutils.system_info.atlas_threads_info'>; NOT AVAILABLE; ; atlas_info:; libraries lapack_atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries f77blas,cblas,atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries f77blas,cblas,atlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries f77blas,cblas,atlas not found in /usr/lib; <class 'numpy.distutils.system_info.atlas_info'>; NOT AVAILABLE; ; FOUND:; extra_compile_args = ['-faltivec', '-I/System/Library/Frameworks/vecLib.framework/Headers']; extra_link_args = ['-Wl,-framework', '-Wl,Accelerate']; define_macros = [('NO_ATLAS_INFO', 3), ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:7625,Availability,AVAIL,AVAILABLE,7625,"ries lapack_atlas not found in /usr/local/lib; libraries satlas,satlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries satlas,satlas not found in /usr/lib; <class 'numpy.distutils.system_info.atlas_3_10_info'>; NOT AVAILABLE; ; atlas_threads_info:; Setting PTATLAS=ATLAS; libraries lapack_atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries ptf77blas,ptcblas,atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries ptf77blas,ptcblas,atlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries ptf77blas,ptcblas,atlas not found in /usr/lib; <class 'numpy.distutils.system_info.atlas_threads_info'>; NOT AVAILABLE; ; atlas_info:; libraries lapack_atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries f77blas,cblas,atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries f77blas,cblas,atlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries f77blas,cblas,atlas not found in /usr/lib; <class 'numpy.distutils.system_info.atlas_info'>; NOT AVAILABLE; ; FOUND:; extra_compile_args = ['-faltivec', '-I/System/Library/Frameworks/vecLib.framework/Headers']; extra_link_args = ['-Wl,-framework', '-Wl,Accelerate']; define_macros = [('NO_ATLAS_INFO', 3), ('HAVE_CBLAS', None)]; ; /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/distutils/dist.py:274: UserWarning: Unknown distribution option: 'define_macros'; warnings.warn(msg); running bdist_wheel; running build; running config_cc; unifing config_cc, config, build_clib, build_ext, build commands --compiler options; running config_fc; unifing config_fc, config, build_clib, build_ext, build commands --fcompiler options; running build_src; build_src; building py_modules sources; building library",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:8112,Availability,AVAIL,AVAILABLE,8112,"ries lapack_atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries ptf77blas,ptcblas,atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries ptf77blas,ptcblas,atlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries ptf77blas,ptcblas,atlas not found in /usr/lib; <class 'numpy.distutils.system_info.atlas_threads_info'>; NOT AVAILABLE; ; atlas_info:; libraries lapack_atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries f77blas,cblas,atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries f77blas,cblas,atlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries f77blas,cblas,atlas not found in /usr/lib; <class 'numpy.distutils.system_info.atlas_info'>; NOT AVAILABLE; ; FOUND:; extra_compile_args = ['-faltivec', '-I/System/Library/Frameworks/vecLib.framework/Headers']; extra_link_args = ['-Wl,-framework', '-Wl,Accelerate']; define_macros = [('NO_ATLAS_INFO', 3), ('HAVE_CBLAS', None)]; ; /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/distutils/dist.py:274: UserWarning: Unknown distribution option: 'define_macros'; warnings.warn(msg); running bdist_wheel; running build; running config_cc; unifing config_cc, config, build_clib, build_ext, build commands --compiler options; running config_fc; unifing config_fc, config, build_clib, build_ext, build commands --fcompiler options; running build_src; build_src; building py_modules sources; building library ""npymath"" sources; adding 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath' to include_dirs.; None - nothing done with h_files = ['build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath/npy_math_internal.h']; building library ""npysort"" sources; adding 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/common",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:65188,Availability,error,error,65188,"64-3.9/numpy/core/src/common -Inumpy/core/include -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c'; extra options: '-faltivec -I/System/Library/Frameworks/vecLib.framework/Headers'; clang: numpy/core/src/multiarray/array_assign_scalar.c; clang: numpy/core/src/multiarray/alloc.c; clang: numpy/core/src/multiarray/buffer.c; clang: numpy/core/src/multiarray/common.c; clang: numpy/core/src/multiarray/conversion_utils.c; clang: numpy/core/src/multiarray/datetime_strings.c; clang: numpy/core/src/multiarray/descriptor.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/einsum.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/lowlevel_strided_loops.c; clang: numpy/core/src/multiarray/hashdescr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/multiarraymodule.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/nditer_constr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/refcount.c; clang: error: the clang compiler does not support 'faltivec', p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:65305,Availability,error,error,65305,"numpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c'; extra options: '-faltivec -I/System/Library/Frameworks/vecLib.framework/Headers'; clang: numpy/core/src/multiarray/array_assign_scalar.c; clang: numpy/core/src/multiarray/alloc.c; clang: numpy/core/src/multiarray/buffer.c; clang: numpy/core/src/multiarray/common.c; clang: numpy/core/src/multiarray/conversion_utils.c; clang: numpy/core/src/multiarray/datetime_strings.c; clang: numpy/core/src/multiarray/descriptor.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/einsum.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/lowlevel_strided_loops.c; clang: numpy/core/src/multiarray/hashdescr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/multiarraymodule.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/nditer_constr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/refcount.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltive",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:65559,Availability,error,error,65559,"/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c'; extra options: '-faltivec -I/System/Library/Frameworks/vecLib.framework/Headers'; clang: numpy/core/src/multiarray/array_assign_scalar.c; clang: numpy/core/src/multiarray/alloc.c; clang: numpy/core/src/multiarray/buffer.c; clang: numpy/core/src/multiarray/common.c; clang: numpy/core/src/multiarray/conversion_utils.c; clang: numpy/core/src/multiarray/datetime_strings.c; clang: numpy/core/src/multiarray/descriptor.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/einsum.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/lowlevel_strided_loops.c; clang: numpy/core/src/multiarray/hashdescr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/multiarraymodule.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/nditer_constr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/refcount.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/scalarapi.c; clang: numpy/core/src/multiarray/temp_elide.c; clang: numpy/core/src/multiarray/vdot.c; clang: error: the clang compiler does not support 'faltivec', plea",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:65676,Availability,error,error,65676,"-I/System/Library/Frameworks/vecLib.framework/Headers'; clang: numpy/core/src/multiarray/array_assign_scalar.c; clang: numpy/core/src/multiarray/alloc.c; clang: numpy/core/src/multiarray/buffer.c; clang: numpy/core/src/multiarray/common.c; clang: numpy/core/src/multiarray/conversion_utils.c; clang: numpy/core/src/multiarray/datetime_strings.c; clang: numpy/core/src/multiarray/descriptor.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/einsum.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/lowlevel_strided_loops.c; clang: numpy/core/src/multiarray/hashdescr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/multiarraymodule.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/nditer_constr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/refcount.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/scalarapi.c; clang: numpy/core/src/multiarray/temp_elide.c; clang: numpy/core/src/multiarray/vdot.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec',",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:65846,Availability,error,error,65846,"multiarray/buffer.c; clang: numpy/core/src/multiarray/common.c; clang: numpy/core/src/multiarray/conversion_utils.c; clang: numpy/core/src/multiarray/datetime_strings.c; clang: numpy/core/src/multiarray/descriptor.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/einsum.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/lowlevel_strided_loops.c; clang: numpy/core/src/multiarray/hashdescr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/multiarraymodule.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/nditer_constr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/refcount.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/scalarapi.c; clang: numpy/core/src/multiarray/temp_elide.c; clang: numpy/core/src/multiarray/vdot.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_object.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/loops.c; clang:",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:66013,Availability,error,error,66013,"c; clang: numpy/core/src/multiarray/descriptor.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/einsum.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/lowlevel_strided_loops.c; clang: numpy/core/src/multiarray/hashdescr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/multiarraymodule.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/nditer_constr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/refcount.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/scalarapi.c; clang: numpy/core/src/multiarray/temp_elide.c; clang: numpy/core/src/multiarray/vdot.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_object.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/loops.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'falti",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:66175,Availability,error,error,66175," not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/lowlevel_strided_loops.c; clang: numpy/core/src/multiarray/hashdescr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/multiarraymodule.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/nditer_constr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/refcount.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/scalarapi.c; clang: numpy/core/src/multiarray/temp_elide.c; clang: numpy/core/src/multiarray/vdot.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_object.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/loops.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altive",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:66292,Availability,error,error,66292,"r does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/lowlevel_strided_loops.c; clang: numpy/core/src/multiarray/hashdescr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/multiarraymodule.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/nditer_constr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/refcount.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/scalarapi.c; clang: numpy/core/src/multiarray/temp_elide.c; clang: numpy/core/src/multiarray/vdot.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_object.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/loops.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_type_resolution.c; clang: error: the clang compiler does not s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:66543,Availability,error,error,66543,"oes not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/multiarraymodule.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/nditer_constr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/refcount.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/scalarapi.c; clang: numpy/core/src/multiarray/temp_elide.c; clang: numpy/core/src/multiarray/vdot.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_object.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/loops.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_type_resolution.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/common/array_assign.c; clang: numpy/core/src/common/ucsnarrow.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:66660,Availability,error,error,66660,"iler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/multiarraymodule.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/nditer_constr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/refcount.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/scalarapi.c; clang: numpy/core/src/multiarray/temp_elide.c; clang: numpy/core/src/multiarray/vdot.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_object.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/loops.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_type_resolution.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/common/array_assign.c; clang: numpy/core/src/common/ucsnarrow.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath/ieee754.c; clang: error: the",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:66890,Availability,error,error,66890," altivec.h explicitly; clang: numpy/core/src/multiarray/nditer_constr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/refcount.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/scalarapi.c; clang: numpy/core/src/multiarray/temp_elide.c; clang: numpy/core/src/multiarray/vdot.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_object.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/loops.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_type_resolution.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/common/array_assign.c; clang: numpy/core/src/common/ucsnarrow.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath/ieee754.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_buil",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:67007,Availability,error,error,67007,"not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/refcount.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/scalarapi.c; clang: numpy/core/src/multiarray/temp_elide.c; clang: numpy/core/src/multiarray/vdot.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_object.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/loops.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_type_resolution.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/common/array_assign.c; clang: numpy/core/src/common/ucsnarrow.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath/ieee754.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils/src/apple_sgemv_fix.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_cpu_features.c; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:67124,Availability,error,error,67124,"unt.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/scalarapi.c; clang: numpy/core/src/multiarray/temp_elide.c; clang: numpy/core/src/multiarray/vdot.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_object.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/loops.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_type_resolution.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/common/array_assign.c; clang: numpy/core/src/common/ucsnarrow.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath/ieee754.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils/src/apple_sgemv_fix.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_cpu_features.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:67294,Availability,error,error,67294,"altivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/scalarapi.c; clang: numpy/core/src/multiarray/temp_elide.c; clang: numpy/core/src/multiarray/vdot.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_object.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/loops.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_type_resolution.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/common/array_assign.c; clang: numpy/core/src/common/ucsnarrow.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath/ieee754.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils/src/apple_sgemv_fix.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_cpu_features.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltive",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:67498,Availability,error,error,67498,": error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_object.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/loops.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_type_resolution.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/common/array_assign.c; clang: numpy/core/src/common/ucsnarrow.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath/ieee754.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils/src/apple_sgemv_fix.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_cpu_features.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang comp",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:67688,Availability,error,error,67688,"ivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_object.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/loops.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_type_resolution.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/common/array_assign.c; clang: numpy/core/src/common/ucsnarrow.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath/ieee754.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils/src/apple_sgemv_fix.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_cpu_features.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altive",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:68052,Availability,error,error,68052,"altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_type_resolution.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/common/array_assign.c; clang: numpy/core/src/common/ucsnarrow.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath/ieee754.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils/src/apple_sgemv_fix.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_cpu_features.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; error: Command ""clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -i",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:68169,Availability,error,error,68169,"clude altivec.h explicitly; clang: numpy/core/src/umath/ufunc_type_resolution.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/common/array_assign.c; clang: numpy/core/src/common/ucsnarrow.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath/ieee754.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils/src/apple_sgemv_fix.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_cpu_features.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; error: Command ""clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebre",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:68286,Availability,error,error,68286,"s not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/common/array_assign.c; clang: numpy/core/src/common/ucsnarrow.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath/ieee754.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils/src/apple_sgemv_fix.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_cpu_features.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; error: Command ""clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -DNPY_INTERNAL_BUILD=1 -DHAVE_NPY_CONFIG_H=1 -D_FILE_OF",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:68403,Availability,error,error,68403,"ssign.c; clang: numpy/core/src/common/ucsnarrow.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath/ieee754.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils/src/apple_sgemv_fix.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_cpu_features.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; error: Command ""clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -DNPY_INTERNAL_BUILD=1 -DHAVE_NPY_CONFIG_H=1 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -DNO_ATLAS_INFO=3 -DHAVE_CBLAS -Ibuild/src.macosx-11.0-arm",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:68520,Availability,error,error,68520,"se use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath/ieee754.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils/src/apple_sgemv_fix.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_cpu_features.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; error: Command ""clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -DNPY_INTERNAL_BUILD=1 -DHAVE_NPY_CONFIG_H=1 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -DNO_ATLAS_INFO=3 -DHAVE_CBLAS -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/umath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -Ibuild/src.macosx-11.0-arm64-3.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:68637,Availability,error,error,68637,"754.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils/src/apple_sgemv_fix.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_cpu_features.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; error: Command ""clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -DNPY_INTERNAL_BUILD=1 -DHAVE_NPY_CONFIG_H=1 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -DNO_ATLAS_INFO=3 -DHAVE_CBLAS -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/umath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Inumpy/core/include -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:68754,Availability,error,error,68754,"citly; clang: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils/src/apple_sgemv_fix.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_cpu_features.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; error: Command ""clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -DNPY_INTERNAL_BUILD=1 -DHAVE_NPY_CONFIG_H=1 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -DNO_ATLAS_INFO=3 -DHAVE_CBLAS -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/umath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Inumpy/core/include -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:68871,Availability,error,error,68871,"77b5bb31c63d1/numpy/_build_utils/src/apple_sgemv_fix.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_cpu_features.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; error: Command ""clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -DNPY_INTERNAL_BUILD=1 -DHAVE_NPY_CONFIG_H=1 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -DNO_ATLAS_INFO=3 -DHAVE_CBLAS -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/umath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Inumpy/core/include -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:68981,Availability,error,error,68981,"oes not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; error: Command ""clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -DNPY_INTERNAL_BUILD=1 -DHAVE_NPY_CONFIG_H=1 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -DNO_ATLAS_INFO=3 -DHAVE_CBLAS -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/umath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Inumpy/core/include -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c numpy/core/src/multiarray/buffer.c -o build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o -MMD -MF build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o.d -falt",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:70326,Availability,ERROR,ERROR,70326,"RCE=1 -D_LARGEFILE64_SOURCE=1 -DNO_ATLAS_INFO=3 -DHAVE_CBLAS -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/umath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Inumpy/core/include -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c numpy/core/src/multiarray/buffer.c -o build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o -MMD -MF build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o.d -faltivec -I/System/Library/Frameworks/vecLib.framework/Headers"" failed with exit status 1; ----------------------------------------; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ----------------------------------------; WARNING: Discarding https://files.pythonhosted.org/packages/4c/72/42569d71f1643e581c8ad53073c0773cfadaa8f8cf12ac7599b9de01a9ec/qutip-4.6.2.tar.gz#sha256=9614e8e8270dd28728150c00f74ec750b9a2a23fb3b4fe629006f86dd02011df (from https://pypi.org/simple/qutip/). Command errored out with exit status 1: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0' Check the logs for full command output.; `",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:70389,Availability,ERROR,ERROR,70389,"RCE=1 -D_LARGEFILE64_SOURCE=1 -DNO_ATLAS_INFO=3 -DHAVE_CBLAS -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/umath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Inumpy/core/include -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c numpy/core/src/multiarray/buffer.c -o build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o -MMD -MF build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o.d -faltivec -I/System/Library/Frameworks/vecLib.framework/Headers"" failed with exit status 1; ----------------------------------------; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ----------------------------------------; WARNING: Discarding https://files.pythonhosted.org/packages/4c/72/42569d71f1643e581c8ad53073c0773cfadaa8f8cf12ac7599b9de01a9ec/qutip-4.6.2.tar.gz#sha256=9614e8e8270dd28728150c00f74ec750b9a2a23fb3b4fe629006f86dd02011df (from https://pypi.org/simple/qutip/). Command errored out with exit status 1: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0' Check the logs for full command output.; `",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:70797,Availability,error,errored,70797,"e -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c numpy/core/src/multiarray/buffer.c -o build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o -MMD -MF build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o.d -faltivec -I/System/Library/Frameworks/vecLib.framework/Headers"" failed with exit status 1; ----------------------------------------; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ----------------------------------------; WARNING: Discarding https://files.pythonhosted.org/packages/4c/72/42569d71f1643e581c8ad53073c0773cfadaa8f8cf12ac7599b9de01a9ec/qutip-4.6.2.tar.gz#sha256=9614e8e8270dd28728150c00f74ec750b9a2a23fb3b4fe629006f86dd02011df (from https://pypi.org/simple/qutip/). Command errored out with exit status 1: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0' Check the logs for full command output.; ```. ### Expected Behaviour. Qutip should build against a newer version of Numpy. ### Your Environment. Can't get output of `Qutip.about()`. MacBook Pro 2021 with M1 Pro. Python 3.9.* (miniconda and Miniforge). ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:21,Deployability,Install,Installing,21,"### Bug Description. Installing qutip with `pip install qutip` fails on a MacBook Pro with M1 Pro running macOS 12.0.1, due to the build dependency `numpy<1.20` failing to build. This happens both with miniconda python 3.9.6 and miniforge python 3.9.7. Same happens if I clone the master branch and build. If I edit `pyproject.toml` and `setup.cfg` to remove the `<1.20` in Numpy, then qutip builds correctly (then I get same problem as Issue #1606 when importing, but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:48,Deployability,install,install,48,"### Bug Description. Installing qutip with `pip install qutip` fails on a MacBook Pro with M1 Pro running macOS 12.0.1, due to the build dependency `numpy<1.20` failing to build. This happens both with miniconda python 3.9.6 and miniforge python 3.9.7. Same happens if I clone the master branch and build. If I edit `pyproject.toml` and `setup.cfg` to remove the `<1.20` in Numpy, then qutip builds correctly (then I get same problem as Issue #1606 when importing, but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:565,Deployability,install,install,565,"### Bug Description. Installing qutip with `pip install qutip` fails on a MacBook Pro with M1 Pro running macOS 12.0.1, due to the build dependency `numpy<1.20` failing to build. This happens both with miniconda python 3.9.6 and miniforge python 3.9.7. Same happens if I clone the master branch and build. If I edit `pyproject.toml` and `setup.cfg` to remove the `<1.20` in Numpy, then qutip builds correctly (then I get same problem as Issue #1606 when importing, but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:672,Deployability,Install,Installing,672,"### Bug Description. Installing qutip with `pip install qutip` fails on a MacBook Pro with M1 Pro running macOS 12.0.1, due to the build dependency `numpy<1.20` failing to build. This happens both with miniconda python 3.9.6 and miniforge python 3.9.7. Same happens if I clone the master branch and build. If I edit `pyproject.toml` and `setup.cfg` to remove the `<1.20` in Numpy, then qutip builds correctly (then I get same problem as Issue #1606 when importing, but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:943,Deployability,install,install,943," install qutip` fails on a MacBook Pro with M1 Pro running macOS 12.0.1, due to the build dependency `numpy<1.20` failing to build. This happens both with miniconda python 3.9.6 and miniforge python 3.9.7. Same happens if I clone the master branch and build. If I edit `pyproject.toml` and `setup.cfg` to remove the `<1.20` in Numpy, then qutip builds correctly (then I get same problem as Issue #1606 when importing, but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached sc",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:960,Deployability,install,installed,960," install qutip` fails on a MacBook Pro with M1 Pro running macOS 12.0.1, due to the build dependency `numpy<1.20` failing to build. This happens both with miniconda python 3.9.6 and miniforge python 3.9.7. Same happens if I clone the master branch and build. If I edit `pyproject.toml` and `setup.cfg` to remove the `<1.20` in Numpy, then qutip builds correctly (then I get same problem as Issue #1606 when importing, but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached sc",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:1685,Deployability,Install,Installing,1685,"/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Building wheel for numpy (pyproject.toml): finished with status 'error'; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmp8u8pmfcw_in_process.py build_wheel /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmpcrdfx79e; cwd: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1; Complete output (881 lines):; Running fr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:1725,Deployability,Install,Installing,1725,"/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Building wheel for numpy (pyproject.toml): finished with status 'error'; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmp8u8pmfcw_in_process.py build_wheel /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmpcrdfx79e; cwd: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1; Complete output (881 lines):; Running fr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:2706,Deployability,install,install-,2706,"build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Building wheel for numpy (pyproject.toml): finished with status 'error'; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmp8u8pmfcw_in_process.py build_wheel /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmpcrdfx79e; cwd: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1; Complete output (881 lines):; Running from numpy source directory.; numpy/random/_bounded_integers.pxd.in has not changed; numpy/random/_philox.pyx has not changed; numpy/random/_bounded_integers.pyx.in has not changed; numpy/random/_sfc64.pyx has not changed; numpy/random/_mt19937.pyx has not changed; numpy/random/bit_generator.pyx has not changed; Processing numpy/random/_bounded_integers.pyx; numpy/random/mtrand.pyx has not changed; numpy/random/_generator.pyx has not changed; numpy/random/_pcg64.pyx has not changed; numpy/random/_common.pyx has not changed; Cythonizing sources; blas_opt_info:; blas_mkl_info:; customize UnixCCompiler; libraries mkl_rt not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE; ; blis_info:; libraries blis not found in ['/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib', '/usr/local/lib', '/usr/lib']; NOT AVAILABLE;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:24075,Deployability,install,install,24075,.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/build_src.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/sdist.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/build_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/bdist_rpm.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/install_clib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/build_clib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/autodist.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/egg_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/install.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/develop.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/install_data.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/compaq.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/none.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/nag.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; co,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:63227,Deployability,install,install-,63227,kroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src/umath; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9/numpy/core/src/common; creating build/temp.macosx-11.0-arm64-3.9/private; creating build/temp.macosx-11.0-arm64-3.9/private/var; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils/src; compile options: '-DNPY_INTERNAL_BUILD=1 -DHAVE_NPY_CONFIG_H=1 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -DNO_ATLAS_INFO=3 -DHAVE_CBLAS -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/umath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -Ibuild/src,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:63347,Deployability,install,install-,63347,arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src/umath; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9/numpy/core/src/common; creating build/temp.macosx-11.0-arm64-3.9/private; creating build/temp.macosx-11.0-arm64-3.9/private/var; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils/src; compile options: '-DNPY_INTERNAL_BUILD=1 -DHAVE_NPY_CONFIG_H=1 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -DNO_ATLAS_INFO=3 -DHAVE_CBLAS -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/umath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Inumpy/core/include -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/sr,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:63506,Deployability,install,install-,63506,temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9/numpy/core/src/common; creating build/temp.macosx-11.0-arm64-3.9/private; creating build/temp.macosx-11.0-arm64-3.9/private/var; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils/src; compile options: '-DNPY_INTERNAL_BUILD=1 -DHAVE_NPY_CONFIG_H=1 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -DNO_ATLAS_INFO=3 -DHAVE_CBLAS -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/umath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Inumpy/core/include -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskro,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:63671,Deployability,install,install-,63671,mmon; creating build/temp.macosx-11.0-arm64-3.9/private; creating build/temp.macosx-11.0-arm64-3.9/private/var; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils/src; compile options: '-DNPY_INTERNAL_BUILD=1 -DHAVE_NPY_CONFIG_H=1 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -DNO_ATLAS_INFO=3 -DHAVE_CBLAS -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/umath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Inumpy/core/include -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c'; e,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:63849,Deployability,install,install-,63849,emp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils; creating build/temp.macosx-11.0-arm64-3.9/private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils/src; compile options: '-DNPY_INTERNAL_BUILD=1 -DHAVE_NPY_CONFIG_H=1 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -DNO_ATLAS_INFO=3 -DHAVE_CBLAS -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/umath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Inumpy/core/include -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c'; extra options: '-faltivec -I/System/Library/Frameworks/vecLib.framework/Headers'; clang: numpy/core/src/multiarray/array_assign_scalar.c; clang: numpy/core/src/multiarray/alloc.c; clang: numpy/core/src/multiarray/buffer.c; clang: numpy/core/src/multiarray/com,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:67866,Deployability,install,install-,67866,"h/loops.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/umath/ufunc_type_resolution.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/common/array_assign.c; clang: numpy/core/src/common/ucsnarrow.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath/ieee754.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1/numpy/_build_utils/src/apple_sgemv_fix.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_cpu_features.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: er",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:70451,Deployability,install,install,70451,"RCE=1 -D_LARGEFILE64_SOURCE=1 -DNO_ATLAS_INFO=3 -DHAVE_CBLAS -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/umath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Inumpy/core/include -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c numpy/core/src/multiarray/buffer.c -o build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o -MMD -MF build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o.d -faltivec -I/System/Library/Frameworks/vecLib.framework/Headers"" failed with exit status 1; ----------------------------------------; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ----------------------------------------; WARNING: Discarding https://files.pythonhosted.org/packages/4c/72/42569d71f1643e581c8ad53073c0773cfadaa8f8cf12ac7599b9de01a9ec/qutip-4.6.2.tar.gz#sha256=9614e8e8270dd28728150c00f74ec750b9a2a23fb3b4fe629006f86dd02011df (from https://pypi.org/simple/qutip/). Command errored out with exit status 1: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0' Check the logs for full command output.; `",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:71002,Deployability,install,install,71002,"e -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c numpy/core/src/multiarray/buffer.c -o build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o -MMD -MF build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o.d -faltivec -I/System/Library/Frameworks/vecLib.framework/Headers"" failed with exit status 1; ----------------------------------------; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ----------------------------------------; WARNING: Discarding https://files.pythonhosted.org/packages/4c/72/42569d71f1643e581c8ad53073c0773cfadaa8f8cf12ac7599b9de01a9ec/qutip-4.6.2.tar.gz#sha256=9614e8e8270dd28728150c00f74ec750b9a2a23fb3b4fe629006f86dd02011df (from https://pypi.org/simple/qutip/). Command errored out with exit status 1: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0' Check the logs for full command output.; ```. ### Expected Behaviour. Qutip should build against a newer version of Numpy. ### Your Environment. Can't get output of `Qutip.about()`. MacBook Pro 2021 with M1 Pro. Python 3.9.* (miniconda and Miniforge). ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:71019,Deployability,install,installed,71019,"e -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c numpy/core/src/multiarray/buffer.c -o build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o -MMD -MF build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o.d -faltivec -I/System/Library/Frameworks/vecLib.framework/Headers"" failed with exit status 1; ----------------------------------------; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ----------------------------------------; WARNING: Discarding https://files.pythonhosted.org/packages/4c/72/42569d71f1643e581c8ad53073c0773cfadaa8f8cf12ac7599b9de01a9ec/qutip-4.6.2.tar.gz#sha256=9614e8e8270dd28728150c00f74ec750b9a2a23fb3b4fe629006f86dd02011df (from https://pypi.org/simple/qutip/). Command errored out with exit status 1: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0' Check the logs for full command output.; ```. ### Expected Behaviour. Qutip should build against a newer version of Numpy. ### Your Environment. Can't get output of `Qutip.about()`. MacBook Pro 2021 with M1 Pro. Python 3.9.* (miniconda and Miniforge). ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:137,Integrability,depend,dependency,137,"### Bug Description. Installing qutip with `pip install qutip` fails on a MacBook Pro with M1 Pro running macOS 12.0.1, due to the build dependency `numpy<1.20` failing to build. This happens both with miniconda python 3.9.6 and miniforge python 3.9.7. Same happens if I clone the master branch and build. If I edit `pyproject.toml` and `setup.cfg` to remove the `<1.20` in Numpy, then qutip builds correctly (then I get same problem as Issue #1606 when importing, but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:689,Integrability,depend,dependencies,689,"### Bug Description. Installing qutip with `pip install qutip` fails on a MacBook Pro with M1 Pro running macOS 12.0.1, due to the build dependency `numpy<1.20` failing to build. This happens both with miniconda python 3.9.6 and miniforge python 3.9.7. Same happens if I clone the master branch and build. If I edit `pyproject.toml` and `setup.cfg` to remove the `<1.20` in Numpy, then qutip builds correctly (then I get same problem as Issue #1606 when importing, but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:1702,Integrability,depend,dependencies,1702,"/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Building wheel for numpy (pyproject.toml): finished with status 'error'; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmp8u8pmfcw_in_process.py build_wheel /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmpcrdfx79e; cwd: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1; Complete output (881 lines):; Running fr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:1742,Integrability,depend,dependencies,1742,"/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Building wheel for numpy (pyproject.toml): finished with status 'error'; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmp8u8pmfcw_in_process.py build_wheel /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmpcrdfx79e; cwd: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1; Complete output (881 lines):; Running fr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:8590,Modifiability,config,config,8590,"pt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries f77blas,cblas,atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries f77blas,cblas,atlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries f77blas,cblas,atlas not found in /usr/lib; <class 'numpy.distutils.system_info.atlas_info'>; NOT AVAILABLE; ; FOUND:; extra_compile_args = ['-faltivec', '-I/System/Library/Frameworks/vecLib.framework/Headers']; extra_link_args = ['-Wl,-framework', '-Wl,Accelerate']; define_macros = [('NO_ATLAS_INFO', 3), ('HAVE_CBLAS', None)]; ; /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/distutils/dist.py:274: UserWarning: Unknown distribution option: 'define_macros'; warnings.warn(msg); running bdist_wheel; running build; running config_cc; unifing config_cc, config, build_clib, build_ext, build commands --compiler options; running config_fc; unifing config_fc, config, build_clib, build_ext, build commands --fcompiler options; running build_src; build_src; building py_modules sources; building library ""npymath"" sources; adding 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath' to include_dirs.; None - nothing done with h_files = ['build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath/npy_math_internal.h']; building library ""npysort"" sources; adding 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/common' to include_dirs.; None - nothing done with h_files = ['build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_sort.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_partition.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_binsearch.h']; building library ""npyrandom"" sources; building extension ""numpy.core._multiarray_tests"" sources; building extension ""numpy.core._multiarray_umath"" sources; adding 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath' to include_dirs.; adding 'build/src.macosx-11.0-arm",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:8694,Modifiability,config,config,8694,"pt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries f77blas,cblas,atlas not found in /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib; libraries lapack_atlas not found in /usr/local/lib; libraries f77blas,cblas,atlas not found in /usr/local/lib; libraries lapack_atlas not found in /usr/lib; libraries f77blas,cblas,atlas not found in /usr/lib; <class 'numpy.distutils.system_info.atlas_info'>; NOT AVAILABLE; ; FOUND:; extra_compile_args = ['-faltivec', '-I/System/Library/Frameworks/vecLib.framework/Headers']; extra_link_args = ['-Wl,-framework', '-Wl,Accelerate']; define_macros = [('NO_ATLAS_INFO', 3), ('HAVE_CBLAS', None)]; ; /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/distutils/dist.py:274: UserWarning: Unknown distribution option: 'define_macros'; warnings.warn(msg); running bdist_wheel; running build; running config_cc; unifing config_cc, config, build_clib, build_ext, build commands --compiler options; running config_fc; unifing config_fc, config, build_clib, build_ext, build commands --fcompiler options; running build_src; build_src; building py_modules sources; building library ""npymath"" sources; adding 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath' to include_dirs.; None - nothing done with h_files = ['build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath/npy_math_internal.h']; building library ""npysort"" sources; adding 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/common' to include_dirs.; None - nothing done with h_files = ['build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_sort.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_partition.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/npy_binsearch.h']; building library ""npyrandom"" sources; building extension ""numpy.core._multiarray_tests"" sources; building extension ""numpy.core._multiarray_umath"" sources; adding 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath' to include_dirs.; adding 'build/src.macosx-11.0-arm",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:10393,Modifiability,config,config,10393,"py/core/src/common/npy_binsearch.h']; building library ""npyrandom"" sources; building extension ""numpy.core._multiarray_tests"" sources; building extension ""numpy.core._multiarray_umath"" sources; adding 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath' to include_dirs.; adding 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath' to include_dirs.; adding 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/common' to include_dirs.; numpy.core - nothing done with h_files = ['build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/funcs.inc', 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/simd.inc', 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/loops.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/matmul.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/umath/clip.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath/npy_math_internal.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/src/common/templ_common.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy/config.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy/_numpyconfig.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy/__multiarray_api.h', 'build/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy/__ufunc_api.h']; building extension ""numpy.core._umath_tests"" sources; building extension ""numpy.core._rational_tests"" sources; building extension ""numpy.core._struct_ufunc_tests"" sources; building extension ""numpy.core._operand_flag_tests"" sources; building extension ""numpy.fft._pocketfft_internal"" sources; building extension ""numpy.linalg.lapack_lite"" sources; building extension ""numpy.linalg._umath_linalg"" sources; building extension ""numpy.random._mt19937"" sources; building extension ""numpy.random._philox"" sources; building extension ""numpy.random._pcg64"" sources; building extension ""numpy.random._sfc64"" sources; building extension ""numpy.random._common"" sources; building extension ""numpy.random.bit_generator"" sources; building extension ""numpy.random._",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:11571,Modifiability,config,config,11571,"build/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy/__ufunc_api.h']; building extension ""numpy.core._umath_tests"" sources; building extension ""numpy.core._rational_tests"" sources; building extension ""numpy.core._struct_ufunc_tests"" sources; building extension ""numpy.core._operand_flag_tests"" sources; building extension ""numpy.fft._pocketfft_internal"" sources; building extension ""numpy.linalg.lapack_lite"" sources; building extension ""numpy.linalg._umath_linalg"" sources; building extension ""numpy.random._mt19937"" sources; building extension ""numpy.random._philox"" sources; building extension ""numpy.random._pcg64"" sources; building extension ""numpy.random._sfc64"" sources; building extension ""numpy.random._common"" sources; building extension ""numpy.random.bit_generator"" sources; building extension ""numpy.random._generator"" sources; building extension ""numpy.random._bounded_integers"" sources; building extension ""numpy.random.mtrand"" sources; building data_files sources; build_src: building npy-pkg config files; running build_py; creating build/lib.macosx-11.0-arm64-3.9; creating build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/conftest.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/version.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/_globals.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/dual.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/_distributor_init.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/_pytesttester.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying build/src.macosx-11.0-arm64-3.9/numpy/__config__.py -> build/lib.macosx-11.0-arm64-3.9/numpy; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/py3k",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:22812,Modifiability,config,config,22812,cosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/extension.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/msvccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/intelccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying build/src.macosx-11.0-arm64-3.9/numpy/distutils/__config__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/config_compiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/build_ext.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/install_headers.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/build_py.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/build_src.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/sdist.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/build_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/bdist_rpm.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/install_clib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/command; copying numpy/distutils/command/build_clib.py -> build/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45549,Modifiability,parameteriz,parameterized,45549,y/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_nump,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:636,Performance,cache,cached,636,"### Bug Description. Installing qutip with `pip install qutip` fails on a MacBook Pro with M1 Pro running macOS 12.0.1, due to the build dependency `numpy<1.20` failing to build. This happens both with miniconda python 3.9.6 and miniforge python 3.9.7. Same happens if I clone the master branch and build. If I edit `pyproject.toml` and `setup.cfg` to remove the `<1.20` in Numpy, then qutip builds correctly (then I get same problem as Issue #1606 when importing, but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:1324,Performance,cache,cached,1324,"d build. If I edit `pyproject.toml` and `setup.cfg` to remove the `<1.20` in Numpy, then qutip builds correctly (then I get same problem as Issue #1606 when importing, but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Build",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:1404,Performance,cache,cached,1404,"uilds correctly (then I get same problem as Issue #1606 when importing, but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Building wheel for numpy (pyproject.toml): finished with status 'error'; ERROR: Command errored out ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:1476,Performance,cache,cached,1476,"but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Building wheel for numpy (pyproject.toml): finished with status 'error'; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:1560,Performance,cache,cached,1560,"p install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Building wheel for numpy (pyproject.toml): finished with status 'error'; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmp8u8pmfcw_in_process.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:1651,Performance,cache,cached,1651,".tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Building wheel for numpy (pyproject.toml): finished with status 'error'; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmp8u8pmfcw_in_process.py build_wheel /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmpcrdfx79e; cwd: /private/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:2038,Performance,cache,cached,2038,"gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Building wheel for numpy (pyproject.toml): finished with status 'error'; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmp8u8pmfcw_in_process.py build_wheel /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmpcrdfx79e; cwd: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1; Complete output (881 lines):; Running from numpy source directory.; numpy/random/_bounded_integers.pxd.in has not changed; numpy/random/_philox.pyx has not changed; numpy/random/_bounded_integers.pyx.in has not changed; numpy/random/_sfc64.pyx has not changed; numpy/random/_mt1",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:2145,Performance,cache,cached,2145,"s://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl (97 kB); Building wheels for collected packages: numpy; Building wheel for numpy (pyproject.toml): started; Building wheel for numpy (pyproject.toml): finished with status 'error'; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmp8u8pmfcw_in_process.py build_wheel /var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/tmpcrdfx79e; cwd: /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-install-cp5z29tf/numpy_1458b1f38a5449d18aa77b5bb31c63d1; Complete output (881 lines):; Running from numpy source directory.; numpy/random/_bounded_integers.pxd.in has not changed; numpy/random/_philox.pyx has not changed; numpy/random/_bounded_integers.pyx.in has not changed; numpy/random/_sfc64.pyx has not changed; numpy/random/_mt19937.pyx has not changed; numpy/random/bit_generator.pyx has not changed; Processing numpy/random/_bounded_in",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:65539,Security,hash,hashdescr,65539,"rge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c'; extra options: '-faltivec -I/System/Library/Frameworks/vecLib.framework/Headers'; clang: numpy/core/src/multiarray/array_assign_scalar.c; clang: numpy/core/src/multiarray/alloc.c; clang: numpy/core/src/multiarray/buffer.c; clang: numpy/core/src/multiarray/common.c; clang: numpy/core/src/multiarray/conversion_utils.c; clang: numpy/core/src/multiarray/datetime_strings.c; clang: numpy/core/src/multiarray/descriptor.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/einsum.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/lowlevel_strided_loops.c; clang: numpy/core/src/multiarray/hashdescr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/multiarraymodule.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/nditer_constr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/refcount.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/scalarapi.c; clang: numpy/core/src/multiarray/temp_elide.c; clang: numpy/core/src/multiarra",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:12910,Testability,test,tests,12910, build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/dual.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/_distributor_init.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/_pytesttester.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying build/src.macosx-11.0-arm64-3.9/numpy/__config__.py -> build/lib.macosx-11.0-arm64-3.9/numpy; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/py3k.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/_inspect.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/test_compat.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/fromnumeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_add_newdocs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_internal.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_string_helpers.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_asarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/records.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:12938,Testability,test,tests,12938, build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/dual.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/_distributor_init.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/_pytesttester.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying build/src.macosx-11.0-arm64-3.9/numpy/__config__.py -> build/lib.macosx-11.0-arm64-3.9/numpy; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/py3k.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/_inspect.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/test_compat.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/fromnumeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_add_newdocs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_internal.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_string_helpers.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_asarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/records.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:13004,Testability,test,tests,13004,9/numpy; copying numpy/_distributor_init.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/_pytesttester.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying build/src.macosx-11.0-arm64-3.9/numpy/__config__.py -> build/lib.macosx-11.0-arm64-3.9/numpy; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/py3k.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/_inspect.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/test_compat.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/fromnumeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_add_newdocs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_internal.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_string_helpers.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_asarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/__init__.py -> build/lib.macosx-11.0-arm64-3.9/nu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:13032,Testability,test,tests,13032,9/numpy; copying numpy/_distributor_init.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/_pytesttester.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying build/src.macosx-11.0-arm64-3.9/numpy/__config__.py -> build/lib.macosx-11.0-arm64-3.9/numpy; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/py3k.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/_inspect.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/test_compat.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/fromnumeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_add_newdocs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_internal.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_string_helpers.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_asarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/__init__.py -> build/lib.macosx-11.0-arm64-3.9/nu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:13101,Testability,test,tests,13101,opying numpy/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/_pytesttester.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying build/src.macosx-11.0-arm64-3.9/numpy/__config__.py -> build/lib.macosx-11.0-arm64-3.9/numpy; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/py3k.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/_inspect.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/test_compat.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/fromnumeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_add_newdocs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_internal.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_string_helpers.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_asarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/setup_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/c,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:15707,Testability,test,tests,15707,-3.9/numpy/core; copying numpy/core/numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/einsumfunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath_tests.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_ufunc_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:15733,Testability,test,tests,15733,-3.9/numpy/core; copying numpy/core/numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/einsumfunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath_tests.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_ufunc_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:15806,Testability,test,tests,15806,g numpy/core/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/einsumfunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath_tests.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_ufunc_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> bu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:15832,Testability,test,tests,15832,g numpy/core/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/einsumfunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath_tests.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_ufunc_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> bu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:15907,Testability,test,tests,15907,sumfunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath_tests.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_ufunc_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> buil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:15933,Testability,test,tests,15933,sumfunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath_tests.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_ufunc_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> buil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16004,Testability,test,tests,16004,d/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_ufunc_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> buil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16030,Testability,test,tests,16030,d/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_ufunc_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> buil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16105,Testability,test,tests,16105,1.0-arm64-3.9/numpy/core; copying numpy/core/_exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16131,Testability,test,tests,16131,1.0-arm64-3.9/numpy/core; copying numpy/core/_exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16198,Testability,test,tests,16198,/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16224,Testability,test,tests,16224,/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16292,Testability,test,tests,16292,copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16318,Testability,test,tests,16318,copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16389,Testability,test,tests,16389,ore/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16415,Testability,test,tests,16415,ore/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16488,Testability,test,tests,16488, build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.ma,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16514,Testability,test,tests,16514, build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.ma,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16586,Testability,test,tests,16586,api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16612,Testability,test,tests,16612,api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16678,Testability,test,tests,16678,3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16704,Testability,test,tests,16704,3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16769,Testability,test,tests,16769,m64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/l,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16795,Testability,test,tests,16795,m64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/l,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16867,Testability,test,tests,16867,0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16893,Testability,test,tests,16893,0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16964,Testability,test,tests,16964,-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:16990,Testability,test,tests,16990,-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:17063,Testability,test,tests,17063,x-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:17089,Testability,test,tests,17089,x-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:17153,Testability,test,tests,17153,sx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> b,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:17179,Testability,test,tests,17179,sx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> b,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:17248,Testability,test,tests,17248,x-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:17274,Testability,test,tests,17274,x-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:17342,Testability,test,tests,17342,x-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:17368,Testability,test,tests,17368,x-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:17442,Testability,test,tests,17442,osx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:17468,Testability,test,tests,17468,osx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:17537,Testability,test,tests,17537,.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:17563,Testability,test,tests,17563,.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:17629,Testability,test,tests,17629,macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:17655,Testability,test,tests,17655,macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:17723,Testability,test,tests,17723,-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> b,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:17749,Testability,test,tests,17749,-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> b,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:17823,Testability,test,tests,17823,x-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/l,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:17849,Testability,test,tests,17849,x-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/l,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:17918,Testability,test,tests,17918,x-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> bu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:17944,Testability,test,tests,17944,x-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> bu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:18016,Testability,test,tests,18016,osx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:18042,Testability,test,tests,18042,osx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:18112,Testability,test,tests,18112,-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:18138,Testability,test,tests,18138,-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:18212,Testability,test,tests,18212,-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:18238,Testability,test,tests,18238,-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:18302,Testability,test,tests,18302,-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:18328,Testability,test,tests,18328,-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:18401,Testability,test,tests,18401,arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:18427,Testability,test,tests,18427,arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:18504,Testability,test,tests,18504,3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:18530,Testability,test,tests,18530,3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:18602,Testability,test,tests,18602,9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.maco,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:18628,Testability,test,tests,18628,9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.maco,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:18692,Testability,test,tests,18692,-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.ma,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:18718,Testability,test,tests,18718,-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.ma,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:18784,Testability,test,tests,18784,.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:18810,Testability,test,tests,18810,.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:18876,Testability,test,tests,18876,0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:18902,Testability,test,tests,18902,0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:18977,Testability,test,tests,18977,-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:19003,Testability,test,tests,19003,-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:19073,Testability,test,tests,19073,.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:19099,Testability,test,tests,19099,.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:19166,Testability,test,tests,19166,acosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/dis,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:19192,Testability,test,tests,19192,acosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/dis,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:19256,Testability,test,tests,19256,sx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/dist,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:19282,Testability,test,tests,19282,sx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/dist,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:19353,Testability,test,tests,19353,cosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/di,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:19379,Testability,test,tests,19379,cosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/di,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:19449,Testability,test,tests,19449,lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distuti,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:19475,Testability,test,tests,19475,lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distuti,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:19548,Testability,test,tests,19548,lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:19574,Testability,test,tests,19574,lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:19645,Testability,test,tests,19645,acosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:19671,Testability,test,tests,19671,acosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:19738,Testability,test,tests,19738,cosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/msvc9compiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:19764,Testability,test,tests,19764,cosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/msvc9compiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:19831,Testability,test,tests,19831,-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/msvc9compiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/d,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:19857,Testability,test,tests,19857,-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/msvc9compiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/d,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:19930,Testability,test,tests,19930,osx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/msvc9compiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:19956,Testability,test,tests,19956,osx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/msvc9compiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:20026,Testability,test,tests,20026,osx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/msvc9compiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/log.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/line_endings.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:20052,Testability,test,tests,20052,osx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/msvc9compiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/log.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/line_endings.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:20123,Testability,test,tests,20123,lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/msvc9compiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/log.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/line_endings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/lib2def,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:20948,Testability,log,log,20948,e/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/msvc9compiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/log.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/line_endings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/lib2def.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/pathccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distuti,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:26365,Testability,test,tests,26365,mpiler/lahey.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/g95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/mips.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/hpux.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/environment.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:26396,Testability,test,tests,26396,mpiler/lahey.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/g95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/mips.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/hpux.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/environment.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:26473,Testability,test,tests,26473,r/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/g95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/mips.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/hpux.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/environment.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcom,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:26504,Testability,test,tests,26504,r/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/g95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/mips.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/hpux.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/environment.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcom,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:26586,Testability,test,tests,26586,5.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/mips.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/hpux.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/environment.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fc,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:26617,Testability,test,tests,26617,5.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/mips.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/hpux.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/environment.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fc,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:26696,Testability,test,tests,26696,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/hpux.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/environment.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-a,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:26727,Testability,test,tests,26727,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/hpux.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/environment.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-a,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:26796,Testability,test,tests,26796,y -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/environment.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:26827,Testability,test,tests,26827,y -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/environment.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:26908,Testability,test,tests,26908,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:26939,Testability,test,tests,26939,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:27014,Testability,test,tests,27014,5.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:27045,Testability,test,tests,27045,5.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:27120,Testability,test,tests,27120,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py ->,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:27151,Testability,test,tests,27151,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py ->,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:27228,Testability,test,tests,27228,-> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/__init__.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:27259,Testability,test,tests,27259,-> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/__init__.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:27337,Testability,test,tests,27337,istutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/broadcasting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/b,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:27368,Testability,test,tests,27368,istutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/broadcasting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/b,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:27448,Testability,test,tests,27448,tils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/broadcasting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/basics.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/subclassing.py -> build/lib.macosx-11.0,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:27479,Testability,test,tests,27479,tils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/broadcasting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/basics.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/subclassing.py -> build/lib.macosx-11.0,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:27561,Testability,test,tests,27561,utils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/broadcasting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/basics.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:27592,Testability,test,tests,27592,utils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/broadcasting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/basics.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:27671,Testability,test,tests,27671,-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/broadcasting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/basics.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/byteswapping.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/structured,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:30251,Testability,test,tests,30251,umpy/f2py/rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py2e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/func2subr.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__version__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/diagnose.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/capi_maps.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:30277,Testability,test,tests,30277,umpy/f2py/rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py2e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/func2subr.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__version__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/diagnose.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/capi_maps.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:30343,Testability,test,tests,30343,> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/func2subr.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__version__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/diagnose.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/capi_maps.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:30369,Testability,test,tests,30369,> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/func2subr.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__version__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/diagnose.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/capi_maps.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:30444,Testability,test,tests,30444,0-arm64-3.9/numpy/f2py; copying numpy/f2py/__version__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/diagnose.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/capi_maps.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:30470,Testability,test,tests,30470,0-arm64-3.9/numpy/f2py; copying numpy/f2py/__version__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/diagnose.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/capi_maps.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:30544,Testability,test,tests,30544,py/f2py; copying numpy/f2py/diagnose.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/capi_maps.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:30570,Testability,test,tests,30570,py/f2py; copying numpy/f2py/diagnose.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/capi_maps.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:30637,Testability,test,tests,30637,ng numpy/f2py/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/capi_maps.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:30663,Testability,test,tests,30663,ng numpy/f2py/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/capi_maps.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:30728,Testability,test,tests,30728,s.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> buil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:30754,Testability,test,tests,30754,s.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> buil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:30831,Testability,test,tests,30831,acosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> bu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:30857,Testability,test,tests,30857,acosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> bu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:30929,Testability,test,tests,30929,-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:30955,Testability,test,tests,30955,-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:31015,Testability,test,tests,31015,9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_re,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:31041,Testability,test,tests,31041,9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_re,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:31106,Testability,test,tests,31106,opying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tes,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:31132,Testability,test,tests,31132,opying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tes,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:31201,Testability,test,tests,31201,b.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:31227,Testability,test,tests,31227,b.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:31294,Testability,test,tests,31294,b.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:31320,Testability,test,tests,31320,b.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:31384,Testability,test,tests,31384,ld/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creatin,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:31410,Testability,test,tests,31410,ld/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creatin,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:31487,Testability,test,tests,31487,ld/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:31513,Testability,test,tests,31513,ld/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:31583,Testability,test,tests,31583,.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:31609,Testability,test,tests,31609,.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:31685,Testability,test,tests,31685,0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:31711,Testability,test,tests,31711,0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:31788,Testability,test,tests,31788,0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests;,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:31814,Testability,test,tests,31814,0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests;,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:31890,Testability,test,tests,31890,rm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:31916,Testability,test,tests,31916,rm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:31991,Testability,test,tests,31991,2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:32017,Testability,test,tests,32017,2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:32094,Testability,test,tests,32094,copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-a,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:32120,Testability,test,tests,32120,copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-a,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:32195,Testability,test,tests,32195,ng numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:32221,Testability,test,tests,32221,ng numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:32294,Testability,test,tests,32294,mpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/nanfunctio,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:32320,Testability,test,tests,32320,mpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/nanfunctio,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:32391,Testability,test,tests,32391,g numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/recfunctions.py ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:32802,Testability,test,tests,32802,/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/scimath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/user_array.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:32827,Testability,test,tests,32827,/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/scimath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/user_array.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:32896,Testability,test,tests,32896,f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/scimath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/user_array.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:32921,Testability,test,tests,32921,f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/scimath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/user_array.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:32987,Testability,test,tests,32987,ying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/scimath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/user_array.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/fin,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:33012,Testability,test,tests,33012,ying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/scimath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/user_array.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/fin,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:33075,Testability,test,tests,33075,/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/scimath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/user_array.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/index_t,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:35194,Testability,test,tests,35194,opying numpy/lib/shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:35219,Testability,test,tests,35219,opying numpy/lib/shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:35289,Testability,test,tests,35289,b/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:35314,Testability,test,tests,35314,b/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:35379,Testability,test,tests,35379,> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:35404,Testability,test,tests,35404,> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:35475,Testability,test,tests,35475,0-arm64-3.9/numpy/lib; copying numpy/lib/arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:35500,Testability,test,tests,35500,0-arm64-3.9/numpy/lib; copying numpy/lib/arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:35570,Testability,test,tests,35570,mpy/lib; copying numpy/lib/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:35595,Testability,test,tests,35595,mpy/lib; copying numpy/lib/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:35663,Testability,test,tests,35663,ing numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:35688,Testability,test,tests,35688,ing numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:35758,Testability,test,tests,35758,raypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:35783,Testability,test,tests,35783,raypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:35852,Testability,test,tests,35852,d/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:35877,Testability,test,tests,35877,d/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:35949,Testability,test,tests,35949,.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm6,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:35974,Testability,test,tests,35974,.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm6,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:36037,Testability,test,tests,36037,numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:36062,Testability,test,tests,36062,numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:36134,Testability,test,tests,36134,g build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-a,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:36159,Testability,test,tests,36159,g build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-a,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:36227,Testability,test,tests,36227,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:36252,Testability,test,tests,36252,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:36314,Testability,test,tests,36314,y -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:36339,Testability,test,tests,36339,y -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:36410,Testability,test,tests,36410, -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-1,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:36435,Testability,test,tests,36435, -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-1,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:36508,Testability,test,tests,36508, -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:36533,Testability,test,tests,36533, -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:36601,Testability,test,tests,36601,y -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:36626,Testability,test,tests,36626,y -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:36692,Testability,test,tests,36692,e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/lin,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:36717,Testability,test,tests,36717,e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/lin,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:36785,Testability,test,tests,36785,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:36810,Testability,test,tests,36810,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:36881,Testability,test,tests,36881,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:36906,Testability,test,tests,36906,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:36979,Testability,test,tests,36979,uild/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/l,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:37004,Testability,test,tests,37004,uild/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/l,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:37073,Testability,test,tests,37073, build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:37098,Testability,test,tests,37098, build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:37170,Testability,test,tests,37170,ld/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:37195,Testability,test,tests,37195,ld/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:37267,Testability,test,tests,37267,macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/n,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:37292,Testability,test,tests,37292,macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/n,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:37358,Testability,test,tests,37358,ib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:37383,Testability,test,tests,37383,ib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:37453,Testability,test,tests,37453,d/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:37478,Testability,test,tests,37478,d/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:37548,Testability,test,tests,37548, -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:37905,Testability,test,tests,37905,ide_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:37933,Testability,test,tests,37933,ide_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:38002,Testability,test,tests,38002,cial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:38030,Testability,test,tests,38030,cial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:38105,Testability,test,tests,38105,ns.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/te,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:38133,Testability,test,tests,38133,ns.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/te,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:38199,Testability,test,tests,38199,ions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/te,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:38227,Testability,test,tests,38227,ions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/te,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:38295,Testability,test,tests,38295, -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecati,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:38323,Testability,test,tests,38323, -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecati,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:38396,Testability,test,tests,38396,ams.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:38543,Testability,test,testutils,38543,-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:39093,Testability,test,tests,39093,ts; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.maco,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:39117,Testability,test,tests,39117,ts; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.maco,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:39182,Testability,test,tests,39182,lg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrix,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:39206,Testability,test,tests,39206,lg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrix,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:39269,Testability,test,tests,39269,/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:39293,Testability,test,tests,39293,/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:39364,Testability,test,tests,39364,-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:39388,Testability,test,tests,39388,-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:39450,Testability,test,tests,39450,ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py ->,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:39474,Testability,test,tests,39474,ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py ->,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:39544,Testability,test,tests,39544,build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_i,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:39568,Testability,test,tests,39568,build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_i,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:39633,Testability,test,tests,39633,-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matr,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:39657,Testability,test,tests,39657,-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matr,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:39724,Testability,test,tests,39724,ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copyin,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:39748,Testability,test,tests,39748,ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copyin,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:39817,Testability,test,tests,39817,numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/nu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:40201,Testability,test,tests,40201,e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:40232,Testability,test,tests,40232,e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:40311,Testability,test,tests,40311,/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/pol,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:40342,Testability,test,tests,40342,/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/pol,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:40417,Testability,test,tests,40417,arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:40448,Testability,test,tests,40448,arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:40517,Testability,test,tests,40517,numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:40548,Testability,test,tests,40548,numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:40625,Testability,test,tests,40625,opying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:40656,Testability,test,tests,40656,opying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:40729,Testability,test,tests,40729,tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:40760,Testability,test,tests,40760,tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:40839,Testability,test,tests,40839,rm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/p,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:40870,Testability,test,tests,40870,rm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/p,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:40946,Testability,test,tests,40946,ixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:40977,Testability,test,tests,40977,ixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:41053,Testability,test,tests,41053,pying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:42079,Testability,test,tests,42079,-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:42111,Testability,test,tests,42111,-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:42187,Testability,test,tests,42187,ial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ran,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:42219,Testability,test,tests,42219,ial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ran,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:42295,Testability,test,tests,42295,y/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:42327,Testability,test,tests,42327,y/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:42404,Testability,test,tests,42404,init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:42436,Testability,test,tests,42436,init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:42506,Testability,test,tests,42506,d/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:42538,Testability,test,tests,42538,d/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:42613,Testability,test,tests,42613,0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying nu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:42645,Testability,test,tests,42645,0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying nu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:42720,Testability,test,tests,42720,y/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/r,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:42752,Testability,test,tests,42752,y/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/r,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:42827,Testability,test,tests,42827,opying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tes,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:42859,Testability,test,tests,42859,opying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tes,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:42933,Testability,test,tests,42933,ynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__i,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:42965,Testability,test,tests,42965,ynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__i,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:43039,Testability,test,tests,43039,4-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py ->,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:43071,Testability,test,tests,43071,4-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py ->,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:43147,Testability,test,tests,43147,cosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstat,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:43505,Testability,test,tests,43505,/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:43533,Testability,test,tests,43533,/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:43613,Testability,test,tests,43613,py/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/r,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:43641,Testability,test,tests,43641,py/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/r,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:43715,Testability,test,tests,43715,ying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:43743,Testability,test,tests,43743,ying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:43812,Testability,test,tests,43812,sts; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:43840,Testability,test,tests,43840,sts; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:43912,Testability,test,tests,43912,nomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:43940,Testability,test,tests,43940,nomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:44006,Testability,test,tests,44006,/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:44034,Testability,test,tests,44034,/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:44102,Testability,test,tests,44102,-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:44130,Testability,test,tests,44130,-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:44215,Testability,test,tests,44215,kle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:44243,Testability,test,tests,44243,kle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:44319,Testability,test,tests,44319,0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/n,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:44347,Testability,test,tests,44347,0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/n,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:44439,Testability,test,tests,44439,ating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:44467,Testability,test,tests,44467,ating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:44536,Testability,test,tests,44536,_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/param,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:44564,Testability,test,tests,44564,_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/param,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:44637,Testability,test,tests,44637,ests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:44691,Testability,test,testing,44691,/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/nu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:44714,Testability,test,testing,44714,/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/nu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:44775,Testability,test,testing,44775,arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests;,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:44798,Testability,test,testing,44798,arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests;,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:44856,Testability,test,testing,44856,ld/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:44879,Testability,test,testing,44879,ld/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:44937,Testability,test,testing,44937,> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:44960,Testability,test,testing,44960,> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45034,Testability,test,testing,45034,_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45090,Testability,test,testing,45090, numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45122,Testability,test,testing,45122, numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45194,Testability,test,testing,45194,s; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45226,Testability,test,testing,45226,s; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45296,Testability,test,testing,45296,ts; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45328,Testability,test,testing,45328,ts; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45401,Testability,test,testing,45401,9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying nump,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45433,Testability,test,testing,45433,9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying nump,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45500,Testability,test,testing,45500,y/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_nump,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45532,Testability,test,testing,45532,y/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_nump,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45607,Testability,test,testing,45607,dom/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45639,Testability,test,testing,45639,dom/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45711,Testability,test,testing,45711,nit__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45776,Testability,test,testing,45776,esting/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> bu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45784,Testability,test,tests,45784,esting/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> bu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45805,Testability,test,testing,45805,esting/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> bu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45813,Testability,test,tests,45813,esting/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> bu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45874,Testability,test,testing,45874,build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45882,Testability,test,tests,45882,build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45903,Testability,test,testing,45903,build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45911,Testability,test,tests,45911,build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45977,Testability,test,testing,45977,ld/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler usin,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:45985,Testability,test,tests,45985,ld/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler usin,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46006,Testability,test,testing,46006,ld/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler usin,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46014,Testability,test,tests,46014,ld/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler usin,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46073,Testability,test,testing,46073,_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-res,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46081,Testability,test,tests,46081,_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-res,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46102,Testability,test,testing,46102,_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-res,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46110,Testability,test,tests,46110,_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-res,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46176,Testability,test,testing,46176,umpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/h,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46184,Testability,test,tests,46184,umpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/h,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46238,Testability,test,tests,46238, -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm6,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46259,Testability,test,tests,46259, -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm6,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46323,Testability,test,tests,46323,rivate/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46344,Testability,test,tests,46344,rivate/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46406,Testability,test,tests,46406,ing numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46427,Testability,test,tests,46427,ing numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46492,Testability,test,tests,46492,ivate; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/numpy/core; creating bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46513,Testability,test,tests,46513,ivate; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/numpy/core; creating bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46582,Testability,test,tests,46582,-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/numpy/core; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src; creating build/temp.macosx-11.0-arm64-3,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46603,Testability,test,tests,46603,-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/numpy/core; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src; creating build/temp.macosx-11.0-arm64-3,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46662,Testability,test,tests,46662,lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/numpy/core; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src/npymath; creating build/temp.macosx-11.0-arm64-3.9/build; creatin,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46683,Testability,test,tests,46683,lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/numpy/core; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src/npymath; creating build/temp.macosx-11.0-arm64-3.9/build; creatin,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46748,Testability,test,tests,46748,-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/numpy/core; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src/npymath; creating build/temp.macosx-11.0-arm64-3.9/build; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9; creating build/temp,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46769,Testability,test,tests,46769,-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/numpy/core; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src/npymath; creating build/temp.macosx-11.0-arm64-3.9/build; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9; creating build/temp,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46835,Testability,test,tests,46835,x-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/numpy/core; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src/npymath; creating build/temp.macosx-11.0-arm64-3.9/build; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9/numpy; creating build/temp.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46856,Testability,test,tests,46856,x-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/numpy/core; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src/npymath; creating build/temp.macosx-11.0-arm64-3.9/build; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9/numpy; creating build/temp.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:46919,Testability,test,tests,46919,d/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/numpy/core; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src/npymath; creating build/temp.macosx-11.0-arm64-3.9/build; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9/numpy/core; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9/numpy/core/src; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath; compile options: '-Ibuild/src.macosx-11.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:59048,Testability,log,logfactorial,59048,omebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9/numpy/random; creating build/temp.macosx-11.0-arm64-3.9/numpy/random/src; creating build/temp.macosx-11.0-arm64-3.9/numpy/random/src/distributions; compile options: '-Inumpy/core/include -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c'; clang: numpy/random/src/distributions/distributions.c; clang: numpy/random/src/distributions/random_mvhg_marginals.c; clang: numpy/random/src/distributions/random_mvhg_count.c; clang: numpy/random/src/distributions/logfactorial.c; clang: numpy/random/src/distributions/random_hypergeometric.c; ar: adding 5 object files to build/temp.macosx-11.0-arm64-3.9/libnpyrandom.a; ranlib:@ build/temp.macosx-11.0-arm64-3.9/libnpyrandom.a; running build_ext; customize UnixCCompiler; customize UnixCCompiler using new_build_ext; building 'numpy.core._multiarray_tests' extension; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src/common; compile options: '-DNPY_INTERNAL_BUILD=1 -DHAVE_NPY_CONFIG_H=1 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -Inumpy/core/include -Ibu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:71322,Testability,log,logs,71322,"e -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c numpy/core/src/multiarray/buffer.c -o build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o -MMD -MF build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o.d -faltivec -I/System/Library/Frameworks/vecLib.framework/Headers"" failed with exit status 1; ----------------------------------------; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ----------------------------------------; WARNING: Discarding https://files.pythonhosted.org/packages/4c/72/42569d71f1643e581c8ad53073c0773cfadaa8f8cf12ac7599b9de01a9ec/qutip-4.6.2.tar.gz#sha256=9614e8e8270dd28728150c00f74ec750b9a2a23fb3b4fe629006f86dd02011df (from https://pypi.org/simple/qutip/). Command errored out with exit status 1: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0' Check the logs for full command output.; ```. ### Expected Behaviour. Qutip should build against a newer version of Numpy. ### Your Environment. Can't get output of `Qutip.about()`. MacBook Pro 2021 with M1 Pro. Python 3.9.* (miniconda and Miniforge). ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:1163,Usability,simpl,simple,1163,"appens both with miniconda python 3.9.6 and miniforge python 3.9.7. Same happens if I clone the master branch and build. If I edit `pyproject.toml` and `setup.cfg` to remove the `<1.20` in Numpy, then qutip builds correctly (then I get same problem as Issue #1606 when importing, but that's another story). ### Code to Reproduce the Bug. ```shell; conda create -n qutip_test; pip install qutip; ```. ### Code Output. ```shell; Collecting qutip; Using cached qutip-4.6.2.tar.gz (3.4 MB); Installing build dependencies ... error; ERROR: Command errored out with exit status 1:; command: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0'; cwd: None; Complete output (912 lines):; Collecting setuptools; Using cached setuptools-59.5.0-py3-none-any.whl (952 kB); Collecting packaging; Using cached packaging-21.3-py3-none-any.whl (40 kB); Collecting wheel; Using cached wheel-0.37.0-py2.py3-none-any.whl (35 kB); Collecting cython>=0.29.20; Using cached Cython-0.29.25-py2.py3-none-any.whl (983 kB); Collecting numpy<1.20,>=1.16.6; Using cached numpy-1.19.5.zip (7.3 MB); Installing build dependencies: started; Installing build dependencies: finished with status 'done'; Getting requirements to build wheel: started; Getting requirements to build wheel: finished with status 'done'; Preparing metadata (pyproject.toml): started; Preparing metadata (pyproject.toml): finished with status 'done'; Collecting scipy>=1.0; Using cached scipy-1.7.3-1-cp39-cp39-macosx_12_0_arm64.whl (27.0 MB); Collecting pyparsing!=3.0.5,>=2.0.2; Using cached pyparsing-3.0.6-py3-none-any.whl ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:70773,Usability,simpl,simple,70773,"e -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c numpy/core/src/multiarray/buffer.c -o build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o -MMD -MF build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o.d -faltivec -I/System/Library/Frameworks/vecLib.framework/Headers"" failed with exit status 1; ----------------------------------------; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ----------------------------------------; WARNING: Discarding https://files.pythonhosted.org/packages/4c/72/42569d71f1643e581c8ad53073c0773cfadaa8f8cf12ac7599b9de01a9ec/qutip-4.6.2.tar.gz#sha256=9614e8e8270dd28728150c00f74ec750b9a2a23fb3b4fe629006f86dd02011df (from https://pypi.org/simple/qutip/). Command errored out with exit status 1: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0' Check the logs for full command output.; ```. ### Expected Behaviour. Qutip should build against a newer version of Numpy. ### Your Environment. Can't get output of `Qutip.about()`. MacBook Pro 2021 with M1 Pro. Python 3.9.* (miniconda and Miniforge). ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/issues/1740:71222,Usability,simpl,simple,71222,"e -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/include/numpy -Inumpy/core/src/common -Inumpy/core/src -Inumpy/core -Inumpy/core/src/npymath -Inumpy/core/src/multiarray -Inumpy/core/src/umath -Inumpy/core/src/npysort -I/opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c numpy/core/src/multiarray/buffer.c -o build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o -MMD -MF build/temp.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/buffer.o.d -faltivec -I/System/Library/Frameworks/vecLib.framework/Headers"" failed with exit status 1; ----------------------------------------; ERROR: Failed building wheel for numpy; Failed to build numpy; ERROR: Could not build wheels for numpy, which is required to install pyproject.toml-based projects; ----------------------------------------; WARNING: Discarding https://files.pythonhosted.org/packages/4c/72/42569d71f1643e581c8ad53073c0773cfadaa8f8cf12ac7599b9de01a9ec/qutip-4.6.2.tar.gz#sha256=9614e8e8270dd28728150c00f74ec750b9a2a23fb3b4fe629006f86dd02011df (from https://pypi.org/simple/qutip/). Command errored out with exit status 1: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/bin/python3.9 /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-standalone-pip-g3h2vfu_/__env_pip__.zip/pip install --ignore-installed --no-user --prefix /private/var/folders/kj/vdvd_3693992wc4c9gm79hdr0000gn/T/pip-build-env-m9x0lkny/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools packaging wheel 'cython>=0.29.20' 'numpy>=1.16.6,<1.20' 'scipy>=1.0' Check the logs for full command output.; ```. ### Expected Behaviour. Qutip should build against a newer version of Numpy. ### Your Environment. Can't get output of `Qutip.about()`. MacBook Pro 2021 with M1 Pro. Python 3.9.* (miniconda and Miniforge). ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1740
https://github.com/qutip/qutip/pull/1741:26,Availability,error,error,26,**Description**; Raise an error instead of silently ignoring the offset when attempting to generate coherent states or density matrices with method 'operator' and non-zero offset. **Related issues or PRs**; * Small fix post #1469. **Changelog**; Fix silent ignoring of offset in coherent and coherent_dm when offset is non-zero. A ValueError is now raised instead.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1741
https://github.com/qutip/qutip/issues/1742:222,Usability,guid,guidelines,222,### Problem Description. I noticed that most of (if not all) the steps of the Contributing wiki can be automated via [**pre-commit**](https://pre-commit.com/). Manually going through all the required style conventions and guidelines would be a hassle. ### Proposed Solution. Having [**pre-commit**](https://pre-commit.com/) would make that process much easier and enforce that the developers follow coding conventions. ### Alternate Solutions. _No response_. ### Additional Context. _No response_,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1742
https://github.com/qutip/qutip/pull/1743:106,Deployability,update,updated,106,"**Description**. Edited the user guide documentation for Stochastic solvers. Text, equations, and example updated. **Related issues or PRs**; Related to issue #1706. **Changelog**. - Improved explanation of stochastic equation solvers.; - Added links for notebooks with examples for stochastic solvers.; - Added links to API documentation for smesolve, ssesolve, general_stochastic.; - New example highlighting the differences between result.expect and result.measurement.; - Added reference to Quantum Measurement and Control, Wiseman & Milburn (2009).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1743
https://github.com/qutip/qutip/pull/1743:33,Usability,guid,guide,33,"**Description**. Edited the user guide documentation for Stochastic solvers. Text, equations, and example updated. **Related issues or PRs**; Related to issue #1706. **Changelog**. - Improved explanation of stochastic equation solvers.; - Added links for notebooks with examples for stochastic solvers.; - Added links to API documentation for smesolve, ssesolve, general_stochastic.; - New example highlighting the differences between result.expect and result.measurement.; - Added reference to Quantum Measurement and Control, Wiseman & Milburn (2009).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1743
https://github.com/qutip/qutip/pull/1744:700,Availability,error,error,700,"**Checklist**; - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/). **Description**; Added ptrace specialisation tests. While adding these tests a bug came out with `ptrace_dense` which is now fixed. The problem was it did not work for `sel=[]`, that is, no selection and hence the full trace was required. The bug comes from how `numpy` works as the output of np.prod([]) is float instead of integer. . I wonder though what should be the behaviour for `qobj.ptrace([])`. Shouldit not be the same as `qobj.trace()`? `qobj.ptrace([])` currently returns a `Qobj` of dimensions 1x1 whereas `qobj.trace()` returns a complex number. **Changelog**; Fixed error with ptrace when the input and output are dense and `sel=[]`.; Added specialisations tests for ptrace.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1744
https://github.com/qutip/qutip/pull/1744:164,Testability,test,tests,164,"**Checklist**; - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/). **Description**; Added ptrace specialisation tests. While adding these tests a bug came out with `ptrace_dense` which is now fixed. The problem was it did not work for `sel=[]`, that is, no selection and hence the full trace was required. The bug comes from how `numpy` works as the output of np.prod([]) is float instead of integer. . I wonder though what should be the behaviour for `qobj.ptrace([])`. Shouldit not be the same as `qobj.trace()`? `qobj.ptrace([])` currently returns a `Qobj` of dimensions 1x1 whereas `qobj.trace()` returns a complex number. **Changelog**; Fixed error with ptrace when the input and output are dense and `sel=[]`.; Added specialisations tests for ptrace.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1744
https://github.com/qutip/qutip/pull/1744:190,Testability,test,tests,190,"**Checklist**; - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/). **Description**; Added ptrace specialisation tests. While adding these tests a bug came out with `ptrace_dense` which is now fixed. The problem was it did not work for `sel=[]`, that is, no selection and hence the full trace was required. The bug comes from how `numpy` works as the output of np.prod([]) is float instead of integer. . I wonder though what should be the behaviour for `qobj.ptrace([])`. Shouldit not be the same as `qobj.trace()`? `qobj.ptrace([])` currently returns a `Qobj` of dimensions 1x1 whereas `qobj.trace()` returns a complex number. **Changelog**; Fixed error with ptrace when the input and output are dense and `sel=[]`.; Added specialisations tests for ptrace.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1744
https://github.com/qutip/qutip/pull/1744:791,Testability,test,tests,791,"**Checklist**; - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/). **Description**; Added ptrace specialisation tests. While adding these tests a bug came out with `ptrace_dense` which is now fixed. The problem was it did not work for `sel=[]`, that is, no selection and hence the full trace was required. The bug comes from how `numpy` works as the output of np.prod([]) is float instead of integer. . I wonder though what should be the behaviour for `qobj.ptrace([])`. Shouldit not be the same as `qobj.trace()`? `qobj.ptrace([])` currently returns a `Qobj` of dimensions 1x1 whereas `qobj.trace()` returns a complex number. **Changelog**; Fixed error with ptrace when the input and output are dense and `sel=[]`.; Added specialisations tests for ptrace.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1744
https://github.com/qutip/qutip/pull/1745:700,Availability,error,error,700,"**Checklist**; - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/). **Description**; Added ptrace specialisation tests. While adding these tests a bug came out with `ptrace_dense` which is now fixed. The problem was it did not work for `sel=[]`, that is, no selection and hence the full trace was required. The bug comes from how `numpy` works as the output of np.prod([]) is float instead of integer. . I wonder though what should be the behaviour for `qobj.ptrace([])`. Shouldit not be the same as `qobj.trace()`? `qobj.ptrace([])` currently returns a `Qobj` of dimensions 1x1 whereas `qobj.trace()` returns a complex number. **Changelog**; Fixed error with ptrace when the input and output are dense and `sel=[]`.; Added specialisations tests for ptrace.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1745
https://github.com/qutip/qutip/pull/1745:164,Testability,test,tests,164,"**Checklist**; - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/). **Description**; Added ptrace specialisation tests. While adding these tests a bug came out with `ptrace_dense` which is now fixed. The problem was it did not work for `sel=[]`, that is, no selection and hence the full trace was required. The bug comes from how `numpy` works as the output of np.prod([]) is float instead of integer. . I wonder though what should be the behaviour for `qobj.ptrace([])`. Shouldit not be the same as `qobj.trace()`? `qobj.ptrace([])` currently returns a `Qobj` of dimensions 1x1 whereas `qobj.trace()` returns a complex number. **Changelog**; Fixed error with ptrace when the input and output are dense and `sel=[]`.; Added specialisations tests for ptrace.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1745
https://github.com/qutip/qutip/pull/1745:190,Testability,test,tests,190,"**Checklist**; - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/). **Description**; Added ptrace specialisation tests. While adding these tests a bug came out with `ptrace_dense` which is now fixed. The problem was it did not work for `sel=[]`, that is, no selection and hence the full trace was required. The bug comes from how `numpy` works as the output of np.prod([]) is float instead of integer. . I wonder though what should be the behaviour for `qobj.ptrace([])`. Shouldit not be the same as `qobj.trace()`? `qobj.ptrace([])` currently returns a `Qobj` of dimensions 1x1 whereas `qobj.trace()` returns a complex number. **Changelog**; Fixed error with ptrace when the input and output are dense and `sel=[]`.; Added specialisations tests for ptrace.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1745
https://github.com/qutip/qutip/pull/1745:791,Testability,test,tests,791,"**Checklist**; - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/). **Description**; Added ptrace specialisation tests. While adding these tests a bug came out with `ptrace_dense` which is now fixed. The problem was it did not work for `sel=[]`, that is, no selection and hence the full trace was required. The bug comes from how `numpy` works as the output of np.prod([]) is float instead of integer. . I wonder though what should be the behaviour for `qobj.ptrace([])`. Shouldit not be the same as `qobj.trace()`? `qobj.ptrace([])` currently returns a `Qobj` of dimensions 1x1 whereas `qobj.trace()` returns a complex number. **Changelog**; Fixed error with ptrace when the input and output are dense and `sel=[]`.; Added specialisations tests for ptrace.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1745
https://github.com/qutip/qutip/pull/1746:696,Availability,error,error,696,"**Checklist**; - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/). **Description**; Added ptrace specialisation tests. While adding these tests a bug came out with `ptrace_dense` which is now fixed. The problem was it did not work for `sel=[]`, that is, no selection and hence the full trace was required. The bug comes from how `numpy` works as the output of np.prod([]) is float instead of integer. . I wonder though what should be the behaviour for `qobj.ptrace([])`. Should it not be the same as `qobj.trace()`? `qobj.ptrace([])` currently returns a `Qobj` of shape 1x1 whereas `qobj.trace()` returns a complex number. **Changelog**; Fixed error with ptrace when the input and output are dense and `sel=[]`.; Added specialisations tests for ptrace.; Improved `ptrace` tests to test for edge cases (trace all and trace none).; Added a few more checks to catch invalid dims and raise ValueError.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1746
https://github.com/qutip/qutip/pull/1746:164,Testability,test,tests,164,"**Checklist**; - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/). **Description**; Added ptrace specialisation tests. While adding these tests a bug came out with `ptrace_dense` which is now fixed. The problem was it did not work for `sel=[]`, that is, no selection and hence the full trace was required. The bug comes from how `numpy` works as the output of np.prod([]) is float instead of integer. . I wonder though what should be the behaviour for `qobj.ptrace([])`. Should it not be the same as `qobj.trace()`? `qobj.ptrace([])` currently returns a `Qobj` of shape 1x1 whereas `qobj.trace()` returns a complex number. **Changelog**; Fixed error with ptrace when the input and output are dense and `sel=[]`.; Added specialisations tests for ptrace.; Improved `ptrace` tests to test for edge cases (trace all and trace none).; Added a few more checks to catch invalid dims and raise ValueError.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1746
https://github.com/qutip/qutip/pull/1746:190,Testability,test,tests,190,"**Checklist**; - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/). **Description**; Added ptrace specialisation tests. While adding these tests a bug came out with `ptrace_dense` which is now fixed. The problem was it did not work for `sel=[]`, that is, no selection and hence the full trace was required. The bug comes from how `numpy` works as the output of np.prod([]) is float instead of integer. . I wonder though what should be the behaviour for `qobj.ptrace([])`. Should it not be the same as `qobj.trace()`? `qobj.ptrace([])` currently returns a `Qobj` of shape 1x1 whereas `qobj.trace()` returns a complex number. **Changelog**; Fixed error with ptrace when the input and output are dense and `sel=[]`.; Added specialisations tests for ptrace.; Improved `ptrace` tests to test for edge cases (trace all and trace none).; Added a few more checks to catch invalid dims and raise ValueError.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1746
https://github.com/qutip/qutip/pull/1746:787,Testability,test,tests,787,"**Checklist**; - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/). **Description**; Added ptrace specialisation tests. While adding these tests a bug came out with `ptrace_dense` which is now fixed. The problem was it did not work for `sel=[]`, that is, no selection and hence the full trace was required. The bug comes from how `numpy` works as the output of np.prod([]) is float instead of integer. . I wonder though what should be the behaviour for `qobj.ptrace([])`. Should it not be the same as `qobj.trace()`? `qobj.ptrace([])` currently returns a `Qobj` of shape 1x1 whereas `qobj.trace()` returns a complex number. **Changelog**; Fixed error with ptrace when the input and output are dense and `sel=[]`.; Added specialisations tests for ptrace.; Improved `ptrace` tests to test for edge cases (trace all and trace none).; Added a few more checks to catch invalid dims and raise ValueError.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1746
https://github.com/qutip/qutip/pull/1746:824,Testability,test,tests,824,"**Checklist**; - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/). **Description**; Added ptrace specialisation tests. While adding these tests a bug came out with `ptrace_dense` which is now fixed. The problem was it did not work for `sel=[]`, that is, no selection and hence the full trace was required. The bug comes from how `numpy` works as the output of np.prod([]) is float instead of integer. . I wonder though what should be the behaviour for `qobj.ptrace([])`. Should it not be the same as `qobj.trace()`? `qobj.ptrace([])` currently returns a `Qobj` of shape 1x1 whereas `qobj.trace()` returns a complex number. **Changelog**; Fixed error with ptrace when the input and output are dense and `sel=[]`.; Added specialisations tests for ptrace.; Improved `ptrace` tests to test for edge cases (trace all and trace none).; Added a few more checks to catch invalid dims and raise ValueError.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1746
https://github.com/qutip/qutip/pull/1746:833,Testability,test,test,833,"**Checklist**; - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/). **Description**; Added ptrace specialisation tests. While adding these tests a bug came out with `ptrace_dense` which is now fixed. The problem was it did not work for `sel=[]`, that is, no selection and hence the full trace was required. The bug comes from how `numpy` works as the output of np.prod([]) is float instead of integer. . I wonder though what should be the behaviour for `qobj.ptrace([])`. Should it not be the same as `qobj.trace()`? `qobj.ptrace([])` currently returns a `Qobj` of shape 1x1 whereas `qobj.trace()` returns a complex number. **Changelog**; Fixed error with ptrace when the input and output are dense and `sel=[]`.; Added specialisations tests for ptrace.; Improved `ptrace` tests to test for edge cases (trace all and trace none).; Added a few more checks to catch invalid dims and raise ValueError.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1746
https://github.com/qutip/qutip/pull/1747:870,Deployability,Update,Update,870,"**Description**. Currently QuTiP's build requirements specify `numpy>=1.16.6<1.20` but this was really a guess at the correct numpy to build with and importantly, is the wrong guess for Python 3.10 which is only supported by numpy 1.20 and later. Instead we now depend on the `oldest-supported-numpy` package, which is maintained by the numpy and SciPy folk and should always provide the correct version of numpy to build with on a given platform. A previous version of this PR #1735 attempted to simultaneously add support for Python 3.10, but that turned out to be tricky because conda did not yet provide a pre-compiled SciPy for Python 3.10. This PR should allow QuTiP to be built locally for Python 3.10, but does not yet add official Python 3.10 builds. - [x] Remove the restriction to `numpy<1.20` in `setup.cfg` (numpy >= 1.20 is required by Python 3.10); - [x] Update the build process to explicitly build with the lowest supported numpy; - [x] While we're here, update to a more recent version of ciwheelbuild. . **Related issues or PRs**; * Fixes #1732; * Fixes #1720; * Fixes #1740; * We also need to update our conda-forge feedstock -- https://github.com/conda-forge/qutip-feedstock/pull/72; * Alternative very similar implementation from @henryiii in #1738 (thank you!); * Previous attempt in #1735 (that . **Changelog**; * Updated the build process to support building on Python 3.10 by removing the build requirement for `numpy < 1.20` and replacing it with a requirement on `oldest-supported-numpy`.; * Update the version of cibuildwheel used to build wheels to 2.3.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1747
https://github.com/qutip/qutip/pull/1747:972,Deployability,update,update,972,"**Description**. Currently QuTiP's build requirements specify `numpy>=1.16.6<1.20` but this was really a guess at the correct numpy to build with and importantly, is the wrong guess for Python 3.10 which is only supported by numpy 1.20 and later. Instead we now depend on the `oldest-supported-numpy` package, which is maintained by the numpy and SciPy folk and should always provide the correct version of numpy to build with on a given platform. A previous version of this PR #1735 attempted to simultaneously add support for Python 3.10, but that turned out to be tricky because conda did not yet provide a pre-compiled SciPy for Python 3.10. This PR should allow QuTiP to be built locally for Python 3.10, but does not yet add official Python 3.10 builds. - [x] Remove the restriction to `numpy<1.20` in `setup.cfg` (numpy >= 1.20 is required by Python 3.10); - [x] Update the build process to explicitly build with the lowest supported numpy; - [x] While we're here, update to a more recent version of ciwheelbuild. . **Related issues or PRs**; * Fixes #1732; * Fixes #1720; * Fixes #1740; * We also need to update our conda-forge feedstock -- https://github.com/conda-forge/qutip-feedstock/pull/72; * Alternative very similar implementation from @henryiii in #1738 (thank you!); * Previous attempt in #1735 (that . **Changelog**; * Updated the build process to support building on Python 3.10 by removing the build requirement for `numpy < 1.20` and replacing it with a requirement on `oldest-supported-numpy`.; * Update the version of cibuildwheel used to build wheels to 2.3.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1747
https://github.com/qutip/qutip/pull/1747:1113,Deployability,update,update,1113,"**Description**. Currently QuTiP's build requirements specify `numpy>=1.16.6<1.20` but this was really a guess at the correct numpy to build with and importantly, is the wrong guess for Python 3.10 which is only supported by numpy 1.20 and later. Instead we now depend on the `oldest-supported-numpy` package, which is maintained by the numpy and SciPy folk and should always provide the correct version of numpy to build with on a given platform. A previous version of this PR #1735 attempted to simultaneously add support for Python 3.10, but that turned out to be tricky because conda did not yet provide a pre-compiled SciPy for Python 3.10. This PR should allow QuTiP to be built locally for Python 3.10, but does not yet add official Python 3.10 builds. - [x] Remove the restriction to `numpy<1.20` in `setup.cfg` (numpy >= 1.20 is required by Python 3.10); - [x] Update the build process to explicitly build with the lowest supported numpy; - [x] While we're here, update to a more recent version of ciwheelbuild. . **Related issues or PRs**; * Fixes #1732; * Fixes #1720; * Fixes #1740; * We also need to update our conda-forge feedstock -- https://github.com/conda-forge/qutip-feedstock/pull/72; * Alternative very similar implementation from @henryiii in #1738 (thank you!); * Previous attempt in #1735 (that . **Changelog**; * Updated the build process to support building on Python 3.10 by removing the build requirement for `numpy < 1.20` and replacing it with a requirement on `oldest-supported-numpy`.; * Update the version of cibuildwheel used to build wheels to 2.3.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1747
https://github.com/qutip/qutip/pull/1747:1338,Deployability,Update,Updated,1338,"**Description**. Currently QuTiP's build requirements specify `numpy>=1.16.6<1.20` but this was really a guess at the correct numpy to build with and importantly, is the wrong guess for Python 3.10 which is only supported by numpy 1.20 and later. Instead we now depend on the `oldest-supported-numpy` package, which is maintained by the numpy and SciPy folk and should always provide the correct version of numpy to build with on a given platform. A previous version of this PR #1735 attempted to simultaneously add support for Python 3.10, but that turned out to be tricky because conda did not yet provide a pre-compiled SciPy for Python 3.10. This PR should allow QuTiP to be built locally for Python 3.10, but does not yet add official Python 3.10 builds. - [x] Remove the restriction to `numpy<1.20` in `setup.cfg` (numpy >= 1.20 is required by Python 3.10); - [x] Update the build process to explicitly build with the lowest supported numpy; - [x] While we're here, update to a more recent version of ciwheelbuild. . **Related issues or PRs**; * Fixes #1732; * Fixes #1720; * Fixes #1740; * We also need to update our conda-forge feedstock -- https://github.com/conda-forge/qutip-feedstock/pull/72; * Alternative very similar implementation from @henryiii in #1738 (thank you!); * Previous attempt in #1735 (that . **Changelog**; * Updated the build process to support building on Python 3.10 by removing the build requirement for `numpy < 1.20` and replacing it with a requirement on `oldest-supported-numpy`.; * Update the version of cibuildwheel used to build wheels to 2.3.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1747
https://github.com/qutip/qutip/pull/1747:1520,Deployability,Update,Update,1520,"**Description**. Currently QuTiP's build requirements specify `numpy>=1.16.6<1.20` but this was really a guess at the correct numpy to build with and importantly, is the wrong guess for Python 3.10 which is only supported by numpy 1.20 and later. Instead we now depend on the `oldest-supported-numpy` package, which is maintained by the numpy and SciPy folk and should always provide the correct version of numpy to build with on a given platform. A previous version of this PR #1735 attempted to simultaneously add support for Python 3.10, but that turned out to be tricky because conda did not yet provide a pre-compiled SciPy for Python 3.10. This PR should allow QuTiP to be built locally for Python 3.10, but does not yet add official Python 3.10 builds. - [x] Remove the restriction to `numpy<1.20` in `setup.cfg` (numpy >= 1.20 is required by Python 3.10); - [x] Update the build process to explicitly build with the lowest supported numpy; - [x] While we're here, update to a more recent version of ciwheelbuild. . **Related issues or PRs**; * Fixes #1732; * Fixes #1720; * Fixes #1740; * We also need to update our conda-forge feedstock -- https://github.com/conda-forge/qutip-feedstock/pull/72; * Alternative very similar implementation from @henryiii in #1738 (thank you!); * Previous attempt in #1735 (that . **Changelog**; * Updated the build process to support building on Python 3.10 by removing the build requirement for `numpy < 1.20` and replacing it with a requirement on `oldest-supported-numpy`.; * Update the version of cibuildwheel used to build wheels to 2.3.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1747
https://github.com/qutip/qutip/pull/1747:262,Integrability,depend,depend,262,"**Description**. Currently QuTiP's build requirements specify `numpy>=1.16.6<1.20` but this was really a guess at the correct numpy to build with and importantly, is the wrong guess for Python 3.10 which is only supported by numpy 1.20 and later. Instead we now depend on the `oldest-supported-numpy` package, which is maintained by the numpy and SciPy folk and should always provide the correct version of numpy to build with on a given platform. A previous version of this PR #1735 attempted to simultaneously add support for Python 3.10, but that turned out to be tricky because conda did not yet provide a pre-compiled SciPy for Python 3.10. This PR should allow QuTiP to be built locally for Python 3.10, but does not yet add official Python 3.10 builds. - [x] Remove the restriction to `numpy<1.20` in `setup.cfg` (numpy >= 1.20 is required by Python 3.10); - [x] Update the build process to explicitly build with the lowest supported numpy; - [x] While we're here, update to a more recent version of ciwheelbuild. . **Related issues or PRs**; * Fixes #1732; * Fixes #1720; * Fixes #1740; * We also need to update our conda-forge feedstock -- https://github.com/conda-forge/qutip-feedstock/pull/72; * Alternative very similar implementation from @henryiii in #1738 (thank you!); * Previous attempt in #1735 (that . **Changelog**; * Updated the build process to support building on Python 3.10 by removing the build requirement for `numpy < 1.20` and replacing it with a requirement on `oldest-supported-numpy`.; * Update the version of cibuildwheel used to build wheels to 2.3.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1747
https://github.com/qutip/qutip/pull/1748:27,Modifiability,refactor,refactor,27,"**Description**; This is a refactor of the changes from https://github.com/qutip/qutip/pull/1712. Previously, the logic which extracts the dimensions of the input and output Hilbert spaces of the involved quantum channels was spread out throughout `process_fidelity` and `_process_fidelity_to_id`. This PR collects it in a new private function `core.metrics._hilbert_space_dims`. This will also allow reducing `average_gate_fidelity` to `process_fidelity` (in a future PR) as explained in https://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html, without having to re-implement extracting the dimensions. **Related issues or PRs**; Part of the work on https://github.com/qutip/qutip/issues/1703. **Changelog**; refactor process_fidelity using new function _hilbert_space_dims",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1748
https://github.com/qutip/qutip/pull/1748:740,Modifiability,refactor,refactor,740,"**Description**; This is a refactor of the changes from https://github.com/qutip/qutip/pull/1712. Previously, the logic which extracts the dimensions of the input and output Hilbert spaces of the involved quantum channels was spread out throughout `process_fidelity` and `_process_fidelity_to_id`. This PR collects it in a new private function `core.metrics._hilbert_space_dims`. This will also allow reducing `average_gate_fidelity` to `process_fidelity` (in a future PR) as explained in https://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html, without having to re-implement extracting the dimensions. **Related issues or PRs**; Part of the work on https://github.com/qutip/qutip/issues/1703. **Changelog**; refactor process_fidelity using new function _hilbert_space_dims",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1748
https://github.com/qutip/qutip/pull/1748:114,Testability,log,logic,114,"**Description**; This is a refactor of the changes from https://github.com/qutip/qutip/pull/1712. Previously, the logic which extracts the dimensions of the input and output Hilbert spaces of the involved quantum channels was spread out throughout `process_fidelity` and `_process_fidelity_to_id`. This PR collects it in a new private function `core.metrics._hilbert_space_dims`. This will also allow reducing `average_gate_fidelity` to `process_fidelity` (in a future PR) as explained in https://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html, without having to re-implement extracting the dimensions. **Related issues or PRs**; Part of the work on https://github.com/qutip/qutip/issues/1703. **Changelog**; refactor process_fidelity using new function _hilbert_space_dims",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1748
https://github.com/qutip/qutip/pull/1748:522,Testability,stub,stubs,522,"**Description**; This is a refactor of the changes from https://github.com/qutip/qutip/pull/1712. Previously, the logic which extracts the dimensions of the input and output Hilbert spaces of the involved quantum channels was spread out throughout `process_fidelity` and `_process_fidelity_to_id`. This PR collects it in a new private function `core.metrics._hilbert_space_dims`. This will also allow reducing `average_gate_fidelity` to `process_fidelity` (in a future PR) as explained in https://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html, without having to re-implement extracting the dimensions. **Related issues or PRs**; Part of the work on https://github.com/qutip/qutip/issues/1703. **Changelog**; refactor process_fidelity using new function _hilbert_space_dims",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1748
https://github.com/qutip/qutip/issues/1750:26,Deployability,install,install,26,"I managed to successfully install QuTiP in conda, however, installation verification resulted in a FAILED test: test_steadystate.py::test_driven_cavity_power_gmres - Exception: power-gmres failed to find solution in 1000 iterations. Instead of getting a test report I also got an infinite loop returning what you can see on the image below. I installed qutip using:; ```; conda config --append channels conda-forge; conda install qutip. import qutip.testing; qutip.testing.run(). ```; Any ideas why this would happen?; Any tips will be highly appreciated:); ![imagen](https://user-images.githubusercontent.com/85493516/148128436-33f94558-327e-4bed-a921-7bff732bc5d5.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1750
https://github.com/qutip/qutip/issues/1750:59,Deployability,install,installation,59,"I managed to successfully install QuTiP in conda, however, installation verification resulted in a FAILED test: test_steadystate.py::test_driven_cavity_power_gmres - Exception: power-gmres failed to find solution in 1000 iterations. Instead of getting a test report I also got an infinite loop returning what you can see on the image below. I installed qutip using:; ```; conda config --append channels conda-forge; conda install qutip. import qutip.testing; qutip.testing.run(). ```; Any ideas why this would happen?; Any tips will be highly appreciated:); ![imagen](https://user-images.githubusercontent.com/85493516/148128436-33f94558-327e-4bed-a921-7bff732bc5d5.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1750
https://github.com/qutip/qutip/issues/1750:343,Deployability,install,installed,343,"I managed to successfully install QuTiP in conda, however, installation verification resulted in a FAILED test: test_steadystate.py::test_driven_cavity_power_gmres - Exception: power-gmres failed to find solution in 1000 iterations. Instead of getting a test report I also got an infinite loop returning what you can see on the image below. I installed qutip using:; ```; conda config --append channels conda-forge; conda install qutip. import qutip.testing; qutip.testing.run(). ```; Any ideas why this would happen?; Any tips will be highly appreciated:); ![imagen](https://user-images.githubusercontent.com/85493516/148128436-33f94558-327e-4bed-a921-7bff732bc5d5.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1750
https://github.com/qutip/qutip/issues/1750:422,Deployability,install,install,422,"I managed to successfully install QuTiP in conda, however, installation verification resulted in a FAILED test: test_steadystate.py::test_driven_cavity_power_gmres - Exception: power-gmres failed to find solution in 1000 iterations. Instead of getting a test report I also got an infinite loop returning what you can see on the image below. I installed qutip using:; ```; conda config --append channels conda-forge; conda install qutip. import qutip.testing; qutip.testing.run(). ```; Any ideas why this would happen?; Any tips will be highly appreciated:); ![imagen](https://user-images.githubusercontent.com/85493516/148128436-33f94558-327e-4bed-a921-7bff732bc5d5.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1750
https://github.com/qutip/qutip/issues/1750:177,Energy Efficiency,power,power-gmres,177,"I managed to successfully install QuTiP in conda, however, installation verification resulted in a FAILED test: test_steadystate.py::test_driven_cavity_power_gmres - Exception: power-gmres failed to find solution in 1000 iterations. Instead of getting a test report I also got an infinite loop returning what you can see on the image below. I installed qutip using:; ```; conda config --append channels conda-forge; conda install qutip. import qutip.testing; qutip.testing.run(). ```; Any ideas why this would happen?; Any tips will be highly appreciated:); ![imagen](https://user-images.githubusercontent.com/85493516/148128436-33f94558-327e-4bed-a921-7bff732bc5d5.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1750
https://github.com/qutip/qutip/issues/1750:378,Modifiability,config,config,378,"I managed to successfully install QuTiP in conda, however, installation verification resulted in a FAILED test: test_steadystate.py::test_driven_cavity_power_gmres - Exception: power-gmres failed to find solution in 1000 iterations. Instead of getting a test report I also got an infinite loop returning what you can see on the image below. I installed qutip using:; ```; conda config --append channels conda-forge; conda install qutip. import qutip.testing; qutip.testing.run(). ```; Any ideas why this would happen?; Any tips will be highly appreciated:); ![imagen](https://user-images.githubusercontent.com/85493516/148128436-33f94558-327e-4bed-a921-7bff732bc5d5.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1750
https://github.com/qutip/qutip/issues/1750:106,Testability,test,test,106,"I managed to successfully install QuTiP in conda, however, installation verification resulted in a FAILED test: test_steadystate.py::test_driven_cavity_power_gmres - Exception: power-gmres failed to find solution in 1000 iterations. Instead of getting a test report I also got an infinite loop returning what you can see on the image below. I installed qutip using:; ```; conda config --append channels conda-forge; conda install qutip. import qutip.testing; qutip.testing.run(). ```; Any ideas why this would happen?; Any tips will be highly appreciated:); ![imagen](https://user-images.githubusercontent.com/85493516/148128436-33f94558-327e-4bed-a921-7bff732bc5d5.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1750
https://github.com/qutip/qutip/issues/1750:254,Testability,test,test,254,"I managed to successfully install QuTiP in conda, however, installation verification resulted in a FAILED test: test_steadystate.py::test_driven_cavity_power_gmres - Exception: power-gmres failed to find solution in 1000 iterations. Instead of getting a test report I also got an infinite loop returning what you can see on the image below. I installed qutip using:; ```; conda config --append channels conda-forge; conda install qutip. import qutip.testing; qutip.testing.run(). ```; Any ideas why this would happen?; Any tips will be highly appreciated:); ![imagen](https://user-images.githubusercontent.com/85493516/148128436-33f94558-327e-4bed-a921-7bff732bc5d5.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1750
https://github.com/qutip/qutip/issues/1750:450,Testability,test,testing,450,"I managed to successfully install QuTiP in conda, however, installation verification resulted in a FAILED test: test_steadystate.py::test_driven_cavity_power_gmres - Exception: power-gmres failed to find solution in 1000 iterations. Instead of getting a test report I also got an infinite loop returning what you can see on the image below. I installed qutip using:; ```; conda config --append channels conda-forge; conda install qutip. import qutip.testing; qutip.testing.run(). ```; Any ideas why this would happen?; Any tips will be highly appreciated:); ![imagen](https://user-images.githubusercontent.com/85493516/148128436-33f94558-327e-4bed-a921-7bff732bc5d5.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1750
https://github.com/qutip/qutip/issues/1750:465,Testability,test,testing,465,"I managed to successfully install QuTiP in conda, however, installation verification resulted in a FAILED test: test_steadystate.py::test_driven_cavity_power_gmres - Exception: power-gmres failed to find solution in 1000 iterations. Instead of getting a test report I also got an infinite loop returning what you can see on the image below. I installed qutip using:; ```; conda config --append channels conda-forge; conda install qutip. import qutip.testing; qutip.testing.run(). ```; Any ideas why this would happen?; Any tips will be highly appreciated:); ![imagen](https://user-images.githubusercontent.com/85493516/148128436-33f94558-327e-4bed-a921-7bff732bc5d5.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1750
https://github.com/qutip/qutip/pull/1752:376,Availability,error,error,376,"**Description**. In the recently released numpy 1.22.0 the `__config__` attribute for the; published wheels (at least on the linux platforms I'm using) have; removed the `blas_opt_info` attribute and are instead publishing; identical information in the `blas_ilp64_opt_info` attribute. Running; qutip with the latest numpy release on these platforms was causing an; attribute error when `_blas_info()` is called as; `numpy.__config__.blas_opt_info` doesn't exist in the installed numpy.; This commit fixes this by first checking if the new name exists and; using that to get the blas opt info, and then trying the name available; in previous releases. This should maintain compatibility with older; numpy releases but fix the issue when running with 1.22.0. **Changelog**. Fix compatibility with numpy configuration in numpy's 1.22.0 release",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1752
https://github.com/qutip/qutip/pull/1752:619,Availability,avail,available,619,"**Description**. In the recently released numpy 1.22.0 the `__config__` attribute for the; published wheels (at least on the linux platforms I'm using) have; removed the `blas_opt_info` attribute and are instead publishing; identical information in the `blas_ilp64_opt_info` attribute. Running; qutip with the latest numpy release on these platforms was causing an; attribute error when `_blas_info()` is called as; `numpy.__config__.blas_opt_info` doesn't exist in the installed numpy.; This commit fixes this by first checking if the new name exists and; using that to get the blas opt info, and then trying the name available; in previous releases. This should maintain compatibility with older; numpy releases but fix the issue when running with 1.22.0. **Changelog**. Fix compatibility with numpy configuration in numpy's 1.22.0 release",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1752
https://github.com/qutip/qutip/pull/1752:33,Deployability,release,released,33,"**Description**. In the recently released numpy 1.22.0 the `__config__` attribute for the; published wheels (at least on the linux platforms I'm using) have; removed the `blas_opt_info` attribute and are instead publishing; identical information in the `blas_ilp64_opt_info` attribute. Running; qutip with the latest numpy release on these platforms was causing an; attribute error when `_blas_info()` is called as; `numpy.__config__.blas_opt_info` doesn't exist in the installed numpy.; This commit fixes this by first checking if the new name exists and; using that to get the blas opt info, and then trying the name available; in previous releases. This should maintain compatibility with older; numpy releases but fix the issue when running with 1.22.0. **Changelog**. Fix compatibility with numpy configuration in numpy's 1.22.0 release",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1752
https://github.com/qutip/qutip/pull/1752:323,Deployability,release,release,323,"**Description**. In the recently released numpy 1.22.0 the `__config__` attribute for the; published wheels (at least on the linux platforms I'm using) have; removed the `blas_opt_info` attribute and are instead publishing; identical information in the `blas_ilp64_opt_info` attribute. Running; qutip with the latest numpy release on these platforms was causing an; attribute error when `_blas_info()` is called as; `numpy.__config__.blas_opt_info` doesn't exist in the installed numpy.; This commit fixes this by first checking if the new name exists and; using that to get the blas opt info, and then trying the name available; in previous releases. This should maintain compatibility with older; numpy releases but fix the issue when running with 1.22.0. **Changelog**. Fix compatibility with numpy configuration in numpy's 1.22.0 release",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1752
https://github.com/qutip/qutip/pull/1752:470,Deployability,install,installed,470,"**Description**. In the recently released numpy 1.22.0 the `__config__` attribute for the; published wheels (at least on the linux platforms I'm using) have; removed the `blas_opt_info` attribute and are instead publishing; identical information in the `blas_ilp64_opt_info` attribute. Running; qutip with the latest numpy release on these platforms was causing an; attribute error when `_blas_info()` is called as; `numpy.__config__.blas_opt_info` doesn't exist in the installed numpy.; This commit fixes this by first checking if the new name exists and; using that to get the blas opt info, and then trying the name available; in previous releases. This should maintain compatibility with older; numpy releases but fix the issue when running with 1.22.0. **Changelog**. Fix compatibility with numpy configuration in numpy's 1.22.0 release",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1752
https://github.com/qutip/qutip/pull/1752:642,Deployability,release,releases,642,"**Description**. In the recently released numpy 1.22.0 the `__config__` attribute for the; published wheels (at least on the linux platforms I'm using) have; removed the `blas_opt_info` attribute and are instead publishing; identical information in the `blas_ilp64_opt_info` attribute. Running; qutip with the latest numpy release on these platforms was causing an; attribute error when `_blas_info()` is called as; `numpy.__config__.blas_opt_info` doesn't exist in the installed numpy.; This commit fixes this by first checking if the new name exists and; using that to get the blas opt info, and then trying the name available; in previous releases. This should maintain compatibility with older; numpy releases but fix the issue when running with 1.22.0. **Changelog**. Fix compatibility with numpy configuration in numpy's 1.22.0 release",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1752
https://github.com/qutip/qutip/pull/1752:705,Deployability,release,releases,705,"**Description**. In the recently released numpy 1.22.0 the `__config__` attribute for the; published wheels (at least on the linux platforms I'm using) have; removed the `blas_opt_info` attribute and are instead publishing; identical information in the `blas_ilp64_opt_info` attribute. Running; qutip with the latest numpy release on these platforms was causing an; attribute error when `_blas_info()` is called as; `numpy.__config__.blas_opt_info` doesn't exist in the installed numpy.; This commit fixes this by first checking if the new name exists and; using that to get the blas opt info, and then trying the name available; in previous releases. This should maintain compatibility with older; numpy releases but fix the issue when running with 1.22.0. **Changelog**. Fix compatibility with numpy configuration in numpy's 1.22.0 release",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1752
https://github.com/qutip/qutip/pull/1752:802,Deployability,configurat,configuration,802,"**Description**. In the recently released numpy 1.22.0 the `__config__` attribute for the; published wheels (at least on the linux platforms I'm using) have; removed the `blas_opt_info` attribute and are instead publishing; identical information in the `blas_ilp64_opt_info` attribute. Running; qutip with the latest numpy release on these platforms was causing an; attribute error when `_blas_info()` is called as; `numpy.__config__.blas_opt_info` doesn't exist in the installed numpy.; This commit fixes this by first checking if the new name exists and; using that to get the blas opt info, and then trying the name available; in previous releases. This should maintain compatibility with older; numpy releases but fix the issue when running with 1.22.0. **Changelog**. Fix compatibility with numpy configuration in numpy's 1.22.0 release",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1752
https://github.com/qutip/qutip/pull/1752:834,Deployability,release,release,834,"**Description**. In the recently released numpy 1.22.0 the `__config__` attribute for the; published wheels (at least on the linux platforms I'm using) have; removed the `blas_opt_info` attribute and are instead publishing; identical information in the `blas_ilp64_opt_info` attribute. Running; qutip with the latest numpy release on these platforms was causing an; attribute error when `_blas_info()` is called as; `numpy.__config__.blas_opt_info` doesn't exist in the installed numpy.; This commit fixes this by first checking if the new name exists and; using that to get the blas opt info, and then trying the name available; in previous releases. This should maintain compatibility with older; numpy releases but fix the issue when running with 1.22.0. **Changelog**. Fix compatibility with numpy configuration in numpy's 1.22.0 release",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1752
https://github.com/qutip/qutip/pull/1752:802,Modifiability,config,configuration,802,"**Description**. In the recently released numpy 1.22.0 the `__config__` attribute for the; published wheels (at least on the linux platforms I'm using) have; removed the `blas_opt_info` attribute and are instead publishing; identical information in the `blas_ilp64_opt_info` attribute. Running; qutip with the latest numpy release on these platforms was causing an; attribute error when `_blas_info()` is called as; `numpy.__config__.blas_opt_info` doesn't exist in the installed numpy.; This commit fixes this by first checking if the new name exists and; using that to get the blas opt info, and then trying the name available; in previous releases. This should maintain compatibility with older; numpy releases but fix the issue when running with 1.22.0. **Changelog**. Fix compatibility with numpy configuration in numpy's 1.22.0 release",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1752
https://github.com/qutip/qutip/issues/1753:614,Deployability,install,install,614,"### Bug Description. When trying to reproduce the [code for the quip-qip paper](https://github.com/boxili/qutip-qip-paper), I'm running into an; ~~~; AttributeError: module 'numpy.__config__' has no attribute 'blas_opt_info'; ~~~. The full stacktrace indicates that the problem is in the QuTiP code, so I'm reporting it here. Looks like https://github.com/qutip/qutip/issues/1750#issuecomment-1005876725 also ran into this. ### Code to Reproduce the Bug. ```shell; goerz@ophelia(r) main:~/Documents/qutipqip/> python3.8 -m venv venv; goerz@ophelia(r) main:~/Documents/qutipqip/qutip-qip> ../venv/bin/python -m pip install -e .[full]; goerz@ophelia(r) main:~/Documents/qutipqip/qutip-qip> ../venv/bin/python -m pip install joblib; goerz@ophelia(r) main:~/Documents/qutipqip/qutip-qip-paper> ../venv/bin/python dj_algorithm.py; ```. ### Code Output. ```shell; Traceback (most recent call last):; File ""dj_algorithm.py"", line 28, in <module>; from qutip_qip.device import OptPulseProcessor, LinearSpinChain, SCQubits; File ""/Users/goerz/Documents/qutipqip/qutip-qip/src/qutip_qip/device/__init__.py"", line 4, in <module>; from .processor import Processor, Model; File ""/Users/goerz/Documents/qutipqip/qutip-qip/src/qutip_qip/device/processor.py"", line 9, in <module>; import qutip; File ""/Users/goerz/Documents/qutipqip/venv/lib/python3.8/site-packages/qutip/__init__.py"", line 73, in <module>; (_blas_info() == ""OPENBLAS"" and platform.system() == 'Darwin'); File ""/Users/goerz/Documents/qutipqip/venv/lib/python3.8/site-packages/qutip/utilities.py"", line 430, in _blas_info; blas_info = config.blas_opt_info; AttributeError: module 'numpy.__config__' has no attribute 'blas_opt_info'; ```. ### Expected Behaviour. It should run the example :-). ### Your Environment. ```shell; goerz@ophelia(r) main:~/Documents/qutipqip/qutip-qip-paper> ../venv/bin/pip freeze; attrs==21.4.0; cycler==0.11.0; fonttools==4.28.5; iniconfig==1.1.1; joblib==1.1.0; kiwisolver==1.3.2; matplotlib==3.5.1; numpy==1.22.0; packag",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1753
https://github.com/qutip/qutip/issues/1753:714,Deployability,install,install,714,"### Bug Description. When trying to reproduce the [code for the quip-qip paper](https://github.com/boxili/qutip-qip-paper), I'm running into an; ~~~; AttributeError: module 'numpy.__config__' has no attribute 'blas_opt_info'; ~~~. The full stacktrace indicates that the problem is in the QuTiP code, so I'm reporting it here. Looks like https://github.com/qutip/qutip/issues/1750#issuecomment-1005876725 also ran into this. ### Code to Reproduce the Bug. ```shell; goerz@ophelia(r) main:~/Documents/qutipqip/> python3.8 -m venv venv; goerz@ophelia(r) main:~/Documents/qutipqip/qutip-qip> ../venv/bin/python -m pip install -e .[full]; goerz@ophelia(r) main:~/Documents/qutipqip/qutip-qip> ../venv/bin/python -m pip install joblib; goerz@ophelia(r) main:~/Documents/qutipqip/qutip-qip-paper> ../venv/bin/python dj_algorithm.py; ```. ### Code Output. ```shell; Traceback (most recent call last):; File ""dj_algorithm.py"", line 28, in <module>; from qutip_qip.device import OptPulseProcessor, LinearSpinChain, SCQubits; File ""/Users/goerz/Documents/qutipqip/qutip-qip/src/qutip_qip/device/__init__.py"", line 4, in <module>; from .processor import Processor, Model; File ""/Users/goerz/Documents/qutipqip/qutip-qip/src/qutip_qip/device/processor.py"", line 9, in <module>; import qutip; File ""/Users/goerz/Documents/qutipqip/venv/lib/python3.8/site-packages/qutip/__init__.py"", line 73, in <module>; (_blas_info() == ""OPENBLAS"" and platform.system() == 'Darwin'); File ""/Users/goerz/Documents/qutipqip/venv/lib/python3.8/site-packages/qutip/utilities.py"", line 430, in _blas_info; blas_info = config.blas_opt_info; AttributeError: module 'numpy.__config__' has no attribute 'blas_opt_info'; ```. ### Expected Behaviour. It should run the example :-). ### Your Environment. ```shell; goerz@ophelia(r) main:~/Documents/qutipqip/qutip-qip-paper> ../venv/bin/pip freeze; attrs==21.4.0; cycler==0.11.0; fonttools==4.28.5; iniconfig==1.1.1; joblib==1.1.0; kiwisolver==1.3.2; matplotlib==3.5.1; numpy==1.22.0; packag",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1753
https://github.com/qutip/qutip/issues/1753:1585,Modifiability,config,config,1585,"utip/qutip/issues/1750#issuecomment-1005876725 also ran into this. ### Code to Reproduce the Bug. ```shell; goerz@ophelia(r) main:~/Documents/qutipqip/> python3.8 -m venv venv; goerz@ophelia(r) main:~/Documents/qutipqip/qutip-qip> ../venv/bin/python -m pip install -e .[full]; goerz@ophelia(r) main:~/Documents/qutipqip/qutip-qip> ../venv/bin/python -m pip install joblib; goerz@ophelia(r) main:~/Documents/qutipqip/qutip-qip-paper> ../venv/bin/python dj_algorithm.py; ```. ### Code Output. ```shell; Traceback (most recent call last):; File ""dj_algorithm.py"", line 28, in <module>; from qutip_qip.device import OptPulseProcessor, LinearSpinChain, SCQubits; File ""/Users/goerz/Documents/qutipqip/qutip-qip/src/qutip_qip/device/__init__.py"", line 4, in <module>; from .processor import Processor, Model; File ""/Users/goerz/Documents/qutipqip/qutip-qip/src/qutip_qip/device/processor.py"", line 9, in <module>; import qutip; File ""/Users/goerz/Documents/qutipqip/venv/lib/python3.8/site-packages/qutip/__init__.py"", line 73, in <module>; (_blas_info() == ""OPENBLAS"" and platform.system() == 'Darwin'); File ""/Users/goerz/Documents/qutipqip/venv/lib/python3.8/site-packages/qutip/utilities.py"", line 430, in _blas_info; blas_info = config.blas_opt_info; AttributeError: module 'numpy.__config__' has no attribute 'blas_opt_info'; ```. ### Expected Behaviour. It should run the example :-). ### Your Environment. ```shell; goerz@ophelia(r) main:~/Documents/qutipqip/qutip-qip-paper> ../venv/bin/pip freeze; attrs==21.4.0; cycler==0.11.0; fonttools==4.28.5; iniconfig==1.1.1; joblib==1.1.0; kiwisolver==1.3.2; matplotlib==3.5.1; numpy==1.22.0; packaging==21.3; Pillow==9.0.0; pluggy==1.0.0; py==1.11.0; pyparsing==3.0.6; pytest==6.2.5; python-dateutil==2.8.2; qutip==4.6.2; -e git+git@github.com:qutip/qutip-qip.git@04962ded1f6f21620f06f52869b61c4f392e9dea#egg=qutip_qip; scipy==1.7.3; six==1.16.0; toml==0.10.2; ```. ### Additional Context. `import qutip` (for `qutip.about()`) also triggers the backtrace",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1753
https://github.com/qutip/qutip/issues/1755:375,Availability,FAILURE,FAILURES,375,"### Bug Description. Some tests of qutip.testing.run() fail on master on a MacBook Pro (2021) with M1. Qutip was installed on a miniforge python 3.9.9 distribution. ### Code to Reproduce the Bug. ```shell; import qutip.testing; qutip.testing.run(); ```. ### Code Output. ```shell; ============================================================================================= FAILURES ==============================================================================================; _________________________________________________________________________________________ test_dqd_current __________________________________________________________________________________________. def test_dqd_current():; ""Counting statistics: current and current noise in a DQD model""; ; G = 0; L = 1; R = 2; ; sz = qutip.projection(3, L, L) - qutip.projection(3, R, R); sx = qutip.projection(3, L, R) + qutip.projection(3, R, L); sR = qutip.projection(3, G, R); sL = qutip.projection(3, G, L); ; w0 = 1; tc = 0.6 * w0; GammaR = 0.0075 * w0; GammaL = 0.0075 * w0; nth = 0.00; eps_vec = np.linspace(-1.5*w0, 1.5*w0, 20); ; J_ops = [GammaR * qutip.sprepost(sR, sR.dag())]; ; c_ops = [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:2289,Availability,toler,tolerance,2289,"* sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.01597663; E Max relative difference: 11.81715334; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.017329, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no shuffle] __________________________________________________________________________. circuit = <qutip.qip.circuit.QubitCircuit ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:113,Deployability,install,installed,113,"### Bug Description. Some tests of qutip.testing.run() fail on master on a MacBook Pro (2021) with M1. Qutip was installed on a miniforge python 3.9.9 distribution. ### Code to Reproduce the Bug. ```shell; import qutip.testing; qutip.testing.run(); ```. ### Code Output. ```shell; ============================================================================================= FAILURES ==============================================================================================; _________________________________________________________________________________________ test_dqd_current __________________________________________________________________________________________. def test_dqd_current():; ""Counting statistics: current and current noise in a DQD model""; ; G = 0; L = 1; R = 2; ; sz = qutip.projection(3, L, L) - qutip.projection(3, R, R); sx = qutip.projection(3, L, R) + qutip.projection(3, R, L); sR = qutip.projection(3, G, R); sL = qutip.projection(3, G, L); ; w0 = 1; tc = 0.6 * w0; GammaR = 0.0075 * w0; GammaL = 0.0075 * w0; nth = 0.00; eps_vec = np.linspace(-1.5*w0, 1.5*w0, 20); ; J_ops = [GammaR * qutip.sprepost(sR, sR.dag())]; ; c_ops = [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:18033,Deployability,Install,Installed,18033,"================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0.dev0+3ff3f42; Numpy Version: 1.20.3; Scipy Version: 1.7.3; Cython Version: None; Matplotlib Version: None; Python Version: 3.9.9; Number of CPUs: 10; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:18104,Deployability,Install,Installation,18104,"================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0.dev0+3ff3f42; Numpy Version: 1.20.3; Scipy Version: 1.7.3; Cython Version: None; Matplotlib Version: None; Python Version: 3.9.9; Number of CPUs: 10; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:3792,Energy Efficiency,schedul,scheduler,3792,"0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no shuffle] __________________________________________________________________________. circuit = <qutip.qip.circuit.QubitCircuit object at 0x12c081640>, method = 'ALAP', expected_length = 5, random_shuffle = False, gates_schedule = False. @pytest.mark.parametrize(; ""circuit, method, expected_length, random_shuffle, gates_schedule"",; [; pytest.param(deepcopy(_circuit2()), ""ALAP"", 5, False, False, id=""circuit2 ALAP no shuffle""); ]); def test_scheduling_gates3(; circuit, method, expected_length, random_shuffle, gates_schedule):; if random_shuffle:; repeat_num = 5; else:; repeat_num = 0; result0 = gate_sequence_product(circuit.propagators()); ; # run the scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:3803,Energy Efficiency,schedul,scheduler,3803,"0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no shuffle] __________________________________________________________________________. circuit = <qutip.qip.circuit.QubitCircuit object at 0x12c081640>, method = 'ALAP', expected_length = 5, random_shuffle = False, gates_schedule = False. @pytest.mark.parametrize(; ""circuit, method, expected_length, random_shuffle, gates_schedule"",; [; pytest.param(deepcopy(_circuit2()), ""ALAP"", 5, False, False, id=""circuit2 ALAP no shuffle""); ]); def test_scheduling_gates3(; circuit, method, expected_length, random_shuffle, gates_schedule):; if random_shuffle:; repeat_num = 5; else:; repeat_num = 0; result0 = gate_sequence_product(circuit.propagators()); ; # run the scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:3815,Energy Efficiency,Schedul,Scheduler,3815,"0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no shuffle] __________________________________________________________________________. circuit = <qutip.qip.circuit.QubitCircuit object at 0x12c081640>, method = 'ALAP', expected_length = 5, random_shuffle = False, gates_schedule = False. @pytest.mark.parametrize(; ""circuit, method, expected_length, random_shuffle, gates_schedule"",; [; pytest.param(deepcopy(_circuit2()), ""ALAP"", 5, False, False, id=""circuit2 ALAP no shuffle""); ]); def test_scheduling_gates3(; circuit, method, expected_length, random_shuffle, gates_schedule):; if random_shuffle:; repeat_num = 5; else:; repeat_num = 0; result0 = gate_sequence_product(circuit.propagators()); ; # run the scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:3855,Energy Efficiency,schedul,scheduler,3855,"0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no shuffle] __________________________________________________________________________. circuit = <qutip.qip.circuit.QubitCircuit object at 0x12c081640>, method = 'ALAP', expected_length = 5, random_shuffle = False, gates_schedule = False. @pytest.mark.parametrize(; ""circuit, method, expected_length, random_shuffle, gates_schedule"",; [; pytest.param(deepcopy(_circuit2()), ""ALAP"", 5, False, False, id=""circuit2 ALAP no shuffle""); ]); def test_scheduling_gates3(; circuit, method, expected_length, random_shuffle, gates_schedule):; if random_shuffle:; repeat_num = 5; else:; repeat_num = 0; result0 = gate_sequence_product(circuit.propagators()); ; # run the scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:3865,Energy Efficiency,schedul,schedule,3865,"ges/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no shuffle] __________________________________________________________________________. circuit = <qutip.qip.circuit.QubitCircuit object at 0x12c081640>, method = 'ALAP', expected_length = 5, random_shuffle = False, gates_schedule = False. @pytest.mark.parametrize(; ""circuit, method, expected_length, random_shuffle, gates_schedule"",; [; pytest.param(deepcopy(_circuit2()), ""ALAP"", 5, False, False, id=""circuit2 ALAP no shuffle""); ]); def test_scheduling_gates3(; circuit, method, expected_length, random_shuffle, gates_schedule):; if random_shuffle:; repeat_num = 5; else:; repeat_num = 0; result0 = gate_sequence_product(circuit.propagators()); ; # run the scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:3957,Energy Efficiency,schedul,scheduled,3957,"ges/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no shuffle] __________________________________________________________________________. circuit = <qutip.qip.circuit.QubitCircuit object at 0x12c081640>, method = 'ALAP', expected_length = 5, random_shuffle = False, gates_schedule = False. @pytest.mark.parametrize(; ""circuit, method, expected_length, random_shuffle, gates_schedule"",; [; pytest.param(deepcopy(_circuit2()), ""ALAP"", 5, False, False, id=""circuit2 ALAP no shuffle""); ]); def test_scheduling_gates3(; circuit, method, expected_length, random_shuffle, gates_schedule):; if random_shuffle:; repeat_num = 5; else:; repeat_num = 0; result0 = gate_sequence_product(circuit.propagators()); ; # run the scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:4305,Energy Efficiency,power,power-gmres,4305,"od = 'ALAP', expected_length = 5, random_shuffle = False, gates_schedule = False. @pytest.mark.parametrize(; ""circuit, method, expected_length, random_shuffle, gates_schedule"",; [; pytest.param(deepcopy(_circuit2()), ""ALAP"", 5, False, False, id=""circuit2 ALAP no shuffle""); ]); def test_scheduling_gates3(; circuit, method, expected_length, random_shuffle, gates_schedule):; if random_shuffle:; repeat_num = 5; else:; repeat_num = 0; result0 = gate_sequence_product(circuit.propagators()); ; # run the scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:4412,Energy Efficiency,power,power-gmres,4412,"es_schedule"",; [; pytest.param(deepcopy(_circuit2()), ""ALAP"", 5, False, False, id=""circuit2 ALAP no shuffle""); ]); def test_scheduling_gates3(; circuit, method, expected_length, random_shuffle, gates_schedule):; if random_shuffle:; repeat_num = 5; else:; repeat_num = 0; result0 = gate_sequence_product(circuit.propagators()); ; # run the scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_precond' in kwargs:; > kwargs['M'] = qutip.build_preconditioner(H, c_ops, method=kwargs['M']). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:4772,Energy Efficiency,power,power,4772,"e scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_precond' in kwargs:; > kwargs['M'] = qutip.build_preconditioner(H, c_ops, method=kwargs['M']). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_steadystate.py:124: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. A = Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, is",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:4799,Energy Efficiency,power,power,4799,"e scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_precond' in kwargs:; > kwargs['M'] = qutip.build_preconditioner(H, c_ops, method=kwargs['M']). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_steadystate.py:124: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. A = Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, is",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:4823,Energy Efficiency,power,power-gmres,4823,"schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_precond' in kwargs:; > kwargs['M'] = qutip.build_preconditioner(H, c_ops, method=kwargs['M']). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_steadystate.py:124: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. A = Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, isherm = True; Qobj data =; [[0. 0.06283185 ... 0. 0. 0. 0. 0.; 0. 0. 0. 0. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:4891,Energy Efficiency,power,power-gmres,4891,"schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_precond' in kwargs:; > kwargs['M'] = qutip.build_preconditioner(H, c_ops, method=kwargs['M']). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_steadystate.py:124: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. A = Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, isherm = True; Qobj data =; [[0. 0.06283185 ... 0. 0. 0. 0. 0.; 0. 0. 0. 0. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:4921,Energy Efficiency,power,power-bicgstab,4921,"scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_precond' in kwargs:; > kwargs['M'] = qutip.build_preconditioner(H, c_ops, method=kwargs['M']). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_steadystate.py:124: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. A = Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, isherm = True; Qobj data =; [[0. 0.06283185 ... 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0.33835988 0. ]]; c_op_list = [Quantum object: dims = [[30], [30]], shape = (30, 30), type = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:4961,Energy Efficiency,power,power,4961,"scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_precond' in kwargs:; > kwargs['M'] = qutip.build_preconditioner(H, c_ops, method=kwargs['M']). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_steadystate.py:124: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. A = Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, isherm = True; Qobj data =; [[0. 0.06283185 ... 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0.33835988 0. ]]; c_op_list = [Quantum object: dims = [[30], [30]], shape = (30, 30), type = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:4975,Energy Efficiency,power,power-bicgstab,4975,"scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_precond' in kwargs:; > kwargs['M'] = qutip.build_preconditioner(H, c_ops, method=kwargs['M']). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_steadystate.py:124: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. A = Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, isherm = True; Qobj data =; [[0. 0.06283185 ... 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0.33835988 0. ]]; c_op_list = [Quantum object: dims = [[30], [30]], shape = (30, 30), type = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:7725,Energy Efficiency,power,power,7725,"p_list : list; A list of collapse operators.; ; return_info : bool, optional, default = False; Return a dictionary of solver-specific infomation about the; solution and how it was obtained.; ; use_rcm : bool, optional, default = False; Use reverse Cuthill-Mckee reordering to minimize fill-in in the; LU factorization of the Liouvillian.; ; use_wbm : bool, optional, default = False; Use Weighted Bipartite Matching reordering to make the Liouvillian; diagonally dominant. This is useful for iterative preconditioners; only, and is set to ``True`` by default when finding a preconditioner.; ; weight : float, optional; Sets the size of the elements used for adding the unity trace condition; to the linear solvers. This is set to the average abs value of the; Liouvillian elements if not specified by the user.; ; method : str, default = 'iterative'; Tells the preconditioner what type of Liouvillian to build for; iLU factorization. For direct iterative methods use 'iterative'.; For power iterative methods use 'power'.; ; permc_spec : str, optional, default='COLAMD'; Column ordering used internally by superLU for the; 'direct' LU decomposition method. Options include 'COLAMD' and; 'NATURAL'. If using RCM then this is set to 'NATURAL' automatically; unless explicitly specified.; ; fill_factor : float, optional, default = 100; Specifies the fill ratio upper bound (>=1) of the iLU; preconditioner. Lower values save memory at the cost of longer; execution times and a possible singular factorization.; ; drop_tol : float, optional, default = 1e-4; Sets the threshold for the magnitude of preconditioner; elements that should be dropped. Can be reduced for a courser; factorization at the cost of an increased number of iterations, and a; possible singular factorization.; ; diag_pivot_thresh : float, optional, default = None; Sets the threshold between [0,1] for which diagonal; elements are considered acceptable pivot points when using a; preconditioner. A value of zero forces the pivot to",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:7754,Energy Efficiency,power,power,7754,"p_list : list; A list of collapse operators.; ; return_info : bool, optional, default = False; Return a dictionary of solver-specific infomation about the; solution and how it was obtained.; ; use_rcm : bool, optional, default = False; Use reverse Cuthill-Mckee reordering to minimize fill-in in the; LU factorization of the Liouvillian.; ; use_wbm : bool, optional, default = False; Use Weighted Bipartite Matching reordering to make the Liouvillian; diagonally dominant. This is useful for iterative preconditioners; only, and is set to ``True`` by default when finding a preconditioner.; ; weight : float, optional; Sets the size of the elements used for adding the unity trace condition; to the linear solvers. This is set to the average abs value of the; Liouvillian elements if not specified by the user.; ; method : str, default = 'iterative'; Tells the preconditioner what type of Liouvillian to build for; iLU factorization. For direct iterative methods use 'iterative'.; For power iterative methods use 'power'.; ; permc_spec : str, optional, default='COLAMD'; Column ordering used internally by superLU for the; 'direct' LU decomposition method. Options include 'COLAMD' and; 'NATURAL'. If using RCM then this is set to 'NATURAL' automatically; unless explicitly specified.; ; fill_factor : float, optional, default = 100; Specifies the fill ratio upper bound (>=1) of the iLU; preconditioner. Lower values save memory at the cost of longer; execution times and a possible singular factorization.; ; drop_tol : float, optional, default = 1e-4; Sets the threshold for the magnitude of preconditioner; elements that should be dropped. Can be reduced for a courser; factorization at the cost of an increased number of iterations, and a; possible singular factorization.; ; diag_pivot_thresh : float, optional, default = None; Sets the threshold between [0,1] for which diagonal; elements are considered acceptable pivot points when using a; preconditioner. A value of zero forces the pivot to",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:8391,Energy Efficiency,reduce,reduced,8391,"ers. This is set to the average abs value of the; Liouvillian elements if not specified by the user.; ; method : str, default = 'iterative'; Tells the preconditioner what type of Liouvillian to build for; iLU factorization. For direct iterative methods use 'iterative'.; For power iterative methods use 'power'.; ; permc_spec : str, optional, default='COLAMD'; Column ordering used internally by superLU for the; 'direct' LU decomposition method. Options include 'COLAMD' and; 'NATURAL'. If using RCM then this is set to 'NATURAL' automatically; unless explicitly specified.; ; fill_factor : float, optional, default = 100; Specifies the fill ratio upper bound (>=1) of the iLU; preconditioner. Lower values save memory at the cost of longer; execution times and a possible singular factorization.; ; drop_tol : float, optional, default = 1e-4; Sets the threshold for the magnitude of preconditioner; elements that should be dropped. Can be reduced for a courser; factorization at the cost of an increased number of iterations, and a; possible singular factorization.; ; diag_pivot_thresh : float, optional, default = None; Sets the threshold between [0,1] for which diagonal; elements are considered acceptable pivot points when using a; preconditioner. A value of zero forces the pivot to be the diagonal; element.; ; ILU_MILU : str, optional, default = 'smilu_2'; Selects the incomplete LU decomposition method algoithm used in; creating the preconditoner. Should only be used by advanced users.; ; Returns; -------; lu : object; Returns a SuperLU object representing iLU preconditioner.; ; info : dict, optional; Dictionary containing solver-specific information.; """"""; ss_args = _default_steadystate_args(); ss_args['method'] = 'iterative'; for key in kwargs.keys():; if key in ss_args.keys():; ss_args[key] = kwargs[key]; else:; raise TypeError(""Invalid keyword argument '"" + key +; ""' passed to steadystate.""); ; # Set column perm to NATURAL if using RCM and not specified by user; if ss_args[",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:9975,Energy Efficiency,power,power,9975,"u : object; Returns a SuperLU object representing iLU preconditioner.; ; info : dict, optional; Dictionary containing solver-specific information.; """"""; ss_args = _default_steadystate_args(); ss_args['method'] = 'iterative'; for key in kwargs.keys():; if key in ss_args.keys():; ss_args[key] = kwargs[key]; else:; raise TypeError(""Invalid keyword argument '"" + key +; ""' passed to steadystate.""); ; # Set column perm to NATURAL if using RCM and not specified by user; if ss_args['use_rcm'] and ('permc_spec' not in kwargs.keys()):; ss_args['permc_spec'] = 'NATURAL'; ; L = _steadystate_setup(A, c_op_list); # Set weight parameter to avg abs val in L if not set explicitly; if 'weight' not in kwargs.keys():; ss_args['weight'] = np.mean(np.abs(L.data.data.max())); ss_args['info']['weight'] = ss_args['weight']; ; n = int(np.sqrt(L.shape[0])); if ss_args['method'] == 'iterative':; ss_list = _steadystate_LU_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ________________________________________________________________________________ test_driven_cavity[power-bicgstab] _________________________________________________________________________________. method = 'power-bicgstab', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:10412,Energy Efficiency,power,power-bicgstab,10412,"f using RCM and not specified by user; if ss_args['use_rcm'] and ('permc_spec' not in kwargs.keys()):; ss_args['permc_spec'] = 'NATURAL'; ; L = _steadystate_setup(A, c_op_list); # Set weight parameter to avg abs val in L if not set explicitly; if 'weight' not in kwargs.keys():; ss_args['weight'] = np.mean(np.abs(L.data.data.max())); ss_args['info']['weight'] = ss_args['weight']; ; n = int(np.sqrt(L.shape[0])); if ss_args['method'] == 'iterative':; ss_list = _steadystate_LU_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ________________________________________________________________________________ test_driven_cavity[power-bicgstab] _________________________________________________________________________________. method = 'power-bicgstab', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:10521,Energy Efficiency,power,power-bicgstab,10521,"op_list); # Set weight parameter to avg abs val in L if not set explicitly; if 'weight' not in kwargs.keys():; ss_args['weight'] = np.mean(np.abs(L.data.data.max())); ss_args['info']['weight'] = ss_args['weight']; ; n = int(np.sqrt(L.shape[0])); if ss_args['method'] == 'iterative':; ss_list = _steadystate_LU_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ________________________________________________________________________________ test_driven_cavity[power-bicgstab] _________________________________________________________________________________. method = 'power-bicgstab', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_precond' in kwargs:; > kwargs['M'] = qutip.build_preconditioner(H, c_ops, method=kwargs['M']). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:10871,Energy Efficiency,power,power,10871,"(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ________________________________________________________________________________ test_driven_cavity[power-bicgstab] _________________________________________________________________________________. method = 'power-bicgstab', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_precond' in kwargs:; > kwargs['M'] = qutip.build_preconditioner(H, c_ops, method=kwargs['M']). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_steadystate.py:124: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. A = Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, is",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:10898,Energy Efficiency,power,power,10898,"(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ________________________________________________________________________________ test_driven_cavity[power-bicgstab] _________________________________________________________________________________. method = 'power-bicgstab', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_precond' in kwargs:; > kwargs['M'] = qutip.build_preconditioner(H, c_ops, method=kwargs['M']). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_steadystate.py:124: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. A = Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, is",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:10922,Energy Efficiency,power,power-gmres,10922,"thod'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ________________________________________________________________________________ test_driven_cavity[power-bicgstab] _________________________________________________________________________________. method = 'power-bicgstab', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_precond' in kwargs:; > kwargs['M'] = qutip.build_preconditioner(H, c_ops, method=kwargs['M']). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_steadystate.py:124: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. A = Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, isherm = True; Qobj data =; [[0. 0.06283185 ... 0. 0. 0. 0. 0.; 0. 0. 0. 0. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:10990,Energy Efficiency,power,power-gmres,10990,"thod'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ________________________________________________________________________________ test_driven_cavity[power-bicgstab] _________________________________________________________________________________. method = 'power-bicgstab', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_precond' in kwargs:; > kwargs['M'] = qutip.build_preconditioner(H, c_ops, method=kwargs['M']). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_steadystate.py:124: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. A = Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, isherm = True; Qobj data =; [[0. 0.06283185 ... 0. 0. 0. 0. 0.; 0. 0. 0. 0. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:11020,Energy Efficiency,power,power-bicgstab,11020,"v_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ________________________________________________________________________________ test_driven_cavity[power-bicgstab] _________________________________________________________________________________. method = 'power-bicgstab', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_precond' in kwargs:; > kwargs['M'] = qutip.build_preconditioner(H, c_ops, method=kwargs['M']). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_steadystate.py:124: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. A = Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, isherm = True; Qobj data =; [[0. 0.06283185 ... 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0.33835988 0. ]]; c_op_list = [Quantum object: dims = [[30], [30]], shape = (30, 30), type = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:11060,Energy Efficiency,power,power,11060,"v_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ________________________________________________________________________________ test_driven_cavity[power-bicgstab] _________________________________________________________________________________. method = 'power-bicgstab', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_precond' in kwargs:; > kwargs['M'] = qutip.build_preconditioner(H, c_ops, method=kwargs['M']). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_steadystate.py:124: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. A = Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, isherm = True; Qobj data =; [[0. 0.06283185 ... 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0.33835988 0. ]]; c_op_list = [Quantum object: dims = [[30], [30]], shape = (30, 30), type = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:11074,Energy Efficiency,power,power-bicgstab,11074,"v_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ________________________________________________________________________________ test_driven_cavity[power-bicgstab] _________________________________________________________________________________. method = 'power-bicgstab', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_precond' in kwargs:; > kwargs['M'] = qutip.build_preconditioner(H, c_ops, method=kwargs['M']). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_steadystate.py:124: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. A = Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, isherm = True; Qobj data =; [[0. 0.06283185 ... 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0.33835988 0. ]]; c_op_list = [Quantum object: dims = [[30], [30]], shape = (30, 30), type = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:13824,Energy Efficiency,power,power,13824,"p_list : list; A list of collapse operators.; ; return_info : bool, optional, default = False; Return a dictionary of solver-specific infomation about the; solution and how it was obtained.; ; use_rcm : bool, optional, default = False; Use reverse Cuthill-Mckee reordering to minimize fill-in in the; LU factorization of the Liouvillian.; ; use_wbm : bool, optional, default = False; Use Weighted Bipartite Matching reordering to make the Liouvillian; diagonally dominant. This is useful for iterative preconditioners; only, and is set to ``True`` by default when finding a preconditioner.; ; weight : float, optional; Sets the size of the elements used for adding the unity trace condition; to the linear solvers. This is set to the average abs value of the; Liouvillian elements if not specified by the user.; ; method : str, default = 'iterative'; Tells the preconditioner what type of Liouvillian to build for; iLU factorization. For direct iterative methods use 'iterative'.; For power iterative methods use 'power'.; ; permc_spec : str, optional, default='COLAMD'; Column ordering used internally by superLU for the; 'direct' LU decomposition method. Options include 'COLAMD' and; 'NATURAL'. If using RCM then this is set to 'NATURAL' automatically; unless explicitly specified.; ; fill_factor : float, optional, default = 100; Specifies the fill ratio upper bound (>=1) of the iLU; preconditioner. Lower values save memory at the cost of longer; execution times and a possible singular factorization.; ; drop_tol : float, optional, default = 1e-4; Sets the threshold for the magnitude of preconditioner; elements that should be dropped. Can be reduced for a courser; factorization at the cost of an increased number of iterations, and a; possible singular factorization.; ; diag_pivot_thresh : float, optional, default = None; Sets the threshold between [0,1] for which diagonal; elements are considered acceptable pivot points when using a; preconditioner. A value of zero forces the pivot to",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:13853,Energy Efficiency,power,power,13853,"p_list : list; A list of collapse operators.; ; return_info : bool, optional, default = False; Return a dictionary of solver-specific infomation about the; solution and how it was obtained.; ; use_rcm : bool, optional, default = False; Use reverse Cuthill-Mckee reordering to minimize fill-in in the; LU factorization of the Liouvillian.; ; use_wbm : bool, optional, default = False; Use Weighted Bipartite Matching reordering to make the Liouvillian; diagonally dominant. This is useful for iterative preconditioners; only, and is set to ``True`` by default when finding a preconditioner.; ; weight : float, optional; Sets the size of the elements used for adding the unity trace condition; to the linear solvers. This is set to the average abs value of the; Liouvillian elements if not specified by the user.; ; method : str, default = 'iterative'; Tells the preconditioner what type of Liouvillian to build for; iLU factorization. For direct iterative methods use 'iterative'.; For power iterative methods use 'power'.; ; permc_spec : str, optional, default='COLAMD'; Column ordering used internally by superLU for the; 'direct' LU decomposition method. Options include 'COLAMD' and; 'NATURAL'. If using RCM then this is set to 'NATURAL' automatically; unless explicitly specified.; ; fill_factor : float, optional, default = 100; Specifies the fill ratio upper bound (>=1) of the iLU; preconditioner. Lower values save memory at the cost of longer; execution times and a possible singular factorization.; ; drop_tol : float, optional, default = 1e-4; Sets the threshold for the magnitude of preconditioner; elements that should be dropped. Can be reduced for a courser; factorization at the cost of an increased number of iterations, and a; possible singular factorization.; ; diag_pivot_thresh : float, optional, default = None; Sets the threshold between [0,1] for which diagonal; elements are considered acceptable pivot points when using a; preconditioner. A value of zero forces the pivot to",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:14490,Energy Efficiency,reduce,reduced,14490,"ers. This is set to the average abs value of the; Liouvillian elements if not specified by the user.; ; method : str, default = 'iterative'; Tells the preconditioner what type of Liouvillian to build for; iLU factorization. For direct iterative methods use 'iterative'.; For power iterative methods use 'power'.; ; permc_spec : str, optional, default='COLAMD'; Column ordering used internally by superLU for the; 'direct' LU decomposition method. Options include 'COLAMD' and; 'NATURAL'. If using RCM then this is set to 'NATURAL' automatically; unless explicitly specified.; ; fill_factor : float, optional, default = 100; Specifies the fill ratio upper bound (>=1) of the iLU; preconditioner. Lower values save memory at the cost of longer; execution times and a possible singular factorization.; ; drop_tol : float, optional, default = 1e-4; Sets the threshold for the magnitude of preconditioner; elements that should be dropped. Can be reduced for a courser; factorization at the cost of an increased number of iterations, and a; possible singular factorization.; ; diag_pivot_thresh : float, optional, default = None; Sets the threshold between [0,1] for which diagonal; elements are considered acceptable pivot points when using a; preconditioner. A value of zero forces the pivot to be the diagonal; element.; ; ILU_MILU : str, optional, default = 'smilu_2'; Selects the incomplete LU decomposition method algoithm used in; creating the preconditoner. Should only be used by advanced users.; ; Returns; -------; lu : object; Returns a SuperLU object representing iLU preconditioner.; ; info : dict, optional; Dictionary containing solver-specific information.; """"""; ss_args = _default_steadystate_args(); ss_args['method'] = 'iterative'; for key in kwargs.keys():; if key in ss_args.keys():; ss_args[key] = kwargs[key]; else:; raise TypeError(""Invalid keyword argument '"" + key +; ""' passed to steadystate.""); ; # Set column perm to NATURAL if using RCM and not specified by user; if ss_args[",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:16074,Energy Efficiency,power,power,16074,"u : object; Returns a SuperLU object representing iLU preconditioner.; ; info : dict, optional; Dictionary containing solver-specific information.; """"""; ss_args = _default_steadystate_args(); ss_args['method'] = 'iterative'; for key in kwargs.keys():; if key in ss_args.keys():; ss_args[key] = kwargs[key]; else:; raise TypeError(""Invalid keyword argument '"" + key +; ""' passed to steadystate.""); ; # Set column perm to NATURAL if using RCM and not specified by user; if ss_args['use_rcm'] and ('permc_spec' not in kwargs.keys()):; ss_args['permc_spec'] = 'NATURAL'; ; L = _steadystate_setup(A, c_op_list); # Set weight parameter to avg abs val in L if not set explicitly; if 'weight' not in kwargs.keys():; ss_args['weight'] = np.mean(np.abs(L.data.data.max())); ss_args['info']['weight'] = ss_args['weight']; ; n = int(np.sqrt(L.shape[0])); if ss_args['method'] == 'iterative':; ss_list = _steadystate_LU_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ====================================================================================== short test summary info ======================================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:16830,Energy Efficiency,power,power-gmres,16830,"']['weight'] = ss_args['weight']; ; n = int(np.sqrt(L.shape[0])); if ss_args['method'] == 'iterative':; ss_list = _steadystate_LU_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ====================================================================================== short test summary info ======================================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:16943,Energy Efficiency,power,power-bicgstab,16943,"steadystate_LU_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ====================================================================================== short test summary info ======================================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0.dev0+3ff3f42; Numpy Version: 1.20.3; Scipy Version: 1.7.3; Cython Version: None; Matplotlib Version: None;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:26,Testability,test,tests,26,"### Bug Description. Some tests of qutip.testing.run() fail on master on a MacBook Pro (2021) with M1. Qutip was installed on a miniforge python 3.9.9 distribution. ### Code to Reproduce the Bug. ```shell; import qutip.testing; qutip.testing.run(); ```. ### Code Output. ```shell; ============================================================================================= FAILURES ==============================================================================================; _________________________________________________________________________________________ test_dqd_current __________________________________________________________________________________________. def test_dqd_current():; ""Counting statistics: current and current noise in a DQD model""; ; G = 0; L = 1; R = 2; ; sz = qutip.projection(3, L, L) - qutip.projection(3, R, R); sx = qutip.projection(3, L, R) + qutip.projection(3, R, L); sR = qutip.projection(3, G, R); sL = qutip.projection(3, G, L); ; w0 = 1; tc = 0.6 * w0; GammaR = 0.0075 * w0; GammaL = 0.0075 * w0; nth = 0.00; eps_vec = np.linspace(-1.5*w0, 1.5*w0, 20); ; J_ops = [GammaR * qutip.sprepost(sR, sR.dag())]; ; c_ops = [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:41,Testability,test,testing,41,"### Bug Description. Some tests of qutip.testing.run() fail on master on a MacBook Pro (2021) with M1. Qutip was installed on a miniforge python 3.9.9 distribution. ### Code to Reproduce the Bug. ```shell; import qutip.testing; qutip.testing.run(); ```. ### Code Output. ```shell; ============================================================================================= FAILURES ==============================================================================================; _________________________________________________________________________________________ test_dqd_current __________________________________________________________________________________________. def test_dqd_current():; ""Counting statistics: current and current noise in a DQD model""; ; G = 0; L = 1; R = 2; ; sz = qutip.projection(3, L, L) - qutip.projection(3, R, R); sx = qutip.projection(3, L, R) + qutip.projection(3, R, L); sR = qutip.projection(3, G, R); sL = qutip.projection(3, G, L); ; w0 = 1; tc = 0.6 * w0; GammaR = 0.0075 * w0; GammaL = 0.0075 * w0; nth = 0.00; eps_vec = np.linspace(-1.5*w0, 1.5*w0, 20); ; J_ops = [GammaR * qutip.sprepost(sR, sR.dag())]; ; c_ops = [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:219,Testability,test,testing,219,"### Bug Description. Some tests of qutip.testing.run() fail on master on a MacBook Pro (2021) with M1. Qutip was installed on a miniforge python 3.9.9 distribution. ### Code to Reproduce the Bug. ```shell; import qutip.testing; qutip.testing.run(); ```. ### Code Output. ```shell; ============================================================================================= FAILURES ==============================================================================================; _________________________________________________________________________________________ test_dqd_current __________________________________________________________________________________________. def test_dqd_current():; ""Counting statistics: current and current noise in a DQD model""; ; G = 0; L = 1; R = 2; ; sz = qutip.projection(3, L, L) - qutip.projection(3, R, R); sx = qutip.projection(3, L, R) + qutip.projection(3, R, L); sR = qutip.projection(3, G, R); sL = qutip.projection(3, G, L); ; w0 = 1; tc = 0.6 * w0; GammaR = 0.0075 * w0; GammaL = 0.0075 * w0; nth = 0.00; eps_vec = np.linspace(-1.5*w0, 1.5*w0, 20); ; J_ops = [GammaR * qutip.sprepost(sR, sR.dag())]; ; c_ops = [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:234,Testability,test,testing,234,"### Bug Description. Some tests of qutip.testing.run() fail on master on a MacBook Pro (2021) with M1. Qutip was installed on a miniforge python 3.9.9 distribution. ### Code to Reproduce the Bug. ```shell; import qutip.testing; qutip.testing.run(); ```. ### Code Output. ```shell; ============================================================================================= FAILURES ==============================================================================================; _________________________________________________________________________________________ test_dqd_current __________________________________________________________________________________________. def test_dqd_current():; ""Counting statistics: current and current noise in a DQD model""; ; G = 0; L = 1; R = 2; ; sz = qutip.projection(3, L, L) - qutip.projection(3, R, R); sx = qutip.projection(3, L, R) + qutip.projection(3, R, L); sR = qutip.projection(3, G, R); sL = qutip.projection(3, G, L); ; w0 = 1; tc = 0.6 * w0; GammaR = 0.0075 * w0; GammaL = 0.0075 * w0; nth = 0.00; eps_vec = np.linspace(-1.5*w0, 1.5*w0, 20); ; J_ops = [GammaR * qutip.sprepost(sR, sR.dag())]; ; c_ops = [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:1661,Testability,assert,assert,1661,"__________. def test_dqd_current():; ""Counting statistics: current and current noise in a DQD model""; ; G = 0; L = 1; R = 2; ; sz = qutip.projection(3, L, L) - qutip.projection(3, R, R); sx = qutip.projection(3, L, R) + qutip.projection(3, R, L); sR = qutip.projection(3, G, R); sL = qutip.projection(3, G, L); ; w0 = 1; tc = 0.6 * w0; GammaR = 0.0075 * w0; GammaL = 0.0075 * w0; nth = 0.00; eps_vec = np.linspace(-1.5*w0, 1.5*w0, 20); ; J_ops = [GammaR * qutip.sprepost(sR, sR.dag())]; ; c_ops = [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.01597663; E Max relative difference: 11.81715334; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.017329, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:1764,Testability,assert,assert,1764,"rojection(3, G, R); sL = qutip.projection(3, G, L); ; w0 = 1; tc = 0.6 * w0; GammaR = 0.0075 * w0; GammaL = 0.0075 * w0; nth = 0.00; eps_vec = np.linspace(-1.5*w0, 1.5*w0, 20); ; J_ops = [GammaR * qutip.sprepost(sR, sR.dag())]; ; c_ops = [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.01597663; E Max relative difference: 11.81715334; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.017329, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:2131,Testability,test,testing,2131,"st(sR, sR.dag())]; ; c_ops = [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.01597663; E Max relative difference: 11.81715334; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.017329, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:2197,Testability,test,testing,2197,"p.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.01597663; E Max relative difference: 11.81715334; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.017329, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no shuffle] _________________________________________________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:2256,Testability,Assert,AssertionError,2256,"* sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.01597663; E Max relative difference: 11.81715334; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.017329, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no shuffle] __________________________________________________________________________. circuit = <qutip.qip.circuit.QubitCircuit ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:2977,Testability,test,tests,2977,"ammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.01597663; E Max relative difference: 11.81715334; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.017329, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no shuffle] __________________________________________________________________________. circuit = <qutip.qip.circuit.QubitCircuit object at 0x12c081640>, method = 'ALAP', expected_length = 5, random_shuffle = False, gates_schedule = False. @pytest.mark.parametrize(; ""circuit, method, expected_length, random_shuffle, gates_schedule"",; [; pytest.param(deepcopy(_circuit2()), ""ALAP"", 5, False, False, id=""circuit2 ALAP no shuffle""); ]); def test_scheduling_gates3(; circuit, method, expected_length, random_shuffle, gates_schedule):; if random_shuffle:; repeat_num = 5; else:; repeat_num = 0; result0 = gate_sequence_product(circuit.propagators()); ; # run the scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:3005,Testability,Assert,AssertionError,3005,"2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.01597663; E Max relative difference: 11.81715334; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.017329, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no shuffle] __________________________________________________________________________. circuit = <qutip.qip.circuit.QubitCircuit object at 0x12c081640>, method = 'ALAP', expected_length = 5, random_shuffle = False, gates_schedule = False. @pytest.mark.parametrize(; ""circuit, method, expected_length, random_shuffle, gates_schedule"",; [; pytest.param(deepcopy(_circuit2()), ""ALAP"", 5, False, False, id=""circuit2 ALAP no shuffle""); ]); def test_scheduling_gates3(; circuit, method, expected_length, random_shuffle, gates_schedule):; if random_shuffle:; repeat_num = 5; else:; repeat_num = 0; result0 = gate_sequence_product(circuit.propagators()); ; # run the scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/e",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:3989,Testability,assert,assert,3989,"ges/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no shuffle] __________________________________________________________________________. circuit = <qutip.qip.circuit.QubitCircuit object at 0x12c081640>, method = 'ALAP', expected_length = 5, random_shuffle = False, gates_schedule = False. @pytest.mark.parametrize(; ""circuit, method, expected_length, random_shuffle, gates_schedule"",; [; pytest.param(deepcopy(_circuit2()), ""ALAP"", 5, False, False, id=""circuit2 ALAP no shuffle""); ]); def test_scheduling_gates3(; circuit, method, expected_length, random_shuffle, gates_schedule):; if random_shuffle:; repeat_num = 5; else:; repeat_num = 0; result0 = gate_sequence_product(circuit.propagators()); ; # run the scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:4043,Testability,assert,assert,4043,"ges/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no shuffle] __________________________________________________________________________. circuit = <qutip.qip.circuit.QubitCircuit object at 0x12c081640>, method = 'ALAP', expected_length = 5, random_shuffle = False, gates_schedule = False. @pytest.mark.parametrize(; ""circuit, method, expected_length, random_shuffle, gates_schedule"",; [; pytest.param(deepcopy(_circuit2()), ""ALAP"", 5, False, False, id=""circuit2 ALAP no shuffle""); ]); def test_scheduling_gates3(; circuit, method, expected_length, random_shuffle, gates_schedule):; if random_shuffle:; repeat_num = 5; else:; repeat_num = 0; result0 = gate_sequence_product(circuit.propagators()); ; # run the scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:4158,Testability,test,tests,4158,"_____________________________________________________________. circuit = <qutip.qip.circuit.QubitCircuit object at 0x12c081640>, method = 'ALAP', expected_length = 5, random_shuffle = False, gates_schedule = False. @pytest.mark.parametrize(; ""circuit, method, expected_length, random_shuffle, gates_schedule"",; [; pytest.param(deepcopy(_circuit2()), ""ALAP"", 5, False, False, id=""circuit2 ALAP no shuffle""); ]); def test_scheduling_gates3(; circuit, method, expected_length, random_shuffle, gates_schedule):; if random_shuffle:; repeat_num = 5; else:; repeat_num = 0; result0 = gate_sequence_product(circuit.propagators()); ; # run the scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:4187,Testability,Assert,AssertionError,4187,"od = 'ALAP', expected_length = 5, random_shuffle = False, gates_schedule = False. @pytest.mark.parametrize(; ""circuit, method, expected_length, random_shuffle, gates_schedule"",; [; pytest.param(deepcopy(_circuit2()), ""ALAP"", 5, False, False, id=""circuit2 ALAP no shuffle""); ]); def test_scheduling_gates3(; circuit, method, expected_length, random_shuffle, gates_schedule):; if random_shuffle:; repeat_num = 5; else:; repeat_num = 0; result0 = gate_sequence_product(circuit.propagators()); ; # run the scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_scheduler.py:143: AssertionError; __________________________________________________________________________________ test_driven_cavity[power-gmres] __________________________________________________________________________________. method = 'power-gmres', kwargs = {'M': <900x900 _CustomLinearOperator with dtype=complex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:5485,Testability,test,tests,5485,"mplex128>, 'mtol': 0.1, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_precond' in kwargs:; > kwargs['M'] = qutip.build_preconditioner(H, c_ops, method=kwargs['M']). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_steadystate.py:124: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. A = Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, isherm = True; Qobj data =; [[0. 0.06283185 ... 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0.33835988 0. ]]; c_op_list = [Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, isherm = False; Qobj data =; [[0. 0.2236068... 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0. 0. ]]]; kwargs = {'method': <900x900 _CustomLinearOperator with dtype=complex128>}, ss_args = {'ILU_MILU': 'smilu_2', 'M': None, 'all_states': False, 'diag_pivot_thresh': None, ...}, key = 'method'; L = Quantum object: dims = [[[30], [30]], [[30], [30]]], shape = (900, 900), type = super, isherm = False; Qobj data =; [[ 0.... +0.j 0. +0.j 0. +0.j ...; 0. +0.j 0. -0.33835988j -1.45 +0.j ]]; n = 30. def build_preconditioner(A, c_op_list=[], *",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:11584,Testability,test,tests,11584,"with dtype=complex128>, 'use_precond': 1}. @pytest.mark.parametrize(['method', 'kwargs'], [; pytest.param('direct', {}, id=""direct""),; pytest.param('direct', {'sparse':False}, id=""direct_dense""),; pytest.param('eigen', {}, id=""eigen""),; pytest.param('svd', {}, id=""svd""),; pytest.param('power', {'mtol':1e-5}, id=""power""),; pytest.param('power-gmres', {'mtol':1e-1, 'use_precond':1, 'M':'iterative'},; id=""power-gmres""),; pytest.param('power-bicgstab', {'use_precond':1, 'M':'power'},; id=""power-bicgstab""),; pytest.param('iterative-gmres', {}, id=""iterative-gmres""),; pytest.param('iterative-bicgstab', {}, id=""iterative-bicgstab""),; ]); def test_driven_cavity(method, kwargs):; N = 30; Omega = 0.01 * 2 * np.pi; Gamma = 0.05; ; a = qutip.destroy(N); H = Omega * (a.dag() + a); c_ops = [np.sqrt(Gamma) * a]; if 'use_precond' in kwargs:; > kwargs['M'] = qutip.build_preconditioner(H, c_ops, method=kwargs['M']). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_steadystate.py:124: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. A = Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, isherm = True; Qobj data =; [[0. 0.06283185 ... 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0.33835988 0. ]]; c_op_list = [Quantum object: dims = [[30], [30]], shape = (30, 30), type = oper, isherm = False; Qobj data =; [[0. 0.2236068... 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0. 0. ]]]; kwargs = {'method': <900x900 _CustomLinearOperator with dtype=complex128>}, ss_args = {'ILU_MILU': 'smilu_2', 'M': None, 'all_states': False, 'diag_pivot_thresh': None, ...}, key = 'method'; L = Quantum object: dims = [[[30], [30]], [[30], [30]]], shape = (900, 900), type = super, isherm = False; Qobj data =; [[ 0.... +0.j 0. +0.j 0. +0.j ...; 0. +0.j 0. -0.33835988j -1.45 +0.j ]]; n = 30. def build_preconditioner(A, c_op_list=[], *",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:16504,Testability,test,test,16504," not specified by user; if ss_args['use_rcm'] and ('permc_spec' not in kwargs.keys()):; ss_args['permc_spec'] = 'NATURAL'; ; L = _steadystate_setup(A, c_op_list); # Set weight parameter to avg abs val in L if not set explicitly; if 'weight' not in kwargs.keys():; ss_args['weight'] = np.mean(np.abs(L.data.data.max())); ss_args['info']['weight'] = ss_args['weight']; ; n = int(np.sqrt(L.shape[0])); if ss_args['method'] == 'iterative':; ss_list = _steadystate_LU_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ====================================================================================== short test summary info ======================================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:16617,Testability,test,tests,16617," not specified by user; if ss_args['use_rcm'] and ('permc_spec' not in kwargs.keys()):; ss_args['permc_spec'] = 'NATURAL'; ; L = _steadystate_setup(A, c_op_list); # Set weight parameter to avg abs val in L if not set explicitly; if 'weight' not in kwargs.keys():; ss_args['weight'] = np.mean(np.abs(L.data.data.max())); ss_args['info']['weight'] = ss_args['weight']; ; n = int(np.sqrt(L.shape[0])); if ss_args['method'] == 'iterative':; ss_list = _steadystate_LU_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ====================================================================================== short test summary info ======================================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:16661,Testability,Assert,AssertionError,16661,"st); # Set weight parameter to avg abs val in L if not set explicitly; if 'weight' not in kwargs.keys():; ss_args['weight'] = np.mean(np.abs(L.data.data.max())); ss_args['info']['weight'] = ss_args['weight']; ; n = int(np.sqrt(L.shape[0])); if ss_args['method'] == 'iterative':; ss_list = _steadystate_LU_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ====================================================================================== short test summary info ======================================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:16686,Testability,test,tests,16686,"st); # Set weight parameter to avg abs val in L if not set explicitly; if 'weight' not in kwargs.keys():; ss_args['weight'] = np.mean(np.abs(L.data.data.max())); ss_args['info']['weight'] = ss_args['weight']; ; n = int(np.sqrt(L.shape[0])); if ss_args['method'] == 'iterative':; ss_list = _steadystate_LU_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ====================================================================================== short test summary info ======================================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:16762,Testability,assert,assert,16762,"t in kwargs.keys():; ss_args['weight'] = np.mean(np.abs(L.data.data.max())); ss_args['info']['weight'] = ss_args['weight']; ; n = int(np.sqrt(L.shape[0])); if ss_args['method'] == 'iterative':; ss_list = _steadystate_LU_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ====================================================================================== short test summary info ======================================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:16784,Testability,test,tests,16784,"t in kwargs.keys():; ss_args['weight'] = np.mean(np.abs(L.data.data.max())); ss_args['info']['weight'] = ss_args['weight']; ; n = int(np.sqrt(L.shape[0])); if ss_args['method'] == 'iterative':; ss_list = _steadystate_LU_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ====================================================================================== short test summary info ======================================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:16897,Testability,test,tests,16897,"pe[0])); if ss_args['method'] == 'iterative':; ss_list = _steadystate_LU_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ====================================================================================== short test summary info ======================================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0.dev0+3ff3f42; Numpy Version: 1.20.3; Scipy Versi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/issues/1755:17234,Testability,Test,Tests,17234,"E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ====================================================================================== short test summary info ======================================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0.dev0+3ff3f42; Numpy Version: 1.20.3; Scipy Version: 1.7.3; Cython Version: None; Matplotlib Version: None; Python Version: 3.9.9; Number of CPUs: 10; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip; ================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1755
https://github.com/qutip/qutip/pull/1757:92,Availability,error,error,92,**Description**; Removed excess verbiage and unrecognizable figure. Corrected a grammatical error. **Related issues or PRs**; No related issues. **Changelog**; Wordsmithing and cleanup.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1757
https://github.com/qutip/qutip/pull/1758:598,Safety,detect,detect,598,"**Description**; With new version of os, it sometime break our hardware_info function, as with the new apple M1 with #1754.; Instead of fixing it each time, I propose removing the function:; - Qutip only use the number of cpu from that function, we never uses the cpu frequency or any other info obtained.; - There are cross platform modules for that (`psutil`), if we need that information, we should use them instead. In this PR, I removed `hardware_info`, created a new function `available_cpu_count` which is placed it in `utilities.py` since `blas_info` is also there. This function is set to detect the number of cpus _available_, not total number, so that when used on a cluster, it return the number of cpus assigned to the job. I tested it on slurm. **Changelog**; Remove hardware info",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1758
https://github.com/qutip/qutip/pull/1758:739,Testability,test,tested,739,"**Description**; With new version of os, it sometime break our hardware_info function, as with the new apple M1 with #1754.; Instead of fixing it each time, I propose removing the function:; - Qutip only use the number of cpu from that function, we never uses the cpu frequency or any other info obtained.; - There are cross platform modules for that (`psutil`), if we need that information, we should use them instead. In this PR, I removed `hardware_info`, created a new function `available_cpu_count` which is placed it in `utilities.py` since `blas_info` is also there. This function is set to detect the number of cpus _available_, not total number, so that when used on a cluster, it return the number of cpus assigned to the job. I tested it on slurm. **Changelog**; Remove hardware info",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1758
https://github.com/qutip/qutip/issues/1759:53,Availability,error,errors,53,### Describe the Issue!. There are minor grammatical errors and a small amount verbiage in the users' guide.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1759
https://github.com/qutip/qutip/issues/1759:102,Usability,guid,guide,102,### Describe the Issue!. There are minor grammatical errors and a small amount verbiage in the users' guide.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1759
https://github.com/qutip/qutip/pull/1760:1342,Availability,redundant,redundant,1342,">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Restrict builtins for ImageMath.eval() <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed ImagePath.Path array handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed redundant part of condition <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5915"">#5915</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Explicitly enable strip chopping for large uncompressed TIFFs <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5517"">#5517</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Use the Windows method to get TCL functions on Cygwin <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5807"">#5807</a> [<a href=""https://github.com/DWesl""><code>@​DWesl</code></a>]</li>; <li>Changed error type to allow for incremental WebP parsing <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5404"">#5404</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#59",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:1996,Availability,error,error,1996,"</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed redundant part of condition <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5915"">#5915</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Explicitly enable strip chopping for large uncompressed TIFFs <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5517"">#5517</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Use the Windows method to get TCL functions on Cygwin <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5807"">#5807</a> [<a href=""https://github.com/DWesl""><code>@​DWesl</code></a>]</li>; <li>Changed error type to allow for incremental WebP parsing <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5404"">#5404</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure that BMP pixel data offset does not ignore palette <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5899"">#5899</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use latin1 encoding to decode bytes <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5870"">#5870</a> [<a href",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:6667,Availability,failure,failure,6667,"hub.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Switched from deprecated &quot;setup.py install&quot; to &quot;pip install .&quot; <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5896"">#5896</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a> [<a href=""https://github.com/cmbruns""><code>@​cmbruns</code></a>]</li>; <li>Fixed raising OSError in _safe_read when size is greater than SAFEBLOCK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5872"">#5872</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>WebP: Fix memory leak during decoding on failure <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5798"">#5798</a> [<a href=""https://github.com/ilai-deutel""><code>@​ilai-deutel</code></a>]</li>; <li>Do not prematurely return in ImageFile when saving to stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5665"">#5665</a> [<a href=""https://github.com/infmagic2047""><code>@​infmagic2047</code></a>]</li>; <li>Added support for top right and bottom right TGA orientations <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5829"">#5829</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Corrected ICNS file length in header <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5845"">#5845</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Block tile TIFF tags when saving <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issue",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:98,Deployability,Release,Release,98,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 8.3.2 to 9.0.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>9.0.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Restrict builtins for ImageMath.eval() <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed ImagePath.Path array handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed redundant part of condition <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5915"">#5915</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Explicitly enable strip chopping for large uncompressed TIFFs <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5517"">#5517</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Use the Windows method to get TCL functions on Cygwin <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5807"">#5807</a> [<a href=""https://github.com/DWesl""><code>@​DWesl</code></a>]</li>; <li>Changed error",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:192,Deployability,release,releases,192,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 8.3.2 to 9.0.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>9.0.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Restrict builtins for ImageMath.eval() <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed ImagePath.Path array handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed redundant part of condition <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5915"">#5915</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Explicitly enable strip chopping for large uncompressed TIFFs <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5517"">#5517</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Use the Windows method to get TCL functions on Cygwin <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5807"">#5807</a> [<a href=""https://github.com/DWesl""><code>@​DWesl</code></a>]</li>; <li>Changed error",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:211,Deployability,release,releases,211,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 8.3.2 to 9.0.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>9.0.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Restrict builtins for ImageMath.eval() <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed ImagePath.Path array handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed redundant part of condition <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5915"">#5915</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Explicitly enable strip chopping for large uncompressed TIFFs <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5517"">#5517</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Use the Windows method to get TCL functions on Cygwin <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5807"">#5807</a> [<a href=""https://github.com/DWesl""><code>@​DWesl</code></a>]</li>; <li>Changed error",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:317,Deployability,release,releasenotes,317,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 8.3.2 to 9.0.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>9.0.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Restrict builtins for ImageMath.eval() <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed ImagePath.Path array handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed redundant part of condition <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5915"">#5915</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Explicitly enable strip chopping for large uncompressed TIFFs <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5517"">#5517</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Use the Windows method to get TCL functions on Cygwin <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5807"">#5807</a> [<a href=""https://github.com/DWesl""><code>@​DWesl</code></a>]</li>; <li>Changed error",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:382,Deployability,release,releasenotes,382,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 8.3.2 to 9.0.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>9.0.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Restrict builtins for ImageMath.eval() <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed ImagePath.Path array handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed redundant part of condition <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5915"">#5915</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Explicitly enable strip chopping for large uncompressed TIFFs <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5517"">#5517</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Use the Windows method to get TCL functions on Cygwin <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5807"">#5807</a> [<a href=""https://github.com/DWesl""><code>@​DWesl</code></a>]</li>; <li>Changed error",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:5738,Deployability,install,install,5738,"illow/Pillow/issues/5909"">#5909</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Add Tidelift alignment action and badge <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5763"">#5763</a> [<a href=""https://github.com/aclark4life""><code>@​aclark4life</code></a>]</li>; <li>Replaced further direct invocations of setup.py <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5906"">#5906</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a> [<a href=""https://github.com/m-shinder""><code>@​m-shinder</code></a>]</li>; <li>Fixed typo <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5902"">#5902</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Switched from deprecated &quot;setup.py install&quot; to &quot;pip install .&quot; <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5896"">#5896</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a> [<a href=""https://github.com/cmbruns""><code>@​cmbruns</code></a>]</li>; <li>Fixed raising OSError in _safe_read when size is greater than SAFEBLOCK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5872"">#5872</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>WebP: Fix memory leak during decoding on failure <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5798",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:5765,Deployability,install,install,5765,"illow/Pillow/issues/5909"">#5909</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Add Tidelift alignment action and badge <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5763"">#5763</a> [<a href=""https://github.com/aclark4life""><code>@​aclark4life</code></a>]</li>; <li>Replaced further direct invocations of setup.py <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5906"">#5906</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a> [<a href=""https://github.com/m-shinder""><code>@​m-shinder</code></a>]</li>; <li>Fixed typo <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5902"">#5902</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Switched from deprecated &quot;setup.py install&quot; to &quot;pip install .&quot; <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5896"">#5896</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a> [<a href=""https://github.com/cmbruns""><code>@​cmbruns</code></a>]</li>; <li>Fixed raising OSError in _safe_read when size is greater than SAFEBLOCK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5872"">#5872</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>WebP: Fix memory leak during decoding on failure <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5798",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:9524,Deployability,configurat,configuration,9524,"n-pillow/Pillow/issues/5833"">#5833</a> [<a href=""https://github.com/hoodmane""><code>@​hoodmane</code></a>]</li>; <li>Add support for pickling TrueType fonts <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5826"">#5826</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Only prefer command line tools SDK on macOS over default MacOSX SDK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5828"">#5828</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix compilation on 64-bit Termux <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5793"">#5793</a> [<a href=""https://github.com/landfillbaby""><code>@​landfillbaby</code></a>]</li>; <li>Replace 'setup.py sdist' with '-m build --sdist' <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5785"">#5785</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use declarative package configuration <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5784"">#5784</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use title for display in ImageShow <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5788"">#5788</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix for PyQt6 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5775"">#5775</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.0 (2022-01-02)</h2>; <ul>; <li>; <p>Restrict builtins for ImageMath.eval(). CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pill",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:14627,Deployability,release,releasenotes,14627,"eaacb""><code>cae5ac4</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5924"">#5924</a> from radarhere/cves</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/ed4cf7813777ad8478cac46f448bc45416a2a99e""><code>ed4cf78</code></a> CVEs TBD</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/d7f60d1d5a746eb01d4cb3c7fb05b6593f46b0f5""><code>d7f60d1</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> from radarhere/imagemath_eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8531b01d6cdf0b70f256f93092caa2a5d91afc11""><code>8531b01</code></a> Restrict builtins for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1efb1d9fabd1dfdbf7982035eca0dae7306abef1""><code>1efb1d9</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5922"">#5922</a> from radarhere/releasenotes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/f6c78713a491764dfac576f6c42127755f2c62b3""><code>f6c7871</code></a> Added release notes for <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> and <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a></li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/032d2dc3658f94718109068ac70799313e440754""><code>032d2dc</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/baae9ec4b67c68e3adaf1208cf54e8de5e38a6fd""><code>baae9ec</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><co",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:14779,Deployability,release,release,14779,"#5924</a> from radarhere/cves</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/ed4cf7813777ad8478cac46f448bc45416a2a99e""><code>ed4cf78</code></a> CVEs TBD</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/d7f60d1d5a746eb01d4cb3c7fb05b6593f46b0f5""><code>d7f60d1</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> from radarhere/imagemath_eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8531b01d6cdf0b70f256f93092caa2a5d91afc11""><code>8531b01</code></a> Restrict builtins for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1efb1d9fabd1dfdbf7982035eca0dae7306abef1""><code>1efb1d9</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5922"">#5922</a> from radarhere/releasenotes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/f6c78713a491764dfac576f6c42127755f2c62b3""><code>f6c7871</code></a> Added release notes for <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> and <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a></li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/032d2dc3658f94718109068ac70799313e440754""><code>032d2dc</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/baae9ec4b67c68e3adaf1208cf54e8de5e38a6fd""><code>baae9ec</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><code>1059eb5</code></a> If appended EOI did not work, do not keep trying</li>; <li>Additional commits viewable in <a href=""https://gith",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:15211,Deployability,Update,Update,15211,"rom radarhere/imagemath_eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8531b01d6cdf0b70f256f93092caa2a5d91afc11""><code>8531b01</code></a> Restrict builtins for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1efb1d9fabd1dfdbf7982035eca0dae7306abef1""><code>1efb1d9</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5922"">#5922</a> from radarhere/releasenotes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/f6c78713a491764dfac576f6c42127755f2c62b3""><code>f6c7871</code></a> Added release notes for <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> and <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a></li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/032d2dc3658f94718109068ac70799313e440754""><code>032d2dc</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/baae9ec4b67c68e3adaf1208cf54e8de5e38a6fd""><code>baae9ec</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><code>1059eb5</code></a> If appended EOI did not work, do not keep trying</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:16135,Deployability,update,updates,16135,"python-pillow/Pillow/commit/032d2dc3658f94718109068ac70799313e440754""><code>032d2dc</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/baae9ec4b67c68e3adaf1208cf54e8de5e38a6fd""><code>baae9ec</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><code>1059eb5</code></a> If appended EOI did not work, do not keep trying</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:17287,Deployability,upgrade,upgrade,17287,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:17463,Deployability,upgrade,upgrade,17463,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:17633,Deployability,upgrade,upgrade,17633,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:515,Integrability,depend,dependabot,515,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 8.3.2 to 9.0.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>9.0.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Restrict builtins for ImageMath.eval() <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed ImagePath.Path array handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed redundant part of condition <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5915"">#5915</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Explicitly enable strip chopping for large uncompressed TIFFs <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5517"">#5517</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Use the Windows method to get TCL functions on Cygwin <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5807"">#5807</a> [<a href=""https://github.com/DWesl""><code>@​DWesl</code></a>]</li>; <li>Changed error",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:747,Integrability,depend,dependabot,747,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 8.3.2 to 9.0.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>9.0.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Restrict builtins for ImageMath.eval() <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed ImagePath.Path array handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed redundant part of condition <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5915"">#5915</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Explicitly enable strip chopping for large uncompressed TIFFs <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5517"">#5517</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Use the Windows method to get TCL functions on Cygwin <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5807"">#5807</a> [<a href=""https://github.com/DWesl""><code>@​DWesl</code></a>]</li>; <li>Changed error",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:955,Integrability,depend,dependabot,955,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 8.3.2 to 9.0.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>9.0.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Restrict builtins for ImageMath.eval() <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed ImagePath.Path array handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed redundant part of condition <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5915"">#5915</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Explicitly enable strip chopping for large uncompressed TIFFs <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5517"">#5517</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Use the Windows method to get TCL functions on Cygwin <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5807"">#5807</a> [<a href=""https://github.com/DWesl""><code>@​DWesl</code></a>]</li>; <li>Changed error",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:1195,Integrability,depend,dependabot,1195,""">pillow's releases</a>.</em></p>; <blockquote>; <h2>9.0.0</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Restrict builtins for ImageMath.eval() <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed ImagePath.Path array handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed redundant part of condition <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5915"">#5915</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Explicitly enable strip chopping for large uncompressed TIFFs <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5517"">#5517</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Use the Windows method to get TCL functions on Cygwin <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5807"">#5807</a> [<a href=""https://github.com/DWesl""><code>@​DWesl</code></a>]</li>; <li>Changed error type to allow for incremental WebP parsing <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5404"">#5404</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:1403,Integrability,depend,dependabot,1403,"></p>; <h2>Changes</h2>; <ul>; <li>Restrict builtins for ImageMath.eval() <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed ImagePath.Path array handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed redundant part of condition <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5915"">#5915</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Explicitly enable strip chopping for large uncompressed TIFFs <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5517"">#5517</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Use the Windows method to get TCL functions on Cygwin <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5807"">#5807</a> [<a href=""https://github.com/DWesl""><code>@​DWesl</code></a>]</li>; <li>Changed error type to allow for incremental WebP parsing <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5404"">#5404</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</co",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:1637,Integrability,depend,dependabot,1637,"]</li>; <li>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed ImagePath.Path array handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed redundant part of condition <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5915"">#5915</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Explicitly enable strip chopping for large uncompressed TIFFs <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5517"">#5517</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Use the Windows method to get TCL functions on Cygwin <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5807"">#5807</a> [<a href=""https://github.com/DWesl""><code>@​DWesl</code></a>]</li>; <li>Changed error type to allow for incremental WebP parsing <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5404"">#5404</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure that BMP pixel data offset does not ignore palette <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5899"">#5899</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code><",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:1857,Integrability,depend,dependabot,1857,"e</code></a>]</li>; <li>Fixed ImagePath.Path array handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed redundant part of condition <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5915"">#5915</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Explicitly enable strip chopping for large uncompressed TIFFs <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5517"">#5517</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Use the Windows method to get TCL functions on Cygwin <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5807"">#5807</a> [<a href=""https://github.com/DWesl""><code>@​DWesl</code></a>]</li>; <li>Changed error type to allow for incremental WebP parsing <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5404"">#5404</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure that BMP pixel data offset does not ignore palette <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5899"">#5899</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:2078,Integrability,depend,dependabot,2078,"</li>; <li>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed redundant part of condition <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5915"">#5915</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Explicitly enable strip chopping for large uncompressed TIFFs <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5517"">#5517</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Use the Windows method to get TCL functions on Cygwin <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5807"">#5807</a> [<a href=""https://github.com/DWesl""><code>@​DWesl</code></a>]</li>; <li>Changed error type to allow for incremental WebP parsing <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5404"">#5404</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure that BMP pixel data offset does not ignore palette <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5899"">#5899</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use latin1 encoding to decode bytes <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5870"">#5870</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:2289,Integrability,depend,dependabot,2289,"<code>@​radarhere</code></a>]</li>; <li>Removed redundant part of condition <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5915"">#5915</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Explicitly enable strip chopping for large uncompressed TIFFs <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5517"">#5517</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Use the Windows method to get TCL functions on Cygwin <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5807"">#5807</a> [<a href=""https://github.com/DWesl""><code>@​DWesl</code></a>]</li>; <li>Changed error type to allow for incremental WebP parsing <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5404"">#5404</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure that BMP pixel data offset does not ignore palette <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5899"">#5899</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use latin1 encoding to decode bytes <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5870"">#5870</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</co",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:2519,Integrability,depend,dependabot,2519,"e></a>]</li>; <li>Explicitly enable strip chopping for large uncompressed TIFFs <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5517"">#5517</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Use the Windows method to get TCL functions on Cygwin <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5807"">#5807</a> [<a href=""https://github.com/DWesl""><code>@​DWesl</code></a>]</li>; <li>Changed error type to allow for incremental WebP parsing <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5404"">#5404</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure that BMP pixel data offset does not ignore palette <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5899"">#5899</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use latin1 encoding to decode bytes <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5870"">#5870</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a> [<a href=""https://github.com/radarhere""><code>@​ra",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:2735,Integrability,depend,dependabot,2735,"​kmilos</code></a>]</li>; <li>Use the Windows method to get TCL functions on Cygwin <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5807"">#5807</a> [<a href=""https://github.com/DWesl""><code>@​DWesl</code></a>]</li>; <li>Changed error type to allow for incremental WebP parsing <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5404"">#5404</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure that BMP pixel data offset does not ignore palette <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5899"">#5899</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use latin1 encoding to decode bytes <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5870"">#5870</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code><",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:2943,Integrability,depend,dependabot,2943,"sl""><code>@​DWesl</code></a>]</li>; <li>Changed error type to allow for incremental WebP parsing <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5404"">#5404</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure that BMP pixel data offset does not ignore palette <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5899"">#5899</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use latin1 encoding to decode bytes <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5870"">#5870</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</co",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:3175,Integrability,depend,dependabot,3175,"de>@​radarhere</code></a>]</li>; <li>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure that BMP pixel data offset does not ignore palette <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5899"">#5899</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use latin1 encoding to decode bytes <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5870"">#5870</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]<",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:3416,Integrability,depend,dependabot,3416,">; <li>Ensure that BMP pixel data offset does not ignore palette <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5899"">#5899</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use latin1 encoding to decode bytes <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5870"">#5870</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:3617,Integrability,depend,dependabot,3617,"e>@​radarhere</code></a>]</li>; <li>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Use latin1 encoding to decode bytes <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5870"">#5870</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Image.NONE is only used for resampling and dithers <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5908"">#5908</a> [<a href=""https://github.com/radarhere""><code>@​radarhere<",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:3829,Integrability,depend,dependabot,3829,"<code>@​radarhere</code></a>]</li>; <li>Use latin1 encoding to decode bytes <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5870"">#5870</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Image.NONE is only used for resampling and dithers <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5908"">#5908</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed freeing pointer in ImageDraw.Outline.transform <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5909"">#5909</a> [<a href=""https://github.com/radarhere""><code",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:4052,Integrability,depend,dependabot,4052,"re</code></a>]</li>; <li>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Image.NONE is only used for resampling and dithers <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5908"">#5908</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed freeing pointer in ImageDraw.Outline.transform <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5909"">#5909</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Add Tidelift alignment action and badge <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5763"">#5763</a> [<a href=""https://github.com/aclark4life""><code>@​aclark",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:4283,Integrability,depend,dependabot,4283,"ere</code></a>]</li>; <li>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Image.NONE is only used for resampling and dithers <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5908"">#5908</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed freeing pointer in ImageDraw.Outline.transform <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5909"">#5909</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Add Tidelift alignment action and badge <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5763"">#5763</a> [<a href=""https://github.com/aclark4life""><code>@​aclark4life</code></a>]</li>; <li>Replaced further direct invocations of setup.py <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5906"">#5906</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:4506,Integrability,depend,dependabot,4506,"re""><code>@​radarhere</code></a>]</li>; <li>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Image.NONE is only used for resampling and dithers <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5908"">#5908</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed freeing pointer in ImageDraw.Outline.transform <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5909"">#5909</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Add Tidelift alignment action and badge <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5763"">#5763</a> [<a href=""https://github.com/aclark4life""><code>@​aclark4life</code></a>]</li>; <li>Replaced further direct invocations of setup.py <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5906"">#5906</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a> [<a href=""https://github.com/m-shinder""><code>@​m-shinder</code></a>]</li>; <",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:4731,Integrability,depend,dependabot,4731,"ode></a>]</li>; <li>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Image.NONE is only used for resampling and dithers <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5908"">#5908</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed freeing pointer in ImageDraw.Outline.transform <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5909"">#5909</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Add Tidelift alignment action and badge <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5763"">#5763</a> [<a href=""https://github.com/aclark4life""><code>@​aclark4life</code></a>]</li>; <li>Replaced further direct invocations of setup.py <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5906"">#5906</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a> [<a href=""https://github.com/m-shinder""><code>@​m-shinder</code></a>]</li>; <li>Fixed typo <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5902"">#5902</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Switched from deprecated &quot;setup.py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:4943,Integrability,depend,dependabot,4943,"ode></a>]</li>; <li>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Image.NONE is only used for resampling and dithers <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5908"">#5908</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed freeing pointer in ImageDraw.Outline.transform <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5909"">#5909</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Add Tidelift alignment action and badge <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5763"">#5763</a> [<a href=""https://github.com/aclark4life""><code>@​aclark4life</code></a>]</li>; <li>Replaced further direct invocations of setup.py <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5906"">#5906</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a> [<a href=""https://github.com/m-shinder""><code>@​m-shinder</code></a>]</li>; <li>Fixed typo <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5902"">#5902</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Switched from deprecated &quot;setup.py install&quot; to &quot;pip install .&quot; <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5896"">#5896</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:5167,Integrability,depend,dependabot,5167,"de></a>]</li>; <li>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Image.NONE is only used for resampling and dithers <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5908"">#5908</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed freeing pointer in ImageDraw.Outline.transform <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5909"">#5909</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Add Tidelift alignment action and badge <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5763"">#5763</a> [<a href=""https://github.com/aclark4life""><code>@​aclark4life</code></a>]</li>; <li>Replaced further direct invocations of setup.py <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5906"">#5906</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a> [<a href=""https://github.com/m-shinder""><code>@​m-shinder</code></a>]</li>; <li>Fixed typo <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5902"">#5902</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Switched from deprecated &quot;setup.py install&quot; to &quot;pip install .&quot; <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5896"">#5896</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a> [<a href=""https://github.com/cmbruns""><code>@​cmbruns</code></a>]</li>; <li>Fixed ra",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:5376,Integrability,depend,dependabot,5376,"><code>@​radarhere</code></a>]</li>; <li>Image.NONE is only used for resampling and dithers <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5908"">#5908</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed freeing pointer in ImageDraw.Outline.transform <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5909"">#5909</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Add Tidelift alignment action and badge <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5763"">#5763</a> [<a href=""https://github.com/aclark4life""><code>@​aclark4life</code></a>]</li>; <li>Replaced further direct invocations of setup.py <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5906"">#5906</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a> [<a href=""https://github.com/m-shinder""><code>@​m-shinder</code></a>]</li>; <li>Fixed typo <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5902"">#5902</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Switched from deprecated &quot;setup.py install&quot; to &quot;pip install .&quot; <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5896"">#5896</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a> [<a href=""https://github.com/cmbruns""><code>@​cmbruns</code></a>]</li>; <li>Fixed raising OSError in _safe_read when size is greater than SAFEBLOCK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5872"">#5872</a> [<a href=""https://github.com/radarhere""><code>@​radar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:5559,Integrability,depend,dependabot,5559," [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed freeing pointer in ImageDraw.Outline.transform <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5909"">#5909</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Add Tidelift alignment action and badge <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5763"">#5763</a> [<a href=""https://github.com/aclark4life""><code>@​aclark4life</code></a>]</li>; <li>Replaced further direct invocations of setup.py <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5906"">#5906</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a> [<a href=""https://github.com/m-shinder""><code>@​m-shinder</code></a>]</li>; <li>Fixed typo <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5902"">#5902</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Switched from deprecated &quot;setup.py install&quot; to &quot;pip install .&quot; <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5896"">#5896</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a> [<a href=""https://github.com/cmbruns""><code>@​cmbruns</code></a>]</li>; <li>Fixed raising OSError in _safe_read when size is greater than SAFEBLOCK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5872"">#5872</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a> [<a href=""https://g",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:5814,Integrability,depend,dependabot,5814,"radarhere""><code>@​radarhere</code></a>]</li>; <li>Add Tidelift alignment action and badge <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5763"">#5763</a> [<a href=""https://github.com/aclark4life""><code>@​aclark4life</code></a>]</li>; <li>Replaced further direct invocations of setup.py <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5906"">#5906</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a> [<a href=""https://github.com/m-shinder""><code>@​m-shinder</code></a>]</li>; <li>Fixed typo <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5902"">#5902</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Switched from deprecated &quot;setup.py install&quot; to &quot;pip install .&quot; <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5896"">#5896</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a> [<a href=""https://github.com/cmbruns""><code>@​cmbruns</code></a>]</li>; <li>Fixed raising OSError in _safe_read when size is greater than SAFEBLOCK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5872"">#5872</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>WebP: Fix memory leak during decoding on failure <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5798"">#5798</a> [<a href=""https://github.com/ilai-deutel""><code>@​ila",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:6030,Integrability,depend,dependabot,6030,"rk4life""><code>@​aclark4life</code></a>]</li>; <li>Replaced further direct invocations of setup.py <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5906"">#5906</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a> [<a href=""https://github.com/m-shinder""><code>@​m-shinder</code></a>]</li>; <li>Fixed typo <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5902"">#5902</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Switched from deprecated &quot;setup.py install&quot; to &quot;pip install .&quot; <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5896"">#5896</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a> [<a href=""https://github.com/cmbruns""><code>@​cmbruns</code></a>]</li>; <li>Fixed raising OSError in _safe_read when size is greater than SAFEBLOCK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5872"">#5872</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>WebP: Fix memory leak during decoding on failure <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5798"">#5798</a> [<a href=""https://github.com/ilai-deutel""><code>@​ilai-deutel</code></a>]</li>; <li>Do not prematurely return in ImageFile when saving to stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5665"">#5665</a> [<a href=""https://github.com/inf",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:6270,Integrability,depend,dependabot,6270,"adarhere</code></a>]</li>; <li>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a> [<a href=""https://github.com/m-shinder""><code>@​m-shinder</code></a>]</li>; <li>Fixed typo <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5902"">#5902</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Switched from deprecated &quot;setup.py install&quot; to &quot;pip install .&quot; <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5896"">#5896</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a> [<a href=""https://github.com/cmbruns""><code>@​cmbruns</code></a>]</li>; <li>Fixed raising OSError in _safe_read when size is greater than SAFEBLOCK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5872"">#5872</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>WebP: Fix memory leak during decoding on failure <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5798"">#5798</a> [<a href=""https://github.com/ilai-deutel""><code>@​ilai-deutel</code></a>]</li>; <li>Do not prematurely return in ImageFile when saving to stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5665"">#5665</a> [<a href=""https://github.com/infmagic2047""><code>@​infmagic2047</code></a>]</li>; <li>Added support for top right and bottom right TGA orientations <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5829"">#5829</a> [<a href=""https://github.com/rad",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:6487,Integrability,depend,dependabot,6487,"</code></a>]</li>; <li>Fixed typo <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5902"">#5902</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Switched from deprecated &quot;setup.py install&quot; to &quot;pip install .&quot; <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5896"">#5896</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a> [<a href=""https://github.com/cmbruns""><code>@​cmbruns</code></a>]</li>; <li>Fixed raising OSError in _safe_read when size is greater than SAFEBLOCK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5872"">#5872</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>WebP: Fix memory leak during decoding on failure <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5798"">#5798</a> [<a href=""https://github.com/ilai-deutel""><code>@​ilai-deutel</code></a>]</li>; <li>Do not prematurely return in ImageFile when saving to stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5665"">#5665</a> [<a href=""https://github.com/infmagic2047""><code>@​infmagic2047</code></a>]</li>; <li>Added support for top right and bottom right TGA orientations <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5829"">#5829</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Corrected ICNS file length in header <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5845"">#5845</a> [<a href=""https://github.com/radarhere"">",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:6708,Integrability,depend,dependabot,6708,"eprecated &quot;setup.py install&quot; to &quot;pip install .&quot; <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5896"">#5896</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a> [<a href=""https://github.com/cmbruns""><code>@​cmbruns</code></a>]</li>; <li>Fixed raising OSError in _safe_read when size is greater than SAFEBLOCK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5872"">#5872</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>WebP: Fix memory leak during decoding on failure <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5798"">#5798</a> [<a href=""https://github.com/ilai-deutel""><code>@​ilai-deutel</code></a>]</li>; <li>Do not prematurely return in ImageFile when saving to stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5665"">#5665</a> [<a href=""https://github.com/infmagic2047""><code>@​infmagic2047</code></a>]</li>; <li>Added support for top right and bottom right TGA orientations <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5829"">#5829</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Corrected ICNS file length in header <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5845"">#5845</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Block tile TIFF tags when saving <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5839"">#5839</a> [<a href=""https://github.com/radarhere""><code>@​radarher",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:6945,Integrability,depend,dependabot,6945,"li>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a> [<a href=""https://github.com/cmbruns""><code>@​cmbruns</code></a>]</li>; <li>Fixed raising OSError in _safe_read when size is greater than SAFEBLOCK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5872"">#5872</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>WebP: Fix memory leak during decoding on failure <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5798"">#5798</a> [<a href=""https://github.com/ilai-deutel""><code>@​ilai-deutel</code></a>]</li>; <li>Do not prematurely return in ImageFile when saving to stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5665"">#5665</a> [<a href=""https://github.com/infmagic2047""><code>@​infmagic2047</code></a>]</li>; <li>Added support for top right and bottom right TGA orientations <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5829"">#5829</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Corrected ICNS file length in header <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5845"">#5845</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Block tile TIFF tags when saving <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5839"">#5839</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added line width argument to ImageDraw polygon <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5694"">#5694</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:7185,Integrability,depend,dependabot,7185,"_safe_read when size is greater than SAFEBLOCK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5872"">#5872</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>WebP: Fix memory leak during decoding on failure <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5798"">#5798</a> [<a href=""https://github.com/ilai-deutel""><code>@​ilai-deutel</code></a>]</li>; <li>Do not prematurely return in ImageFile when saving to stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5665"">#5665</a> [<a href=""https://github.com/infmagic2047""><code>@​infmagic2047</code></a>]</li>; <li>Added support for top right and bottom right TGA orientations <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5829"">#5829</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Corrected ICNS file length in header <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5845"">#5845</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Block tile TIFF tags when saving <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5839"">#5839</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added line width argument to ImageDraw polygon <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5694"">#5694</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Do not redeclare class each time when converting to NumPy <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5844"">#5844</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Only",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:7394,Integrability,depend,dependabot,7394,"/li>; <li>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>WebP: Fix memory leak during decoding on failure <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5798"">#5798</a> [<a href=""https://github.com/ilai-deutel""><code>@​ilai-deutel</code></a>]</li>; <li>Do not prematurely return in ImageFile when saving to stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5665"">#5665</a> [<a href=""https://github.com/infmagic2047""><code>@​infmagic2047</code></a>]</li>; <li>Added support for top right and bottom right TGA orientations <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5829"">#5829</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Corrected ICNS file length in header <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5845"">#5845</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Block tile TIFF tags when saving <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5839"">#5839</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added line width argument to ImageDraw polygon <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5694"">#5694</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Do not redeclare class each time when converting to NumPy <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5844"">#5844</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Only prevent repeated polygon pixels when drawing with transparency <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5835"">#5835</a> [<a href=""https://github.com/radarhere""><code>@​radar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:7599,Integrability,depend,dependabot,7599,"/code></a>]</li>; <li>WebP: Fix memory leak during decoding on failure <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5798"">#5798</a> [<a href=""https://github.com/ilai-deutel""><code>@​ilai-deutel</code></a>]</li>; <li>Do not prematurely return in ImageFile when saving to stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5665"">#5665</a> [<a href=""https://github.com/infmagic2047""><code>@​infmagic2047</code></a>]</li>; <li>Added support for top right and bottom right TGA orientations <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5829"">#5829</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Corrected ICNS file length in header <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5845"">#5845</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Block tile TIFF tags when saving <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5839"">#5839</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added line width argument to ImageDraw polygon <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5694"">#5694</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Do not redeclare class each time when converting to NumPy <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5844"">#5844</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Only prevent repeated polygon pixels when drawing with transparency <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5835"">#5835</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix pushes_fd method signature <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5833"">#5833</a> [<a href=""https://github.com/hoodmane""><code>@​hoodmane",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:7818,Integrability,depend,dependabot,7818,"eutel</code></a>]</li>; <li>Do not prematurely return in ImageFile when saving to stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5665"">#5665</a> [<a href=""https://github.com/infmagic2047""><code>@​infmagic2047</code></a>]</li>; <li>Added support for top right and bottom right TGA orientations <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5829"">#5829</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Corrected ICNS file length in header <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5845"">#5845</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Block tile TIFF tags when saving <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5839"">#5839</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added line width argument to ImageDraw polygon <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5694"">#5694</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Do not redeclare class each time when converting to NumPy <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5844"">#5844</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Only prevent repeated polygon pixels when drawing with transparency <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5835"">#5835</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix pushes_fd method signature <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5833"">#5833</a> [<a href=""https://github.com/hoodmane""><code>@​hoodmane</code></a>]</li>; <li>Add support for pickling TrueType fonts <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5826"">#5826</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]<",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:8048,Integrability,depend,dependabot,8048,"@​infmagic2047</code></a>]</li>; <li>Added support for top right and bottom right TGA orientations <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5829"">#5829</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Corrected ICNS file length in header <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5845"">#5845</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Block tile TIFF tags when saving <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5839"">#5839</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added line width argument to ImageDraw polygon <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5694"">#5694</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Do not redeclare class each time when converting to NumPy <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5844"">#5844</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Only prevent repeated polygon pixels when drawing with transparency <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5835"">#5835</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix pushes_fd method signature <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5833"">#5833</a> [<a href=""https://github.com/hoodmane""><code>@​hoodmane</code></a>]</li>; <li>Add support for pickling TrueType fonts <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5826"">#5826</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Only prefer command line tools SDK on macOS over default MacOSX SDK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5828"">#5828</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:8288,Integrability,depend,dependabot,8288,"adarhere</code></a>]</li>; <li>Corrected ICNS file length in header <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5845"">#5845</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Block tile TIFF tags when saving <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5839"">#5839</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added line width argument to ImageDraw polygon <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5694"">#5694</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Do not redeclare class each time when converting to NumPy <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5844"">#5844</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Only prevent repeated polygon pixels when drawing with transparency <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5835"">#5835</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix pushes_fd method signature <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5833"">#5833</a> [<a href=""https://github.com/hoodmane""><code>@​hoodmane</code></a>]</li>; <li>Add support for pickling TrueType fonts <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5826"">#5826</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Only prefer command line tools SDK on macOS over default MacOSX SDK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5828"">#5828</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix compilation on 64-bit Termux <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5793"">#5793</a> [<a href=""https://github.com/landfillbaby""><code>@​landfillbaby</code></a>]</li>; <li>Replace '",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:8491,Integrability,depend,dependabot,8491,"de>@​radarhere</code></a>]</li>; <li>Block tile TIFF tags when saving <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5839"">#5839</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added line width argument to ImageDraw polygon <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5694"">#5694</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Do not redeclare class each time when converting to NumPy <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5844"">#5844</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Only prevent repeated polygon pixels when drawing with transparency <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5835"">#5835</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix pushes_fd method signature <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5833"">#5833</a> [<a href=""https://github.com/hoodmane""><code>@​hoodmane</code></a>]</li>; <li>Add support for pickling TrueType fonts <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5826"">#5826</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Only prefer command line tools SDK on macOS over default MacOSX SDK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5828"">#5828</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix compilation on 64-bit Termux <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5793"">#5793</a> [<a href=""https://github.com/landfillbaby""><code>@​landfillbaby</code></a>]</li>; <li>Replace 'setup.py sdist' with '-m build --sdist' <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5785"">#5785</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:8701,Integrability,depend,dependabot,8701,"radarhere</code></a>]</li>; <li>Added line width argument to ImageDraw polygon <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5694"">#5694</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Do not redeclare class each time when converting to NumPy <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5844"">#5844</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Only prevent repeated polygon pixels when drawing with transparency <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5835"">#5835</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix pushes_fd method signature <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5833"">#5833</a> [<a href=""https://github.com/hoodmane""><code>@​hoodmane</code></a>]</li>; <li>Add support for pickling TrueType fonts <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5826"">#5826</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Only prefer command line tools SDK on macOS over default MacOSX SDK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5828"">#5828</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix compilation on 64-bit Termux <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5793"">#5793</a> [<a href=""https://github.com/landfillbaby""><code>@​landfillbaby</code></a>]</li>; <li>Replace 'setup.py sdist' with '-m build --sdist' <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5785"">#5785</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use declarative package configuration <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5784"">#5784</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:8935,Integrability,depend,dependabot,8935,"></a>]</li>; <li>Do not redeclare class each time when converting to NumPy <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5844"">#5844</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Only prevent repeated polygon pixels when drawing with transparency <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5835"">#5835</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix pushes_fd method signature <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5833"">#5833</a> [<a href=""https://github.com/hoodmane""><code>@​hoodmane</code></a>]</li>; <li>Add support for pickling TrueType fonts <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5826"">#5826</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Only prefer command line tools SDK on macOS over default MacOSX SDK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5828"">#5828</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix compilation on 64-bit Termux <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5793"">#5793</a> [<a href=""https://github.com/landfillbaby""><code>@​landfillbaby</code></a>]</li>; <li>Replace 'setup.py sdist' with '-m build --sdist' <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5785"">#5785</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use declarative package configuration <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5784"">#5784</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use title for display in ImageShow <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5788"">#5788</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix for PyQt6 <a href=""https:/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:9140,Integrability,depend,dependabot,9140,"""><code>@​radarhere</code></a>]</li>; <li>Only prevent repeated polygon pixels when drawing with transparency <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5835"">#5835</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix pushes_fd method signature <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5833"">#5833</a> [<a href=""https://github.com/hoodmane""><code>@​hoodmane</code></a>]</li>; <li>Add support for pickling TrueType fonts <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5826"">#5826</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Only prefer command line tools SDK on macOS over default MacOSX SDK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5828"">#5828</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix compilation on 64-bit Termux <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5793"">#5793</a> [<a href=""https://github.com/landfillbaby""><code>@​landfillbaby</code></a>]</li>; <li>Replace 'setup.py sdist' with '-m build --sdist' <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5785"">#5785</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use declarative package configuration <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5784"">#5784</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use title for display in ImageShow <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5788"">#5788</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix for PyQt6 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5775"">#5775</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (tr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:9367,Integrability,depend,dependabot,9367,"com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix pushes_fd method signature <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5833"">#5833</a> [<a href=""https://github.com/hoodmane""><code>@​hoodmane</code></a>]</li>; <li>Add support for pickling TrueType fonts <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5826"">#5826</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Only prefer command line tools SDK on macOS over default MacOSX SDK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5828"">#5828</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix compilation on 64-bit Termux <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5793"">#5793</a> [<a href=""https://github.com/landfillbaby""><code>@​landfillbaby</code></a>]</li>; <li>Replace 'setup.py sdist' with '-m build --sdist' <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5785"">#5785</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use declarative package configuration <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5784"">#5784</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use title for display in ImageShow <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5788"">#5788</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix for PyQt6 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5775"">#5775</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.0 (2022-01-0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:9571,Integrability,depend,dependabot,9571,"om/hoodmane""><code>@​hoodmane</code></a>]</li>; <li>Add support for pickling TrueType fonts <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5826"">#5826</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Only prefer command line tools SDK on macOS over default MacOSX SDK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5828"">#5828</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix compilation on 64-bit Termux <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5793"">#5793</a> [<a href=""https://github.com/landfillbaby""><code>@​landfillbaby</code></a>]</li>; <li>Replace 'setup.py sdist' with '-m build --sdist' <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5785"">#5785</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use declarative package configuration <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5784"">#5784</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use title for display in ImageShow <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5788"">#5788</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix for PyQt6 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5775"">#5775</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.0 (2022-01-02)</h2>; <ul>; <li>; <p>Restrict builtins for ImageMath.eval(). CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a>; [radarhere]</p>; </li>; <li>; <p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:9772,Integrability,depend,dependabot,9772,"/github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Only prefer command line tools SDK on macOS over default MacOSX SDK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5828"">#5828</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix compilation on 64-bit Termux <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5793"">#5793</a> [<a href=""https://github.com/landfillbaby""><code>@​landfillbaby</code></a>]</li>; <li>Replace 'setup.py sdist' with '-m build --sdist' <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5785"">#5785</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use declarative package configuration <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5784"">#5784</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use title for display in ImageShow <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5788"">#5788</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix for PyQt6 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5775"">#5775</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.0 (2022-01-02)</h2>; <ul>; <li>; <p>Restrict builtins for ImageMath.eval(). CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a>; [radarhere]</p>; </li>; <li>; <p>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a>; [radarhere]</p>; </li>; <li>; <p>Fixed ImagePat",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:9958,Integrability,depend,dependabot,9958,"/Pillow/issues/5828"">#5828</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix compilation on 64-bit Termux <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5793"">#5793</a> [<a href=""https://github.com/landfillbaby""><code>@​landfillbaby</code></a>]</li>; <li>Replace 'setup.py sdist' with '-m build --sdist' <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5785"">#5785</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use declarative package configuration <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5784"">#5784</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use title for display in ImageShow <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5788"">#5788</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix for PyQt6 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5775"">#5775</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.0 (2022-01-02)</h2>; <ul>; <li>; <p>Restrict builtins for ImageMath.eval(). CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a>; [radarhere]</p>; </li>; <li>; <p>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a>; [radarhere]</p>; </li>; <li>; <p>Fixed ImagePath.Path array handling. CVE-2022-22815, CVE-2022-22816 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a>; [radarhere]</p>; </li>; <li>; <p>Remove",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:10485,Integrability,depend,dependabot,10485,"/li>; <li>Use declarative package configuration <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5784"">#5784</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use title for display in ImageShow <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5788"">#5788</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix for PyQt6 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5775"">#5775</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.0 (2022-01-02)</h2>; <ul>; <li>; <p>Restrict builtins for ImageMath.eval(). CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a>; [radarhere]</p>; </li>; <li>; <p>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a>; [radarhere]</p>; </li>; <li>; <p>Fixed ImagePath.Path array handling. CVE-2022-22815, CVE-2022-22816 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a>; [radarhere]</p>; </li>; <li>; <p>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>; [radarhere]</p>; </li>; <li>; <p>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a>; [radarhere]</p>; </li>; <li>; <p>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a>; [radarhere]</p>; </li>; <li>; <p>Fixe",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:10671,Integrability,depend,dependabot,10671,"ugovk</code></a>]</li>; <li>Use title for display in ImageShow <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5788"">#5788</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix for PyQt6 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5775"">#5775</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.0 (2022-01-02)</h2>; <ul>; <li>; <p>Restrict builtins for ImageMath.eval(). CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a>; [radarhere]</p>; </li>; <li>; <p>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a>; [radarhere]</p>; </li>; <li>; <p>Fixed ImagePath.Path array handling. CVE-2022-22815, CVE-2022-22816 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a>; [radarhere]</p>; </li>; <li>; <p>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>; [radarhere]</p>; </li>; <li>; <p>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a>; [radarhere]</p>; </li>; <li>; <p>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a>; [radarhere]</p>; </li>; <li>; <p>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a>; [radarhere]</p>; </li>; <li>; <p>When",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:10865,Integrability,depend,dependabot,10865,"><code>@​radarhere</code></a>]</li>; <li>Fix for PyQt6 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5775"">#5775</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.0 (2022-01-02)</h2>; <ul>; <li>; <p>Restrict builtins for ImageMath.eval(). CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a>; [radarhere]</p>; </li>; <li>; <p>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a>; [radarhere]</p>; </li>; <li>; <p>Fixed ImagePath.Path array handling. CVE-2022-22815, CVE-2022-22816 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a>; [radarhere]</p>; </li>; <li>; <p>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>; [radarhere]</p>; </li>; <li>; <p>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a>; [radarhere]</p>; </li>; <li>; <p>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a>; [radarhere]</p>; </li>; <li>; <p>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a>; [radarhere]</p>; </li>; <li>; <p>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a>; [radarhere]</p>; </li>; <li>; <p>Pas",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:11059,Integrability,depend,dependabot,11059,"govk</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.0 (2022-01-02)</h2>; <ul>; <li>; <p>Restrict builtins for ImageMath.eval(). CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a>; [radarhere]</p>; </li>; <li>; <p>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a>; [radarhere]</p>; </li>; <li>; <p>Fixed ImagePath.Path array handling. CVE-2022-22815, CVE-2022-22816 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a>; [radarhere]</p>; </li>; <li>; <p>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>; [radarhere]</p>; </li>; <li>; <p>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a>; [radarhere]</p>; </li>; <li>; <p>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a>; [radarhere]</p>; </li>; <li>; <p>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a>; [radarhere]</p>; </li>; <li>; <p>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a>; [radarhere]</p>; </li>; <li>; <p>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a>; [radarhere]</p>; </li>; <li>; <p>Added rounding when converting P and PA <a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:11224,Integrability,depend,dependabot,11224,"rom <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.0 (2022-01-02)</h2>; <ul>; <li>; <p>Restrict builtins for ImageMath.eval(). CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a>; [radarhere]</p>; </li>; <li>; <p>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a>; [radarhere]</p>; </li>; <li>; <p>Fixed ImagePath.Path array handling. CVE-2022-22815, CVE-2022-22816 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a>; [radarhere]</p>; </li>; <li>; <p>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>; [radarhere]</p>; </li>; <li>; <p>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a>; [radarhere]</p>; </li>; <li>; <p>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a>; [radarhere]</p>; </li>; <li>; <p>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a>; [radarhere]</p>; </li>; <li>; <p>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a>; [radarhere]</p>; </li>; <li>; <p>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a>; [radarhere]</p>; </li>; <li>; <p>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a>; [radarhere]</p>; </li>; <li>; <p>Improved putdata() documentation and data",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:11394,Integrability,depend,dependabot,11394,"strict builtins for ImageMath.eval(). CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a>; [radarhere]</p>; </li>; <li>; <p>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a>; [radarhere]</p>; </li>; <li>; <p>Fixed ImagePath.Path array handling. CVE-2022-22815, CVE-2022-22816 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a>; [radarhere]</p>; </li>; <li>; <p>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>; [radarhere]</p>; </li>; <li>; <p>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a>; [radarhere]</p>; </li>; <li>; <p>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a>; [radarhere]</p>; </li>; <li>; <p>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a>; [radarhere]</p>; </li>; <li>; <p>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a>; [radarhere]</p>; </li>; <li>; <p>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a>; [radarhere]</p>; </li>; <li>; <p>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a>; [radarhere]</p>; </li>; <li>; <p>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a>; [radarhere]</p>; </li>; <li>; <p>Exclude carriage return in PDF reg",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:11580,Integrability,depend,dependabot,11580,"JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a>; [radarhere]</p>; </li>; <li>; <p>Fixed ImagePath.Path array handling. CVE-2022-22815, CVE-2022-22816 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a>; [radarhere]</p>; </li>; <li>; <p>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>; [radarhere]</p>; </li>; <li>; <p>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a>; [radarhere]</p>; </li>; <li>; <p>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a>; [radarhere]</p>; </li>; <li>; <p>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a>; [radarhere]</p>; </li>; <li>; <p>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a>; [radarhere]</p>; </li>; <li>; <p>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a>; [radarhere]</p>; </li>; <li>; <p>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a>; [radarhere]</p>; </li>; <li>; <p>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a>; [radarhere]</p>; </li>; <li>; <p>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a>; [hugovk]</p>; </li>; <li>; <p>Fixed freeing pointer in ImageDraw.Out",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:11775,Integrability,depend,dependabot,11775,"Path array handling. CVE-2022-22815, CVE-2022-22816 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a>; [radarhere]</p>; </li>; <li>; <p>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>; [radarhere]</p>; </li>; <li>; <p>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a>; [radarhere]</p>; </li>; <li>; <p>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a>; [radarhere]</p>; </li>; <li>; <p>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a>; [radarhere]</p>; </li>; <li>; <p>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a>; [radarhere]</p>; </li>; <li>; <p>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a>; [radarhere]</p>; </li>; <li>; <p>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a>; [radarhere]</p>; </li>; <li>; <p>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a>; [radarhere]</p>; </li>; <li>; <p>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a>; [hugovk]</p>; </li>; <li>; <p>Fixed freeing pointer in ImageDraw.Outline.transform <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5909"">#5909</a>; [radarhere]</p>; </li>; <li>; <p>Added ImageShow support for xdg-open <a href=""https://",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:11930,Integrability,depend,dependabot,11930,"]</p>; </li>; <li>; <p>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>; [radarhere]</p>; </li>; <li>; <p>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a>; [radarhere]</p>; </li>; <li>; <p>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a>; [radarhere]</p>; </li>; <li>; <p>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a>; [radarhere]</p>; </li>; <li>; <p>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a>; [radarhere]</p>; </li>; <li>; <p>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a>; [radarhere]</p>; </li>; <li>; <p>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a>; [radarhere]</p>; </li>; <li>; <p>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a>; [radarhere]</p>; </li>; <li>; <p>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a>; [hugovk]</p>; </li>; <li>; <p>Fixed freeing pointer in ImageDraw.Outline.transform <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5909"">#5909</a>; [radarhere]</p>; </li>; <li>; <p>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a>; [m-shinder, radarhere]</p>; </li>; <li>; <p>Support 16-bit grayscale ImageQt co",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:12096,Integrability,depend,dependabot,12096,"/5919"">#5919</a>; [radarhere]</p>; </li>; <li>; <p>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#5901</a>; [radarhere]</p>; </li>; <li>; <p>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a>; [radarhere]</p>; </li>; <li>; <p>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a>; [radarhere]</p>; </li>; <li>; <p>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a>; [radarhere]</p>; </li>; <li>; <p>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a>; [radarhere]</p>; </li>; <li>; <p>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a>; [radarhere]</p>; </li>; <li>; <p>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a>; [radarhere]</p>; </li>; <li>; <p>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a>; [hugovk]</p>; </li>; <li>; <p>Fixed freeing pointer in ImageDraw.Outline.transform <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5909"">#5909</a>; [radarhere]</p>; </li>; <li>; <p>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a>; [m-shinder, radarhere]</p>; </li>; <li>; <p>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a>; [cmbruns, radarhere]</p>; </li>; <li>; <p>Convert subsequent GIF",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:12273,Integrability,depend,dependabot,12273,"</a>; [radarhere]</p>; </li>; <li>; <p>Limit quantized palette to number of colors <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5879"">#5879</a>; [radarhere]</p>; </li>; <li>; <p>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a>; [radarhere]</p>; </li>; <li>; <p>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a>; [radarhere]</p>; </li>; <li>; <p>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a>; [radarhere]</p>; </li>; <li>; <p>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a>; [radarhere]</p>; </li>; <li>; <p>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a>; [radarhere]</p>; </li>; <li>; <p>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a>; [hugovk]</p>; </li>; <li>; <p>Fixed freeing pointer in ImageDraw.Outline.transform <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5909"">#5909</a>; [radarhere]</p>; </li>; <li>; <p>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a>; [m-shinder, radarhere]</p>; </li>; <li>; <p>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a>; [cmbruns, radarhere]</p>; </li>; <li>; <p>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </b",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:12458,Integrability,depend,dependabot,12458,"e]</p>; </li>; <li>; <p>Fixed palette index for zeroed color in FASTOCTREE quantize <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5869"">#5869</a>; [radarhere]</p>; </li>; <li>; <p>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a>; [radarhere]</p>; </li>; <li>; <p>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a>; [radarhere]</p>; </li>; <li>; <p>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a>; [radarhere]</p>; </li>; <li>; <p>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a>; [radarhere]</p>; </li>; <li>; <p>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a>; [hugovk]</p>; </li>; <li>; <p>Fixed freeing pointer in ImageDraw.Outline.transform <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5909"">#5909</a>; [radarhere]</p>; </li>; <li>; <p>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a>; [m-shinder, radarhere]</p>; </li>; <li>; <p>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a>; [cmbruns, radarhere]</p>; </li>; <li>; <p>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/82541b6dec8452cb612067fcebba1c5a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:12634,Integrability,depend,dependabot,12634," [radarhere]</p>; </li>; <li>; <p>When saving RGBA to GIF, make use of first transparent palette entry <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5859"">#5859</a>; [radarhere]</p>; </li>; <li>; <p>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a>; [radarhere]</p>; </li>; <li>; <p>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a>; [radarhere]</p>; </li>; <li>; <p>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a>; [radarhere]</p>; </li>; <li>; <p>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a>; [hugovk]</p>; </li>; <li>; <p>Fixed freeing pointer in ImageDraw.Outline.transform <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5909"">#5909</a>; [radarhere]</p>; </li>; <li>; <p>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a>; [m-shinder, radarhere]</p>; </li>; <li>; <p>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a>; [cmbruns, radarhere]</p>; </li>; <li>; <p>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/82541b6dec8452cb612067fcebba1c5a1a2bfdc8""><code>82541b6</code></a> 9.0.0 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cae5ac495badd7c7ecfad8223a08f55f5d2eaacb""><code>cae5ac4<",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:12797,Integrability,depend,dependabot,12797,"w/Pillow/issues/5859"">#5859</a>; [radarhere]</p>; </li>; <li>; <p>Pass SAMPLEFORMAT to libtiff <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5848"">#5848</a>; [radarhere]</p>; </li>; <li>; <p>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a>; [radarhere]</p>; </li>; <li>; <p>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a>; [radarhere]</p>; </li>; <li>; <p>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a>; [hugovk]</p>; </li>; <li>; <p>Fixed freeing pointer in ImageDraw.Outline.transform <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5909"">#5909</a>; [radarhere]</p>; </li>; <li>; <p>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a>; [m-shinder, radarhere]</p>; </li>; <li>; <p>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a>; [cmbruns, radarhere]</p>; </li>; <li>; <p>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/82541b6dec8452cb612067fcebba1c5a1a2bfdc8""><code>82541b6</code></a> 9.0.0 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cae5ac495badd7c7ecfad8223a08f55f5d2eaacb""><code>cae5ac4</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5924"">#5924</a> from radarhere/cves</li>; <li><a href=""ht",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:12978,Integrability,depend,dependabot,12978,"8</a>; [radarhere]</p>; </li>; <li>; <p>Added rounding when converting P and PA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5824"">#5824</a>; [radarhere]</p>; </li>; <li>; <p>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a>; [radarhere]</p>; </li>; <li>; <p>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a>; [hugovk]</p>; </li>; <li>; <p>Fixed freeing pointer in ImageDraw.Outline.transform <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5909"">#5909</a>; [radarhere]</p>; </li>; <li>; <p>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a>; [m-shinder, radarhere]</p>; </li>; <li>; <p>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a>; [cmbruns, radarhere]</p>; </li>; <li>; <p>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/82541b6dec8452cb612067fcebba1c5a1a2bfdc8""><code>82541b6</code></a> 9.0.0 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cae5ac495badd7c7ecfad8223a08f55f5d2eaacb""><code>cae5ac4</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5924"">#5924</a> from radarhere/cves</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/ed4cf7813777ad8478cac46f448bc45416a2a99e""><code>ed4cf78</code></a> CVEs TBD</li>; <li><a href=""https://github.com/python-pillow/Pillow/c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:13158,Integrability,depend,dependabot,13158,"ere]</p>; </li>; <li>; <p>Improved putdata() documentation and data handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5910"">#5910</a>; [radarhere]</p>; </li>; <li>; <p>Exclude carriage return in PDF regex to help prevent ReDoS <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5912"">#5912</a>; [hugovk]</p>; </li>; <li>; <p>Fixed freeing pointer in ImageDraw.Outline.transform <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5909"">#5909</a>; [radarhere]</p>; </li>; <li>; <p>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a>; [m-shinder, radarhere]</p>; </li>; <li>; <p>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a>; [cmbruns, radarhere]</p>; </li>; <li>; <p>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/82541b6dec8452cb612067fcebba1c5a1a2bfdc8""><code>82541b6</code></a> 9.0.0 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cae5ac495badd7c7ecfad8223a08f55f5d2eaacb""><code>cae5ac4</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5924"">#5924</a> from radarhere/cves</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/ed4cf7813777ad8478cac46f448bc45416a2a99e""><code>ed4cf78</code></a> CVEs TBD</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/d7f60d1d5a746eb01d4cb3c7fb05b6593f46b0f5""><code>d7f60d1</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923<",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:13703,Integrability,depend,dependabot,13703,">; </li>; <li>; <p>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a>; [m-shinder, radarhere]</p>; </li>; <li>; <p>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a>; [cmbruns, radarhere]</p>; </li>; <li>; <p>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/82541b6dec8452cb612067fcebba1c5a1a2bfdc8""><code>82541b6</code></a> 9.0.0 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cae5ac495badd7c7ecfad8223a08f55f5d2eaacb""><code>cae5ac4</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5924"">#5924</a> from radarhere/cves</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/ed4cf7813777ad8478cac46f448bc45416a2a99e""><code>ed4cf78</code></a> CVEs TBD</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/d7f60d1d5a746eb01d4cb3c7fb05b6593f46b0f5""><code>d7f60d1</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> from radarhere/imagemath_eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8531b01d6cdf0b70f256f93092caa2a5d91afc11""><code>8531b01</code></a> Restrict builtins for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1efb1d9fabd1dfdbf7982035eca0dae7306abef1""><code>1efb1d9</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5922"">#5922</a> from radarhere/releasenotes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/f6c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:14109,Integrability,depend,dependabot,14109,"GB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/82541b6dec8452cb612067fcebba1c5a1a2bfdc8""><code>82541b6</code></a> 9.0.0 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cae5ac495badd7c7ecfad8223a08f55f5d2eaacb""><code>cae5ac4</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5924"">#5924</a> from radarhere/cves</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/ed4cf7813777ad8478cac46f448bc45416a2a99e""><code>ed4cf78</code></a> CVEs TBD</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/d7f60d1d5a746eb01d4cb3c7fb05b6593f46b0f5""><code>d7f60d1</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> from radarhere/imagemath_eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8531b01d6cdf0b70f256f93092caa2a5d91afc11""><code>8531b01</code></a> Restrict builtins for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1efb1d9fabd1dfdbf7982035eca0dae7306abef1""><code>1efb1d9</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5922"">#5922</a> from radarhere/releasenotes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/f6c78713a491764dfac576f6c42127755f2c62b3""><code>f6c7871</code></a> Added release notes for <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> and <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a></li>; <li><a href=""https://github.com",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:14553,Integrability,depend,dependabot,14553,"thon-pillow/Pillow/commit/cae5ac495badd7c7ecfad8223a08f55f5d2eaacb""><code>cae5ac4</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5924"">#5924</a> from radarhere/cves</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/ed4cf7813777ad8478cac46f448bc45416a2a99e""><code>ed4cf78</code></a> CVEs TBD</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/d7f60d1d5a746eb01d4cb3c7fb05b6593f46b0f5""><code>d7f60d1</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> from radarhere/imagemath_eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8531b01d6cdf0b70f256f93092caa2a5d91afc11""><code>8531b01</code></a> Restrict builtins for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1efb1d9fabd1dfdbf7982035eca0dae7306abef1""><code>1efb1d9</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5922"">#5922</a> from radarhere/releasenotes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/f6c78713a491764dfac576f6c42127755f2c62b3""><code>f6c7871</code></a> Added release notes for <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> and <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a></li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/032d2dc3658f94718109068ac70799313e440754""><code>032d2dc</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/baae9ec4b67c68e3adaf1208cf54e8de5e38a6fd""><code>baae9ec</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:14830,Integrability,depend,dependabot,14830,"illow/commit/ed4cf7813777ad8478cac46f448bc45416a2a99e""><code>ed4cf78</code></a> CVEs TBD</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/d7f60d1d5a746eb01d4cb3c7fb05b6593f46b0f5""><code>d7f60d1</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> from radarhere/imagemath_eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8531b01d6cdf0b70f256f93092caa2a5d91afc11""><code>8531b01</code></a> Restrict builtins for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1efb1d9fabd1dfdbf7982035eca0dae7306abef1""><code>1efb1d9</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5922"">#5922</a> from radarhere/releasenotes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/f6c78713a491764dfac576f6c42127755f2c62b3""><code>f6c7871</code></a> Added release notes for <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> and <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a></li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/032d2dc3658f94718109068ac70799313e440754""><code>032d2dc</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/baae9ec4b67c68e3adaf1208cf54e8de5e38a6fd""><code>baae9ec</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><code>1059eb5</code></a> If appended EOI did not work, do not keep trying</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:14923,Integrability,depend,dependabot,14923,"; <li><a href=""https://github.com/python-pillow/Pillow/commit/d7f60d1d5a746eb01d4cb3c7fb05b6593f46b0f5""><code>d7f60d1</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> from radarhere/imagemath_eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8531b01d6cdf0b70f256f93092caa2a5d91afc11""><code>8531b01</code></a> Restrict builtins for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1efb1d9fabd1dfdbf7982035eca0dae7306abef1""><code>1efb1d9</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5922"">#5922</a> from radarhere/releasenotes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/f6c78713a491764dfac576f6c42127755f2c62b3""><code>f6c7871</code></a> Added release notes for <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> and <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a></li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/032d2dc3658f94718109068ac70799313e440754""><code>032d2dc</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/baae9ec4b67c68e3adaf1208cf54e8de5e38a6fd""><code>baae9ec</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><code>1059eb5</code></a> If appended EOI did not work, do not keep trying</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/b",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:15019,Integrability,depend,dependabot,15019,"46b0f5""><code>d7f60d1</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> from radarhere/imagemath_eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8531b01d6cdf0b70f256f93092caa2a5d91afc11""><code>8531b01</code></a> Restrict builtins for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1efb1d9fabd1dfdbf7982035eca0dae7306abef1""><code>1efb1d9</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5922"">#5922</a> from radarhere/releasenotes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/f6c78713a491764dfac576f6c42127755f2c62b3""><code>f6c7871</code></a> Added release notes for <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> and <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a></li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/032d2dc3658f94718109068ac70799313e440754""><code>032d2dc</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/baae9ec4b67c68e3adaf1208cf54e8de5e38a6fd""><code>baae9ec</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><code>1059eb5</code></a> If appended EOI did not work, do not keep trying</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:15425,Integrability,depend,dependabot,15425,"mit/1efb1d9fabd1dfdbf7982035eca0dae7306abef1""><code>1efb1d9</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5922"">#5922</a> from radarhere/releasenotes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/f6c78713a491764dfac576f6c42127755f2c62b3""><code>f6c7871</code></a> Added release notes for <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> and <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a></li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/032d2dc3658f94718109068ac70799313e440754""><code>032d2dc</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/baae9ec4b67c68e3adaf1208cf54e8de5e38a6fd""><code>baae9ec</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><code>1059eb5</code></a> If appended EOI did not work, do not keep trying</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <su",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:15856,Integrability,Depend,Dependabot,15856,"9</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> and <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a></li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/032d2dc3658f94718109068ac70799313e440754""><code>032d2dc</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/baae9ec4b67c68e3adaf1208cf54e8de5e38a6fd""><code>baae9ec</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><code>1059eb5</code></a> If appended EOI did not work, do not keep trying</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` wil",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:15896,Integrability,depend,dependabot-badges,15896,"9</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> and <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a></li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/032d2dc3658f94718109068ac70799313e440754""><code>032d2dc</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/baae9ec4b67c68e3adaf1208cf54e8de5e38a6fd""><code>baae9ec</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><code>1059eb5</code></a> If appended EOI did not work, do not keep trying</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` wil",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:15955,Integrability,depend,dependency-name,15955,""">#5920</a> and <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a></li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/032d2dc3658f94718109068ac70799313e440754""><code>032d2dc</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/baae9ec4b67c68e3adaf1208cf54e8de5e38a6fd""><code>baae9ec</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><code>1059eb5</code></a> If appended EOI did not work, do not keep trying</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:16115,Integrability,depend,dependabot-security-updates,16115,"python-pillow/Pillow/commit/032d2dc3658f94718109068ac70799313e440754""><code>032d2dc</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/baae9ec4b67c68e3adaf1208cf54e8de5e38a6fd""><code>baae9ec</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><code>1059eb5</code></a> If appended EOI did not work, do not keep trying</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:16172,Integrability,Depend,Dependabot,16172,"e CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/baae9ec4b67c68e3adaf1208cf54e8de5e38a6fd""><code>baae9ec</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><code>1059eb5</code></a> If appended EOI did not work, do not keep trying</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:16318,Integrability,depend,dependabot,16318,"commit/baae9ec4b67c68e3adaf1208cf54e8de5e38a6fd""><code>baae9ec</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><code>1059eb5</code></a> If appended EOI did not work, do not keep trying</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:16347,Integrability,depend,dependabot-automerge-start,16347,"erge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><code>1059eb5</code></a> If appended EOI did not work, do not keep trying</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:16385,Integrability,depend,dependabot-automerge-end,16385,"erge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><code>1059eb5</code></a> If appended EOI did not work, do not keep trying</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:16437,Integrability,Depend,Dependabot,16437,"ow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><code>1059eb5</code></a> If appended EOI did not work, do not keep trying</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:16504,Integrability,Depend,Dependabot,16504,"pare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:16554,Integrability,depend,dependabot,16554,"pare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:16598,Integrability,depend,dependabot,16598,"pare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:16695,Integrability,depend,dependabot,16695,"pare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:16764,Integrability,depend,dependabot,16764,"pare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:16855,Integrability,depend,dependabot,16855,"pare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:16948,Integrability,depend,dependabot,16948,"pare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:17008,Integrability,depend,dependabot,17008,"pare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:17054,Integrability,Depend,Dependabot,17054,"pare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:17140,Integrability,depend,dependabot,17140,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:17206,Integrability,Depend,Dependabot,17206,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:17316,Integrability,depend,dependabot,17316,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:17382,Integrability,Depend,Dependabot,17382,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:17492,Integrability,depend,dependabot,17492,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:17515,Integrability,depend,dependency,17515,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:17555,Integrability,Depend,Dependabot,17555,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:17593,Integrability,depend,dependency,17593,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:17662,Integrability,depend,dependabot,17662,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:17781,Integrability,depend,dependabot,17781,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:17906,Integrability,depend,dependabot,17906,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:18031,Integrability,depend,dependabot,18031,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:9524,Modifiability,config,configuration,9524,"n-pillow/Pillow/issues/5833"">#5833</a> [<a href=""https://github.com/hoodmane""><code>@​hoodmane</code></a>]</li>; <li>Add support for pickling TrueType fonts <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5826"">#5826</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Only prefer command line tools SDK on macOS over default MacOSX SDK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5828"">#5828</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix compilation on 64-bit Termux <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5793"">#5793</a> [<a href=""https://github.com/landfillbaby""><code>@​landfillbaby</code></a>]</li>; <li>Replace 'setup.py sdist' with '-m build --sdist' <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5785"">#5785</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use declarative package configuration <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5784"">#5784</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Use title for display in ImageShow <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5788"">#5788</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fix for PyQt6 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5775"">#5775</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.0 (2022-01-02)</h2>; <ul>; <li>; <p>Restrict builtins for ImageMath.eval(). CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pill",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:1342,Safety,redund,redundant,1342,">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html</a></p>; <h2>Changes</h2>; <ul>; <li>Restrict builtins for ImageMath.eval() <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5923"">#5923</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Ensure JpegImagePlugin stops at the end of a truncated file <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Fixed ImagePath.Path array handling <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5920"">#5920</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Remove consecutive duplicate tiles that only differ by their offset <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5919"">#5919</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Removed redundant part of condition <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5915"">#5915</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Explicitly enable strip chopping for large uncompressed TIFFs <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5517"">#5517</a> [<a href=""https://github.com/kmilos""><code>@​kmilos</code></a>]</li>; <li>Use the Windows method to get TCL functions on Cygwin <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5807"">#5807</a> [<a href=""https://github.com/DWesl""><code>@​DWesl</code></a>]</li>; <li>Changed error type to allow for incremental WebP parsing <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5404"">#5404</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Improved I;16 operations on big endian <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5901"">#59",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:6227,Safety,SAFE,SAFEBLOCK,6227,"low/Pillow/issues/5906"">#5906</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a> [<a href=""https://github.com/m-shinder""><code>@​m-shinder</code></a>]</li>; <li>Fixed typo <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5902"">#5902</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Switched from deprecated &quot;setup.py install&quot; to &quot;pip install .&quot; <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5896"">#5896</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a> [<a href=""https://github.com/cmbruns""><code>@​cmbruns</code></a>]</li>; <li>Fixed raising OSError in _safe_read when size is greater than SAFEBLOCK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5872"">#5872</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>WebP: Fix memory leak during decoding on failure <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5798"">#5798</a> [<a href=""https://github.com/ilai-deutel""><code>@​ilai-deutel</code></a>]</li>; <li>Do not prematurely return in ImageFile when saving to stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5665"">#5665</a> [<a href=""https://github.com/infmagic2047""><code>@​infmagic2047</code></a>]</li>; <li>Added support for top right and bottom right TGA orientations <a href=""https://github-redirect.dependa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:16084,Security,secur,security-vulnerabilities,16084,"python-pillow/Pillow/commit/032d2dc3658f94718109068ac70799313e440754""><code>032d2dc</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/baae9ec4b67c68e3adaf1208cf54e8de5e38a6fd""><code>baae9ec</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><code>1059eb5</code></a> If appended EOI did not work, do not keep trying</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:16126,Security,secur,security-updates,16126,"python-pillow/Pillow/commit/032d2dc3658f94718109068ac70799313e440754""><code>032d2dc</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/baae9ec4b67c68e3adaf1208cf54e8de5e38a6fd""><code>baae9ec</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><code>1059eb5</code></a> If appended EOI did not work, do not keep trying</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:18177,Security,secur,security,18177,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1760:18218,Security,Secur,Security,18218,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1760
https://github.com/qutip/qutip/pull/1761:89,Usability,guid,guide,89,"**Description**; Provide a friendlier introduction to the dynamics section of the user's guide. **Related issues or PRs**; 1759; **Changelog**; Added an item to the toc of the user's guide under ""dynamics"", with an introduction to the QuTiP solvers.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1761
https://github.com/qutip/qutip/pull/1761:183,Usability,guid,guide,183,"**Description**; Provide a friendlier introduction to the dynamics section of the user's guide. **Related issues or PRs**; 1759; **Changelog**; Added an item to the toc of the user's guide under ""dynamics"", with an introduction to the QuTiP solvers.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1761
https://github.com/qutip/qutip/pull/1762:101,Usability,Simpl,Simplification,101,**Related issues or PRs**; 1759. **Changelog**; Removed a figure whose details were to small to see. Simplification of language (verbiage),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1762
https://github.com/qutip/qutip/issues/1765:1050,Deployability,Install,Installed,1050,"### Bug Description. When two QobjEvo objects are added up that have time dependence with the same parameter names but with different values in the arg dictionary, the combined QObjEvo merges the dictionaries, resulting in the wrong time dependence for some of the Hamiltonians. ### Code to Reproduce the Bug. ```shell; a = destroy(3); n = a.dag()*a. w0 = 1; g = 0.1; H0 = w0*n; es0 = H0.eigenstates(); def Hdr(wdr) :; return QobjEvo([[a + a.dag(),'2*cos(w*t)']], args=dict({'w':wdr})). SE0 = sesolve(H0+g*Hdr(w0),es0[1][0],np.linspace(0,np.pi/2/g,101)); SE1 = sesolve(H0+g*Hdr(w0)+0*Hdr(2*w0),es0[1][0],np.linspace(0,np.pi/2/g,101)); [plt.plot(expect(n,s.states)) for s in [SE0, SE1]]; SE0.states[-1].overlap(SE1.states[-1]); ```. ### Code Output. _No response_. ### Expected Behaviour. SE0 and SE 1 should have been the same. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.19.5; Scipy Version: 1.4.1; Cython Version: 0.29.26; Matplotlib Version: 3.2.2; Python Version: 3.7.12; Number of CPUs: 1; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/local/lib/python3.7/dist-packages/qutip; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1765
https://github.com/qutip/qutip/issues/1765:1121,Deployability,Install,Installation,1121,"### Bug Description. When two QobjEvo objects are added up that have time dependence with the same parameter names but with different values in the arg dictionary, the combined QObjEvo merges the dictionaries, resulting in the wrong time dependence for some of the Hamiltonians. ### Code to Reproduce the Bug. ```shell; a = destroy(3); n = a.dag()*a. w0 = 1; g = 0.1; H0 = w0*n; es0 = H0.eigenstates(); def Hdr(wdr) :; return QobjEvo([[a + a.dag(),'2*cos(w*t)']], args=dict({'w':wdr})). SE0 = sesolve(H0+g*Hdr(w0),es0[1][0],np.linspace(0,np.pi/2/g,101)); SE1 = sesolve(H0+g*Hdr(w0)+0*Hdr(2*w0),es0[1][0],np.linspace(0,np.pi/2/g,101)); [plt.plot(expect(n,s.states)) for s in [SE0, SE1]]; SE0.states[-1].overlap(SE1.states[-1]); ```. ### Code Output. _No response_. ### Expected Behaviour. SE0 and SE 1 should have been the same. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.19.5; Scipy Version: 1.4.1; Cython Version: 0.29.26; Matplotlib Version: 3.2.2; Python Version: 3.7.12; Number of CPUs: 1; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/local/lib/python3.7/dist-packages/qutip; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1765
https://github.com/qutip/qutip/issues/1765:74,Integrability,depend,dependence,74,"### Bug Description. When two QobjEvo objects are added up that have time dependence with the same parameter names but with different values in the arg dictionary, the combined QObjEvo merges the dictionaries, resulting in the wrong time dependence for some of the Hamiltonians. ### Code to Reproduce the Bug. ```shell; a = destroy(3); n = a.dag()*a. w0 = 1; g = 0.1; H0 = w0*n; es0 = H0.eigenstates(); def Hdr(wdr) :; return QobjEvo([[a + a.dag(),'2*cos(w*t)']], args=dict({'w':wdr})). SE0 = sesolve(H0+g*Hdr(w0),es0[1][0],np.linspace(0,np.pi/2/g,101)); SE1 = sesolve(H0+g*Hdr(w0)+0*Hdr(2*w0),es0[1][0],np.linspace(0,np.pi/2/g,101)); [plt.plot(expect(n,s.states)) for s in [SE0, SE1]]; SE0.states[-1].overlap(SE1.states[-1]); ```. ### Code Output. _No response_. ### Expected Behaviour. SE0 and SE 1 should have been the same. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.19.5; Scipy Version: 1.4.1; Cython Version: 0.29.26; Matplotlib Version: 3.2.2; Python Version: 3.7.12; Number of CPUs: 1; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/local/lib/python3.7/dist-packages/qutip; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1765
https://github.com/qutip/qutip/issues/1765:238,Integrability,depend,dependence,238,"### Bug Description. When two QobjEvo objects are added up that have time dependence with the same parameter names but with different values in the arg dictionary, the combined QObjEvo merges the dictionaries, resulting in the wrong time dependence for some of the Hamiltonians. ### Code to Reproduce the Bug. ```shell; a = destroy(3); n = a.dag()*a. w0 = 1; g = 0.1; H0 = w0*n; es0 = H0.eigenstates(); def Hdr(wdr) :; return QobjEvo([[a + a.dag(),'2*cos(w*t)']], args=dict({'w':wdr})). SE0 = sesolve(H0+g*Hdr(w0),es0[1][0],np.linspace(0,np.pi/2/g,101)); SE1 = sesolve(H0+g*Hdr(w0)+0*Hdr(2*w0),es0[1][0],np.linspace(0,np.pi/2/g,101)); [plt.plot(expect(n,s.states)) for s in [SE0, SE1]]; SE0.states[-1].overlap(SE1.states[-1]); ```. ### Code Output. _No response_. ### Expected Behaviour. SE0 and SE 1 should have been the same. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.19.5; Scipy Version: 1.4.1; Cython Version: 0.29.26; Matplotlib Version: 3.2.2; Python Version: 3.7.12; Number of CPUs: 1; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/local/lib/python3.7/dist-packages/qutip; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1765
https://github.com/qutip/qutip/issues/1766:615,Availability,Failure,Failure,615,"Qutip works fine with numpy 1.21.1, but fails on import with 1.22 numpy, released Dec 31st. Tested on ubuntu and MacOS. ```; >>> import qutip; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/work/miniconda3/envs/QF9/lib/python3.9/site-packages/qutip/__init__.py"", line 73, in <module>; (_blas_info() == ""OPENBLAS"" and platform.system() == 'Darwin'); File ""/Users/work/miniconda3/envs/QF9/lib/python3.9/site-packages/qutip/utilities.py"", line 430, in _blas_info; blas_info = config.blas_opt_info; AttributeError: module 'numpy.__config__' has no attribute 'blas_opt_info'; ```. Failure occurs here,. https://github.com/qutip/qutip/blob/52d01da181a21b810c3407812c670f35fdc647e8/qutip/utilities.py#L340. which is kind of mysterious since line 339 explicitly checks that the 'blas_opt_info' attribute exists, and then fails at line 340 because the attribute doesn't exist.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1766
https://github.com/qutip/qutip/issues/1766:73,Deployability,release,released,73,"Qutip works fine with numpy 1.21.1, but fails on import with 1.22 numpy, released Dec 31st. Tested on ubuntu and MacOS. ```; >>> import qutip; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/work/miniconda3/envs/QF9/lib/python3.9/site-packages/qutip/__init__.py"", line 73, in <module>; (_blas_info() == ""OPENBLAS"" and platform.system() == 'Darwin'); File ""/Users/work/miniconda3/envs/QF9/lib/python3.9/site-packages/qutip/utilities.py"", line 430, in _blas_info; blas_info = config.blas_opt_info; AttributeError: module 'numpy.__config__' has no attribute 'blas_opt_info'; ```. Failure occurs here,. https://github.com/qutip/qutip/blob/52d01da181a21b810c3407812c670f35fdc647e8/qutip/utilities.py#L340. which is kind of mysterious since line 339 explicitly checks that the 'blas_opt_info' attribute exists, and then fails at line 340 because the attribute doesn't exist.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1766
https://github.com/qutip/qutip/issues/1766:512,Modifiability,config,config,512,"Qutip works fine with numpy 1.21.1, but fails on import with 1.22 numpy, released Dec 31st. Tested on ubuntu and MacOS. ```; >>> import qutip; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/work/miniconda3/envs/QF9/lib/python3.9/site-packages/qutip/__init__.py"", line 73, in <module>; (_blas_info() == ""OPENBLAS"" and platform.system() == 'Darwin'); File ""/Users/work/miniconda3/envs/QF9/lib/python3.9/site-packages/qutip/utilities.py"", line 430, in _blas_info; blas_info = config.blas_opt_info; AttributeError: module 'numpy.__config__' has no attribute 'blas_opt_info'; ```. Failure occurs here,. https://github.com/qutip/qutip/blob/52d01da181a21b810c3407812c670f35fdc647e8/qutip/utilities.py#L340. which is kind of mysterious since line 339 explicitly checks that the 'blas_opt_info' attribute exists, and then fails at line 340 because the attribute doesn't exist.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1766
https://github.com/qutip/qutip/issues/1766:92,Testability,Test,Tested,92,"Qutip works fine with numpy 1.21.1, but fails on import with 1.22 numpy, released Dec 31st. Tested on ubuntu and MacOS. ```; >>> import qutip; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/work/miniconda3/envs/QF9/lib/python3.9/site-packages/qutip/__init__.py"", line 73, in <module>; (_blas_info() == ""OPENBLAS"" and platform.system() == 'Darwin'); File ""/Users/work/miniconda3/envs/QF9/lib/python3.9/site-packages/qutip/utilities.py"", line 430, in _blas_info; blas_info = config.blas_opt_info; AttributeError: module 'numpy.__config__' has no attribute 'blas_opt_info'; ```. Failure occurs here,. https://github.com/qutip/qutip/blob/52d01da181a21b810c3407812c670f35fdc647e8/qutip/utilities.py#L340. which is kind of mysterious since line 339 explicitly checks that the 'blas_opt_info' attribute exists, and then fails at line 340 because the attribute doesn't exist.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1766
https://github.com/qutip/qutip/pull/1767:90,Deployability,Release,Release,90,"Bumps [numpy](https://github.com/numpy/numpy) from 1.19.5 to 1.21.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/numpy/numpy/releases"">numpy's releases</a>.</em></p>; <blockquote>; <h2>v1.21.0</h2>; <h1>NumPy 1.21.0 Release Notes</h1>; <p>The NumPy 1.21.0 release highlights are</p>; <ul>; <li>continued SIMD work covering more functions and platforms,</li>; <li>initial work on the new dtype infrastructure and casting,</li>; <li>universal2 wheels for Python 3.8 and Python 3.9 on Mac,</li>; <li>improved documentation,</li>; <li>improved annotations,</li>; <li>new <code>PCG64DXSM</code> bitgenerator for random numbers.</li>; </ul>; <p>In addition there are the usual large number of bug fixes and other; improvements.</p>; <p>The Python versions supported for this release are 3.7-3.9. Official; support for Python 3.10 will be added when it is released.</p>; <p>:warning: Warning: there are unresolved problems compiling NumPy 1.21.0 with gcc-11.1 .</p>; <ul>; <li>Optimization level <code>-O3</code> results in many wrong warnings when running the tests.</li>; <li>On some hardware NumPy will hang in an infinite loop.</li>; </ul>; <h2>New functions</h2>; <h3>Add PCG64DXSM BitGenerator</h3>; <p>Uses of the PCG64 BitGenerator in a massively-parallel context have; been shown to have statistical weaknesses that were not apparent at the; first release in numpy 1.17. Most users will never observe this weakness; and are safe to continue to use PCG64. We have introduced a new; PCG64DXSM BitGenerator that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:175,Deployability,release,releases,175,"Bumps [numpy](https://github.com/numpy/numpy) from 1.19.5 to 1.21.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/numpy/numpy/releases"">numpy's releases</a>.</em></p>; <blockquote>; <h2>v1.21.0</h2>; <h1>NumPy 1.21.0 Release Notes</h1>; <p>The NumPy 1.21.0 release highlights are</p>; <ul>; <li>continued SIMD work covering more functions and platforms,</li>; <li>initial work on the new dtype infrastructure and casting,</li>; <li>universal2 wheels for Python 3.8 and Python 3.9 on Mac,</li>; <li>improved documentation,</li>; <li>improved annotations,</li>; <li>new <code>PCG64DXSM</code> bitgenerator for random numbers.</li>; </ul>; <p>In addition there are the usual large number of bug fixes and other; improvements.</p>; <p>The Python versions supported for this release are 3.7-3.9. Official; support for Python 3.10 will be added when it is released.</p>; <p>:warning: Warning: there are unresolved problems compiling NumPy 1.21.0 with gcc-11.1 .</p>; <ul>; <li>Optimization level <code>-O3</code> results in many wrong warnings when running the tests.</li>; <li>On some hardware NumPy will hang in an infinite loop.</li>; </ul>; <h2>New functions</h2>; <h3>Add PCG64DXSM BitGenerator</h3>; <p>Uses of the PCG64 BitGenerator in a massively-parallel context have; been shown to have statistical weaknesses that were not apparent at the; first release in numpy 1.17. Most users will never observe this weakness; and are safe to continue to use PCG64. We have introduced a new; PCG64DXSM BitGenerator that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:193,Deployability,release,releases,193,"Bumps [numpy](https://github.com/numpy/numpy) from 1.19.5 to 1.21.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/numpy/numpy/releases"">numpy's releases</a>.</em></p>; <blockquote>; <h2>v1.21.0</h2>; <h1>NumPy 1.21.0 Release Notes</h1>; <p>The NumPy 1.21.0 release highlights are</p>; <ul>; <li>continued SIMD work covering more functions and platforms,</li>; <li>initial work on the new dtype infrastructure and casting,</li>; <li>universal2 wheels for Python 3.8 and Python 3.9 on Mac,</li>; <li>improved documentation,</li>; <li>improved annotations,</li>; <li>new <code>PCG64DXSM</code> bitgenerator for random numbers.</li>; </ul>; <p>In addition there are the usual large number of bug fixes and other; improvements.</p>; <p>The Python versions supported for this release are 3.7-3.9. Official; support for Python 3.10 will be added when it is released.</p>; <p>:warning: Warning: there are unresolved problems compiling NumPy 1.21.0 with gcc-11.1 .</p>; <ul>; <li>Optimization level <code>-O3</code> results in many wrong warnings when running the tests.</li>; <li>On some hardware NumPy will hang in an infinite loop.</li>; </ul>; <h2>New functions</h2>; <h3>Add PCG64DXSM BitGenerator</h3>; <p>Uses of the PCG64 BitGenerator in a massively-parallel context have; been shown to have statistical weaknesses that were not apparent at the; first release in numpy 1.17. Most users will never observe this weakness; and are safe to continue to use PCG64. We have introduced a new; PCG64DXSM BitGenerator that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:266,Deployability,Release,Release,266,"Bumps [numpy](https://github.com/numpy/numpy) from 1.19.5 to 1.21.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/numpy/numpy/releases"">numpy's releases</a>.</em></p>; <blockquote>; <h2>v1.21.0</h2>; <h1>NumPy 1.21.0 Release Notes</h1>; <p>The NumPy 1.21.0 release highlights are</p>; <ul>; <li>continued SIMD work covering more functions and platforms,</li>; <li>initial work on the new dtype infrastructure and casting,</li>; <li>universal2 wheels for Python 3.8 and Python 3.9 on Mac,</li>; <li>improved documentation,</li>; <li>improved annotations,</li>; <li>new <code>PCG64DXSM</code> bitgenerator for random numbers.</li>; </ul>; <p>In addition there are the usual large number of bug fixes and other; improvements.</p>; <p>The Python versions supported for this release are 3.7-3.9. Official; support for Python 3.10 will be added when it is released.</p>; <p>:warning: Warning: there are unresolved problems compiling NumPy 1.21.0 with gcc-11.1 .</p>; <ul>; <li>Optimization level <code>-O3</code> results in many wrong warnings when running the tests.</li>; <li>On some hardware NumPy will hang in an infinite loop.</li>; </ul>; <h2>New functions</h2>; <h3>Add PCG64DXSM BitGenerator</h3>; <p>Uses of the PCG64 BitGenerator in a massively-parallel context have; been shown to have statistical weaknesses that were not apparent at the; first release in numpy 1.17. Most users will never observe this weakness; and are safe to continue to use PCG64. We have introduced a new; PCG64DXSM BitGenerator that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:306,Deployability,release,release,306,"Bumps [numpy](https://github.com/numpy/numpy) from 1.19.5 to 1.21.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/numpy/numpy/releases"">numpy's releases</a>.</em></p>; <blockquote>; <h2>v1.21.0</h2>; <h1>NumPy 1.21.0 Release Notes</h1>; <p>The NumPy 1.21.0 release highlights are</p>; <ul>; <li>continued SIMD work covering more functions and platforms,</li>; <li>initial work on the new dtype infrastructure and casting,</li>; <li>universal2 wheels for Python 3.8 and Python 3.9 on Mac,</li>; <li>improved documentation,</li>; <li>improved annotations,</li>; <li>new <code>PCG64DXSM</code> bitgenerator for random numbers.</li>; </ul>; <p>In addition there are the usual large number of bug fixes and other; improvements.</p>; <p>The Python versions supported for this release are 3.7-3.9. Official; support for Python 3.10 will be added when it is released.</p>; <p>:warning: Warning: there are unresolved problems compiling NumPy 1.21.0 with gcc-11.1 .</p>; <ul>; <li>Optimization level <code>-O3</code> results in many wrong warnings when running the tests.</li>; <li>On some hardware NumPy will hang in an infinite loop.</li>; </ul>; <h2>New functions</h2>; <h3>Add PCG64DXSM BitGenerator</h3>; <p>Uses of the PCG64 BitGenerator in a massively-parallel context have; been shown to have statistical weaknesses that were not apparent at the; first release in numpy 1.17. Most users will never observe this weakness; and are safe to continue to use PCG64. We have introduced a new; PCG64DXSM BitGenerator that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:819,Deployability,release,release,819,"Bumps [numpy](https://github.com/numpy/numpy) from 1.19.5 to 1.21.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/numpy/numpy/releases"">numpy's releases</a>.</em></p>; <blockquote>; <h2>v1.21.0</h2>; <h1>NumPy 1.21.0 Release Notes</h1>; <p>The NumPy 1.21.0 release highlights are</p>; <ul>; <li>continued SIMD work covering more functions and platforms,</li>; <li>initial work on the new dtype infrastructure and casting,</li>; <li>universal2 wheels for Python 3.8 and Python 3.9 on Mac,</li>; <li>improved documentation,</li>; <li>improved annotations,</li>; <li>new <code>PCG64DXSM</code> bitgenerator for random numbers.</li>; </ul>; <p>In addition there are the usual large number of bug fixes and other; improvements.</p>; <p>The Python versions supported for this release are 3.7-3.9. Official; support for Python 3.10 will be added when it is released.</p>; <p>:warning: Warning: there are unresolved problems compiling NumPy 1.21.0 with gcc-11.1 .</p>; <ul>; <li>Optimization level <code>-O3</code> results in many wrong warnings when running the tests.</li>; <li>On some hardware NumPy will hang in an infinite loop.</li>; </ul>; <h2>New functions</h2>; <h3>Add PCG64DXSM BitGenerator</h3>; <p>Uses of the PCG64 BitGenerator in a massively-parallel context have; been shown to have statistical weaknesses that were not apparent at the; first release in numpy 1.17. Most users will never observe this weakness; and are safe to continue to use PCG64. We have introduced a new; PCG64DXSM BitGenerator that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:899,Deployability,release,released,899,"Bumps [numpy](https://github.com/numpy/numpy) from 1.19.5 to 1.21.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/numpy/numpy/releases"">numpy's releases</a>.</em></p>; <blockquote>; <h2>v1.21.0</h2>; <h1>NumPy 1.21.0 Release Notes</h1>; <p>The NumPy 1.21.0 release highlights are</p>; <ul>; <li>continued SIMD work covering more functions and platforms,</li>; <li>initial work on the new dtype infrastructure and casting,</li>; <li>universal2 wheels for Python 3.8 and Python 3.9 on Mac,</li>; <li>improved documentation,</li>; <li>improved annotations,</li>; <li>new <code>PCG64DXSM</code> bitgenerator for random numbers.</li>; </ul>; <p>In addition there are the usual large number of bug fixes and other; improvements.</p>; <p>The Python versions supported for this release are 3.7-3.9. Official; support for Python 3.10 will be added when it is released.</p>; <p>:warning: Warning: there are unresolved problems compiling NumPy 1.21.0 with gcc-11.1 .</p>; <ul>; <li>Optimization level <code>-O3</code> results in many wrong warnings when running the tests.</li>; <li>On some hardware NumPy will hang in an infinite loop.</li>; </ul>; <h2>New functions</h2>; <h3>Add PCG64DXSM BitGenerator</h3>; <p>Uses of the PCG64 BitGenerator in a massively-parallel context have; been shown to have statistical weaknesses that were not apparent at the; first release in numpy 1.17. Most users will never observe this weakness; and are safe to continue to use PCG64. We have introduced a new; PCG64DXSM BitGenerator that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:1400,Deployability,release,release,1400,"Py 1.21.0 release highlights are</p>; <ul>; <li>continued SIMD work covering more functions and platforms,</li>; <li>initial work on the new dtype infrastructure and casting,</li>; <li>universal2 wheels for Python 3.8 and Python 3.9 on Mac,</li>; <li>improved documentation,</li>; <li>improved annotations,</li>; <li>new <code>PCG64DXSM</code> bitgenerator for random numbers.</li>; </ul>; <p>In addition there are the usual large number of bug fixes and other; improvements.</p>; <p>The Python versions supported for this release are 3.7-3.9. Official; support for Python 3.10 will be added when it is released.</p>; <p>:warning: Warning: there are unresolved problems compiling NumPy 1.21.0 with gcc-11.1 .</p>; <ul>; <li>Optimization level <code>-O3</code> results in many wrong warnings when running the tests.</li>; <li>On some hardware NumPy will hang in an infinite loop.</li>; </ul>; <h2>New functions</h2>; <h3>Add PCG64DXSM BitGenerator</h3>; <p>Uses of the PCG64 BitGenerator in a massively-parallel context have; been shown to have statistical weaknesses that were not apparent at the; first release in numpy 1.17. Most users will never observe this weakness; and are safe to continue to use PCG64. We have introduced a new; PCG64DXSM BitGenerator that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape</code> argument <code>numpy.unravel_index</code> cannot be; passed as <code>dims</code> keyword argument anymore. (Was deprecated in NumPy; 1.16.)</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:1672,Deployability,release,releases,1672,"otations,</li>; <li>new <code>PCG64DXSM</code> bitgenerator for random numbers.</li>; </ul>; <p>In addition there are the usual large number of bug fixes and other; improvements.</p>; <p>The Python versions supported for this release are 3.7-3.9. Official; support for Python 3.10 will be added when it is released.</p>; <p>:warning: Warning: there are unresolved problems compiling NumPy 1.21.0 with gcc-11.1 .</p>; <ul>; <li>Optimization level <code>-O3</code> results in many wrong warnings when running the tests.</li>; <li>On some hardware NumPy will hang in an infinite loop.</li>; </ul>; <h2>New functions</h2>; <h3>Add PCG64DXSM BitGenerator</h3>; <p>Uses of the PCG64 BitGenerator in a massively-parallel context have; been shown to have statistical weaknesses that were not apparent at the; first release in numpy 1.17. Most users will never observe this weakness; and are safe to continue to use PCG64. We have introduced a new; PCG64DXSM BitGenerator that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape</code> argument <code>numpy.unravel_index</code> cannot be; passed as <code>dims</code> keyword argument anymore. (Was deprecated in NumPy; 1.16.)</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/numpy/numpy/commit/b235f9e701e14ed6f6f6dcba885f7986a833743f""><code>b235f9e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19283"">#19283</a> from charris/prepare-1.21.0-release</li>; <li><a href=""https://github.com/numpy/numpy/c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:2535,Deployability,release,release,2535," that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape</code> argument <code>numpy.unravel_index</code> cannot be; passed as <code>dims</code> keyword argument anymore. (Was deprecated in NumPy; 1.16.)</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/numpy/numpy/commit/b235f9e701e14ed6f6f6dcba885f7986a833743f""><code>b235f9e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19283"">#19283</a> from charris/prepare-1.21.0-release</li>; <li><a href=""https://github.com/numpy/numpy/commit/34aebc2824cf8c2bdbe19040b82f98f18557c8ba""><code>34aebc2</code></a> MAINT: Update 1.21.0-notes.rst</li>; <li><a href=""https://github.com/numpy/numpy/commit/493b64bfe9c5396498325b87e5e80e1917555c41""><code>493b64b</code></a> MAINT: Update 1.21.0-changelog.rst</li>; <li><a href=""https://github.com/numpy/numpy/commit/07d7e72ab6880c05b5fdd98482cf88982e778393""><code>07d7e72</code></a> MAINT: Remove accidentally created directory.</li>; <li><a href=""https://github.com/numpy/numpy/commit/032fca5e2e9749b152ec56153f476e05efdff287""><code>032fca5</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19280"">#19280</a> from charris/backport-19277</li>; <li><a href=""https://github.com/numpy/numpy/commit/7d25b81025a50cc0368f5727c65e875ca769469a""><code>7d25b81</code></a> BUG: Fix refcount leak in ResultType</li>; <li><a href=""https://github.com/numpy/numpy/commit/fa5754e8c159a37fcd9345df261cf82821088ea0""><code>fa5754",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:2674,Deployability,Update,Update,2674,"sed by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape</code> argument <code>numpy.unravel_index</code> cannot be; passed as <code>dims</code> keyword argument anymore. (Was deprecated in NumPy; 1.16.)</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/numpy/numpy/commit/b235f9e701e14ed6f6f6dcba885f7986a833743f""><code>b235f9e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19283"">#19283</a> from charris/prepare-1.21.0-release</li>; <li><a href=""https://github.com/numpy/numpy/commit/34aebc2824cf8c2bdbe19040b82f98f18557c8ba""><code>34aebc2</code></a> MAINT: Update 1.21.0-notes.rst</li>; <li><a href=""https://github.com/numpy/numpy/commit/493b64bfe9c5396498325b87e5e80e1917555c41""><code>493b64b</code></a> MAINT: Update 1.21.0-changelog.rst</li>; <li><a href=""https://github.com/numpy/numpy/commit/07d7e72ab6880c05b5fdd98482cf88982e778393""><code>07d7e72</code></a> MAINT: Remove accidentally created directory.</li>; <li><a href=""https://github.com/numpy/numpy/commit/032fca5e2e9749b152ec56153f476e05efdff287""><code>032fca5</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19280"">#19280</a> from charris/backport-19277</li>; <li><a href=""https://github.com/numpy/numpy/commit/7d25b81025a50cc0368f5727c65e875ca769469a""><code>7d25b81</code></a> BUG: Fix refcount leak in ResultType</li>; <li><a href=""https://github.com/numpy/numpy/commit/fa5754e8c159a37fcd9345df261cf82821088ea0""><code>fa5754e</code></a> BUG: Add missing DECREF in new path</li>; <li><a href=""https:/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:2829,Deployability,Update,Update,2829,"</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape</code> argument <code>numpy.unravel_index</code> cannot be; passed as <code>dims</code> keyword argument anymore. (Was deprecated in NumPy; 1.16.)</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/numpy/numpy/commit/b235f9e701e14ed6f6f6dcba885f7986a833743f""><code>b235f9e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19283"">#19283</a> from charris/prepare-1.21.0-release</li>; <li><a href=""https://github.com/numpy/numpy/commit/34aebc2824cf8c2bdbe19040b82f98f18557c8ba""><code>34aebc2</code></a> MAINT: Update 1.21.0-notes.rst</li>; <li><a href=""https://github.com/numpy/numpy/commit/493b64bfe9c5396498325b87e5e80e1917555c41""><code>493b64b</code></a> MAINT: Update 1.21.0-changelog.rst</li>; <li><a href=""https://github.com/numpy/numpy/commit/07d7e72ab6880c05b5fdd98482cf88982e778393""><code>07d7e72</code></a> MAINT: Remove accidentally created directory.</li>; <li><a href=""https://github.com/numpy/numpy/commit/032fca5e2e9749b152ec56153f476e05efdff287""><code>032fca5</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19280"">#19280</a> from charris/backport-19277</li>; <li><a href=""https://github.com/numpy/numpy/commit/7d25b81025a50cc0368f5727c65e875ca769469a""><code>7d25b81</code></a> BUG: Fix refcount leak in ResultType</li>; <li><a href=""https://github.com/numpy/numpy/commit/fa5754e8c159a37fcd9345df261cf82821088ea0""><code>fa5754e</code></a> BUG: Add missing DECREF in new path</li>; <li><a href=""https://github.com/numpy/numpy/commit/61127bb4d46d523b699da1b63abaa5035670da27""><code>61127bb</code></a> Merge pull request <a href=""https://github-redirect.depen",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:4725,Deployability,update,updates,4725,"de>61127bb</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19268"">#19268</a> from charris/backport-19264</li>; <li><a href=""https://github.com/numpy/numpy/commit/143d45fff3ed9e051bdeef7bdb4df38025ea7d1c""><code>143d45f</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19269"">#19269</a> from charris/backport-19228</li>; <li><a href=""https://github.com/numpy/numpy/commit/d80e4738f781a1d206bbc04a2e863299e5f2e104""><code>d80e473</code></a> BUG: Removed typing for == and != in dtypes</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:5877,Deployability,upgrade,upgrade,5877,"ndabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**; Update the version of numpy used for documentation builds to numpy 1.21.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:6053,Deployability,upgrade,upgrade,6053,"ndabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**; Update the version of numpy used for documentation builds to numpy 1.21.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:6223,Deployability,upgrade,upgrade,6223,"ndabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**; Update the version of numpy used for documentation builds to numpy 1.21.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:6905,Deployability,Update,Update,6905,"ndabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**; Update the version of numpy used for documentation builds to numpy 1.21.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:1887,Integrability,depend,dependabot,1887," it is released.</p>; <p>:warning: Warning: there are unresolved problems compiling NumPy 1.21.0 with gcc-11.1 .</p>; <ul>; <li>Optimization level <code>-O3</code> results in many wrong warnings when running the tests.</li>; <li>On some hardware NumPy will hang in an infinite loop.</li>; </ul>; <h2>New functions</h2>; <h3>Add PCG64DXSM BitGenerator</h3>; <p>Uses of the PCG64 BitGenerator in a massively-parallel context have; been shown to have statistical weaknesses that were not apparent at the; first release in numpy 1.17. Most users will never observe this weakness; and are safe to continue to use PCG64. We have introduced a new; PCG64DXSM BitGenerator that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape</code> argument <code>numpy.unravel_index</code> cannot be; passed as <code>dims</code> keyword argument anymore. (Was deprecated in NumPy; 1.16.)</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/numpy/numpy/commit/b235f9e701e14ed6f6f6dcba885f7986a833743f""><code>b235f9e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19283"">#19283</a> from charris/prepare-1.21.0-release</li>; <li><a href=""https://github.com/numpy/numpy/commit/34aebc2824cf8c2bdbe19040b82f98f18557c8ba""><code>34aebc2</code></a> MAINT: Update 1.21.0-notes.rst</li>; <li><a href=""https://github.com/numpy/numpy/commit/493b64bfe9c5396498325b87e5e80e1917555c41""><code>493b64b</code></a> MAINT: Update 1.21.0-changelog.rst</li>; <li><a href=""https://github.co",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:2455,Integrability,depend,dependabot,2455,"akness; and are safe to continue to use PCG64. We have introduced a new; PCG64DXSM BitGenerator that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape</code> argument <code>numpy.unravel_index</code> cannot be; passed as <code>dims</code> keyword argument anymore. (Was deprecated in NumPy; 1.16.)</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/numpy/numpy/commit/b235f9e701e14ed6f6f6dcba885f7986a833743f""><code>b235f9e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19283"">#19283</a> from charris/prepare-1.21.0-release</li>; <li><a href=""https://github.com/numpy/numpy/commit/34aebc2824cf8c2bdbe19040b82f98f18557c8ba""><code>34aebc2</code></a> MAINT: Update 1.21.0-notes.rst</li>; <li><a href=""https://github.com/numpy/numpy/commit/493b64bfe9c5396498325b87e5e80e1917555c41""><code>493b64b</code></a> MAINT: Update 1.21.0-changelog.rst</li>; <li><a href=""https://github.com/numpy/numpy/commit/07d7e72ab6880c05b5fdd98482cf88982e778393""><code>07d7e72</code></a> MAINT: Remove accidentally created directory.</li>; <li><a href=""https://github.com/numpy/numpy/commit/032fca5e2e9749b152ec56153f476e05efdff287""><code>032fca5</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19280"">#19280</a> from charris/backport-19277</li>; <li><a href=""https://github.com/numpy/numpy/commit/7d25b81025a50cc0368f5727c65e875ca769469a""><code>7d25b81</code></a> BUG: Fix refcount leak in ResultType</li>; <li><a href",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:3203,Integrability,depend,dependabot,3203,".. (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/numpy/numpy/commit/b235f9e701e14ed6f6f6dcba885f7986a833743f""><code>b235f9e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19283"">#19283</a> from charris/prepare-1.21.0-release</li>; <li><a href=""https://github.com/numpy/numpy/commit/34aebc2824cf8c2bdbe19040b82f98f18557c8ba""><code>34aebc2</code></a> MAINT: Update 1.21.0-notes.rst</li>; <li><a href=""https://github.com/numpy/numpy/commit/493b64bfe9c5396498325b87e5e80e1917555c41""><code>493b64b</code></a> MAINT: Update 1.21.0-changelog.rst</li>; <li><a href=""https://github.com/numpy/numpy/commit/07d7e72ab6880c05b5fdd98482cf88982e778393""><code>07d7e72</code></a> MAINT: Remove accidentally created directory.</li>; <li><a href=""https://github.com/numpy/numpy/commit/032fca5e2e9749b152ec56153f476e05efdff287""><code>032fca5</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19280"">#19280</a> from charris/backport-19277</li>; <li><a href=""https://github.com/numpy/numpy/commit/7d25b81025a50cc0368f5727c65e875ca769469a""><code>7d25b81</code></a> BUG: Fix refcount leak in ResultType</li>; <li><a href=""https://github.com/numpy/numpy/commit/fa5754e8c159a37fcd9345df261cf82821088ea0""><code>fa5754e</code></a> BUG: Add missing DECREF in new path</li>; <li><a href=""https://github.com/numpy/numpy/commit/61127bb4d46d523b699da1b63abaa5035670da27""><code>61127bb</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19268"">#19268</a> from charris/backport-19264</li>; <li><a href=""https://github.com/numpy/numpy/commit/143d45fff3ed9e051bdeef7bdb4df38025ea7d1c""><code>143d45f</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19269"">#19269</a> from charris/backport-19228</li>; <li><a href=""https://github.com/numpy/numpy/commit/d80e4738f781a1d206bbc04a2e863299e5f2",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:3780,Integrability,depend,dependabot,3780,"1917555c41""><code>493b64b</code></a> MAINT: Update 1.21.0-changelog.rst</li>; <li><a href=""https://github.com/numpy/numpy/commit/07d7e72ab6880c05b5fdd98482cf88982e778393""><code>07d7e72</code></a> MAINT: Remove accidentally created directory.</li>; <li><a href=""https://github.com/numpy/numpy/commit/032fca5e2e9749b152ec56153f476e05efdff287""><code>032fca5</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19280"">#19280</a> from charris/backport-19277</li>; <li><a href=""https://github.com/numpy/numpy/commit/7d25b81025a50cc0368f5727c65e875ca769469a""><code>7d25b81</code></a> BUG: Fix refcount leak in ResultType</li>; <li><a href=""https://github.com/numpy/numpy/commit/fa5754e8c159a37fcd9345df261cf82821088ea0""><code>fa5754e</code></a> BUG: Add missing DECREF in new path</li>; <li><a href=""https://github.com/numpy/numpy/commit/61127bb4d46d523b699da1b63abaa5035670da27""><code>61127bb</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19268"">#19268</a> from charris/backport-19264</li>; <li><a href=""https://github.com/numpy/numpy/commit/143d45fff3ed9e051bdeef7bdb4df38025ea7d1c""><code>143d45f</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19269"">#19269</a> from charris/backport-19228</li>; <li><a href=""https://github.com/numpy/numpy/commit/d80e4738f781a1d206bbc04a2e863299e5f2e104""><code>d80e473</code></a> BUG: Removed typing for == and != in dtypes</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:4036,Integrability,depend,dependabot,4036,"ref=""https://github.com/numpy/numpy/commit/032fca5e2e9749b152ec56153f476e05efdff287""><code>032fca5</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19280"">#19280</a> from charris/backport-19277</li>; <li><a href=""https://github.com/numpy/numpy/commit/7d25b81025a50cc0368f5727c65e875ca769469a""><code>7d25b81</code></a> BUG: Fix refcount leak in ResultType</li>; <li><a href=""https://github.com/numpy/numpy/commit/fa5754e8c159a37fcd9345df261cf82821088ea0""><code>fa5754e</code></a> BUG: Add missing DECREF in new path</li>; <li><a href=""https://github.com/numpy/numpy/commit/61127bb4d46d523b699da1b63abaa5035670da27""><code>61127bb</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19268"">#19268</a> from charris/backport-19264</li>; <li><a href=""https://github.com/numpy/numpy/commit/143d45fff3ed9e051bdeef7bdb4df38025ea7d1c""><code>143d45f</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19269"">#19269</a> from charris/backport-19228</li>; <li><a href=""https://github.com/numpy/numpy/commit/d80e4738f781a1d206bbc04a2e863299e5f2e104""><code>d80e473</code></a> BUG: Removed typing for == and != in dtypes</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot comm",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:4445,Integrability,Depend,Dependabot,4445,"ithub.com/numpy/numpy/commit/fa5754e8c159a37fcd9345df261cf82821088ea0""><code>fa5754e</code></a> BUG: Add missing DECREF in new path</li>; <li><a href=""https://github.com/numpy/numpy/commit/61127bb4d46d523b699da1b63abaa5035670da27""><code>61127bb</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19268"">#19268</a> from charris/backport-19264</li>; <li><a href=""https://github.com/numpy/numpy/commit/143d45fff3ed9e051bdeef7bdb4df38025ea7d1c""><code>143d45f</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19269"">#19269</a> from charris/backport-19228</li>; <li><a href=""https://github.com/numpy/numpy/commit/d80e4738f781a1d206bbc04a2e863299e5f2e104""><code>d80e473</code></a> BUG: Removed typing for == and != in dtypes</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` wi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:4485,Integrability,depend,dependabot-badges,4485,"ithub.com/numpy/numpy/commit/fa5754e8c159a37fcd9345df261cf82821088ea0""><code>fa5754e</code></a> BUG: Add missing DECREF in new path</li>; <li><a href=""https://github.com/numpy/numpy/commit/61127bb4d46d523b699da1b63abaa5035670da27""><code>61127bb</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19268"">#19268</a> from charris/backport-19264</li>; <li><a href=""https://github.com/numpy/numpy/commit/143d45fff3ed9e051bdeef7bdb4df38025ea7d1c""><code>143d45f</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19269"">#19269</a> from charris/backport-19228</li>; <li><a href=""https://github.com/numpy/numpy/commit/d80e4738f781a1d206bbc04a2e863299e5f2e104""><code>d80e473</code></a> BUG: Removed typing for == and != in dtypes</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` wi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:4544,Integrability,depend,dependency-name,4544,"ode></a> BUG: Add missing DECREF in new path</li>; <li><a href=""https://github.com/numpy/numpy/commit/61127bb4d46d523b699da1b63abaa5035670da27""><code>61127bb</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19268"">#19268</a> from charris/backport-19264</li>; <li><a href=""https://github.com/numpy/numpy/commit/143d45fff3ed9e051bdeef7bdb4df38025ea7d1c""><code>143d45f</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19269"">#19269</a> from charris/backport-19228</li>; <li><a href=""https://github.com/numpy/numpy/commit/d80e4738f781a1d206bbc04a2e863299e5f2e104""><code>d80e473</code></a> BUG: Removed typing for == and != in dtypes</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` wi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:4705,Integrability,depend,dependabot-security-updates,4705,"de>61127bb</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19268"">#19268</a> from charris/backport-19264</li>; <li><a href=""https://github.com/numpy/numpy/commit/143d45fff3ed9e051bdeef7bdb4df38025ea7d1c""><code>143d45f</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19269"">#19269</a> from charris/backport-19228</li>; <li><a href=""https://github.com/numpy/numpy/commit/d80e4738f781a1d206bbc04a2e863299e5f2e104""><code>d80e473</code></a> BUG: Removed typing for == and != in dtypes</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:4762,Integrability,Depend,Dependabot,4762,"/issues/19268"">#19268</a> from charris/backport-19264</li>; <li><a href=""https://github.com/numpy/numpy/commit/143d45fff3ed9e051bdeef7bdb4df38025ea7d1c""><code>143d45f</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19269"">#19269</a> from charris/backport-19228</li>; <li><a href=""https://github.com/numpy/numpy/commit/d80e4738f781a1d206bbc04a2e863299e5f2e104""><code>d80e473</code></a> BUG: Removed typing for == and != in dtypes</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:4908,Integrability,depend,dependabot,4908,"thub.com/numpy/numpy/commit/143d45fff3ed9e051bdeef7bdb4df38025ea7d1c""><code>143d45f</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19269"">#19269</a> from charris/backport-19228</li>; <li><a href=""https://github.com/numpy/numpy/commit/d80e4738f781a1d206bbc04a2e863299e5f2e104""><code>d80e473</code></a> BUG: Removed typing for == and != in dtypes</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:4937,Integrability,depend,dependabot-automerge-start,4937,">143d45f</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19269"">#19269</a> from charris/backport-19228</li>; <li><a href=""https://github.com/numpy/numpy/commit/d80e4738f781a1d206bbc04a2e863299e5f2e104""><code>d80e473</code></a> BUG: Removed typing for == and != in dtypes</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:4975,Integrability,depend,dependabot-automerge-end,4975,">143d45f</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19269"">#19269</a> from charris/backport-19228</li>; <li><a href=""https://github.com/numpy/numpy/commit/d80e4738f781a1d206bbc04a2e863299e5f2e104""><code>d80e473</code></a> BUG: Removed typing for == and != in dtypes</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:5027,Integrability,Depend,Dependabot,5027,"dabot.com/numpy/numpy/issues/19269"">#19269</a> from charris/backport-19228</li>; <li><a href=""https://github.com/numpy/numpy/commit/d80e4738f781a1d206bbc04a2e863299e5f2e104""><code>d80e473</code></a> BUG: Removed typing for == and != in dtypes</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:5094,Integrability,Depend,Dependabot,5094,"v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:5144,Integrability,depend,dependabot,5144,"v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:5188,Integrability,depend,dependabot,5188,"v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:5285,Integrability,depend,dependabot,5285,"v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:5354,Integrability,depend,dependabot,5354,"v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:5445,Integrability,depend,dependabot,5445,"v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:5538,Integrability,depend,dependabot,5538,"v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:5598,Integrability,depend,dependabot,5598,"v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:5644,Integrability,Depend,Dependabot,5644,"v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:5730,Integrability,depend,dependabot,5730,"ndabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**; Update the version of numpy used for documentation builds to numpy 1.21.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:5796,Integrability,Depend,Dependabot,5796,"ndabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**; Update the version of numpy used for documentation builds to numpy 1.21.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:5906,Integrability,depend,dependabot,5906,"ndabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**; Update the version of numpy used for documentation builds to numpy 1.21.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:5972,Integrability,Depend,Dependabot,5972,"ndabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**; Update the version of numpy used for documentation builds to numpy 1.21.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:6082,Integrability,depend,dependabot,6082,"ndabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**; Update the version of numpy used for documentation builds to numpy 1.21.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:6105,Integrability,depend,dependency,6105,"ndabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**; Update the version of numpy used for documentation builds to numpy 1.21.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:6145,Integrability,Depend,Dependabot,6145,"ndabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**; Update the version of numpy used for documentation builds to numpy 1.21.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:6183,Integrability,depend,dependency,6183,"ndabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**; Update the version of numpy used for documentation builds to numpy 1.21.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:6252,Integrability,depend,dependabot,6252,"ndabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**; Update the version of numpy used for documentation builds to numpy 1.21.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:6371,Integrability,depend,dependabot,6371,"ndabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**; Update the version of numpy used for documentation builds to numpy 1.21.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:6496,Integrability,depend,dependabot,6496,"ndabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**; Update the version of numpy used for documentation builds to numpy 1.21.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:6621,Integrability,depend,dependabot,6621,"ndabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**; Update the version of numpy used for documentation builds to numpy 1.21.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:1020,Performance,Optimiz,Optimization,1020," to 1.21.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/numpy/numpy/releases"">numpy's releases</a>.</em></p>; <blockquote>; <h2>v1.21.0</h2>; <h1>NumPy 1.21.0 Release Notes</h1>; <p>The NumPy 1.21.0 release highlights are</p>; <ul>; <li>continued SIMD work covering more functions and platforms,</li>; <li>initial work on the new dtype infrastructure and casting,</li>; <li>universal2 wheels for Python 3.8 and Python 3.9 on Mac,</li>; <li>improved documentation,</li>; <li>improved annotations,</li>; <li>new <code>PCG64DXSM</code> bitgenerator for random numbers.</li>; </ul>; <p>In addition there are the usual large number of bug fixes and other; improvements.</p>; <p>The Python versions supported for this release are 3.7-3.9. Official; support for Python 3.10 will be added when it is released.</p>; <p>:warning: Warning: there are unresolved problems compiling NumPy 1.21.0 with gcc-11.1 .</p>; <ul>; <li>Optimization level <code>-O3</code> results in many wrong warnings when running the tests.</li>; <li>On some hardware NumPy will hang in an infinite loop.</li>; </ul>; <h2>New functions</h2>; <h3>Add PCG64DXSM BitGenerator</h3>; <p>Uses of the PCG64 BitGenerator in a massively-parallel context have; been shown to have statistical weaknesses that were not apparent at the; first release in numpy 1.17. Most users will never observe this weakness; and are safe to continue to use PCG64. We have introduced a new; PCG64DXSM BitGenerator that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape</code> argument <code>numpy.unravel_index</code> cannot",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:1747,Performance,perform,performance,1747," of bug fixes and other; improvements.</p>; <p>The Python versions supported for this release are 3.7-3.9. Official; support for Python 3.10 will be added when it is released.</p>; <p>:warning: Warning: there are unresolved problems compiling NumPy 1.21.0 with gcc-11.1 .</p>; <ul>; <li>Optimization level <code>-O3</code> results in many wrong warnings when running the tests.</li>; <li>On some hardware NumPy will hang in an infinite loop.</li>; </ul>; <h2>New functions</h2>; <h3>Add PCG64DXSM BitGenerator</h3>; <p>Uses of the PCG64 BitGenerator in a massively-parallel context have; been shown to have statistical weaknesses that were not apparent at the; first release in numpy 1.17. Most users will never observe this weakness; and are safe to continue to use PCG64. We have introduced a new; PCG64DXSM BitGenerator that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape</code> argument <code>numpy.unravel_index</code> cannot be; passed as <code>dims</code> keyword argument anymore. (Was deprecated in NumPy; 1.16.)</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/numpy/numpy/commit/b235f9e701e14ed6f6f6dcba885f7986a833743f""><code>b235f9e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19283"">#19283</a> from charris/prepare-1.21.0-release</li>; <li><a href=""https://github.com/numpy/numpy/commit/34aebc2824cf8c2bdbe19040b82f98f18557c8ba""><code>34aebc2</code></a> MAINT: Update 1.21.0-notes.rst</li>; <li><a href=""https://github.c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:1476,Safety,safe,safe,1476,"sting,</li>; <li>universal2 wheels for Python 3.8 and Python 3.9 on Mac,</li>; <li>improved documentation,</li>; <li>improved annotations,</li>; <li>new <code>PCG64DXSM</code> bitgenerator for random numbers.</li>; </ul>; <p>In addition there are the usual large number of bug fixes and other; improvements.</p>; <p>The Python versions supported for this release are 3.7-3.9. Official; support for Python 3.10 will be added when it is released.</p>; <p>:warning: Warning: there are unresolved problems compiling NumPy 1.21.0 with gcc-11.1 .</p>; <ul>; <li>Optimization level <code>-O3</code> results in many wrong warnings when running the tests.</li>; <li>On some hardware NumPy will hang in an infinite loop.</li>; </ul>; <h2>New functions</h2>; <h3>Add PCG64DXSM BitGenerator</h3>; <p>Uses of the PCG64 BitGenerator in a massively-parallel context have; been shown to have statistical weaknesses that were not apparent at the; first release in numpy 1.17. Most users will never observe this weakness; and are safe to continue to use PCG64. We have introduced a new; PCG64DXSM BitGenerator that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape</code> argument <code>numpy.unravel_index</code> cannot be; passed as <code>dims</code> keyword argument anymore. (Was deprecated in NumPy; 1.16.)</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/numpy/numpy/commit/b235f9e701e14ed6f6f6dcba885f7986a833743f""><code>b235f9e</code></a> Merge pull request <a href=""https://github-redirect.dependabo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:4674,Security,secur,security-vulnerabilities,4674,"de>61127bb</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19268"">#19268</a> from charris/backport-19264</li>; <li><a href=""https://github.com/numpy/numpy/commit/143d45fff3ed9e051bdeef7bdb4df38025ea7d1c""><code>143d45f</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19269"">#19269</a> from charris/backport-19228</li>; <li><a href=""https://github.com/numpy/numpy/commit/d80e4738f781a1d206bbc04a2e863299e5f2e104""><code>d80e473</code></a> BUG: Removed typing for == and != in dtypes</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:4716,Security,secur,security-updates,4716,"de>61127bb</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19268"">#19268</a> from charris/backport-19264</li>; <li><a href=""https://github.com/numpy/numpy/commit/143d45fff3ed9e051bdeef7bdb4df38025ea7d1c""><code>143d45f</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19269"">#19269</a> from charris/backport-19228</li>; <li><a href=""https://github.com/numpy/numpy/commit/d80e4738f781a1d206bbc04a2e863299e5f2e104""><code>d80e473</code></a> BUG: Removed typing for == and != in dtypes</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:6767,Security,secur,security,6767,"ndabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**; Update the version of numpy used for documentation builds to numpy 1.21.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:6808,Security,Secur,Security,6808,"ndabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**; Update the version of numpy used for documentation builds to numpy 1.21.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1767:1104,Testability,test,tests,1104," to 1.21.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/numpy/numpy/releases"">numpy's releases</a>.</em></p>; <blockquote>; <h2>v1.21.0</h2>; <h1>NumPy 1.21.0 Release Notes</h1>; <p>The NumPy 1.21.0 release highlights are</p>; <ul>; <li>continued SIMD work covering more functions and platforms,</li>; <li>initial work on the new dtype infrastructure and casting,</li>; <li>universal2 wheels for Python 3.8 and Python 3.9 on Mac,</li>; <li>improved documentation,</li>; <li>improved annotations,</li>; <li>new <code>PCG64DXSM</code> bitgenerator for random numbers.</li>; </ul>; <p>In addition there are the usual large number of bug fixes and other; improvements.</p>; <p>The Python versions supported for this release are 3.7-3.9. Official; support for Python 3.10 will be added when it is released.</p>; <p>:warning: Warning: there are unresolved problems compiling NumPy 1.21.0 with gcc-11.1 .</p>; <ul>; <li>Optimization level <code>-O3</code> results in many wrong warnings when running the tests.</li>; <li>On some hardware NumPy will hang in an infinite loop.</li>; </ul>; <h2>New functions</h2>; <h3>Add PCG64DXSM BitGenerator</h3>; <p>Uses of the PCG64 BitGenerator in a massively-parallel context have; been shown to have statistical weaknesses that were not apparent at the; first release in numpy 1.17. Most users will never observe this weakness; and are safe to continue to use PCG64. We have introduced a new; PCG64DXSM BitGenerator that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape</code> argument <code>numpy.unravel_index</code> cannot",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1767
https://github.com/qutip/qutip/pull/1769:38,Usability,guid,guide,38,"**Description**; Clean up verbiage in guide overview and remove illegible figure.""; **Related issues or PRs**; 1759. **Changelog**; Clean up verbiage in guide overview and remove illegible figure.""",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1769
https://github.com/qutip/qutip/pull/1769:153,Usability,guid,guide,153,"**Description**; Clean up verbiage in guide overview and remove illegible figure.""; **Related issues or PRs**; 1759. **Changelog**; Clean up verbiage in guide overview and remove illegible figure.""",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1769
https://github.com/qutip/qutip/issues/1770:84,Usability,guid,guide,84,### Describe the Issue!. Discussion of state vectors and density matrices in users' guide is slightly muddy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1770
https://github.com/qutip/qutip/pull/1775:137,Usability,guid,guide,137,**Description**; Describe here the proposed change. **Related issues or PRs**; #1774. **Changelog**; And an introduction to the dynamics guide.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1775
https://github.com/qutip/qutip/issues/1776:1185,Deployability,Install,Installed,1185,"### Bug Description. Entering a wrong dissipation operator in `e_ops` can make the Python kernel crash. (No exception raised, no traceback.); In the example below, the user is erroneously entering `state.dag() * state` instead of `state * state.dag()`. The former evaluates to a number (still represented by a `Qobj` though), the latter is a suitable projection operator. ### Code to Reproduce the Bug. ```shell; import qutip as qt; import numpy as np. H = qt.sigmaz() / 2; state = qt.basis(2,1). tlist = np.linspace(0, 10, 100). print(""start...""). sol = qt.mesolve(; H, ; state, ; tlist, ; e_ops=[state.dag() * state] # ****** this should actually be state * state.dag()); ). print(""DONE!"") # never see this output; within jupyter, kernel crash is reported; ```. ### Code Output. ```shell; start...; ```. ### Expected Behaviour. Raise an exception, ideally with information alerting the user to the fact that the provided jump operator is not a valid operator. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.20.2; Scipy Version: 1.6.2; Cython Version: 0.29.23; Matplotlib Version: 3.4.3; Python Version: 3.8.10; Number of CPUs: 8; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1776
https://github.com/qutip/qutip/pull/1777:66,Testability,test,test,66,"**Description**; Add a numpy 1.22 and Python 3.10 build to the CI test matrix. **Related issues or PRs**; * If test pass consistently with numpy 1.22, we can close #1694. **Changelog**; Add a numpy 1.22 and Python 3.10 build to the CI test matrix.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1777
https://github.com/qutip/qutip/pull/1777:111,Testability,test,test,111,"**Description**; Add a numpy 1.22 and Python 3.10 build to the CI test matrix. **Related issues or PRs**; * If test pass consistently with numpy 1.22, we can close #1694. **Changelog**; Add a numpy 1.22 and Python 3.10 build to the CI test matrix.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1777
https://github.com/qutip/qutip/pull/1777:235,Testability,test,test,235,"**Description**; Add a numpy 1.22 and Python 3.10 build to the CI test matrix. **Related issues or PRs**; * If test pass consistently with numpy 1.22, we can close #1694. **Changelog**; Add a numpy 1.22 and Python 3.10 build to the CI test matrix.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1777
https://github.com/qutip/qutip/pull/1778:246,Safety,safe,safe,246,"**Description**; Dimension checks was not done for `e_ops` for most solvers, which could result in segfault, (#1776).; Add checks and tests for these checks for `sesolve`, `mesolve`, `mcsolve`, stochastic solvers. ; `brmesolve` and `floquet` are safe. **Related issues or PRs**; fixes #1776. **Changelog**; Add dims check for e_ops in main solvers",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1778
https://github.com/qutip/qutip/pull/1778:134,Testability,test,tests,134,"**Description**; Dimension checks was not done for `e_ops` for most solvers, which could result in segfault, (#1776).; Add checks and tests for these checks for `sesolve`, `mesolve`, `mcsolve`, stochastic solvers. ; `brmesolve` and `floquet` are safe. **Related issues or PRs**; fixes #1776. **Changelog**; Add dims check for e_ops in main solvers",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1778
https://github.com/qutip/qutip/pull/1780:243,Deployability,release,release,243,"Bumps [ipython](https://github.com/ipython/ipython) from 7.22.0 to 7.31.1.; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/ipython/ipython/commit/e321e760a4aefbe872e1703b24a19a28f87619c9""><code>e321e76</code></a> release 7.31.1</li>; <li><a href=""https://github.com/ipython/ipython/commit/67ca2b3aa9039438e6f80e3fccca556f26100b4d""><code>67ca2b3</code></a> Merge pull request from GHSA-pq7m-3gw7-gq5x</li>; <li><a href=""https://github.com/ipython/ipython/commit/27943302db129464b33bae8cb6cfa552b52b46c2""><code>2794330</code></a> back to dev</li>; <li><a href=""https://github.com/ipython/ipython/commit/be343e755af76193909f13027d87561b1765b5ae""><code>be343e7</code></a> release 7.31.0</li>; <li><a href=""https://github.com/ipython/ipython/commit/0fcf2c43facb7ba5144cdcc47118aa1e55085c20""><code>0fcf2c4</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13428"">#13428</a> from meeseeksmachine/auto-backport-of-pr-13427-on-7.x</li>; <li><a href=""https://github.com/ipython/ipython/commit/b8db9b1371fff1b89d0f058e19a48a4ca7b93c51""><code>b8db9b1</code></a> Backport PR <a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13427"">#13427</a>: wn 731</li>; <li><a href=""https://github.com/ipython/ipython/commit/7f253dcf7b1c3a791a98d44b0dfc848d62bd27df""><code>7f253dc</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13412"">#13412</a> from bnavigator/backport-inspect</li>; <li><a href=""https://github.com/ipython/ipython/commit/4f26796cf368d24edadbb3d62e052e6aa4ddc820""><code>4f26796</code></a> fix xxlimited_35 import name</li>; <li><a href=""https://github.com/ipython/ipython/commit/77ca4a6312374f0659fb6973925e5b696d5dc74e""><code>77ca4a6</code></a> don't run nose-based iptest on py310, only pytest</li>; <li><a href=""https://github.com/ipython/ipython/commit/533e5094aa36b51549cf6a316fc439c6404643c9""><code>533e509</code></a> back to decorator skip</li>; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:698,Deployability,release,release,698,"Bumps [ipython](https://github.com/ipython/ipython) from 7.22.0 to 7.31.1.; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/ipython/ipython/commit/e321e760a4aefbe872e1703b24a19a28f87619c9""><code>e321e76</code></a> release 7.31.1</li>; <li><a href=""https://github.com/ipython/ipython/commit/67ca2b3aa9039438e6f80e3fccca556f26100b4d""><code>67ca2b3</code></a> Merge pull request from GHSA-pq7m-3gw7-gq5x</li>; <li><a href=""https://github.com/ipython/ipython/commit/27943302db129464b33bae8cb6cfa552b52b46c2""><code>2794330</code></a> back to dev</li>; <li><a href=""https://github.com/ipython/ipython/commit/be343e755af76193909f13027d87561b1765b5ae""><code>be343e7</code></a> release 7.31.0</li>; <li><a href=""https://github.com/ipython/ipython/commit/0fcf2c43facb7ba5144cdcc47118aa1e55085c20""><code>0fcf2c4</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13428"">#13428</a> from meeseeksmachine/auto-backport-of-pr-13427-on-7.x</li>; <li><a href=""https://github.com/ipython/ipython/commit/b8db9b1371fff1b89d0f058e19a48a4ca7b93c51""><code>b8db9b1</code></a> Backport PR <a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13427"">#13427</a>: wn 731</li>; <li><a href=""https://github.com/ipython/ipython/commit/7f253dcf7b1c3a791a98d44b0dfc848d62bd27df""><code>7f253dc</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13412"">#13412</a> from bnavigator/backport-inspect</li>; <li><a href=""https://github.com/ipython/ipython/commit/4f26796cf368d24edadbb3d62e052e6aa4ddc820""><code>4f26796</code></a> fix xxlimited_35 import name</li>; <li><a href=""https://github.com/ipython/ipython/commit/77ca4a6312374f0659fb6973925e5b696d5dc74e""><code>77ca4a6</code></a> don't run nose-based iptest on py310, only pytest</li>; <li><a href=""https://github.com/ipython/ipython/commit/533e5094aa36b51549cf6a316fc439c6404643c9""><code>533e509</code></a> back to decorator skip</li>; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:2440,Deployability,update,updates,2440,"ependabot.com/ipython/ipython/issues/13412"">#13412</a> from bnavigator/backport-inspect</li>; <li><a href=""https://github.com/ipython/ipython/commit/4f26796cf368d24edadbb3d62e052e6aa4ddc820""><code>4f26796</code></a> fix xxlimited_35 import name</li>; <li><a href=""https://github.com/ipython/ipython/commit/77ca4a6312374f0659fb6973925e5b696d5dc74e""><code>77ca4a6</code></a> don't run nose-based iptest on py310, only pytest</li>; <li><a href=""https://github.com/ipython/ipython/commit/533e5094aa36b51549cf6a316fc439c6404643c9""><code>533e509</code></a> back to decorator skip</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:3592,Deployability,upgrade,upgrade,3592,"automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**. Update ipython used to build documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:3768,Deployability,upgrade,upgrade,3768,"automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**. Update ipython used to build documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:3938,Deployability,upgrade,upgrade,3938,"automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**. Update ipython used to build documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:4620,Deployability,Update,Update,4620,"automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**. Update ipython used to build documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:893,Integrability,depend,dependabot,893,"Bumps [ipython](https://github.com/ipython/ipython) from 7.22.0 to 7.31.1.; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/ipython/ipython/commit/e321e760a4aefbe872e1703b24a19a28f87619c9""><code>e321e76</code></a> release 7.31.1</li>; <li><a href=""https://github.com/ipython/ipython/commit/67ca2b3aa9039438e6f80e3fccca556f26100b4d""><code>67ca2b3</code></a> Merge pull request from GHSA-pq7m-3gw7-gq5x</li>; <li><a href=""https://github.com/ipython/ipython/commit/27943302db129464b33bae8cb6cfa552b52b46c2""><code>2794330</code></a> back to dev</li>; <li><a href=""https://github.com/ipython/ipython/commit/be343e755af76193909f13027d87561b1765b5ae""><code>be343e7</code></a> release 7.31.0</li>; <li><a href=""https://github.com/ipython/ipython/commit/0fcf2c43facb7ba5144cdcc47118aa1e55085c20""><code>0fcf2c4</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13428"">#13428</a> from meeseeksmachine/auto-backport-of-pr-13427-on-7.x</li>; <li><a href=""https://github.com/ipython/ipython/commit/b8db9b1371fff1b89d0f058e19a48a4ca7b93c51""><code>b8db9b1</code></a> Backport PR <a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13427"">#13427</a>: wn 731</li>; <li><a href=""https://github.com/ipython/ipython/commit/7f253dcf7b1c3a791a98d44b0dfc848d62bd27df""><code>7f253dc</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13412"">#13412</a> from bnavigator/backport-inspect</li>; <li><a href=""https://github.com/ipython/ipython/commit/4f26796cf368d24edadbb3d62e052e6aa4ddc820""><code>4f26796</code></a> fix xxlimited_35 import name</li>; <li><a href=""https://github.com/ipython/ipython/commit/77ca4a6312374f0659fb6973925e5b696d5dc74e""><code>77ca4a6</code></a> don't run nose-based iptest on py310, only pytest</li>; <li><a href=""https://github.com/ipython/ipython/commit/533e5094aa36b51549cf6a316fc439c6404643c9""><code>533e509</code></a> back to decorator skip</li>; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:1176,Integrability,depend,dependabot,1176,"760a4aefbe872e1703b24a19a28f87619c9""><code>e321e76</code></a> release 7.31.1</li>; <li><a href=""https://github.com/ipython/ipython/commit/67ca2b3aa9039438e6f80e3fccca556f26100b4d""><code>67ca2b3</code></a> Merge pull request from GHSA-pq7m-3gw7-gq5x</li>; <li><a href=""https://github.com/ipython/ipython/commit/27943302db129464b33bae8cb6cfa552b52b46c2""><code>2794330</code></a> back to dev</li>; <li><a href=""https://github.com/ipython/ipython/commit/be343e755af76193909f13027d87561b1765b5ae""><code>be343e7</code></a> release 7.31.0</li>; <li><a href=""https://github.com/ipython/ipython/commit/0fcf2c43facb7ba5144cdcc47118aa1e55085c20""><code>0fcf2c4</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13428"">#13428</a> from meeseeksmachine/auto-backport-of-pr-13427-on-7.x</li>; <li><a href=""https://github.com/ipython/ipython/commit/b8db9b1371fff1b89d0f058e19a48a4ca7b93c51""><code>b8db9b1</code></a> Backport PR <a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13427"">#13427</a>: wn 731</li>; <li><a href=""https://github.com/ipython/ipython/commit/7f253dcf7b1c3a791a98d44b0dfc848d62bd27df""><code>7f253dc</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13412"">#13412</a> from bnavigator/backport-inspect</li>; <li><a href=""https://github.com/ipython/ipython/commit/4f26796cf368d24edadbb3d62e052e6aa4ddc820""><code>4f26796</code></a> fix xxlimited_35 import name</li>; <li><a href=""https://github.com/ipython/ipython/commit/77ca4a6312374f0659fb6973925e5b696d5dc74e""><code>77ca4a6</code></a> don't run nose-based iptest on py310, only pytest</li>; <li><a href=""https://github.com/ipython/ipython/commit/533e5094aa36b51549cf6a316fc439c6404643c9""><code>533e509</code></a> back to decorator skip</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:1420,Integrability,depend,dependabot,1420,"gq5x</li>; <li><a href=""https://github.com/ipython/ipython/commit/27943302db129464b33bae8cb6cfa552b52b46c2""><code>2794330</code></a> back to dev</li>; <li><a href=""https://github.com/ipython/ipython/commit/be343e755af76193909f13027d87561b1765b5ae""><code>be343e7</code></a> release 7.31.0</li>; <li><a href=""https://github.com/ipython/ipython/commit/0fcf2c43facb7ba5144cdcc47118aa1e55085c20""><code>0fcf2c4</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13428"">#13428</a> from meeseeksmachine/auto-backport-of-pr-13427-on-7.x</li>; <li><a href=""https://github.com/ipython/ipython/commit/b8db9b1371fff1b89d0f058e19a48a4ca7b93c51""><code>b8db9b1</code></a> Backport PR <a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13427"">#13427</a>: wn 731</li>; <li><a href=""https://github.com/ipython/ipython/commit/7f253dcf7b1c3a791a98d44b0dfc848d62bd27df""><code>7f253dc</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13412"">#13412</a> from bnavigator/backport-inspect</li>; <li><a href=""https://github.com/ipython/ipython/commit/4f26796cf368d24edadbb3d62e052e6aa4ddc820""><code>4f26796</code></a> fix xxlimited_35 import name</li>; <li><a href=""https://github.com/ipython/ipython/commit/77ca4a6312374f0659fb6973925e5b696d5dc74e""><code>77ca4a6</code></a> don't run nose-based iptest on py310, only pytest</li>; <li><a href=""https://github.com/ipython/ipython/commit/533e5094aa36b51549cf6a316fc439c6404643c9""><code>533e509</code></a> back to decorator skip</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-depend",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:2158,Integrability,Depend,Dependabot,2158,"t.com/ipython/ipython/issues/13427"">#13427</a>: wn 731</li>; <li><a href=""https://github.com/ipython/ipython/commit/7f253dcf7b1c3a791a98d44b0dfc848d62bd27df""><code>7f253dc</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13412"">#13412</a> from bnavigator/backport-inspect</li>; <li><a href=""https://github.com/ipython/ipython/commit/4f26796cf368d24edadbb3d62e052e6aa4ddc820""><code>4f26796</code></a> fix xxlimited_35 import name</li>; <li><a href=""https://github.com/ipython/ipython/commit/77ca4a6312374f0659fb6973925e5b696d5dc74e""><code>77ca4a6</code></a> don't run nose-based iptest on py310, only pytest</li>; <li><a href=""https://github.com/ipython/ipython/commit/533e5094aa36b51549cf6a316fc439c6404643c9""><code>533e509</code></a> back to decorator skip</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:2198,Integrability,depend,dependabot-badges,2198,"t.com/ipython/ipython/issues/13427"">#13427</a>: wn 731</li>; <li><a href=""https://github.com/ipython/ipython/commit/7f253dcf7b1c3a791a98d44b0dfc848d62bd27df""><code>7f253dc</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13412"">#13412</a> from bnavigator/backport-inspect</li>; <li><a href=""https://github.com/ipython/ipython/commit/4f26796cf368d24edadbb3d62e052e6aa4ddc820""><code>4f26796</code></a> fix xxlimited_35 import name</li>; <li><a href=""https://github.com/ipython/ipython/commit/77ca4a6312374f0659fb6973925e5b696d5dc74e""><code>77ca4a6</code></a> don't run nose-based iptest on py310, only pytest</li>; <li><a href=""https://github.com/ipython/ipython/commit/533e5094aa36b51549cf6a316fc439c6404643c9""><code>533e509</code></a> back to decorator skip</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:2257,Integrability,depend,dependency-name,2257,".com/ipython/ipython/commit/7f253dcf7b1c3a791a98d44b0dfc848d62bd27df""><code>7f253dc</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13412"">#13412</a> from bnavigator/backport-inspect</li>; <li><a href=""https://github.com/ipython/ipython/commit/4f26796cf368d24edadbb3d62e052e6aa4ddc820""><code>4f26796</code></a> fix xxlimited_35 import name</li>; <li><a href=""https://github.com/ipython/ipython/commit/77ca4a6312374f0659fb6973925e5b696d5dc74e""><code>77ca4a6</code></a> don't run nose-based iptest on py310, only pytest</li>; <li><a href=""https://github.com/ipython/ipython/commit/533e5094aa36b51549cf6a316fc439c6404643c9""><code>533e509</code></a> back to decorator skip</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` w",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:2420,Integrability,depend,dependabot-security-updates,2420,"ependabot.com/ipython/ipython/issues/13412"">#13412</a> from bnavigator/backport-inspect</li>; <li><a href=""https://github.com/ipython/ipython/commit/4f26796cf368d24edadbb3d62e052e6aa4ddc820""><code>4f26796</code></a> fix xxlimited_35 import name</li>; <li><a href=""https://github.com/ipython/ipython/commit/77ca4a6312374f0659fb6973925e5b696d5dc74e""><code>77ca4a6</code></a> don't run nose-based iptest on py310, only pytest</li>; <li><a href=""https://github.com/ipython/ipython/commit/533e5094aa36b51549cf6a316fc439c6404643c9""><code>533e509</code></a> back to decorator skip</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:2477,Integrability,Depend,Dependabot,2477," href=""https://github.com/ipython/ipython/commit/4f26796cf368d24edadbb3d62e052e6aa4ddc820""><code>4f26796</code></a> fix xxlimited_35 import name</li>; <li><a href=""https://github.com/ipython/ipython/commit/77ca4a6312374f0659fb6973925e5b696d5dc74e""><code>77ca4a6</code></a> don't run nose-based iptest on py310, only pytest</li>; <li><a href=""https://github.com/ipython/ipython/commit/533e5094aa36b51549cf6a316fc439c6404643c9""><code>533e509</code></a> back to decorator skip</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:2623,Integrability,depend,dependabot,2623,"ddc820""><code>4f26796</code></a> fix xxlimited_35 import name</li>; <li><a href=""https://github.com/ipython/ipython/commit/77ca4a6312374f0659fb6973925e5b696d5dc74e""><code>77ca4a6</code></a> don't run nose-based iptest on py310, only pytest</li>; <li><a href=""https://github.com/ipython/ipython/commit/533e5094aa36b51549cf6a316fc439c6404643c9""><code>533e509</code></a> back to decorator skip</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:2652,Integrability,depend,dependabot-automerge-start,2652,"href=""https://github.com/ipython/ipython/commit/77ca4a6312374f0659fb6973925e5b696d5dc74e""><code>77ca4a6</code></a> don't run nose-based iptest on py310, only pytest</li>; <li><a href=""https://github.com/ipython/ipython/commit/533e5094aa36b51549cf6a316fc439c6404643c9""><code>533e509</code></a> back to decorator skip</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:2690,Integrability,depend,dependabot-automerge-end,2690,"href=""https://github.com/ipython/ipython/commit/77ca4a6312374f0659fb6973925e5b696d5dc74e""><code>77ca4a6</code></a> don't run nose-based iptest on py310, only pytest</li>; <li><a href=""https://github.com/ipython/ipython/commit/533e5094aa36b51549cf6a316fc439c6404643c9""><code>533e509</code></a> back to decorator skip</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:2742,Integrability,Depend,Dependabot,2742,"b696d5dc74e""><code>77ca4a6</code></a> don't run nose-based iptest on py310, only pytest</li>; <li><a href=""https://github.com/ipython/ipython/commit/533e5094aa36b51549cf6a316fc439c6404643c9""><code>533e509</code></a> back to decorator skip</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:2809,Integrability,Depend,Dependabot,2809,"7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:2859,Integrability,depend,dependabot,2859,"7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:2903,Integrability,depend,dependabot,2903,"7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:3000,Integrability,depend,dependabot,3000,"7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:3069,Integrability,depend,dependabot,3069,"7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:3160,Integrability,depend,dependabot,3160,"7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:3253,Integrability,depend,dependabot,3253,"7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:3313,Integrability,depend,dependabot,3313,"7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:3359,Integrability,Depend,Dependabot,3359,"7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:3445,Integrability,depend,dependabot,3445,"automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**. Update ipython used to build documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:3511,Integrability,Depend,Dependabot,3511,"automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**. Update ipython used to build documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:3621,Integrability,depend,dependabot,3621,"automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**. Update ipython used to build documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:3687,Integrability,Depend,Dependabot,3687,"automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**. Update ipython used to build documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:3797,Integrability,depend,dependabot,3797,"automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**. Update ipython used to build documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:3820,Integrability,depend,dependency,3820,"automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**. Update ipython used to build documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:3860,Integrability,Depend,Dependabot,3860,"automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**. Update ipython used to build documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:3898,Integrability,depend,dependency,3898,"automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**. Update ipython used to build documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:3967,Integrability,depend,dependabot,3967,"automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**. Update ipython used to build documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:4086,Integrability,depend,dependabot,4086,"automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**. Update ipython used to build documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:4211,Integrability,depend,dependabot,4211,"automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**. Update ipython used to build documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:4336,Integrability,depend,dependabot,4336,"automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**. Update ipython used to build documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:2389,Security,secur,security-vulnerabilities,2389,"ependabot.com/ipython/ipython/issues/13412"">#13412</a> from bnavigator/backport-inspect</li>; <li><a href=""https://github.com/ipython/ipython/commit/4f26796cf368d24edadbb3d62e052e6aa4ddc820""><code>4f26796</code></a> fix xxlimited_35 import name</li>; <li><a href=""https://github.com/ipython/ipython/commit/77ca4a6312374f0659fb6973925e5b696d5dc74e""><code>77ca4a6</code></a> don't run nose-based iptest on py310, only pytest</li>; <li><a href=""https://github.com/ipython/ipython/commit/533e5094aa36b51549cf6a316fc439c6404643c9""><code>533e509</code></a> back to decorator skip</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:2431,Security,secur,security-updates,2431,"ependabot.com/ipython/ipython/issues/13412"">#13412</a> from bnavigator/backport-inspect</li>; <li><a href=""https://github.com/ipython/ipython/commit/4f26796cf368d24edadbb3d62e052e6aa4ddc820""><code>4f26796</code></a> fix xxlimited_35 import name</li>; <li><a href=""https://github.com/ipython/ipython/commit/77ca4a6312374f0659fb6973925e5b696d5dc74e""><code>77ca4a6</code></a> don't run nose-based iptest on py310, only pytest</li>; <li><a href=""https://github.com/ipython/ipython/commit/533e5094aa36b51549cf6a316fc439c6404643c9""><code>533e509</code></a> back to decorator skip</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:4482,Security,secur,security,4482,"automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**. Update ipython used to build documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1780:4523,Security,Secur,Security,4523,"automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**. Update ipython used to build documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1780
https://github.com/qutip/qutip/pull/1781:611,Deployability,update,update,611,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; This PR presents a prototype for emitting Quantum Intermediate Representation (QIR) modules from `qutip.qip.QubitCircuit` objects, making it easier to interoperate QuTiP with other quantum software tools and platforms. The prototype in this PR uses the [PyQIR](https://qir-alliance.github.io/pyqir/) library for Python to handle QIR generation, isolating QIR generation functionality as an optional dependency. . **Changelog**. - Support for emitting QIR from circuit objects.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1781
https://github.com/qutip/qutip/pull/1781:1465,Integrability,depend,dependency,1465,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; This PR presents a prototype for emitting Quantum Intermediate Representation (QIR) modules from `qutip.qip.QubitCircuit` objects, making it easier to interoperate QuTiP with other quantum software tools and platforms. The prototype in this PR uses the [PyQIR](https://qir-alliance.github.io/pyqir/) library for Python to handle QIR generation, isolating QIR generation functionality as an optional dependency. . **Changelog**. - Support for emitting QIR from circuit objects.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1781
https://github.com/qutip/qutip/pull/1781:478,Testability,test,tests,478,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; This PR presents a prototype for emitting Quantum Intermediate Representation (QIR) modules from `qutip.qip.QubitCircuit` objects, making it easier to interoperate QuTiP with other quantum software tools and platforms. The prototype in this PR uses the [PyQIR](https://qir-alliance.github.io/pyqir/) library for Python to handle QIR generation, isolating QIR generation functionality as an optional dependency. . **Changelog**. - Support for emitting QIR from circuit objects.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1781
https://github.com/qutip/qutip/issues/1782:322,Availability,fault,fault,322,"### Bug Description. Construct a density matrix, via some array creation method (in this case numpy - haven't checked with others). Create a `rho0` for mesolve to use with the flat array while explicitly specifying the matrix dimensions in the `dims` parameter. Upon passing the density matrix to `mesolve` a segmentation fault occurs. A simple proof of concept is included below. `np.random.random` was used to fill the matrix in this case, but the issue was encountered using valid density matricies, and the issue seems to be unrelated to whether the matrix is valid or not as a density matrix. ### Code to Reproduce the Bug. ```shell; import qutip as qtip; import numpy as np. dim = 100 # Small dims don't work. I assume python has some buffer after the array; H = qtip.Qobj(np.identity(dim),dims=[[dim],[dim]]); rho0 = np.random.random([dim**2]); rho0 = qtip.Qobj(rho0.flatten(),dims=[[dim],[dim]]) # This fails; # rho0 = qtip.Qobj(rho0.reshape([dim,dim]),dims=[[dim],[dim]]) # This works; qtip.mesolve(rho0=rho0,H=H,tlist=np.linspace(0,10,1),progress_bar=qtip.ui.EnhancedTextProgressBar()); ```. ### Code Output. ```shell; [ 0% ] Elapsed 0.00s / Remaining 00:00:00:00[1] 3281154 segmentation fault (core dumped); ```. ### Expected Behaviour. The code should exit without failure or throw a python error elaborating on the issue. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.21.4; Scipy Version: 1.6.0; Cython Version: 0.29.21; Matplotlib Version: 3.4.3; Python Version: 3.9.7; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/lala5th/.local/lib/python3.9/site-packages/qutip; ```. ### Additional Context. I ran the code through `gdb` to somewhat narrow down the cause of the issue. It seems that `dense2D_to_fastcsr_fmode` causes the segmentation fault, but the parameters passed to it seem fine at first glance, since I expect `ncols = 10000`. While I don't know how useful ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1782
https://github.com/qutip/qutip/issues/1782:1198,Availability,fault,fault,1198,"ay while explicitly specifying the matrix dimensions in the `dims` parameter. Upon passing the density matrix to `mesolve` a segmentation fault occurs. A simple proof of concept is included below. `np.random.random` was used to fill the matrix in this case, but the issue was encountered using valid density matricies, and the issue seems to be unrelated to whether the matrix is valid or not as a density matrix. ### Code to Reproduce the Bug. ```shell; import qutip as qtip; import numpy as np. dim = 100 # Small dims don't work. I assume python has some buffer after the array; H = qtip.Qobj(np.identity(dim),dims=[[dim],[dim]]); rho0 = np.random.random([dim**2]); rho0 = qtip.Qobj(rho0.flatten(),dims=[[dim],[dim]]) # This fails; # rho0 = qtip.Qobj(rho0.reshape([dim,dim]),dims=[[dim],[dim]]) # This works; qtip.mesolve(rho0=rho0,H=H,tlist=np.linspace(0,10,1),progress_bar=qtip.ui.EnhancedTextProgressBar()); ```. ### Code Output. ```shell; [ 0% ] Elapsed 0.00s / Remaining 00:00:00:00[1] 3281154 segmentation fault (core dumped); ```. ### Expected Behaviour. The code should exit without failure or throw a python error elaborating on the issue. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.21.4; Scipy Version: 1.6.0; Cython Version: 0.29.21; Matplotlib Version: 3.4.3; Python Version: 3.9.7; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/lala5th/.local/lib/python3.9/site-packages/qutip; ```. ### Additional Context. I ran the code through `gdb` to somewhat narrow down the cause of the issue. It seems that `dense2D_to_fastcsr_fmode` causes the segmentation fault, but the parameters passed to it seem fine at first glance, since I expect `ncols = 10000`. While I don't know how useful it is I will put the top of the stack trace (after this the only the call to `mesolve` is relevant in the stack trace). ```; #0 __pyx_pf_5qutip_2cy_9spconvert_6dense2D_to_fastcsr_fmode",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1782
https://github.com/qutip/qutip/issues/1782:1277,Availability,failure,failure,1277,"rix to `mesolve` a segmentation fault occurs. A simple proof of concept is included below. `np.random.random` was used to fill the matrix in this case, but the issue was encountered using valid density matricies, and the issue seems to be unrelated to whether the matrix is valid or not as a density matrix. ### Code to Reproduce the Bug. ```shell; import qutip as qtip; import numpy as np. dim = 100 # Small dims don't work. I assume python has some buffer after the array; H = qtip.Qobj(np.identity(dim),dims=[[dim],[dim]]); rho0 = np.random.random([dim**2]); rho0 = qtip.Qobj(rho0.flatten(),dims=[[dim],[dim]]) # This fails; # rho0 = qtip.Qobj(rho0.reshape([dim,dim]),dims=[[dim],[dim]]) # This works; qtip.mesolve(rho0=rho0,H=H,tlist=np.linspace(0,10,1),progress_bar=qtip.ui.EnhancedTextProgressBar()); ```. ### Code Output. ```shell; [ 0% ] Elapsed 0.00s / Remaining 00:00:00:00[1] 3281154 segmentation fault (core dumped); ```. ### Expected Behaviour. The code should exit without failure or throw a python error elaborating on the issue. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.21.4; Scipy Version: 1.6.0; Cython Version: 0.29.21; Matplotlib Version: 3.4.3; Python Version: 3.9.7; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/lala5th/.local/lib/python3.9/site-packages/qutip; ```. ### Additional Context. I ran the code through `gdb` to somewhat narrow down the cause of the issue. It seems that `dense2D_to_fastcsr_fmode` causes the segmentation fault, but the parameters passed to it seem fine at first glance, since I expect `ncols = 10000`. While I don't know how useful it is I will put the top of the stack trace (after this the only the call to `mesolve` is relevant in the stack trace). ```; #0 __pyx_pf_5qutip_2cy_9spconvert_6dense2D_to_fastcsr_fmode (__pyx_self=<optimised out>, __pyx_v_ncols=10000, __pyx_v_nrows=<optimised out>, __pyx_v_mat=...) at quti",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1782
https://github.com/qutip/qutip/issues/1782:1303,Availability,error,error,1303,"rix to `mesolve` a segmentation fault occurs. A simple proof of concept is included below. `np.random.random` was used to fill the matrix in this case, but the issue was encountered using valid density matricies, and the issue seems to be unrelated to whether the matrix is valid or not as a density matrix. ### Code to Reproduce the Bug. ```shell; import qutip as qtip; import numpy as np. dim = 100 # Small dims don't work. I assume python has some buffer after the array; H = qtip.Qobj(np.identity(dim),dims=[[dim],[dim]]); rho0 = np.random.random([dim**2]); rho0 = qtip.Qobj(rho0.flatten(),dims=[[dim],[dim]]) # This fails; # rho0 = qtip.Qobj(rho0.reshape([dim,dim]),dims=[[dim],[dim]]) # This works; qtip.mesolve(rho0=rho0,H=H,tlist=np.linspace(0,10,1),progress_bar=qtip.ui.EnhancedTextProgressBar()); ```. ### Code Output. ```shell; [ 0% ] Elapsed 0.00s / Remaining 00:00:00:00[1] 3281154 segmentation fault (core dumped); ```. ### Expected Behaviour. The code should exit without failure or throw a python error elaborating on the issue. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.21.4; Scipy Version: 1.6.0; Cython Version: 0.29.21; Matplotlib Version: 3.4.3; Python Version: 3.9.7; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/lala5th/.local/lib/python3.9/site-packages/qutip; ```. ### Additional Context. I ran the code through `gdb` to somewhat narrow down the cause of the issue. It seems that `dense2D_to_fastcsr_fmode` causes the segmentation fault, but the parameters passed to it seem fine at first glance, since I expect `ncols = 10000`. While I don't know how useful it is I will put the top of the stack trace (after this the only the call to `mesolve` is relevant in the stack trace). ```; #0 __pyx_pf_5qutip_2cy_9spconvert_6dense2D_to_fastcsr_fmode (__pyx_self=<optimised out>, __pyx_v_ncols=10000, __pyx_v_nrows=<optimised out>, __pyx_v_mat=...) at quti",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1782
https://github.com/qutip/qutip/issues/1782:1779,Availability,down,down,1779," qtip.Qobj(np.identity(dim),dims=[[dim],[dim]]); rho0 = np.random.random([dim**2]); rho0 = qtip.Qobj(rho0.flatten(),dims=[[dim],[dim]]) # This fails; # rho0 = qtip.Qobj(rho0.reshape([dim,dim]),dims=[[dim],[dim]]) # This works; qtip.mesolve(rho0=rho0,H=H,tlist=np.linspace(0,10,1),progress_bar=qtip.ui.EnhancedTextProgressBar()); ```. ### Code Output. ```shell; [ 0% ] Elapsed 0.00s / Remaining 00:00:00:00[1] 3281154 segmentation fault (core dumped); ```. ### Expected Behaviour. The code should exit without failure or throw a python error elaborating on the issue. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.21.4; Scipy Version: 1.6.0; Cython Version: 0.29.21; Matplotlib Version: 3.4.3; Python Version: 3.9.7; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/lala5th/.local/lib/python3.9/site-packages/qutip; ```. ### Additional Context. I ran the code through `gdb` to somewhat narrow down the cause of the issue. It seems that `dense2D_to_fastcsr_fmode` causes the segmentation fault, but the parameters passed to it seem fine at first glance, since I expect `ncols = 10000`. While I don't know how useful it is I will put the top of the stack trace (after this the only the call to `mesolve` is relevant in the stack trace). ```; #0 __pyx_pf_5qutip_2cy_9spconvert_6dense2D_to_fastcsr_fmode (__pyx_self=<optimised out>, __pyx_v_ncols=10000, __pyx_v_nrows=<optimised out>, __pyx_v_mat=...) at qutip/cy/spconvert.cpp:9472; #1 __pyx_pw_5qutip_2cy_9spconvert_7dense2D_to_fastcsr_fmode (__pyx_self=<optimised out>, __pyx_args=<optimised out>, __pyx_kwds=<optimised out>) at qutip/cy/spconvert.cpp:9237; #2 0x000000000053a8eb in cfunction_call (func=<built-in function dense2D_to_fastcsr_fmode>, args=<optimised out>, kwargs=<optimised out>) at ../Objects/methodobject.c:543; #3 0x000000000051c24b in _PyObject_MakeTpCall (tstate=0x9561b0, callable=<built-in function dense2D_to_f",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1782
https://github.com/qutip/qutip/issues/1782:1873,Availability,fault,fault,1873,"=[[dim],[dim]]) # This fails; # rho0 = qtip.Qobj(rho0.reshape([dim,dim]),dims=[[dim],[dim]]) # This works; qtip.mesolve(rho0=rho0,H=H,tlist=np.linspace(0,10,1),progress_bar=qtip.ui.EnhancedTextProgressBar()); ```. ### Code Output. ```shell; [ 0% ] Elapsed 0.00s / Remaining 00:00:00:00[1] 3281154 segmentation fault (core dumped); ```. ### Expected Behaviour. The code should exit without failure or throw a python error elaborating on the issue. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.21.4; Scipy Version: 1.6.0; Cython Version: 0.29.21; Matplotlib Version: 3.4.3; Python Version: 3.9.7; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/lala5th/.local/lib/python3.9/site-packages/qutip; ```. ### Additional Context. I ran the code through `gdb` to somewhat narrow down the cause of the issue. It seems that `dense2D_to_fastcsr_fmode` causes the segmentation fault, but the parameters passed to it seem fine at first glance, since I expect `ncols = 10000`. While I don't know how useful it is I will put the top of the stack trace (after this the only the call to `mesolve` is relevant in the stack trace). ```; #0 __pyx_pf_5qutip_2cy_9spconvert_6dense2D_to_fastcsr_fmode (__pyx_self=<optimised out>, __pyx_v_ncols=10000, __pyx_v_nrows=<optimised out>, __pyx_v_mat=...) at qutip/cy/spconvert.cpp:9472; #1 __pyx_pw_5qutip_2cy_9spconvert_7dense2D_to_fastcsr_fmode (__pyx_self=<optimised out>, __pyx_args=<optimised out>, __pyx_kwds=<optimised out>) at qutip/cy/spconvert.cpp:9237; #2 0x000000000053a8eb in cfunction_call (func=<built-in function dense2D_to_fastcsr_fmode>, args=<optimised out>, kwargs=<optimised out>) at ../Objects/methodobject.c:543; #3 0x000000000051c24b in _PyObject_MakeTpCall (tstate=0x9561b0, callable=<built-in function dense2D_to_fastcsr_fmode>, args=<optimised out>, nargs=<optimised out>, keywords=<optimised out>) at ../Objects/call.c:191; #4 0x000",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1782
https://github.com/qutip/qutip/issues/1782:1556,Deployability,Install,Installed,1556,"ensity matrix. ### Code to Reproduce the Bug. ```shell; import qutip as qtip; import numpy as np. dim = 100 # Small dims don't work. I assume python has some buffer after the array; H = qtip.Qobj(np.identity(dim),dims=[[dim],[dim]]); rho0 = np.random.random([dim**2]); rho0 = qtip.Qobj(rho0.flatten(),dims=[[dim],[dim]]) # This fails; # rho0 = qtip.Qobj(rho0.reshape([dim,dim]),dims=[[dim],[dim]]) # This works; qtip.mesolve(rho0=rho0,H=H,tlist=np.linspace(0,10,1),progress_bar=qtip.ui.EnhancedTextProgressBar()); ```. ### Code Output. ```shell; [ 0% ] Elapsed 0.00s / Remaining 00:00:00:00[1] 3281154 segmentation fault (core dumped); ```. ### Expected Behaviour. The code should exit without failure or throw a python error elaborating on the issue. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.21.4; Scipy Version: 1.6.0; Cython Version: 0.29.21; Matplotlib Version: 3.4.3; Python Version: 3.9.7; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/lala5th/.local/lib/python3.9/site-packages/qutip; ```. ### Additional Context. I ran the code through `gdb` to somewhat narrow down the cause of the issue. It seems that `dense2D_to_fastcsr_fmode` causes the segmentation fault, but the parameters passed to it seem fine at first glance, since I expect `ncols = 10000`. While I don't know how useful it is I will put the top of the stack trace (after this the only the call to `mesolve` is relevant in the stack trace). ```; #0 __pyx_pf_5qutip_2cy_9spconvert_6dense2D_to_fastcsr_fmode (__pyx_self=<optimised out>, __pyx_v_ncols=10000, __pyx_v_nrows=<optimised out>, __pyx_v_mat=...) at qutip/cy/spconvert.cpp:9472; #1 __pyx_pw_5qutip_2cy_9spconvert_7dense2D_to_fastcsr_fmode (__pyx_self=<optimised out>, __pyx_args=<optimised out>, __pyx_kwds=<optimised out>) at qutip/cy/spconvert.cpp:9237; #2 0x000000000053a8eb in cfunction_call (func=<built-in function dense2D_to_fastcsr_fmode>,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1782
https://github.com/qutip/qutip/issues/1782:1627,Deployability,Install,Installation,1627,"ensity matrix. ### Code to Reproduce the Bug. ```shell; import qutip as qtip; import numpy as np. dim = 100 # Small dims don't work. I assume python has some buffer after the array; H = qtip.Qobj(np.identity(dim),dims=[[dim],[dim]]); rho0 = np.random.random([dim**2]); rho0 = qtip.Qobj(rho0.flatten(),dims=[[dim],[dim]]) # This fails; # rho0 = qtip.Qobj(rho0.reshape([dim,dim]),dims=[[dim],[dim]]) # This works; qtip.mesolve(rho0=rho0,H=H,tlist=np.linspace(0,10,1),progress_bar=qtip.ui.EnhancedTextProgressBar()); ```. ### Code Output. ```shell; [ 0% ] Elapsed 0.00s / Remaining 00:00:00:00[1] 3281154 segmentation fault (core dumped); ```. ### Expected Behaviour. The code should exit without failure or throw a python error elaborating on the issue. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.21.4; Scipy Version: 1.6.0; Cython Version: 0.29.21; Matplotlib Version: 3.4.3; Python Version: 3.9.7; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/lala5th/.local/lib/python3.9/site-packages/qutip; ```. ### Additional Context. I ran the code through `gdb` to somewhat narrow down the cause of the issue. It seems that `dense2D_to_fastcsr_fmode` causes the segmentation fault, but the parameters passed to it seem fine at first glance, since I expect `ncols = 10000`. While I don't know how useful it is I will put the top of the stack trace (after this the only the call to `mesolve` is relevant in the stack trace). ```; #0 __pyx_pf_5qutip_2cy_9spconvert_6dense2D_to_fastcsr_fmode (__pyx_self=<optimised out>, __pyx_v_ncols=10000, __pyx_v_nrows=<optimised out>, __pyx_v_mat=...) at qutip/cy/spconvert.cpp:9472; #1 __pyx_pw_5qutip_2cy_9spconvert_7dense2D_to_fastcsr_fmode (__pyx_self=<optimised out>, __pyx_args=<optimised out>, __pyx_kwds=<optimised out>) at qutip/cy/spconvert.cpp:9237; #2 0x000000000053a8eb in cfunction_call (func=<built-in function dense2D_to_fastcsr_fmode>,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1782
https://github.com/qutip/qutip/issues/1782:1069,Modifiability,Enhance,EnhancedTextProgressBar,1069,"his case numpy - haven't checked with others). Create a `rho0` for mesolve to use with the flat array while explicitly specifying the matrix dimensions in the `dims` parameter. Upon passing the density matrix to `mesolve` a segmentation fault occurs. A simple proof of concept is included below. `np.random.random` was used to fill the matrix in this case, but the issue was encountered using valid density matricies, and the issue seems to be unrelated to whether the matrix is valid or not as a density matrix. ### Code to Reproduce the Bug. ```shell; import qutip as qtip; import numpy as np. dim = 100 # Small dims don't work. I assume python has some buffer after the array; H = qtip.Qobj(np.identity(dim),dims=[[dim],[dim]]); rho0 = np.random.random([dim**2]); rho0 = qtip.Qobj(rho0.flatten(),dims=[[dim],[dim]]) # This fails; # rho0 = qtip.Qobj(rho0.reshape([dim,dim]),dims=[[dim],[dim]]) # This works; qtip.mesolve(rho0=rho0,H=H,tlist=np.linspace(0,10,1),progress_bar=qtip.ui.EnhancedTextProgressBar()); ```. ### Code Output. ```shell; [ 0% ] Elapsed 0.00s / Remaining 00:00:00:00[1] 3281154 segmentation fault (core dumped); ```. ### Expected Behaviour. The code should exit without failure or throw a python error elaborating on the issue. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.21.4; Scipy Version: 1.6.0; Cython Version: 0.29.21; Matplotlib Version: 3.4.3; Python Version: 3.9.7; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/lala5th/.local/lib/python3.9/site-packages/qutip; ```. ### Additional Context. I ran the code through `gdb` to somewhat narrow down the cause of the issue. It seems that `dense2D_to_fastcsr_fmode` causes the segmentation fault, but the parameters passed to it seem fine at first glance, since I expect `ncols = 10000`. While I don't know how useful it is I will put the top of the stack trace (after this the only the call to `mesolv",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1782
https://github.com/qutip/qutip/issues/1782:338,Usability,simpl,simple,338,"### Bug Description. Construct a density matrix, via some array creation method (in this case numpy - haven't checked with others). Create a `rho0` for mesolve to use with the flat array while explicitly specifying the matrix dimensions in the `dims` parameter. Upon passing the density matrix to `mesolve` a segmentation fault occurs. A simple proof of concept is included below. `np.random.random` was used to fill the matrix in this case, but the issue was encountered using valid density matricies, and the issue seems to be unrelated to whether the matrix is valid or not as a density matrix. ### Code to Reproduce the Bug. ```shell; import qutip as qtip; import numpy as np. dim = 100 # Small dims don't work. I assume python has some buffer after the array; H = qtip.Qobj(np.identity(dim),dims=[[dim],[dim]]); rho0 = np.random.random([dim**2]); rho0 = qtip.Qobj(rho0.flatten(),dims=[[dim],[dim]]) # This fails; # rho0 = qtip.Qobj(rho0.reshape([dim,dim]),dims=[[dim],[dim]]) # This works; qtip.mesolve(rho0=rho0,H=H,tlist=np.linspace(0,10,1),progress_bar=qtip.ui.EnhancedTextProgressBar()); ```. ### Code Output. ```shell; [ 0% ] Elapsed 0.00s / Remaining 00:00:00:00[1] 3281154 segmentation fault (core dumped); ```. ### Expected Behaviour. The code should exit without failure or throw a python error elaborating on the issue. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.21.4; Scipy Version: 1.6.0; Cython Version: 0.29.21; Matplotlib Version: 3.4.3; Python Version: 3.9.7; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /home/lala5th/.local/lib/python3.9/site-packages/qutip; ```. ### Additional Context. I ran the code through `gdb` to somewhat narrow down the cause of the issue. It seems that `dense2D_to_fastcsr_fmode` causes the segmentation fault, but the parameters passed to it seem fine at first glance, since I expect `ncols = 10000`. While I don't know how useful ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1782
https://github.com/qutip/qutip/pull/1783:281,Availability,fault,fault,281,"**Description**; Extra check in `Qobj` constructor to make sure that the underlying data behaves as expected. **Related issues or PRs**; The PR is a fix to #1782, where the `Qobj` would be constructed in a way subsequent code (i.e. `mesolve`) did not expect causing a segmentation fault. **Changelog**; Added a check in `Qobj` constructor that the respective members of `data.shape` cannot be larger than what the corresponding `dims` could contain.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1783
https://github.com/qutip/qutip/pull/1785:249,Testability,test,tests,249,"**Description**; A change in `test_k`. In commit 7173a0d `L` was changed, but this was not reflected in `dim_H`. This commit aims to rectify that. **Related issues or PRs**. **Changelog**; Changed `dim_H` to include `L` in its definition in lattice tests.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1785
https://github.com/qutip/qutip/pull/1786:37,Usability,guid,guide-settings,37,**Changelog**; Fixed a typo in docs (guide-settings.rst),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1786
https://github.com/qutip/qutip/pull/1787:210,Availability,error,error,210,"**Description**; Since yesterday, our tests hangs for both `master` and `dev.major` and never finish. It seen only a few tests are affected.; I am adding a timeout so the tests that hangs result in a localized error.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1787
https://github.com/qutip/qutip/pull/1787:156,Safety,timeout,timeout,156,"**Description**; Since yesterday, our tests hangs for both `master` and `dev.major` and never finish. It seen only a few tests are affected.; I am adding a timeout so the tests that hangs result in a localized error.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1787
https://github.com/qutip/qutip/pull/1787:38,Testability,test,tests,38,"**Description**; Since yesterday, our tests hangs for both `master` and `dev.major` and never finish. It seen only a few tests are affected.; I am adding a timeout so the tests that hangs result in a localized error.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1787
https://github.com/qutip/qutip/pull/1787:121,Testability,test,tests,121,"**Description**; Since yesterday, our tests hangs for both `master` and `dev.major` and never finish. It seen only a few tests are affected.; I am adding a timeout so the tests that hangs result in a localized error.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1787
https://github.com/qutip/qutip/pull/1787:171,Testability,test,tests,171,"**Description**; Since yesterday, our tests hangs for both `master` and `dev.major` and never finish. It seen only a few tests are affected.; I am adding a timeout so the tests that hangs result in a localized error.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1787
https://github.com/qutip/qutip/pull/1788:179,Availability,error,error,179,"This PR reduces the calculation of average gate fidelity between two quantum channels to the recently merged implementation of process fidelity. Additional minor change: raise an error when the channel passed to `process_fidelity` does not preserve the Hilbert space dimension of the input state. Previously it gave inconsistent results for that case, for different representations of equivalent channels. It's probably possible to define the `process_fidelity` and `average_gate_fidelity` for non-dimension-preserving channels if there is a use case for it? The previous version of `average_gate_fidelity` also was not defined for non-dimension-preserving channel. **Related issues or PRs**; Last part of the changes proposed in https://github.com/qutip/qutip/issues/1703. Builds on the implementation of process_fidelity from https://github.com/qutip/qutip/pull/1712, https://github.com/qutip/qutip/pull/1748. **Changelog**; Re-implement average_gate_fidelity using process_fidelity.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1788
https://github.com/qutip/qutip/pull/1788:8,Energy Efficiency,reduce,reduces,8,"This PR reduces the calculation of average gate fidelity between two quantum channels to the recently merged implementation of process fidelity. Additional minor change: raise an error when the channel passed to `process_fidelity` does not preserve the Hilbert space dimension of the input state. Previously it gave inconsistent results for that case, for different representations of equivalent channels. It's probably possible to define the `process_fidelity` and `average_gate_fidelity` for non-dimension-preserving channels if there is a use case for it? The previous version of `average_gate_fidelity` also was not defined for non-dimension-preserving channel. **Related issues or PRs**; Last part of the changes proposed in https://github.com/qutip/qutip/issues/1703. Builds on the implementation of process_fidelity from https://github.com/qutip/qutip/pull/1712, https://github.com/qutip/qutip/pull/1748. **Changelog**; Re-implement average_gate_fidelity using process_fidelity.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1788
https://github.com/qutip/qutip/pull/1789:19,Testability,test,test,19,"**Description**; A test for hanging github's action.; To see if it could be caused by multiprocessing, it over with `parallel_map` with `serial_map` so all test are forced to run in one process.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1789
https://github.com/qutip/qutip/pull/1789:156,Testability,test,test,156,"**Description**; A test for hanging github's action.; To see if it could be caused by multiprocessing, it over with `parallel_map` with `serial_map` so all test are forced to run in one process.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1789
https://github.com/qutip/qutip/pull/1791:17,Deployability,Update,Update,17,**Description**; Update dev.major CI tests setup from master. This also merges the build changes needed to support Python 3.10 (which is tested in the latest CI test setup from master). **Related issues or PRs**; * Brings in: #1777. **Changelog**; Update dev.major CI tests setup from master.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1791
https://github.com/qutip/qutip/pull/1791:248,Deployability,Update,Update,248,**Description**; Update dev.major CI tests setup from master. This also merges the build changes needed to support Python 3.10 (which is tested in the latest CI test setup from master). **Related issues or PRs**; * Brings in: #1777. **Changelog**; Update dev.major CI tests setup from master.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1791
https://github.com/qutip/qutip/pull/1791:37,Testability,test,tests,37,**Description**; Update dev.major CI tests setup from master. This also merges the build changes needed to support Python 3.10 (which is tested in the latest CI test setup from master). **Related issues or PRs**; * Brings in: #1777. **Changelog**; Update dev.major CI tests setup from master.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1791
https://github.com/qutip/qutip/pull/1791:137,Testability,test,tested,137,**Description**; Update dev.major CI tests setup from master. This also merges the build changes needed to support Python 3.10 (which is tested in the latest CI test setup from master). **Related issues or PRs**; * Brings in: #1777. **Changelog**; Update dev.major CI tests setup from master.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1791
https://github.com/qutip/qutip/pull/1791:161,Testability,test,test,161,**Description**; Update dev.major CI tests setup from master. This also merges the build changes needed to support Python 3.10 (which is tested in the latest CI test setup from master). **Related issues or PRs**; * Brings in: #1777. **Changelog**; Update dev.major CI tests setup from master.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1791
https://github.com/qutip/qutip/pull/1791:268,Testability,test,tests,268,**Description**; Update dev.major CI tests setup from master. This also merges the build changes needed to support Python 3.10 (which is tested in the latest CI test setup from master). **Related issues or PRs**; * Brings in: #1777. **Changelog**; Update dev.major CI tests setup from master.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1791
https://github.com/qutip/qutip/pull/1792:307,Modifiability,evolve,evolve,307,"**Description**; Replacing the v4 solver for v5's one as the default solver in dev.major is still a ~40 files PR, so I am making the transition in block, starting by propagator and scattering. **propagator.py:**; The function call the new solver and remove some options:; - batch: useless since __solve can evolve a propagator.; - parallel: Could still be useful, until we restore openmp support for data-layer, but should be managed by the data layer in v5.; - progress_bar: Now in options.; This result in a much simpler function. Add a new class `Propagator`, which replace the `Evolver` in scattering.; Like solver classes, it split the setup and utilization:; ```; U = Propagator(H); psi_t = U(t) @ psi_0; psi_t2 = U(t2, t) @ psi_t; ```; It save previous calls for efficiency, somewhat support `args`. It's not a `QobjEvo`, to support propagators with 2 times, but can be made one. **scattering.py:**; - `Evolver` replaced by the previous `Propagator`.; - matrix-matrix product are replaced by matrix-vector product in photon scattering computation.; - Do no create a `Qobj` to extract one value from an array.; This result in a speed up of about 5 times faster for even small (N=10) operators. **Changelog**; Rework propagator to use v5 solver and add a Propagator class.; Optimize scattering functions",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1792
https://github.com/qutip/qutip/pull/1792:582,Modifiability,Evolve,Evolver,582,"**Description**; Replacing the v4 solver for v5's one as the default solver in dev.major is still a ~40 files PR, so I am making the transition in block, starting by propagator and scattering. **propagator.py:**; The function call the new solver and remove some options:; - batch: useless since __solve can evolve a propagator.; - parallel: Could still be useful, until we restore openmp support for data-layer, but should be managed by the data layer in v5.; - progress_bar: Now in options.; This result in a much simpler function. Add a new class `Propagator`, which replace the `Evolver` in scattering.; Like solver classes, it split the setup and utilization:; ```; U = Propagator(H); psi_t = U(t) @ psi_0; psi_t2 = U(t2, t) @ psi_t; ```; It save previous calls for efficiency, somewhat support `args`. It's not a `QobjEvo`, to support propagators with 2 times, but can be made one. **scattering.py:**; - `Evolver` replaced by the previous `Propagator`.; - matrix-matrix product are replaced by matrix-vector product in photon scattering computation.; - Do no create a `Qobj` to extract one value from an array.; This result in a speed up of about 5 times faster for even small (N=10) operators. **Changelog**; Rework propagator to use v5 solver and add a Propagator class.; Optimize scattering functions",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1792
https://github.com/qutip/qutip/pull/1792:910,Modifiability,Evolve,Evolver,910,"**Description**; Replacing the v4 solver for v5's one as the default solver in dev.major is still a ~40 files PR, so I am making the transition in block, starting by propagator and scattering. **propagator.py:**; The function call the new solver and remove some options:; - batch: useless since __solve can evolve a propagator.; - parallel: Could still be useful, until we restore openmp support for data-layer, but should be managed by the data layer in v5.; - progress_bar: Now in options.; This result in a much simpler function. Add a new class `Propagator`, which replace the `Evolver` in scattering.; Like solver classes, it split the setup and utilization:; ```; U = Propagator(H); psi_t = U(t) @ psi_0; psi_t2 = U(t2, t) @ psi_t; ```; It save previous calls for efficiency, somewhat support `args`. It's not a `QobjEvo`, to support propagators with 2 times, but can be made one. **scattering.py:**; - `Evolver` replaced by the previous `Propagator`.; - matrix-matrix product are replaced by matrix-vector product in photon scattering computation.; - Do no create a `Qobj` to extract one value from an array.; This result in a speed up of about 5 times faster for even small (N=10) operators. **Changelog**; Rework propagator to use v5 solver and add a Propagator class.; Optimize scattering functions",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1792
https://github.com/qutip/qutip/pull/1792:1279,Performance,Optimiz,Optimize,1279,"**Description**; Replacing the v4 solver for v5's one as the default solver in dev.major is still a ~40 files PR, so I am making the transition in block, starting by propagator and scattering. **propagator.py:**; The function call the new solver and remove some options:; - batch: useless since __solve can evolve a propagator.; - parallel: Could still be useful, until we restore openmp support for data-layer, but should be managed by the data layer in v5.; - progress_bar: Now in options.; This result in a much simpler function. Add a new class `Propagator`, which replace the `Evolver` in scattering.; Like solver classes, it split the setup and utilization:; ```; U = Propagator(H); psi_t = U(t) @ psi_0; psi_t2 = U(t2, t) @ psi_t; ```; It save previous calls for efficiency, somewhat support `args`. It's not a `QobjEvo`, to support propagators with 2 times, but can be made one. **scattering.py:**; - `Evolver` replaced by the previous `Propagator`.; - matrix-matrix product are replaced by matrix-vector product in photon scattering computation.; - Do no create a `Qobj` to extract one value from an array.; This result in a speed up of about 5 times faster for even small (N=10) operators. **Changelog**; Rework propagator to use v5 solver and add a Propagator class.; Optimize scattering functions",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1792
https://github.com/qutip/qutip/pull/1792:515,Usability,simpl,simpler,515,"**Description**; Replacing the v4 solver for v5's one as the default solver in dev.major is still a ~40 files PR, so I am making the transition in block, starting by propagator and scattering. **propagator.py:**; The function call the new solver and remove some options:; - batch: useless since __solve can evolve a propagator.; - parallel: Could still be useful, until we restore openmp support for data-layer, but should be managed by the data layer in v5.; - progress_bar: Now in options.; This result in a much simpler function. Add a new class `Propagator`, which replace the `Evolver` in scattering.; Like solver classes, it split the setup and utilization:; ```; U = Propagator(H); psi_t = U(t) @ psi_0; psi_t2 = U(t2, t) @ psi_t; ```; It save previous calls for efficiency, somewhat support `args`. It's not a `QobjEvo`, to support propagators with 2 times, but can be made one. **scattering.py:**; - `Evolver` replaced by the previous `Propagator`.; - matrix-matrix product are replaced by matrix-vector product in photon scattering computation.; - Do no create a `Qobj` to extract one value from an array.; This result in a speed up of about 5 times faster for even small (N=10) operators. **Changelog**; Rework propagator to use v5 solver and add a Propagator class.; Optimize scattering functions",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1792
https://github.com/qutip/qutip/pull/1793:17,Deployability,Update,Update,17,**Description**; Update changelog for 4.6.3 release. **Related issues or PRs**; - Milestone: [4.6.3](https://github.com/qutip/qutip/milestone/19). **Changelog**; Update changelog for 4.6.3 release.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1793
https://github.com/qutip/qutip/pull/1793:44,Deployability,release,release,44,**Description**; Update changelog for 4.6.3 release. **Related issues or PRs**; - Milestone: [4.6.3](https://github.com/qutip/qutip/milestone/19). **Changelog**; Update changelog for 4.6.3 release.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1793
https://github.com/qutip/qutip/pull/1793:162,Deployability,Update,Update,162,**Description**; Update changelog for 4.6.3 release. **Related issues or PRs**; - Milestone: [4.6.3](https://github.com/qutip/qutip/milestone/19). **Changelog**; Update changelog for 4.6.3 release.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1793
https://github.com/qutip/qutip/pull/1793:189,Deployability,release,release,189,**Description**; Update changelog for 4.6.3 release. **Related issues or PRs**; - Milestone: [4.6.3](https://github.com/qutip/qutip/milestone/19). **Changelog**; Update changelog for 4.6.3 release.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1793
https://github.com/qutip/qutip/pull/1794:41,Integrability,depend,depend,41,"**Description**; `countstat.py` does not depend on solver, however it has a **F** maintainability score on codeclimate.; This clean the code to make it more readable, running codeclimat locally, there are not issues left.; Also added a call using the pseudo inverse method in the test. **Changelog**; Make `countstat.py`'s code more readable.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1794
https://github.com/qutip/qutip/pull/1794:82,Modifiability,maintainab,maintainability,82,"**Description**; `countstat.py` does not depend on solver, however it has a **F** maintainability score on codeclimate.; This clean the code to make it more readable, running codeclimat locally, there are not issues left.; Also added a call using the pseudo inverse method in the test. **Changelog**; Make `countstat.py`'s code more readable.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1794
https://github.com/qutip/qutip/pull/1794:280,Testability,test,test,280,"**Description**; `countstat.py` does not depend on solver, however it has a **F** maintainability score on codeclimate.; This clean the code to make it more readable, running codeclimat locally, there are not issues left.; Also added a call using the pseudo inverse method in the test. **Changelog**; Make `countstat.py`'s code more readable.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1794
https://github.com/qutip/qutip/pull/1795:56,Deployability,release,release,56,**Description**; Prepare the 4.6.X branch for the 4.6.3 release. **Related issues or PRs**; - Milestone [4.6.3](https://github.com/qutip/qutip/milestone/19); - Changelog update: #1793. **Changelog**; Prepare the 4.6.3 release.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1795
https://github.com/qutip/qutip/pull/1795:170,Deployability,update,update,170,**Description**; Prepare the 4.6.X branch for the 4.6.3 release. **Related issues or PRs**; - Milestone [4.6.3](https://github.com/qutip/qutip/milestone/19); - Changelog update: #1793. **Changelog**; Prepare the 4.6.3 release.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1795
https://github.com/qutip/qutip/pull/1795:218,Deployability,release,release,218,**Description**; Prepare the 4.6.X branch for the 4.6.3 release. **Related issues or PRs**; - Milestone [4.6.3](https://github.com/qutip/qutip/milestone/19); - Changelog update: #1793. **Changelog**; Prepare the 4.6.3 release.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1795
https://github.com/qutip/qutip/pull/1797:92,Testability,test,tests,92,**Description**; Ignore deprecationg warnings from SciPy 1.8.0 scipy.sparse.X imports in CI tests. **Related issues or PRs**; - None. **Changelog**; Ignore deprecationg warnings from SciPy 1.8.0 scipy.sparse.X imports in CI tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1797
https://github.com/qutip/qutip/pull/1797:224,Testability,test,tests,224,**Description**; Ignore deprecationg warnings from SciPy 1.8.0 scipy.sparse.X imports in CI tests. **Related issues or PRs**; - None. **Changelog**; Ignore deprecationg warnings from SciPy 1.8.0 scipy.sparse.X imports in CI tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1797
https://github.com/qutip/qutip/issues/1800:1115,Modifiability,enhance,enhancement,1115,"Currently the `qutip.measurement.measure_observable` function always uses rank-1 projectors to determine the final state after the measurement. But for obervables with degenerate eigenvalues you might just want to project the state onto a higher-dimensional eigenspace. Eg. measuring the $Z \otimes Z$ operator on the Bell state $\ket{\psi} = 1/\sqrt{2} (\ket{00} + \ket{11})$ using qutip will return either $\ket{00}$ or $\ket{11}$ despite the state being an eigenstate of the observable.; ```; import qutip as qt; import qutip.measurement as meas; import numpy as np. #Prepare Bell state; state = qt.tensor([qt.basis(2, 0)]*2) + qt.tensor([qt.basis(2, 1)]*2); state = state.unit(). # ZZ operator; op = qt.tensor([qt.sigmaz()]*2). result_eigenvalue, final_state = meas.measure(state, op). #Check that the measurement didn't change the state (because it is an eigenstate of the measurement operator); assert np.isclose(qt.fidelity(final_state, state), 1) #fails; ```. I am aware that I can get my intended behaviour by explicity passing the list of projection operators to the `measure` function, but the following enhancement would be very useful:; An option `respect_degenerate_eigenvalues=False` in `qutip.measurement.measure_observable` that groups the eigenstate projectors based on eigenvalue degeneracy. In the above example the rank-2 projectors |00><00| + |11><11| and |01><01| + |10><10| would be used and the Bell state would be preseved during a ZZ measurement.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1800
https://github.com/qutip/qutip/issues/1800:901,Testability,assert,assert,901,"Currently the `qutip.measurement.measure_observable` function always uses rank-1 projectors to determine the final state after the measurement. But for obervables with degenerate eigenvalues you might just want to project the state onto a higher-dimensional eigenspace. Eg. measuring the $Z \otimes Z$ operator on the Bell state $\ket{\psi} = 1/\sqrt{2} (\ket{00} + \ket{11})$ using qutip will return either $\ket{00}$ or $\ket{11}$ despite the state being an eigenstate of the observable.; ```; import qutip as qt; import qutip.measurement as meas; import numpy as np. #Prepare Bell state; state = qt.tensor([qt.basis(2, 0)]*2) + qt.tensor([qt.basis(2, 1)]*2); state = state.unit(). # ZZ operator; op = qt.tensor([qt.sigmaz()]*2). result_eigenvalue, final_state = meas.measure(state, op). #Check that the measurement didn't change the state (because it is an eigenstate of the measurement operator); assert np.isclose(qt.fidelity(final_state, state), 1) #fails; ```. I am aware that I can get my intended behaviour by explicity passing the list of projection operators to the `measure` function, but the following enhancement would be very useful:; An option `respect_degenerate_eigenvalues=False` in `qutip.measurement.measure_observable` that groups the eigenstate projectors based on eigenvalue degeneracy. In the above example the rank-2 projectors |00><00| + |11><11| and |01><01| + |10><10| would be used and the Bell state would be preseved during a ZZ measurement.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1800
https://github.com/qutip/qutip/issues/1801:125,Integrability,depend,dependent,125,"### Describe the Issue!. I wanted to ask whether there was scope to include the functionality to return matrices in the time dependent functions of time dependent hamiltonians, rather than just scalar values?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1801
https://github.com/qutip/qutip/issues/1801:153,Integrability,depend,dependent,153,"### Describe the Issue!. I wanted to ask whether there was scope to include the functionality to return matrices in the time dependent functions of time dependent hamiltonians, rather than just scalar values?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1801
https://github.com/qutip/qutip/issues/1803:745,Availability,error,error,745,"### Describe the Issue!. I'm having issues with running a quantum circuit that consists of 4-level qudits. I want to define my custom 2-qudit gate. I have written a gate function that returns the following object:. `return Qobj(mat, dims=[[4,4],[4,4]], shape = [16, 16], type='oper')`. Since this is a gate acting on two 4-level qudits, I think that these dims are correct. I then create an initial ket state for my circuit, let's say with three qudits, and create the circuit object:. ```; zero_state=tensor(basis(4, 0),basis(4, 0),basis(4, 0)); qc = QubitCircuit(N=3, dims=zero_state.dims); ```. the dims are: [[4, 4, 4], [1, 1, 1]]. when I try to add a gate between qudits 0 and 1:. `qc.add_gate(""Ucomm"", targets=[0,1])`. I get the following error:. `ValueError: The operator dims [4, 4] do not match the target dims [[4, 4, 4], [1, 1, 1]].`. If I instead try to add a gate between qudits 1 and 2:; `qc.add_gate(""Ucomm"", targets=[1,2])`. I get:. ```; targ_dims = [dims[t] for t in targets]; IndexError: list index out of range; ```. Do I understand correctly how dims work in Qutip? Or is this an error? The above example works perfectly fine for qubits, replacing 4->2 in the above.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1803
https://github.com/qutip/qutip/issues/1803:1100,Availability,error,error,1100,"### Describe the Issue!. I'm having issues with running a quantum circuit that consists of 4-level qudits. I want to define my custom 2-qudit gate. I have written a gate function that returns the following object:. `return Qobj(mat, dims=[[4,4],[4,4]], shape = [16, 16], type='oper')`. Since this is a gate acting on two 4-level qudits, I think that these dims are correct. I then create an initial ket state for my circuit, let's say with three qudits, and create the circuit object:. ```; zero_state=tensor(basis(4, 0),basis(4, 0),basis(4, 0)); qc = QubitCircuit(N=3, dims=zero_state.dims); ```. the dims are: [[4, 4, 4], [1, 1, 1]]. when I try to add a gate between qudits 0 and 1:. `qc.add_gate(""Ucomm"", targets=[0,1])`. I get the following error:. `ValueError: The operator dims [4, 4] do not match the target dims [[4, 4, 4], [1, 1, 1]].`. If I instead try to add a gate between qudits 1 and 2:; `qc.add_gate(""Ucomm"", targets=[1,2])`. I get:. ```; targ_dims = [dims[t] for t in targets]; IndexError: list index out of range; ```. Do I understand correctly how dims work in Qutip? Or is this an error? The above example works perfectly fine for qubits, replacing 4->2 in the above.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1803
https://github.com/qutip/qutip/issues/1804:2220,Testability,test,test,2220,"igmax(), qt.sigmay(), qt.sigmaz()]; options = qt.solver.options.SolverResultsOptions(store_states=True). solver = MeSolver(H, options=options); result = solver.run(psi0, t, e_ops=e_ops); ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); /tmp/ipykernel_9527/298290075.py in <module>; 6 options = qt.solver.options.SolverResultsOptions(store_states=True); 7 ; ----> 8 solver = MeSolver(H, options=options); 9 result = solver.run(psi0, t, e_ops=e_ops). ~/Documents/git/qutip/qutip5-dev/qutip/solver/mesolve.py in __init__(self, H, c_ops, options); 171 rhs += sum(c_op if c_op.issuper else lindblad_dissipator(c_op); 172 for c_op in c_ops); --> 173 super().__init__(rhs, options=options); 174 ; 175 self.stats['solver'] = ""Master Equation Evolution"". ~/Documents/git/qutip/qutip5-dev/qutip/solver/solver_base.py in __init__(self, rhs, options); 55 else:; 56 TypeError(""The rhs must be a QobjEvo""); ---> 57 self.options = options; 58 self.stats = {""preparation time"": 0}; 59 self._state_metadata = {}. ~/Documents/git/qutip/qutip5-dev/qutip/solver/solver_base.py in options(self, new); 248 new = self.optionsclass(**new); 249 elif not isinstance(new, self.optionsclass):; --> 250 raise TypeError(""options must be an instance of"" +; 251 str(self.optionsclass)); 252 self._options = new. TypeError: options must be an instance of<class 'qutip.solver.options.SolverOptions'>; ```. ### Expected Behaviour. I was expecting it work. ### Your Environment. ```shell; QuTiP Version: 5.0.0.dev0+08b5634 # Im using pr 1644; Numpy Version: 1.19.5; Scipy Version: 1.7.0; Cython Version: 0.29.24; Matplotlib Version: 3.3.0; Python Version: 3.9.7; Number of CPUs: 4; BLAS Info: OPENBLAS; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. I am using PR #1644 to test how it works with qutip-tensorflow.; I am also aware that `MeSolver(H, options = {""store_states"" : True})` works fine.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1804
https://github.com/qutip/qutip/pull/1805:670,Availability,error,error,670,"**Checklist**; - [x] PEP8. **Description**; The behaviour of the `liouvillian` seemed to be wrong. For a `TfTensor` as input it returned a `Dense` as oupu. This is mainly because the identity matrix created within the function was not a `TfTensor`. . _Testing The tests that I included where would pass without the fix!_ . Reproducing this behaviour within QuTiP seems to be challenging. This is because of how things are automatically converted from one data type to another. In particular, `liouvillian` worked as expected for both `Dense` and `CSR` but not for `TfTensor`. However, since `TfTensor` is not part of qutip I am not sure how to make it to reproduce this error. . The issue seems in fact to be related to an inconsistency in how data is automatically transformed. The following code summarises the problem:; ```; H = qt.rand_herm(5); csr = H.to('csr').data; dense = H.to('dense').data; tftensor = H.to('tftensor').data. qutip.data.kron(csr, dense) # output: dense; qutip.data.kron(csr, csr) # output: csr; qutip.data.kron(csr, tftensor) # output: dense?? this is what causes problems!; qutip.data.kron(tftensor, tftensor) # output: tftensor; ```. **Changelog**; Fixed liouvillian to not generate dense output when used with TfTensor.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1805
https://github.com/qutip/qutip/pull/1805:264,Testability,test,tests,264,"**Checklist**; - [x] PEP8. **Description**; The behaviour of the `liouvillian` seemed to be wrong. For a `TfTensor` as input it returned a `Dense` as oupu. This is mainly because the identity matrix created within the function was not a `TfTensor`. . _Testing The tests that I included where would pass without the fix!_ . Reproducing this behaviour within QuTiP seems to be challenging. This is because of how things are automatically converted from one data type to another. In particular, `liouvillian` worked as expected for both `Dense` and `CSR` but not for `TfTensor`. However, since `TfTensor` is not part of qutip I am not sure how to make it to reproduce this error. . The issue seems in fact to be related to an inconsistency in how data is automatically transformed. The following code summarises the problem:; ```; H = qt.rand_herm(5); csr = H.to('csr').data; dense = H.to('dense').data; tftensor = H.to('tftensor').data. qutip.data.kron(csr, dense) # output: dense; qutip.data.kron(csr, csr) # output: csr; qutip.data.kron(csr, tftensor) # output: dense?? this is what causes problems!; qutip.data.kron(tftensor, tftensor) # output: tftensor; ```. **Changelog**; Fixed liouvillian to not generate dense output when used with TfTensor.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1805
https://github.com/qutip/qutip/issues/1806:21,Energy Efficiency,Power,Power,21,"### Bug Description. Power spectrum of the resonator-qubit (2-level system) system does not show two peaks based on the state of the qubit. Qubit is prepared either in the ground or excited state before the density matrix equation of the coupled system is solved and then the power spectrum is computed off of steady state solution. ### Code to Reproduce the Bug. ```shell; import numpy as np; from matplotlib import pyplot; import qutip. N = 4 # number of cavity fock states; wc = wa = 1.0 * 2 * np.pi # cavity and atom frequency; g = 0.1 * 2 * np.pi # coupling strength; kappa = 0.75 # cavity dissipation rate; gamma = 0.25 # atom dissipation rate. # Jaynes-Cummings Hamiltonian; a = qutip.tensor(qutip.destroy(N), qutip.qeye(2)); sm = qutip.tensor(qutip.qeye(N), qutip.destroy(2)); H = wc*a.dag()*a + wa*sm.dag()*sm + g*(a.dag()*sm + a*sm.dag()). tlist = np.linspace(0, 100, 5000); corr = qutip.correlation_2op_1t(H, None, tlist, c_ops, a.dag(), a); wlist1, spec1 = qutip.spectrum_correlation_fft(tlist, corr); ```. ### Code Output. _No response_. ### Expected Behaviour. The power spectrum does show vacuum Rabi splitting, which is fine. However, if the qubit is prepared in the ground state or the excited state, the spectrum does not shift based on the state of the qubit. ### Your Environment. ```shell; qutip v 4.6; python v 3.9; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1806
https://github.com/qutip/qutip/issues/1806:276,Energy Efficiency,power,power,276,"### Bug Description. Power spectrum of the resonator-qubit (2-level system) system does not show two peaks based on the state of the qubit. Qubit is prepared either in the ground or excited state before the density matrix equation of the coupled system is solved and then the power spectrum is computed off of steady state solution. ### Code to Reproduce the Bug. ```shell; import numpy as np; from matplotlib import pyplot; import qutip. N = 4 # number of cavity fock states; wc = wa = 1.0 * 2 * np.pi # cavity and atom frequency; g = 0.1 * 2 * np.pi # coupling strength; kappa = 0.75 # cavity dissipation rate; gamma = 0.25 # atom dissipation rate. # Jaynes-Cummings Hamiltonian; a = qutip.tensor(qutip.destroy(N), qutip.qeye(2)); sm = qutip.tensor(qutip.qeye(N), qutip.destroy(2)); H = wc*a.dag()*a + wa*sm.dag()*sm + g*(a.dag()*sm + a*sm.dag()). tlist = np.linspace(0, 100, 5000); corr = qutip.correlation_2op_1t(H, None, tlist, c_ops, a.dag(), a); wlist1, spec1 = qutip.spectrum_correlation_fft(tlist, corr); ```. ### Code Output. _No response_. ### Expected Behaviour. The power spectrum does show vacuum Rabi splitting, which is fine. However, if the qubit is prepared in the ground state or the excited state, the spectrum does not shift based on the state of the qubit. ### Your Environment. ```shell; qutip v 4.6; python v 3.9; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1806
https://github.com/qutip/qutip/issues/1806:1079,Energy Efficiency,power,power,1079,"### Bug Description. Power spectrum of the resonator-qubit (2-level system) system does not show two peaks based on the state of the qubit. Qubit is prepared either in the ground or excited state before the density matrix equation of the coupled system is solved and then the power spectrum is computed off of steady state solution. ### Code to Reproduce the Bug. ```shell; import numpy as np; from matplotlib import pyplot; import qutip. N = 4 # number of cavity fock states; wc = wa = 1.0 * 2 * np.pi # cavity and atom frequency; g = 0.1 * 2 * np.pi # coupling strength; kappa = 0.75 # cavity dissipation rate; gamma = 0.25 # atom dissipation rate. # Jaynes-Cummings Hamiltonian; a = qutip.tensor(qutip.destroy(N), qutip.qeye(2)); sm = qutip.tensor(qutip.qeye(N), qutip.destroy(2)); H = wc*a.dag()*a + wa*sm.dag()*sm + g*(a.dag()*sm + a*sm.dag()). tlist = np.linspace(0, 100, 5000); corr = qutip.correlation_2op_1t(H, None, tlist, c_ops, a.dag(), a); wlist1, spec1 = qutip.spectrum_correlation_fft(tlist, corr); ```. ### Code Output. _No response_. ### Expected Behaviour. The power spectrum does show vacuum Rabi splitting, which is fine. However, if the qubit is prepared in the ground state or the excited state, the spectrum does not shift based on the state of the qubit. ### Your Environment. ```shell; qutip v 4.6; python v 3.9; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1806
https://github.com/qutip/qutip/issues/1806:554,Modifiability,coupling,coupling,554,"### Bug Description. Power spectrum of the resonator-qubit (2-level system) system does not show two peaks based on the state of the qubit. Qubit is prepared either in the ground or excited state before the density matrix equation of the coupled system is solved and then the power spectrum is computed off of steady state solution. ### Code to Reproduce the Bug. ```shell; import numpy as np; from matplotlib import pyplot; import qutip. N = 4 # number of cavity fock states; wc = wa = 1.0 * 2 * np.pi # cavity and atom frequency; g = 0.1 * 2 * np.pi # coupling strength; kappa = 0.75 # cavity dissipation rate; gamma = 0.25 # atom dissipation rate. # Jaynes-Cummings Hamiltonian; a = qutip.tensor(qutip.destroy(N), qutip.qeye(2)); sm = qutip.tensor(qutip.qeye(N), qutip.destroy(2)); H = wc*a.dag()*a + wa*sm.dag()*sm + g*(a.dag()*sm + a*sm.dag()). tlist = np.linspace(0, 100, 5000); corr = qutip.correlation_2op_1t(H, None, tlist, c_ops, a.dag(), a); wlist1, spec1 = qutip.spectrum_correlation_fft(tlist, corr); ```. ### Code Output. _No response_. ### Expected Behaviour. The power spectrum does show vacuum Rabi splitting, which is fine. However, if the qubit is prepared in the ground state or the excited state, the spectrum does not shift based on the state of the qubit. ### Your Environment. ```shell; qutip v 4.6; python v 3.9; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1806
https://github.com/qutip/qutip/issues/1808:2372,Deployability,Install,Installed,2372,"e provided by M. Pechal. Issue was found in qutip version 4.6.2 and 4.6.3. ### Code to Reproduce the Bug. ```shell; # Qubit evolving only under energy relaxation (with H = 0 and the only collapse operator being qt.destroy(2)).; # The relaxation rate is time-dependent.; #; # A simple calculation shows that <ad(t2).a(t1)> = exp( - ( int_0^t1 Gamma(t) dt + int_0^t2 Gamma(t) dt ) / 2 ). H = 0.0 * qt.identity(2); psi0 = qt.basis(2, 1); tlist = np.linspace(0, 1, 101); def Gamma(t):; return 8.0 * t; cops = [[qt.destroy(2), lambda t, args: np.sqrt(Gamma(t))]]; a = qt.destroy(2); ad = a.dag(). testcorr = qt.correlation_2op_2t(H, psi0, tlist, tlist, cops, ad, a); #testcorrM = qt.correlation_2op_2t_MPAF(H, psi0, tlist, tlist, cops, ad, a). i1 = 20; i2 = 50; print('qt.correlation_2op_2t:'); print('<ad(t2).a(t1)> =',testcorr[i1, i2 - i1]). #print('qt.correlation_2op_2t MPAF:'); #print('<ad(t2).a(t1)> =',testcorrM[i1, i2 - i1]). print('------'); print('""manual"" calculation using mesolve:'); rhom = qt.mesolve(H, psi0, np.linspace(0, tlist[i1], 101), cops).states[-1]; print('<ad(t2).a(t1)> =',(qt.mesolve(H, a*rhom, np.linspace(tlist[i1], tlist[i2], 101), cops).states[-1] * ad).tr()). print('------'); print('theory:'); t1 = tlist[i1]; t2 = tlist[i2]; print('<ad(t2).a(t1)> =', np.exp(-(4.0*t1**2 + 4.0*t2**2)/2)); ```. ### Code Output. ```shell; qt.correlation_2op_2t:; <ad(t2).a(t1)> = (0.7117768902828536+0j); ------; ""manual"" calculation using mesolve:; <ad(t2).a(t1)> = 0.5598976820725802; ------; theory:; <ad(t2).a(t1)> = 0.559898366565402; ```. ### Expected Behaviour. qt.correlation_2op_2t should reproduce numbers from theory and 'manual' calculations. ### Your Environment. ```shell; QuTiP Version: 4.6.3; Numpy Version: 1.20.3; Scipy Version: 1.7.1; Cython Version: 0.29.24; Matplotlib Version: 3.4.2; Python Version: 3.8.10; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1808
https://github.com/qutip/qutip/issues/1808:629,Energy Efficiency,energy,energy,629,"### Bug Description. The correlation 2op_2t does not give correct results when using time-dependent hamiltonians and collapse operators. It seems that this could be solved by changing one line of the code inside correlatation.py, in def _correlation_me_2t:. from:; H_shifted, c_op * rho * a_op, taulist, c_ops_shifted, . to:; H_shifted, c_op * rho * a_op, taulist + tlist[t_idx], c_ops_shifted,. The accompanying code demonstrating the issue and help finding the issue and solution were provided by M. Pechal. Issue was found in qutip version 4.6.2 and 4.6.3. ### Code to Reproduce the Bug. ```shell; # Qubit evolving only under energy relaxation (with H = 0 and the only collapse operator being qt.destroy(2)).; # The relaxation rate is time-dependent.; #; # A simple calculation shows that <ad(t2).a(t1)> = exp( - ( int_0^t1 Gamma(t) dt + int_0^t2 Gamma(t) dt ) / 2 ). H = 0.0 * qt.identity(2); psi0 = qt.basis(2, 1); tlist = np.linspace(0, 1, 101); def Gamma(t):; return 8.0 * t; cops = [[qt.destroy(2), lambda t, args: np.sqrt(Gamma(t))]]; a = qt.destroy(2); ad = a.dag(). testcorr = qt.correlation_2op_2t(H, psi0, tlist, tlist, cops, ad, a); #testcorrM = qt.correlation_2op_2t_MPAF(H, psi0, tlist, tlist, cops, ad, a). i1 = 20; i2 = 50; print('qt.correlation_2op_2t:'); print('<ad(t2).a(t1)> =',testcorr[i1, i2 - i1]). #print('qt.correlation_2op_2t MPAF:'); #print('<ad(t2).a(t1)> =',testcorrM[i1, i2 - i1]). print('------'); print('""manual"" calculation using mesolve:'); rhom = qt.mesolve(H, psi0, np.linspace(0, tlist[i1], 101), cops).states[-1]; print('<ad(t2).a(t1)> =',(qt.mesolve(H, a*rhom, np.linspace(tlist[i1], tlist[i2], 101), cops).states[-1] * ad).tr()). print('------'); print('theory:'); t1 = tlist[i1]; t2 = tlist[i2]; print('<ad(t2).a(t1)> =', np.exp(-(4.0*t1**2 + 4.0*t2**2)/2)); ```. ### Code Output. ```shell; qt.correlation_2op_2t:; <ad(t2).a(t1)> = (0.7117768902828536+0j); ------; ""manual"" calculation using mesolve:; <ad(t2).a(t1)> = 0.5598976820725802; ------; theory:; <a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1808
https://github.com/qutip/qutip/issues/1808:90,Integrability,depend,dependent,90,"### Bug Description. The correlation 2op_2t does not give correct results when using time-dependent hamiltonians and collapse operators. It seems that this could be solved by changing one line of the code inside correlatation.py, in def _correlation_me_2t:. from:; H_shifted, c_op * rho * a_op, taulist, c_ops_shifted, . to:; H_shifted, c_op * rho * a_op, taulist + tlist[t_idx], c_ops_shifted,. The accompanying code demonstrating the issue and help finding the issue and solution were provided by M. Pechal. Issue was found in qutip version 4.6.2 and 4.6.3. ### Code to Reproduce the Bug. ```shell; # Qubit evolving only under energy relaxation (with H = 0 and the only collapse operator being qt.destroy(2)).; # The relaxation rate is time-dependent.; #; # A simple calculation shows that <ad(t2).a(t1)> = exp( - ( int_0^t1 Gamma(t) dt + int_0^t2 Gamma(t) dt ) / 2 ). H = 0.0 * qt.identity(2); psi0 = qt.basis(2, 1); tlist = np.linspace(0, 1, 101); def Gamma(t):; return 8.0 * t; cops = [[qt.destroy(2), lambda t, args: np.sqrt(Gamma(t))]]; a = qt.destroy(2); ad = a.dag(). testcorr = qt.correlation_2op_2t(H, psi0, tlist, tlist, cops, ad, a); #testcorrM = qt.correlation_2op_2t_MPAF(H, psi0, tlist, tlist, cops, ad, a). i1 = 20; i2 = 50; print('qt.correlation_2op_2t:'); print('<ad(t2).a(t1)> =',testcorr[i1, i2 - i1]). #print('qt.correlation_2op_2t MPAF:'); #print('<ad(t2).a(t1)> =',testcorrM[i1, i2 - i1]). print('------'); print('""manual"" calculation using mesolve:'); rhom = qt.mesolve(H, psi0, np.linspace(0, tlist[i1], 101), cops).states[-1]; print('<ad(t2).a(t1)> =',(qt.mesolve(H, a*rhom, np.linspace(tlist[i1], tlist[i2], 101), cops).states[-1] * ad).tr()). print('------'); print('theory:'); t1 = tlist[i1]; t2 = tlist[i2]; print('<ad(t2).a(t1)> =', np.exp(-(4.0*t1**2 + 4.0*t2**2)/2)); ```. ### Code Output. ```shell; qt.correlation_2op_2t:; <ad(t2).a(t1)> = (0.7117768902828536+0j); ------; ""manual"" calculation using mesolve:; <ad(t2).a(t1)> = 0.5598976820725802; ------; theory:; <a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1808
https://github.com/qutip/qutip/issues/1808:743,Integrability,depend,dependent,743,"### Bug Description. The correlation 2op_2t does not give correct results when using time-dependent hamiltonians and collapse operators. It seems that this could be solved by changing one line of the code inside correlatation.py, in def _correlation_me_2t:. from:; H_shifted, c_op * rho * a_op, taulist, c_ops_shifted, . to:; H_shifted, c_op * rho * a_op, taulist + tlist[t_idx], c_ops_shifted,. The accompanying code demonstrating the issue and help finding the issue and solution were provided by M. Pechal. Issue was found in qutip version 4.6.2 and 4.6.3. ### Code to Reproduce the Bug. ```shell; # Qubit evolving only under energy relaxation (with H = 0 and the only collapse operator being qt.destroy(2)).; # The relaxation rate is time-dependent.; #; # A simple calculation shows that <ad(t2).a(t1)> = exp( - ( int_0^t1 Gamma(t) dt + int_0^t2 Gamma(t) dt ) / 2 ). H = 0.0 * qt.identity(2); psi0 = qt.basis(2, 1); tlist = np.linspace(0, 1, 101); def Gamma(t):; return 8.0 * t; cops = [[qt.destroy(2), lambda t, args: np.sqrt(Gamma(t))]]; a = qt.destroy(2); ad = a.dag(). testcorr = qt.correlation_2op_2t(H, psi0, tlist, tlist, cops, ad, a); #testcorrM = qt.correlation_2op_2t_MPAF(H, psi0, tlist, tlist, cops, ad, a). i1 = 20; i2 = 50; print('qt.correlation_2op_2t:'); print('<ad(t2).a(t1)> =',testcorr[i1, i2 - i1]). #print('qt.correlation_2op_2t MPAF:'); #print('<ad(t2).a(t1)> =',testcorrM[i1, i2 - i1]). print('------'); print('""manual"" calculation using mesolve:'); rhom = qt.mesolve(H, psi0, np.linspace(0, tlist[i1], 101), cops).states[-1]; print('<ad(t2).a(t1)> =',(qt.mesolve(H, a*rhom, np.linspace(tlist[i1], tlist[i2], 101), cops).states[-1] * ad).tr()). print('------'); print('theory:'); t1 = tlist[i1]; t2 = tlist[i2]; print('<ad(t2).a(t1)> =', np.exp(-(4.0*t1**2 + 4.0*t2**2)/2)); ```. ### Code Output. ```shell; qt.correlation_2op_2t:; <ad(t2).a(t1)> = (0.7117768902828536+0j); ------; ""manual"" calculation using mesolve:; <ad(t2).a(t1)> = 0.5598976820725802; ------; theory:; <a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1808
https://github.com/qutip/qutip/issues/1808:1077,Testability,test,testcorr,1077,"g time-dependent hamiltonians and collapse operators. It seems that this could be solved by changing one line of the code inside correlatation.py, in def _correlation_me_2t:. from:; H_shifted, c_op * rho * a_op, taulist, c_ops_shifted, . to:; H_shifted, c_op * rho * a_op, taulist + tlist[t_idx], c_ops_shifted,. The accompanying code demonstrating the issue and help finding the issue and solution were provided by M. Pechal. Issue was found in qutip version 4.6.2 and 4.6.3. ### Code to Reproduce the Bug. ```shell; # Qubit evolving only under energy relaxation (with H = 0 and the only collapse operator being qt.destroy(2)).; # The relaxation rate is time-dependent.; #; # A simple calculation shows that <ad(t2).a(t1)> = exp( - ( int_0^t1 Gamma(t) dt + int_0^t2 Gamma(t) dt ) / 2 ). H = 0.0 * qt.identity(2); psi0 = qt.basis(2, 1); tlist = np.linspace(0, 1, 101); def Gamma(t):; return 8.0 * t; cops = [[qt.destroy(2), lambda t, args: np.sqrt(Gamma(t))]]; a = qt.destroy(2); ad = a.dag(). testcorr = qt.correlation_2op_2t(H, psi0, tlist, tlist, cops, ad, a); #testcorrM = qt.correlation_2op_2t_MPAF(H, psi0, tlist, tlist, cops, ad, a). i1 = 20; i2 = 50; print('qt.correlation_2op_2t:'); print('<ad(t2).a(t1)> =',testcorr[i1, i2 - i1]). #print('qt.correlation_2op_2t MPAF:'); #print('<ad(t2).a(t1)> =',testcorrM[i1, i2 - i1]). print('------'); print('""manual"" calculation using mesolve:'); rhom = qt.mesolve(H, psi0, np.linspace(0, tlist[i1], 101), cops).states[-1]; print('<ad(t2).a(t1)> =',(qt.mesolve(H, a*rhom, np.linspace(tlist[i1], tlist[i2], 101), cops).states[-1] * ad).tr()). print('------'); print('theory:'); t1 = tlist[i1]; t2 = tlist[i2]; print('<ad(t2).a(t1)> =', np.exp(-(4.0*t1**2 + 4.0*t2**2)/2)); ```. ### Code Output. ```shell; qt.correlation_2op_2t:; <ad(t2).a(t1)> = (0.7117768902828536+0j); ------; ""manual"" calculation using mesolve:; <ad(t2).a(t1)> = 0.5598976820725802; ------; theory:; <ad(t2).a(t1)> = 0.559898366565402; ```. ### Expected Behaviour. qt.correlation_2op_2",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1808
https://github.com/qutip/qutip/issues/1808:1148,Testability,test,testcorrM,1148,"perators. It seems that this could be solved by changing one line of the code inside correlatation.py, in def _correlation_me_2t:. from:; H_shifted, c_op * rho * a_op, taulist, c_ops_shifted, . to:; H_shifted, c_op * rho * a_op, taulist + tlist[t_idx], c_ops_shifted,. The accompanying code demonstrating the issue and help finding the issue and solution were provided by M. Pechal. Issue was found in qutip version 4.6.2 and 4.6.3. ### Code to Reproduce the Bug. ```shell; # Qubit evolving only under energy relaxation (with H = 0 and the only collapse operator being qt.destroy(2)).; # The relaxation rate is time-dependent.; #; # A simple calculation shows that <ad(t2).a(t1)> = exp( - ( int_0^t1 Gamma(t) dt + int_0^t2 Gamma(t) dt ) / 2 ). H = 0.0 * qt.identity(2); psi0 = qt.basis(2, 1); tlist = np.linspace(0, 1, 101); def Gamma(t):; return 8.0 * t; cops = [[qt.destroy(2), lambda t, args: np.sqrt(Gamma(t))]]; a = qt.destroy(2); ad = a.dag(). testcorr = qt.correlation_2op_2t(H, psi0, tlist, tlist, cops, ad, a); #testcorrM = qt.correlation_2op_2t_MPAF(H, psi0, tlist, tlist, cops, ad, a). i1 = 20; i2 = 50; print('qt.correlation_2op_2t:'); print('<ad(t2).a(t1)> =',testcorr[i1, i2 - i1]). #print('qt.correlation_2op_2t MPAF:'); #print('<ad(t2).a(t1)> =',testcorrM[i1, i2 - i1]). print('------'); print('""manual"" calculation using mesolve:'); rhom = qt.mesolve(H, psi0, np.linspace(0, tlist[i1], 101), cops).states[-1]; print('<ad(t2).a(t1)> =',(qt.mesolve(H, a*rhom, np.linspace(tlist[i1], tlist[i2], 101), cops).states[-1] * ad).tr()). print('------'); print('theory:'); t1 = tlist[i1]; t2 = tlist[i2]; print('<ad(t2).a(t1)> =', np.exp(-(4.0*t1**2 + 4.0*t2**2)/2)); ```. ### Code Output. ```shell; qt.correlation_2op_2t:; <ad(t2).a(t1)> = (0.7117768902828536+0j); ------; ""manual"" calculation using mesolve:; <ad(t2).a(t1)> = 0.5598976820725802; ------; theory:; <ad(t2).a(t1)> = 0.559898366565402; ```. ### Expected Behaviour. qt.correlation_2op_2t should reproduce numbers from theory and ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1808
https://github.com/qutip/qutip/issues/1808:1300,Testability,test,testcorr,1300,"ops_shifted, . to:; H_shifted, c_op * rho * a_op, taulist + tlist[t_idx], c_ops_shifted,. The accompanying code demonstrating the issue and help finding the issue and solution were provided by M. Pechal. Issue was found in qutip version 4.6.2 and 4.6.3. ### Code to Reproduce the Bug. ```shell; # Qubit evolving only under energy relaxation (with H = 0 and the only collapse operator being qt.destroy(2)).; # The relaxation rate is time-dependent.; #; # A simple calculation shows that <ad(t2).a(t1)> = exp( - ( int_0^t1 Gamma(t) dt + int_0^t2 Gamma(t) dt ) / 2 ). H = 0.0 * qt.identity(2); psi0 = qt.basis(2, 1); tlist = np.linspace(0, 1, 101); def Gamma(t):; return 8.0 * t; cops = [[qt.destroy(2), lambda t, args: np.sqrt(Gamma(t))]]; a = qt.destroy(2); ad = a.dag(). testcorr = qt.correlation_2op_2t(H, psi0, tlist, tlist, cops, ad, a); #testcorrM = qt.correlation_2op_2t_MPAF(H, psi0, tlist, tlist, cops, ad, a). i1 = 20; i2 = 50; print('qt.correlation_2op_2t:'); print('<ad(t2).a(t1)> =',testcorr[i1, i2 - i1]). #print('qt.correlation_2op_2t MPAF:'); #print('<ad(t2).a(t1)> =',testcorrM[i1, i2 - i1]). print('------'); print('""manual"" calculation using mesolve:'); rhom = qt.mesolve(H, psi0, np.linspace(0, tlist[i1], 101), cops).states[-1]; print('<ad(t2).a(t1)> =',(qt.mesolve(H, a*rhom, np.linspace(tlist[i1], tlist[i2], 101), cops).states[-1] * ad).tr()). print('------'); print('theory:'); t1 = tlist[i1]; t2 = tlist[i2]; print('<ad(t2).a(t1)> =', np.exp(-(4.0*t1**2 + 4.0*t2**2)/2)); ```. ### Code Output. ```shell; qt.correlation_2op_2t:; <ad(t2).a(t1)> = (0.7117768902828536+0j); ------; ""manual"" calculation using mesolve:; <ad(t2).a(t1)> = 0.5598976820725802; ------; theory:; <ad(t2).a(t1)> = 0.559898366565402; ```. ### Expected Behaviour. qt.correlation_2op_2t should reproduce numbers from theory and 'manual' calculations. ### Your Environment. ```shell; QuTiP Version: 4.6.3; Numpy Version: 1.20.3; Scipy Version: 1.7.1; Cython Version: 0.29.24; Matplotlib Version: 3.4.2; Python",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1808
https://github.com/qutip/qutip/issues/1808:1389,Testability,test,testcorrM,1389,"The accompanying code demonstrating the issue and help finding the issue and solution were provided by M. Pechal. Issue was found in qutip version 4.6.2 and 4.6.3. ### Code to Reproduce the Bug. ```shell; # Qubit evolving only under energy relaxation (with H = 0 and the only collapse operator being qt.destroy(2)).; # The relaxation rate is time-dependent.; #; # A simple calculation shows that <ad(t2).a(t1)> = exp( - ( int_0^t1 Gamma(t) dt + int_0^t2 Gamma(t) dt ) / 2 ). H = 0.0 * qt.identity(2); psi0 = qt.basis(2, 1); tlist = np.linspace(0, 1, 101); def Gamma(t):; return 8.0 * t; cops = [[qt.destroy(2), lambda t, args: np.sqrt(Gamma(t))]]; a = qt.destroy(2); ad = a.dag(). testcorr = qt.correlation_2op_2t(H, psi0, tlist, tlist, cops, ad, a); #testcorrM = qt.correlation_2op_2t_MPAF(H, psi0, tlist, tlist, cops, ad, a). i1 = 20; i2 = 50; print('qt.correlation_2op_2t:'); print('<ad(t2).a(t1)> =',testcorr[i1, i2 - i1]). #print('qt.correlation_2op_2t MPAF:'); #print('<ad(t2).a(t1)> =',testcorrM[i1, i2 - i1]). print('------'); print('""manual"" calculation using mesolve:'); rhom = qt.mesolve(H, psi0, np.linspace(0, tlist[i1], 101), cops).states[-1]; print('<ad(t2).a(t1)> =',(qt.mesolve(H, a*rhom, np.linspace(tlist[i1], tlist[i2], 101), cops).states[-1] * ad).tr()). print('------'); print('theory:'); t1 = tlist[i1]; t2 = tlist[i2]; print('<ad(t2).a(t1)> =', np.exp(-(4.0*t1**2 + 4.0*t2**2)/2)); ```. ### Code Output. ```shell; qt.correlation_2op_2t:; <ad(t2).a(t1)> = (0.7117768902828536+0j); ------; ""manual"" calculation using mesolve:; <ad(t2).a(t1)> = 0.5598976820725802; ------; theory:; <ad(t2).a(t1)> = 0.559898366565402; ```. ### Expected Behaviour. qt.correlation_2op_2t should reproduce numbers from theory and 'manual' calculations. ### Your Environment. ```shell; QuTiP Version: 4.6.3; Numpy Version: 1.20.3; Scipy Version: 1.7.1; Cython Version: 0.29.24; Matplotlib Version: 3.4.2; Python Version: 3.8.10; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1808
https://github.com/qutip/qutip/issues/1808:762,Usability,simpl,simple,762,"### Bug Description. The correlation 2op_2t does not give correct results when using time-dependent hamiltonians and collapse operators. It seems that this could be solved by changing one line of the code inside correlatation.py, in def _correlation_me_2t:. from:; H_shifted, c_op * rho * a_op, taulist, c_ops_shifted, . to:; H_shifted, c_op * rho * a_op, taulist + tlist[t_idx], c_ops_shifted,. The accompanying code demonstrating the issue and help finding the issue and solution were provided by M. Pechal. Issue was found in qutip version 4.6.2 and 4.6.3. ### Code to Reproduce the Bug. ```shell; # Qubit evolving only under energy relaxation (with H = 0 and the only collapse operator being qt.destroy(2)).; # The relaxation rate is time-dependent.; #; # A simple calculation shows that <ad(t2).a(t1)> = exp( - ( int_0^t1 Gamma(t) dt + int_0^t2 Gamma(t) dt ) / 2 ). H = 0.0 * qt.identity(2); psi0 = qt.basis(2, 1); tlist = np.linspace(0, 1, 101); def Gamma(t):; return 8.0 * t; cops = [[qt.destroy(2), lambda t, args: np.sqrt(Gamma(t))]]; a = qt.destroy(2); ad = a.dag(). testcorr = qt.correlation_2op_2t(H, psi0, tlist, tlist, cops, ad, a); #testcorrM = qt.correlation_2op_2t_MPAF(H, psi0, tlist, tlist, cops, ad, a). i1 = 20; i2 = 50; print('qt.correlation_2op_2t:'); print('<ad(t2).a(t1)> =',testcorr[i1, i2 - i1]). #print('qt.correlation_2op_2t MPAF:'); #print('<ad(t2).a(t1)> =',testcorrM[i1, i2 - i1]). print('------'); print('""manual"" calculation using mesolve:'); rhom = qt.mesolve(H, psi0, np.linspace(0, tlist[i1], 101), cops).states[-1]; print('<ad(t2).a(t1)> =',(qt.mesolve(H, a*rhom, np.linspace(tlist[i1], tlist[i2], 101), cops).states[-1] * ad).tr()). print('------'); print('theory:'); t1 = tlist[i1]; t2 = tlist[i2]; print('<ad(t2).a(t1)> =', np.exp(-(4.0*t1**2 + 4.0*t2**2)/2)); ```. ### Code Output. ```shell; qt.correlation_2op_2t:; <ad(t2).a(t1)> = (0.7117768902828536+0j); ------; ""manual"" calculation using mesolve:; <ad(t2).a(t1)> = 0.5598976820725802; ------; theory:; <a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1808
https://github.com/qutip/qutip/issues/1809:647,Deployability,Install,Installed,647,"### Describe the Issue!. Hello,. I'm not able to see the latex expression of a QObj inside Visual Studio Code. For example, if I run in one cell. ```python; >> qutip.destroy(2). Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = False\begin{equation*}\left(\begin{array}{{11}c}0.0 & 1.0\0.0 & 0.0\\end{array}\right)\end{equation}; ```. while I'm able to correctly show it in web Jupyter Lab. Here, there are my system properties. ```; QuTiP Version: 4.6.2; Numpy Version: 1.21.2; Scipy Version: 1.7.3; Cython Version: 0.29.25; Matplotlib Version: 3.5.0; Python Version: 3.9.7; Number of CPUs: 6; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Linux (x86_64); Installation path: [/home/alberto/anaconda3/envs/physics/lib/python3.9/site-packages/qutip](); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1809
https://github.com/qutip/qutip/issues/1809:717,Deployability,Install,Installation,717,"### Describe the Issue!. Hello,. I'm not able to see the latex expression of a QObj inside Visual Studio Code. For example, if I run in one cell. ```python; >> qutip.destroy(2). Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = False\begin{equation*}\left(\begin{array}{{11}c}0.0 & 1.0\0.0 & 0.0\\end{array}\right)\end{equation}; ```. while I'm able to correctly show it in web Jupyter Lab. Here, there are my system properties. ```; QuTiP Version: 4.6.2; Numpy Version: 1.21.2; Scipy Version: 1.7.3; Cython Version: 0.29.25; Matplotlib Version: 3.5.0; Python Version: 3.9.7; Number of CPUs: 6; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Linux (x86_64); Installation path: [/home/alberto/anaconda3/envs/physics/lib/python3.9/site-packages/qutip](); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1809
https://github.com/qutip/qutip/issues/1810:58,Availability,error,error,58,"When reloading qutip in a jupyter notebook, the following error shows up. /home/arjan/.pyxbld/temp.linux-x86_64-3.8/pyrex/qutip/cy/openmp/parfuncs.cpp:703:10: fatal error: src/zspmv_openmp.hpp: No such file or directory; 703 | #include ""src/zspmv_openmp.hpp""; | ^~~~~~~~~~~~~~~~~~~~~~. Due to this, I cannot make adjustments to the qutip code. I've reinstalled qutip, numpy, scipy, matplotlib, gcc (now version 9.3.0) and cython (0.29.27). That, so far, has not solved the issue. I've searched for this issue, and it seems it has been seen before. However, I could not find any information on how to resolve it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1810
https://github.com/qutip/qutip/issues/1810:165,Availability,error,error,165,"When reloading qutip in a jupyter notebook, the following error shows up. /home/arjan/.pyxbld/temp.linux-x86_64-3.8/pyrex/qutip/cy/openmp/parfuncs.cpp:703:10: fatal error: src/zspmv_openmp.hpp: No such file or directory; 703 | #include ""src/zspmv_openmp.hpp""; | ^~~~~~~~~~~~~~~~~~~~~~. Due to this, I cannot make adjustments to the qutip code. I've reinstalled qutip, numpy, scipy, matplotlib, gcc (now version 9.3.0) and cython (0.29.27). That, so far, has not solved the issue. I've searched for this issue, and it seems it has been seen before. However, I could not find any information on how to resolve it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1810
https://github.com/qutip/qutip/issues/1811:147,Availability,error,error,147,"### Problem Description. Right now, if you pass a [pathlib.Path](https://docs.python.org/3/library/pathlib.html) to any of two functions above, an error will raise because it is not possible to add the suffix `.qu` to a Path object. Moreover, if you already have the fullpath of the file (including the extension), QuTip will also raise because it appends the extension internally, no matter if it is already there or not. ### Proposed Solution. The solution would be similar to [numpy.save](https://github.com/numpy/numpy/blob/v1.22.0/numpy/lib/npyio.py#L449) method. ```; if file is string:; if not file.endswith('.qu'):; file = file + '.qu'; file = Path(file). -> open path object; ```. ### Alternate Solutions. _No response_. ### Additional Context. Pd: I'll be happy to make my first contribution and create a pull request for this.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1811
https://github.com/qutip/qutip/pull/1812:1259,Availability,error,error,1259,"tions using normal class inheritance. ; `install` options are put back into `settings`, these are most options that the user cannot change, such as the presence of mkl or running in `ipython`. The exceptions is the location of the .qutip folder which is a setting but can be changed. The base for the options is a dict with fixed keys and default values. As before, options can be set as keywork at initialization or when setting items. The default can be changed using context (mainly for tests) or setting items at the class:. ```; SolverOptions['method`] = 'bdf' # Set default method ; with SolverOptions(atol=1e-5):; opt = SolverOptions(store_state=True); opt['progress_bar'] = False; print(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integrator must be associated to only one method thus `zvode` was split between `adams` and `b",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:1721,Availability,error,error,1721,"ems. The default can be changed using context (mainly for tests) or setting items at the class:. ```; SolverOptions['method`] = 'bdf' # Set default method ; with SolverOptions(atol=1e-5):; opt = SolverOptions(store_state=True); opt['progress_bar'] = False; print(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integrator must be associated to only one method thus `zvode` was split between `adams` and `bdf`. There is also a generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ...",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:2512,Availability,Error,Error,2512," has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integrator must be associated to only one method thus `zvode` was split between `adams` and `bdf`. There is also a generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used to store openmp threshold, which is not supported.; I also propose to write the stored options as python code when we restore it. (`options = eval(repr(options))`, we may have some issue with circular import if called from `__init__.py`, but we can just write the `repr` of the `dict`.). While it's working fine as is, there are few point to discuss:; - Freezing options associated to solver work fine, but I see 2 alternatives:; - Options know they a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:2780,Availability,Error,Error,2780,"and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integrator must be associated to only one method thus `zvode` was split between `adams` and `bdf`. There is also a generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used to store openmp threshold, which is not supported.; I also propose to write the stored options as python code when we restore it. (`options = eval(repr(options))`, we may have some issue with circular import if called from `__init__.py`, but we can just write the `repr` of the `dict`.). While it's working fine as is, there are few point to discuss:; - Freezing options associated to solver work fine, but I see 2 alternatives:; - Options know they are used by a solver and inform it when modified. More complex but give the image that it just work. ; - All options instance are read-only. To change a key, you create a new options. Simple for us. To modify an existing options we could make it callable: `updated_options = old_options(atol=1e-5)`.; - Passing bad options keys or wrong options types (`mesolve(..., SeOptions)`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:3794,Availability,error,error,3794,"generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used to store openmp threshold, which is not supported.; I also propose to write the stored options as python code when we restore it. (`options = eval(repr(options))`, we may have some issue with circular import if called from `__init__.py`, but we can just write the `repr` of the `dict`.). While it's working fine as is, there are few point to discuss:; - Freezing options associated to solver work fine, but I see 2 alternatives:; - Options know they are used by a solver and inform it when modified. More complex but give the image that it just work. ; - All options instance are read-only. To change a key, you create a new options. Simple for us. To modify an existing options we could make it callable: `updated_options = old_options(atol=1e-5)`.; - Passing bad options keys or wrong options types (`mesolve(..., SeOptions)`) raise error, should we be less strict?; - Should we flatten SolverOptions.ode: ; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt['max_order_ns'] = 10; ```; And associated to it, where do we store default for integrators, per solver or per integrator.; - Do we add more sanity check to options values, or do we move `use_cython` to setting and remove the feature?. **Related PR**; It will cause conflict with #1710 and #1644. **Changelog**; Options classes using inheritance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:309,Deployability,install,install,309,"**Description**; The `dataclass` inspired tree structure options we have in `dev.major` is more complex than needed.; The tree structure allow to split `mcsolve` specific options from the other, but they are still present in those passed to `sesolve` etc. This redo options using normal class inheritance. ; `install` options are put back into `settings`, these are most options that the user cannot change, such as the presence of mkl or running in `ipython`. The exceptions is the location of the .qutip folder which is a setting but can be changed. The base for the options is a dict with fixed keys and default values. As before, options can be set as keywork at initialization or when setting items. The default can be changed using context (mainly for tests) or setting items at the class:. ```; SolverOptions['method`] = 'bdf' # Set default method ; with SolverOptions(atol=1e-5):; opt = SolverOptions(store_state=True); opt['progress_bar'] = False; print(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solve",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:1312,Deployability,install,installed,1312,"tions using normal class inheritance. ; `install` options are put back into `settings`, these are most options that the user cannot change, such as the presence of mkl or running in `ipython`. The exceptions is the location of the .qutip folder which is a setting but can be changed. The base for the options is a dict with fixed keys and default values. As before, options can be set as keywork at initialization or when setting items. The default can be changed using context (mainly for tests) or setting items at the class:. ```; SolverOptions['method`] = 'bdf' # Set default method ; with SolverOptions(atol=1e-5):; opt = SolverOptions(store_state=True); opt['progress_bar'] = False; print(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integrator must be associated to only one method thus `zvode` was split between `adams` and `b",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:1579,Deployability,integrat,integrator,1579,"As before, options can be set as keywork at initialization or when setting items. The default can be changed using context (mainly for tests) or setting items at the class:. ```; SolverOptions['method`] = 'bdf' # Set default method ; with SolverOptions(atol=1e-5):; opt = SolverOptions(store_state=True); opt['progress_bar'] = False; print(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integrator must be associated to only one method thus `zvode` was split between `adams` and `bdf`. There is also a generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are f",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:1655,Deployability,integrat,integrator,1655,"As before, options can be set as keywork at initialization or when setting items. The default can be changed using context (mainly for tests) or setting items at the class:. ```; SolverOptions['method`] = 'bdf' # Set default method ; with SolverOptions(atol=1e-5):; opt = SolverOptions(store_state=True); opt['progress_bar'] = False; print(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integrator must be associated to only one method thus `zvode` was split between `adams` and `bdf`. There is also a generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are f",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:1806,Deployability,integrat,integrator,1806,"items at the class:. ```; SolverOptions['method`] = 'bdf' # Set default method ; with SolverOptions(atol=1e-5):; opt = SolverOptions(store_state=True); opt['progress_bar'] = False; print(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integrator must be associated to only one method thus `zvode` was split between `adams` and `bdf`. There is also a generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ..",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:1867,Deployability,integrat,integrator,1867,"verOptions(atol=1e-5):; opt = SolverOptions(store_state=True); opt['progress_bar'] = False; print(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integrator must be associated to only one method thus `zvode` was split between `adams` and `bdf`. There is also a generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:1929,Deployability,integrat,integrator,1929,"rint(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integrator must be associated to only one method thus `zvode` was split between `adams` and `bdf`. There is also a generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:2174,Deployability,integrat,integrator,2174,"en setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integrator must be associated to only one method thus `zvode` was split between `adams` and `bdf`. There is also a generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used to store openmp threshold, which is not supported.; I also propose to write the stored options as python code when we restore it. (`options = eval(repr(options))`, we may have some issue with circular import if called from `__init__.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:2342,Deployability,integrat,integrator,2342," has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integrator must be associated to only one method thus `zvode` was split between `adams` and `bdf`. There is also a generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used to store openmp threshold, which is not supported.; I also propose to write the stored options as python code when we restore it. (`options = eval(repr(options))`, we may have some issue with circular import if called from `__init__.py`, but we can just write the `repr` of the `dict`.). While it's working fine as is, there are few point to discuss:; - Freezing options associated to solver work fine, but I see 2 alternatives:; - Options know they a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:4023,Deployability,integrat,integrators,4023,"generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used to store openmp threshold, which is not supported.; I also propose to write the stored options as python code when we restore it. (`options = eval(repr(options))`, we may have some issue with circular import if called from `__init__.py`, but we can just write the `repr` of the `dict`.). While it's working fine as is, there are few point to discuss:; - Freezing options associated to solver work fine, but I see 2 alternatives:; - Options know they are used by a solver and inform it when modified. More complex but give the image that it just work. ; - All options instance are read-only. To change a key, you create a new options. Simple for us. To modify an existing options we could make it callable: `updated_options = old_options(atol=1e-5)`.; - Passing bad options keys or wrong options types (`mesolve(..., SeOptions)`) raise error, should we be less strict?; - Should we flatten SolverOptions.ode: ; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt['max_order_ns'] = 10; ```; And associated to it, where do we store default for integrators, per solver or per integrator.; - Do we add more sanity check to options values, or do we move `use_cython` to setting and remove the feature?. **Related PR**; It will cause conflict with #1710 and #1644. **Changelog**; Options classes using inheritance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:4054,Deployability,integrat,integrator,4054,"generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used to store openmp threshold, which is not supported.; I also propose to write the stored options as python code when we restore it. (`options = eval(repr(options))`, we may have some issue with circular import if called from `__init__.py`, but we can just write the `repr` of the `dict`.). While it's working fine as is, there are few point to discuss:; - Freezing options associated to solver work fine, but I see 2 alternatives:; - Options know they are used by a solver and inform it when modified. More complex but give the image that it just work. ; - All options instance are read-only. To change a key, you create a new options. Simple for us. To modify an existing options we could make it callable: `updated_options = old_options(atol=1e-5)`.; - Passing bad options keys or wrong options types (`mesolve(..., SeOptions)`) raise error, should we be less strict?; - Should we flatten SolverOptions.ode: ; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt['max_order_ns'] = 10; ```; And associated to it, where do we store default for integrators, per solver or per integrator.; - Do we add more sanity check to options values, or do we move `use_cython` to setting and remove the feature?. **Related PR**; It will cause conflict with #1710 and #1644. **Changelog**; Options classes using inheritance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:1579,Integrability,integrat,integrator,1579,"As before, options can be set as keywork at initialization or when setting items. The default can be changed using context (mainly for tests) or setting items at the class:. ```; SolverOptions['method`] = 'bdf' # Set default method ; with SolverOptions(atol=1e-5):; opt = SolverOptions(store_state=True); opt['progress_bar'] = False; print(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integrator must be associated to only one method thus `zvode` was split between `adams` and `bdf`. There is also a generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are f",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:1655,Integrability,integrat,integrator,1655,"As before, options can be set as keywork at initialization or when setting items. The default can be changed using context (mainly for tests) or setting items at the class:. ```; SolverOptions['method`] = 'bdf' # Set default method ; with SolverOptions(atol=1e-5):; opt = SolverOptions(store_state=True); opt['progress_bar'] = False; print(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integrator must be associated to only one method thus `zvode` was split between `adams` and `bdf`. There is also a generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are f",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:1806,Integrability,integrat,integrator,1806,"items at the class:. ```; SolverOptions['method`] = 'bdf' # Set default method ; with SolverOptions(atol=1e-5):; opt = SolverOptions(store_state=True); opt['progress_bar'] = False; print(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integrator must be associated to only one method thus `zvode` was split between `adams` and `bdf`. There is also a generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ..",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:1867,Integrability,integrat,integrator,1867,"verOptions(atol=1e-5):; opt = SolverOptions(store_state=True); opt['progress_bar'] = False; print(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integrator must be associated to only one method thus `zvode` was split between `adams` and `bdf`. There is also a generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:1929,Integrability,integrat,integrator,1929,"rint(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integrator must be associated to only one method thus `zvode` was split between `adams` and `bdf`. There is also a generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:2174,Integrability,integrat,integrator,2174,"en setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integrator must be associated to only one method thus `zvode` was split between `adams` and `bdf`. There is also a generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used to store openmp threshold, which is not supported.; I also propose to write the stored options as python code when we restore it. (`options = eval(repr(options))`, we may have some issue with circular import if called from `__init__.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:2342,Integrability,integrat,integrator,2342," has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integrator must be associated to only one method thus `zvode` was split between `adams` and `bdf`. There is also a generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used to store openmp threshold, which is not supported.; I also propose to write the stored options as python code when we restore it. (`options = eval(repr(options))`, we may have some issue with circular import if called from `__init__.py`, but we can just write the `repr` of the `dict`.). While it's working fine as is, there are few point to discuss:; - Freezing options associated to solver work fine, but I see 2 alternatives:; - Options know they a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:4023,Integrability,integrat,integrators,4023,"generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used to store openmp threshold, which is not supported.; I also propose to write the stored options as python code when we restore it. (`options = eval(repr(options))`, we may have some issue with circular import if called from `__init__.py`, but we can just write the `repr` of the `dict`.). While it's working fine as is, there are few point to discuss:; - Freezing options associated to solver work fine, but I see 2 alternatives:; - Options know they are used by a solver and inform it when modified. More complex but give the image that it just work. ; - All options instance are read-only. To change a key, you create a new options. Simple for us. To modify an existing options we could make it callable: `updated_options = old_options(atol=1e-5)`.; - Passing bad options keys or wrong options types (`mesolve(..., SeOptions)`) raise error, should we be less strict?; - Should we flatten SolverOptions.ode: ; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt['max_order_ns'] = 10; ```; And associated to it, where do we store default for integrators, per solver or per integrator.; - Do we add more sanity check to options values, or do we move `use_cython` to setting and remove the feature?. **Related PR**; It will cause conflict with #1710 and #1644. **Changelog**; Options classes using inheritance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:4054,Integrability,integrat,integrator,4054,"generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used to store openmp threshold, which is not supported.; I also propose to write the stored options as python code when we restore it. (`options = eval(repr(options))`, we may have some issue with circular import if called from `__init__.py`, but we can just write the `repr` of the `dict`.). While it's working fine as is, there are few point to discuss:; - Freezing options associated to solver work fine, but I see 2 alternatives:; - Options know they are used by a solver and inform it when modified. More complex but give the image that it just work. ; - All options instance are read-only. To change a key, you create a new options. Simple for us. To modify an existing options we could make it callable: `updated_options = old_options(atol=1e-5)`.; - Passing bad options keys or wrong options types (`mesolve(..., SeOptions)`) raise error, should we be less strict?; - Should we flatten SolverOptions.ode: ; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt['max_order_ns'] = 10; ```; And associated to it, where do we store default for integrators, per solver or per integrator.; - Do we add more sanity check to options values, or do we move `use_cython` to setting and remove the feature?. **Related PR**; It will cause conflict with #1710 and #1644. **Changelog**; Options classes using inheritance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:293,Modifiability,inherit,inheritance,293,"**Description**; The `dataclass` inspired tree structure options we have in `dev.major` is more complex than needed.; The tree structure allow to split `mcsolve` specific options from the other, but they are still present in those passed to `sesolve` etc. This redo options using normal class inheritance. ; `install` options are put back into `settings`, these are most options that the user cannot change, such as the presence of mkl or running in `ipython`. The exceptions is the location of the .qutip folder which is a setting but can be changed. The base for the options is a dict with fixed keys and default values. As before, options can be set as keywork at initialization or when setting items. The default can be changed using context (mainly for tests) or setting items at the class:. ```; SolverOptions['method`] = 'bdf' # Set default method ; with SolverOptions(atol=1e-5):; opt = SolverOptions(store_state=True); opt['progress_bar'] = False; print(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solve",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:4277,Modifiability,inherit,inheritance,4277,"generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used to store openmp threshold, which is not supported.; I also propose to write the stored options as python code when we restore it. (`options = eval(repr(options))`, we may have some issue with circular import if called from `__init__.py`, but we can just write the `repr` of the `dict`.). While it's working fine as is, there are few point to discuss:; - Freezing options associated to solver work fine, but I see 2 alternatives:; - Options know they are used by a solver and inform it when modified. More complex but give the image that it just work. ; - All options instance are read-only. To change a key, you create a new options. Simple for us. To modify an existing options we could make it callable: `updated_options = old_options(atol=1e-5)`.; - Passing bad options keys or wrong options types (`mesolve(..., SeOptions)`) raise error, should we be less strict?; - Should we flatten SolverOptions.ode: ; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt['max_order_ns'] = 10; ```; And associated to it, where do we store default for integrators, per solver or per integrator.; - Do we add more sanity check to options values, or do we move `use_cython` to setting and remove the feature?. **Related PR**; It will cause conflict with #1710 and #1644. **Changelog**; Options classes using inheritance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:1177,Safety,safe,safety,1177,"rom the other, but they are still present in those passed to `sesolve` etc. This redo options using normal class inheritance. ; `install` options are put back into `settings`, these are most options that the user cannot change, such as the presence of mkl or running in `ipython`. The exceptions is the location of the .qutip folder which is a setting but can be changed. The base for the options is a dict with fixed keys and default values. As before, options can be set as keywork at initialization or when setting items. The default can be changed using context (mainly for tests) or setting items at the class:. ```; SolverOptions['method`] = 'bdf' # Set default method ; with SolverOptions(atol=1e-5):; opt = SolverOptions(store_state=True); opt['progress_bar'] = False; print(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:4084,Safety,sanity check,sanity check,4084,"generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used to store openmp threshold, which is not supported.; I also propose to write the stored options as python code when we restore it. (`options = eval(repr(options))`, we may have some issue with circular import if called from `__init__.py`, but we can just write the `repr` of the `dict`.). While it's working fine as is, there are few point to discuss:; - Freezing options associated to solver work fine, but I see 2 alternatives:; - Options know they are used by a solver and inform it when modified. More complex but give the image that it just work. ; - All options instance are read-only. To change a key, you create a new options. Simple for us. To modify an existing options we could make it callable: `updated_options = old_options(atol=1e-5)`.; - Passing bad options keys or wrong options types (`mesolve(..., SeOptions)`) raise error, should we be less strict?; - Should we flatten SolverOptions.ode: ; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt['max_order_ns'] = 10; ```; And associated to it, where do we store default for integrators, per solver or per integrator.; - Do we add more sanity check to options values, or do we move `use_cython` to setting and remove the feature?. **Related PR**; It will cause conflict with #1710 and #1644. **Changelog**; Options classes using inheritance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:758,Testability,test,tests,758,"**Description**; The `dataclass` inspired tree structure options we have in `dev.major` is more complex than needed.; The tree structure allow to split `mcsolve` specific options from the other, but they are still present in those passed to `sesolve` etc. This redo options using normal class inheritance. ; `install` options are put back into `settings`, these are most options that the user cannot change, such as the presence of mkl or running in `ipython`. The exceptions is the location of the .qutip folder which is a setting but can be changed. The base for the options is a dict with fixed keys and default values. As before, options can be set as keywork at initialization or when setting items. The default can be changed using context (mainly for tests) or setting items at the class:. ```; SolverOptions['method`] = 'bdf' # Set default method ; with SolverOptions(atol=1e-5):; opt = SolverOptions(store_state=True); opt['progress_bar'] = False; print(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solve",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1812:3593,Usability,Simpl,Simple,3593,"generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used to store openmp threshold, which is not supported.; I also propose to write the stored options as python code when we restore it. (`options = eval(repr(options))`, we may have some issue with circular import if called from `__init__.py`, but we can just write the `repr` of the `dict`.). While it's working fine as is, there are few point to discuss:; - Freezing options associated to solver work fine, but I see 2 alternatives:; - Options know they are used by a solver and inform it when modified. More complex but give the image that it just work. ; - All options instance are read-only. To change a key, you create a new options. Simple for us. To modify an existing options we could make it callable: `updated_options = old_options(atol=1e-5)`.; - Passing bad options keys or wrong options types (`mesolve(..., SeOptions)`) raise error, should we be less strict?; - Should we flatten SolverOptions.ode: ; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt['max_order_ns'] = 10; ```; And associated to it, where do we store default for integrators, per solver or per integrator.; - Do we add more sanity check to options values, or do we move `use_cython` to setting and remove the feature?. **Related PR**; It will cause conflict with #1710 and #1644. **Changelog**; Options classes using inheritance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1812
https://github.com/qutip/qutip/pull/1813:81,Testability,test,tests,81,"**Description**; - Adds support for pathlib.Path objects in qsave/qload.; - Adds tests for those functions.; - Suffix is optional, if given it won't be appended again.; - Removes prints in qload. **Related issues or PRs**; fix #1184. **Changelog**; `qsave` and `qload` now support `pathlib.Path` objects.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1813
https://github.com/qutip/qutip/issues/1815:297,Security,access,accessible,297,"Confirmation needed: https://github.com/numfocus/gsoc/issues/396; Google is not happy with our idea lists.; ; ; 1. Be sure to include whether the project is a 175 hour (medium sized) or 350 hour (large project). If it can be either, please state that-per idea. ; 2. `Your Ideas Page URL should be accessible to all and not require login. --- (Covered)`; 3. As we state in the Defining a Project Idea List section of the Mentor guide, please provide the following information for each idea:; a) a project title/description ; b) more detailed description of the project (2-5+ sentences) ; c) expected outcomes ; d) skills required/preferred ; e) possible mentors ; f) expected size of project (175 or 350 hour) ; g) an easy, medium or hard difficulty rating of each project.; ; ; If you want to be selected this year I strongly suggest you make sure your Project Ideas list meets the above requirements ASAP.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1815
https://github.com/qutip/qutip/issues/1815:331,Testability,log,login,331,"Confirmation needed: https://github.com/numfocus/gsoc/issues/396; Google is not happy with our idea lists.; ; ; 1. Be sure to include whether the project is a 175 hour (medium sized) or 350 hour (large project). If it can be either, please state that-per idea. ; 2. `Your Ideas Page URL should be accessible to all and not require login. --- (Covered)`; 3. As we state in the Defining a Project Idea List section of the Mentor guide, please provide the following information for each idea:; a) a project title/description ; b) more detailed description of the project (2-5+ sentences) ; c) expected outcomes ; d) skills required/preferred ; e) possible mentors ; f) expected size of project (175 or 350 hour) ; g) an easy, medium or hard difficulty rating of each project.; ; ; If you want to be selected this year I strongly suggest you make sure your Project Ideas list meets the above requirements ASAP.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1815
https://github.com/qutip/qutip/issues/1815:427,Usability,guid,guide,427,"Confirmation needed: https://github.com/numfocus/gsoc/issues/396; Google is not happy with our idea lists.; ; ; 1. Be sure to include whether the project is a 175 hour (medium sized) or 350 hour (large project). If it can be either, please state that-per idea. ; 2. `Your Ideas Page URL should be accessible to all and not require login. --- (Covered)`; 3. As we state in the Defining a Project Idea List section of the Mentor guide, please provide the following information for each idea:; a) a project title/description ; b) more detailed description of the project (2-5+ sentences) ; c) expected outcomes ; d) skills required/preferred ; e) possible mentors ; f) expected size of project (175 or 350 hour) ; g) an easy, medium or hard difficulty rating of each project.; ; ; If you want to be selected this year I strongly suggest you make sure your Project Ideas list meets the above requirements ASAP.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1815
https://github.com/qutip/qutip/pull/1816:241,Deployability,integrat,integration,241,"**Description**; Remove coercion of coefficient values to complex in `Coefficient` and `QobjEvo` allowing to use `tf.Variable` as coefficient to enable auto-differentiation to be used in solver.; It is build on top of #1644 since it include integration method using our data object. Coefficient creation is no longer hard coded, but use a dict of `type: callable`, each type is associated to a function that create a coefficient, allowing to add support for other coefficient types per project such as qutip-tensorflow. Also, function based coefficient no longer cast to complex, but the check in the coefficient function is still there. Since other type are not supported without new data layer, this feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1816
https://github.com/qutip/qutip/pull/1816:241,Integrability,integrat,integration,241,"**Description**; Remove coercion of coefficient values to complex in `Coefficient` and `QobjEvo` allowing to use `tf.Variable` as coefficient to enable auto-differentiation to be used in solver.; It is build on top of #1644 since it include integration method using our data object. Coefficient creation is no longer hard coded, but use a dict of `type: callable`, each type is associated to a function that create a coefficient, allowing to add support for other coefficient types per project such as qutip-tensorflow. Also, function based coefficient no longer cast to complex, but the check in the coefficient function is still there. Since other type are not supported without new data layer, this feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1816
https://github.com/qutip/qutip/pull/1816:117,Modifiability,Variab,Variable,117,"**Description**; Remove coercion of coefficient values to complex in `Coefficient` and `QobjEvo` allowing to use `tf.Variable` as coefficient to enable auto-differentiation to be used in solver.; It is build on top of #1644 since it include integration method using our data object. Coefficient creation is no longer hard coded, but use a dict of `type: callable`, each type is associated to a function that create a coefficient, allowing to add support for other coefficient types per project such as qutip-tensorflow. Also, function based coefficient no longer cast to complex, but the check in the coefficient function is still there. Since other type are not supported without new data layer, this feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1816
https://github.com/qutip/qutip/pull/1816:1210,Modifiability,Variab,Variable,1210,"thod using our data object. Coefficient creation is no longer hard coded, but use a dict of `type: callable`, each type is associated to a function that create a coefficient, allowing to add support for other coefficient types per project such as qutip-tensorflow. Also, function based coefficient no longer cast to complex, but the check in the coefficient function is still there. Since other type are not supported without new data layer, this feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff f",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1816
https://github.com/qutip/qutip/pull/1816:1364,Modifiability,variab,variable,1364,"`type: callable`, each type is associated to a function that create a coefficient, allowing to add support for other coefficient types per project such as qutip-tensorflow. Also, function based coefficient no longer cast to complex, but the check in the coefficient function is still there. Since other type are not supported without new data layer, this feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1816
https://github.com/qutip/qutip/pull/1816:1393,Modifiability,variab,variable,1393,"t create a coefficient, allowing to add support for other coefficient types per project such as qutip-tensorflow. Also, function based coefficient no longer cast to complex, but the check in the coefficient function is still there. Since other type are not supported without new data layer, this feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1816
https://github.com/qutip/qutip/pull/1816:1404,Modifiability,variab,variable,1404,"t create a coefficient, allowing to add support for other coefficient types per project such as qutip-tensorflow. Also, function based coefficient no longer cast to complex, but the check in the coefficient function is still there. Since other type are not supported without new data layer, this feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1816
https://github.com/qutip/qutip/pull/1816:1515,Modifiability,variab,variable,1515,"nction based coefficient no longer cast to complex, but the check in the coefficient function is still there. Since other type are not supported without new data layer, this feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = qt.basis(N, N-1, dtype='tftensor'); solver.start(psi, 0); # Result' expect are numpy's array, so we need to compute them o",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1816
https://github.com/qutip/qutip/pull/1816:1566,Modifiability,variab,variable,1566,"x, but the check in the coefficient function is still there. Since other type are not supported without new data layer, this feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = qt.basis(N, N-1, dtype='tftensor'); solver.start(psi, 0); # Result' expect are numpy's array, so we need to compute them ourself.; out = solver.run(psi, tlist); expects = [",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1816
https://github.com/qutip/qutip/pull/1816:1644,Modifiability,variab,variable,1644,"ype are not supported without new data layer, this feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = qt.basis(N, N-1, dtype='tftensor'); solver.start(psi, 0); # Result' expect are numpy's array, so we need to compute them ourself.; out = solver.run(psi, tlist); expects = [qt.expect(num, state) for state in out.states[1:]]. %time tape.jacobian(e",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1816
https://github.com/qutip/qutip/pull/1816:1683,Modifiability,Variab,Variable,1683,"is feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = qt.basis(N, N-1, dtype='tftensor'); solver.start(psi, 0); # Result' expect are numpy's array, so we need to compute them ourself.; out = solver.run(psi, tlist); expects = [qt.expect(num, state) for state in out.states[1:]]. %time tape.jacobian(expects[-1], variable); ```. Output:; ```; 20.0%. ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1816
https://github.com/qutip/qutip/pull/1816:1752,Modifiability,variab,variable,1752," coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = qt.basis(N, N-1, dtype='tftensor'); solver.start(psi, 0); # Result' expect are numpy's array, so we need to compute them ourself.; out = solver.run(psi, tlist); expects = [qt.expect(num, state) for state in out.states[1:]]. %time tape.jacobian(expects[-1], variable); ```. Output:; ```; 20.0%. Run time: 0.03s. Est. time left: 00:00:00:00; 40.0%. Run t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1816
https://github.com/qutip/qutip/pull/1816:1766,Modifiability,Variab,Variable,1766," value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = qt.basis(N, N-1, dtype='tftensor'); solver.start(psi, 0); # Result' expect are numpy's array, so we need to compute them ourself.; out = solver.run(psi, tlist); expects = [qt.expect(num, state) for state in out.states[1:]]. %time tape.jacobian(expects[-1], variable); ```. Output:; ```; 20.0%. Run time: 0.03s. Est. time left: 00:00:00:00; 40.0%. Run time: 0.05s. Es",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1816
https://github.com/qutip/qutip/pull/1816:1845,Modifiability,variab,variable,1845," coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = qt.basis(N, N-1, dtype='tftensor'); solver.start(psi, 0); # Result' expect are numpy's array, so we need to compute them ourself.; out = solver.run(psi, tlist); expects = [qt.expect(num, state) for state in out.states[1:]]. %time tape.jacobian(expects[-1], variable); ```. Output:; ```; 20.0%. Run time: 0.03s. Est. time left: 00:00:00:00; 40.0%. Run time: 0.05s. Est. time left: 00:00:00:00; 60.0%. Run time: 0.08s. Est. time left: 00:00:00:0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1816
https://github.com/qutip/qutip/pull/1816:2663,Modifiability,variab,variable,2663,"coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = qt.basis(N, N-1, dtype='tftensor'); solver.start(psi, 0); # Result' expect are numpy's array, so we need to compute them ourself.; out = solver.run(psi, tlist); expects = [qt.expect(num, state) for state in out.states[1:]]. %time tape.jacobian(expects[-1], variable); ```. Output:; ```; 20.0%. Run time: 0.03s. Est. time left: 00:00:00:00; 40.0%. Run time: 0.05s. Est. time left: 00:00:00:00; 60.0%. Run time: 0.08s. Est. time left: 00:00:00:00; 80.0%. Run time: 0.10s. Est. time left: 00:00:00:00; 100.0%. Run time: 0.12s. Est. time left: 00:00:00:00. /home/eric/miniconda3/lib/python3.9/site-packages/tensorflow/python/framework/ops.py:1128: ComplexWarning: Casting complex values to real discards the imaginary part; return float(self._numpy()). Total run time: 0.12s; CPU times: user 15.9 s, sys: 174 ms, total: 16 s; Wall time: 16.1 s. <tf.Tensor: shape=(5,), dtype=complex128, numpy=; array([-0.17340122+2.03548130e-09j, -0.18075013+2.08120101e-09j,; -0.19236081+1.58339267e-08j, -0.18075012+1.12229134e-08j,; -0.17648842-7.47414642e-08j])>; ```; So while slow, it works.; Maybe adding simpler runge-kutta method and / or support for [tensorflow's ode](https://www.tensorflow.org/probability/api_docs/python/tfp/math/ode/Solver) could make it more ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1816
https://github.com/qutip/qutip/pull/1816:812,Testability,test,tests,812,"**Description**; Remove coercion of coefficient values to complex in `Coefficient` and `QobjEvo` allowing to use `tf.Variable` as coefficient to enable auto-differentiation to be used in solver.; It is build on top of #1644 since it include integration method using our data object. Coefficient creation is no longer hard coded, but use a dict of `type: callable`, each type is associated to a function that create a coefficient, allowing to add support for other coefficient types per project such as qutip-tensorflow. Also, function based coefficient no longer cast to complex, but the check in the coefficient function is still there. Since other type are not supported without new data layer, this feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1816
https://github.com/qutip/qutip/pull/1816:3498,Usability,simpl,simpler,3498,"np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = qt.basis(N, N-1, dtype='tftensor'); solver.start(psi, 0); # Result' expect are numpy's array, so we need to compute them ourself.; out = solver.run(psi, tlist); expects = [qt.expect(num, state) for state in out.states[1:]]. %time tape.jacobian(expects[-1], variable); ```. Output:; ```; 20.0%. Run time: 0.03s. Est. time left: 00:00:00:00; 40.0%. Run time: 0.05s. Est. time left: 00:00:00:00; 60.0%. Run time: 0.08s. Est. time left: 00:00:00:00; 80.0%. Run time: 0.10s. Est. time left: 00:00:00:00; 100.0%. Run time: 0.12s. Est. time left: 00:00:00:00. /home/eric/miniconda3/lib/python3.9/site-packages/tensorflow/python/framework/ops.py:1128: ComplexWarning: Casting complex values to real discards the imaginary part; return float(self._numpy()). Total run time: 0.12s; CPU times: user 15.9 s, sys: 174 ms, total: 16 s; Wall time: 16.1 s. <tf.Tensor: shape=(5,), dtype=complex128, numpy=; array([-0.17340122+2.03548130e-09j, -0.18075013+2.08120101e-09j,; -0.19236081+1.58339267e-08j, -0.18075012+1.12229134e-08j,; -0.17648842-7.47414642e-08j])>; ```; So while slow, it works.; Maybe adding simpler runge-kutta method and / or support for [tensorflow's ode](https://www.tensorflow.org/probability/api_docs/python/tfp/math/ode/Solver) could make it more usable. **Related issues or PRs**; Build on top of #1644. **Changelog**; Remove casting of coefficients to complex.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1816
https://github.com/qutip/qutip/pull/1816:3660,Usability,usab,usable,3660,"np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.QobjEvo([a+a.dag(), coeff1]). solver = SeSolver(H, options={; 'method': 'vern7', # Only verner method support autodiff for now.; 'state_data_type': """", # The default is 'dense', so it must be overwritten.; 'first_step': 0.05, # Fixed step make auto-diff faster, but still slow.; 'min_step': 0.05,; 'max_step': 0.05,; 'atol': 1e-2,; }); tlist = np.linspace(0,0.5,6). with tf.GradientTape() as tape:; psi = qt.basis(N, N-1, dtype='tftensor'); solver.start(psi, 0); # Result' expect are numpy's array, so we need to compute them ourself.; out = solver.run(psi, tlist); expects = [qt.expect(num, state) for state in out.states[1:]]. %time tape.jacobian(expects[-1], variable); ```. Output:; ```; 20.0%. Run time: 0.03s. Est. time left: 00:00:00:00; 40.0%. Run time: 0.05s. Est. time left: 00:00:00:00; 60.0%. Run time: 0.08s. Est. time left: 00:00:00:00; 80.0%. Run time: 0.10s. Est. time left: 00:00:00:00; 100.0%. Run time: 0.12s. Est. time left: 00:00:00:00. /home/eric/miniconda3/lib/python3.9/site-packages/tensorflow/python/framework/ops.py:1128: ComplexWarning: Casting complex values to real discards the imaginary part; return float(self._numpy()). Total run time: 0.12s; CPU times: user 15.9 s, sys: 174 ms, total: 16 s; Wall time: 16.1 s. <tf.Tensor: shape=(5,), dtype=complex128, numpy=; array([-0.17340122+2.03548130e-09j, -0.18075013+2.08120101e-09j,; -0.19236081+1.58339267e-08j, -0.18075012+1.12229134e-08j,; -0.17648842-7.47414642e-08j])>; ```; So while slow, it works.; Maybe adding simpler runge-kutta method and / or support for [tensorflow's ode](https://www.tensorflow.org/probability/api_docs/python/tfp/math/ode/Solver) could make it more usable. **Related issues or PRs**; Build on top of #1644. **Changelog**; Remove casting of coefficients to complex.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1816
https://github.com/qutip/qutip/issues/1817:42,Availability,error,errors,42,"### Bug Description. Call to `b.render()` errors after performing `b.add_vectors(vec)` where `b` is an instance of `qutip.Bloch()`. ### Code to Reproduce the Bug. ```shell; import qutip; b = qutip.Bloch(); b.make_sphere(); b.add_vectors([0,0,1]); b.render(); ```. ### Code Output. ```shell; /tmp/ipykernel_377526/3029128797.py in <module>; 2 b.make_sphere(); 3 b.add_vectors([0,0,1]); ----> 4 b.render(). ~/.conda/envs/myenv/lib/python3.8/site-packages/qutip/bloch.py in render(self); 503 self.plot_annotations(); 504 # Trigger an update of the Bloch sphere if it is already shown:; --> 505 self.fig.canvas.draw(); 506 ; 507 def plot_back(self):. ~/.local/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py in draw(self); 434 (self.toolbar._wait_cursor_for_draw_cm() if self.toolbar; 435 else nullcontext()):; --> 436 self.figure.draw(self.renderer); 437 # A GUI class may be need to update a window using this draw, so; 438 # don't forget to call the superclass. ~/.local/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs); 71 @wraps(draw); 72 def draw_wrapper(artist, renderer, *args, **kwargs):; ---> 73 result = draw(artist, renderer, *args, **kwargs); 74 if renderer._rasterizing:; 75 renderer.stop_rasterizing(). ~/.local/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer); 48 renderer.start_filter(); 49 ; ---> 50 return draw(artist, renderer); 51 finally:; 52 if artist.get_agg_filter() is not None:. ~/.local/lib/python3.8/site-packages/matplotlib/figure.py in draw(self, renderer); 2808 ; 2809 self.patch.draw(renderer); -> 2810 mimage._draw_list_compositing_images(; 2811 renderer, self, artists, self.suppressComposite); 2812 . ~/.local/lib/python3.8/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite); 130 if not_composite or not has_images:; 131 for a in artists:; --> 132 a.draw(renderer); 133 else:; 134 # Composite any adjacent ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1817
https://github.com/qutip/qutip/issues/1817:2927,Availability,error,error,2927,"ng_images(; 2811 renderer, self, artists, self.suppressComposite); 2812 . ~/.local/lib/python3.8/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite); 130 if not_composite or not has_images:; 131 for a in artists:; --> 132 a.draw(renderer); 133 else:; 134 # Composite any adjacent images together. ~/.local/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer); 48 renderer.start_filter(); 49 ; ---> 50 return draw(artist, renderer); 51 finally:; 52 if artist.get_agg_filter() is not None:. ~/.local/lib/python3.8/site-packages/mpl_toolkits/mplot3d/axes3d.py in draw(self, renderer); 449 for axis in self._get_axis_list()) + 1; 450 collection_zorder = patch_zorder = zorder_offset; --> 451 for artist in sorted(collections_and_patches,; 452 key=do_3d_projection,; 453 reverse=True):. ~/.local/lib/python3.8/site-packages/mpl_toolkits/mplot3d/axes3d.py in do_3d_projection(artist); 424 """"""; 425 try:; --> 426 signature = inspect.signature(artist.do_3d_projection); 427 signature.bind(); 428 # ValueError if `inspect.signature` cannot provide a signature. AttributeError: 'Arrow3D' object has no attribute 'do_3d_projection'; ```. ### Expected Behaviour. The code runs without an error. ### Your Environment. ```shell; QuTiP Version: 4.6.3; Numpy Version: 1.22.2; Scipy Version: 1.8.0; Cython Version: None; Matplotlib Version: 3.5.1; Python Version: 3.8.12; Number of CPUs: 16; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. This seems to be caused by [this](https://github.com/matplotlib/matplotlib/issues/21688) update in matplotlib. The solution seems to be to add the following method to `Arrow3D`. ```python; def do_3d_projection(self, renderer=None):; xs3d, ys3d, zs3d = self._verts3d; xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M); self.set_positions((xs[0],ys[0]),(xs[1],ys[1])). return np.min(zs); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1817
https://github.com/qutip/qutip/issues/1817:531,Deployability,update,update,531,"### Bug Description. Call to `b.render()` errors after performing `b.add_vectors(vec)` where `b` is an instance of `qutip.Bloch()`. ### Code to Reproduce the Bug. ```shell; import qutip; b = qutip.Bloch(); b.make_sphere(); b.add_vectors([0,0,1]); b.render(); ```. ### Code Output. ```shell; /tmp/ipykernel_377526/3029128797.py in <module>; 2 b.make_sphere(); 3 b.add_vectors([0,0,1]); ----> 4 b.render(). ~/.conda/envs/myenv/lib/python3.8/site-packages/qutip/bloch.py in render(self); 503 self.plot_annotations(); 504 # Trigger an update of the Bloch sphere if it is already shown:; --> 505 self.fig.canvas.draw(); 506 ; 507 def plot_back(self):. ~/.local/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py in draw(self); 434 (self.toolbar._wait_cursor_for_draw_cm() if self.toolbar; 435 else nullcontext()):; --> 436 self.figure.draw(self.renderer); 437 # A GUI class may be need to update a window using this draw, so; 438 # don't forget to call the superclass. ~/.local/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs); 71 @wraps(draw); 72 def draw_wrapper(artist, renderer, *args, **kwargs):; ---> 73 result = draw(artist, renderer, *args, **kwargs); 74 if renderer._rasterizing:; 75 renderer.stop_rasterizing(). ~/.local/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer); 48 renderer.start_filter(); 49 ; ---> 50 return draw(artist, renderer); 51 finally:; 52 if artist.get_agg_filter() is not None:. ~/.local/lib/python3.8/site-packages/matplotlib/figure.py in draw(self, renderer); 2808 ; 2809 self.patch.draw(renderer); -> 2810 mimage._draw_list_compositing_images(; 2811 renderer, self, artists, self.suppressComposite); 2812 . ~/.local/lib/python3.8/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite); 130 if not_composite or not has_images:; 131 for a in artists:; --> 132 a.draw(renderer); 133 else:; 134 # Composite any adjacent ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1817
https://github.com/qutip/qutip/issues/1817:896,Deployability,update,update,896,"### Bug Description. Call to `b.render()` errors after performing `b.add_vectors(vec)` where `b` is an instance of `qutip.Bloch()`. ### Code to Reproduce the Bug. ```shell; import qutip; b = qutip.Bloch(); b.make_sphere(); b.add_vectors([0,0,1]); b.render(); ```. ### Code Output. ```shell; /tmp/ipykernel_377526/3029128797.py in <module>; 2 b.make_sphere(); 3 b.add_vectors([0,0,1]); ----> 4 b.render(). ~/.conda/envs/myenv/lib/python3.8/site-packages/qutip/bloch.py in render(self); 503 self.plot_annotations(); 504 # Trigger an update of the Bloch sphere if it is already shown:; --> 505 self.fig.canvas.draw(); 506 ; 507 def plot_back(self):. ~/.local/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py in draw(self); 434 (self.toolbar._wait_cursor_for_draw_cm() if self.toolbar; 435 else nullcontext()):; --> 436 self.figure.draw(self.renderer); 437 # A GUI class may be need to update a window using this draw, so; 438 # don't forget to call the superclass. ~/.local/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs); 71 @wraps(draw); 72 def draw_wrapper(artist, renderer, *args, **kwargs):; ---> 73 result = draw(artist, renderer, *args, **kwargs); 74 if renderer._rasterizing:; 75 renderer.stop_rasterizing(). ~/.local/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer); 48 renderer.start_filter(); 49 ; ---> 50 return draw(artist, renderer); 51 finally:; 52 if artist.get_agg_filter() is not None:. ~/.local/lib/python3.8/site-packages/matplotlib/figure.py in draw(self, renderer); 2808 ; 2809 self.patch.draw(renderer); -> 2810 mimage._draw_list_compositing_images(; 2811 renderer, self, artists, self.suppressComposite); 2812 . ~/.local/lib/python3.8/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite); 130 if not_composite or not has_images:; 131 for a in artists:; --> 132 a.draw(renderer); 133 else:; 134 # Composite any adjacent ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1817
https://github.com/qutip/qutip/issues/1817:1602,Deployability,patch,patch,1602,"s.draw(); 506 ; 507 def plot_back(self):. ~/.local/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py in draw(self); 434 (self.toolbar._wait_cursor_for_draw_cm() if self.toolbar; 435 else nullcontext()):; --> 436 self.figure.draw(self.renderer); 437 # A GUI class may be need to update a window using this draw, so; 438 # don't forget to call the superclass. ~/.local/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs); 71 @wraps(draw); 72 def draw_wrapper(artist, renderer, *args, **kwargs):; ---> 73 result = draw(artist, renderer, *args, **kwargs); 74 if renderer._rasterizing:; 75 renderer.stop_rasterizing(). ~/.local/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer); 48 renderer.start_filter(); 49 ; ---> 50 return draw(artist, renderer); 51 finally:; 52 if artist.get_agg_filter() is not None:. ~/.local/lib/python3.8/site-packages/matplotlib/figure.py in draw(self, renderer); 2808 ; 2809 self.patch.draw(renderer); -> 2810 mimage._draw_list_compositing_images(; 2811 renderer, self, artists, self.suppressComposite); 2812 . ~/.local/lib/python3.8/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite); 130 if not_composite or not has_images:; 131 for a in artists:; --> 132 a.draw(renderer); 133 else:; 134 # Composite any adjacent images together. ~/.local/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer); 48 renderer.start_filter(); 49 ; ---> 50 return draw(artist, renderer); 51 finally:; 52 if artist.get_agg_filter() is not None:. ~/.local/lib/python3.8/site-packages/mpl_toolkits/mplot3d/axes3d.py in draw(self, renderer); 449 for axis in self._get_axis_list()) + 1; 450 collection_zorder = patch_zorder = zorder_offset; --> 451 for artist in sorted(collections_and_patches,; 452 key=do_3d_projection,; 453 reverse=True):. ~/.local/lib/python3.8/site-packages/mpl_toolkits/mplot3d/axes3d.py in d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1817
https://github.com/qutip/qutip/issues/1817:3154,Deployability,Install,Installed,3154,"ng_images(; 2811 renderer, self, artists, self.suppressComposite); 2812 . ~/.local/lib/python3.8/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite); 130 if not_composite or not has_images:; 131 for a in artists:; --> 132 a.draw(renderer); 133 else:; 134 # Composite any adjacent images together. ~/.local/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer); 48 renderer.start_filter(); 49 ; ---> 50 return draw(artist, renderer); 51 finally:; 52 if artist.get_agg_filter() is not None:. ~/.local/lib/python3.8/site-packages/mpl_toolkits/mplot3d/axes3d.py in draw(self, renderer); 449 for axis in self._get_axis_list()) + 1; 450 collection_zorder = patch_zorder = zorder_offset; --> 451 for artist in sorted(collections_and_patches,; 452 key=do_3d_projection,; 453 reverse=True):. ~/.local/lib/python3.8/site-packages/mpl_toolkits/mplot3d/axes3d.py in do_3d_projection(artist); 424 """"""; 425 try:; --> 426 signature = inspect.signature(artist.do_3d_projection); 427 signature.bind(); 428 # ValueError if `inspect.signature` cannot provide a signature. AttributeError: 'Arrow3D' object has no attribute 'do_3d_projection'; ```. ### Expected Behaviour. The code runs without an error. ### Your Environment. ```shell; QuTiP Version: 4.6.3; Numpy Version: 1.22.2; Scipy Version: 1.8.0; Cython Version: None; Matplotlib Version: 3.5.1; Python Version: 3.8.12; Number of CPUs: 16; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. This seems to be caused by [this](https://github.com/matplotlib/matplotlib/issues/21688) update in matplotlib. The solution seems to be to add the following method to `Arrow3D`. ```python; def do_3d_projection(self, renderer=None):; xs3d, ys3d, zs3d = self._verts3d; xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M); self.set_positions((xs[0],ys[0]),(xs[1],ys[1])). return np.min(zs); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1817
https://github.com/qutip/qutip/issues/1817:3343,Deployability,update,update,3343,"ng_images(; 2811 renderer, self, artists, self.suppressComposite); 2812 . ~/.local/lib/python3.8/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite); 130 if not_composite or not has_images:; 131 for a in artists:; --> 132 a.draw(renderer); 133 else:; 134 # Composite any adjacent images together. ~/.local/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer); 48 renderer.start_filter(); 49 ; ---> 50 return draw(artist, renderer); 51 finally:; 52 if artist.get_agg_filter() is not None:. ~/.local/lib/python3.8/site-packages/mpl_toolkits/mplot3d/axes3d.py in draw(self, renderer); 449 for axis in self._get_axis_list()) + 1; 450 collection_zorder = patch_zorder = zorder_offset; --> 451 for artist in sorted(collections_and_patches,; 452 key=do_3d_projection,; 453 reverse=True):. ~/.local/lib/python3.8/site-packages/mpl_toolkits/mplot3d/axes3d.py in do_3d_projection(artist); 424 """"""; 425 try:; --> 426 signature = inspect.signature(artist.do_3d_projection); 427 signature.bind(); 428 # ValueError if `inspect.signature` cannot provide a signature. AttributeError: 'Arrow3D' object has no attribute 'do_3d_projection'; ```. ### Expected Behaviour. The code runs without an error. ### Your Environment. ```shell; QuTiP Version: 4.6.3; Numpy Version: 1.22.2; Scipy Version: 1.8.0; Cython Version: None; Matplotlib Version: 3.5.1; Python Version: 3.8.12; Number of CPUs: 16; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. This seems to be caused by [this](https://github.com/matplotlib/matplotlib/issues/21688) update in matplotlib. The solution seems to be to add the following method to `Arrow3D`. ```python; def do_3d_projection(self, renderer=None):; xs3d, ys3d, zs3d = self._verts3d; xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M); self.set_positions((xs[0],ys[0]),(xs[1],ys[1])). return np.min(zs); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1817
https://github.com/qutip/qutip/issues/1817:1090,Integrability,wrap,wraps,1090,"### Code to Reproduce the Bug. ```shell; import qutip; b = qutip.Bloch(); b.make_sphere(); b.add_vectors([0,0,1]); b.render(); ```. ### Code Output. ```shell; /tmp/ipykernel_377526/3029128797.py in <module>; 2 b.make_sphere(); 3 b.add_vectors([0,0,1]); ----> 4 b.render(). ~/.conda/envs/myenv/lib/python3.8/site-packages/qutip/bloch.py in render(self); 503 self.plot_annotations(); 504 # Trigger an update of the Bloch sphere if it is already shown:; --> 505 self.fig.canvas.draw(); 506 ; 507 def plot_back(self):. ~/.local/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py in draw(self); 434 (self.toolbar._wait_cursor_for_draw_cm() if self.toolbar; 435 else nullcontext()):; --> 436 self.figure.draw(self.renderer); 437 # A GUI class may be need to update a window using this draw, so; 438 # don't forget to call the superclass. ~/.local/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs); 71 @wraps(draw); 72 def draw_wrapper(artist, renderer, *args, **kwargs):; ---> 73 result = draw(artist, renderer, *args, **kwargs); 74 if renderer._rasterizing:; 75 renderer.stop_rasterizing(). ~/.local/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer); 48 renderer.start_filter(); 49 ; ---> 50 return draw(artist, renderer); 51 finally:; 52 if artist.get_agg_filter() is not None:. ~/.local/lib/python3.8/site-packages/matplotlib/figure.py in draw(self, renderer); 2808 ; 2809 self.patch.draw(renderer); -> 2810 mimage._draw_list_compositing_images(; 2811 renderer, self, artists, self.suppressComposite); 2812 . ~/.local/lib/python3.8/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite); 130 if not_composite or not has_images:; 131 for a in artists:; --> 132 a.draw(renderer); 133 else:; 134 # Composite any adjacent images together. ~/.local/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer); 48 renderer.start_fil",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1817
https://github.com/qutip/qutip/issues/1817:55,Performance,perform,performing,55,"### Bug Description. Call to `b.render()` errors after performing `b.add_vectors(vec)` where `b` is an instance of `qutip.Bloch()`. ### Code to Reproduce the Bug. ```shell; import qutip; b = qutip.Bloch(); b.make_sphere(); b.add_vectors([0,0,1]); b.render(); ```. ### Code Output. ```shell; /tmp/ipykernel_377526/3029128797.py in <module>; 2 b.make_sphere(); 3 b.add_vectors([0,0,1]); ----> 4 b.render(). ~/.conda/envs/myenv/lib/python3.8/site-packages/qutip/bloch.py in render(self); 503 self.plot_annotations(); 504 # Trigger an update of the Bloch sphere if it is already shown:; --> 505 self.fig.canvas.draw(); 506 ; 507 def plot_back(self):. ~/.local/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py in draw(self); 434 (self.toolbar._wait_cursor_for_draw_cm() if self.toolbar; 435 else nullcontext()):; --> 436 self.figure.draw(self.renderer); 437 # A GUI class may be need to update a window using this draw, so; 438 # don't forget to call the superclass. ~/.local/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs); 71 @wraps(draw); 72 def draw_wrapper(artist, renderer, *args, **kwargs):; ---> 73 result = draw(artist, renderer, *args, **kwargs); 74 if renderer._rasterizing:; 75 renderer.stop_rasterizing(). ~/.local/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer); 48 renderer.start_filter(); 49 ; ---> 50 return draw(artist, renderer); 51 finally:; 52 if artist.get_agg_filter() is not None:. ~/.local/lib/python3.8/site-packages/matplotlib/figure.py in draw(self, renderer); 2808 ; 2809 self.patch.draw(renderer); -> 2810 mimage._draw_list_compositing_images(; 2811 renderer, self, artists, self.suppressComposite); 2812 . ~/.local/lib/python3.8/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite); 130 if not_composite or not has_images:; 131 for a in artists:; --> 132 a.draw(renderer); 133 else:; 134 # Composite any adjacent ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1817
https://github.com/qutip/qutip/pull/1818:139,Testability,test,tests,139,**Description**; Add do_3d_projection to Arrow3D for matplotlib 3.5 to fix the rendering of vectors on the Bloch sphere. This PR also adds tests for rendering vectors and adds support for passing vectors as tuples. **Related issues or PRs**; - fix #1817; - builds on #1690. **Changelog**; Fixed rendering of vectors on the Bloch sphere when using matplotlib 3.5 and above.; Allowed vectors to be passed as tuples to Bloch.add_vectors.; Added tests for rendering vectors on the Bloch sphere.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1818
https://github.com/qutip/qutip/pull/1818:442,Testability,test,tests,442,**Description**; Add do_3d_projection to Arrow3D for matplotlib 3.5 to fix the rendering of vectors on the Bloch sphere. This PR also adds tests for rendering vectors and adds support for passing vectors as tuples. **Related issues or PRs**; - fix #1817; - builds on #1690. **Changelog**; Fixed rendering of vectors on the Bloch sphere when using matplotlib 3.5 and above.; Allowed vectors to be passed as tuples to Bloch.add_vectors.; Added tests for rendering vectors on the Bloch sphere.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1818
https://github.com/qutip/qutip/pull/1819:267,Usability,simpl,simple,267,"The `qutip.lattice` module is currently unmaintained and the complicated display functions are untested. As reported in https://groups.google.com/g/qutip/c/HKEK60R6HOI/m/6rY7EF-CBQAJ `.display_lattice()` and `.display_unit_cell()` raise exceptions with the following simple code:. ```python; from qutip.lattice import Lattice1d; chain = Lattice1d(num_cell=3, boundary=""periodic""); chain.display_lattice(); chain.display_unit_cell(); ```. **Related issues or PRs**; - Supercedes #1702, #1699 and #1697. **Changelog**; * Fix setting of lattice site dimensions with displaying a Lattice1d with display_lattice or display_unit_cell.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1819
https://github.com/qutip/qutip/pull/1820:101,Testability,test,tests,101,"**Description**; There are some edge cases with the eigen solver that are bugged in `dev.major` that tests missed:; - `_eigs_dense` : It would not compute the proper eigen states when not all eigen states are required and the matrix is non-Hermitian.; - `_eigs_csr` : When all but one eigen values / vectors are needed: the smallest eigen values would always be removed, even when `sort='high'`. Also one element of the eigen vector matrix was removed, not one column. I rewrote the tests with pytest to catch more cases. **Changelog**; Fix some edges cases in `eigs`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1820
https://github.com/qutip/qutip/pull/1820:483,Testability,test,tests,483,"**Description**; There are some edge cases with the eigen solver that are bugged in `dev.major` that tests missed:; - `_eigs_dense` : It would not compute the proper eigen states when not all eigen states are required and the matrix is non-Hermitian.; - `_eigs_csr` : When all but one eigen values / vectors are needed: the smallest eigen values would always be removed, even when `sort='high'`. Also one element of the eigen vector matrix was removed, not one column. I rewrote the tests with pytest to catch more cases. **Changelog**; Fix some edges cases in `eigs`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1820
https://github.com/qutip/qutip/issues/1821:2584,Availability,error,error,2584,"ign(zeta) / 0.25. def H2_coeff(t,args):; zeta = args['zeta']; return np.sqrt(np.abs(0.25 * zeta))**(-3). def H0t(t,args):; global zeta_stored; zeta = args['zeta']; zeta_stored = zeta; print('t =',t); print('zeta =',zeta,'\n'); return H0 + H1_coeff(t,args) * H1 + H2_coeff(t,args) * H2. # Function Based Hamiltonians or Liouvillians. def H_iso(t, args):; return H0t(t, args). def L_iso(t, args):; args['zeta'] = rampFunc(t); H = H_iso(t, args); return qutip.liouvillian(H, []). # Auxiliary Functions and Constants. def zetaLin(t):; global z_f, z_i, tt_f, tt_i; slope = (z_f - z_i) / (tt_f - tt_i); return slope * (t - tt_i) + z_i; # other ramp functions go here; # ... # set ramp function: this function chages zeta in time (linearly, sinusoidaly, ...). def set_rampFunction(rampFunction):; global rampFunc; if rampFunction == 'sin':; rampFunc = zetaSin; elif rampFunction == 'linear':; rampFunc = zetaLin; ; ; ############### Using the solver ##############; z_i = zeta_i; z_f = -8e-5; tt_i = 0; tt_f = 10. div_num = 50; tlist = np.linspace(tt_i, tt_f, div_num); time1 = tt_f - tt_i; zeta_f_1 = z_f. set_rampFunction('linear'); L = L_iso; args = {'dim':dim, 'T':T}; rho_initial = H_DW(zeta_i, dim).eigenstates()[1][0].proj(). nsteps = 1000000; option = solver.Options(nsteps=nsteps); output1 = mesolve(L, rho_initial, tlist, c_ops=[], args=args, options=option, progress_bar=True); ```; The final time that the code prints in not same as the final time ```tt_f``` (which is 10), in this case it yields an error of about 5% in determining the final value of *zeta*:; ```python; zeta_stored; error1 = abs((zeta_stored - zeta_f_1) / zeta_f_1) * 100; print('error ~ %.2f'%error1,'%') #prints error ~ 5.29 %; ```; #### My Environment; ```; QuTiP Version: 4.6.3; Numpy Version: 1.21.2; Scipy Version: 1.7.3; Cython Version: 0.29.25; Matplotlib Version: 3.5.1; Python Version: 3.9.7; Number of CPUs: 16; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1821
https://github.com/qutip/qutip/issues/1821:2733,Availability,error,error,2733,"ign(zeta) / 0.25. def H2_coeff(t,args):; zeta = args['zeta']; return np.sqrt(np.abs(0.25 * zeta))**(-3). def H0t(t,args):; global zeta_stored; zeta = args['zeta']; zeta_stored = zeta; print('t =',t); print('zeta =',zeta,'\n'); return H0 + H1_coeff(t,args) * H1 + H2_coeff(t,args) * H2. # Function Based Hamiltonians or Liouvillians. def H_iso(t, args):; return H0t(t, args). def L_iso(t, args):; args['zeta'] = rampFunc(t); H = H_iso(t, args); return qutip.liouvillian(H, []). # Auxiliary Functions and Constants. def zetaLin(t):; global z_f, z_i, tt_f, tt_i; slope = (z_f - z_i) / (tt_f - tt_i); return slope * (t - tt_i) + z_i; # other ramp functions go here; # ... # set ramp function: this function chages zeta in time (linearly, sinusoidaly, ...). def set_rampFunction(rampFunction):; global rampFunc; if rampFunction == 'sin':; rampFunc = zetaSin; elif rampFunction == 'linear':; rampFunc = zetaLin; ; ; ############### Using the solver ##############; z_i = zeta_i; z_f = -8e-5; tt_i = 0; tt_f = 10. div_num = 50; tlist = np.linspace(tt_i, tt_f, div_num); time1 = tt_f - tt_i; zeta_f_1 = z_f. set_rampFunction('linear'); L = L_iso; args = {'dim':dim, 'T':T}; rho_initial = H_DW(zeta_i, dim).eigenstates()[1][0].proj(). nsteps = 1000000; option = solver.Options(nsteps=nsteps); output1 = mesolve(L, rho_initial, tlist, c_ops=[], args=args, options=option, progress_bar=True); ```; The final time that the code prints in not same as the final time ```tt_f``` (which is 10), in this case it yields an error of about 5% in determining the final value of *zeta*:; ```python; zeta_stored; error1 = abs((zeta_stored - zeta_f_1) / zeta_f_1) * 100; print('error ~ %.2f'%error1,'%') #prints error ~ 5.29 %; ```; #### My Environment; ```; QuTiP Version: 4.6.3; Numpy Version: 1.21.2; Scipy Version: 1.7.3; Cython Version: 0.29.25; Matplotlib Version: 3.5.1; Python Version: 3.9.7; Number of CPUs: 16; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1821
https://github.com/qutip/qutip/issues/1821:2767,Availability,error,error,2767,"ign(zeta) / 0.25. def H2_coeff(t,args):; zeta = args['zeta']; return np.sqrt(np.abs(0.25 * zeta))**(-3). def H0t(t,args):; global zeta_stored; zeta = args['zeta']; zeta_stored = zeta; print('t =',t); print('zeta =',zeta,'\n'); return H0 + H1_coeff(t,args) * H1 + H2_coeff(t,args) * H2. # Function Based Hamiltonians or Liouvillians. def H_iso(t, args):; return H0t(t, args). def L_iso(t, args):; args['zeta'] = rampFunc(t); H = H_iso(t, args); return qutip.liouvillian(H, []). # Auxiliary Functions and Constants. def zetaLin(t):; global z_f, z_i, tt_f, tt_i; slope = (z_f - z_i) / (tt_f - tt_i); return slope * (t - tt_i) + z_i; # other ramp functions go here; # ... # set ramp function: this function chages zeta in time (linearly, sinusoidaly, ...). def set_rampFunction(rampFunction):; global rampFunc; if rampFunction == 'sin':; rampFunc = zetaSin; elif rampFunction == 'linear':; rampFunc = zetaLin; ; ; ############### Using the solver ##############; z_i = zeta_i; z_f = -8e-5; tt_i = 0; tt_f = 10. div_num = 50; tlist = np.linspace(tt_i, tt_f, div_num); time1 = tt_f - tt_i; zeta_f_1 = z_f. set_rampFunction('linear'); L = L_iso; args = {'dim':dim, 'T':T}; rho_initial = H_DW(zeta_i, dim).eigenstates()[1][0].proj(). nsteps = 1000000; option = solver.Options(nsteps=nsteps); output1 = mesolve(L, rho_initial, tlist, c_ops=[], args=args, options=option, progress_bar=True); ```; The final time that the code prints in not same as the final time ```tt_f``` (which is 10), in this case it yields an error of about 5% in determining the final value of *zeta*:; ```python; zeta_stored; error1 = abs((zeta_stored - zeta_f_1) / zeta_f_1) * 100; print('error ~ %.2f'%error1,'%') #prints error ~ 5.29 %; ```; #### My Environment; ```; QuTiP Version: 4.6.3; Numpy Version: 1.21.2; Scipy Version: 1.7.3; Cython Version: 0.29.25; Matplotlib Version: 3.5.1; Python Version: 3.9.7; Number of CPUs: 16; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1821
https://github.com/qutip/qutip/issues/1821:3005,Deployability,Install,Installed,3005,"ign(zeta) / 0.25. def H2_coeff(t,args):; zeta = args['zeta']; return np.sqrt(np.abs(0.25 * zeta))**(-3). def H0t(t,args):; global zeta_stored; zeta = args['zeta']; zeta_stored = zeta; print('t =',t); print('zeta =',zeta,'\n'); return H0 + H1_coeff(t,args) * H1 + H2_coeff(t,args) * H2. # Function Based Hamiltonians or Liouvillians. def H_iso(t, args):; return H0t(t, args). def L_iso(t, args):; args['zeta'] = rampFunc(t); H = H_iso(t, args); return qutip.liouvillian(H, []). # Auxiliary Functions and Constants. def zetaLin(t):; global z_f, z_i, tt_f, tt_i; slope = (z_f - z_i) / (tt_f - tt_i); return slope * (t - tt_i) + z_i; # other ramp functions go here; # ... # set ramp function: this function chages zeta in time (linearly, sinusoidaly, ...). def set_rampFunction(rampFunction):; global rampFunc; if rampFunction == 'sin':; rampFunc = zetaSin; elif rampFunction == 'linear':; rampFunc = zetaLin; ; ; ############### Using the solver ##############; z_i = zeta_i; z_f = -8e-5; tt_i = 0; tt_f = 10. div_num = 50; tlist = np.linspace(tt_i, tt_f, div_num); time1 = tt_f - tt_i; zeta_f_1 = z_f. set_rampFunction('linear'); L = L_iso; args = {'dim':dim, 'T':T}; rho_initial = H_DW(zeta_i, dim).eigenstates()[1][0].proj(). nsteps = 1000000; option = solver.Options(nsteps=nsteps); output1 = mesolve(L, rho_initial, tlist, c_ops=[], args=args, options=option, progress_bar=True); ```; The final time that the code prints in not same as the final time ```tt_f``` (which is 10), in this case it yields an error of about 5% in determining the final value of *zeta*:; ```python; zeta_stored; error1 = abs((zeta_stored - zeta_f_1) / zeta_f_1) * 100; print('error ~ %.2f'%error1,'%') #prints error ~ 5.29 %; ```; #### My Environment; ```; QuTiP Version: 4.6.3; Numpy Version: 1.21.2; Scipy Version: 1.7.3; Cython Version: 0.29.25; Matplotlib Version: 3.5.1; Python Version: 3.9.7; Number of CPUs: 16; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1821
https://github.com/qutip/qutip/issues/1821:56,Modifiability,evolve,evolve,56,"### Describe the Issue!. Hi. I'm using ```mesolve``` to evolve a system under a double-well(DW) potential. By varying *zeta* from -1 to larger values, the DW starts to form after *zeta* exceeds 0. The way zeta changes in time is determined by a *ramp function*. Giving the solver a ```tlist``` it's expected that the solver evolves the system from ```tlist[0]``` to ```tlist[-1]```. Oddly the solver doesn't pick the final time:; ```python; import numpy as np; from qutip import *. # constants. gamma = 2.65e-08 #dim.less. # problems's variables. zeta_i = -1 # initial zeta value; dim = 50. # Initial and Final Hamiltonians. b = destroy(dim); H0 = -(1 / 4) * (b - b.dag())**2; H1 = -(1 / 4) * (b + b.dag())**2; H2 = gamma * (b + b.dag())**4. # Hamiltonian of system with a DW potential; def H_DW(zeta, dim):; b = destroy(dim); H0 = -(1 / 4) * (b - b.dag())**2; H1 = -(1 / 4) * (b + b.dag())**2; H2 = +gamma * (b + b.dag())**4; return H0 + np.sign(zeta) * H1 / 0.25 + np.sqrt(np.abs(0.25 * zeta))**(-3) * H2. # Coefficients. def H1_coeff(t,args):; zeta = args['zeta']; return np.sign(zeta) / 0.25. def H2_coeff(t,args):; zeta = args['zeta']; return np.sqrt(np.abs(0.25 * zeta))**(-3). def H0t(t,args):; global zeta_stored; zeta = args['zeta']; zeta_stored = zeta; print('t =',t); print('zeta =',zeta,'\n'); return H0 + H1_coeff(t,args) * H1 + H2_coeff(t,args) * H2. # Function Based Hamiltonians or Liouvillians. def H_iso(t, args):; return H0t(t, args). def L_iso(t, args):; args['zeta'] = rampFunc(t); H = H_iso(t, args); return qutip.liouvillian(H, []). # Auxiliary Functions and Constants. def zetaLin(t):; global z_f, z_i, tt_f, tt_i; slope = (z_f - z_i) / (tt_f - tt_i); return slope * (t - tt_i) + z_i; # other ramp functions go here; # ... # set ramp function: this function chages zeta in time (linearly, sinusoidaly, ...). def set_rampFunction(rampFunction):; global rampFunc; if rampFunction == 'sin':; rampFunc = zetaSin; elif rampFunction == 'linear':; rampFunc = zetaLin; ; ; ############",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1821
https://github.com/qutip/qutip/issues/1821:324,Modifiability,evolve,evolves,324,"### Describe the Issue!. Hi. I'm using ```mesolve``` to evolve a system under a double-well(DW) potential. By varying *zeta* from -1 to larger values, the DW starts to form after *zeta* exceeds 0. The way zeta changes in time is determined by a *ramp function*. Giving the solver a ```tlist``` it's expected that the solver evolves the system from ```tlist[0]``` to ```tlist[-1]```. Oddly the solver doesn't pick the final time:; ```python; import numpy as np; from qutip import *. # constants. gamma = 2.65e-08 #dim.less. # problems's variables. zeta_i = -1 # initial zeta value; dim = 50. # Initial and Final Hamiltonians. b = destroy(dim); H0 = -(1 / 4) * (b - b.dag())**2; H1 = -(1 / 4) * (b + b.dag())**2; H2 = gamma * (b + b.dag())**4. # Hamiltonian of system with a DW potential; def H_DW(zeta, dim):; b = destroy(dim); H0 = -(1 / 4) * (b - b.dag())**2; H1 = -(1 / 4) * (b + b.dag())**2; H2 = +gamma * (b + b.dag())**4; return H0 + np.sign(zeta) * H1 / 0.25 + np.sqrt(np.abs(0.25 * zeta))**(-3) * H2. # Coefficients. def H1_coeff(t,args):; zeta = args['zeta']; return np.sign(zeta) / 0.25. def H2_coeff(t,args):; zeta = args['zeta']; return np.sqrt(np.abs(0.25 * zeta))**(-3). def H0t(t,args):; global zeta_stored; zeta = args['zeta']; zeta_stored = zeta; print('t =',t); print('zeta =',zeta,'\n'); return H0 + H1_coeff(t,args) * H1 + H2_coeff(t,args) * H2. # Function Based Hamiltonians or Liouvillians. def H_iso(t, args):; return H0t(t, args). def L_iso(t, args):; args['zeta'] = rampFunc(t); H = H_iso(t, args); return qutip.liouvillian(H, []). # Auxiliary Functions and Constants. def zetaLin(t):; global z_f, z_i, tt_f, tt_i; slope = (z_f - z_i) / (tt_f - tt_i); return slope * (t - tt_i) + z_i; # other ramp functions go here; # ... # set ramp function: this function chages zeta in time (linearly, sinusoidaly, ...). def set_rampFunction(rampFunction):; global rampFunc; if rampFunction == 'sin':; rampFunc = zetaSin; elif rampFunction == 'linear':; rampFunc = zetaLin; ; ; ############",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1821
https://github.com/qutip/qutip/issues/1821:536,Modifiability,variab,variables,536,"### Describe the Issue!. Hi. I'm using ```mesolve``` to evolve a system under a double-well(DW) potential. By varying *zeta* from -1 to larger values, the DW starts to form after *zeta* exceeds 0. The way zeta changes in time is determined by a *ramp function*. Giving the solver a ```tlist``` it's expected that the solver evolves the system from ```tlist[0]``` to ```tlist[-1]```. Oddly the solver doesn't pick the final time:; ```python; import numpy as np; from qutip import *. # constants. gamma = 2.65e-08 #dim.less. # problems's variables. zeta_i = -1 # initial zeta value; dim = 50. # Initial and Final Hamiltonians. b = destroy(dim); H0 = -(1 / 4) * (b - b.dag())**2; H1 = -(1 / 4) * (b + b.dag())**2; H2 = gamma * (b + b.dag())**4. # Hamiltonian of system with a DW potential; def H_DW(zeta, dim):; b = destroy(dim); H0 = -(1 / 4) * (b - b.dag())**2; H1 = -(1 / 4) * (b + b.dag())**2; H2 = +gamma * (b + b.dag())**4; return H0 + np.sign(zeta) * H1 / 0.25 + np.sqrt(np.abs(0.25 * zeta))**(-3) * H2. # Coefficients. def H1_coeff(t,args):; zeta = args['zeta']; return np.sign(zeta) / 0.25. def H2_coeff(t,args):; zeta = args['zeta']; return np.sqrt(np.abs(0.25 * zeta))**(-3). def H0t(t,args):; global zeta_stored; zeta = args['zeta']; zeta_stored = zeta; print('t =',t); print('zeta =',zeta,'\n'); return H0 + H1_coeff(t,args) * H1 + H2_coeff(t,args) * H2. # Function Based Hamiltonians or Liouvillians. def H_iso(t, args):; return H0t(t, args). def L_iso(t, args):; args['zeta'] = rampFunc(t); H = H_iso(t, args); return qutip.liouvillian(H, []). # Auxiliary Functions and Constants. def zetaLin(t):; global z_f, z_i, tt_f, tt_i; slope = (z_f - z_i) / (tt_f - tt_i); return slope * (t - tt_i) + z_i; # other ramp functions go here; # ... # set ramp function: this function chages zeta in time (linearly, sinusoidaly, ...). def set_rampFunction(rampFunction):; global rampFunc; if rampFunction == 'sin':; rampFunc = zetaSin; elif rampFunction == 'linear':; rampFunc = zetaLin; ; ; ############",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1821
https://github.com/qutip/qutip/pull/1822:82,Usability,clear,clear,82,**Changelog**; Modified some grammar in `dynamic-time.rst` to make some sentences clear.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1822
https://github.com/qutip/qutip/issues/1823:4833,Deployability,Install,Installed,4833,"recated.; from scipy.sparse.base import spmatrix, isspmatrix, SparseEfficiencyWarning; /home/simon/repos/github/qutip/qutip/fastsparse.py:7: DeprecationWarning: Please use `isspmatrix` from the `scipy.sparse` namespace, the `scipy.sparse.base` namespace is deprecated.; from scipy.sparse.base import spmatrix, isspmatrix, SparseEfficiencyWarning; /home/simon/repos/github/qutip/qutip/fastsparse.py:7: DeprecationWarning: Please use `SparseEfficiencyWarning` from the `scipy.sparse` namespace, the `scipy.sparse.base` namespace is deprecated.; from scipy.sparse.base import spmatrix, isspmatrix, SparseEfficiencyWarning; <frozen importlib._bootstrap>:914: ImportWarning: PyxImporter.find_spec() not found; falling back to find_module(); <frozen importlib._bootstrap>:914: ImportWarning: PyxImporter.find_spec() not found; falling back to find_module(); /home/simon/miniconda3/envs/qutip/lib/python3.10/site-packages/cvxpy/interface/scipy_wrapper.py:17: DeprecationWarning: Please use `spmatrix` from the `scipy.sparse` namespace, the `scipy.sparse.base` namespace is deprecated.; from scipy.sparse.base import spmatrix; <frozen importlib._bootstrap>:914: ImportWarning: PyxImporter.find_spec() not found; falling back to find_module(); <frozen importlib._bootstrap>:914: ImportWarning: PyxImporter.find_spec() not found; falling back to find_module(); <frozen importlib._bootstrap>:914: ImportWarning: PyxImporter.find_spec() not found; falling back to find_module(); <frozen importlib._bootstrap>:914: ImportWarning: PyxImporter.find_spec() not found; falling back to find_module(); ```. ### Expected Behaviour. DeprecationWarnings should not be raised. ### Your Environment. ```shell; QuTiP Version: 4.7.0.dev0+eaf053d; Numpy Version: 1.22.2; Scipy Version: 1.8.0; Cython Version: 0.29.26; Matplotlib Version: 3.5.1; Python Version: 3.10.2; Number of CPUs: 8; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1823
https://github.com/qutip/qutip/issues/1823:3866,Integrability,interface,interface,3866,"ix` from the `scipy.sparse` namespace, the `scipy.sparse.base` namespace is deprecated.; from scipy.sparse.base import spmatrix, isspmatrix, SparseEfficiencyWarning; /home/simon/repos/github/qutip/qutip/fastsparse.py:7: DeprecationWarning: Please use `isspmatrix` from the `scipy.sparse` namespace, the `scipy.sparse.base` namespace is deprecated.; from scipy.sparse.base import spmatrix, isspmatrix, SparseEfficiencyWarning; /home/simon/repos/github/qutip/qutip/fastsparse.py:7: DeprecationWarning: Please use `SparseEfficiencyWarning` from the `scipy.sparse` namespace, the `scipy.sparse.base` namespace is deprecated.; from scipy.sparse.base import spmatrix, isspmatrix, SparseEfficiencyWarning; <frozen importlib._bootstrap>:914: ImportWarning: PyxImporter.find_spec() not found; falling back to find_module(); <frozen importlib._bootstrap>:914: ImportWarning: PyxImporter.find_spec() not found; falling back to find_module(); /home/simon/miniconda3/envs/qutip/lib/python3.10/site-packages/cvxpy/interface/scipy_wrapper.py:17: DeprecationWarning: Please use `spmatrix` from the `scipy.sparse` namespace, the `scipy.sparse.base` namespace is deprecated.; from scipy.sparse.base import spmatrix; <frozen importlib._bootstrap>:914: ImportWarning: PyxImporter.find_spec() not found; falling back to find_module(); <frozen importlib._bootstrap>:914: ImportWarning: PyxImporter.find_spec() not found; falling back to find_module(); <frozen importlib._bootstrap>:914: ImportWarning: PyxImporter.find_spec() not found; falling back to find_module(); <frozen importlib._bootstrap>:914: ImportWarning: PyxImporter.find_spec() not found; falling back to find_module(); ```. ### Expected Behaviour. DeprecationWarnings should not be raised. ### Your Environment. ```shell; QuTiP Version: 4.7.0.dev0+eaf053d; Numpy Version: 1.22.2; Scipy Version: 1.8.0; Cython Version: 0.29.26; Matplotlib Version: 3.5.1; Python Version: 3.10.2; Number of CPUs: 8; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: F",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1823
https://github.com/qutip/qutip/issues/1823:214,Modifiability,extend,extends,214,"### Bug Description. SciPy 1.8 deprecated importing functions from many submodules of scipy.sparse. For example, `scipy.sparse.sputils`. QuTiP fastsparse implementation accessing many of these functions because it extends scipy's sparse matrix support. It would be good to avoid as many of these deprecated imports as we can. Note that SciPy 1.8 is the first SciPy to support Python 3.10. ### Code to Reproduce the Bug. ```shell; python -X dev -c ""import qutip""; ```. ### Code Output. ```shell; <frozen importlib._bootstrap>:914: ImportWarning: PyxImporter.find_spec() not found; falling back to find_module(); /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `upcast` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `upcast_char` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `to_native` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `isdense` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `isshape` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastspar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1823
https://github.com/qutip/qutip/issues/1823:273,Safety,avoid,avoid,273,"### Bug Description. SciPy 1.8 deprecated importing functions from many submodules of scipy.sparse. For example, `scipy.sparse.sputils`. QuTiP fastsparse implementation accessing many of these functions because it extends scipy's sparse matrix support. It would be good to avoid as many of these deprecated imports as we can. Note that SciPy 1.8 is the first SciPy to support Python 3.10. ### Code to Reproduce the Bug. ```shell; python -X dev -c ""import qutip""; ```. ### Code Output. ```shell; <frozen importlib._bootstrap>:914: ImportWarning: PyxImporter.find_spec() not found; falling back to find_module(); /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `upcast` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `upcast_char` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `to_native` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `isdense` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `isshape` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastspar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1823
https://github.com/qutip/qutip/issues/1823:169,Security,access,accessing,169,"### Bug Description. SciPy 1.8 deprecated importing functions from many submodules of scipy.sparse. For example, `scipy.sparse.sputils`. QuTiP fastsparse implementation accessing many of these functions because it extends scipy's sparse matrix support. It would be good to avoid as many of these deprecated imports as we can. Note that SciPy 1.8 is the first SciPy to support Python 3.10. ### Code to Reproduce the Bug. ```shell; python -X dev -c ""import qutip""; ```. ### Code Output. ```shell; <frozen importlib._bootstrap>:914: ImportWarning: PyxImporter.find_spec() not found; falling back to find_module(); /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `upcast` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `upcast_char` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `to_native` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `isdense` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `isshape` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastspar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1823
https://github.com/qutip/qutip/pull/1824:183,Availability,error,error,183,"This fixes an incompatibility between the current version of QuTiP and the current version of matplotlib. When plotting the Bloch sphere, the call to Bloch.show() produces a run-time error because the Arrow3D class does not implement the method do_3d_projection. This method returns a sort key to matlotlib for sorting artists. This fix adds the method, simply returning a value of 1. The assumption here is that there is only one artist, or that the sort order does not matter. This PR also modifies the conventions for the viewing angles specified in the view attribute of the Bloch and Bloch3d classes, rotating them by a quarter of a turn. See prior PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1824
https://github.com/qutip/qutip/pull/1824:354,Usability,simpl,simply,354,"This fixes an incompatibility between the current version of QuTiP and the current version of matplotlib. When plotting the Bloch sphere, the call to Bloch.show() produces a run-time error because the Arrow3D class does not implement the method do_3d_projection. This method returns a sort key to matlotlib for sorting artists. This fix adds the method, simply returning a value of 1. The assumption here is that there is only one artist, or that the sort order does not matter. This PR also modifies the conventions for the viewing angles specified in the view attribute of the Bloch and Bloch3d classes, rotating them by a quarter of a turn. See prior PR.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1824
https://github.com/qutip/qutip/pull/1825:17,Deployability,Update,Update,17,**Description**; Update the superop reps tests to use pytest and parameterized tests. Thank you for contributing these @MrRobot2211. **Related issues or PRs**; - Originally submitted as part of #1491 which also added support for rectangular superops. **Changelog**; Update the superop reps tests to use pytest and parameterized tests. Contributed by @MrRobot2211),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1825
https://github.com/qutip/qutip/pull/1825:266,Deployability,Update,Update,266,**Description**; Update the superop reps tests to use pytest and parameterized tests. Thank you for contributing these @MrRobot2211. **Related issues or PRs**; - Originally submitted as part of #1491 which also added support for rectangular superops. **Changelog**; Update the superop reps tests to use pytest and parameterized tests. Contributed by @MrRobot2211),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1825
https://github.com/qutip/qutip/pull/1825:65,Modifiability,parameteriz,parameterized,65,**Description**; Update the superop reps tests to use pytest and parameterized tests. Thank you for contributing these @MrRobot2211. **Related issues or PRs**; - Originally submitted as part of #1491 which also added support for rectangular superops. **Changelog**; Update the superop reps tests to use pytest and parameterized tests. Contributed by @MrRobot2211),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1825
https://github.com/qutip/qutip/pull/1825:314,Modifiability,parameteriz,parameterized,314,**Description**; Update the superop reps tests to use pytest and parameterized tests. Thank you for contributing these @MrRobot2211. **Related issues or PRs**; - Originally submitted as part of #1491 which also added support for rectangular superops. **Changelog**; Update the superop reps tests to use pytest and parameterized tests. Contributed by @MrRobot2211),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1825
https://github.com/qutip/qutip/pull/1825:41,Testability,test,tests,41,**Description**; Update the superop reps tests to use pytest and parameterized tests. Thank you for contributing these @MrRobot2211. **Related issues or PRs**; - Originally submitted as part of #1491 which also added support for rectangular superops. **Changelog**; Update the superop reps tests to use pytest and parameterized tests. Contributed by @MrRobot2211),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1825
https://github.com/qutip/qutip/pull/1825:79,Testability,test,tests,79,**Description**; Update the superop reps tests to use pytest and parameterized tests. Thank you for contributing these @MrRobot2211. **Related issues or PRs**; - Originally submitted as part of #1491 which also added support for rectangular superops. **Changelog**; Update the superop reps tests to use pytest and parameterized tests. Contributed by @MrRobot2211),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1825
https://github.com/qutip/qutip/pull/1825:290,Testability,test,tests,290,**Description**; Update the superop reps tests to use pytest and parameterized tests. Thank you for contributing these @MrRobot2211. **Related issues or PRs**; - Originally submitted as part of #1491 which also added support for rectangular superops. **Changelog**; Update the superop reps tests to use pytest and parameterized tests. Contributed by @MrRobot2211),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1825
https://github.com/qutip/qutip/pull/1825:328,Testability,test,tests,328,**Description**; Update the superop reps tests to use pytest and parameterized tests. Thank you for contributing these @MrRobot2211. **Related issues or PRs**; - Originally submitted as part of #1491 which also added support for rectangular superops. **Changelog**; Update the superop reps tests to use pytest and parameterized tests. Contributed by @MrRobot2211),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1825
https://github.com/qutip/qutip/pull/1826:1463,Availability,Error,Error,1463,"ces come into multiple sub classes as proposed : `Space`, `SuperSpace`, `Field`, `Compound`, and `EnrSpace`.; Splitting maps and spaces simplify spaces by not needing to have a dummy 2nd dims : `Space()[1]` does exist. Dimensions can be initiated from a list and converted back to one. Field are automatically contracted: `Compound(Field, Field)` is a `Field`, same for maps. With the exceptions that `Qobj` with a shape of `(1,1)` with be a `Dimensions(Field, Field)` and not a `Field`. . Some previously valid and used list format are no longer accepted. Playing with of tensor of super operators, `permute` and `reshuffle`, you could make object with dims as `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]` which can be interpreted as the tensor of 3 super operators. But then `[[[2, 2], [3, 3]], [[2, 2],[3, 3]]]` can both be interpreted as tensor of super operator or super operator of tensor spaces, so : ; - `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]`: Error; - `[[[2, 2], [4, 4]], [[2, 2], [4, 4]]]`: list representation of dimensions of `to_super(tensor(oper, oper))`; - `[[[2], [2], [3], [3]], [[2], [2], [3], [3]]]`: list representation of dimensions of `tensor(to_super(oper), to_super(oper))`. Dimensions object have a `type` and `shape` set a initialization. There is a check when creating/ modifying a `Qobj` with between the data's shape and dims's shape and an error is raise when they are not matching. . Since operator-ket have a `superrep`, I added the `superrep` parameter to the Superspace instead of the dimensions, for now. But a better look at super operator representation is needed. At the present state, `Qobj.dims` take and return a list, keeping the dimension object internally. From there, minimal adjustment were made so test pass. The eigenstate fix in #1820 is already merged since it would create `Qobj` which dims and shape did not match. ToDo:. - [x] Tensor using dimension directly instead of list.; - [x] QobjEvo.dims use dimension object.; - [",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1826
https://github.com/qutip/qutip/pull/1826:1881,Availability,error,error,1881,"e for maps. With the exceptions that `Qobj` with a shape of `(1,1)` with be a `Dimensions(Field, Field)` and not a `Field`. . Some previously valid and used list format are no longer accepted. Playing with of tensor of super operators, `permute` and `reshuffle`, you could make object with dims as `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]` which can be interpreted as the tensor of 3 super operators. But then `[[[2, 2], [3, 3]], [[2, 2],[3, 3]]]` can both be interpreted as tensor of super operator or super operator of tensor spaces, so : ; - `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]`: Error; - `[[[2, 2], [4, 4]], [[2, 2], [4, 4]]]`: list representation of dimensions of `to_super(tensor(oper, oper))`; - `[[[2], [2], [3], [3]], [[2], [2], [3], [3]]]`: list representation of dimensions of `tensor(to_super(oper), to_super(oper))`. Dimensions object have a `type` and `shape` set a initialization. There is a check when creating/ modifying a `Qobj` with between the data's shape and dims's shape and an error is raise when they are not matching. . Since operator-ket have a `superrep`, I added the `superrep` parameter to the Superspace instead of the dimensions, for now. But a better look at super operator representation is needed. At the present state, `Qobj.dims` take and return a list, keeping the dimension object internally. From there, minimal adjustment were made so test pass. The eigenstate fix in #1820 is already merged since it would create `Qobj` which dims and shape did not match. ToDo:. - [x] Tensor using dimension directly instead of list.; - [x] QobjEvo.dims use dimension object.; - [x] state and operator accept dimension.; - [ ] Super operator representation.; - [ ] Ptrace, partial_transpose and permute use dimension object (supported with enr states).; - [ ] Flags / new types for rectangular operator?; - [ ] List dimension manipulation function in dimension.py should support the class/ be integrated in it / removed. **Related issues or PR",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1826
https://github.com/qutip/qutip/pull/1826:2799,Deployability,integrat,integrated,2799,"ptions that `Qobj` with a shape of `(1,1)` with be a `Dimensions(Field, Field)` and not a `Field`. . Some previously valid and used list format are no longer accepted. Playing with of tensor of super operators, `permute` and `reshuffle`, you could make object with dims as `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]` which can be interpreted as the tensor of 3 super operators. But then `[[[2, 2], [3, 3]], [[2, 2],[3, 3]]]` can both be interpreted as tensor of super operator or super operator of tensor spaces, so : ; - `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]`: Error; - `[[[2, 2], [4, 4]], [[2, 2], [4, 4]]]`: list representation of dimensions of `to_super(tensor(oper, oper))`; - `[[[2], [2], [3], [3]], [[2], [2], [3], [3]]]`: list representation of dimensions of `tensor(to_super(oper), to_super(oper))`. Dimensions object have a `type` and `shape` set a initialization. There is a check when creating/ modifying a `Qobj` with between the data's shape and dims's shape and an error is raise when they are not matching. . Since operator-ket have a `superrep`, I added the `superrep` parameter to the Superspace instead of the dimensions, for now. But a better look at super operator representation is needed. At the present state, `Qobj.dims` take and return a list, keeping the dimension object internally. From there, minimal adjustment were made so test pass. The eigenstate fix in #1820 is already merged since it would create `Qobj` which dims and shape did not match. ToDo:. - [x] Tensor using dimension directly instead of list.; - [x] QobjEvo.dims use dimension object.; - [x] state and operator accept dimension.; - [ ] Super operator representation.; - [ ] Ptrace, partial_transpose and permute use dimension object (supported with enr states).; - [ ] Flags / new types for rectangular operator?; - [ ] List dimension manipulation function in dimension.py should support the class/ be integrated in it / removed. **Related issues or PRs**; #1476. **Changelog**",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1826
https://github.com/qutip/qutip/pull/1826:795,Integrability,contract,contracted,795,"**Description**. This is an overhaul of the dimensions based on the proposition by @jakelishman in #1476.; As proposed, dimension objects singleton instances composed of map and spaces. Dimensions used by `Qobj` are all represented by a map between 2 spaces:. - ket: Dimensions(Field, Space); - bra: Dimensions(Space, Field); - oper: Dimensions(Space, Space); ... This `Dimension` is the `Map` proposed by Jake, but `ket` are map from `Field` to `Space` and not Space` themselves.; Spaces come into multiple sub classes as proposed : `Space`, `SuperSpace`, `Field`, `Compound`, and `EnrSpace`.; Splitting maps and spaces simplify spaces by not needing to have a dummy 2nd dims : `Space()[1]` does exist. Dimensions can be initiated from a list and converted back to one. Field are automatically contracted: `Compound(Field, Field)` is a `Field`, same for maps. With the exceptions that `Qobj` with a shape of `(1,1)` with be a `Dimensions(Field, Field)` and not a `Field`. . Some previously valid and used list format are no longer accepted. Playing with of tensor of super operators, `permute` and `reshuffle`, you could make object with dims as `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]` which can be interpreted as the tensor of 3 super operators. But then `[[[2, 2], [3, 3]], [[2, 2],[3, 3]]]` can both be interpreted as tensor of super operator or super operator of tensor spaces, so : ; - `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]`: Error; - `[[[2, 2], [4, 4]], [[2, 2], [4, 4]]]`: list representation of dimensions of `to_super(tensor(oper, oper))`; - `[[[2], [2], [3], [3]], [[2], [2], [3], [3]]]`: list representation of dimensions of `tensor(to_super(oper), to_super(oper))`. Dimensions object have a `type` and `shape` set a initialization. There is a check when creating/ modifying a `Qobj` with between the data's shape and dims's shape and an error is raise when they are not matching. . Since operator-ket have a `superrep`, I added the `superrep` parameter to t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1826
https://github.com/qutip/qutip/pull/1826:2799,Integrability,integrat,integrated,2799,"ptions that `Qobj` with a shape of `(1,1)` with be a `Dimensions(Field, Field)` and not a `Field`. . Some previously valid and used list format are no longer accepted. Playing with of tensor of super operators, `permute` and `reshuffle`, you could make object with dims as `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]` which can be interpreted as the tensor of 3 super operators. But then `[[[2, 2], [3, 3]], [[2, 2],[3, 3]]]` can both be interpreted as tensor of super operator or super operator of tensor spaces, so : ; - `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]`: Error; - `[[[2, 2], [4, 4]], [[2, 2], [4, 4]]]`: list representation of dimensions of `to_super(tensor(oper, oper))`; - `[[[2], [2], [3], [3]], [[2], [2], [3], [3]]]`: list representation of dimensions of `tensor(to_super(oper), to_super(oper))`. Dimensions object have a `type` and `shape` set a initialization. There is a check when creating/ modifying a `Qobj` with between the data's shape and dims's shape and an error is raise when they are not matching. . Since operator-ket have a `superrep`, I added the `superrep` parameter to the Superspace instead of the dimensions, for now. But a better look at super operator representation is needed. At the present state, `Qobj.dims` take and return a list, keeping the dimension object internally. From there, minimal adjustment were made so test pass. The eigenstate fix in #1820 is already merged since it would create `Qobj` which dims and shape did not match. ToDo:. - [x] Tensor using dimension directly instead of list.; - [x] QobjEvo.dims use dimension object.; - [x] state and operator accept dimension.; - [ ] Super operator representation.; - [ ] Ptrace, partial_transpose and permute use dimension object (supported with enr states).; - [ ] Flags / new types for rectangular operator?; - [ ] List dimension manipulation function in dimension.py should support the class/ be integrated in it / removed. **Related issues or PRs**; #1476. **Changelog**",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1826
https://github.com/qutip/qutip/pull/1826:2256,Testability,test,test,2256,"ptions that `Qobj` with a shape of `(1,1)` with be a `Dimensions(Field, Field)` and not a `Field`. . Some previously valid and used list format are no longer accepted. Playing with of tensor of super operators, `permute` and `reshuffle`, you could make object with dims as `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]` which can be interpreted as the tensor of 3 super operators. But then `[[[2, 2], [3, 3]], [[2, 2],[3, 3]]]` can both be interpreted as tensor of super operator or super operator of tensor spaces, so : ; - `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]`: Error; - `[[[2, 2], [4, 4]], [[2, 2], [4, 4]]]`: list representation of dimensions of `to_super(tensor(oper, oper))`; - `[[[2], [2], [3], [3]], [[2], [2], [3], [3]]]`: list representation of dimensions of `tensor(to_super(oper), to_super(oper))`. Dimensions object have a `type` and `shape` set a initialization. There is a check when creating/ modifying a `Qobj` with between the data's shape and dims's shape and an error is raise when they are not matching. . Since operator-ket have a `superrep`, I added the `superrep` parameter to the Superspace instead of the dimensions, for now. But a better look at super operator representation is needed. At the present state, `Qobj.dims` take and return a list, keeping the dimension object internally. From there, minimal adjustment were made so test pass. The eigenstate fix in #1820 is already merged since it would create `Qobj` which dims and shape did not match. ToDo:. - [x] Tensor using dimension directly instead of list.; - [x] QobjEvo.dims use dimension object.; - [x] state and operator accept dimension.; - [ ] Super operator representation.; - [ ] Ptrace, partial_transpose and permute use dimension object (supported with enr states).; - [ ] Flags / new types for rectangular operator?; - [ ] List dimension manipulation function in dimension.py should support the class/ be integrated in it / removed. **Related issues or PRs**; #1476. **Changelog**",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1826
https://github.com/qutip/qutip/pull/1826:621,Usability,simpl,simplify,621,"**Description**. This is an overhaul of the dimensions based on the proposition by @jakelishman in #1476.; As proposed, dimension objects singleton instances composed of map and spaces. Dimensions used by `Qobj` are all represented by a map between 2 spaces:. - ket: Dimensions(Field, Space); - bra: Dimensions(Space, Field); - oper: Dimensions(Space, Space); ... This `Dimension` is the `Map` proposed by Jake, but `ket` are map from `Field` to `Space` and not Space` themselves.; Spaces come into multiple sub classes as proposed : `Space`, `SuperSpace`, `Field`, `Compound`, and `EnrSpace`.; Splitting maps and spaces simplify spaces by not needing to have a dummy 2nd dims : `Space()[1]` does exist. Dimensions can be initiated from a list and converted back to one. Field are automatically contracted: `Compound(Field, Field)` is a `Field`, same for maps. With the exceptions that `Qobj` with a shape of `(1,1)` with be a `Dimensions(Field, Field)` and not a `Field`. . Some previously valid and used list format are no longer accepted. Playing with of tensor of super operators, `permute` and `reshuffle`, you could make object with dims as `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]` which can be interpreted as the tensor of 3 super operators. But then `[[[2, 2], [3, 3]], [[2, 2],[3, 3]]]` can both be interpreted as tensor of super operator or super operator of tensor spaces, so : ; - `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]`: Error; - `[[[2, 2], [4, 4]], [[2, 2], [4, 4]]]`: list representation of dimensions of `to_super(tensor(oper, oper))`; - `[[[2], [2], [3], [3]], [[2], [2], [3], [3]]]`: list representation of dimensions of `tensor(to_super(oper), to_super(oper))`. Dimensions object have a `type` and `shape` set a initialization. There is a check when creating/ modifying a `Qobj` with between the data's shape and dims's shape and an error is raise when they are not matching. . Since operator-ket have a `superrep`, I added the `superrep` parameter to t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1826
https://github.com/qutip/qutip/pull/1827:130,Integrability,interface,interface,130,**Description**; Fix scipy.sparse deprecation warnings raised by qutip.fast_csr_matrix by:. - importing functions from the public interface where we can (i.e. from the `scipy.sparse` module); - explicitly importing functions from the internal interface otherwise (i.e. from `_sputils`). We already import methods from `_sparsetools` so our reliance on the internal interfaces is not a new thing. This PR ensures we don't implicitly rely on the internal interfaces via the deprecated public interfaces. **Related issues or PRs**; - fixes #1823. **Changelog**; Fix scipy.sparse deprecation warnings raised by qutip.fast_csr_matrix.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1827
https://github.com/qutip/qutip/pull/1827:243,Integrability,interface,interface,243,**Description**; Fix scipy.sparse deprecation warnings raised by qutip.fast_csr_matrix by:. - importing functions from the public interface where we can (i.e. from the `scipy.sparse` module); - explicitly importing functions from the internal interface otherwise (i.e. from `_sputils`). We already import methods from `_sparsetools` so our reliance on the internal interfaces is not a new thing. This PR ensures we don't implicitly rely on the internal interfaces via the deprecated public interfaces. **Related issues or PRs**; - fixes #1823. **Changelog**; Fix scipy.sparse deprecation warnings raised by qutip.fast_csr_matrix.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1827
https://github.com/qutip/qutip/pull/1827:365,Integrability,interface,interfaces,365,**Description**; Fix scipy.sparse deprecation warnings raised by qutip.fast_csr_matrix by:. - importing functions from the public interface where we can (i.e. from the `scipy.sparse` module); - explicitly importing functions from the internal interface otherwise (i.e. from `_sputils`). We already import methods from `_sparsetools` so our reliance on the internal interfaces is not a new thing. This PR ensures we don't implicitly rely on the internal interfaces via the deprecated public interfaces. **Related issues or PRs**; - fixes #1823. **Changelog**; Fix scipy.sparse deprecation warnings raised by qutip.fast_csr_matrix.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1827
https://github.com/qutip/qutip/pull/1827:453,Integrability,interface,interfaces,453,**Description**; Fix scipy.sparse deprecation warnings raised by qutip.fast_csr_matrix by:. - importing functions from the public interface where we can (i.e. from the `scipy.sparse` module); - explicitly importing functions from the internal interface otherwise (i.e. from `_sputils`). We already import methods from `_sparsetools` so our reliance on the internal interfaces is not a new thing. This PR ensures we don't implicitly rely on the internal interfaces via the deprecated public interfaces. **Related issues or PRs**; - fixes #1823. **Changelog**; Fix scipy.sparse deprecation warnings raised by qutip.fast_csr_matrix.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1827
https://github.com/qutip/qutip/pull/1827:490,Integrability,interface,interfaces,490,**Description**; Fix scipy.sparse deprecation warnings raised by qutip.fast_csr_matrix by:. - importing functions from the public interface where we can (i.e. from the `scipy.sparse` module); - explicitly importing functions from the internal interface otherwise (i.e. from `_sputils`). We already import methods from `_sparsetools` so our reliance on the internal interfaces is not a new thing. This PR ensures we don't implicitly rely on the internal interfaces via the deprecated public interfaces. **Related issues or PRs**; - fixes #1823. **Changelog**; Fix scipy.sparse deprecation warnings raised by qutip.fast_csr_matrix.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1827
https://github.com/qutip/qutip/issues/1829:1753,Deployability,Install,Installed,1753,"### Bug Description. QuTiP Qobj has a `tinyup()` method that sets to 0 all values lower than a certain threshold defined by `settings.auto_tidyup_atol`:. https://github.com/qutip/qutip/blob/f5bdb6dda3f121c253a4862235674fa8980b7681/qutip/qobj.py#L1383. As explained in [here](https://qutip.org/docs/latest/guide/guide-settings.html), the user should be able to change this value. . Playing with this options I realized that changing the `qutip.settings.auto_tidyup` to False works, but changing the `qutip.settings.auto_tidyup_atol` value doesn't. ### Code to Reproduce the Bug. ```shell; import qutip. qutip.settings.auto_tidyup_atol = 1e-30; a = qutip.Qobj(1); print(a * 1e-15); qutip.settings.auto_tidyup = False; print(a * 1e-15); ```. ### Code Output. ```shell; Quantum object: dims = [[1], [1]], shape = (1, 1), type = bra; Qobj data =; [[0.]]; Quantum object: dims = [[1], [1]], shape = (1, 1), type = bra; Qobj data =; [[1.e-15]]; ```. ### Expected Behaviour. The first print should have been:; ```; Quantum object: dims = [[1], [1]], shape = (1, 1), type = bra; Qobj data =; [[1.e-15]]; ```. When multiplying `a * 1e-15`, QuTiP calls the `__mul__` magic method, where `out.tidyup()` is called:. https://github.com/qutip/qutip/blob/f5bdb6dda3f121c253a4862235674fa8980b7681/qutip/qobj.py#L581. Tidyup contains one argument set to `settings.auto_tidyup_atol` by default. This value should change to 1e-30 when running `qutip.settings.auto_tidyup_atol = 1e-30`, but this never happens. Consequently, the output value is set to 0. ### Your Environment. ```shell; QuTiP Version: 4.6.3; Numpy Version: 1.22.3; Scipy Version: 1.8.0; Cython Version: None; Matplotlib Version: 3.5.1; Python Version: 3.10.2; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1829
https://github.com/qutip/qutip/issues/1829:305,Usability,guid,guide,305,"### Bug Description. QuTiP Qobj has a `tinyup()` method that sets to 0 all values lower than a certain threshold defined by `settings.auto_tidyup_atol`:. https://github.com/qutip/qutip/blob/f5bdb6dda3f121c253a4862235674fa8980b7681/qutip/qobj.py#L1383. As explained in [here](https://qutip.org/docs/latest/guide/guide-settings.html), the user should be able to change this value. . Playing with this options I realized that changing the `qutip.settings.auto_tidyup` to False works, but changing the `qutip.settings.auto_tidyup_atol` value doesn't. ### Code to Reproduce the Bug. ```shell; import qutip. qutip.settings.auto_tidyup_atol = 1e-30; a = qutip.Qobj(1); print(a * 1e-15); qutip.settings.auto_tidyup = False; print(a * 1e-15); ```. ### Code Output. ```shell; Quantum object: dims = [[1], [1]], shape = (1, 1), type = bra; Qobj data =; [[0.]]; Quantum object: dims = [[1], [1]], shape = (1, 1), type = bra; Qobj data =; [[1.e-15]]; ```. ### Expected Behaviour. The first print should have been:; ```; Quantum object: dims = [[1], [1]], shape = (1, 1), type = bra; Qobj data =; [[1.e-15]]; ```. When multiplying `a * 1e-15`, QuTiP calls the `__mul__` magic method, where `out.tidyup()` is called:. https://github.com/qutip/qutip/blob/f5bdb6dda3f121c253a4862235674fa8980b7681/qutip/qobj.py#L581. Tidyup contains one argument set to `settings.auto_tidyup_atol` by default. This value should change to 1e-30 when running `qutip.settings.auto_tidyup_atol = 1e-30`, but this never happens. Consequently, the output value is set to 0. ### Your Environment. ```shell; QuTiP Version: 4.6.3; Numpy Version: 1.22.3; Scipy Version: 1.8.0; Cython Version: None; Matplotlib Version: 3.5.1; Python Version: 3.10.2; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1829
https://github.com/qutip/qutip/issues/1829:311,Usability,guid,guide-settings,311,"### Bug Description. QuTiP Qobj has a `tinyup()` method that sets to 0 all values lower than a certain threshold defined by `settings.auto_tidyup_atol`:. https://github.com/qutip/qutip/blob/f5bdb6dda3f121c253a4862235674fa8980b7681/qutip/qobj.py#L1383. As explained in [here](https://qutip.org/docs/latest/guide/guide-settings.html), the user should be able to change this value. . Playing with this options I realized that changing the `qutip.settings.auto_tidyup` to False works, but changing the `qutip.settings.auto_tidyup_atol` value doesn't. ### Code to Reproduce the Bug. ```shell; import qutip. qutip.settings.auto_tidyup_atol = 1e-30; a = qutip.Qobj(1); print(a * 1e-15); qutip.settings.auto_tidyup = False; print(a * 1e-15); ```. ### Code Output. ```shell; Quantum object: dims = [[1], [1]], shape = (1, 1), type = bra; Qobj data =; [[0.]]; Quantum object: dims = [[1], [1]], shape = (1, 1), type = bra; Qobj data =; [[1.e-15]]; ```. ### Expected Behaviour. The first print should have been:; ```; Quantum object: dims = [[1], [1]], shape = (1, 1), type = bra; Qobj data =; [[1.e-15]]; ```. When multiplying `a * 1e-15`, QuTiP calls the `__mul__` magic method, where `out.tidyup()` is called:. https://github.com/qutip/qutip/blob/f5bdb6dda3f121c253a4862235674fa8980b7681/qutip/qobj.py#L581. Tidyup contains one argument set to `settings.auto_tidyup_atol` by default. This value should change to 1e-30 when running `qutip.settings.auto_tidyup_atol = 1e-30`, but this never happens. Consequently, the output value is set to 0. ### Your Environment. ```shell; QuTiP Version: 4.6.3; Numpy Version: 1.22.3; Scipy Version: 1.8.0; Cython Version: None; Matplotlib Version: 3.5.1; Python Version: 3.10.2; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1829
https://github.com/qutip/qutip/pull/1830:101,Availability,toler,tolerance,101,"**Description**; As observed by @amitjansc, tidyup did not properly reacted to change to the default tolerance in settings.; Fix this and add tests. **Related issues or PRs**; Close #1829 . **Changelog**; Ensure `tidyup`'s default tolerance is read from settings at each call.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1830
https://github.com/qutip/qutip/pull/1830:231,Availability,toler,tolerance,231,"**Description**; As observed by @amitjansc, tidyup did not properly reacted to change to the default tolerance in settings.; Fix this and add tests. **Related issues or PRs**; Close #1829 . **Changelog**; Ensure `tidyup`'s default tolerance is read from settings at each call.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1830
https://github.com/qutip/qutip/pull/1830:142,Testability,test,tests,142,"**Description**; As observed by @amitjansc, tidyup did not properly reacted to change to the default tolerance in settings.; Fix this and add tests. **Related issues or PRs**; Close #1829 . **Changelog**; Ensure `tidyup`'s default tolerance is read from settings at each call.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1830
https://github.com/qutip/qutip/issues/1831:2213,Deployability,Install,Installed,2213,"-based-time-dependence), but removing the collapse operators and multiplying the constant hamiltonian with a very small value (and changing the time vector accordingly). More specifically, I create two different hamiltonians by multiplying `H0` by 1e-12 and 1e-13 respectively. After computing the `mesolve` for both hamiltonians, one can see that in the second case all values have been set to 0. . ### Code to Reproduce the Bug. ```shell; from qutip import basis, tensor, qeye, destroy, num, mesolve, settings; import numpy as np. settings.auto_tidyup = False. ustate = basis(3, 0); excited = basis(3, 1); ground = basis(3, 2). N = 2 # Set where to truncate Fock state for cavity; sigma_ge = tensor(qeye(N), ground * excited.dag()) # |g><e|; sigma_ue = tensor(qeye(N), ustate * excited.dag()) # |u><e|; a = tensor(destroy(N), qeye(3)); ada = tensor(num(N), qeye(3)). t = np.linspace(-15, 15 * 1e11, 10) # Define time vector; psi0 = tensor(basis(N, 0), ustate) # Define initial state. g = 5 # coupling strength; H0 = -g * (sigma_ge.dag() * a + a.dag() * sigma_ge) # time-independent term; H1 = (sigma_ue.dag() + sigma_ue) # time-dependent term. def H1_coeff(t, args):; return 9 * np.exp(-(t / 5.) ** 2). H_0 = [H0 * 1e-12, [H1, H1_coeff]]; H_1 = [H0 * 1e-13, [H1, H1_coeff]]; output_1 = mesolve(H_0, psi0, t, e_ops=[ada]); output_2 = mesolve(H_1, psi0, t, e_ops=[ada]); print(output_1.expect[0]); print(output_2.expect[0]); ```. ### Code Output. ```shell; [0. 0.48307748 0.87367156 0.3158159 0.03202178 0.64420957; 0.8108019 0.1667205 0.12343592 0.77580413]; [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]; ```. ### Expected Behaviour. The second print should NOT have been all 0s. ### Your Environment. ```shell; QuTiP Version: 4.6.3; Numpy Version: 1.22.3; Scipy Version: 1.8.0; Cython Version: None; Matplotlib Version: 3.5.1; Python Version: 3.10.2; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1831
https://github.com/qutip/qutip/issues/1831:338,Integrability,depend,dependence,338,"### Bug Description. This bug is related to the one explained in #1829. After setting to False the `auto_tidyup` variable in settings, `mesolve` still calls `tidyup` and sets to 0 all values lower than 1e-12. The following code is from a [QuTiP example](https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#function-based-time-dependence), but removing the collapse operators and multiplying the constant hamiltonian with a very small value (and changing the time vector accordingly). More specifically, I create two different hamiltonians by multiplying `H0` by 1e-12 and 1e-13 respectively. After computing the `mesolve` for both hamiltonians, one can see that in the second case all values have been set to 0. . ### Code to Reproduce the Bug. ```shell; from qutip import basis, tensor, qeye, destroy, num, mesolve, settings; import numpy as np. settings.auto_tidyup = False. ustate = basis(3, 0); excited = basis(3, 1); ground = basis(3, 2). N = 2 # Set where to truncate Fock state for cavity; sigma_ge = tensor(qeye(N), ground * excited.dag()) # |g><e|; sigma_ue = tensor(qeye(N), ustate * excited.dag()) # |u><e|; a = tensor(destroy(N), qeye(3)); ada = tensor(num(N), qeye(3)). t = np.linspace(-15, 15 * 1e11, 10) # Define time vector; psi0 = tensor(basis(N, 0), ustate) # Define initial state. g = 5 # coupling strength; H0 = -g * (sigma_ge.dag() * a + a.dag() * sigma_ge) # time-independent term; H1 = (sigma_ue.dag() + sigma_ue) # time-dependent term. def H1_coeff(t, args):; return 9 * np.exp(-(t / 5.) ** 2). H_0 = [H0 * 1e-12, [H1, H1_coeff]]; H_1 = [H0 * 1e-13, [H1, H1_coeff]]; output_1 = mesolve(H_0, psi0, t, e_ops=[ada]); output_2 = mesolve(H_1, psi0, t, e_ops=[ada]); print(output_1.expect[0]); print(output_2.expect[0]); ```. ### Code Output. ```shell; [0. 0.48307748 0.87367156 0.3158159 0.03202178 0.64420957; 0.8108019 0.1667205 0.12343592 0.77580413]; [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]; ```. ### Expected Behaviour. The second print should NOT have been all 0s. ### You",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1831
https://github.com/qutip/qutip/issues/1831:1456,Integrability,depend,dependent,1456,"-based-time-dependence), but removing the collapse operators and multiplying the constant hamiltonian with a very small value (and changing the time vector accordingly). More specifically, I create two different hamiltonians by multiplying `H0` by 1e-12 and 1e-13 respectively. After computing the `mesolve` for both hamiltonians, one can see that in the second case all values have been set to 0. . ### Code to Reproduce the Bug. ```shell; from qutip import basis, tensor, qeye, destroy, num, mesolve, settings; import numpy as np. settings.auto_tidyup = False. ustate = basis(3, 0); excited = basis(3, 1); ground = basis(3, 2). N = 2 # Set where to truncate Fock state for cavity; sigma_ge = tensor(qeye(N), ground * excited.dag()) # |g><e|; sigma_ue = tensor(qeye(N), ustate * excited.dag()) # |u><e|; a = tensor(destroy(N), qeye(3)); ada = tensor(num(N), qeye(3)). t = np.linspace(-15, 15 * 1e11, 10) # Define time vector; psi0 = tensor(basis(N, 0), ustate) # Define initial state. g = 5 # coupling strength; H0 = -g * (sigma_ge.dag() * a + a.dag() * sigma_ge) # time-independent term; H1 = (sigma_ue.dag() + sigma_ue) # time-dependent term. def H1_coeff(t, args):; return 9 * np.exp(-(t / 5.) ** 2). H_0 = [H0 * 1e-12, [H1, H1_coeff]]; H_1 = [H0 * 1e-13, [H1, H1_coeff]]; output_1 = mesolve(H_0, psi0, t, e_ops=[ada]); output_2 = mesolve(H_1, psi0, t, e_ops=[ada]); print(output_1.expect[0]); print(output_2.expect[0]); ```. ### Code Output. ```shell; [0. 0.48307748 0.87367156 0.3158159 0.03202178 0.64420957; 0.8108019 0.1667205 0.12343592 0.77580413]; [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]; ```. ### Expected Behaviour. The second print should NOT have been all 0s. ### Your Environment. ```shell; QuTiP Version: 4.6.3; Numpy Version: 1.22.3; Scipy Version: 1.8.0; Cython Version: None; Matplotlib Version: 3.5.1; Python Version: 3.10.2; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1831
https://github.com/qutip/qutip/issues/1831:113,Modifiability,variab,variable,113,"### Bug Description. This bug is related to the one explained in #1829. After setting to False the `auto_tidyup` variable in settings, `mesolve` still calls `tidyup` and sets to 0 all values lower than 1e-12. The following code is from a [QuTiP example](https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#function-based-time-dependence), but removing the collapse operators and multiplying the constant hamiltonian with a very small value (and changing the time vector accordingly). More specifically, I create two different hamiltonians by multiplying `H0` by 1e-12 and 1e-13 respectively. After computing the `mesolve` for both hamiltonians, one can see that in the second case all values have been set to 0. . ### Code to Reproduce the Bug. ```shell; from qutip import basis, tensor, qeye, destroy, num, mesolve, settings; import numpy as np. settings.auto_tidyup = False. ustate = basis(3, 0); excited = basis(3, 1); ground = basis(3, 2). N = 2 # Set where to truncate Fock state for cavity; sigma_ge = tensor(qeye(N), ground * excited.dag()) # |g><e|; sigma_ue = tensor(qeye(N), ustate * excited.dag()) # |u><e|; a = tensor(destroy(N), qeye(3)); ada = tensor(num(N), qeye(3)). t = np.linspace(-15, 15 * 1e11, 10) # Define time vector; psi0 = tensor(basis(N, 0), ustate) # Define initial state. g = 5 # coupling strength; H0 = -g * (sigma_ge.dag() * a + a.dag() * sigma_ge) # time-independent term; H1 = (sigma_ue.dag() + sigma_ue) # time-dependent term. def H1_coeff(t, args):; return 9 * np.exp(-(t / 5.) ** 2). H_0 = [H0 * 1e-12, [H1, H1_coeff]]; H_1 = [H0 * 1e-13, [H1, H1_coeff]]; output_1 = mesolve(H_0, psi0, t, e_ops=[ada]); output_2 = mesolve(H_1, psi0, t, e_ops=[ada]); print(output_1.expect[0]); print(output_2.expect[0]); ```. ### Code Output. ```shell; [0. 0.48307748 0.87367156 0.3158159 0.03202178 0.64420957; 0.8108019 0.1667205 0.12343592 0.77580413]; [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]; ```. ### Expected Behaviour. The second print should NOT have been all 0s. ### You",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1831
https://github.com/qutip/qutip/issues/1831:1320,Modifiability,coupling,coupling,1320,"-based-time-dependence), but removing the collapse operators and multiplying the constant hamiltonian with a very small value (and changing the time vector accordingly). More specifically, I create two different hamiltonians by multiplying `H0` by 1e-12 and 1e-13 respectively. After computing the `mesolve` for both hamiltonians, one can see that in the second case all values have been set to 0. . ### Code to Reproduce the Bug. ```shell; from qutip import basis, tensor, qeye, destroy, num, mesolve, settings; import numpy as np. settings.auto_tidyup = False. ustate = basis(3, 0); excited = basis(3, 1); ground = basis(3, 2). N = 2 # Set where to truncate Fock state for cavity; sigma_ge = tensor(qeye(N), ground * excited.dag()) # |g><e|; sigma_ue = tensor(qeye(N), ustate * excited.dag()) # |u><e|; a = tensor(destroy(N), qeye(3)); ada = tensor(num(N), qeye(3)). t = np.linspace(-15, 15 * 1e11, 10) # Define time vector; psi0 = tensor(basis(N, 0), ustate) # Define initial state. g = 5 # coupling strength; H0 = -g * (sigma_ge.dag() * a + a.dag() * sigma_ge) # time-independent term; H1 = (sigma_ue.dag() + sigma_ue) # time-dependent term. def H1_coeff(t, args):; return 9 * np.exp(-(t / 5.) ** 2). H_0 = [H0 * 1e-12, [H1, H1_coeff]]; H_1 = [H0 * 1e-13, [H1, H1_coeff]]; output_1 = mesolve(H_0, psi0, t, e_ops=[ada]); output_2 = mesolve(H_1, psi0, t, e_ops=[ada]); print(output_1.expect[0]); print(output_2.expect[0]); ```. ### Code Output. ```shell; [0. 0.48307748 0.87367156 0.3158159 0.03202178 0.64420957; 0.8108019 0.1667205 0.12343592 0.77580413]; [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]; ```. ### Expected Behaviour. The second print should NOT have been all 0s. ### Your Environment. ```shell; QuTiP Version: 4.6.3; Numpy Version: 1.22.3; Scipy Version: 1.8.0; Cython Version: None; Matplotlib Version: 3.5.1; Python Version: 3.10.2; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1831
https://github.com/qutip/qutip/issues/1831:284,Usability,guid,guide,284,"### Bug Description. This bug is related to the one explained in #1829. After setting to False the `auto_tidyup` variable in settings, `mesolve` still calls `tidyup` and sets to 0 all values lower than 1e-12. The following code is from a [QuTiP example](https://qutip.org/docs/latest/guide/dynamics/dynamics-time.html#function-based-time-dependence), but removing the collapse operators and multiplying the constant hamiltonian with a very small value (and changing the time vector accordingly). More specifically, I create two different hamiltonians by multiplying `H0` by 1e-12 and 1e-13 respectively. After computing the `mesolve` for both hamiltonians, one can see that in the second case all values have been set to 0. . ### Code to Reproduce the Bug. ```shell; from qutip import basis, tensor, qeye, destroy, num, mesolve, settings; import numpy as np. settings.auto_tidyup = False. ustate = basis(3, 0); excited = basis(3, 1); ground = basis(3, 2). N = 2 # Set where to truncate Fock state for cavity; sigma_ge = tensor(qeye(N), ground * excited.dag()) # |g><e|; sigma_ue = tensor(qeye(N), ustate * excited.dag()) # |u><e|; a = tensor(destroy(N), qeye(3)); ada = tensor(num(N), qeye(3)). t = np.linspace(-15, 15 * 1e11, 10) # Define time vector; psi0 = tensor(basis(N, 0), ustate) # Define initial state. g = 5 # coupling strength; H0 = -g * (sigma_ge.dag() * a + a.dag() * sigma_ge) # time-independent term; H1 = (sigma_ue.dag() + sigma_ue) # time-dependent term. def H1_coeff(t, args):; return 9 * np.exp(-(t / 5.) ** 2). H_0 = [H0 * 1e-12, [H1, H1_coeff]]; H_1 = [H0 * 1e-13, [H1, H1_coeff]]; output_1 = mesolve(H_0, psi0, t, e_ops=[ada]); output_2 = mesolve(H_1, psi0, t, e_ops=[ada]); print(output_1.expect[0]); print(output_2.expect[0]); ```. ### Code Output. ```shell; [0. 0.48307748 0.87367156 0.3158159 0.03202178 0.64420957; 0.8108019 0.1667205 0.12343592 0.77580413]; [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]; ```. ### Expected Behaviour. The second print should NOT have been all 0s. ### You",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1831
https://github.com/qutip/qutip/pull/1832:214,Availability,toler,tolerance,214,"**Description**; `QobjEvo` do not use settings value when using tidyup, thus solver do not respond to changes in settings as seen in #1831.; With this, `QobjEvo` will use `settings.auto_tidyup_atol` as the default tolerance. However it will not respond to `settings.auto_tidyup` since cython support for CSR is v4 is flacky and matrix with `0` stored can cause errors. ; Jake's implementation of CSR in v5 solves this. **Related issues or PRs**; Close #1831. **Changelog**; QobjEvo.tidyup use settings.auto_tidyup_atol",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1832
https://github.com/qutip/qutip/pull/1832:361,Availability,error,errors,361,"**Description**; `QobjEvo` do not use settings value when using tidyup, thus solver do not respond to changes in settings as seen in #1831.; With this, `QobjEvo` will use `settings.auto_tidyup_atol` as the default tolerance. However it will not respond to `settings.auto_tidyup` since cython support for CSR is v4 is flacky and matrix with `0` stored can cause errors. ; Jake's implementation of CSR in v5 solves this. **Related issues or PRs**; Close #1831. **Changelog**; QobjEvo.tidyup use settings.auto_tidyup_atol",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1832
https://github.com/qutip/qutip/issues/1833:675,Performance,optimiz,optimizing,675,"### Problem Description. The following paper was published a few week ago: [Arnoldi-Lindblad time evolution: Faster-than-the-clock algorithm for the spectrum of time-independent and Floquet open quantum systems](https://quantum-journal.org/papers/q-2022-02-10-649/). The results show an speed-up in the diagonalisation of arbitrary Liouvillian operators. It might be interesting to keep an eye on this and possibly implement it in the future. ### Proposed Solution. The authors themselves (@DHuybrechts) have uploaded the code used for the paper at https://github.com/DHuybrechts/Arnoldi-Lindblad-time-evolution so. if they agree, it would just imply organizing and possibly optimizing their code. ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1833
https://github.com/qutip/qutip/issues/1834:293,Availability,error,error,293,"Hello,. I have a time dependent hamiltionian with a simple polynomial function, whose gradient I find using Numpy's gradient function. I also specify the step size that the gradient function should use. However, when passing the function and its gradient to Qutips mesolve function, i get the error:. ValueError: Shape of array too small to calculate a numerical gradient, at least (edge_order + 1) elements are required. I think this is because usually you would pass the whole array of time which Numpy would calculate the gradient of, but in the case of mesolve in qutip, we are passing a float instead of an array, i.e. calculating 1 time point which numpy cannot use.; I need the gradient function and its step size, rather than using the analytical gradient as a simply function due to the simulations I am trying to make. I would appreciate any and all insight into this problem, thank you. ```python; import scipy as sp; import numpy; from qutip import *; import matplotlib.pyplot as plt. # pre define transport functions (time dependent functions for use in hamiltonian); def q_c(t,t_f,d): #position of ion; return d*(10*(t/t_f)**3 - 15*(t/t_f)**4 + 6*(t/t_f)**5). def grad_q_c(t,t_f,step,d): #velocity; return np.gradient(q_c(t,t_f,d),step). def grad2_q_c(t,t_f,step,d): #acceleration; return np.gradient(grad_q_c(t,t_f,step,d),step). def q_0(t,args): #position of trap (harmonic well); '''; t: time step; t_f: final time (total time); step: step size for gradient function; d: total distance of transport'''; t_f,step,d = args['t_f'],args['step'],args['d']; return grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d). def q_02(t,args): #position of trap; t_f,step,d = args['t_f'],args['step'],args['d']; return (grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d))**2. # set up initial conditions and parameters for ion; N = 200 # hilbert space dimension ; w = 2 * pi * 200e3 # angulr frequency of oscillator (Hz); m = 171 * 1.66e-27 # mass of ion (kg); hbar = 1 # reduced plancks constant (eVs) . ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1834
https://github.com/qutip/qutip/issues/1834:1968,Energy Efficiency,reduce,reduced,1968,"e any and all insight into this problem, thank you. ```python; import scipy as sp; import numpy; from qutip import *; import matplotlib.pyplot as plt. # pre define transport functions (time dependent functions for use in hamiltonian); def q_c(t,t_f,d): #position of ion; return d*(10*(t/t_f)**3 - 15*(t/t_f)**4 + 6*(t/t_f)**5). def grad_q_c(t,t_f,step,d): #velocity; return np.gradient(q_c(t,t_f,d),step). def grad2_q_c(t,t_f,step,d): #acceleration; return np.gradient(grad_q_c(t,t_f,step,d),step). def q_0(t,args): #position of trap (harmonic well); '''; t: time step; t_f: final time (total time); step: step size for gradient function; d: total distance of transport'''; t_f,step,d = args['t_f'],args['step'],args['d']; return grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d). def q_02(t,args): #position of trap; t_f,step,d = args['t_f'],args['step'],args['d']; return (grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d))**2. # set up initial conditions and parameters for ion; N = 200 # hilbert space dimension ; w = 2 * pi * 200e3 # angulr frequency of oscillator (Hz); m = 171 * 1.66e-27 # mass of ion (kg); hbar = 1 # reduced plancks constant (eVs) . # set up operators; a = destroy(N); n = a.dag()*a; x = np.sqrt(hbar/(2*m*w))*(a + a.dag()) #position operator (m); p = 1j*np.sqrt((hbar*m*w)/2) * (a - a.dag()) #momentum operator (kg(m/s)). # duration of ion transport; T = 1; t_f = (2*pi*T)/w; t_list = linspace(0,t_f,1001). # total distance travelled; dist = 220e-6 # distance in (m). # pre-define arguments; args = {'d' : dist, 't_f' : t_f, 'step' : t_list[1]-t_list[0]}. # hamiltonian ; H_0 = (p**2)/(2*m) + (m/2)*(w**2)*(x**2). H = [H_0,; [-m*(w**2)*x,q_0], ; [(m/2)*(w**2)*qeye(N),q_02]]. # initial state; psi0 = basis(N,0). # solve; result = mesolve(H, # hamiltonian; psi0, # initial state; t_list, # time; [], # expectation operators; args=args, # arguments to time dependent function; options=Options(nsteps=1e9), # number of steps solver can take; progress_bar=True) # progress bar; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1834
https://github.com/qutip/qutip/issues/1834:22,Integrability,depend,dependent,22,"Hello,. I have a time dependent hamiltionian with a simple polynomial function, whose gradient I find using Numpy's gradient function. I also specify the step size that the gradient function should use. However, when passing the function and its gradient to Qutips mesolve function, i get the error:. ValueError: Shape of array too small to calculate a numerical gradient, at least (edge_order + 1) elements are required. I think this is because usually you would pass the whole array of time which Numpy would calculate the gradient of, but in the case of mesolve in qutip, we are passing a float instead of an array, i.e. calculating 1 time point which numpy cannot use.; I need the gradient function and its step size, rather than using the analytical gradient as a simply function due to the simulations I am trying to make. I would appreciate any and all insight into this problem, thank you. ```python; import scipy as sp; import numpy; from qutip import *; import matplotlib.pyplot as plt. # pre define transport functions (time dependent functions for use in hamiltonian); def q_c(t,t_f,d): #position of ion; return d*(10*(t/t_f)**3 - 15*(t/t_f)**4 + 6*(t/t_f)**5). def grad_q_c(t,t_f,step,d): #velocity; return np.gradient(q_c(t,t_f,d),step). def grad2_q_c(t,t_f,step,d): #acceleration; return np.gradient(grad_q_c(t,t_f,step,d),step). def q_0(t,args): #position of trap (harmonic well); '''; t: time step; t_f: final time (total time); step: step size for gradient function; d: total distance of transport'''; t_f,step,d = args['t_f'],args['step'],args['d']; return grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d). def q_02(t,args): #position of trap; t_f,step,d = args['t_f'],args['step'],args['d']; return (grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d))**2. # set up initial conditions and parameters for ion; N = 200 # hilbert space dimension ; w = 2 * pi * 200e3 # angulr frequency of oscillator (Hz); m = 171 * 1.66e-27 # mass of ion (kg); hbar = 1 # reduced plancks constant (eVs) . ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1834
https://github.com/qutip/qutip/issues/1834:1036,Integrability,depend,dependent,1036,"e gradient I find using Numpy's gradient function. I also specify the step size that the gradient function should use. However, when passing the function and its gradient to Qutips mesolve function, i get the error:. ValueError: Shape of array too small to calculate a numerical gradient, at least (edge_order + 1) elements are required. I think this is because usually you would pass the whole array of time which Numpy would calculate the gradient of, but in the case of mesolve in qutip, we are passing a float instead of an array, i.e. calculating 1 time point which numpy cannot use.; I need the gradient function and its step size, rather than using the analytical gradient as a simply function due to the simulations I am trying to make. I would appreciate any and all insight into this problem, thank you. ```python; import scipy as sp; import numpy; from qutip import *; import matplotlib.pyplot as plt. # pre define transport functions (time dependent functions for use in hamiltonian); def q_c(t,t_f,d): #position of ion; return d*(10*(t/t_f)**3 - 15*(t/t_f)**4 + 6*(t/t_f)**5). def grad_q_c(t,t_f,step,d): #velocity; return np.gradient(q_c(t,t_f,d),step). def grad2_q_c(t,t_f,step,d): #acceleration; return np.gradient(grad_q_c(t,t_f,step,d),step). def q_0(t,args): #position of trap (harmonic well); '''; t: time step; t_f: final time (total time); step: step size for gradient function; d: total distance of transport'''; t_f,step,d = args['t_f'],args['step'],args['d']; return grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d). def q_02(t,args): #position of trap; t_f,step,d = args['t_f'],args['step'],args['d']; return (grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d))**2. # set up initial conditions and parameters for ion; N = 200 # hilbert space dimension ; w = 2 * pi * 200e3 # angulr frequency of oscillator (Hz); m = 171 * 1.66e-27 # mass of ion (kg); hbar = 1 # reduced plancks constant (eVs) . # set up operators; a = destroy(N); n = a.dag()*a; x = np.sqrt(hbar/(2*m*w))*(a + a.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1834
https://github.com/qutip/qutip/issues/1834:2724,Integrability,depend,dependent,2724,"e any and all insight into this problem, thank you. ```python; import scipy as sp; import numpy; from qutip import *; import matplotlib.pyplot as plt. # pre define transport functions (time dependent functions for use in hamiltonian); def q_c(t,t_f,d): #position of ion; return d*(10*(t/t_f)**3 - 15*(t/t_f)**4 + 6*(t/t_f)**5). def grad_q_c(t,t_f,step,d): #velocity; return np.gradient(q_c(t,t_f,d),step). def grad2_q_c(t,t_f,step,d): #acceleration; return np.gradient(grad_q_c(t,t_f,step,d),step). def q_0(t,args): #position of trap (harmonic well); '''; t: time step; t_f: final time (total time); step: step size for gradient function; d: total distance of transport'''; t_f,step,d = args['t_f'],args['step'],args['d']; return grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d). def q_02(t,args): #position of trap; t_f,step,d = args['t_f'],args['step'],args['d']; return (grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d))**2. # set up initial conditions and parameters for ion; N = 200 # hilbert space dimension ; w = 2 * pi * 200e3 # angulr frequency of oscillator (Hz); m = 171 * 1.66e-27 # mass of ion (kg); hbar = 1 # reduced plancks constant (eVs) . # set up operators; a = destroy(N); n = a.dag()*a; x = np.sqrt(hbar/(2*m*w))*(a + a.dag()) #position operator (m); p = 1j*np.sqrt((hbar*m*w)/2) * (a - a.dag()) #momentum operator (kg(m/s)). # duration of ion transport; T = 1; t_f = (2*pi*T)/w; t_list = linspace(0,t_f,1001). # total distance travelled; dist = 220e-6 # distance in (m). # pre-define arguments; args = {'d' : dist, 't_f' : t_f, 'step' : t_list[1]-t_list[0]}. # hamiltonian ; H_0 = (p**2)/(2*m) + (m/2)*(w**2)*(x**2). H = [H_0,; [-m*(w**2)*x,q_0], ; [(m/2)*(w**2)*qeye(N),q_02]]. # initial state; psi0 = basis(N,0). # solve; result = mesolve(H, # hamiltonian; psi0, # initial state; t_list, # time; [], # expectation operators; args=args, # arguments to time dependent function; options=Options(nsteps=1e9), # number of steps solver can take; progress_bar=True) # progress bar; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1834
https://github.com/qutip/qutip/issues/1834:52,Usability,simpl,simple,52,"Hello,. I have a time dependent hamiltionian with a simple polynomial function, whose gradient I find using Numpy's gradient function. I also specify the step size that the gradient function should use. However, when passing the function and its gradient to Qutips mesolve function, i get the error:. ValueError: Shape of array too small to calculate a numerical gradient, at least (edge_order + 1) elements are required. I think this is because usually you would pass the whole array of time which Numpy would calculate the gradient of, but in the case of mesolve in qutip, we are passing a float instead of an array, i.e. calculating 1 time point which numpy cannot use.; I need the gradient function and its step size, rather than using the analytical gradient as a simply function due to the simulations I am trying to make. I would appreciate any and all insight into this problem, thank you. ```python; import scipy as sp; import numpy; from qutip import *; import matplotlib.pyplot as plt. # pre define transport functions (time dependent functions for use in hamiltonian); def q_c(t,t_f,d): #position of ion; return d*(10*(t/t_f)**3 - 15*(t/t_f)**4 + 6*(t/t_f)**5). def grad_q_c(t,t_f,step,d): #velocity; return np.gradient(q_c(t,t_f,d),step). def grad2_q_c(t,t_f,step,d): #acceleration; return np.gradient(grad_q_c(t,t_f,step,d),step). def q_0(t,args): #position of trap (harmonic well); '''; t: time step; t_f: final time (total time); step: step size for gradient function; d: total distance of transport'''; t_f,step,d = args['t_f'],args['step'],args['d']; return grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d). def q_02(t,args): #position of trap; t_f,step,d = args['t_f'],args['step'],args['d']; return (grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d))**2. # set up initial conditions and parameters for ion; N = 200 # hilbert space dimension ; w = 2 * pi * 200e3 # angulr frequency of oscillator (Hz); m = 171 * 1.66e-27 # mass of ion (kg); hbar = 1 # reduced plancks constant (eVs) . ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1834
https://github.com/qutip/qutip/issues/1834:769,Usability,simpl,simply,769,"Hello,. I have a time dependent hamiltionian with a simple polynomial function, whose gradient I find using Numpy's gradient function. I also specify the step size that the gradient function should use. However, when passing the function and its gradient to Qutips mesolve function, i get the error:. ValueError: Shape of array too small to calculate a numerical gradient, at least (edge_order + 1) elements are required. I think this is because usually you would pass the whole array of time which Numpy would calculate the gradient of, but in the case of mesolve in qutip, we are passing a float instead of an array, i.e. calculating 1 time point which numpy cannot use.; I need the gradient function and its step size, rather than using the analytical gradient as a simply function due to the simulations I am trying to make. I would appreciate any and all insight into this problem, thank you. ```python; import scipy as sp; import numpy; from qutip import *; import matplotlib.pyplot as plt. # pre define transport functions (time dependent functions for use in hamiltonian); def q_c(t,t_f,d): #position of ion; return d*(10*(t/t_f)**3 - 15*(t/t_f)**4 + 6*(t/t_f)**5). def grad_q_c(t,t_f,step,d): #velocity; return np.gradient(q_c(t,t_f,d),step). def grad2_q_c(t,t_f,step,d): #acceleration; return np.gradient(grad_q_c(t,t_f,step,d),step). def q_0(t,args): #position of trap (harmonic well); '''; t: time step; t_f: final time (total time); step: step size for gradient function; d: total distance of transport'''; t_f,step,d = args['t_f'],args['step'],args['d']; return grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d). def q_02(t,args): #position of trap; t_f,step,d = args['t_f'],args['step'],args['d']; return (grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d))**2. # set up initial conditions and parameters for ion; N = 200 # hilbert space dimension ; w = 2 * pi * 200e3 # angulr frequency of oscillator (Hz); m = 171 * 1.66e-27 # mass of ion (kg); hbar = 1 # reduced plancks constant (eVs) . ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1834
https://github.com/qutip/qutip/issues/1834:2829,Usability,progress bar,progress bar,2829,"e any and all insight into this problem, thank you. ```python; import scipy as sp; import numpy; from qutip import *; import matplotlib.pyplot as plt. # pre define transport functions (time dependent functions for use in hamiltonian); def q_c(t,t_f,d): #position of ion; return d*(10*(t/t_f)**3 - 15*(t/t_f)**4 + 6*(t/t_f)**5). def grad_q_c(t,t_f,step,d): #velocity; return np.gradient(q_c(t,t_f,d),step). def grad2_q_c(t,t_f,step,d): #acceleration; return np.gradient(grad_q_c(t,t_f,step,d),step). def q_0(t,args): #position of trap (harmonic well); '''; t: time step; t_f: final time (total time); step: step size for gradient function; d: total distance of transport'''; t_f,step,d = args['t_f'],args['step'],args['d']; return grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d). def q_02(t,args): #position of trap; t_f,step,d = args['t_f'],args['step'],args['d']; return (grad2_q_c(t,t_f,step,d)/(w_z**2) + q_c(t,t_f,d))**2. # set up initial conditions and parameters for ion; N = 200 # hilbert space dimension ; w = 2 * pi * 200e3 # angulr frequency of oscillator (Hz); m = 171 * 1.66e-27 # mass of ion (kg); hbar = 1 # reduced plancks constant (eVs) . # set up operators; a = destroy(N); n = a.dag()*a; x = np.sqrt(hbar/(2*m*w))*(a + a.dag()) #position operator (m); p = 1j*np.sqrt((hbar*m*w)/2) * (a - a.dag()) #momentum operator (kg(m/s)). # duration of ion transport; T = 1; t_f = (2*pi*T)/w; t_list = linspace(0,t_f,1001). # total distance travelled; dist = 220e-6 # distance in (m). # pre-define arguments; args = {'d' : dist, 't_f' : t_f, 'step' : t_list[1]-t_list[0]}. # hamiltonian ; H_0 = (p**2)/(2*m) + (m/2)*(w**2)*(x**2). H = [H_0,; [-m*(w**2)*x,q_0], ; [(m/2)*(w**2)*qeye(N),q_02]]. # initial state; psi0 = basis(N,0). # solve; result = mesolve(H, # hamiltonian; psi0, # initial state; t_list, # time; [], # expectation operators; args=args, # arguments to time dependent function; options=Options(nsteps=1e9), # number of steps solver can take; progress_bar=True) # progress bar; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1834
https://github.com/qutip/qutip/pull/1835:98,Deployability,Release,Release,98,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 9.0.0 to 9.0.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>9.0.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/9.0.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>In show_file, use os.remove to remove temporary images. CVE-2022-24303 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6010"">#6010</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>, <a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Restrict builtins within lambdas for ImageMath.eval. CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6009"">#6009</a> [radarhere]</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.1 (2022-02-03)</h2>; <ul>; <li>; <p>In show_file, use os.remove to remove temporary images. CVE-2022-24303 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6010"">#6010</a>; [radarhere, hugovk]</p>; </li>; <li>; <p>Restrict builtins within lambdas for ImageMath.eval. CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6009"">#6009</a>; [radarhere]</p>; </li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/6deac9e3a23caffbfdd75c00d3f0a1cd36cdbd5d""><code>6deac9e</code></a> 9.0.1 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/c04d812b902356b8c20ee2ab881e1d96f7d66b4b""><code>c04d812</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:192,Deployability,release,releases,192,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 9.0.0 to 9.0.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>9.0.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/9.0.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>In show_file, use os.remove to remove temporary images. CVE-2022-24303 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6010"">#6010</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>, <a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Restrict builtins within lambdas for ImageMath.eval. CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6009"">#6009</a> [radarhere]</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.1 (2022-02-03)</h2>; <ul>; <li>; <p>In show_file, use os.remove to remove temporary images. CVE-2022-24303 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6010"">#6010</a>; [radarhere, hugovk]</p>; </li>; <li>; <p>Restrict builtins within lambdas for ImageMath.eval. CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6009"">#6009</a>; [radarhere]</p>; </li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/6deac9e3a23caffbfdd75c00d3f0a1cd36cdbd5d""><code>6deac9e</code></a> 9.0.1 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/c04d812b902356b8c20ee2ab881e1d96f7d66b4b""><code>c04d812</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:211,Deployability,release,releases,211,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 9.0.0 to 9.0.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>9.0.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/9.0.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>In show_file, use os.remove to remove temporary images. CVE-2022-24303 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6010"">#6010</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>, <a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Restrict builtins within lambdas for ImageMath.eval. CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6009"">#6009</a> [radarhere]</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.1 (2022-02-03)</h2>; <ul>; <li>; <p>In show_file, use os.remove to remove temporary images. CVE-2022-24303 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6010"">#6010</a>; [radarhere, hugovk]</p>; </li>; <li>; <p>Restrict builtins within lambdas for ImageMath.eval. CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6009"">#6009</a>; [radarhere]</p>; </li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/6deac9e3a23caffbfdd75c00d3f0a1cd36cdbd5d""><code>6deac9e</code></a> 9.0.1 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/c04d812b902356b8c20ee2ab881e1d96f7d66b4b""><code>c04d812</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:317,Deployability,release,releasenotes,317,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 9.0.0 to 9.0.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>9.0.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/9.0.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>In show_file, use os.remove to remove temporary images. CVE-2022-24303 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6010"">#6010</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>, <a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Restrict builtins within lambdas for ImageMath.eval. CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6009"">#6009</a> [radarhere]</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.1 (2022-02-03)</h2>; <ul>; <li>; <p>In show_file, use os.remove to remove temporary images. CVE-2022-24303 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6010"">#6010</a>; [radarhere, hugovk]</p>; </li>; <li>; <p>Restrict builtins within lambdas for ImageMath.eval. CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6009"">#6009</a>; [radarhere]</p>; </li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/6deac9e3a23caffbfdd75c00d3f0a1cd36cdbd5d""><code>6deac9e</code></a> 9.0.1 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/c04d812b902356b8c20ee2ab881e1d96f7d66b4b""><code>c04d812</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:382,Deployability,release,releasenotes,382,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 9.0.0 to 9.0.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>9.0.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/9.0.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>In show_file, use os.remove to remove temporary images. CVE-2022-24303 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6010"">#6010</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>, <a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Restrict builtins within lambdas for ImageMath.eval. CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6009"">#6009</a> [radarhere]</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.1 (2022-02-03)</h2>; <ul>; <li>; <p>In show_file, use os.remove to remove temporary images. CVE-2022-24303 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6010"">#6010</a>; [radarhere, hugovk]</p>; </li>; <li>; <p>Restrict builtins within lambdas for ImageMath.eval. CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6009"">#6009</a>; [radarhere]</p>; </li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/6deac9e3a23caffbfdd75c00d3f0a1cd36cdbd5d""><code>6deac9e</code></a> 9.0.1 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/c04d812b902356b8c20ee2ab881e1d96f7d66b4b""><code>c04d812</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:1934,Deployability,Update,Update,1934,"/6009"">#6009</a> [radarhere]</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.1 (2022-02-03)</h2>; <ul>; <li>; <p>In show_file, use os.remove to remove temporary images. CVE-2022-24303 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6010"">#6010</a>; [radarhere, hugovk]</p>; </li>; <li>; <p>Restrict builtins within lambdas for ImageMath.eval. CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6009"">#6009</a>; [radarhere]</p>; </li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/6deac9e3a23caffbfdd75c00d3f0a1cd36cdbd5d""><code>6deac9e</code></a> 9.0.1 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/c04d812b902356b8c20ee2ab881e1d96f7d66b4b""><code>c04d812</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/4fabec36197735438c80c174d018498be606c46c""><code>4fabec3</code></a> Added release notes for 9.0.1</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/02affaa491df37117a7562e6ba6ac52c4c871195""><code>02affaa</code></a> Added delay after opening image with xdg-open</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/ca0b58521881b95e47ea49d960d13d1c3dac823d""><code>ca0b585</code></a> Updated formatting</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/427221ef5f19157001bf8b1ad7cfe0b905ca8c26""><code>427221e</code></a> In show_file, use os.remove to remove temporary images</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/c930be0758ac02cf15a2b8d5409d50d443550581""><code>c930be0</code></a> Restrict builtins within lambdas for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/com",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:2102,Deployability,release,release,2102,"llow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.1 (2022-02-03)</h2>; <ul>; <li>; <p>In show_file, use os.remove to remove temporary images. CVE-2022-24303 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6010"">#6010</a>; [radarhere, hugovk]</p>; </li>; <li>; <p>Restrict builtins within lambdas for ImageMath.eval. CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6009"">#6009</a>; [radarhere]</p>; </li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/6deac9e3a23caffbfdd75c00d3f0a1cd36cdbd5d""><code>6deac9e</code></a> 9.0.1 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/c04d812b902356b8c20ee2ab881e1d96f7d66b4b""><code>c04d812</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/4fabec36197735438c80c174d018498be606c46c""><code>4fabec3</code></a> Added release notes for 9.0.1</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/02affaa491df37117a7562e6ba6ac52c4c871195""><code>02affaa</code></a> Added delay after opening image with xdg-open</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/ca0b58521881b95e47ea49d960d13d1c3dac823d""><code>ca0b585</code></a> Updated formatting</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/427221ef5f19157001bf8b1ad7cfe0b905ca8c26""><code>427221e</code></a> In show_file, use os.remove to remove temporary images</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/c930be0758ac02cf15a2b8d5409d50d443550581""><code>c930be0</code></a> Restrict builtins within lambdas for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/75b69dd239a4647032f67a80d9b444228af2b736""><code>75b69dd</code></a> Dont need to pin for GHA</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cd938a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:2438,Deployability,Update,Updated,2438," lambdas for ImageMath.eval. CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6009"">#6009</a>; [radarhere]</p>; </li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/6deac9e3a23caffbfdd75c00d3f0a1cd36cdbd5d""><code>6deac9e</code></a> 9.0.1 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/c04d812b902356b8c20ee2ab881e1d96f7d66b4b""><code>c04d812</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/4fabec36197735438c80c174d018498be606c46c""><code>4fabec3</code></a> Added release notes for 9.0.1</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/02affaa491df37117a7562e6ba6ac52c4c871195""><code>02affaa</code></a> Added delay after opening image with xdg-open</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/ca0b58521881b95e47ea49d960d13d1c3dac823d""><code>ca0b585</code></a> Updated formatting</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/427221ef5f19157001bf8b1ad7cfe0b905ca8c26""><code>427221e</code></a> In show_file, use os.remove to remove temporary images</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/c930be0758ac02cf15a2b8d5409d50d443550581""><code>c930be0</code></a> Restrict builtins within lambdas for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/75b69dd239a4647032f67a80d9b444228af2b736""><code>75b69dd</code></a> Dont need to pin for GHA</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cd938a7744cb46e2ea525a0c3dd79aa08f98c150""><code>cd938a7</code></a> Autolink CWE numbers with sphinx-issues</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2e9c461ca417083c43145a991bf9e1ec93237d89""><code>2e9c461</code></a> Add CVE IDs</li>; <li>See full diff in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.0...9.0.1"">compare vi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:3737,Deployability,update,updates,3737,"758ac02cf15a2b8d5409d50d443550581""><code>c930be0</code></a> Restrict builtins within lambdas for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/75b69dd239a4647032f67a80d9b444228af2b736""><code>75b69dd</code></a> Dont need to pin for GHA</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cd938a7744cb46e2ea525a0c3dd79aa08f98c150""><code>cd938a7</code></a> Autolink CWE numbers with sphinx-issues</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2e9c461ca417083c43145a991bf9e1ec93237d89""><code>2e9c461</code></a> Add CVE IDs</li>; <li>See full diff in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:4889,Deployability,upgrade,upgrade,4889,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:5065,Deployability,upgrade,upgrade,5065,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:5235,Deployability,upgrade,upgrade,5235,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:547,Integrability,depend,dependabot,547,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 9.0.0 to 9.0.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>9.0.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/9.0.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>In show_file, use os.remove to remove temporary images. CVE-2022-24303 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6010"">#6010</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>, <a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Restrict builtins within lambdas for ImageMath.eval. CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6009"">#6009</a> [radarhere]</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.1 (2022-02-03)</h2>; <ul>; <li>; <p>In show_file, use os.remove to remove temporary images. CVE-2022-24303 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6010"">#6010</a>; [radarhere, hugovk]</p>; </li>; <li>; <p>Restrict builtins within lambdas for ImageMath.eval. CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6009"">#6009</a>; [radarhere]</p>; </li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/6deac9e3a23caffbfdd75c00d3f0a1cd36cdbd5d""><code>6deac9e</code></a> 9.0.1 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/c04d812b902356b8c20ee2ab881e1d96f7d66b4b""><code>c04d812</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:850,Integrability,depend,dependabot,850,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 9.0.0 to 9.0.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>9.0.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/9.0.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>In show_file, use os.remove to remove temporary images. CVE-2022-24303 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6010"">#6010</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>, <a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Restrict builtins within lambdas for ImageMath.eval. CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6009"">#6009</a> [radarhere]</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.1 (2022-02-03)</h2>; <ul>; <li>; <p>In show_file, use os.remove to remove temporary images. CVE-2022-24303 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6010"">#6010</a>; [radarhere, hugovk]</p>; </li>; <li>; <p>Restrict builtins within lambdas for ImageMath.eval. CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6009"">#6009</a>; [radarhere]</p>; </li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/6deac9e3a23caffbfdd75c00d3f0a1cd36cdbd5d""><code>6deac9e</code></a> 9.0.1 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/c04d812b902356b8c20ee2ab881e1d96f7d66b4b""><code>c04d812</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:1290,Integrability,depend,dependabot,1290,"dthedocs.io/en/stable/releasenotes/9.0.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>In show_file, use os.remove to remove temporary images. CVE-2022-24303 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6010"">#6010</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>, <a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Restrict builtins within lambdas for ImageMath.eval. CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6009"">#6009</a> [radarhere]</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.1 (2022-02-03)</h2>; <ul>; <li>; <p>In show_file, use os.remove to remove temporary images. CVE-2022-24303 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6010"">#6010</a>; [radarhere, hugovk]</p>; </li>; <li>; <p>Restrict builtins within lambdas for ImageMath.eval. CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6009"">#6009</a>; [radarhere]</p>; </li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/6deac9e3a23caffbfdd75c00d3f0a1cd36cdbd5d""><code>6deac9e</code></a> 9.0.1 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/c04d812b902356b8c20ee2ab881e1d96f7d66b4b""><code>c04d812</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/4fabec36197735438c80c174d018498be606c46c""><code>4fabec3</code></a> Added release notes for 9.0.1</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/02affaa491df37117a7562e6ba6ac52c4c871195""><code>02affaa</code></a> Added delay after opening image with ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:1492,Integrability,depend,dependabot,1492,". CVE-2022-24303 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6010"">#6010</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>, <a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>; <li>Restrict builtins within lambdas for ImageMath.eval. CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6009"">#6009</a> [radarhere]</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/main/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>9.0.1 (2022-02-03)</h2>; <ul>; <li>; <p>In show_file, use os.remove to remove temporary images. CVE-2022-24303 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6010"">#6010</a>; [radarhere, hugovk]</p>; </li>; <li>; <p>Restrict builtins within lambdas for ImageMath.eval. CVE-2022-22817 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6009"">#6009</a>; [radarhere]</p>; </li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/6deac9e3a23caffbfdd75c00d3f0a1cd36cdbd5d""><code>6deac9e</code></a> 9.0.1 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/c04d812b902356b8c20ee2ab881e1d96f7d66b4b""><code>c04d812</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/4fabec36197735438c80c174d018498be606c46c""><code>4fabec3</code></a> Added release notes for 9.0.1</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/02affaa491df37117a7562e6ba6ac52c4c871195""><code>02affaa</code></a> Added delay after opening image with xdg-open</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/ca0b58521881b95e47ea49d960d13d1c3dac823d""><code>ca0b585</code></a> Updated formatting</li>; <li><a href=""https://github.com/pyt",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:3458,Integrability,Depend,Dependabot,3458,"ithub.com/python-pillow/Pillow/commit/427221ef5f19157001bf8b1ad7cfe0b905ca8c26""><code>427221e</code></a> In show_file, use os.remove to remove temporary images</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/c930be0758ac02cf15a2b8d5409d50d443550581""><code>c930be0</code></a> Restrict builtins within lambdas for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/75b69dd239a4647032f67a80d9b444228af2b736""><code>75b69dd</code></a> Dont need to pin for GHA</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cd938a7744cb46e2ea525a0c3dd79aa08f98c150""><code>cd938a7</code></a> Autolink CWE numbers with sphinx-issues</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2e9c461ca417083c43145a991bf9e1ec93237d89""><code>2e9c461</code></a> Add CVE IDs</li>; <li>See full diff in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` wil",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:3498,Integrability,depend,dependabot-badges,3498,"ithub.com/python-pillow/Pillow/commit/427221ef5f19157001bf8b1ad7cfe0b905ca8c26""><code>427221e</code></a> In show_file, use os.remove to remove temporary images</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/c930be0758ac02cf15a2b8d5409d50d443550581""><code>c930be0</code></a> Restrict builtins within lambdas for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/75b69dd239a4647032f67a80d9b444228af2b736""><code>75b69dd</code></a> Dont need to pin for GHA</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cd938a7744cb46e2ea525a0c3dd79aa08f98c150""><code>cd938a7</code></a> Autolink CWE numbers with sphinx-issues</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2e9c461ca417083c43145a991bf9e1ec93237d89""><code>2e9c461</code></a> Add CVE IDs</li>; <li>See full diff in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` wil",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:3557,Integrability,depend,dependency-name,3557,"27221e</code></a> In show_file, use os.remove to remove temporary images</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/c930be0758ac02cf15a2b8d5409d50d443550581""><code>c930be0</code></a> Restrict builtins within lambdas for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/75b69dd239a4647032f67a80d9b444228af2b736""><code>75b69dd</code></a> Dont need to pin for GHA</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cd938a7744cb46e2ea525a0c3dd79aa08f98c150""><code>cd938a7</code></a> Autolink CWE numbers with sphinx-issues</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2e9c461ca417083c43145a991bf9e1ec93237d89""><code>2e9c461</code></a> Add CVE IDs</li>; <li>See full diff in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:3717,Integrability,depend,dependabot-security-updates,3717,"758ac02cf15a2b8d5409d50d443550581""><code>c930be0</code></a> Restrict builtins within lambdas for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/75b69dd239a4647032f67a80d9b444228af2b736""><code>75b69dd</code></a> Dont need to pin for GHA</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cd938a7744cb46e2ea525a0c3dd79aa08f98c150""><code>cd938a7</code></a> Autolink CWE numbers with sphinx-issues</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2e9c461ca417083c43145a991bf9e1ec93237d89""><code>2e9c461</code></a> Add CVE IDs</li>; <li>See full diff in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:3774,Integrability,Depend,Dependabot,3774,"geMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/75b69dd239a4647032f67a80d9b444228af2b736""><code>75b69dd</code></a> Dont need to pin for GHA</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cd938a7744cb46e2ea525a0c3dd79aa08f98c150""><code>cd938a7</code></a> Autolink CWE numbers with sphinx-issues</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2e9c461ca417083c43145a991bf9e1ec93237d89""><code>2e9c461</code></a> Add CVE IDs</li>; <li>See full diff in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:3920,Integrability,depend,dependabot,3920,"dd239a4647032f67a80d9b444228af2b736""><code>75b69dd</code></a> Dont need to pin for GHA</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cd938a7744cb46e2ea525a0c3dd79aa08f98c150""><code>cd938a7</code></a> Autolink CWE numbers with sphinx-issues</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2e9c461ca417083c43145a991bf9e1ec93237d89""><code>2e9c461</code></a> Add CVE IDs</li>; <li>See full diff in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:3949,Integrability,depend,dependabot-automerge-start,3949,"pin for GHA</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cd938a7744cb46e2ea525a0c3dd79aa08f98c150""><code>cd938a7</code></a> Autolink CWE numbers with sphinx-issues</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2e9c461ca417083c43145a991bf9e1ec93237d89""><code>2e9c461</code></a> Add CVE IDs</li>; <li>See full diff in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:3987,Integrability,depend,dependabot-automerge-end,3987,"pin for GHA</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cd938a7744cb46e2ea525a0c3dd79aa08f98c150""><code>cd938a7</code></a> Autolink CWE numbers with sphinx-issues</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2e9c461ca417083c43145a991bf9e1ec93237d89""><code>2e9c461</code></a> Add CVE IDs</li>; <li>See full diff in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:4039,Integrability,Depend,Dependabot,4039,"/cd938a7744cb46e2ea525a0c3dd79aa08f98c150""><code>cd938a7</code></a> Autolink CWE numbers with sphinx-issues</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2e9c461ca417083c43145a991bf9e1ec93237d89""><code>2e9c461</code></a> Add CVE IDs</li>; <li>See full diff in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:4106,Integrability,Depend,Dependabot,4106,"pare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:4156,Integrability,depend,dependabot,4156,"pare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:4200,Integrability,depend,dependabot,4200,"pare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:4297,Integrability,depend,dependabot,4297,"pare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:4366,Integrability,depend,dependabot,4366,"pare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:4457,Integrability,depend,dependabot,4457,"pare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:4550,Integrability,depend,dependabot,4550,"pare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:4610,Integrability,depend,dependabot,4610,"pare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:4656,Integrability,Depend,Dependabot,4656,"pare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@de",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:4742,Integrability,depend,dependabot,4742,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:4808,Integrability,Depend,Dependabot,4808,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:4918,Integrability,depend,dependabot,4918,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:4984,Integrability,Depend,Dependabot,4984,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:5094,Integrability,depend,dependabot,5094,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:5117,Integrability,depend,dependency,5117,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:5157,Integrability,Depend,Dependabot,5157,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:5195,Integrability,depend,dependency,5195,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:5264,Integrability,depend,dependabot,5264,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:5383,Integrability,depend,dependabot,5383,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:5508,Integrability,depend,dependabot,5508,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:5633,Integrability,depend,dependabot,5633,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:3686,Security,secur,security-vulnerabilities,3686,"758ac02cf15a2b8d5409d50d443550581""><code>c930be0</code></a> Restrict builtins within lambdas for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/75b69dd239a4647032f67a80d9b444228af2b736""><code>75b69dd</code></a> Dont need to pin for GHA</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cd938a7744cb46e2ea525a0c3dd79aa08f98c150""><code>cd938a7</code></a> Autolink CWE numbers with sphinx-issues</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2e9c461ca417083c43145a991bf9e1ec93237d89""><code>2e9c461</code></a> Add CVE IDs</li>; <li>See full diff in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:3728,Security,secur,security-updates,3728,"758ac02cf15a2b8d5409d50d443550581""><code>c930be0</code></a> Restrict builtins within lambdas for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/75b69dd239a4647032f67a80d9b444228af2b736""><code>75b69dd</code></a> Dont need to pin for GHA</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cd938a7744cb46e2ea525a0c3dd79aa08f98c150""><code>cd938a7</code></a> Autolink CWE numbers with sphinx-issues</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2e9c461ca417083c43145a991bf9e1ec93237d89""><code>2e9c461</code></a> Add CVE IDs</li>; <li>See full diff in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:5779,Security,secur,security,5779,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1835:5820,Security,Secur,Security,5820,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1835
https://github.com/qutip/qutip/pull/1836:226,Deployability,update,update,226,"Added transparency values as a parameter to the add methods. **Checklist**; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Adding the option to set point and vector transparency in bloch.py. **Related issues or PRs**; fix #1287 . **Changelog**; added optional transparency alpha value as a parameter in bloch.add_points(), bloch.add_vectors() and bloch.add_states()",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1836
https://github.com/qutip/qutip/pull/1836:93,Testability,test,tests,93,"Added transparency values as a parameter to the add methods. **Checklist**; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Adding the option to set point and vector transparency in bloch.py. **Related issues or PRs**; fix #1287 . **Changelog**; added optional transparency alpha value as a parameter in bloch.add_points(), bloch.add_vectors() and bloch.add_states()",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1836
https://github.com/qutip/qutip/issues/1838:128,Availability,redundant,redundant,128,"### Describe the Issue!. Most of the functions in `random_objects.py` take an `N` input and an optional `dims`. Those input are redundant as the size (`N`) can be obtained from the `dims`. However the way they handle this inconsistent:; - Many functions, such as `rand_super`, `rand_dm`, check that the dims matches the size and raise an error if it doesn't.; - `rand_dm_ginibre`, `rand_super_bcsz` just pass the `dims` to `Qobj` without any checks.; - `rand_ket` has a default `N=0` and obtain the size from `dims` when `N` is `0`, but it raise a division per zero error when neither `N` nor `dims` is passed.; - `rand_ket_haar` also tries to obtain the size from `dims` when `N` is `0`, but the default value of `N` is `2`, thus one need to pass `N=0` to use it. `N=0` would fail almost everywhere else. Also some function have a default size, other not: `rand_unitary(N, ...)`, `rand_unitary_haar(N=2, ...)`. The interface of these functions need to be unified. Some options:; - `N` is always needed and `dims` are checked to match.; - A default of `None` is used for `N` and either `N` or `dims` is needed. If both are given, we check that they are compatible. If none are passed, we raise an appropriate error.; - (For `dev.major`) Remove the `dims` parameter and replace `N` with `dimensions`, which act as `N` if an integer is given and `dims` is a list is. This is already the behavior of `qeye` and `qzero`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1838
https://github.com/qutip/qutip/issues/1838:338,Availability,error,error,338,"### Describe the Issue!. Most of the functions in `random_objects.py` take an `N` input and an optional `dims`. Those input are redundant as the size (`N`) can be obtained from the `dims`. However the way they handle this inconsistent:; - Many functions, such as `rand_super`, `rand_dm`, check that the dims matches the size and raise an error if it doesn't.; - `rand_dm_ginibre`, `rand_super_bcsz` just pass the `dims` to `Qobj` without any checks.; - `rand_ket` has a default `N=0` and obtain the size from `dims` when `N` is `0`, but it raise a division per zero error when neither `N` nor `dims` is passed.; - `rand_ket_haar` also tries to obtain the size from `dims` when `N` is `0`, but the default value of `N` is `2`, thus one need to pass `N=0` to use it. `N=0` would fail almost everywhere else. Also some function have a default size, other not: `rand_unitary(N, ...)`, `rand_unitary_haar(N=2, ...)`. The interface of these functions need to be unified. Some options:; - `N` is always needed and `dims` are checked to match.; - A default of `None` is used for `N` and either `N` or `dims` is needed. If both are given, we check that they are compatible. If none are passed, we raise an appropriate error.; - (For `dev.major`) Remove the `dims` parameter and replace `N` with `dimensions`, which act as `N` if an integer is given and `dims` is a list is. This is already the behavior of `qeye` and `qzero`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1838
https://github.com/qutip/qutip/issues/1838:566,Availability,error,error,566,"### Describe the Issue!. Most of the functions in `random_objects.py` take an `N` input and an optional `dims`. Those input are redundant as the size (`N`) can be obtained from the `dims`. However the way they handle this inconsistent:; - Many functions, such as `rand_super`, `rand_dm`, check that the dims matches the size and raise an error if it doesn't.; - `rand_dm_ginibre`, `rand_super_bcsz` just pass the `dims` to `Qobj` without any checks.; - `rand_ket` has a default `N=0` and obtain the size from `dims` when `N` is `0`, but it raise a division per zero error when neither `N` nor `dims` is passed.; - `rand_ket_haar` also tries to obtain the size from `dims` when `N` is `0`, but the default value of `N` is `2`, thus one need to pass `N=0` to use it. `N=0` would fail almost everywhere else. Also some function have a default size, other not: `rand_unitary(N, ...)`, `rand_unitary_haar(N=2, ...)`. The interface of these functions need to be unified. Some options:; - `N` is always needed and `dims` are checked to match.; - A default of `None` is used for `N` and either `N` or `dims` is needed. If both are given, we check that they are compatible. If none are passed, we raise an appropriate error.; - (For `dev.major`) Remove the `dims` parameter and replace `N` with `dimensions`, which act as `N` if an integer is given and `dims` is a list is. This is already the behavior of `qeye` and `qzero`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1838
https://github.com/qutip/qutip/issues/1838:1209,Availability,error,error,1209,"### Describe the Issue!. Most of the functions in `random_objects.py` take an `N` input and an optional `dims`. Those input are redundant as the size (`N`) can be obtained from the `dims`. However the way they handle this inconsistent:; - Many functions, such as `rand_super`, `rand_dm`, check that the dims matches the size and raise an error if it doesn't.; - `rand_dm_ginibre`, `rand_super_bcsz` just pass the `dims` to `Qobj` without any checks.; - `rand_ket` has a default `N=0` and obtain the size from `dims` when `N` is `0`, but it raise a division per zero error when neither `N` nor `dims` is passed.; - `rand_ket_haar` also tries to obtain the size from `dims` when `N` is `0`, but the default value of `N` is `2`, thus one need to pass `N=0` to use it. `N=0` would fail almost everywhere else. Also some function have a default size, other not: `rand_unitary(N, ...)`, `rand_unitary_haar(N=2, ...)`. The interface of these functions need to be unified. Some options:; - `N` is always needed and `dims` are checked to match.; - A default of `None` is used for `N` and either `N` or `dims` is needed. If both are given, we check that they are compatible. If none are passed, we raise an appropriate error.; - (For `dev.major`) Remove the `dims` parameter and replace `N` with `dimensions`, which act as `N` if an integer is given and `dims` is a list is. This is already the behavior of `qeye` and `qzero`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1838
https://github.com/qutip/qutip/issues/1838:916,Integrability,interface,interface,916,"### Describe the Issue!. Most of the functions in `random_objects.py` take an `N` input and an optional `dims`. Those input are redundant as the size (`N`) can be obtained from the `dims`. However the way they handle this inconsistent:; - Many functions, such as `rand_super`, `rand_dm`, check that the dims matches the size and raise an error if it doesn't.; - `rand_dm_ginibre`, `rand_super_bcsz` just pass the `dims` to `Qobj` without any checks.; - `rand_ket` has a default `N=0` and obtain the size from `dims` when `N` is `0`, but it raise a division per zero error when neither `N` nor `dims` is passed.; - `rand_ket_haar` also tries to obtain the size from `dims` when `N` is `0`, but the default value of `N` is `2`, thus one need to pass `N=0` to use it. `N=0` would fail almost everywhere else. Also some function have a default size, other not: `rand_unitary(N, ...)`, `rand_unitary_haar(N=2, ...)`. The interface of these functions need to be unified. Some options:; - `N` is always needed and `dims` are checked to match.; - A default of `None` is used for `N` and either `N` or `dims` is needed. If both are given, we check that they are compatible. If none are passed, we raise an appropriate error.; - (For `dev.major`) Remove the `dims` parameter and replace `N` with `dimensions`, which act as `N` if an integer is given and `dims` is a list is. This is already the behavior of `qeye` and `qzero`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1838
https://github.com/qutip/qutip/issues/1838:128,Safety,redund,redundant,128,"### Describe the Issue!. Most of the functions in `random_objects.py` take an `N` input and an optional `dims`. Those input are redundant as the size (`N`) can be obtained from the `dims`. However the way they handle this inconsistent:; - Many functions, such as `rand_super`, `rand_dm`, check that the dims matches the size and raise an error if it doesn't.; - `rand_dm_ginibre`, `rand_super_bcsz` just pass the `dims` to `Qobj` without any checks.; - `rand_ket` has a default `N=0` and obtain the size from `dims` when `N` is `0`, but it raise a division per zero error when neither `N` nor `dims` is passed.; - `rand_ket_haar` also tries to obtain the size from `dims` when `N` is `0`, but the default value of `N` is `2`, thus one need to pass `N=0` to use it. `N=0` would fail almost everywhere else. Also some function have a default size, other not: `rand_unitary(N, ...)`, `rand_unitary_haar(N=2, ...)`. The interface of these functions need to be unified. Some options:; - `N` is always needed and `dims` are checked to match.; - A default of `None` is used for `N` and either `N` or `dims` is needed. If both are given, we check that they are compatible. If none are passed, we raise an appropriate error.; - (For `dev.major`) Remove the `dims` parameter and replace `N` with `dimensions`, which act as `N` if an integer is given and `dims` is a list is. This is already the behavior of `qeye` and `qzero`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1838
https://github.com/qutip/qutip/issues/1839:89,Availability,error,error,89,"### Describe the Issue!. The function `orbital` is not tested and there seems to have an error in the spherical harmonics computation.; Adding a test and fixing any error, possibly using `scipy.special.sph_harm`, would be helpful.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1839
https://github.com/qutip/qutip/issues/1839:165,Availability,error,error,165,"### Describe the Issue!. The function `orbital` is not tested and there seems to have an error in the spherical harmonics computation.; Adding a test and fixing any error, possibly using `scipy.special.sph_harm`, would be helpful.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1839
https://github.com/qutip/qutip/issues/1839:55,Testability,test,tested,55,"### Describe the Issue!. The function `orbital` is not tested and there seems to have an error in the spherical harmonics computation.; Adding a test and fixing any error, possibly using `scipy.special.sph_harm`, would be helpful.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1839
https://github.com/qutip/qutip/issues/1839:145,Testability,test,test,145,"### Describe the Issue!. The function `orbital` is not tested and there seems to have an error in the spherical harmonics computation.; Adding a test and fixing any error, possibly using `scipy.special.sph_harm`, would be helpful.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1839
https://github.com/qutip/qutip/pull/1840:89,Deployability,update,updated,89,"**Description**; Documenation-Bibliography: Watrous (Theory of Quantum Information) link updated, as the old one is not working anymore. **Changelog**; Documenation-Bibliography: Watrous link (Theory of Quantum Information) updated",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1840
https://github.com/qutip/qutip/pull/1840:224,Deployability,update,updated,224,"**Description**; Documenation-Bibliography: Watrous (Theory of Quantum Information) link updated, as the old one is not working anymore. **Changelog**; Documenation-Bibliography: Watrous link (Theory of Quantum Information) updated",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1840
https://github.com/qutip/qutip/issues/1842:376,Integrability,depend,dependent,376,"The LaTeX code generated for the following simple circuit is invalid, and trying to plot the circuit results in a RuntimeError:. ```; qc = QubitCircuit(1, num_cbits=1, reverse_states=False); qc.add_measurement(""M0"", targets=0, classical_store=0); qc.png; ```; Setting `reverse_states=True` works fine. The following line in `QubitCircuit.latex_code()` needs to include a sign dependent on the value of `reverse_states`:; https://github.com/qutip/qutip/blob/00d0fe43055cff44fad803bd1ad1530e17fedeee/qutip/qip/circuit.py#L1741",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1842
https://github.com/qutip/qutip/issues/1842:43,Usability,simpl,simple,43,"The LaTeX code generated for the following simple circuit is invalid, and trying to plot the circuit results in a RuntimeError:. ```; qc = QubitCircuit(1, num_cbits=1, reverse_states=False); qc.add_measurement(""M0"", targets=0, classical_store=0); qc.png; ```; Setting `reverse_states=True` works fine. The following line in `QubitCircuit.latex_code()` needs to include a sign dependent on the value of `reverse_states`:; https://github.com/qutip/qutip/blob/00d0fe43055cff44fad803bd1ad1530e17fedeee/qutip/qip/circuit.py#L1741",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1842
https://github.com/qutip/qutip/pull/1843:112,Availability,down,down,112,"**Description**; The nonmarkov transfer tensor method (TTM) fails in an example notebook (see below). I tracked down the error to the *ttmsolve* method, where None is used to fill an array. I replaced None with an empty Qobj to fix the bug occuring from adding a Qobj and None. **Related issues or PRs**; The related issue is in the qutip-notebooks repo: https://github.com/qutip/qutip-notebooks/issues/122. **Changelog**; Replace placeholder in ttmsolve with empty Qobj",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1843
https://github.com/qutip/qutip/pull/1843:121,Availability,error,error,121,"**Description**; The nonmarkov transfer tensor method (TTM) fails in an example notebook (see below). I tracked down the error to the *ttmsolve* method, where None is used to fill an array. I replaced None with an empty Qobj to fix the bug occuring from adding a Qobj and None. **Related issues or PRs**; The related issue is in the qutip-notebooks repo: https://github.com/qutip/qutip-notebooks/issues/122. **Changelog**; Replace placeholder in ttmsolve with empty Qobj",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1843
https://github.com/qutip/qutip/pull/1844:47,Availability,error,errors,47,"**Description**; The orbital function had some errors in it. Here, I replaced the manual calculation of the spherical harmonics, with the implementation provided by SciPy. Additionally, I provide some tests to the function. **Related issues or PRs**; fixes #1839 . **Changelog**; Fixed errors in orbital functions",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1844
https://github.com/qutip/qutip/pull/1844:286,Availability,error,errors,286,"**Description**; The orbital function had some errors in it. Here, I replaced the manual calculation of the spherical harmonics, with the implementation provided by SciPy. Additionally, I provide some tests to the function. **Related issues or PRs**; fixes #1839 . **Changelog**; Fixed errors in orbital functions",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1844
https://github.com/qutip/qutip/pull/1844:201,Testability,test,tests,201,"**Description**; The orbital function had some errors in it. Here, I replaced the manual calculation of the spherical harmonics, with the implementation provided by SciPy. Additionally, I provide some tests to the function. **Related issues or PRs**; fixes #1839 . **Changelog**; Fixed errors in orbital functions",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1844
https://github.com/qutip/qutip/pull/1845:213,Availability,error,error,213,"**Description**; I have added support for list input for the unit conversion functions. . **Related issues or PRs**; I was passing a python list of values to convert from one unit to another but got the following error:; `TypeError: can't multiply sequence by non-int of type 'float'`; As the documentation says it accepts an array, I think a list should be supported. **Changelog**; If the input is a python list, it will be converted to a numpy array. Because numpy array supports multiplying by a float, Python list doesn't.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1845
https://github.com/qutip/qutip/pull/1846:322,Availability,error,error,322,"**Description**. Functions in `random_objects.py` deal with the parameters `N` and `dims` in different ways. Here I unify their interface implementing the following changes:. 1) Both `N` and `dims` parameters are now optional, with default value `None` for all functions.; 2) If both are given, we check if they match. An error is raised if they don't.; 3) If only one of them is given, the other one receives an appropriate value.; 4) If none of them are given, an error is raised requesting one of them. Functions `rand_super` and `rand_super_bcsz` were left unchanged. I believe it's better to leave their changes for v5.0, when the parameters `N` and `dims` will be substituted by `dimensions`. **Related issues or PRs**; Fix #1838. **Changelog**; Unify interface from random_objects.py module.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1846
https://github.com/qutip/qutip/pull/1846:466,Availability,error,error,466,"**Description**. Functions in `random_objects.py` deal with the parameters `N` and `dims` in different ways. Here I unify their interface implementing the following changes:. 1) Both `N` and `dims` parameters are now optional, with default value `None` for all functions.; 2) If both are given, we check if they match. An error is raised if they don't.; 3) If only one of them is given, the other one receives an appropriate value.; 4) If none of them are given, an error is raised requesting one of them. Functions `rand_super` and `rand_super_bcsz` were left unchanged. I believe it's better to leave their changes for v5.0, when the parameters `N` and `dims` will be substituted by `dimensions`. **Related issues or PRs**; Fix #1838. **Changelog**; Unify interface from random_objects.py module.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1846
https://github.com/qutip/qutip/pull/1846:128,Integrability,interface,interface,128,"**Description**. Functions in `random_objects.py` deal with the parameters `N` and `dims` in different ways. Here I unify their interface implementing the following changes:. 1) Both `N` and `dims` parameters are now optional, with default value `None` for all functions.; 2) If both are given, we check if they match. An error is raised if they don't.; 3) If only one of them is given, the other one receives an appropriate value.; 4) If none of them are given, an error is raised requesting one of them. Functions `rand_super` and `rand_super_bcsz` were left unchanged. I believe it's better to leave their changes for v5.0, when the parameters `N` and `dims` will be substituted by `dimensions`. **Related issues or PRs**; Fix #1838. **Changelog**; Unify interface from random_objects.py module.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1846
https://github.com/qutip/qutip/pull/1846:758,Integrability,interface,interface,758,"**Description**. Functions in `random_objects.py` deal with the parameters `N` and `dims` in different ways. Here I unify their interface implementing the following changes:. 1) Both `N` and `dims` parameters are now optional, with default value `None` for all functions.; 2) If both are given, we check if they match. An error is raised if they don't.; 3) If only one of them is given, the other one receives an appropriate value.; 4) If none of them are given, an error is raised requesting one of them. Functions `rand_super` and `rand_super_bcsz` were left unchanged. I believe it's better to leave their changes for v5.0, when the parameters `N` and `dims` will be substituted by `dimensions`. **Related issues or PRs**; Fix #1838. **Changelog**; Unify interface from random_objects.py module.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1846
https://github.com/qutip/qutip/issues/1848:613,Availability,error,error,613,"Hi, I hope I can get some help with this. I am new with qutip; Sx_nv= qutip.tensor(qutip.jmat(1,""x""),qeye(2)) ; Sy_nv= qutip.tensor(qutip.jmat(1,""y""),qeye(2)); Sz_nv= qutip.tensor(qutip.jmat(1,""z""),qeye(2)) ; Ix_nv= qutip.tensor(qeye(3),qutip.jmat(0.5,""x"")); Iy_nv= qutip.tensor(qeye(3),qutip.jmat(0.5,""y"")); Iz_nv= qutip.tensor(qeye(3),qutip.jmat(0.5,""z"")); S_vector = [Sx_nv,Sy_nv,Sz_nv]; D_xx = 0; D_yy =0; D_zz =2870 . D_matrix = np.diag([D_xx,D_yy,D_zz]); I want to make a product like ""S_vector * D_matrix * S_vector"" so I did this. qutip.Qobj(np.dot(np.array(D_matrix),np.array(S_vector))); And I got this error :; ---------------------------------------------------------------------------; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last). TypeError: must be real number, not Qobj. Somewhere I read that there is a problem with 1.20 numpy version and qutip, so I created an environment in conda with numpy 1.19.0; but it does not fix the problem, or maybe it is me the one that is not understanding. Why I can not make operations with Qobj, or convert it to numpy arrays and then back to Qobj.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1848
https://github.com/qutip/qutip/pull/1849:36,Testability,test,test,36,**Description**; Add GitHub actions test run on windows-latest. **Related issues or PRs**; - None so far. **Changelog**; Add GitHub actions test run on windows-latest.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1849
https://github.com/qutip/qutip/pull/1849:140,Testability,test,test,140,**Description**; Add GitHub actions test run on windows-latest. **Related issues or PRs**; - None so far. **Changelog**; Add GitHub actions test run on windows-latest.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1849
https://github.com/qutip/qutip/pull/1850:290,Availability,error,error,290,"**Description**. Merge master at after #1847 into `dev.major`. **Notes**. - qip's changes are not kept, this part is still the same state as it was before the merge. Any improvement that were added to master should instead be pushed to qutip/qutip-qip.; - The tests now consider warning as error, this cause other tests to fail, but they run fine without this. ; - Documentation is still at master's state.; - When needed, change from fastsparse to data layer where made as minimally as possible: steadystate, steadystate_floquet, floquet, krylovsolve, etc. use rough shims. **Todo**. - [x] Add back .coveragerc; - [x] Turn off warnings-are-errors flag in tests; - [x] Fix steadystate tests (@AGaliciaMartinez); - [x] Merge in #1837 from master (adding transparency options to points and vectors on the Bloch sphere).; - [x] Fix [qutip/core/cy/openmp/src/zspmv_openmp.cpp](https://github.com/qutip/qutip/pull/1850/files#diff-df17c9d6ec3977033ce197f9a782cd99c0573131ab691cc8fbeeb4b3f0a5c943). **Todo (post PR merge)**. - [x] HEOM: Files where pulled, but any issue was dealt by commenting the code. All related tests are skipped. (@hodgestar); - [x] HEOM: Documentation plots were commented out -- check all docs thoroughly. (@hodgestar); - [x] Steadystate: Test fails, there seems to be ~3 bugs that I could not fix in time.; - [x] Update documentation to build on QuTiP 5 (@hodgestar); - [ ] Thoroughly check Bloch and Bloch3d. (@hodgestar); - [x] Remove _pyxbuilder.py (@ericgig); - [x] Remove legacy bloch_redfield solver (@ericgig); - [x] Fix test warnings and turn warnings-are-errors back on; - [x] Fix doc warnings and turn warnings-are-errors back on; - [x] QIP: Remove qip and qip docs. (@BoxiLi); - [x] Get to the bottom of the Windows PermissionErrors when compiling string coefficients",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1850
https://github.com/qutip/qutip/pull/1850:641,Availability,error,errors,641,"**Description**. Merge master at after #1847 into `dev.major`. **Notes**. - qip's changes are not kept, this part is still the same state as it was before the merge. Any improvement that were added to master should instead be pushed to qutip/qutip-qip.; - The tests now consider warning as error, this cause other tests to fail, but they run fine without this. ; - Documentation is still at master's state.; - When needed, change from fastsparse to data layer where made as minimally as possible: steadystate, steadystate_floquet, floquet, krylovsolve, etc. use rough shims. **Todo**. - [x] Add back .coveragerc; - [x] Turn off warnings-are-errors flag in tests; - [x] Fix steadystate tests (@AGaliciaMartinez); - [x] Merge in #1837 from master (adding transparency options to points and vectors on the Bloch sphere).; - [x] Fix [qutip/core/cy/openmp/src/zspmv_openmp.cpp](https://github.com/qutip/qutip/pull/1850/files#diff-df17c9d6ec3977033ce197f9a782cd99c0573131ab691cc8fbeeb4b3f0a5c943). **Todo (post PR merge)**. - [x] HEOM: Files where pulled, but any issue was dealt by commenting the code. All related tests are skipped. (@hodgestar); - [x] HEOM: Documentation plots were commented out -- check all docs thoroughly. (@hodgestar); - [x] Steadystate: Test fails, there seems to be ~3 bugs that I could not fix in time.; - [x] Update documentation to build on QuTiP 5 (@hodgestar); - [ ] Thoroughly check Bloch and Bloch3d. (@hodgestar); - [x] Remove _pyxbuilder.py (@ericgig); - [x] Remove legacy bloch_redfield solver (@ericgig); - [x] Fix test warnings and turn warnings-are-errors back on; - [x] Fix doc warnings and turn warnings-are-errors back on; - [x] QIP: Remove qip and qip docs. (@BoxiLi); - [x] Get to the bottom of the Windows PermissionErrors when compiling string coefficients",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1850
https://github.com/qutip/qutip/pull/1850:1583,Availability,error,errors,1583,"**Description**. Merge master at after #1847 into `dev.major`. **Notes**. - qip's changes are not kept, this part is still the same state as it was before the merge. Any improvement that were added to master should instead be pushed to qutip/qutip-qip.; - The tests now consider warning as error, this cause other tests to fail, but they run fine without this. ; - Documentation is still at master's state.; - When needed, change from fastsparse to data layer where made as minimally as possible: steadystate, steadystate_floquet, floquet, krylovsolve, etc. use rough shims. **Todo**. - [x] Add back .coveragerc; - [x] Turn off warnings-are-errors flag in tests; - [x] Fix steadystate tests (@AGaliciaMartinez); - [x] Merge in #1837 from master (adding transparency options to points and vectors on the Bloch sphere).; - [x] Fix [qutip/core/cy/openmp/src/zspmv_openmp.cpp](https://github.com/qutip/qutip/pull/1850/files#diff-df17c9d6ec3977033ce197f9a782cd99c0573131ab691cc8fbeeb4b3f0a5c943). **Todo (post PR merge)**. - [x] HEOM: Files where pulled, but any issue was dealt by commenting the code. All related tests are skipped. (@hodgestar); - [x] HEOM: Documentation plots were commented out -- check all docs thoroughly. (@hodgestar); - [x] Steadystate: Test fails, there seems to be ~3 bugs that I could not fix in time.; - [x] Update documentation to build on QuTiP 5 (@hodgestar); - [ ] Thoroughly check Bloch and Bloch3d. (@hodgestar); - [x] Remove _pyxbuilder.py (@ericgig); - [x] Remove legacy bloch_redfield solver (@ericgig); - [x] Fix test warnings and turn warnings-are-errors back on; - [x] Fix doc warnings and turn warnings-are-errors back on; - [x] QIP: Remove qip and qip docs. (@BoxiLi); - [x] Get to the bottom of the Windows PermissionErrors when compiling string coefficients",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1850
https://github.com/qutip/qutip/pull/1850:1644,Availability,error,errors,1644,"**Description**. Merge master at after #1847 into `dev.major`. **Notes**. - qip's changes are not kept, this part is still the same state as it was before the merge. Any improvement that were added to master should instead be pushed to qutip/qutip-qip.; - The tests now consider warning as error, this cause other tests to fail, but they run fine without this. ; - Documentation is still at master's state.; - When needed, change from fastsparse to data layer where made as minimally as possible: steadystate, steadystate_floquet, floquet, krylovsolve, etc. use rough shims. **Todo**. - [x] Add back .coveragerc; - [x] Turn off warnings-are-errors flag in tests; - [x] Fix steadystate tests (@AGaliciaMartinez); - [x] Merge in #1837 from master (adding transparency options to points and vectors on the Bloch sphere).; - [x] Fix [qutip/core/cy/openmp/src/zspmv_openmp.cpp](https://github.com/qutip/qutip/pull/1850/files#diff-df17c9d6ec3977033ce197f9a782cd99c0573131ab691cc8fbeeb4b3f0a5c943). **Todo (post PR merge)**. - [x] HEOM: Files where pulled, but any issue was dealt by commenting the code. All related tests are skipped. (@hodgestar); - [x] HEOM: Documentation plots were commented out -- check all docs thoroughly. (@hodgestar); - [x] Steadystate: Test fails, there seems to be ~3 bugs that I could not fix in time.; - [x] Update documentation to build on QuTiP 5 (@hodgestar); - [ ] Thoroughly check Bloch and Bloch3d. (@hodgestar); - [x] Remove _pyxbuilder.py (@ericgig); - [x] Remove legacy bloch_redfield solver (@ericgig); - [x] Fix test warnings and turn warnings-are-errors back on; - [x] Fix doc warnings and turn warnings-are-errors back on; - [x] QIP: Remove qip and qip docs. (@BoxiLi); - [x] Get to the bottom of the Windows PermissionErrors when compiling string coefficients",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1850
https://github.com/qutip/qutip/pull/1850:1332,Deployability,Update,Update,1332,"**Description**. Merge master at after #1847 into `dev.major`. **Notes**. - qip's changes are not kept, this part is still the same state as it was before the merge. Any improvement that were added to master should instead be pushed to qutip/qutip-qip.; - The tests now consider warning as error, this cause other tests to fail, but they run fine without this. ; - Documentation is still at master's state.; - When needed, change from fastsparse to data layer where made as minimally as possible: steadystate, steadystate_floquet, floquet, krylovsolve, etc. use rough shims. **Todo**. - [x] Add back .coveragerc; - [x] Turn off warnings-are-errors flag in tests; - [x] Fix steadystate tests (@AGaliciaMartinez); - [x] Merge in #1837 from master (adding transparency options to points and vectors on the Bloch sphere).; - [x] Fix [qutip/core/cy/openmp/src/zspmv_openmp.cpp](https://github.com/qutip/qutip/pull/1850/files#diff-df17c9d6ec3977033ce197f9a782cd99c0573131ab691cc8fbeeb4b3f0a5c943). **Todo (post PR merge)**. - [x] HEOM: Files where pulled, but any issue was dealt by commenting the code. All related tests are skipped. (@hodgestar); - [x] HEOM: Documentation plots were commented out -- check all docs thoroughly. (@hodgestar); - [x] Steadystate: Test fails, there seems to be ~3 bugs that I could not fix in time.; - [x] Update documentation to build on QuTiP 5 (@hodgestar); - [ ] Thoroughly check Bloch and Bloch3d. (@hodgestar); - [x] Remove _pyxbuilder.py (@ericgig); - [x] Remove legacy bloch_redfield solver (@ericgig); - [x] Fix test warnings and turn warnings-are-errors back on; - [x] Fix doc warnings and turn warnings-are-errors back on; - [x] QIP: Remove qip and qip docs. (@BoxiLi); - [x] Get to the bottom of the Windows PermissionErrors when compiling string coefficients",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1850
https://github.com/qutip/qutip/pull/1850:260,Testability,test,tests,260,"**Description**. Merge master at after #1847 into `dev.major`. **Notes**. - qip's changes are not kept, this part is still the same state as it was before the merge. Any improvement that were added to master should instead be pushed to qutip/qutip-qip.; - The tests now consider warning as error, this cause other tests to fail, but they run fine without this. ; - Documentation is still at master's state.; - When needed, change from fastsparse to data layer where made as minimally as possible: steadystate, steadystate_floquet, floquet, krylovsolve, etc. use rough shims. **Todo**. - [x] Add back .coveragerc; - [x] Turn off warnings-are-errors flag in tests; - [x] Fix steadystate tests (@AGaliciaMartinez); - [x] Merge in #1837 from master (adding transparency options to points and vectors on the Bloch sphere).; - [x] Fix [qutip/core/cy/openmp/src/zspmv_openmp.cpp](https://github.com/qutip/qutip/pull/1850/files#diff-df17c9d6ec3977033ce197f9a782cd99c0573131ab691cc8fbeeb4b3f0a5c943). **Todo (post PR merge)**. - [x] HEOM: Files where pulled, but any issue was dealt by commenting the code. All related tests are skipped. (@hodgestar); - [x] HEOM: Documentation plots were commented out -- check all docs thoroughly. (@hodgestar); - [x] Steadystate: Test fails, there seems to be ~3 bugs that I could not fix in time.; - [x] Update documentation to build on QuTiP 5 (@hodgestar); - [ ] Thoroughly check Bloch and Bloch3d. (@hodgestar); - [x] Remove _pyxbuilder.py (@ericgig); - [x] Remove legacy bloch_redfield solver (@ericgig); - [x] Fix test warnings and turn warnings-are-errors back on; - [x] Fix doc warnings and turn warnings-are-errors back on; - [x] QIP: Remove qip and qip docs. (@BoxiLi); - [x] Get to the bottom of the Windows PermissionErrors when compiling string coefficients",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1850
https://github.com/qutip/qutip/pull/1850:314,Testability,test,tests,314,"**Description**. Merge master at after #1847 into `dev.major`. **Notes**. - qip's changes are not kept, this part is still the same state as it was before the merge. Any improvement that were added to master should instead be pushed to qutip/qutip-qip.; - The tests now consider warning as error, this cause other tests to fail, but they run fine without this. ; - Documentation is still at master's state.; - When needed, change from fastsparse to data layer where made as minimally as possible: steadystate, steadystate_floquet, floquet, krylovsolve, etc. use rough shims. **Todo**. - [x] Add back .coveragerc; - [x] Turn off warnings-are-errors flag in tests; - [x] Fix steadystate tests (@AGaliciaMartinez); - [x] Merge in #1837 from master (adding transparency options to points and vectors on the Bloch sphere).; - [x] Fix [qutip/core/cy/openmp/src/zspmv_openmp.cpp](https://github.com/qutip/qutip/pull/1850/files#diff-df17c9d6ec3977033ce197f9a782cd99c0573131ab691cc8fbeeb4b3f0a5c943). **Todo (post PR merge)**. - [x] HEOM: Files where pulled, but any issue was dealt by commenting the code. All related tests are skipped. (@hodgestar); - [x] HEOM: Documentation plots were commented out -- check all docs thoroughly. (@hodgestar); - [x] Steadystate: Test fails, there seems to be ~3 bugs that I could not fix in time.; - [x] Update documentation to build on QuTiP 5 (@hodgestar); - [ ] Thoroughly check Bloch and Bloch3d. (@hodgestar); - [x] Remove _pyxbuilder.py (@ericgig); - [x] Remove legacy bloch_redfield solver (@ericgig); - [x] Fix test warnings and turn warnings-are-errors back on; - [x] Fix doc warnings and turn warnings-are-errors back on; - [x] QIP: Remove qip and qip docs. (@BoxiLi); - [x] Get to the bottom of the Windows PermissionErrors when compiling string coefficients",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1850
https://github.com/qutip/qutip/pull/1850:656,Testability,test,tests,656,"**Description**. Merge master at after #1847 into `dev.major`. **Notes**. - qip's changes are not kept, this part is still the same state as it was before the merge. Any improvement that were added to master should instead be pushed to qutip/qutip-qip.; - The tests now consider warning as error, this cause other tests to fail, but they run fine without this. ; - Documentation is still at master's state.; - When needed, change from fastsparse to data layer where made as minimally as possible: steadystate, steadystate_floquet, floquet, krylovsolve, etc. use rough shims. **Todo**. - [x] Add back .coveragerc; - [x] Turn off warnings-are-errors flag in tests; - [x] Fix steadystate tests (@AGaliciaMartinez); - [x] Merge in #1837 from master (adding transparency options to points and vectors on the Bloch sphere).; - [x] Fix [qutip/core/cy/openmp/src/zspmv_openmp.cpp](https://github.com/qutip/qutip/pull/1850/files#diff-df17c9d6ec3977033ce197f9a782cd99c0573131ab691cc8fbeeb4b3f0a5c943). **Todo (post PR merge)**. - [x] HEOM: Files where pulled, but any issue was dealt by commenting the code. All related tests are skipped. (@hodgestar); - [x] HEOM: Documentation plots were commented out -- check all docs thoroughly. (@hodgestar); - [x] Steadystate: Test fails, there seems to be ~3 bugs that I could not fix in time.; - [x] Update documentation to build on QuTiP 5 (@hodgestar); - [ ] Thoroughly check Bloch and Bloch3d. (@hodgestar); - [x] Remove _pyxbuilder.py (@ericgig); - [x] Remove legacy bloch_redfield solver (@ericgig); - [x] Fix test warnings and turn warnings-are-errors back on; - [x] Fix doc warnings and turn warnings-are-errors back on; - [x] QIP: Remove qip and qip docs. (@BoxiLi); - [x] Get to the bottom of the Windows PermissionErrors when compiling string coefficients",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1850
https://github.com/qutip/qutip/pull/1850:685,Testability,test,tests,685,"**Description**. Merge master at after #1847 into `dev.major`. **Notes**. - qip's changes are not kept, this part is still the same state as it was before the merge. Any improvement that were added to master should instead be pushed to qutip/qutip-qip.; - The tests now consider warning as error, this cause other tests to fail, but they run fine without this. ; - Documentation is still at master's state.; - When needed, change from fastsparse to data layer where made as minimally as possible: steadystate, steadystate_floquet, floquet, krylovsolve, etc. use rough shims. **Todo**. - [x] Add back .coveragerc; - [x] Turn off warnings-are-errors flag in tests; - [x] Fix steadystate tests (@AGaliciaMartinez); - [x] Merge in #1837 from master (adding transparency options to points and vectors on the Bloch sphere).; - [x] Fix [qutip/core/cy/openmp/src/zspmv_openmp.cpp](https://github.com/qutip/qutip/pull/1850/files#diff-df17c9d6ec3977033ce197f9a782cd99c0573131ab691cc8fbeeb4b3f0a5c943). **Todo (post PR merge)**. - [x] HEOM: Files where pulled, but any issue was dealt by commenting the code. All related tests are skipped. (@hodgestar); - [x] HEOM: Documentation plots were commented out -- check all docs thoroughly. (@hodgestar); - [x] Steadystate: Test fails, there seems to be ~3 bugs that I could not fix in time.; - [x] Update documentation to build on QuTiP 5 (@hodgestar); - [ ] Thoroughly check Bloch and Bloch3d. (@hodgestar); - [x] Remove _pyxbuilder.py (@ericgig); - [x] Remove legacy bloch_redfield solver (@ericgig); - [x] Fix test warnings and turn warnings-are-errors back on; - [x] Fix doc warnings and turn warnings-are-errors back on; - [x] QIP: Remove qip and qip docs. (@BoxiLi); - [x] Get to the bottom of the Windows PermissionErrors when compiling string coefficients",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1850
https://github.com/qutip/qutip/pull/1850:1110,Testability,test,tests,1110,"**Description**. Merge master at after #1847 into `dev.major`. **Notes**. - qip's changes are not kept, this part is still the same state as it was before the merge. Any improvement that were added to master should instead be pushed to qutip/qutip-qip.; - The tests now consider warning as error, this cause other tests to fail, but they run fine without this. ; - Documentation is still at master's state.; - When needed, change from fastsparse to data layer where made as minimally as possible: steadystate, steadystate_floquet, floquet, krylovsolve, etc. use rough shims. **Todo**. - [x] Add back .coveragerc; - [x] Turn off warnings-are-errors flag in tests; - [x] Fix steadystate tests (@AGaliciaMartinez); - [x] Merge in #1837 from master (adding transparency options to points and vectors on the Bloch sphere).; - [x] Fix [qutip/core/cy/openmp/src/zspmv_openmp.cpp](https://github.com/qutip/qutip/pull/1850/files#diff-df17c9d6ec3977033ce197f9a782cd99c0573131ab691cc8fbeeb4b3f0a5c943). **Todo (post PR merge)**. - [x] HEOM: Files where pulled, but any issue was dealt by commenting the code. All related tests are skipped. (@hodgestar); - [x] HEOM: Documentation plots were commented out -- check all docs thoroughly. (@hodgestar); - [x] Steadystate: Test fails, there seems to be ~3 bugs that I could not fix in time.; - [x] Update documentation to build on QuTiP 5 (@hodgestar); - [ ] Thoroughly check Bloch and Bloch3d. (@hodgestar); - [x] Remove _pyxbuilder.py (@ericgig); - [x] Remove legacy bloch_redfield solver (@ericgig); - [x] Fix test warnings and turn warnings-are-errors back on; - [x] Fix doc warnings and turn warnings-are-errors back on; - [x] QIP: Remove qip and qip docs. (@BoxiLi); - [x] Get to the bottom of the Windows PermissionErrors when compiling string coefficients",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1850
https://github.com/qutip/qutip/pull/1850:1257,Testability,Test,Test,1257,"**Description**. Merge master at after #1847 into `dev.major`. **Notes**. - qip's changes are not kept, this part is still the same state as it was before the merge. Any improvement that were added to master should instead be pushed to qutip/qutip-qip.; - The tests now consider warning as error, this cause other tests to fail, but they run fine without this. ; - Documentation is still at master's state.; - When needed, change from fastsparse to data layer where made as minimally as possible: steadystate, steadystate_floquet, floquet, krylovsolve, etc. use rough shims. **Todo**. - [x] Add back .coveragerc; - [x] Turn off warnings-are-errors flag in tests; - [x] Fix steadystate tests (@AGaliciaMartinez); - [x] Merge in #1837 from master (adding transparency options to points and vectors on the Bloch sphere).; - [x] Fix [qutip/core/cy/openmp/src/zspmv_openmp.cpp](https://github.com/qutip/qutip/pull/1850/files#diff-df17c9d6ec3977033ce197f9a782cd99c0573131ab691cc8fbeeb4b3f0a5c943). **Todo (post PR merge)**. - [x] HEOM: Files where pulled, but any issue was dealt by commenting the code. All related tests are skipped. (@hodgestar); - [x] HEOM: Documentation plots were commented out -- check all docs thoroughly. (@hodgestar); - [x] Steadystate: Test fails, there seems to be ~3 bugs that I could not fix in time.; - [x] Update documentation to build on QuTiP 5 (@hodgestar); - [ ] Thoroughly check Bloch and Bloch3d. (@hodgestar); - [x] Remove _pyxbuilder.py (@ericgig); - [x] Remove legacy bloch_redfield solver (@ericgig); - [x] Fix test warnings and turn warnings-are-errors back on; - [x] Fix doc warnings and turn warnings-are-errors back on; - [x] QIP: Remove qip and qip docs. (@BoxiLi); - [x] Get to the bottom of the Windows PermissionErrors when compiling string coefficients",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1850
https://github.com/qutip/qutip/pull/1850:1547,Testability,test,test,1547,"**Description**. Merge master at after #1847 into `dev.major`. **Notes**. - qip's changes are not kept, this part is still the same state as it was before the merge. Any improvement that were added to master should instead be pushed to qutip/qutip-qip.; - The tests now consider warning as error, this cause other tests to fail, but they run fine without this. ; - Documentation is still at master's state.; - When needed, change from fastsparse to data layer where made as minimally as possible: steadystate, steadystate_floquet, floquet, krylovsolve, etc. use rough shims. **Todo**. - [x] Add back .coveragerc; - [x] Turn off warnings-are-errors flag in tests; - [x] Fix steadystate tests (@AGaliciaMartinez); - [x] Merge in #1837 from master (adding transparency options to points and vectors on the Bloch sphere).; - [x] Fix [qutip/core/cy/openmp/src/zspmv_openmp.cpp](https://github.com/qutip/qutip/pull/1850/files#diff-df17c9d6ec3977033ce197f9a782cd99c0573131ab691cc8fbeeb4b3f0a5c943). **Todo (post PR merge)**. - [x] HEOM: Files where pulled, but any issue was dealt by commenting the code. All related tests are skipped. (@hodgestar); - [x] HEOM: Documentation plots were commented out -- check all docs thoroughly. (@hodgestar); - [x] Steadystate: Test fails, there seems to be ~3 bugs that I could not fix in time.; - [x] Update documentation to build on QuTiP 5 (@hodgestar); - [ ] Thoroughly check Bloch and Bloch3d. (@hodgestar); - [x] Remove _pyxbuilder.py (@ericgig); - [x] Remove legacy bloch_redfield solver (@ericgig); - [x] Fix test warnings and turn warnings-are-errors back on; - [x] Fix doc warnings and turn warnings-are-errors back on; - [x] QIP: Remove qip and qip docs. (@BoxiLi); - [x] Get to the bottom of the Windows PermissionErrors when compiling string coefficients",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1850
https://github.com/qutip/qutip/pull/1852:17,Deployability,Update,Update,17,**Description**; Update changelog for 4.7.0. **Related issues or PRs**; - See https://github.com/qutip/qutip/milestone/12?closed=1. **Changelog**; Update changelog for 4.7.0.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1852
https://github.com/qutip/qutip/pull/1852:147,Deployability,Update,Update,147,**Description**; Update changelog for 4.7.0. **Related issues or PRs**; - See https://github.com/qutip/qutip/milestone/12?closed=1. **Changelog**; Update changelog for 4.7.0.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1852
https://github.com/qutip/qutip/pull/1853:36,Testability,test,test,36,**Description**; Add GitHub actions test run on windows-latest. **Related issues or PRs**; - Clean up of #1849. **Changelog**; Add GitHub actions test run on windows-latest.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1853
https://github.com/qutip/qutip/pull/1853:146,Testability,test,test,146,**Description**; Add GitHub actions test run on windows-latest. **Related issues or PRs**; - Clean up of #1849. **Changelog**; Add GitHub actions test run on windows-latest.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1853
https://github.com/qutip/qutip/pull/1854:69,Safety,timeout,timeout,69,**Description**; Activate remaining tests on Windows now that pytest-timeout has been removed. **Related issues or PRs**; - Continues on from #1853. **Changelog**; Activate remaining tests on Windows.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1854
https://github.com/qutip/qutip/pull/1854:36,Testability,test,tests,36,**Description**; Activate remaining tests on Windows now that pytest-timeout has been removed. **Related issues or PRs**; - Continues on from #1853. **Changelog**; Activate remaining tests on Windows.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1854
https://github.com/qutip/qutip/pull/1854:183,Testability,test,tests,183,**Description**; Activate remaining tests on Windows now that pytest-timeout has been removed. **Related issues or PRs**; - Continues on from #1853. **Changelog**; Activate remaining tests on Windows.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1854
https://github.com/qutip/qutip/pull/1855:33,Testability,test,tests,33,**Description**; Disable mcsolve tests on windows. **Related issues or PRs**; - See #1202. **Changelog**; Disable mcsolve tests on windows. The mcsolve solver uses multprocessing under the hood to simulate many trajectories at once and this can deadlock on Windows.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1855
https://github.com/qutip/qutip/pull/1855:122,Testability,test,tests,122,**Description**; Disable mcsolve tests on windows. **Related issues or PRs**; - See #1202. **Changelog**; Disable mcsolve tests on windows. The mcsolve solver uses multprocessing under the hood to simulate many trajectories at once and this can deadlock on Windows.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1855
https://github.com/qutip/qutip/pull/1856:31,Deployability,release,release,31,**Description**; Prepare 4.7.0 release. **Related issues or PRs**; - See milestone https://github.com/qutip/qutip/milestone/12?closed=1. **Changelog**; Prepare 4.7.0 release.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1856
https://github.com/qutip/qutip/pull/1856:166,Deployability,release,release,166,**Description**; Prepare 4.7.0 release. **Related issues or PRs**; - See milestone https://github.com/qutip/qutip/milestone/12?closed=1. **Changelog**; Prepare 4.7.0 release.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1856
https://github.com/qutip/qutip/issues/1858:90,Deployability,release,release,90,### Problem Description. Currently the documentation PDF has to be built locally for each release. ### Proposed Solution. Build the documentation in a GitHub action either for each push or when deploying a release.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1858
https://github.com/qutip/qutip/issues/1858:194,Deployability,deploy,deploying,194,### Problem Description. Currently the documentation PDF has to be built locally for each release. ### Proposed Solution. Build the documentation in a GitHub action either for each push or when deploying a release.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1858
https://github.com/qutip/qutip/issues/1858:206,Deployability,release,release,206,### Problem Description. Currently the documentation PDF has to be built locally for each release. ### Proposed Solution. Build the documentation in a GitHub action either for each push or when deploying a release.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1858
https://github.com/qutip/qutip/pull/1859:79,Testability,test,tests,79,**Description**. Merge the latest changes of master.; - Activating the windows tests.; - Updating the changelog.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1859
https://github.com/qutip/qutip/pull/1860:224,Integrability,depend,dependent,224,"**Description**; - Remove the old version of bloch redfield functions in `qutip/solve/bloch_redfield.py`, the new ones being at `qutip/solver/brmesolve.py` added in #1651.; - Remove utilities for previous management of time dependent systems and string compilation. These functionalities are included in `QobjEvo` and `Coefficient`. (`_pyxbuilder.py`, `solve/_utilities.py`).; - Remove `interpolate.py`, `Cubic_Spline` was only used in `brmesolve` since #1725.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1860
https://github.com/qutip/qutip/pull/1861:131,Energy Efficiency,reduce,reduced,131,"**Description**; Tests related to krylovsolve take a lot of time, close to 1/3 of the whole test suite.; I kept all the tests, but reduced the size of the systems used.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1861
https://github.com/qutip/qutip/pull/1861:17,Testability,Test,Tests,17,"**Description**; Tests related to krylovsolve take a lot of time, close to 1/3 of the whole test suite.; I kept all the tests, but reduced the size of the systems used.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1861
https://github.com/qutip/qutip/pull/1861:92,Testability,test,test,92,"**Description**; Tests related to krylovsolve take a lot of time, close to 1/3 of the whole test suite.; I kept all the tests, but reduced the size of the systems used.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1861
https://github.com/qutip/qutip/pull/1861:120,Testability,test,tests,120,"**Description**; Tests related to krylovsolve take a lot of time, close to 1/3 of the whole test suite.; I kept all the tests, but reduced the size of the systems used.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1861
https://github.com/qutip/qutip/pull/1862:273,Integrability,depend,dependancy,273,**Description**; Adding documentation guide to qutip/doc/guide for krylovsolve.py. **Related issues or PRs**; https://github.com/qutip/qutip/issues/1668; https://github.com/qutip/qutip/pull/1739. **Changelog**; Created file doc/guide/dynamics/dynamics-krylov.rst and added dependancy to doc/guide/guide-dynamics.rst.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1862
https://github.com/qutip/qutip/pull/1862:38,Usability,guid,guide,38,**Description**; Adding documentation guide to qutip/doc/guide for krylovsolve.py. **Related issues or PRs**; https://github.com/qutip/qutip/issues/1668; https://github.com/qutip/qutip/pull/1739. **Changelog**; Created file doc/guide/dynamics/dynamics-krylov.rst and added dependancy to doc/guide/guide-dynamics.rst.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1862
https://github.com/qutip/qutip/pull/1862:57,Usability,guid,guide,57,**Description**; Adding documentation guide to qutip/doc/guide for krylovsolve.py. **Related issues or PRs**; https://github.com/qutip/qutip/issues/1668; https://github.com/qutip/qutip/pull/1739. **Changelog**; Created file doc/guide/dynamics/dynamics-krylov.rst and added dependancy to doc/guide/guide-dynamics.rst.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1862
https://github.com/qutip/qutip/pull/1862:228,Usability,guid,guide,228,**Description**; Adding documentation guide to qutip/doc/guide for krylovsolve.py. **Related issues or PRs**; https://github.com/qutip/qutip/issues/1668; https://github.com/qutip/qutip/pull/1739. **Changelog**; Created file doc/guide/dynamics/dynamics-krylov.rst and added dependancy to doc/guide/guide-dynamics.rst.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1862
https://github.com/qutip/qutip/pull/1862:291,Usability,guid,guide,291,**Description**; Adding documentation guide to qutip/doc/guide for krylovsolve.py. **Related issues or PRs**; https://github.com/qutip/qutip/issues/1668; https://github.com/qutip/qutip/pull/1739. **Changelog**; Created file doc/guide/dynamics/dynamics-krylov.rst and added dependancy to doc/guide/guide-dynamics.rst.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1862
https://github.com/qutip/qutip/pull/1862:297,Usability,guid,guide-dynamics,297,**Description**; Adding documentation guide to qutip/doc/guide for krylovsolve.py. **Related issues or PRs**; https://github.com/qutip/qutip/issues/1668; https://github.com/qutip/qutip/pull/1739. **Changelog**; Created file doc/guide/dynamics/dynamics-krylov.rst and added dependancy to doc/guide/guide-dynamics.rst.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1862
https://github.com/qutip/qutip/pull/1863:44,Deployability,install,install,44,**Description**; Fix specifying of wheel to install during post build verification. When we switched to a newer cibuildwheel the tags of the built Linux wheels changed and broke the pre-upload to PyPI verification step. This fixes the name of the wheel to match that of the ones built by the newer cibuildwheel. . **Related issues or PRs**; - None. **Changelog**; Fix specifying of wheel to install during post build verification.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1863
https://github.com/qutip/qutip/pull/1863:391,Deployability,install,install,391,**Description**; Fix specifying of wheel to install during post build verification. When we switched to a newer cibuildwheel the tags of the built Linux wheels changed and broke the pre-upload to PyPI verification step. This fixes the name of the wheel to match that of the ones built by the newer cibuildwheel. . **Related issues or PRs**; - None. **Changelog**; Fix specifying of wheel to install during post build verification.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1863
https://github.com/qutip/qutip/issues/1864:624,Deployability,integrat,integrator,624,"### Bug Description. When one uses the `floquet_modes` function, the Floquet modes can sometimes come out non-orthogonal. **More info** . I think the problem occurs when some quasienergies are almost degenerate. This could be related to the fact that `floquet_modes` uses `eig` from numpy to diagonalise the propagator U, which in turn does not guarantee orthogonality of the eigenvectors according to the [numpy docs. ](https://numpy.org/doc/stable/reference/generated/numpy.linalg.eig.html). I tried to come up with a simple example of the problem. I also tested what happens if one changes the precision of the numerical integrator used in the `propagator` function within `floquet modes`, and it does affect the result a lot. The `floquet_modes_mod` function that appears in the code below is exactly `floquet_modes`, only I modified it to also accept Options that are then passed to `propagator` (by the way, is there a smarter way to do this without defining this new function?). . ### Code to Reproduce the Bug. ```shell; from qutip import *; import numpy as np; import numpy.linalg as la; from numpy import angle, pi. # create a modified floquet_modes that also accepts Options; def floquet_modes_mod(H, T, args=None, sort=False, U=None, options=None):; """"""; Calculate the initial Floquet modes Phi_alpha(0) for a driven system with; period T. Returns a list of :class:`qutip.qobj` instances representing the Floquet; modes and a list of corresponding quasienergies, sorted by increasing; quasienergy in the interval [-pi/T, pi/T]. The optional parameter `sort`; decides if the output is to be sorted in increasing quasienergies or not. Parameters; ----------. H : :class:`qutip.qobj`; system Hamiltonian, time-dependent with period `T`. args : dictionary; dictionary with variables required to evaluate H. T : float; The period of the time-dependence of the hamiltonian. The default value; 'None' indicates that the 'tlist' spans a single period of the driving. U : :class:`qutip.qobj`; The p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1864
https://github.com/qutip/qutip/issues/1864:3436,Deployability,integrat,integration,3436,"ates for the propagator; evals, evecs = la.eig(U.full()). eargs = angle(evals). # make sure that the phase is in the interval [-pi, pi], so that; # the quasi energy is in the interval [-pi/T, pi/T] where T is the; # period of the driving. eargs += (eargs <= -2*pi) * (2*pi) +; # (eargs > 0) * (-2*pi); eargs += (eargs <= -pi) * (2 * pi) + (eargs > pi) * (-2 * pi); e_quasi = -eargs / T. # sort by the quasi energy; if sort:; order = np.argsort(-e_quasi); else:; order = list(range(len(evals))). # prepare a list of kets for the floquet states; new_dims = [U.dims[0], [1] * len(U.dims[0])]; new_shape = [U.shape[0], 1]; kets_order = [Qobj(np.matrix(evecs[:, o]).T,; dims=new_dims, shape=new_shape) for o in order]. return kets_order, e_quasi[order]. # create periodically-driven Hamiltonian (with degenerate quasienergies); XI = tensor(sigmax(), qeye(2)); ZI = tensor(sigmaz(), qeye(2)); a = 2.404825557695773; H = [ ZI , [0.5 * a * 10 *XI, 'cos(10*t)']]. T = 2*np.pi/10. # compute Floquet modes with different integration accuracy. fq_modes0, fq_energy0 = floquet_modes(H, T); fq_modes1, fq_energy1 = floquet_modes_mod(H, T, options=Options(rtol=1e-12,atol=1e-13, nsteps=1e+8)); fq_modes2, fq_energy2 = floquet_modes_mod(H, T, options=Options(rtol=1e-14,atol=1e-14, nsteps=1e+8)). # print overlap between two modes ; print('\tfloquet_modes:', abs(fq_modes0[0].overlap(fq_modes0[2]))); print('\tfloquet_modes_mod1:', abs(fq_modes1[0].overlap(fq_modes1[2]))); print('\tfloquet_modes_mod2:', abs(fq_modes2[0].overlap(fq_modes2[2]))); ```. ### Code Output. ```shell; floquet_modes: 0.042385964453357024; floquet_modes_mod1: 0.11521649304536484; floquet_modes_mod2: 5.384787239183031e-24; ```. ### Expected Behaviour. I expected the Floquet modes to be orthogonal up to numerical precision. ### Your Environment. ```shell; QuTiP Version: 4.6.3; Numpy Version: 1.20.2; Scipy Version: 1.6.2; Cython Version: 0.29.21; Matplotlib Version: 3.3.2; Python Version: 3.8.5; Number of CPUs: 8; BLAS Info: OPENBLAS; O",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1864
https://github.com/qutip/qutip/issues/1864:4433,Deployability,Install,Installed,4433,"rval [-pi, pi], so that; # the quasi energy is in the interval [-pi/T, pi/T] where T is the; # period of the driving. eargs += (eargs <= -2*pi) * (2*pi) +; # (eargs > 0) * (-2*pi); eargs += (eargs <= -pi) * (2 * pi) + (eargs > pi) * (-2 * pi); e_quasi = -eargs / T. # sort by the quasi energy; if sort:; order = np.argsort(-e_quasi); else:; order = list(range(len(evals))). # prepare a list of kets for the floquet states; new_dims = [U.dims[0], [1] * len(U.dims[0])]; new_shape = [U.shape[0], 1]; kets_order = [Qobj(np.matrix(evecs[:, o]).T,; dims=new_dims, shape=new_shape) for o in order]. return kets_order, e_quasi[order]. # create periodically-driven Hamiltonian (with degenerate quasienergies); XI = tensor(sigmax(), qeye(2)); ZI = tensor(sigmaz(), qeye(2)); a = 2.404825557695773; H = [ ZI , [0.5 * a * 10 *XI, 'cos(10*t)']]. T = 2*np.pi/10. # compute Floquet modes with different integration accuracy. fq_modes0, fq_energy0 = floquet_modes(H, T); fq_modes1, fq_energy1 = floquet_modes_mod(H, T, options=Options(rtol=1e-12,atol=1e-13, nsteps=1e+8)); fq_modes2, fq_energy2 = floquet_modes_mod(H, T, options=Options(rtol=1e-14,atol=1e-14, nsteps=1e+8)). # print overlap between two modes ; print('\tfloquet_modes:', abs(fq_modes0[0].overlap(fq_modes0[2]))); print('\tfloquet_modes_mod1:', abs(fq_modes1[0].overlap(fq_modes1[2]))); print('\tfloquet_modes_mod2:', abs(fq_modes2[0].overlap(fq_modes2[2]))); ```. ### Code Output. ```shell; floquet_modes: 0.042385964453357024; floquet_modes_mod1: 0.11521649304536484; floquet_modes_mod2: 5.384787239183031e-24; ```. ### Expected Behaviour. I expected the Floquet modes to be orthogonal up to numerical precision. ### Your Environment. ```shell; QuTiP Version: 4.6.3; Numpy Version: 1.20.2; Scipy Version: 1.6.2; Cython Version: 0.29.21; Matplotlib Version: 3.3.2; Python Version: 3.8.5; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1864
https://github.com/qutip/qutip/issues/1864:2584,Energy Efficiency,energy,energy,2584,"e output is to be sorted in increasing quasienergies or not. Parameters; ----------. H : :class:`qutip.qobj`; system Hamiltonian, time-dependent with period `T`. args : dictionary; dictionary with variables required to evaluate H. T : float; The period of the time-dependence of the hamiltonian. The default value; 'None' indicates that the 'tlist' spans a single period of the driving. U : :class:`qutip.qobj`; The propagator for the time-dependent Hamiltonian with period `T`.; If U is `None` (default), it will be calculated from the Hamiltonian; `H` using :func:`qutip.propagator.propagator`. Returns; -------. output : list of kets, list of quasi energies. Two lists: the Floquet modes as kets and the quasi energies. """""". if U is None:; # get the unitary propagator; U = propagator(H, T, [], args, options = options). # find the eigenstates for the propagator; evals, evecs = la.eig(U.full()). eargs = angle(evals). # make sure that the phase is in the interval [-pi, pi], so that; # the quasi energy is in the interval [-pi/T, pi/T] where T is the; # period of the driving. eargs += (eargs <= -2*pi) * (2*pi) +; # (eargs > 0) * (-2*pi); eargs += (eargs <= -pi) * (2 * pi) + (eargs > pi) * (-2 * pi); e_quasi = -eargs / T. # sort by the quasi energy; if sort:; order = np.argsort(-e_quasi); else:; order = list(range(len(evals))). # prepare a list of kets for the floquet states; new_dims = [U.dims[0], [1] * len(U.dims[0])]; new_shape = [U.shape[0], 1]; kets_order = [Qobj(np.matrix(evecs[:, o]).T,; dims=new_dims, shape=new_shape) for o in order]. return kets_order, e_quasi[order]. # create periodically-driven Hamiltonian (with degenerate quasienergies); XI = tensor(sigmax(), qeye(2)); ZI = tensor(sigmaz(), qeye(2)); a = 2.404825557695773; H = [ ZI , [0.5 * a * 10 *XI, 'cos(10*t)']]. T = 2*np.pi/10. # compute Floquet modes with different integration accuracy. fq_modes0, fq_energy0 = floquet_modes(H, T); fq_modes1, fq_energy1 = floquet_modes_mod(H, T, options=Options(rtol=1e-12,atol=1e",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1864
https://github.com/qutip/qutip/issues/1864:2833,Energy Efficiency,energy,energy,2833,"of the time-dependence of the hamiltonian. The default value; 'None' indicates that the 'tlist' spans a single period of the driving. U : :class:`qutip.qobj`; The propagator for the time-dependent Hamiltonian with period `T`.; If U is `None` (default), it will be calculated from the Hamiltonian; `H` using :func:`qutip.propagator.propagator`. Returns; -------. output : list of kets, list of quasi energies. Two lists: the Floquet modes as kets and the quasi energies. """""". if U is None:; # get the unitary propagator; U = propagator(H, T, [], args, options = options). # find the eigenstates for the propagator; evals, evecs = la.eig(U.full()). eargs = angle(evals). # make sure that the phase is in the interval [-pi, pi], so that; # the quasi energy is in the interval [-pi/T, pi/T] where T is the; # period of the driving. eargs += (eargs <= -2*pi) * (2*pi) +; # (eargs > 0) * (-2*pi); eargs += (eargs <= -pi) * (2 * pi) + (eargs > pi) * (-2 * pi); e_quasi = -eargs / T. # sort by the quasi energy; if sort:; order = np.argsort(-e_quasi); else:; order = list(range(len(evals))). # prepare a list of kets for the floquet states; new_dims = [U.dims[0], [1] * len(U.dims[0])]; new_shape = [U.shape[0], 1]; kets_order = [Qobj(np.matrix(evecs[:, o]).T,; dims=new_dims, shape=new_shape) for o in order]. return kets_order, e_quasi[order]. # create periodically-driven Hamiltonian (with degenerate quasienergies); XI = tensor(sigmax(), qeye(2)); ZI = tensor(sigmaz(), qeye(2)); a = 2.404825557695773; H = [ ZI , [0.5 * a * 10 *XI, 'cos(10*t)']]. T = 2*np.pi/10. # compute Floquet modes with different integration accuracy. fq_modes0, fq_energy0 = floquet_modes(H, T); fq_modes1, fq_energy1 = floquet_modes_mod(H, T, options=Options(rtol=1e-12,atol=1e-13, nsteps=1e+8)); fq_modes2, fq_energy2 = floquet_modes_mod(H, T, options=Options(rtol=1e-14,atol=1e-14, nsteps=1e+8)). # print overlap between two modes ; print('\tfloquet_modes:', abs(fq_modes0[0].overlap(fq_modes0[2]))); print('\tfloquet_modes_mod",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1864
https://github.com/qutip/qutip/issues/1864:624,Integrability,integrat,integrator,624,"### Bug Description. When one uses the `floquet_modes` function, the Floquet modes can sometimes come out non-orthogonal. **More info** . I think the problem occurs when some quasienergies are almost degenerate. This could be related to the fact that `floquet_modes` uses `eig` from numpy to diagonalise the propagator U, which in turn does not guarantee orthogonality of the eigenvectors according to the [numpy docs. ](https://numpy.org/doc/stable/reference/generated/numpy.linalg.eig.html). I tried to come up with a simple example of the problem. I also tested what happens if one changes the precision of the numerical integrator used in the `propagator` function within `floquet modes`, and it does affect the result a lot. The `floquet_modes_mod` function that appears in the code below is exactly `floquet_modes`, only I modified it to also accept Options that are then passed to `propagator` (by the way, is there a smarter way to do this without defining this new function?). . ### Code to Reproduce the Bug. ```shell; from qutip import *; import numpy as np; import numpy.linalg as la; from numpy import angle, pi. # create a modified floquet_modes that also accepts Options; def floquet_modes_mod(H, T, args=None, sort=False, U=None, options=None):; """"""; Calculate the initial Floquet modes Phi_alpha(0) for a driven system with; period T. Returns a list of :class:`qutip.qobj` instances representing the Floquet; modes and a list of corresponding quasienergies, sorted by increasing; quasienergy in the interval [-pi/T, pi/T]. The optional parameter `sort`; decides if the output is to be sorted in increasing quasienergies or not. Parameters; ----------. H : :class:`qutip.qobj`; system Hamiltonian, time-dependent with period `T`. args : dictionary; dictionary with variables required to evaluate H. T : float; The period of the time-dependence of the hamiltonian. The default value; 'None' indicates that the 'tlist' spans a single period of the driving. U : :class:`qutip.qobj`; The p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1864
https://github.com/qutip/qutip/issues/1864:1719,Integrability,depend,dependent,1719,"result a lot. The `floquet_modes_mod` function that appears in the code below is exactly `floquet_modes`, only I modified it to also accept Options that are then passed to `propagator` (by the way, is there a smarter way to do this without defining this new function?). . ### Code to Reproduce the Bug. ```shell; from qutip import *; import numpy as np; import numpy.linalg as la; from numpy import angle, pi. # create a modified floquet_modes that also accepts Options; def floquet_modes_mod(H, T, args=None, sort=False, U=None, options=None):; """"""; Calculate the initial Floquet modes Phi_alpha(0) for a driven system with; period T. Returns a list of :class:`qutip.qobj` instances representing the Floquet; modes and a list of corresponding quasienergies, sorted by increasing; quasienergy in the interval [-pi/T, pi/T]. The optional parameter `sort`; decides if the output is to be sorted in increasing quasienergies or not. Parameters; ----------. H : :class:`qutip.qobj`; system Hamiltonian, time-dependent with period `T`. args : dictionary; dictionary with variables required to evaluate H. T : float; The period of the time-dependence of the hamiltonian. The default value; 'None' indicates that the 'tlist' spans a single period of the driving. U : :class:`qutip.qobj`; The propagator for the time-dependent Hamiltonian with period `T`.; If U is `None` (default), it will be calculated from the Hamiltonian; `H` using :func:`qutip.propagator.propagator`. Returns; -------. output : list of kets, list of quasi energies. Two lists: the Floquet modes as kets and the quasi energies. """""". if U is None:; # get the unitary propagator; U = propagator(H, T, [], args, options = options). # find the eigenstates for the propagator; evals, evecs = la.eig(U.full()). eargs = angle(evals). # make sure that the phase is in the interval [-pi, pi], so that; # the quasi energy is in the interval [-pi/T, pi/T] where T is the; # period of the driving. eargs += (eargs <= -2*pi) * (2*pi) +; # (eargs > 0)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1864
https://github.com/qutip/qutip/issues/1864:1849,Integrability,depend,dependence,1849,"so accept Options that are then passed to `propagator` (by the way, is there a smarter way to do this without defining this new function?). . ### Code to Reproduce the Bug. ```shell; from qutip import *; import numpy as np; import numpy.linalg as la; from numpy import angle, pi. # create a modified floquet_modes that also accepts Options; def floquet_modes_mod(H, T, args=None, sort=False, U=None, options=None):; """"""; Calculate the initial Floquet modes Phi_alpha(0) for a driven system with; period T. Returns a list of :class:`qutip.qobj` instances representing the Floquet; modes and a list of corresponding quasienergies, sorted by increasing; quasienergy in the interval [-pi/T, pi/T]. The optional parameter `sort`; decides if the output is to be sorted in increasing quasienergies or not. Parameters; ----------. H : :class:`qutip.qobj`; system Hamiltonian, time-dependent with period `T`. args : dictionary; dictionary with variables required to evaluate H. T : float; The period of the time-dependence of the hamiltonian. The default value; 'None' indicates that the 'tlist' spans a single period of the driving. U : :class:`qutip.qobj`; The propagator for the time-dependent Hamiltonian with period `T`.; If U is `None` (default), it will be calculated from the Hamiltonian; `H` using :func:`qutip.propagator.propagator`. Returns; -------. output : list of kets, list of quasi energies. Two lists: the Floquet modes as kets and the quasi energies. """""". if U is None:; # get the unitary propagator; U = propagator(H, T, [], args, options = options). # find the eigenstates for the propagator; evals, evecs = la.eig(U.full()). eargs = angle(evals). # make sure that the phase is in the interval [-pi, pi], so that; # the quasi energy is in the interval [-pi/T, pi/T] where T is the; # period of the driving. eargs += (eargs <= -2*pi) * (2*pi) +; # (eargs > 0) * (-2*pi); eargs += (eargs <= -pi) * (2 * pi) + (eargs > pi) * (-2 * pi); e_quasi = -eargs / T. # sort by the quasi energy; if sor",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1864
https://github.com/qutip/qutip/issues/1864:2024,Integrability,depend,dependent,2024,"ll; from qutip import *; import numpy as np; import numpy.linalg as la; from numpy import angle, pi. # create a modified floquet_modes that also accepts Options; def floquet_modes_mod(H, T, args=None, sort=False, U=None, options=None):; """"""; Calculate the initial Floquet modes Phi_alpha(0) for a driven system with; period T. Returns a list of :class:`qutip.qobj` instances representing the Floquet; modes and a list of corresponding quasienergies, sorted by increasing; quasienergy in the interval [-pi/T, pi/T]. The optional parameter `sort`; decides if the output is to be sorted in increasing quasienergies or not. Parameters; ----------. H : :class:`qutip.qobj`; system Hamiltonian, time-dependent with period `T`. args : dictionary; dictionary with variables required to evaluate H. T : float; The period of the time-dependence of the hamiltonian. The default value; 'None' indicates that the 'tlist' spans a single period of the driving. U : :class:`qutip.qobj`; The propagator for the time-dependent Hamiltonian with period `T`.; If U is `None` (default), it will be calculated from the Hamiltonian; `H` using :func:`qutip.propagator.propagator`. Returns; -------. output : list of kets, list of quasi energies. Two lists: the Floquet modes as kets and the quasi energies. """""". if U is None:; # get the unitary propagator; U = propagator(H, T, [], args, options = options). # find the eigenstates for the propagator; evals, evecs = la.eig(U.full()). eargs = angle(evals). # make sure that the phase is in the interval [-pi, pi], so that; # the quasi energy is in the interval [-pi/T, pi/T] where T is the; # period of the driving. eargs += (eargs <= -2*pi) * (2*pi) +; # (eargs > 0) * (-2*pi); eargs += (eargs <= -pi) * (2 * pi) + (eargs > pi) * (-2 * pi); e_quasi = -eargs / T. # sort by the quasi energy; if sort:; order = np.argsort(-e_quasi); else:; order = list(range(len(evals))). # prepare a list of kets for the floquet states; new_dims = [U.dims[0], [1] * len(U.dims[0])]; new_shape ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1864
https://github.com/qutip/qutip/issues/1864:3436,Integrability,integrat,integration,3436,"ates for the propagator; evals, evecs = la.eig(U.full()). eargs = angle(evals). # make sure that the phase is in the interval [-pi, pi], so that; # the quasi energy is in the interval [-pi/T, pi/T] where T is the; # period of the driving. eargs += (eargs <= -2*pi) * (2*pi) +; # (eargs > 0) * (-2*pi); eargs += (eargs <= -pi) * (2 * pi) + (eargs > pi) * (-2 * pi); e_quasi = -eargs / T. # sort by the quasi energy; if sort:; order = np.argsort(-e_quasi); else:; order = list(range(len(evals))). # prepare a list of kets for the floquet states; new_dims = [U.dims[0], [1] * len(U.dims[0])]; new_shape = [U.shape[0], 1]; kets_order = [Qobj(np.matrix(evecs[:, o]).T,; dims=new_dims, shape=new_shape) for o in order]. return kets_order, e_quasi[order]. # create periodically-driven Hamiltonian (with degenerate quasienergies); XI = tensor(sigmax(), qeye(2)); ZI = tensor(sigmaz(), qeye(2)); a = 2.404825557695773; H = [ ZI , [0.5 * a * 10 *XI, 'cos(10*t)']]. T = 2*np.pi/10. # compute Floquet modes with different integration accuracy. fq_modes0, fq_energy0 = floquet_modes(H, T); fq_modes1, fq_energy1 = floquet_modes_mod(H, T, options=Options(rtol=1e-12,atol=1e-13, nsteps=1e+8)); fq_modes2, fq_energy2 = floquet_modes_mod(H, T, options=Options(rtol=1e-14,atol=1e-14, nsteps=1e+8)). # print overlap between two modes ; print('\tfloquet_modes:', abs(fq_modes0[0].overlap(fq_modes0[2]))); print('\tfloquet_modes_mod1:', abs(fq_modes1[0].overlap(fq_modes1[2]))); print('\tfloquet_modes_mod2:', abs(fq_modes2[0].overlap(fq_modes2[2]))); ```. ### Code Output. ```shell; floquet_modes: 0.042385964453357024; floquet_modes_mod1: 0.11521649304536484; floquet_modes_mod2: 5.384787239183031e-24; ```. ### Expected Behaviour. I expected the Floquet modes to be orthogonal up to numerical precision. ### Your Environment. ```shell; QuTiP Version: 4.6.3; Numpy Version: 1.20.2; Scipy Version: 1.6.2; Cython Version: 0.29.21; Matplotlib Version: 3.3.2; Python Version: 3.8.5; Number of CPUs: 8; BLAS Info: OPENBLAS; O",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1864
https://github.com/qutip/qutip/issues/1864:1781,Modifiability,variab,variables,1781,"the code below is exactly `floquet_modes`, only I modified it to also accept Options that are then passed to `propagator` (by the way, is there a smarter way to do this without defining this new function?). . ### Code to Reproduce the Bug. ```shell; from qutip import *; import numpy as np; import numpy.linalg as la; from numpy import angle, pi. # create a modified floquet_modes that also accepts Options; def floquet_modes_mod(H, T, args=None, sort=False, U=None, options=None):; """"""; Calculate the initial Floquet modes Phi_alpha(0) for a driven system with; period T. Returns a list of :class:`qutip.qobj` instances representing the Floquet; modes and a list of corresponding quasienergies, sorted by increasing; quasienergy in the interval [-pi/T, pi/T]. The optional parameter `sort`; decides if the output is to be sorted in increasing quasienergies or not. Parameters; ----------. H : :class:`qutip.qobj`; system Hamiltonian, time-dependent with period `T`. args : dictionary; dictionary with variables required to evaluate H. T : float; The period of the time-dependence of the hamiltonian. The default value; 'None' indicates that the 'tlist' spans a single period of the driving. U : :class:`qutip.qobj`; The propagator for the time-dependent Hamiltonian with period `T`.; If U is `None` (default), it will be calculated from the Hamiltonian; `H` using :func:`qutip.propagator.propagator`. Returns; -------. output : list of kets, list of quasi energies. Two lists: the Floquet modes as kets and the quasi energies. """""". if U is None:; # get the unitary propagator; U = propagator(H, T, [], args, options = options). # find the eigenstates for the propagator; evals, evecs = la.eig(U.full()). eargs = angle(evals). # make sure that the phase is in the interval [-pi, pi], so that; # the quasi energy is in the interval [-pi/T, pi/T] where T is the; # period of the driving. eargs += (eargs <= -2*pi) * (2*pi) +; # (eargs > 0) * (-2*pi); eargs += (eargs <= -pi) * (2 * pi) + (eargs > pi) * ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1864
https://github.com/qutip/qutip/issues/1864:558,Testability,test,tested,558,"### Bug Description. When one uses the `floquet_modes` function, the Floquet modes can sometimes come out non-orthogonal. **More info** . I think the problem occurs when some quasienergies are almost degenerate. This could be related to the fact that `floquet_modes` uses `eig` from numpy to diagonalise the propagator U, which in turn does not guarantee orthogonality of the eigenvectors according to the [numpy docs. ](https://numpy.org/doc/stable/reference/generated/numpy.linalg.eig.html). I tried to come up with a simple example of the problem. I also tested what happens if one changes the precision of the numerical integrator used in the `propagator` function within `floquet modes`, and it does affect the result a lot. The `floquet_modes_mod` function that appears in the code below is exactly `floquet_modes`, only I modified it to also accept Options that are then passed to `propagator` (by the way, is there a smarter way to do this without defining this new function?). . ### Code to Reproduce the Bug. ```shell; from qutip import *; import numpy as np; import numpy.linalg as la; from numpy import angle, pi. # create a modified floquet_modes that also accepts Options; def floquet_modes_mod(H, T, args=None, sort=False, U=None, options=None):; """"""; Calculate the initial Floquet modes Phi_alpha(0) for a driven system with; period T. Returns a list of :class:`qutip.qobj` instances representing the Floquet; modes and a list of corresponding quasienergies, sorted by increasing; quasienergy in the interval [-pi/T, pi/T]. The optional parameter `sort`; decides if the output is to be sorted in increasing quasienergies or not. Parameters; ----------. H : :class:`qutip.qobj`; system Hamiltonian, time-dependent with period `T`. args : dictionary; dictionary with variables required to evaluate H. T : float; The period of the time-dependence of the hamiltonian. The default value; 'None' indicates that the 'tlist' spans a single period of the driving. U : :class:`qutip.qobj`; The p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1864
https://github.com/qutip/qutip/issues/1864:520,Usability,simpl,simple,520,"### Bug Description. When one uses the `floquet_modes` function, the Floquet modes can sometimes come out non-orthogonal. **More info** . I think the problem occurs when some quasienergies are almost degenerate. This could be related to the fact that `floquet_modes` uses `eig` from numpy to diagonalise the propagator U, which in turn does not guarantee orthogonality of the eigenvectors according to the [numpy docs. ](https://numpy.org/doc/stable/reference/generated/numpy.linalg.eig.html). I tried to come up with a simple example of the problem. I also tested what happens if one changes the precision of the numerical integrator used in the `propagator` function within `floquet modes`, and it does affect the result a lot. The `floquet_modes_mod` function that appears in the code below is exactly `floquet_modes`, only I modified it to also accept Options that are then passed to `propagator` (by the way, is there a smarter way to do this without defining this new function?). . ### Code to Reproduce the Bug. ```shell; from qutip import *; import numpy as np; import numpy.linalg as la; from numpy import angle, pi. # create a modified floquet_modes that also accepts Options; def floquet_modes_mod(H, T, args=None, sort=False, U=None, options=None):; """"""; Calculate the initial Floquet modes Phi_alpha(0) for a driven system with; period T. Returns a list of :class:`qutip.qobj` instances representing the Floquet; modes and a list of corresponding quasienergies, sorted by increasing; quasienergy in the interval [-pi/T, pi/T]. The optional parameter `sort`; decides if the output is to be sorted in increasing quasienergies or not. Parameters; ----------. H : :class:`qutip.qobj`; system Hamiltonian, time-dependent with period `T`. args : dictionary; dictionary with variables required to evaluate H. T : float; The period of the time-dependence of the hamiltonian. The default value; 'None' indicates that the 'tlist' spans a single period of the driving. U : :class:`qutip.qobj`; The p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1864
https://github.com/qutip/qutip/issues/1865:25,Testability,test,test,25,"### Bug Description. The test `Test_isherm.test_compare_implicit_zero_random` can sometime fail randomly.; I ran in locally 1000000 times and it failed 36 times.; It usually fails at high density (>90%), but can fail with a density of 75%.; https://github.com/qutip/qutip/runs/6012031509. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. It should always pass. ### Your Environment. ```shell; Seen in ""ubuntu-latest, python3.10, Python 3.10"" test job on `dev.major`.; Reproduced locally on python 3.9.; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1865
https://github.com/qutip/qutip/issues/1865:495,Testability,test,test,495,"### Bug Description. The test `Test_isherm.test_compare_implicit_zero_random` can sometime fail randomly.; I ran in locally 1000000 times and it failed 36 times.; It usually fails at high density (>90%), but can fail with a density of 75%.; https://github.com/qutip/qutip/runs/6012031509. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. It should always pass. ### Your Environment. ```shell; Seen in ""ubuntu-latest, python3.10, Python 3.10"" test job on `dev.major`.; Reproduced locally on python 3.9.; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1865
https://github.com/qutip/qutip/pull/1866:44,Testability,test,tested,44,"**Description**; `isherm_csr` did not fully tested the structure, it only checked that each line had as many elements in it than the corresponding column. So ; ```; [[1, 1, 0],; [0, 1, 1],; [1, 0, 1]]; ```; was seen as hermician. This added a second layer of structure check for such cases and a test that would previously fail. **Related issues or PRs**; Fixes #1865",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1866
https://github.com/qutip/qutip/pull/1866:296,Testability,test,test,296,"**Description**; `isherm_csr` did not fully tested the structure, it only checked that each line had as many elements in it than the corresponding column. So ; ```; [[1, 1, 0],; [0, 1, 1],; [1, 0, 1]]; ```; was seen as hermician. This added a second layer of structure check for such cases and a test that would previously fail. **Related issues or PRs**; Fixes #1865",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1866
https://github.com/qutip/qutip/pull/1867:345,Testability,test,test,345,"**Description**; For hermician matrices, eigenstates are expected to be orthogonal to each other. . `eigh` used by the dense specialization create such states. But in `eigs_csr`, since we obtain the states in 2 calls of `sp.linalg.eigsh`, the states can overlap. This ensure that the eigen states produced by `eigs_csr` are orthogonal and add a test for it. **Related issues or PRs**; Fix #1851",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1867
https://github.com/qutip/qutip/pull/1868:17,Deployability,Update,Update,17,**Description**; Update HEOM for v5. **Related issues or PRs**; - One of the todos from #1850. **Changelog**; Update HEOM for v5.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1868
https://github.com/qutip/qutip/pull/1868:110,Deployability,Update,Update,110,**Description**; Update HEOM for v5. **Related issues or PRs**; - One of the todos from #1850. **Changelog**; Update HEOM for v5.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1868
https://github.com/qutip/qutip/pull/1869:1709,Availability,error,errors,1709,"**Description**; Update HEOM for v5. Other changes:; - This resulted in a bit of a refactor of the Result class (#1907); - I found a few places where QobjEvo did not correctly set `.type` and fixed those (they were breaking the HEOM tests). Todos and questions:; - [X] Should HierarchyADOsState store ado_state as a Data object rather than a numpy array? (it can't be stored as a Data object because the ADOs have shape `n_ado, n, n` and the Data layer only supports 2-d arrays).; - [X] How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). (implemented); - [X] What should be done with the steady_state method? I guess it can just stay. Should other solvers also have this? (it should just stay, I think); - [x] Recheck the time-dependent case. (I also simplified the time-dependent case so that the Liouvillian is never added and so doesn't have to be subtracted off).; - [X] The HEOM can't really take new QObjEvo arguments each time `run` is called because calculating the RHS again is quite expensive. Maybe something can be done? (implemented -- passing new args to .run is now supported); - [X] In the base solver the new options seem to be set after retrieving the integrator -- is this right? (fixed); - [X] Compare performance to the HEOM in 4.7. (looks faster, yay!); - [X] We could also implement `.start()` and `.step()` for the HEOMSolver. Not quite sure of the use case yet though. (implemented and tested -- the implementation came for free after sorting out having .run inherit from the base solver).; - [x] Add some direct tests for the QobjEvo type errors that have been fixed.; - [x] Moved solver into `qutip.solver.heom`. . **Related issues or PRs**; - One of the todos from #1850; - In #1907 the Result class was changed largely to support extension by the HEOMSolver. **Changelog**; Update HEOM for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1869
https://github.com/qutip/qutip/pull/1869:17,Deployability,Update,Update,17,"**Description**; Update HEOM for v5. Other changes:; - This resulted in a bit of a refactor of the Result class (#1907); - I found a few places where QobjEvo did not correctly set `.type` and fixed those (they were breaking the HEOM tests). Todos and questions:; - [X] Should HierarchyADOsState store ado_state as a Data object rather than a numpy array? (it can't be stored as a Data object because the ADOs have shape `n_ado, n, n` and the Data layer only supports 2-d arrays).; - [X] How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). (implemented); - [X] What should be done with the steady_state method? I guess it can just stay. Should other solvers also have this? (it should just stay, I think); - [x] Recheck the time-dependent case. (I also simplified the time-dependent case so that the Liouvillian is never added and so doesn't have to be subtracted off).; - [X] The HEOM can't really take new QObjEvo arguments each time `run` is called because calculating the RHS again is quite expensive. Maybe something can be done? (implemented -- passing new args to .run is now supported); - [X] In the base solver the new options seem to be set after retrieving the integrator -- is this right? (fixed); - [X] Compare performance to the HEOM in 4.7. (looks faster, yay!); - [X] We could also implement `.start()` and `.step()` for the HEOMSolver. Not quite sure of the use case yet though. (implemented and tested -- the implementation came for free after sorting out having .run inherit from the base solver).; - [x] Add some direct tests for the QobjEvo type errors that have been fixed.; - [x] Moved solver into `qutip.solver.heom`. . **Related issues or PRs**; - One of the todos from #1850; - In #1907 the Result class was changed largely to support extension by the HEOMSolver. **Changelog**; Update HEOM for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1869
https://github.com/qutip/qutip/pull/1869:1314,Deployability,integrat,integrator,1314,"**Description**; Update HEOM for v5. Other changes:; - This resulted in a bit of a refactor of the Result class (#1907); - I found a few places where QobjEvo did not correctly set `.type` and fixed those (they were breaking the HEOM tests). Todos and questions:; - [X] Should HierarchyADOsState store ado_state as a Data object rather than a numpy array? (it can't be stored as a Data object because the ADOs have shape `n_ado, n, n` and the Data layer only supports 2-d arrays).; - [X] How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). (implemented); - [X] What should be done with the steady_state method? I guess it can just stay. Should other solvers also have this? (it should just stay, I think); - [x] Recheck the time-dependent case. (I also simplified the time-dependent case so that the Liouvillian is never added and so doesn't have to be subtracted off).; - [X] The HEOM can't really take new QObjEvo arguments each time `run` is called because calculating the RHS again is quite expensive. Maybe something can be done? (implemented -- passing new args to .run is now supported); - [X] In the base solver the new options seem to be set after retrieving the integrator -- is this right? (fixed); - [X] Compare performance to the HEOM in 4.7. (looks faster, yay!); - [X] We could also implement `.start()` and `.step()` for the HEOMSolver. Not quite sure of the use case yet though. (implemented and tested -- the implementation came for free after sorting out having .run inherit from the base solver).; - [x] Add some direct tests for the QobjEvo type errors that have been fixed.; - [x] Moved solver into `qutip.solver.heom`. . **Related issues or PRs**; - One of the todos from #1850; - In #1907 the Result class was changed largely to support extension by the HEOMSolver. **Changelog**; Update HEOM for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1869
https://github.com/qutip/qutip/pull/1869:1947,Deployability,Update,Update,1947,"**Description**; Update HEOM for v5. Other changes:; - This resulted in a bit of a refactor of the Result class (#1907); - I found a few places where QobjEvo did not correctly set `.type` and fixed those (they were breaking the HEOM tests). Todos and questions:; - [X] Should HierarchyADOsState store ado_state as a Data object rather than a numpy array? (it can't be stored as a Data object because the ADOs have shape `n_ado, n, n` and the Data layer only supports 2-d arrays).; - [X] How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). (implemented); - [X] What should be done with the steady_state method? I guess it can just stay. Should other solvers also have this? (it should just stay, I think); - [x] Recheck the time-dependent case. (I also simplified the time-dependent case so that the Liouvillian is never added and so doesn't have to be subtracted off).; - [X] The HEOM can't really take new QObjEvo arguments each time `run` is called because calculating the RHS again is quite expensive. Maybe something can be done? (implemented -- passing new args to .run is now supported); - [X] In the base solver the new options seem to be set after retrieving the integrator -- is this right? (fixed); - [X] Compare performance to the HEOM in 4.7. (looks faster, yay!); - [X] We could also implement `.start()` and `.step()` for the HEOMSolver. Not quite sure of the use case yet though. (implemented and tested -- the implementation came for free after sorting out having .run inherit from the base solver).; - [x] Add some direct tests for the QobjEvo type errors that have been fixed.; - [x] Moved solver into `qutip.solver.heom`. . **Related issues or PRs**; - One of the todos from #1850; - In #1907 the Result class was changed largely to support extension by the HEOMSolver. **Changelog**; Update HEOM for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1869
https://github.com/qutip/qutip/pull/1869:871,Integrability,depend,dependent,871,"**Description**; Update HEOM for v5. Other changes:; - This resulted in a bit of a refactor of the Result class (#1907); - I found a few places where QobjEvo did not correctly set `.type` and fixed those (they were breaking the HEOM tests). Todos and questions:; - [X] Should HierarchyADOsState store ado_state as a Data object rather than a numpy array? (it can't be stored as a Data object because the ADOs have shape `n_ado, n, n` and the Data layer only supports 2-d arrays).; - [X] How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). (implemented); - [X] What should be done with the steady_state method? I guess it can just stay. Should other solvers also have this? (it should just stay, I think); - [x] Recheck the time-dependent case. (I also simplified the time-dependent case so that the Liouvillian is never added and so doesn't have to be subtracted off).; - [X] The HEOM can't really take new QObjEvo arguments each time `run` is called because calculating the RHS again is quite expensive. Maybe something can be done? (implemented -- passing new args to .run is now supported); - [X] In the base solver the new options seem to be set after retrieving the integrator -- is this right? (fixed); - [X] Compare performance to the HEOM in 4.7. (looks faster, yay!); - [X] We could also implement `.start()` and `.step()` for the HEOMSolver. Not quite sure of the use case yet though. (implemented and tested -- the implementation came for free after sorting out having .run inherit from the base solver).; - [x] Add some direct tests for the QobjEvo type errors that have been fixed.; - [x] Moved solver into `qutip.solver.heom`. . **Related issues or PRs**; - One of the todos from #1850; - In #1907 the Result class was changed largely to support extension by the HEOMSolver. **Changelog**; Update HEOM for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1869
https://github.com/qutip/qutip/pull/1869:915,Integrability,depend,dependent,915,"**Description**; Update HEOM for v5. Other changes:; - This resulted in a bit of a refactor of the Result class (#1907); - I found a few places where QobjEvo did not correctly set `.type` and fixed those (they were breaking the HEOM tests). Todos and questions:; - [X] Should HierarchyADOsState store ado_state as a Data object rather than a numpy array? (it can't be stored as a Data object because the ADOs have shape `n_ado, n, n` and the Data layer only supports 2-d arrays).; - [X] How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). (implemented); - [X] What should be done with the steady_state method? I guess it can just stay. Should other solvers also have this? (it should just stay, I think); - [x] Recheck the time-dependent case. (I also simplified the time-dependent case so that the Liouvillian is never added and so doesn't have to be subtracted off).; - [X] The HEOM can't really take new QObjEvo arguments each time `run` is called because calculating the RHS again is quite expensive. Maybe something can be done? (implemented -- passing new args to .run is now supported); - [X] In the base solver the new options seem to be set after retrieving the integrator -- is this right? (fixed); - [X] Compare performance to the HEOM in 4.7. (looks faster, yay!); - [X] We could also implement `.start()` and `.step()` for the HEOMSolver. Not quite sure of the use case yet though. (implemented and tested -- the implementation came for free after sorting out having .run inherit from the base solver).; - [x] Add some direct tests for the QobjEvo type errors that have been fixed.; - [x] Moved solver into `qutip.solver.heom`. . **Related issues or PRs**; - One of the todos from #1850; - In #1907 the Result class was changed largely to support extension by the HEOMSolver. **Changelog**; Update HEOM for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1869
https://github.com/qutip/qutip/pull/1869:1314,Integrability,integrat,integrator,1314,"**Description**; Update HEOM for v5. Other changes:; - This resulted in a bit of a refactor of the Result class (#1907); - I found a few places where QobjEvo did not correctly set `.type` and fixed those (they were breaking the HEOM tests). Todos and questions:; - [X] Should HierarchyADOsState store ado_state as a Data object rather than a numpy array? (it can't be stored as a Data object because the ADOs have shape `n_ado, n, n` and the Data layer only supports 2-d arrays).; - [X] How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). (implemented); - [X] What should be done with the steady_state method? I guess it can just stay. Should other solvers also have this? (it should just stay, I think); - [x] Recheck the time-dependent case. (I also simplified the time-dependent case so that the Liouvillian is never added and so doesn't have to be subtracted off).; - [X] The HEOM can't really take new QObjEvo arguments each time `run` is called because calculating the RHS again is quite expensive. Maybe something can be done? (implemented -- passing new args to .run is now supported); - [X] In the base solver the new options seem to be set after retrieving the integrator -- is this right? (fixed); - [X] Compare performance to the HEOM in 4.7. (looks faster, yay!); - [X] We could also implement `.start()` and `.step()` for the HEOMSolver. Not quite sure of the use case yet though. (implemented and tested -- the implementation came for free after sorting out having .run inherit from the base solver).; - [x] Add some direct tests for the QobjEvo type errors that have been fixed.; - [x] Moved solver into `qutip.solver.heom`. . **Related issues or PRs**; - One of the todos from #1850; - In #1907 the Result class was changed largely to support extension by the HEOMSolver. **Changelog**; Update HEOM for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1869
https://github.com/qutip/qutip/pull/1869:83,Modifiability,refactor,refactor,83,"**Description**; Update HEOM for v5. Other changes:; - This resulted in a bit of a refactor of the Result class (#1907); - I found a few places where QobjEvo did not correctly set `.type` and fixed those (they were breaking the HEOM tests). Todos and questions:; - [X] Should HierarchyADOsState store ado_state as a Data object rather than a numpy array? (it can't be stored as a Data object because the ADOs have shape `n_ado, n, n` and the Data layer only supports 2-d arrays).; - [X] How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). (implemented); - [X] What should be done with the steady_state method? I guess it can just stay. Should other solvers also have this? (it should just stay, I think); - [x] Recheck the time-dependent case. (I also simplified the time-dependent case so that the Liouvillian is never added and so doesn't have to be subtracted off).; - [X] The HEOM can't really take new QObjEvo arguments each time `run` is called because calculating the RHS again is quite expensive. Maybe something can be done? (implemented -- passing new args to .run is now supported); - [X] In the base solver the new options seem to be set after retrieving the integrator -- is this right? (fixed); - [X] Compare performance to the HEOM in 4.7. (looks faster, yay!); - [X] We could also implement `.start()` and `.step()` for the HEOMSolver. Not quite sure of the use case yet though. (implemented and tested -- the implementation came for free after sorting out having .run inherit from the base solver).; - [x] Add some direct tests for the QobjEvo type errors that have been fixed.; - [x] Moved solver into `qutip.solver.heom`. . **Related issues or PRs**; - One of the todos from #1850; - In #1907 the Result class was changed largely to support extension by the HEOMSolver. **Changelog**; Update HEOM for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1869
https://github.com/qutip/qutip/pull/1869:1628,Modifiability,inherit,inherit,1628,"**Description**; Update HEOM for v5. Other changes:; - This resulted in a bit of a refactor of the Result class (#1907); - I found a few places where QobjEvo did not correctly set `.type` and fixed those (they were breaking the HEOM tests). Todos and questions:; - [X] Should HierarchyADOsState store ado_state as a Data object rather than a numpy array? (it can't be stored as a Data object because the ADOs have shape `n_ado, n, n` and the Data layer only supports 2-d arrays).; - [X] How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). (implemented); - [X] What should be done with the steady_state method? I guess it can just stay. Should other solvers also have this? (it should just stay, I think); - [x] Recheck the time-dependent case. (I also simplified the time-dependent case so that the Liouvillian is never added and so doesn't have to be subtracted off).; - [X] The HEOM can't really take new QObjEvo arguments each time `run` is called because calculating the RHS again is quite expensive. Maybe something can be done? (implemented -- passing new args to .run is now supported); - [X] In the base solver the new options seem to be set after retrieving the integrator -- is this right? (fixed); - [X] Compare performance to the HEOM in 4.7. (looks faster, yay!); - [X] We could also implement `.start()` and `.step()` for the HEOMSolver. Not quite sure of the use case yet though. (implemented and tested -- the implementation came for free after sorting out having .run inherit from the base solver).; - [x] Add some direct tests for the QobjEvo type errors that have been fixed.; - [x] Moved solver into `qutip.solver.heom`. . **Related issues or PRs**; - One of the todos from #1850; - In #1907 the Result class was changed largely to support extension by the HEOMSolver. **Changelog**; Update HEOM for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1869
https://github.com/qutip/qutip/pull/1869:1366,Performance,perform,performance,1366,"**Description**; Update HEOM for v5. Other changes:; - This resulted in a bit of a refactor of the Result class (#1907); - I found a few places where QobjEvo did not correctly set `.type` and fixed those (they were breaking the HEOM tests). Todos and questions:; - [X] Should HierarchyADOsState store ado_state as a Data object rather than a numpy array? (it can't be stored as a Data object because the ADOs have shape `n_ado, n, n` and the Data layer only supports 2-d arrays).; - [X] How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). (implemented); - [X] What should be done with the steady_state method? I guess it can just stay. Should other solvers also have this? (it should just stay, I think); - [x] Recheck the time-dependent case. (I also simplified the time-dependent case so that the Liouvillian is never added and so doesn't have to be subtracted off).; - [X] The HEOM can't really take new QObjEvo arguments each time `run` is called because calculating the RHS again is quite expensive. Maybe something can be done? (implemented -- passing new args to .run is now supported); - [X] In the base solver the new options seem to be set after retrieving the integrator -- is this right? (fixed); - [X] Compare performance to the HEOM in 4.7. (looks faster, yay!); - [X] We could also implement `.start()` and `.step()` for the HEOMSolver. Not quite sure of the use case yet though. (implemented and tested -- the implementation came for free after sorting out having .run inherit from the base solver).; - [x] Add some direct tests for the QobjEvo type errors that have been fixed.; - [x] Moved solver into `qutip.solver.heom`. . **Related issues or PRs**; - One of the todos from #1850; - In #1907 the Result class was changed largely to support extension by the HEOMSolver. **Changelog**; Update HEOM for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1869
https://github.com/qutip/qutip/pull/1869:233,Testability,test,tests,233,"**Description**; Update HEOM for v5. Other changes:; - This resulted in a bit of a refactor of the Result class (#1907); - I found a few places where QobjEvo did not correctly set `.type` and fixed those (they were breaking the HEOM tests). Todos and questions:; - [X] Should HierarchyADOsState store ado_state as a Data object rather than a numpy array? (it can't be stored as a Data object because the ADOs have shape `n_ado, n, n` and the Data layer only supports 2-d arrays).; - [X] How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). (implemented); - [X] What should be done with the steady_state method? I guess it can just stay. Should other solvers also have this? (it should just stay, I think); - [x] Recheck the time-dependent case. (I also simplified the time-dependent case so that the Liouvillian is never added and so doesn't have to be subtracted off).; - [X] The HEOM can't really take new QObjEvo arguments each time `run` is called because calculating the RHS again is quite expensive. Maybe something can be done? (implemented -- passing new args to .run is now supported); - [X] In the base solver the new options seem to be set after retrieving the integrator -- is this right? (fixed); - [X] Compare performance to the HEOM in 4.7. (looks faster, yay!); - [X] We could also implement `.start()` and `.step()` for the HEOMSolver. Not quite sure of the use case yet though. (implemented and tested -- the implementation came for free after sorting out having .run inherit from the base solver).; - [x] Add some direct tests for the QobjEvo type errors that have been fixed.; - [x] Moved solver into `qutip.solver.heom`. . **Related issues or PRs**; - One of the todos from #1850; - In #1907 the Result class was changed largely to support extension by the HEOMSolver. **Changelog**; Update HEOM for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1869
https://github.com/qutip/qutip/pull/1869:1555,Testability,test,tested,1555,"**Description**; Update HEOM for v5. Other changes:; - This resulted in a bit of a refactor of the Result class (#1907); - I found a few places where QobjEvo did not correctly set `.type` and fixed those (they were breaking the HEOM tests). Todos and questions:; - [X] Should HierarchyADOsState store ado_state as a Data object rather than a numpy array? (it can't be stored as a Data object because the ADOs have shape `n_ado, n, n` and the Data layer only supports 2-d arrays).; - [X] How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). (implemented); - [X] What should be done with the steady_state method? I guess it can just stay. Should other solvers also have this? (it should just stay, I think); - [x] Recheck the time-dependent case. (I also simplified the time-dependent case so that the Liouvillian is never added and so doesn't have to be subtracted off).; - [X] The HEOM can't really take new QObjEvo arguments each time `run` is called because calculating the RHS again is quite expensive. Maybe something can be done? (implemented -- passing new args to .run is now supported); - [X] In the base solver the new options seem to be set after retrieving the integrator -- is this right? (fixed); - [X] Compare performance to the HEOM in 4.7. (looks faster, yay!); - [X] We could also implement `.start()` and `.step()` for the HEOMSolver. Not quite sure of the use case yet though. (implemented and tested -- the implementation came for free after sorting out having .run inherit from the base solver).; - [x] Add some direct tests for the QobjEvo type errors that have been fixed.; - [x] Moved solver into `qutip.solver.heom`. . **Related issues or PRs**; - One of the todos from #1850; - In #1907 the Result class was changed largely to support extension by the HEOMSolver. **Changelog**; Update HEOM for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1869
https://github.com/qutip/qutip/pull/1869:1682,Testability,test,tests,1682,"**Description**; Update HEOM for v5. Other changes:; - This resulted in a bit of a refactor of the Result class (#1907); - I found a few places where QobjEvo did not correctly set `.type` and fixed those (they were breaking the HEOM tests). Todos and questions:; - [X] Should HierarchyADOsState store ado_state as a Data object rather than a numpy array? (it can't be stored as a Data object because the ADOs have shape `n_ado, n, n` and the Data layer only supports 2-d arrays).; - [X] How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). (implemented); - [X] What should be done with the steady_state method? I guess it can just stay. Should other solvers also have this? (it should just stay, I think); - [x] Recheck the time-dependent case. (I also simplified the time-dependent case so that the Liouvillian is never added and so doesn't have to be subtracted off).; - [X] The HEOM can't really take new QObjEvo arguments each time `run` is called because calculating the RHS again is quite expensive. Maybe something can be done? (implemented -- passing new args to .run is now supported); - [X] In the base solver the new options seem to be set after retrieving the integrator -- is this right? (fixed); - [X] Compare performance to the HEOM in 4.7. (looks faster, yay!); - [X] We could also implement `.start()` and `.step()` for the HEOMSolver. Not quite sure of the use case yet though. (implemented and tested -- the implementation came for free after sorting out having .run inherit from the base solver).; - [x] Add some direct tests for the QobjEvo type errors that have been fixed.; - [x] Moved solver into `qutip.solver.heom`. . **Related issues or PRs**; - One of the todos from #1850; - In #1907 the Result class was changed largely to support extension by the HEOMSolver. **Changelog**; Update HEOM for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1869
https://github.com/qutip/qutip/pull/1869:895,Usability,simpl,simplified,895,"**Description**; Update HEOM for v5. Other changes:; - This resulted in a bit of a refactor of the Result class (#1907); - I found a few places where QobjEvo did not correctly set `.type` and fixed those (they were breaking the HEOM tests). Todos and questions:; - [X] Should HierarchyADOsState store ado_state as a Data object rather than a numpy array? (it can't be stored as a Data object because the ADOs have shape `n_ado, n, n` and the Data layer only supports 2-d arrays).; - [X] How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). (implemented); - [X] What should be done with the steady_state method? I guess it can just stay. Should other solvers also have this? (it should just stay, I think); - [x] Recheck the time-dependent case. (I also simplified the time-dependent case so that the Liouvillian is never added and so doesn't have to be subtracted off).; - [X] The HEOM can't really take new QObjEvo arguments each time `run` is called because calculating the RHS again is quite expensive. Maybe something can be done? (implemented -- passing new args to .run is now supported); - [X] In the base solver the new options seem to be set after retrieving the integrator -- is this right? (fixed); - [X] Compare performance to the HEOM in 4.7. (looks faster, yay!); - [X] We could also implement `.start()` and `.step()` for the HEOMSolver. Not quite sure of the use case yet though. (implemented and tested -- the implementation came for free after sorting out having .run inherit from the base solver).; - [x] Add some direct tests for the QobjEvo type errors that have been fixed.; - [x] Moved solver into `qutip.solver.heom`. . **Related issues or PRs**; - One of the todos from #1850; - In #1907 the Result class was changed largely to support extension by the HEOMSolver. **Changelog**; Update HEOM for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1869
https://github.com/qutip/qutip/pull/1870:506,Deployability,install,installation,506,"**Description**; For solving issue qutip/qutip-qip#51, I have added an `about` functionality for `qutip_qip`. Will also make the necessary PR in the qutip-qip repository for completing this issue. **Related issues or PRs**; fixes qutip/qutip-qip#51. **Changelog**; Added a parameter to `qutip`'s about function which defaults to ""qutip"". `qutip`'s about can be called from `qutip_qip` with the argument of ""qutip_qip"" which will display information about `qutip_qip`.; Displaying `qutip_qip`'s version and installation path.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1870
https://github.com/qutip/qutip/pull/1874:508,Availability,error,error,508,"**Description**; Adds a --with-idxint-64 compilation option for building with 64-bit integer indices in the data layer. (Alternative to #1727); Instead of using a compile time environment variable, it contains files for both 32 and 64 int and choose at setup which to use. This way has the advantage that cython can keep track of the version used and recompile all file depending on it when changed.; With compile time environment variable, you can have file compiled with different type of int and only get error when trying to use them. Also 'cimporting' data is simpler since you don't need to define the variable. However, changing all the import location made diff a lot bigger than #1727. `qutip.settings.install['intsize']` will return 32 or 64 depending on the size of int used. **Changelog**; Added a compilation option for compiling with 64-bit integer.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1874
https://github.com/qutip/qutip/pull/1874:711,Deployability,install,install,711,"**Description**; Adds a --with-idxint-64 compilation option for building with 64-bit integer indices in the data layer. (Alternative to #1727); Instead of using a compile time environment variable, it contains files for both 32 and 64 int and choose at setup which to use. This way has the advantage that cython can keep track of the version used and recompile all file depending on it when changed.; With compile time environment variable, you can have file compiled with different type of int and only get error when trying to use them. Also 'cimporting' data is simpler since you don't need to define the variable. However, changing all the import location made diff a lot bigger than #1727. `qutip.settings.install['intsize']` will return 32 or 64 depending on the size of int used. **Changelog**; Added a compilation option for compiling with 64-bit integer.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1874
https://github.com/qutip/qutip/pull/1874:370,Integrability,depend,depending,370,"**Description**; Adds a --with-idxint-64 compilation option for building with 64-bit integer indices in the data layer. (Alternative to #1727); Instead of using a compile time environment variable, it contains files for both 32 and 64 int and choose at setup which to use. This way has the advantage that cython can keep track of the version used and recompile all file depending on it when changed.; With compile time environment variable, you can have file compiled with different type of int and only get error when trying to use them. Also 'cimporting' data is simpler since you don't need to define the variable. However, changing all the import location made diff a lot bigger than #1727. `qutip.settings.install['intsize']` will return 32 or 64 depending on the size of int used. **Changelog**; Added a compilation option for compiling with 64-bit integer.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1874
https://github.com/qutip/qutip/pull/1874:752,Integrability,depend,depending,752,"**Description**; Adds a --with-idxint-64 compilation option for building with 64-bit integer indices in the data layer. (Alternative to #1727); Instead of using a compile time environment variable, it contains files for both 32 and 64 int and choose at setup which to use. This way has the advantage that cython can keep track of the version used and recompile all file depending on it when changed.; With compile time environment variable, you can have file compiled with different type of int and only get error when trying to use them. Also 'cimporting' data is simpler since you don't need to define the variable. However, changing all the import location made diff a lot bigger than #1727. `qutip.settings.install['intsize']` will return 32 or 64 depending on the size of int used. **Changelog**; Added a compilation option for compiling with 64-bit integer.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1874
https://github.com/qutip/qutip/pull/1874:188,Modifiability,variab,variable,188,"**Description**; Adds a --with-idxint-64 compilation option for building with 64-bit integer indices in the data layer. (Alternative to #1727); Instead of using a compile time environment variable, it contains files for both 32 and 64 int and choose at setup which to use. This way has the advantage that cython can keep track of the version used and recompile all file depending on it when changed.; With compile time environment variable, you can have file compiled with different type of int and only get error when trying to use them. Also 'cimporting' data is simpler since you don't need to define the variable. However, changing all the import location made diff a lot bigger than #1727. `qutip.settings.install['intsize']` will return 32 or 64 depending on the size of int used. **Changelog**; Added a compilation option for compiling with 64-bit integer.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1874
https://github.com/qutip/qutip/pull/1874:431,Modifiability,variab,variable,431,"**Description**; Adds a --with-idxint-64 compilation option for building with 64-bit integer indices in the data layer. (Alternative to #1727); Instead of using a compile time environment variable, it contains files for both 32 and 64 int and choose at setup which to use. This way has the advantage that cython can keep track of the version used and recompile all file depending on it when changed.; With compile time environment variable, you can have file compiled with different type of int and only get error when trying to use them. Also 'cimporting' data is simpler since you don't need to define the variable. However, changing all the import location made diff a lot bigger than #1727. `qutip.settings.install['intsize']` will return 32 or 64 depending on the size of int used. **Changelog**; Added a compilation option for compiling with 64-bit integer.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1874
https://github.com/qutip/qutip/pull/1874:608,Modifiability,variab,variable,608,"**Description**; Adds a --with-idxint-64 compilation option for building with 64-bit integer indices in the data layer. (Alternative to #1727); Instead of using a compile time environment variable, it contains files for both 32 and 64 int and choose at setup which to use. This way has the advantage that cython can keep track of the version used and recompile all file depending on it when changed.; With compile time environment variable, you can have file compiled with different type of int and only get error when trying to use them. Also 'cimporting' data is simpler since you don't need to define the variable. However, changing all the import location made diff a lot bigger than #1727. `qutip.settings.install['intsize']` will return 32 or 64 depending on the size of int used. **Changelog**; Added a compilation option for compiling with 64-bit integer.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1874
https://github.com/qutip/qutip/pull/1874:565,Usability,simpl,simpler,565,"**Description**; Adds a --with-idxint-64 compilation option for building with 64-bit integer indices in the data layer. (Alternative to #1727); Instead of using a compile time environment variable, it contains files for both 32 and 64 int and choose at setup which to use. This way has the advantage that cython can keep track of the version used and recompile all file depending on it when changed.; With compile time environment variable, you can have file compiled with different type of int and only get error when trying to use them. Also 'cimporting' data is simpler since you don't need to define the variable. However, changing all the import location made diff a lot bigger than #1727. `qutip.settings.install['intsize']` will return 32 or 64 depending on the size of int used. **Changelog**; Added a compilation option for compiling with 64-bit integer.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1874
https://github.com/qutip/qutip/issues/1875:566,Availability,avail,available,566,"### Bug Description. setup.py manages a `--with-openmp` build option to provide openmp support. pyproject.toml was introduced in QuTiP 4.6.0 to allow PEP517 build without (directly) using setup.py. But the `--with-openmp` option that previously worked with a setup.py build does not seem to be compatible with a PEP517 build. The problem shows up in the Debian build of the qutip package. Debian provides its own tool (pybuild from the dh-python package) to manage the build of python packages. PEP517 is relatively new, so by default pybuild uses setup.py if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1875
https://github.com/qutip/qutip/issues/1875:685,Availability,avail,available,685,"### Bug Description. setup.py manages a `--with-openmp` build option to provide openmp support. pyproject.toml was introduced in QuTiP 4.6.0 to allow PEP517 build without (directly) using setup.py. But the `--with-openmp` option that previously worked with a setup.py build does not seem to be compatible with a PEP517 build. The problem shows up in the Debian build of the qutip package. Debian provides its own tool (pybuild from the dh-python package) to manage the build of python packages. PEP517 is relatively new, so by default pybuild uses setup.py if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1875
https://github.com/qutip/qutip/issues/1875:1575,Availability,error,error,1575,"s relatively new, so by default pybuild uses setup.py if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build, not PEP517 build); INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ```. ### Additional Context. PEP517 support is new for Debian. It is possible the pybuild build tool needs to be adapted to handle setup.py options like `--with-openmp` in the context of PEP517. But I've tried to pose the issue here in terms of the underlying python3 build commands without needing to consider pybuild as such. Is there a different way in which `--with-ope",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1875
https://github.com/qutip/qutip/issues/1875:653,Deployability,install,installed,653,"### Bug Description. setup.py manages a `--with-openmp` build option to provide openmp support. pyproject.toml was introduced in QuTiP 4.6.0 to allow PEP517 build without (directly) using setup.py. But the `--with-openmp` option that previously worked with a setup.py build does not seem to be compatible with a PEP517 build. The problem shows up in the Debian build of the qutip package. Debian provides its own tool (pybuild from the dh-python package) to manage the build of python packages. PEP517 is relatively new, so by default pybuild uses setup.py if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1875
https://github.com/qutip/qutip/issues/1875:729,Deployability,install,installed,729,"### Bug Description. setup.py manages a `--with-openmp` build option to provide openmp support. pyproject.toml was introduced in QuTiP 4.6.0 to allow PEP517 build without (directly) using setup.py. But the `--with-openmp` option that previously worked with a setup.py build does not seem to be compatible with a PEP517 build. The problem shows up in the Debian build of the qutip package. Debian provides its own tool (pybuild from the dh-python package) to manage the build of python packages. PEP517 is relatively new, so by default pybuild uses setup.py if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1875
https://github.com/qutip/qutip/issues/1875:1063,Deployability,install,installed,1063," support. pyproject.toml was introduced in QuTiP 4.6.0 to allow PEP517 build without (directly) using setup.py. But the `--with-openmp` option that previously worked with a setup.py build does not seem to be compatible with a PEP517 build. The problem shows up in the Debian build of the qutip package. Debian provides its own tool (pybuild from the dh-python package) to manage the build of python packages. PEP517 is relatively new, so by default pybuild uses setup.py if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build, not PEP517 build); INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1875
https://github.com/qutip/qutip/issues/1875:1964,Deployability,Install,Installed,1964," if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build, not PEP517 build); INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ```. ### Additional Context. PEP517 support is new for Debian. It is possible the pybuild build tool needs to be adapted to handle setup.py options like `--with-openmp` in the context of PEP517. But I've tried to pose the issue here in terms of the underlying python3 build commands without needing to consider pybuild as such. Is there a different way in which `--with-openmp` should be configured when using a PEP517 build?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1875
https://github.com/qutip/qutip/issues/1875:2074,Deployability,Install,Installation,2074," if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build, not PEP517 build); INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ```. ### Additional Context. PEP517 support is new for Debian. It is possible the pybuild build tool needs to be adapted to handle setup.py options like `--with-openmp` in the context of PEP517. But I've tried to pose the issue here in terms of the underlying python3 build commands without needing to consider pybuild as such. Is there a different way in which `--with-openmp` should be configured when using a PEP517 build?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1875
https://github.com/qutip/qutip/issues/1875:2244,Energy Efficiency,adapt,adapted,2244," if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build, not PEP517 build); INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ```. ### Additional Context. PEP517 support is new for Debian. It is possible the pybuild build tool needs to be adapted to handle setup.py options like `--with-openmp` in the context of PEP517. But I've tried to pose the issue here in terms of the underlying python3 build commands without needing to consider pybuild as such. Is there a different way in which `--with-openmp` should be configured when using a PEP517 build?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1875
https://github.com/qutip/qutip/issues/1875:1255,Integrability,depend,dependency-check,1255,"s not seem to be compatible with a PEP517 build. The problem shows up in the Debian build of the qutip package. Debian provides its own tool (pybuild from the dh-python package) to manage the build of python packages. PEP517 is relatively new, so by default pybuild uses setup.py if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build, not PEP517 build); INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ```. ### Additional Context. PEP517 support is new for Debian. It is possible the pybuild build tool needs to be adapted to handle setup.py option",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1875
https://github.com/qutip/qutip/issues/1875:1479,Integrability,depend,dependency-check,1479,"s relatively new, so by default pybuild uses setup.py if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build, not PEP517 build); INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ```. ### Additional Context. PEP517 support is new for Debian. It is possible the pybuild build tool needs to be adapted to handle setup.py options like `--with-openmp` in the context of PEP517. But I've tried to pose the issue here in terms of the underlying python3 build commands without needing to consider pybuild as such. Is there a different way in which `--with-ope",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1875
https://github.com/qutip/qutip/issues/1875:625,Modifiability,plugin,plugin-pyproject,625,"### Bug Description. setup.py manages a `--with-openmp` build option to provide openmp support. pyproject.toml was introduced in QuTiP 4.6.0 to allow PEP517 build without (directly) using setup.py. But the `--with-openmp` option that previously worked with a setup.py build does not seem to be compatible with a PEP517 build. The problem shows up in the Debian build of the qutip package. Debian provides its own tool (pybuild from the dh-python package) to manage the build of python packages. PEP517 is relatively new, so by default pybuild uses setup.py if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1875
https://github.com/qutip/qutip/issues/1875:712,Modifiability,plugin,plugin-pyproject,712,"### Bug Description. setup.py manages a `--with-openmp` build option to provide openmp support. pyproject.toml was introduced in QuTiP 4.6.0 to allow PEP517 build without (directly) using setup.py. But the `--with-openmp` option that previously worked with a setup.py build does not seem to be compatible with a PEP517 build. The problem shows up in the Debian build of the qutip package. Debian provides its own tool (pybuild from the dh-python package) to manage the build of python packages. PEP517 is relatively new, so by default pybuild uses setup.py if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1875
https://github.com/qutip/qutip/issues/1875:1046,Modifiability,plugin,plugin-pyproject,1046," support. pyproject.toml was introduced in QuTiP 4.6.0 to allow PEP517 build without (directly) using setup.py. But the `--with-openmp` option that previously worked with a setup.py build does not seem to be compatible with a PEP517 build. The problem shows up in the Debian build of the qutip package. Debian provides its own tool (pybuild from the dh-python package) to manage the build of python packages. PEP517 is relatively new, so by default pybuild uses setup.py if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build, not PEP517 build); INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1875
https://github.com/qutip/qutip/issues/1875:1517,Modifiability,config,config-setting,1517,"s relatively new, so by default pybuild uses setup.py if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build, not PEP517 build); INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ```. ### Additional Context. PEP517 support is new for Debian. It is possible the pybuild build tool needs to be adapted to handle setup.py options like `--with-openmp` in the context of PEP517. But I've tried to pose the issue here in terms of the underlying python3 build commands without needing to consider pybuild as such. Is there a different way in which `--with-ope",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1875
https://github.com/qutip/qutip/issues/1875:1688,Modifiability,config,configured,1688," if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build, not PEP517 build); INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ```. ### Additional Context. PEP517 support is new for Debian. It is possible the pybuild build tool needs to be adapted to handle setup.py options like `--with-openmp` in the context of PEP517. But I've tried to pose the issue here in terms of the underlying python3 build commands without needing to consider pybuild as such. Is there a different way in which `--with-openmp` should be configured when using a PEP517 build?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1875
https://github.com/qutip/qutip/issues/1875:2244,Modifiability,adapt,adapted,2244," if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build, not PEP517 build); INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ```. ### Additional Context. PEP517 support is new for Debian. It is possible the pybuild build tool needs to be adapted to handle setup.py options like `--with-openmp` in the context of PEP517. But I've tried to pose the issue here in terms of the underlying python3 build commands without needing to consider pybuild as such. Is there a different way in which `--with-openmp` should be configured when using a PEP517 build?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1875
https://github.com/qutip/qutip/issues/1875:2519,Modifiability,config,configured,2519," if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build, not PEP517 build); INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ```. ### Additional Context. PEP517 support is new for Debian. It is possible the pybuild build tool needs to be adapted to handle setup.py options like `--with-openmp` in the context of PEP517. But I've tried to pose the issue here in terms of the underlying python3 build commands without needing to consider pybuild as such. Is there a different way in which `--with-openmp` should be configured when using a PEP517 build?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1875
https://github.com/qutip/qutip/issues/1875:897,Testability,log,log,897,"### Bug Description. setup.py manages a `--with-openmp` build option to provide openmp support. pyproject.toml was introduced in QuTiP 4.6.0 to allow PEP517 build without (directly) using setup.py. But the `--with-openmp` option that previously worked with a setup.py build does not seem to be compatible with a PEP517 build. The problem shows up in the Debian build of the qutip package. Debian provides its own tool (pybuild from the dh-python package) to manage the build of python packages. PEP517 is relatively new, so by default pybuild uses setup.py if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1875
https://github.com/qutip/qutip/issues/1876:33,Deployability,configurat,configuration,33,"### Bug Description. qutip keeps configuration (e.g. for openmp) in a config file handled in configrc.py. The default location is in the home dir, with; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L36; setting the dir to `~/.qutip` and; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L38; setting the config file to `~/.qutip/qutiprc`. This forces Linux distributions to do more work when building in a chroot. For instance Debian build chroots set the ""home"" directory to `/nonexistent`, and then building docs fails with; ```; PermissionError: [Errno 13] Permission denied: '/nonexistent'; ```; since it can't create `/nonexistent/.qutip`. In practice that's not a great problem since when building docs for the package, we can set `HOME=$BUILDDIR` to place the config location in the build dir (which is writable) instead of `/nonexistent`. However there is a standardized location for config files which might be worth considering instead. The freedesktop.org specification at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html identifies locations for config and data files. Config files can be located under (one of) `$XDG_CONFIG_DIRS` for system configuration, or under `$XDG_CONFIG_HOME` for user configuration. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. In python XDG is accessible from the xdg package (in debian, the python3-xdg package). So the XDG equivalent of ; ```; qutip_conf_dir = os.path.join(os.path.expanduser(""~""), '.qutip'); ```; could be done with; ```; from xdg import XDG_CONFIG_HOME; ...; qutip_conf_dir = os.path.join(XDG_CONFIG_HOME, '.qutip'); ```; A more sophisticated method could be set up to also check XDG_CONFIG_DIRS instead (XDG_CONFIG_HOME is the first entry in the list defined in XDG_CONFIG_DIRS). ### Your Environment. ```shell; QuTiP Version: 4.7.0; ```. ### Additional Conte",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1876
https://github.com/qutip/qutip/issues/1876:1278,Deployability,configurat,configuration,1278,"n. qutip keeps configuration (e.g. for openmp) in a config file handled in configrc.py. The default location is in the home dir, with; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L36; setting the dir to `~/.qutip` and; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L38; setting the config file to `~/.qutip/qutiprc`. This forces Linux distributions to do more work when building in a chroot. For instance Debian build chroots set the ""home"" directory to `/nonexistent`, and then building docs fails with; ```; PermissionError: [Errno 13] Permission denied: '/nonexistent'; ```; since it can't create `/nonexistent/.qutip`. In practice that's not a great problem since when building docs for the package, we can set `HOME=$BUILDDIR` to place the config location in the build dir (which is writable) instead of `/nonexistent`. However there is a standardized location for config files which might be worth considering instead. The freedesktop.org specification at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html identifies locations for config and data files. Config files can be located under (one of) `$XDG_CONFIG_DIRS` for system configuration, or under `$XDG_CONFIG_HOME` for user configuration. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. In python XDG is accessible from the xdg package (in debian, the python3-xdg package). So the XDG equivalent of ; ```; qutip_conf_dir = os.path.join(os.path.expanduser(""~""), '.qutip'); ```; could be done with; ```; from xdg import XDG_CONFIG_HOME; ...; qutip_conf_dir = os.path.join(XDG_CONFIG_HOME, '.qutip'); ```; A more sophisticated method could be set up to also check XDG_CONFIG_DIRS instead (XDG_CONFIG_HOME is the first entry in the list defined in XDG_CONFIG_DIRS). ### Your Environment. ```shell; QuTiP Version: 4.7.0; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1876
https://github.com/qutip/qutip/issues/1876:1330,Deployability,configurat,configuration,1330,"n. qutip keeps configuration (e.g. for openmp) in a config file handled in configrc.py. The default location is in the home dir, with; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L36; setting the dir to `~/.qutip` and; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L38; setting the config file to `~/.qutip/qutiprc`. This forces Linux distributions to do more work when building in a chroot. For instance Debian build chroots set the ""home"" directory to `/nonexistent`, and then building docs fails with; ```; PermissionError: [Errno 13] Permission denied: '/nonexistent'; ```; since it can't create `/nonexistent/.qutip`. In practice that's not a great problem since when building docs for the package, we can set `HOME=$BUILDDIR` to place the config location in the build dir (which is writable) instead of `/nonexistent`. However there is a standardized location for config files which might be worth considering instead. The freedesktop.org specification at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html identifies locations for config and data files. Config files can be located under (one of) `$XDG_CONFIG_DIRS` for system configuration, or under `$XDG_CONFIG_HOME` for user configuration. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. In python XDG is accessible from the xdg package (in debian, the python3-xdg package). So the XDG equivalent of ; ```; qutip_conf_dir = os.path.join(os.path.expanduser(""~""), '.qutip'); ```; could be done with; ```; from xdg import XDG_CONFIG_HOME; ...; qutip_conf_dir = os.path.join(XDG_CONFIG_HOME, '.qutip'); ```; A more sophisticated method could be set up to also check XDG_CONFIG_DIRS instead (XDG_CONFIG_HOME is the first entry in the list defined in XDG_CONFIG_DIRS). ### Your Environment. ```shell; QuTiP Version: 4.7.0; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1876
https://github.com/qutip/qutip/issues/1876:33,Modifiability,config,configuration,33,"### Bug Description. qutip keeps configuration (e.g. for openmp) in a config file handled in configrc.py. The default location is in the home dir, with; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L36; setting the dir to `~/.qutip` and; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L38; setting the config file to `~/.qutip/qutiprc`. This forces Linux distributions to do more work when building in a chroot. For instance Debian build chroots set the ""home"" directory to `/nonexistent`, and then building docs fails with; ```; PermissionError: [Errno 13] Permission denied: '/nonexistent'; ```; since it can't create `/nonexistent/.qutip`. In practice that's not a great problem since when building docs for the package, we can set `HOME=$BUILDDIR` to place the config location in the build dir (which is writable) instead of `/nonexistent`. However there is a standardized location for config files which might be worth considering instead. The freedesktop.org specification at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html identifies locations for config and data files. Config files can be located under (one of) `$XDG_CONFIG_DIRS` for system configuration, or under `$XDG_CONFIG_HOME` for user configuration. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. In python XDG is accessible from the xdg package (in debian, the python3-xdg package). So the XDG equivalent of ; ```; qutip_conf_dir = os.path.join(os.path.expanduser(""~""), '.qutip'); ```; could be done with; ```; from xdg import XDG_CONFIG_HOME; ...; qutip_conf_dir = os.path.join(XDG_CONFIG_HOME, '.qutip'); ```; A more sophisticated method could be set up to also check XDG_CONFIG_DIRS instead (XDG_CONFIG_HOME is the first entry in the list defined in XDG_CONFIG_DIRS). ### Your Environment. ```shell; QuTiP Version: 4.7.0; ```. ### Additional Conte",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1876
https://github.com/qutip/qutip/issues/1876:70,Modifiability,config,config,70,"### Bug Description. qutip keeps configuration (e.g. for openmp) in a config file handled in configrc.py. The default location is in the home dir, with; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L36; setting the dir to `~/.qutip` and; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L38; setting the config file to `~/.qutip/qutiprc`. This forces Linux distributions to do more work when building in a chroot. For instance Debian build chroots set the ""home"" directory to `/nonexistent`, and then building docs fails with; ```; PermissionError: [Errno 13] Permission denied: '/nonexistent'; ```; since it can't create `/nonexistent/.qutip`. In practice that's not a great problem since when building docs for the package, we can set `HOME=$BUILDDIR` to place the config location in the build dir (which is writable) instead of `/nonexistent`. However there is a standardized location for config files which might be worth considering instead. The freedesktop.org specification at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html identifies locations for config and data files. Config files can be located under (one of) `$XDG_CONFIG_DIRS` for system configuration, or under `$XDG_CONFIG_HOME` for user configuration. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. In python XDG is accessible from the xdg package (in debian, the python3-xdg package). So the XDG equivalent of ; ```; qutip_conf_dir = os.path.join(os.path.expanduser(""~""), '.qutip'); ```; could be done with; ```; from xdg import XDG_CONFIG_HOME; ...; qutip_conf_dir = os.path.join(XDG_CONFIG_HOME, '.qutip'); ```; A more sophisticated method could be set up to also check XDG_CONFIG_DIRS instead (XDG_CONFIG_HOME is the first entry in the list defined in XDG_CONFIG_DIRS). ### Your Environment. ```shell; QuTiP Version: 4.7.0; ```. ### Additional Conte",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1876
https://github.com/qutip/qutip/issues/1876:93,Modifiability,config,configrc,93,"### Bug Description. qutip keeps configuration (e.g. for openmp) in a config file handled in configrc.py. The default location is in the home dir, with; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L36; setting the dir to `~/.qutip` and; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L38; setting the config file to `~/.qutip/qutiprc`. This forces Linux distributions to do more work when building in a chroot. For instance Debian build chroots set the ""home"" directory to `/nonexistent`, and then building docs fails with; ```; PermissionError: [Errno 13] Permission denied: '/nonexistent'; ```; since it can't create `/nonexistent/.qutip`. In practice that's not a great problem since when building docs for the package, we can set `HOME=$BUILDDIR` to place the config location in the build dir (which is writable) instead of `/nonexistent`. However there is a standardized location for config files which might be worth considering instead. The freedesktop.org specification at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html identifies locations for config and data files. Config files can be located under (one of) `$XDG_CONFIG_DIRS` for system configuration, or under `$XDG_CONFIG_HOME` for user configuration. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. In python XDG is accessible from the xdg package (in debian, the python3-xdg package). So the XDG equivalent of ; ```; qutip_conf_dir = os.path.join(os.path.expanduser(""~""), '.qutip'); ```; could be done with; ```; from xdg import XDG_CONFIG_HOME; ...; qutip_conf_dir = os.path.join(XDG_CONFIG_HOME, '.qutip'); ```; A more sophisticated method could be set up to also check XDG_CONFIG_DIRS instead (XDG_CONFIG_HOME is the first entry in the list defined in XDG_CONFIG_DIRS). ### Your Environment. ```shell; QuTiP Version: 4.7.0; ```. ### Additional Conte",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1876
https://github.com/qutip/qutip/issues/1876:236,Modifiability,config,configrc,236,"### Bug Description. qutip keeps configuration (e.g. for openmp) in a config file handled in configrc.py. The default location is in the home dir, with; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L36; setting the dir to `~/.qutip` and; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L38; setting the config file to `~/.qutip/qutiprc`. This forces Linux distributions to do more work when building in a chroot. For instance Debian build chroots set the ""home"" directory to `/nonexistent`, and then building docs fails with; ```; PermissionError: [Errno 13] Permission denied: '/nonexistent'; ```; since it can't create `/nonexistent/.qutip`. In practice that's not a great problem since when building docs for the package, we can set `HOME=$BUILDDIR` to place the config location in the build dir (which is writable) instead of `/nonexistent`. However there is a standardized location for config files which might be worth considering instead. The freedesktop.org specification at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html identifies locations for config and data files. Config files can be located under (one of) `$XDG_CONFIG_DIRS` for system configuration, or under `$XDG_CONFIG_HOME` for user configuration. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. In python XDG is accessible from the xdg package (in debian, the python3-xdg package). So the XDG equivalent of ; ```; qutip_conf_dir = os.path.join(os.path.expanduser(""~""), '.qutip'); ```; could be done with; ```; from xdg import XDG_CONFIG_HOME; ...; qutip_conf_dir = os.path.join(XDG_CONFIG_HOME, '.qutip'); ```; A more sophisticated method could be set up to also check XDG_CONFIG_DIRS instead (XDG_CONFIG_HOME is the first entry in the list defined in XDG_CONFIG_DIRS). ### Your Environment. ```shell; QuTiP Version: 4.7.0; ```. ### Additional Conte",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1876
https://github.com/qutip/qutip/issues/1876:371,Modifiability,config,configrc,371,"### Bug Description. qutip keeps configuration (e.g. for openmp) in a config file handled in configrc.py. The default location is in the home dir, with; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L36; setting the dir to `~/.qutip` and; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L38; setting the config file to `~/.qutip/qutiprc`. This forces Linux distributions to do more work when building in a chroot. For instance Debian build chroots set the ""home"" directory to `/nonexistent`, and then building docs fails with; ```; PermissionError: [Errno 13] Permission denied: '/nonexistent'; ```; since it can't create `/nonexistent/.qutip`. In practice that's not a great problem since when building docs for the package, we can set `HOME=$BUILDDIR` to place the config location in the build dir (which is writable) instead of `/nonexistent`. However there is a standardized location for config files which might be worth considering instead. The freedesktop.org specification at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html identifies locations for config and data files. Config files can be located under (one of) `$XDG_CONFIG_DIRS` for system configuration, or under `$XDG_CONFIG_HOME` for user configuration. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. In python XDG is accessible from the xdg package (in debian, the python3-xdg package). So the XDG equivalent of ; ```; qutip_conf_dir = os.path.join(os.path.expanduser(""~""), '.qutip'); ```; could be done with; ```; from xdg import XDG_CONFIG_HOME; ...; qutip_conf_dir = os.path.join(XDG_CONFIG_HOME, '.qutip'); ```; A more sophisticated method could be set up to also check XDG_CONFIG_DIRS instead (XDG_CONFIG_HOME is the first entry in the list defined in XDG_CONFIG_DIRS). ### Your Environment. ```shell; QuTiP Version: 4.7.0; ```. ### Additional Conte",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1876
https://github.com/qutip/qutip/issues/1876:400,Modifiability,config,config,400,"### Bug Description. qutip keeps configuration (e.g. for openmp) in a config file handled in configrc.py. The default location is in the home dir, with; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L36; setting the dir to `~/.qutip` and; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L38; setting the config file to `~/.qutip/qutiprc`. This forces Linux distributions to do more work when building in a chroot. For instance Debian build chroots set the ""home"" directory to `/nonexistent`, and then building docs fails with; ```; PermissionError: [Errno 13] Permission denied: '/nonexistent'; ```; since it can't create `/nonexistent/.qutip`. In practice that's not a great problem since when building docs for the package, we can set `HOME=$BUILDDIR` to place the config location in the build dir (which is writable) instead of `/nonexistent`. However there is a standardized location for config files which might be worth considering instead. The freedesktop.org specification at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html identifies locations for config and data files. Config files can be located under (one of) `$XDG_CONFIG_DIRS` for system configuration, or under `$XDG_CONFIG_HOME` for user configuration. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. In python XDG is accessible from the xdg package (in debian, the python3-xdg package). So the XDG equivalent of ; ```; qutip_conf_dir = os.path.join(os.path.expanduser(""~""), '.qutip'); ```; could be done with; ```; from xdg import XDG_CONFIG_HOME; ...; qutip_conf_dir = os.path.join(XDG_CONFIG_HOME, '.qutip'); ```; A more sophisticated method could be set up to also check XDG_CONFIG_DIRS instead (XDG_CONFIG_HOME is the first entry in the list defined in XDG_CONFIG_DIRS). ### Your Environment. ```shell; QuTiP Version: 4.7.0; ```. ### Additional Conte",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1876
https://github.com/qutip/qutip/issues/1876:863,Modifiability,config,config,863,"### Bug Description. qutip keeps configuration (e.g. for openmp) in a config file handled in configrc.py. The default location is in the home dir, with; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L36; setting the dir to `~/.qutip` and; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L38; setting the config file to `~/.qutip/qutiprc`. This forces Linux distributions to do more work when building in a chroot. For instance Debian build chroots set the ""home"" directory to `/nonexistent`, and then building docs fails with; ```; PermissionError: [Errno 13] Permission denied: '/nonexistent'; ```; since it can't create `/nonexistent/.qutip`. In practice that's not a great problem since when building docs for the package, we can set `HOME=$BUILDDIR` to place the config location in the build dir (which is writable) instead of `/nonexistent`. However there is a standardized location for config files which might be worth considering instead. The freedesktop.org specification at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html identifies locations for config and data files. Config files can be located under (one of) `$XDG_CONFIG_DIRS` for system configuration, or under `$XDG_CONFIG_HOME` for user configuration. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. In python XDG is accessible from the xdg package (in debian, the python3-xdg package). So the XDG equivalent of ; ```; qutip_conf_dir = os.path.join(os.path.expanduser(""~""), '.qutip'); ```; could be done with; ```; from xdg import XDG_CONFIG_HOME; ...; qutip_conf_dir = os.path.join(XDG_CONFIG_HOME, '.qutip'); ```; A more sophisticated method could be set up to also check XDG_CONFIG_DIRS instead (XDG_CONFIG_HOME is the first entry in the list defined in XDG_CONFIG_DIRS). ### Your Environment. ```shell; QuTiP Version: 4.7.0; ```. ### Additional Conte",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1876
https://github.com/qutip/qutip/issues/1876:988,Modifiability,config,config,988,"### Bug Description. qutip keeps configuration (e.g. for openmp) in a config file handled in configrc.py. The default location is in the home dir, with; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L36; setting the dir to `~/.qutip` and; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L38; setting the config file to `~/.qutip/qutiprc`. This forces Linux distributions to do more work when building in a chroot. For instance Debian build chroots set the ""home"" directory to `/nonexistent`, and then building docs fails with; ```; PermissionError: [Errno 13] Permission denied: '/nonexistent'; ```; since it can't create `/nonexistent/.qutip`. In practice that's not a great problem since when building docs for the package, we can set `HOME=$BUILDDIR` to place the config location in the build dir (which is writable) instead of `/nonexistent`. However there is a standardized location for config files which might be worth considering instead. The freedesktop.org specification at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html identifies locations for config and data files. Config files can be located under (one of) `$XDG_CONFIG_DIRS` for system configuration, or under `$XDG_CONFIG_HOME` for user configuration. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. In python XDG is accessible from the xdg package (in debian, the python3-xdg package). So the XDG equivalent of ; ```; qutip_conf_dir = os.path.join(os.path.expanduser(""~""), '.qutip'); ```; could be done with; ```; from xdg import XDG_CONFIG_HOME; ...; qutip_conf_dir = os.path.join(XDG_CONFIG_HOME, '.qutip'); ```; A more sophisticated method could be set up to also check XDG_CONFIG_DIRS instead (XDG_CONFIG_HOME is the first entry in the list defined in XDG_CONFIG_DIRS). ### Your Environment. ```shell; QuTiP Version: 4.7.0; ```. ### Additional Conte",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1876
https://github.com/qutip/qutip/issues/1876:1182,Modifiability,config,config,1182,"n. qutip keeps configuration (e.g. for openmp) in a config file handled in configrc.py. The default location is in the home dir, with; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L36; setting the dir to `~/.qutip` and; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L38; setting the config file to `~/.qutip/qutiprc`. This forces Linux distributions to do more work when building in a chroot. For instance Debian build chroots set the ""home"" directory to `/nonexistent`, and then building docs fails with; ```; PermissionError: [Errno 13] Permission denied: '/nonexistent'; ```; since it can't create `/nonexistent/.qutip`. In practice that's not a great problem since when building docs for the package, we can set `HOME=$BUILDDIR` to place the config location in the build dir (which is writable) instead of `/nonexistent`. However there is a standardized location for config files which might be worth considering instead. The freedesktop.org specification at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html identifies locations for config and data files. Config files can be located under (one of) `$XDG_CONFIG_DIRS` for system configuration, or under `$XDG_CONFIG_HOME` for user configuration. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. In python XDG is accessible from the xdg package (in debian, the python3-xdg package). So the XDG equivalent of ; ```; qutip_conf_dir = os.path.join(os.path.expanduser(""~""), '.qutip'); ```; could be done with; ```; from xdg import XDG_CONFIG_HOME; ...; qutip_conf_dir = os.path.join(XDG_CONFIG_HOME, '.qutip'); ```; A more sophisticated method could be set up to also check XDG_CONFIG_DIRS instead (XDG_CONFIG_HOME is the first entry in the list defined in XDG_CONFIG_DIRS). ### Your Environment. ```shell; QuTiP Version: 4.7.0; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1876
https://github.com/qutip/qutip/issues/1876:1205,Modifiability,Config,Config,1205,"n. qutip keeps configuration (e.g. for openmp) in a config file handled in configrc.py. The default location is in the home dir, with; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L36; setting the dir to `~/.qutip` and; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L38; setting the config file to `~/.qutip/qutiprc`. This forces Linux distributions to do more work when building in a chroot. For instance Debian build chroots set the ""home"" directory to `/nonexistent`, and then building docs fails with; ```; PermissionError: [Errno 13] Permission denied: '/nonexistent'; ```; since it can't create `/nonexistent/.qutip`. In practice that's not a great problem since when building docs for the package, we can set `HOME=$BUILDDIR` to place the config location in the build dir (which is writable) instead of `/nonexistent`. However there is a standardized location for config files which might be worth considering instead. The freedesktop.org specification at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html identifies locations for config and data files. Config files can be located under (one of) `$XDG_CONFIG_DIRS` for system configuration, or under `$XDG_CONFIG_HOME` for user configuration. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. In python XDG is accessible from the xdg package (in debian, the python3-xdg package). So the XDG equivalent of ; ```; qutip_conf_dir = os.path.join(os.path.expanduser(""~""), '.qutip'); ```; could be done with; ```; from xdg import XDG_CONFIG_HOME; ...; qutip_conf_dir = os.path.join(XDG_CONFIG_HOME, '.qutip'); ```; A more sophisticated method could be set up to also check XDG_CONFIG_DIRS instead (XDG_CONFIG_HOME is the first entry in the list defined in XDG_CONFIG_DIRS). ### Your Environment. ```shell; QuTiP Version: 4.7.0; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1876
https://github.com/qutip/qutip/issues/1876:1278,Modifiability,config,configuration,1278,"n. qutip keeps configuration (e.g. for openmp) in a config file handled in configrc.py. The default location is in the home dir, with; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L36; setting the dir to `~/.qutip` and; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L38; setting the config file to `~/.qutip/qutiprc`. This forces Linux distributions to do more work when building in a chroot. For instance Debian build chroots set the ""home"" directory to `/nonexistent`, and then building docs fails with; ```; PermissionError: [Errno 13] Permission denied: '/nonexistent'; ```; since it can't create `/nonexistent/.qutip`. In practice that's not a great problem since when building docs for the package, we can set `HOME=$BUILDDIR` to place the config location in the build dir (which is writable) instead of `/nonexistent`. However there is a standardized location for config files which might be worth considering instead. The freedesktop.org specification at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html identifies locations for config and data files. Config files can be located under (one of) `$XDG_CONFIG_DIRS` for system configuration, or under `$XDG_CONFIG_HOME` for user configuration. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. In python XDG is accessible from the xdg package (in debian, the python3-xdg package). So the XDG equivalent of ; ```; qutip_conf_dir = os.path.join(os.path.expanduser(""~""), '.qutip'); ```; could be done with; ```; from xdg import XDG_CONFIG_HOME; ...; qutip_conf_dir = os.path.join(XDG_CONFIG_HOME, '.qutip'); ```; A more sophisticated method could be set up to also check XDG_CONFIG_DIRS instead (XDG_CONFIG_HOME is the first entry in the list defined in XDG_CONFIG_DIRS). ### Your Environment. ```shell; QuTiP Version: 4.7.0; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1876
https://github.com/qutip/qutip/issues/1876:1330,Modifiability,config,configuration,1330,"n. qutip keeps configuration (e.g. for openmp) in a config file handled in configrc.py. The default location is in the home dir, with; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L36; setting the dir to `~/.qutip` and; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L38; setting the config file to `~/.qutip/qutiprc`. This forces Linux distributions to do more work when building in a chroot. For instance Debian build chroots set the ""home"" directory to `/nonexistent`, and then building docs fails with; ```; PermissionError: [Errno 13] Permission denied: '/nonexistent'; ```; since it can't create `/nonexistent/.qutip`. In practice that's not a great problem since when building docs for the package, we can set `HOME=$BUILDDIR` to place the config location in the build dir (which is writable) instead of `/nonexistent`. However there is a standardized location for config files which might be worth considering instead. The freedesktop.org specification at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html identifies locations for config and data files. Config files can be located under (one of) `$XDG_CONFIG_DIRS` for system configuration, or under `$XDG_CONFIG_HOME` for user configuration. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. In python XDG is accessible from the xdg package (in debian, the python3-xdg package). So the XDG equivalent of ; ```; qutip_conf_dir = os.path.join(os.path.expanduser(""~""), '.qutip'); ```; could be done with; ```; from xdg import XDG_CONFIG_HOME; ...; qutip_conf_dir = os.path.join(XDG_CONFIG_HOME, '.qutip'); ```; A more sophisticated method could be set up to also check XDG_CONFIG_DIRS instead (XDG_CONFIG_HOME is the first entry in the list defined in XDG_CONFIG_DIRS). ### Your Environment. ```shell; QuTiP Version: 4.7.0; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1876
https://github.com/qutip/qutip/issues/1876:1464,Security,access,accessible,1464,"n. qutip keeps configuration (e.g. for openmp) in a config file handled in configrc.py. The default location is in the home dir, with; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L36; setting the dir to `~/.qutip` and; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L38; setting the config file to `~/.qutip/qutiprc`. This forces Linux distributions to do more work when building in a chroot. For instance Debian build chroots set the ""home"" directory to `/nonexistent`, and then building docs fails with; ```; PermissionError: [Errno 13] Permission denied: '/nonexistent'; ```; since it can't create `/nonexistent/.qutip`. In practice that's not a great problem since when building docs for the package, we can set `HOME=$BUILDDIR` to place the config location in the build dir (which is writable) instead of `/nonexistent`. However there is a standardized location for config files which might be worth considering instead. The freedesktop.org specification at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html identifies locations for config and data files. Config files can be located under (one of) `$XDG_CONFIG_DIRS` for system configuration, or under `$XDG_CONFIG_HOME` for user configuration. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. In python XDG is accessible from the xdg package (in debian, the python3-xdg package). So the XDG equivalent of ; ```; qutip_conf_dir = os.path.join(os.path.expanduser(""~""), '.qutip'); ```; could be done with; ```; from xdg import XDG_CONFIG_HOME; ...; qutip_conf_dir = os.path.join(XDG_CONFIG_HOME, '.qutip'); ```; A more sophisticated method could be set up to also check XDG_CONFIG_DIRS instead (XDG_CONFIG_HOME is the first entry in the list defined in XDG_CONFIG_DIRS). ### Your Environment. ```shell; QuTiP Version: 4.7.0; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1876
https://github.com/qutip/qutip/issues/1877:89,Deployability,release,release,89,### Bug Description. This bug was introduced n #1813 and reported by @nleehone in a post-release review of https://github.com/qutip/qutip/pull/1813#pullrequestreview-950335153. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. The file suffix should be added if it is not present. ### Your Environment. ```shell; QuTiP version: 4.7.0; ```. ### Additional Context. _No response_,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1877
https://github.com/qutip/qutip/pull/1879:37,Deployability,integrat,integrator,37,"**Description**; `Solver` create the integrator at `__init__` instead of in `run` and `start`.; `step` and `run` no longer take an `options` parameter. `solver.options = new_options` will now reset the integrator to use the new options. However changing options will always reset the integrator. **Related issues or PRs**; Similar improvement where first made in #1710, splitting it to made that PR simpler. **Changelog**; Sovlers manage options as a property instead of method's parameter.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1879
https://github.com/qutip/qutip/pull/1879:202,Deployability,integrat,integrator,202,"**Description**; `Solver` create the integrator at `__init__` instead of in `run` and `start`.; `step` and `run` no longer take an `options` parameter. `solver.options = new_options` will now reset the integrator to use the new options. However changing options will always reset the integrator. **Related issues or PRs**; Similar improvement where first made in #1710, splitting it to made that PR simpler. **Changelog**; Sovlers manage options as a property instead of method's parameter.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1879
https://github.com/qutip/qutip/pull/1879:284,Deployability,integrat,integrator,284,"**Description**; `Solver` create the integrator at `__init__` instead of in `run` and `start`.; `step` and `run` no longer take an `options` parameter. `solver.options = new_options` will now reset the integrator to use the new options. However changing options will always reset the integrator. **Related issues or PRs**; Similar improvement where first made in #1710, splitting it to made that PR simpler. **Changelog**; Sovlers manage options as a property instead of method's parameter.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1879
https://github.com/qutip/qutip/pull/1879:37,Integrability,integrat,integrator,37,"**Description**; `Solver` create the integrator at `__init__` instead of in `run` and `start`.; `step` and `run` no longer take an `options` parameter. `solver.options = new_options` will now reset the integrator to use the new options. However changing options will always reset the integrator. **Related issues or PRs**; Similar improvement where first made in #1710, splitting it to made that PR simpler. **Changelog**; Sovlers manage options as a property instead of method's parameter.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1879
https://github.com/qutip/qutip/pull/1879:202,Integrability,integrat,integrator,202,"**Description**; `Solver` create the integrator at `__init__` instead of in `run` and `start`.; `step` and `run` no longer take an `options` parameter. `solver.options = new_options` will now reset the integrator to use the new options. However changing options will always reset the integrator. **Related issues or PRs**; Similar improvement where first made in #1710, splitting it to made that PR simpler. **Changelog**; Sovlers manage options as a property instead of method's parameter.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1879
https://github.com/qutip/qutip/pull/1879:284,Integrability,integrat,integrator,284,"**Description**; `Solver` create the integrator at `__init__` instead of in `run` and `start`.; `step` and `run` no longer take an `options` parameter. `solver.options = new_options` will now reset the integrator to use the new options. However changing options will always reset the integrator. **Related issues or PRs**; Similar improvement where first made in #1710, splitting it to made that PR simpler. **Changelog**; Sovlers manage options as a property instead of method's parameter.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1879
https://github.com/qutip/qutip/pull/1879:399,Usability,simpl,simpler,399,"**Description**; `Solver` create the integrator at `__init__` instead of in `run` and `start`.; `step` and `run` no longer take an `options` parameter. `solver.options = new_options` will now reset the integrator to use the new options. However changing options will always reset the integrator. **Related issues or PRs**; Similar improvement where first made in #1710, splitting it to made that PR simpler. **Changelog**; Sovlers manage options as a property instead of method's parameter.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1879
https://github.com/qutip/qutip/pull/1880:57,Deployability,integrat,integration,57,"**Description**; `IntergratorScipylsoda.mcstep` read the integration range from the scipy solver's `rwork`. However `rwork` is initialized to 0 when initializing the state and only take the expected value when the first step in done. Therefore it would fail when starting from time other than `0`. `IntergratorScipyZvode` also used `rwork` in an unsafe way. Fix that and add a test. . **Related issues or PRs**; Similar improvement where first made in https://github.com/qutip/qutip/pull/1710, splitting it to made that PR simpler. **Changelog**; `IntergratorScipylsoda` safe for starting at any time.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1880
https://github.com/qutip/qutip/pull/1880:57,Integrability,integrat,integration,57,"**Description**; `IntergratorScipylsoda.mcstep` read the integration range from the scipy solver's `rwork`. However `rwork` is initialized to 0 when initializing the state and only take the expected value when the first step in done. Therefore it would fail when starting from time other than `0`. `IntergratorScipyZvode` also used `rwork` in an unsafe way. Fix that and add a test. . **Related issues or PRs**; Similar improvement where first made in https://github.com/qutip/qutip/pull/1710, splitting it to made that PR simpler. **Changelog**; `IntergratorScipylsoda` safe for starting at any time.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1880
https://github.com/qutip/qutip/pull/1880:346,Safety,unsafe,unsafe,346,"**Description**; `IntergratorScipylsoda.mcstep` read the integration range from the scipy solver's `rwork`. However `rwork` is initialized to 0 when initializing the state and only take the expected value when the first step in done. Therefore it would fail when starting from time other than `0`. `IntergratorScipyZvode` also used `rwork` in an unsafe way. Fix that and add a test. . **Related issues or PRs**; Similar improvement where first made in https://github.com/qutip/qutip/pull/1710, splitting it to made that PR simpler. **Changelog**; `IntergratorScipylsoda` safe for starting at any time.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1880
https://github.com/qutip/qutip/pull/1880:571,Safety,safe,safe,571,"**Description**; `IntergratorScipylsoda.mcstep` read the integration range from the scipy solver's `rwork`. However `rwork` is initialized to 0 when initializing the state and only take the expected value when the first step in done. Therefore it would fail when starting from time other than `0`. `IntergratorScipyZvode` also used `rwork` in an unsafe way. Fix that and add a test. . **Related issues or PRs**; Similar improvement where first made in https://github.com/qutip/qutip/pull/1710, splitting it to made that PR simpler. **Changelog**; `IntergratorScipylsoda` safe for starting at any time.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1880
https://github.com/qutip/qutip/pull/1880:377,Testability,test,test,377,"**Description**; `IntergratorScipylsoda.mcstep` read the integration range from the scipy solver's `rwork`. However `rwork` is initialized to 0 when initializing the state and only take the expected value when the first step in done. Therefore it would fail when starting from time other than `0`. `IntergratorScipyZvode` also used `rwork` in an unsafe way. Fix that and add a test. . **Related issues or PRs**; Similar improvement where first made in https://github.com/qutip/qutip/pull/1710, splitting it to made that PR simpler. **Changelog**; `IntergratorScipylsoda` safe for starting at any time.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1880
https://github.com/qutip/qutip/pull/1880:523,Usability,simpl,simpler,523,"**Description**; `IntergratorScipylsoda.mcstep` read the integration range from the scipy solver's `rwork`. However `rwork` is initialized to 0 when initializing the state and only take the expected value when the first step in done. Therefore it would fail when starting from time other than `0`. `IntergratorScipyZvode` also used `rwork` in an unsafe way. Fix that and add a test. . **Related issues or PRs**; Similar improvement where first made in https://github.com/qutip/qutip/pull/1710, splitting it to made that PR simpler. **Changelog**; `IntergratorScipylsoda` safe for starting at any time.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1880
https://github.com/qutip/qutip/pull/1882:49,Testability,test,tests,49,**Description**; Fix some of the warnings in the tests in order to restore the `-Werror` flag later.; - Remove test for `state_number_qobj`: (function replaced by `basis`.); - scipy.sparse matrix operation replaced by `data.CSR` operation.; - Fix passing generator to `hstack`.; - Add some `filterwarnings` for `mcsolve` fallback to `sesolve` and coefficient parsing warning. **Related issues or PRs**; TODO in #1850. **Changelog**; Fix some warnings in tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1882
https://github.com/qutip/qutip/pull/1882:111,Testability,test,test,111,**Description**; Fix some of the warnings in the tests in order to restore the `-Werror` flag later.; - Remove test for `state_number_qobj`: (function replaced by `basis`.); - scipy.sparse matrix operation replaced by `data.CSR` operation.; - Fix passing generator to `hstack`.; - Add some `filterwarnings` for `mcsolve` fallback to `sesolve` and coefficient parsing warning. **Related issues or PRs**; TODO in #1850. **Changelog**; Fix some warnings in tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1882
https://github.com/qutip/qutip/pull/1882:454,Testability,test,tests,454,**Description**; Fix some of the warnings in the tests in order to restore the `-Werror` flag later.; - Remove test for `state_number_qobj`: (function replaced by `basis`.); - scipy.sparse matrix operation replaced by `data.CSR` operation.; - Fix passing generator to `hstack`.; - Add some `filterwarnings` for `mcsolve` fallback to `sesolve` and coefficient parsing warning. **Related issues or PRs**; TODO in #1850. **Changelog**; Fix some warnings in tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1882
https://github.com/qutip/qutip/pull/1883:155,Deployability,Update,Update,155,**Description**; Automatic built of the PDF documentation using the GitHub Action for the documentation. **Related issues or PRs**; #1858 . **Changelog**; Update documentation CI,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1883
https://github.com/qutip/qutip/pull/1884:20,Deployability,update,updated,20,"**Description**; We updated the signature for arguments in coefficient from dict to keyword format, changing call from `coeff(t, args)` to `coeff(t, **args)`. However `QobjEvo`, which have a similar call taking time and argument still took the new args as dictionary instead of keyword. Added keywork support for `QobjEvo.__call__` and `QobjEvo.arguments` . The `__init__` still take argument as a dict since it already takes a lot of parameters. **Related issues or PRs**; Follow up to #1633 . **Changelog**; QobjEvo call accept keywords for new args.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1884
https://github.com/qutip/qutip/pull/1885:147,Testability,test,tests,147,"**Description**; Lower the dims and length of the `tlist` used by `test_correlation_solver_equivalence[mc]`. Since we added a maximum time for the tests, this one test would fail from time to time. This make the test about 20% faster, which hopefully should be enough to have tests consistently passing. **Changelog**; Faster `test_correlation_solver_equivalence` test.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1885
https://github.com/qutip/qutip/pull/1885:163,Testability,test,test,163,"**Description**; Lower the dims and length of the `tlist` used by `test_correlation_solver_equivalence[mc]`. Since we added a maximum time for the tests, this one test would fail from time to time. This make the test about 20% faster, which hopefully should be enough to have tests consistently passing. **Changelog**; Faster `test_correlation_solver_equivalence` test.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1885
https://github.com/qutip/qutip/pull/1885:212,Testability,test,test,212,"**Description**; Lower the dims and length of the `tlist` used by `test_correlation_solver_equivalence[mc]`. Since we added a maximum time for the tests, this one test would fail from time to time. This make the test about 20% faster, which hopefully should be enough to have tests consistently passing. **Changelog**; Faster `test_correlation_solver_equivalence` test.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1885
https://github.com/qutip/qutip/pull/1885:276,Testability,test,tests,276,"**Description**; Lower the dims and length of the `tlist` used by `test_correlation_solver_equivalence[mc]`. Since we added a maximum time for the tests, this one test would fail from time to time. This make the test about 20% faster, which hopefully should be enough to have tests consistently passing. **Changelog**; Faster `test_correlation_solver_equivalence` test.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1885
https://github.com/qutip/qutip/pull/1885:364,Testability,test,test,364,"**Description**; Lower the dims and length of the `tlist` used by `test_correlation_solver_equivalence[mc]`. Since we added a maximum time for the tests, this one test would fail from time to time. This make the test about 20% faster, which hopefully should be enough to have tests consistently passing. **Changelog**; Faster `test_correlation_solver_equivalence` test.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1885
https://github.com/qutip/qutip/pull/1886:218,Deployability,install,install,218,"**Description**; When merging #1874, the 64 bits version of `intdtype.h` was added. ; But it should have been the 32 bits versions since it's the default version. Adding it to the gitignore would make it impossible to install with build systems not using setup.py (#1815) instead of defaulting to int32. . **Related issues or PRs**; Fix a mistake in #1874",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1886
https://github.com/qutip/qutip/issues/1888:310,Availability,error,error,310,"Hi,. I have a problem when trying to visualize the quantum circuit with the command ""q.png"".; I have installed ImageMagick, Perl, and Ghostscript as explained in the tutorial: https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/quantum-gates.ipynb. However, I still receive the next error message:. FileNotFoundError: [Errno 2] No such file or directory: 'qcirc.png'. The pdf file is generated but for some reason, is not converted to a .png file. Thanks a lot,; Ariel",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1888
https://github.com/qutip/qutip/issues/1888:101,Deployability,install,installed,101,"Hi,. I have a problem when trying to visualize the quantum circuit with the command ""q.png"".; I have installed ImageMagick, Perl, and Ghostscript as explained in the tutorial: https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/quantum-gates.ipynb. However, I still receive the next error message:. FileNotFoundError: [Errno 2] No such file or directory: 'qcirc.png'. The pdf file is generated but for some reason, is not converted to a .png file. Thanks a lot,; Ariel",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1888
https://github.com/qutip/qutip/issues/1888:316,Integrability,message,message,316,"Hi,. I have a problem when trying to visualize the quantum circuit with the command ""q.png"".; I have installed ImageMagick, Perl, and Ghostscript as explained in the tutorial: https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/quantum-gates.ipynb. However, I still receive the next error message:. FileNotFoundError: [Errno 2] No such file or directory: 'qcirc.png'. The pdf file is generated but for some reason, is not converted to a .png file. Thanks a lot,; Ariel",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1888
https://github.com/qutip/qutip/pull/1889:684,Availability,toler,tolerance,684,"**Description**; Apply the changes to solver/result.py that were made previously for mcsolve in #1710. ; Also add other improvement to `Result`. Major changes:; - `Result.__init__` signature changed from `(e_ops, options, _super, oper_state)` to `(e_ops, options, tlist, state0)`.; To know if we can normalize the state, we use the first state's dims instead of asking for information about it.; The first `add` is done in the `__init__` call.; - `MultiTrajResult` and `MultiTrajResultAveraged` are merged into `MultiTrajResult`: both classes were be interchangeable but did not share code, so any modification needed to be done twice.; - Add capacity to compute trajectories until a tolerance is reached. A new feature in #1710 was to allow to compute trajectories until the error bars on the expectation values are under a certain tolerance. The `add` method compute the error bars using jackknife re-sampling and return an estimation of the number of trajectories still needed to reach the desired tolerance. The mapping function can then stop computing trajectories when this reach `0`.; - `McResult` was created: `collapse` and `photocurrent` are an output of `mcsolve` only. So these were removed from `MultiTrajResult` and move into `McResult`. Other changes:; - `MultiTrajResult.steady_state` is a function instead of a property. `steady_state` was the average of the states for all times. With long enough `tlist`, it should converge to the steady state, but the first times are usually far from it. As a function, it offer the possibility to average the last `N` states.; - When `e_ops` is a `Qobj`, `QobjEvo` or `callable`, the expect will not be a list but the array of expect:; `Result(e_ops=[num], ...).expect[0] == Result(e_ops=num, ...).expect`.; I am not too sure about that one, it feel logic but could break some codes. . **Related issues or PRs**; #1710",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1889
https://github.com/qutip/qutip/pull/1889:776,Availability,error,error,776,"**Description**; Apply the changes to solver/result.py that were made previously for mcsolve in #1710. ; Also add other improvement to `Result`. Major changes:; - `Result.__init__` signature changed from `(e_ops, options, _super, oper_state)` to `(e_ops, options, tlist, state0)`.; To know if we can normalize the state, we use the first state's dims instead of asking for information about it.; The first `add` is done in the `__init__` call.; - `MultiTrajResult` and `MultiTrajResultAveraged` are merged into `MultiTrajResult`: both classes were be interchangeable but did not share code, so any modification needed to be done twice.; - Add capacity to compute trajectories until a tolerance is reached. A new feature in #1710 was to allow to compute trajectories until the error bars on the expectation values are under a certain tolerance. The `add` method compute the error bars using jackknife re-sampling and return an estimation of the number of trajectories still needed to reach the desired tolerance. The mapping function can then stop computing trajectories when this reach `0`.; - `McResult` was created: `collapse` and `photocurrent` are an output of `mcsolve` only. So these were removed from `MultiTrajResult` and move into `McResult`. Other changes:; - `MultiTrajResult.steady_state` is a function instead of a property. `steady_state` was the average of the states for all times. With long enough `tlist`, it should converge to the steady state, but the first times are usually far from it. As a function, it offer the possibility to average the last `N` states.; - When `e_ops` is a `Qobj`, `QobjEvo` or `callable`, the expect will not be a list but the array of expect:; `Result(e_ops=[num], ...).expect[0] == Result(e_ops=num, ...).expect`.; I am not too sure about that one, it feel logic but could break some codes. . **Related issues or PRs**; #1710",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1889
https://github.com/qutip/qutip/pull/1889:833,Availability,toler,tolerance,833,"**Description**; Apply the changes to solver/result.py that were made previously for mcsolve in #1710. ; Also add other improvement to `Result`. Major changes:; - `Result.__init__` signature changed from `(e_ops, options, _super, oper_state)` to `(e_ops, options, tlist, state0)`.; To know if we can normalize the state, we use the first state's dims instead of asking for information about it.; The first `add` is done in the `__init__` call.; - `MultiTrajResult` and `MultiTrajResultAveraged` are merged into `MultiTrajResult`: both classes were be interchangeable but did not share code, so any modification needed to be done twice.; - Add capacity to compute trajectories until a tolerance is reached. A new feature in #1710 was to allow to compute trajectories until the error bars on the expectation values are under a certain tolerance. The `add` method compute the error bars using jackknife re-sampling and return an estimation of the number of trajectories still needed to reach the desired tolerance. The mapping function can then stop computing trajectories when this reach `0`.; - `McResult` was created: `collapse` and `photocurrent` are an output of `mcsolve` only. So these were removed from `MultiTrajResult` and move into `McResult`. Other changes:; - `MultiTrajResult.steady_state` is a function instead of a property. `steady_state` was the average of the states for all times. With long enough `tlist`, it should converge to the steady state, but the first times are usually far from it. As a function, it offer the possibility to average the last `N` states.; - When `e_ops` is a `Qobj`, `QobjEvo` or `callable`, the expect will not be a list but the array of expect:; `Result(e_ops=[num], ...).expect[0] == Result(e_ops=num, ...).expect`.; I am not too sure about that one, it feel logic but could break some codes. . **Related issues or PRs**; #1710",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1889
https://github.com/qutip/qutip/pull/1889:873,Availability,error,error,873,"**Description**; Apply the changes to solver/result.py that were made previously for mcsolve in #1710. ; Also add other improvement to `Result`. Major changes:; - `Result.__init__` signature changed from `(e_ops, options, _super, oper_state)` to `(e_ops, options, tlist, state0)`.; To know if we can normalize the state, we use the first state's dims instead of asking for information about it.; The first `add` is done in the `__init__` call.; - `MultiTrajResult` and `MultiTrajResultAveraged` are merged into `MultiTrajResult`: both classes were be interchangeable but did not share code, so any modification needed to be done twice.; - Add capacity to compute trajectories until a tolerance is reached. A new feature in #1710 was to allow to compute trajectories until the error bars on the expectation values are under a certain tolerance. The `add` method compute the error bars using jackknife re-sampling and return an estimation of the number of trajectories still needed to reach the desired tolerance. The mapping function can then stop computing trajectories when this reach `0`.; - `McResult` was created: `collapse` and `photocurrent` are an output of `mcsolve` only. So these were removed from `MultiTrajResult` and move into `McResult`. Other changes:; - `MultiTrajResult.steady_state` is a function instead of a property. `steady_state` was the average of the states for all times. With long enough `tlist`, it should converge to the steady state, but the first times are usually far from it. As a function, it offer the possibility to average the last `N` states.; - When `e_ops` is a `Qobj`, `QobjEvo` or `callable`, the expect will not be a list but the array of expect:; `Result(e_ops=[num], ...).expect[0] == Result(e_ops=num, ...).expect`.; I am not too sure about that one, it feel logic but could break some codes. . **Related issues or PRs**; #1710",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1889
https://github.com/qutip/qutip/pull/1889:1001,Availability,toler,tolerance,1001,"**Description**; Apply the changes to solver/result.py that were made previously for mcsolve in #1710. ; Also add other improvement to `Result`. Major changes:; - `Result.__init__` signature changed from `(e_ops, options, _super, oper_state)` to `(e_ops, options, tlist, state0)`.; To know if we can normalize the state, we use the first state's dims instead of asking for information about it.; The first `add` is done in the `__init__` call.; - `MultiTrajResult` and `MultiTrajResultAveraged` are merged into `MultiTrajResult`: both classes were be interchangeable but did not share code, so any modification needed to be done twice.; - Add capacity to compute trajectories until a tolerance is reached. A new feature in #1710 was to allow to compute trajectories until the error bars on the expectation values are under a certain tolerance. The `add` method compute the error bars using jackknife re-sampling and return an estimation of the number of trajectories still needed to reach the desired tolerance. The mapping function can then stop computing trajectories when this reach `0`.; - `McResult` was created: `collapse` and `photocurrent` are an output of `mcsolve` only. So these were removed from `MultiTrajResult` and move into `McResult`. Other changes:; - `MultiTrajResult.steady_state` is a function instead of a property. `steady_state` was the average of the states for all times. With long enough `tlist`, it should converge to the steady state, but the first times are usually far from it. As a function, it offer the possibility to average the last `N` states.; - When `e_ops` is a `Qobj`, `QobjEvo` or `callable`, the expect will not be a list but the array of expect:; `Result(e_ops=[num], ...).expect[0] == Result(e_ops=num, ...).expect`.; I am not too sure about that one, it feel logic but could break some codes. . **Related issues or PRs**; #1710",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1889
https://github.com/qutip/qutip/pull/1889:1805,Testability,log,logic,1805,"**Description**; Apply the changes to solver/result.py that were made previously for mcsolve in #1710. ; Also add other improvement to `Result`. Major changes:; - `Result.__init__` signature changed from `(e_ops, options, _super, oper_state)` to `(e_ops, options, tlist, state0)`.; To know if we can normalize the state, we use the first state's dims instead of asking for information about it.; The first `add` is done in the `__init__` call.; - `MultiTrajResult` and `MultiTrajResultAveraged` are merged into `MultiTrajResult`: both classes were be interchangeable but did not share code, so any modification needed to be done twice.; - Add capacity to compute trajectories until a tolerance is reached. A new feature in #1710 was to allow to compute trajectories until the error bars on the expectation values are under a certain tolerance. The `add` method compute the error bars using jackknife re-sampling and return an estimation of the number of trajectories still needed to reach the desired tolerance. The mapping function can then stop computing trajectories when this reach `0`.; - `McResult` was created: `collapse` and `photocurrent` are an output of `mcsolve` only. So these were removed from `MultiTrajResult` and move into `McResult`. Other changes:; - `MultiTrajResult.steady_state` is a function instead of a property. `steady_state` was the average of the states for all times. With long enough `tlist`, it should converge to the steady state, but the first times are usually far from it. As a function, it offer the possibility to average the last `N` states.; - When `e_ops` is a `Qobj`, `QobjEvo` or `callable`, the expect will not be a list but the array of expect:; `Result(e_ops=[num], ...).expect[0] == Result(e_ops=num, ...).expect`.; I am not too sure about that one, it feel logic but could break some codes. . **Related issues or PRs**; #1710",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1889
https://github.com/qutip/qutip/pull/1890:410,Availability,avail,available,410,"**Description**; Remove the QIP submodule that has been migrated to `qutip/qutip-qip`. Most files were simply deleted, but there are a few non trivial parts:; - The gates used in tests were added to operators.py, all others were removed. The signature was changed: the `target` parameter was removed and `dtype` keywords added to match other operators. This means that there will be two version of `cnot` etc. available. . - `qutip.enntropy.entangling_power` was also removed. While it was not strictly in the qip module, it is meant to be used for 2 qubits gates, so it felt more natural to be included there. - The target qubits options for measurement was removed. qip has it's own more specialized `Measurement` class, which I guess is the reference for such case. But we could make it stronger so that it can target various kind of subsystems, such as one site on a lattice or one of harmonic oscillator coupled to others, etc. Bonus: The `-Werror` for pytest was restored. **Related issues or PRs**; Checklist item in #1850. **Changelog**; Remove the qip submodule.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1890
https://github.com/qutip/qutip/pull/1890:179,Testability,test,tests,179,"**Description**; Remove the QIP submodule that has been migrated to `qutip/qutip-qip`. Most files were simply deleted, but there are a few non trivial parts:; - The gates used in tests were added to operators.py, all others were removed. The signature was changed: the `target` parameter was removed and `dtype` keywords added to match other operators. This means that there will be two version of `cnot` etc. available. . - `qutip.enntropy.entangling_power` was also removed. While it was not strictly in the qip module, it is meant to be used for 2 qubits gates, so it felt more natural to be included there. - The target qubits options for measurement was removed. qip has it's own more specialized `Measurement` class, which I guess is the reference for such case. But we could make it stronger so that it can target various kind of subsystems, such as one site on a lattice or one of harmonic oscillator coupled to others, etc. Bonus: The `-Werror` for pytest was restored. **Related issues or PRs**; Checklist item in #1850. **Changelog**; Remove the qip submodule.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1890
https://github.com/qutip/qutip/pull/1890:103,Usability,simpl,simply,103,"**Description**; Remove the QIP submodule that has been migrated to `qutip/qutip-qip`. Most files were simply deleted, but there are a few non trivial parts:; - The gates used in tests were added to operators.py, all others were removed. The signature was changed: the `target` parameter was removed and `dtype` keywords added to match other operators. This means that there will be two version of `cnot` etc. available. . - `qutip.enntropy.entangling_power` was also removed. While it was not strictly in the qip module, it is meant to be used for 2 qubits gates, so it felt more natural to be included there. - The target qubits options for measurement was removed. qip has it's own more specialized `Measurement` class, which I guess is the reference for such case. But we could make it stronger so that it can target various kind of subsystems, such as one site on a lattice or one of harmonic oscillator coupled to others, etc. Bonus: The `-Werror` for pytest was restored. **Related issues or PRs**; Checklist item in #1850. **Changelog**; Remove the qip submodule.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1890
https://github.com/qutip/qutip/pull/1892:435,Modifiability,variab,variables,435,"**Description**; The fix pertains to `add_gate` behaviour when multiple insertion indices are supplied. Prior to the proposed fix, the insertion loop doesn't take into account the fact that inserting an element in the gates list, modifies the indices in the original list, whereas the caller of `add_gate` supplies a list of indices, with positions with respect to the indices in the original list. Additionally, the PR removes unused variables and unused function (that has also not been imported). **Related issues or PRs**; Fixes #1497. **Changelog**; Fixed add_gate behavior when inserting a gate at multiple indices.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1892
https://github.com/qutip/qutip/issues/1893:277,Deployability,install,installed,277,"### Problem Description. From version 5.0, the subpackage `qutip.qip` will be removed and replaced by a separate package `qutip-qip`. To make it easier for others to migrate from 4.7 to 5.0, we can set up `qutip-qip` as an optional plug-in for qutip, so that if `qutip-qip` is installed, the `qutip.qip` name space can be used as before. ### Expected behaviour; - If only `qutip` is installed, importing `qutip.qip` will raise an `ImportError` with instruction for installing `qutip_qip`.; - If `qutip-qip` is installed, using `qutip.qip` will automatically use the `qutip_qip` namespace, with no difference in the user interface.; - Update `setup.cfg` so that `pip install qutip[qip]` will automatically install `qutip_qip`. E.g. the following should work if `qutip`-5.0 and `qutip-qip` are both installed; ```python; # The following should be the same; from qutip.qip.circuit import QubitCircuit; from qutip_qip.circuit import QubitCircuit; ```. ### Proposed Solution. See https://github.com/qutip/qutip/discussions/1500 for ideals on the implementation. **Note: The implementation should be done against the `dev.major` branch of qutip.**",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1893
https://github.com/qutip/qutip/issues/1893:383,Deployability,install,installed,383,"### Problem Description. From version 5.0, the subpackage `qutip.qip` will be removed and replaced by a separate package `qutip-qip`. To make it easier for others to migrate from 4.7 to 5.0, we can set up `qutip-qip` as an optional plug-in for qutip, so that if `qutip-qip` is installed, the `qutip.qip` name space can be used as before. ### Expected behaviour; - If only `qutip` is installed, importing `qutip.qip` will raise an `ImportError` with instruction for installing `qutip_qip`.; - If `qutip-qip` is installed, using `qutip.qip` will automatically use the `qutip_qip` namespace, with no difference in the user interface.; - Update `setup.cfg` so that `pip install qutip[qip]` will automatically install `qutip_qip`. E.g. the following should work if `qutip`-5.0 and `qutip-qip` are both installed; ```python; # The following should be the same; from qutip.qip.circuit import QubitCircuit; from qutip_qip.circuit import QubitCircuit; ```. ### Proposed Solution. See https://github.com/qutip/qutip/discussions/1500 for ideals on the implementation. **Note: The implementation should be done against the `dev.major` branch of qutip.**",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1893
https://github.com/qutip/qutip/issues/1893:465,Deployability,install,installing,465,"### Problem Description. From version 5.0, the subpackage `qutip.qip` will be removed and replaced by a separate package `qutip-qip`. To make it easier for others to migrate from 4.7 to 5.0, we can set up `qutip-qip` as an optional plug-in for qutip, so that if `qutip-qip` is installed, the `qutip.qip` name space can be used as before. ### Expected behaviour; - If only `qutip` is installed, importing `qutip.qip` will raise an `ImportError` with instruction for installing `qutip_qip`.; - If `qutip-qip` is installed, using `qutip.qip` will automatically use the `qutip_qip` namespace, with no difference in the user interface.; - Update `setup.cfg` so that `pip install qutip[qip]` will automatically install `qutip_qip`. E.g. the following should work if `qutip`-5.0 and `qutip-qip` are both installed; ```python; # The following should be the same; from qutip.qip.circuit import QubitCircuit; from qutip_qip.circuit import QubitCircuit; ```. ### Proposed Solution. See https://github.com/qutip/qutip/discussions/1500 for ideals on the implementation. **Note: The implementation should be done against the `dev.major` branch of qutip.**",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1893
https://github.com/qutip/qutip/issues/1893:510,Deployability,install,installed,510,"### Problem Description. From version 5.0, the subpackage `qutip.qip` will be removed and replaced by a separate package `qutip-qip`. To make it easier for others to migrate from 4.7 to 5.0, we can set up `qutip-qip` as an optional plug-in for qutip, so that if `qutip-qip` is installed, the `qutip.qip` name space can be used as before. ### Expected behaviour; - If only `qutip` is installed, importing `qutip.qip` will raise an `ImportError` with instruction for installing `qutip_qip`.; - If `qutip-qip` is installed, using `qutip.qip` will automatically use the `qutip_qip` namespace, with no difference in the user interface.; - Update `setup.cfg` so that `pip install qutip[qip]` will automatically install `qutip_qip`. E.g. the following should work if `qutip`-5.0 and `qutip-qip` are both installed; ```python; # The following should be the same; from qutip.qip.circuit import QubitCircuit; from qutip_qip.circuit import QubitCircuit; ```. ### Proposed Solution. See https://github.com/qutip/qutip/discussions/1500 for ideals on the implementation. **Note: The implementation should be done against the `dev.major` branch of qutip.**",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1893
https://github.com/qutip/qutip/issues/1893:634,Deployability,Update,Update,634,"### Problem Description. From version 5.0, the subpackage `qutip.qip` will be removed and replaced by a separate package `qutip-qip`. To make it easier for others to migrate from 4.7 to 5.0, we can set up `qutip-qip` as an optional plug-in for qutip, so that if `qutip-qip` is installed, the `qutip.qip` name space can be used as before. ### Expected behaviour; - If only `qutip` is installed, importing `qutip.qip` will raise an `ImportError` with instruction for installing `qutip_qip`.; - If `qutip-qip` is installed, using `qutip.qip` will automatically use the `qutip_qip` namespace, with no difference in the user interface.; - Update `setup.cfg` so that `pip install qutip[qip]` will automatically install `qutip_qip`. E.g. the following should work if `qutip`-5.0 and `qutip-qip` are both installed; ```python; # The following should be the same; from qutip.qip.circuit import QubitCircuit; from qutip_qip.circuit import QubitCircuit; ```. ### Proposed Solution. See https://github.com/qutip/qutip/discussions/1500 for ideals on the implementation. **Note: The implementation should be done against the `dev.major` branch of qutip.**",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1893
https://github.com/qutip/qutip/issues/1893:666,Deployability,install,install,666,"### Problem Description. From version 5.0, the subpackage `qutip.qip` will be removed and replaced by a separate package `qutip-qip`. To make it easier for others to migrate from 4.7 to 5.0, we can set up `qutip-qip` as an optional plug-in for qutip, so that if `qutip-qip` is installed, the `qutip.qip` name space can be used as before. ### Expected behaviour; - If only `qutip` is installed, importing `qutip.qip` will raise an `ImportError` with instruction for installing `qutip_qip`.; - If `qutip-qip` is installed, using `qutip.qip` will automatically use the `qutip_qip` namespace, with no difference in the user interface.; - Update `setup.cfg` so that `pip install qutip[qip]` will automatically install `qutip_qip`. E.g. the following should work if `qutip`-5.0 and `qutip-qip` are both installed; ```python; # The following should be the same; from qutip.qip.circuit import QubitCircuit; from qutip_qip.circuit import QubitCircuit; ```. ### Proposed Solution. See https://github.com/qutip/qutip/discussions/1500 for ideals on the implementation. **Note: The implementation should be done against the `dev.major` branch of qutip.**",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1893
https://github.com/qutip/qutip/issues/1893:705,Deployability,install,install,705,"### Problem Description. From version 5.0, the subpackage `qutip.qip` will be removed and replaced by a separate package `qutip-qip`. To make it easier for others to migrate from 4.7 to 5.0, we can set up `qutip-qip` as an optional plug-in for qutip, so that if `qutip-qip` is installed, the `qutip.qip` name space can be used as before. ### Expected behaviour; - If only `qutip` is installed, importing `qutip.qip` will raise an `ImportError` with instruction for installing `qutip_qip`.; - If `qutip-qip` is installed, using `qutip.qip` will automatically use the `qutip_qip` namespace, with no difference in the user interface.; - Update `setup.cfg` so that `pip install qutip[qip]` will automatically install `qutip_qip`. E.g. the following should work if `qutip`-5.0 and `qutip-qip` are both installed; ```python; # The following should be the same; from qutip.qip.circuit import QubitCircuit; from qutip_qip.circuit import QubitCircuit; ```. ### Proposed Solution. See https://github.com/qutip/qutip/discussions/1500 for ideals on the implementation. **Note: The implementation should be done against the `dev.major` branch of qutip.**",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1893
https://github.com/qutip/qutip/issues/1893:797,Deployability,install,installed,797,"### Problem Description. From version 5.0, the subpackage `qutip.qip` will be removed and replaced by a separate package `qutip-qip`. To make it easier for others to migrate from 4.7 to 5.0, we can set up `qutip-qip` as an optional plug-in for qutip, so that if `qutip-qip` is installed, the `qutip.qip` name space can be used as before. ### Expected behaviour; - If only `qutip` is installed, importing `qutip.qip` will raise an `ImportError` with instruction for installing `qutip_qip`.; - If `qutip-qip` is installed, using `qutip.qip` will automatically use the `qutip_qip` namespace, with no difference in the user interface.; - Update `setup.cfg` so that `pip install qutip[qip]` will automatically install `qutip_qip`. E.g. the following should work if `qutip`-5.0 and `qutip-qip` are both installed; ```python; # The following should be the same; from qutip.qip.circuit import QubitCircuit; from qutip_qip.circuit import QubitCircuit; ```. ### Proposed Solution. See https://github.com/qutip/qutip/discussions/1500 for ideals on the implementation. **Note: The implementation should be done against the `dev.major` branch of qutip.**",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1893
https://github.com/qutip/qutip/issues/1893:620,Integrability,interface,interface,620,"### Problem Description. From version 5.0, the subpackage `qutip.qip` will be removed and replaced by a separate package `qutip-qip`. To make it easier for others to migrate from 4.7 to 5.0, we can set up `qutip-qip` as an optional plug-in for qutip, so that if `qutip-qip` is installed, the `qutip.qip` name space can be used as before. ### Expected behaviour; - If only `qutip` is installed, importing `qutip.qip` will raise an `ImportError` with instruction for installing `qutip_qip`.; - If `qutip-qip` is installed, using `qutip.qip` will automatically use the `qutip_qip` namespace, with no difference in the user interface.; - Update `setup.cfg` so that `pip install qutip[qip]` will automatically install `qutip_qip`. E.g. the following should work if `qutip`-5.0 and `qutip-qip` are both installed; ```python; # The following should be the same; from qutip.qip.circuit import QubitCircuit; from qutip_qip.circuit import QubitCircuit; ```. ### Proposed Solution. See https://github.com/qutip/qutip/discussions/1500 for ideals on the implementation. **Note: The implementation should be done against the `dev.major` branch of qutip.**",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1893
https://github.com/qutip/qutip/issues/1893:232,Modifiability,plug-in,plug-in,232,"### Problem Description. From version 5.0, the subpackage `qutip.qip` will be removed and replaced by a separate package `qutip-qip`. To make it easier for others to migrate from 4.7 to 5.0, we can set up `qutip-qip` as an optional plug-in for qutip, so that if `qutip-qip` is installed, the `qutip.qip` name space can be used as before. ### Expected behaviour; - If only `qutip` is installed, importing `qutip.qip` will raise an `ImportError` with instruction for installing `qutip_qip`.; - If `qutip-qip` is installed, using `qutip.qip` will automatically use the `qutip_qip` namespace, with no difference in the user interface.; - Update `setup.cfg` so that `pip install qutip[qip]` will automatically install `qutip_qip`. E.g. the following should work if `qutip`-5.0 and `qutip-qip` are both installed; ```python; # The following should be the same; from qutip.qip.circuit import QubitCircuit; from qutip_qip.circuit import QubitCircuit; ```. ### Proposed Solution. See https://github.com/qutip/qutip/discussions/1500 for ideals on the implementation. **Note: The implementation should be done against the `dev.major` branch of qutip.**",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1893
https://github.com/qutip/qutip/issues/1894:74,Deployability,release,releases,74,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1894
https://github.com/qutip/qutip/issues/1894:169,Deployability,release,release,169,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1894
https://github.com/qutip/qutip/issues/1894:312,Deployability,release,release,312,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1894
https://github.com/qutip/qutip/issues/1894:657,Deployability,configurat,configuration,657,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1894
https://github.com/qutip/qutip/issues/1894:698,Deployability,Update,Update,698,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1894
https://github.com/qutip/qutip/issues/1894:709,Deployability,release,release,709,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1894
https://github.com/qutip/qutip/issues/1894:772,Deployability,update,update,772,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1894
https://github.com/qutip/qutip/issues/1894:802,Deployability,Update,Update,802,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1894
https://github.com/qutip/qutip/issues/1894:911,Deployability,Update,Update,911,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1894
https://github.com/qutip/qutip/issues/1894:544,Modifiability,config,configure,544,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1894
https://github.com/qutip/qutip/issues/1894:657,Modifiability,config,configuration,657,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1894
https://github.com/qutip/qutip/issues/1894:106,Testability,log,log,106,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1894
https://github.com/qutip/qutip/issues/1894:224,Testability,log,log,224,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1894
https://github.com/qutip/qutip/issues/1894:521,Testability,log,log,521,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1894
https://github.com/qutip/qutip/issues/1894:790,Testability,log,log,790,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1894
https://github.com/qutip/qutip/issues/1894:1034,Testability,test,tests,1034,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1894
https://github.com/qutip/qutip/issues/1894:1318,Usability,simpl,simple,1318,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1894
https://github.com/qutip/qutip/pull/1895:55,Testability,test,tests,55,**Description**; Updating cython to 0.29.30 break some tests... This fix the issue. **Changelog**; Add support for cython 0.29.30,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/pull/1895
https://github.com/qutip/qutip/issues/1896:138,Availability,error,error,138,"### Bug Description. I have been running into an issue similar to #806, #1605, and #1623 wherein usage of `mesolve` produces the attached error. It seems as if the majority of the users that reported that error had some suspect input parameters leading to slow convergence in integration; to confirm that this wasn't the case I tried running the [qubit dynamics QuTiP tutorial](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/qubit-dynamics.ipynb), which _still_ produced the same error. My system specs are as follows: `21.2.0 Darwin Kernel Version 21.2.0: Sun Nov 28 20:29:10 PST 2021; root:xnu-8019.61.5~1/RELEASE_ARM64_T8101 arm64`. My package installations can be found here: [requirements.txt](https://github.com/qutip/qutip/files/8725390/requirements.txt). These are also listed in the below categories. Any help would be appreciated. ### Code to Reproduce the Bug. ```shell; import matplotlib.pyplot as plt; import numpy as np; from qutip import *; def qubit_integrate(epsilon, delta, g1, g2, solver):. H = epsilon / 2.0 * sigmaz() + delta / 2.0 * sigmax(); ; # collapse operators; c_ops = []. if g1 > 0.0:; c_ops.append(np.sqrt(g1) * sigmam()). if g2 > 0.0:; c_ops.append(np.sqrt(g2) * sigmaz()). e_ops = [sigmax(), sigmay(), sigmaz()]; ; if solver == ""me"":; output = mesolve(H, psi0, tlist, c_ops, e_ops) ; elif solver == ""es"":; output = essolve(H, psi0, tlist, c_ops, e_ops) ; elif solver == ""mc"":; ntraj = 250; output = mcsolve(H, psi0, tlist, ntraj, c_ops, [sigmax(), sigmay(), sigmaz()]) ; else:; raise ValueError(""unknown solver""); ; return output.expect[0], output.expect[1], output.expect[2]; epsilon = 0.0 * 2 * np.pi # cavity frequency; delta = 1.0 * 2 * np.pi # atom frequency; g2 = 0.15; g1 = 0.0. # intial state; psi0 = basis(2,0). tlist = np.linspace(0,5,200). # analytics; sx_analytic = np.zeros(shape(tlist)); sy_analytic = -np.sin(2*np.pi*tlist) * np.exp(-tlist * g2); sz_analytic = np.cos(2*np.pi*tlist) * np.exp(-tlist * g2); sx1, sy1, sz1 = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1896
https://github.com/qutip/qutip/issues/1896:205,Availability,error,error,205,"### Bug Description. I have been running into an issue similar to #806, #1605, and #1623 wherein usage of `mesolve` produces the attached error. It seems as if the majority of the users that reported that error had some suspect input parameters leading to slow convergence in integration; to confirm that this wasn't the case I tried running the [qubit dynamics QuTiP tutorial](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/qubit-dynamics.ipynb), which _still_ produced the same error. My system specs are as follows: `21.2.0 Darwin Kernel Version 21.2.0: Sun Nov 28 20:29:10 PST 2021; root:xnu-8019.61.5~1/RELEASE_ARM64_T8101 arm64`. My package installations can be found here: [requirements.txt](https://github.com/qutip/qutip/files/8725390/requirements.txt). These are also listed in the below categories. Any help would be appreciated. ### Code to Reproduce the Bug. ```shell; import matplotlib.pyplot as plt; import numpy as np; from qutip import *; def qubit_integrate(epsilon, delta, g1, g2, solver):. H = epsilon / 2.0 * sigmaz() + delta / 2.0 * sigmax(); ; # collapse operators; c_ops = []. if g1 > 0.0:; c_ops.append(np.sqrt(g1) * sigmam()). if g2 > 0.0:; c_ops.append(np.sqrt(g2) * sigmaz()). e_ops = [sigmax(), sigmay(), sigmaz()]; ; if solver == ""me"":; output = mesolve(H, psi0, tlist, c_ops, e_ops) ; elif solver == ""es"":; output = essolve(H, psi0, tlist, c_ops, e_ops) ; elif solver == ""mc"":; ntraj = 250; output = mcsolve(H, psi0, tlist, ntraj, c_ops, [sigmax(), sigmay(), sigmaz()]) ; else:; raise ValueError(""unknown solver""); ; return output.expect[0], output.expect[1], output.expect[2]; epsilon = 0.0 * 2 * np.pi # cavity frequency; delta = 1.0 * 2 * np.pi # atom frequency; g2 = 0.15; g1 = 0.0. # intial state; psi0 = basis(2,0). tlist = np.linspace(0,5,200). # analytics; sx_analytic = np.zeros(shape(tlist)); sy_analytic = -np.sin(2*np.pi*tlist) * np.exp(-tlist * g2); sz_analytic = np.cos(2*np.pi*tlist) * np.exp(-tlist * g2); sx1, sy1, sz1 = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1896
https://github.com/qutip/qutip/issues/1896:512,Availability,error,error,512,"### Bug Description. I have been running into an issue similar to #806, #1605, and #1623 wherein usage of `mesolve` produces the attached error. It seems as if the majority of the users that reported that error had some suspect input parameters leading to slow convergence in integration; to confirm that this wasn't the case I tried running the [qubit dynamics QuTiP tutorial](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/qubit-dynamics.ipynb), which _still_ produced the same error. My system specs are as follows: `21.2.0 Darwin Kernel Version 21.2.0: Sun Nov 28 20:29:10 PST 2021; root:xnu-8019.61.5~1/RELEASE_ARM64_T8101 arm64`. My package installations can be found here: [requirements.txt](https://github.com/qutip/qutip/files/8725390/requirements.txt). These are also listed in the below categories. Any help would be appreciated. ### Code to Reproduce the Bug. ```shell; import matplotlib.pyplot as plt; import numpy as np; from qutip import *; def qubit_integrate(epsilon, delta, g1, g2, solver):. H = epsilon / 2.0 * sigmaz() + delta / 2.0 * sigmax(); ; # collapse operators; c_ops = []. if g1 > 0.0:; c_ops.append(np.sqrt(g1) * sigmam()). if g2 > 0.0:; c_ops.append(np.sqrt(g2) * sigmaz()). e_ops = [sigmax(), sigmay(), sigmaz()]; ; if solver == ""me"":; output = mesolve(H, psi0, tlist, c_ops, e_ops) ; elif solver == ""es"":; output = essolve(H, psi0, tlist, c_ops, e_ops) ; elif solver == ""mc"":; ntraj = 250; output = mcsolve(H, psi0, tlist, ntraj, c_ops, [sigmax(), sigmay(), sigmaz()]) ; else:; raise ValueError(""unknown solver""); ; return output.expect[0], output.expect[1], output.expect[2]; epsilon = 0.0 * 2 * np.pi # cavity frequency; delta = 1.0 * 2 * np.pi # atom frequency; g2 = 0.15; g1 = 0.0. # intial state; psi0 = basis(2,0). tlist = np.linspace(0,5,200). # analytics; sx_analytic = np.zeros(shape(tlist)); sy_analytic = -np.sin(2*np.pi*tlist) * np.exp(-tlist * g2); sz_analytic = np.cos(2*np.pi*tlist) * np.exp(-tlist * g2); sx1, sy1, sz1 = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1896
https://github.com/qutip/qutip/issues/1896:4890,Availability,error,error,4890,"245](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=244) progress_bar, dims=rho0.dims); [246](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=245) res.num_collapse = len(c_ops); [248](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=247) if e_ops_dict:. File ~/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py:496, in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); [493](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=492) progress_bar.update(t_idx); [495](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=494) if not r.successful():; --> [496](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=495) raise Exception(""ODE integration error: Try to increase ""; [497](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=496) ""the allowed number of substeps by increasing ""; [498](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=497) ""the nsteps parameter in the Options class.""); [500](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=499) if opt.store_states or expt_callback:; [501](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=500) cdata = get_curr_state_data(r). Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class.; ```. ### Expected Behaviour. The evolution should have reproduced the result given in the tutorial notebook. ### Your Environment. ```shell; QuTiP Version: 4.7.0; Numpy Version: 1.21.1; Scipy Version: 1.7.3; Cython Version: None; Matplotlib Version: 3.5.0; Py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1896
https://github.com/qutip/qutip/issues/1896:5542,Availability,error,error,5542,"; [248](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=247) if e_ops_dict:. File ~/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py:496, in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); [493](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=492) progress_bar.update(t_idx); [495](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=494) if not r.successful():; --> [496](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=495) raise Exception(""ODE integration error: Try to increase ""; [497](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=496) ""the allowed number of substeps by increasing ""; [498](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=497) ""the nsteps parameter in the Options class.""); [500](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=499) if opt.store_states or expt_callback:; [501](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=500) cdata = get_curr_state_data(r). Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class.; ```. ### Expected Behaviour. The evolution should have reproduced the result given in the tutorial notebook. ### Your Environment. ```shell; QuTiP Version: 4.7.0; Numpy Version: 1.21.1; Scipy Version: 1.7.3; Cython Version: None; Matplotlib Version: 3.5.0; Python Version: 3.9.0; Number of CPUs: 8; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1896
https://github.com/qutip/qutip/issues/1896:276,Deployability,integrat,integration,276,"### Bug Description. I have been running into an issue similar to #806, #1605, and #1623 wherein usage of `mesolve` produces the attached error. It seems as if the majority of the users that reported that error had some suspect input parameters leading to slow convergence in integration; to confirm that this wasn't the case I tried running the [qubit dynamics QuTiP tutorial](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/qubit-dynamics.ipynb), which _still_ produced the same error. My system specs are as follows: `21.2.0 Darwin Kernel Version 21.2.0: Sun Nov 28 20:29:10 PST 2021; root:xnu-8019.61.5~1/RELEASE_ARM64_T8101 arm64`. My package installations can be found here: [requirements.txt](https://github.com/qutip/qutip/files/8725390/requirements.txt). These are also listed in the below categories. Any help would be appreciated. ### Code to Reproduce the Bug. ```shell; import matplotlib.pyplot as plt; import numpy as np; from qutip import *; def qubit_integrate(epsilon, delta, g1, g2, solver):. H = epsilon / 2.0 * sigmaz() + delta / 2.0 * sigmax(); ; # collapse operators; c_ops = []. if g1 > 0.0:; c_ops.append(np.sqrt(g1) * sigmam()). if g2 > 0.0:; c_ops.append(np.sqrt(g2) * sigmaz()). e_ops = [sigmax(), sigmay(), sigmaz()]; ; if solver == ""me"":; output = mesolve(H, psi0, tlist, c_ops, e_ops) ; elif solver == ""es"":; output = essolve(H, psi0, tlist, c_ops, e_ops) ; elif solver == ""mc"":; ntraj = 250; output = mcsolve(H, psi0, tlist, ntraj, c_ops, [sigmax(), sigmay(), sigmaz()]) ; else:; raise ValueError(""unknown solver""); ; return output.expect[0], output.expect[1], output.expect[2]; epsilon = 0.0 * 2 * np.pi # cavity frequency; delta = 1.0 * 2 * np.pi # atom frequency; g2 = 0.15; g1 = 0.0. # intial state; psi0 = basis(2,0). tlist = np.linspace(0,5,200). # analytics; sx_analytic = np.zeros(shape(tlist)); sy_analytic = -np.sin(2*np.pi*tlist) * np.exp(-tlist * g2); sz_analytic = np.cos(2*np.pi*tlist) * np.exp(-tlist * g2); sx1, sy1, sz1 = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1896
https://github.com/qutip/qutip/issues/1896:679,Deployability,install,installations,679,"### Bug Description. I have been running into an issue similar to #806, #1605, and #1623 wherein usage of `mesolve` produces the attached error. It seems as if the majority of the users that reported that error had some suspect input parameters leading to slow convergence in integration; to confirm that this wasn't the case I tried running the [qubit dynamics QuTiP tutorial](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/qubit-dynamics.ipynb), which _still_ produced the same error. My system specs are as follows: `21.2.0 Darwin Kernel Version 21.2.0: Sun Nov 28 20:29:10 PST 2021; root:xnu-8019.61.5~1/RELEASE_ARM64_T8101 arm64`. My package installations can be found here: [requirements.txt](https://github.com/qutip/qutip/files/8725390/requirements.txt). These are also listed in the below categories. Any help would be appreciated. ### Code to Reproduce the Bug. ```shell; import matplotlib.pyplot as plt; import numpy as np; from qutip import *; def qubit_integrate(epsilon, delta, g1, g2, solver):. H = epsilon / 2.0 * sigmaz() + delta / 2.0 * sigmax(); ; # collapse operators; c_ops = []. if g1 > 0.0:; c_ops.append(np.sqrt(g1) * sigmam()). if g2 > 0.0:; c_ops.append(np.sqrt(g2) * sigmaz()). e_ops = [sigmax(), sigmay(), sigmaz()]; ; if solver == ""me"":; output = mesolve(H, psi0, tlist, c_ops, e_ops) ; elif solver == ""es"":; output = essolve(H, psi0, tlist, c_ops, e_ops) ; elif solver == ""mc"":; ntraj = 250; output = mcsolve(H, psi0, tlist, ntraj, c_ops, [sigmax(), sigmay(), sigmaz()]) ; else:; raise ValueError(""unknown solver""); ; return output.expect[0], output.expect[1], output.expect[2]; epsilon = 0.0 * 2 * np.pi # cavity frequency; delta = 1.0 * 2 * np.pi # atom frequency; g2 = 0.15; g1 = 0.0. # intial state; psi0 = basis(2,0). tlist = np.linspace(0,5,200). # analytics; sx_analytic = np.zeros(shape(tlist)); sy_analytic = -np.sin(2*np.pi*tlist) * np.exp(-tlist * g2); sz_analytic = np.cos(2*np.pi*tlist) * np.exp(-tlist * g2); sx1, sy1, sz1 = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1896
https://github.com/qutip/qutip/issues/1896:4598,Deployability,update,update,4598,"pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=241) func(0., v, *ode_args) + v; --> [244](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=243) res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, options,; [245](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=244) progress_bar, dims=rho0.dims); [246](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=245) res.num_collapse = len(c_ops); [248](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=247) if e_ops_dict:. File ~/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py:496, in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); [493](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=492) progress_bar.update(t_idx); [495](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=494) if not r.successful():; --> [496](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=495) raise Exception(""ODE integration error: Try to increase ""; [497](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=496) ""the allowed number of substeps by increasing ""; [498](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=497) ""the nsteps parameter in the Options class.""); [500](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=499) if opt.store_states or expt_callback:; [501](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=500) cdata = get_curr_state_data(r). Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1896
https://github.com/qutip/qutip/issues/1896:4878,Deployability,integrat,integration,4878,"245](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=244) progress_bar, dims=rho0.dims); [246](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=245) res.num_collapse = len(c_ops); [248](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=247) if e_ops_dict:. File ~/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py:496, in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); [493](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=492) progress_bar.update(t_idx); [495](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=494) if not r.successful():; --> [496](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=495) raise Exception(""ODE integration error: Try to increase ""; [497](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=496) ""the allowed number of substeps by increasing ""; [498](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=497) ""the nsteps parameter in the Options class.""); [500](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=499) if opt.store_states or expt_callback:; [501](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=500) cdata = get_curr_state_data(r). Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class.; ```. ### Expected Behaviour. The evolution should have reproduced the result given in the tutorial notebook. ### Your Environment. ```shell; QuTiP Version: 4.7.0; Numpy Version: 1.21.1; Scipy Version: 1.7.3; Cython Version: None; Matplotlib Version: 3.5.0; Py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1896
https://github.com/qutip/qutip/issues/1896:5530,Deployability,integrat,integration,5530,"; [248](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=247) if e_ops_dict:. File ~/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py:496, in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); [493](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=492) progress_bar.update(t_idx); [495](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=494) if not r.successful():; --> [496](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=495) raise Exception(""ODE integration error: Try to increase ""; [497](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=496) ""the allowed number of substeps by increasing ""; [498](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=497) ""the nsteps parameter in the Options class.""); [500](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=499) if opt.store_states or expt_callback:; [501](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=500) cdata = get_curr_state_data(r). Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class.; ```. ### Expected Behaviour. The evolution should have reproduced the result given in the tutorial notebook. ### Your Environment. ```shell; QuTiP Version: 4.7.0; Numpy Version: 1.21.1; Scipy Version: 1.7.3; Cython Version: None; Matplotlib Version: 3.5.0; Python Version: 3.9.0; Number of CPUs: 8; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1896
https://github.com/qutip/qutip/issues/1896:5980,Deployability,Install,Installed,5980,"; [248](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=247) if e_ops_dict:. File ~/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py:496, in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); [493](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=492) progress_bar.update(t_idx); [495](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=494) if not r.successful():; --> [496](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=495) raise Exception(""ODE integration error: Try to increase ""; [497](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=496) ""the allowed number of substeps by increasing ""; [498](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=497) ""the nsteps parameter in the Options class.""); [500](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=499) if opt.store_states or expt_callback:; [501](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=500) cdata = get_curr_state_data(r). Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class.; ```. ### Expected Behaviour. The evolution should have reproduced the result given in the tutorial notebook. ### Your Environment. ```shell; QuTiP Version: 4.7.0; Numpy Version: 1.21.1; Scipy Version: 1.7.3; Cython Version: None; Matplotlib Version: 3.5.0; Python Version: 3.9.0; Number of CPUs: 8; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1896
https://github.com/qutip/qutip/issues/1896:6051,Deployability,Install,Installation,6051,"; [248](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=247) if e_ops_dict:. File ~/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py:496, in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); [493](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=492) progress_bar.update(t_idx); [495](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=494) if not r.successful():; --> [496](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=495) raise Exception(""ODE integration error: Try to increase ""; [497](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=496) ""the allowed number of substeps by increasing ""; [498](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=497) ""the nsteps parameter in the Options class.""); [500](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=499) if opt.store_states or expt_callback:; [501](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=500) cdata = get_curr_state_data(r). Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class.; ```. ### Expected Behaviour. The evolution should have reproduced the result given in the tutorial notebook. ### Your Environment. ```shell; QuTiP Version: 4.7.0; Numpy Version: 1.21.1; Scipy Version: 1.7.3; Cython Version: None; Matplotlib Version: 3.5.0; Python Version: 3.9.0; Number of CPUs: 8; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1896
https://github.com/qutip/qutip/issues/1896:276,Integrability,integrat,integration,276,"### Bug Description. I have been running into an issue similar to #806, #1605, and #1623 wherein usage of `mesolve` produces the attached error. It seems as if the majority of the users that reported that error had some suspect input parameters leading to slow convergence in integration; to confirm that this wasn't the case I tried running the [qubit dynamics QuTiP tutorial](https://nbviewer.ipython.org/github/qutip/qutip-notebooks/blob/master/examples/qubit-dynamics.ipynb), which _still_ produced the same error. My system specs are as follows: `21.2.0 Darwin Kernel Version 21.2.0: Sun Nov 28 20:29:10 PST 2021; root:xnu-8019.61.5~1/RELEASE_ARM64_T8101 arm64`. My package installations can be found here: [requirements.txt](https://github.com/qutip/qutip/files/8725390/requirements.txt). These are also listed in the below categories. Any help would be appreciated. ### Code to Reproduce the Bug. ```shell; import matplotlib.pyplot as plt; import numpy as np; from qutip import *; def qubit_integrate(epsilon, delta, g1, g2, solver):. H = epsilon / 2.0 * sigmaz() + delta / 2.0 * sigmax(); ; # collapse operators; c_ops = []. if g1 > 0.0:; c_ops.append(np.sqrt(g1) * sigmam()). if g2 > 0.0:; c_ops.append(np.sqrt(g2) * sigmaz()). e_ops = [sigmax(), sigmay(), sigmaz()]; ; if solver == ""me"":; output = mesolve(H, psi0, tlist, c_ops, e_ops) ; elif solver == ""es"":; output = essolve(H, psi0, tlist, c_ops, e_ops) ; elif solver == ""mc"":; ntraj = 250; output = mcsolve(H, psi0, tlist, ntraj, c_ops, [sigmax(), sigmay(), sigmaz()]) ; else:; raise ValueError(""unknown solver""); ; return output.expect[0], output.expect[1], output.expect[2]; epsilon = 0.0 * 2 * np.pi # cavity frequency; delta = 1.0 * 2 * np.pi # atom frequency; g2 = 0.15; g1 = 0.0. # intial state; psi0 = basis(2,0). tlist = np.linspace(0,5,200). # analytics; sx_analytic = np.zeros(shape(tlist)); sy_analytic = -np.sin(2*np.pi*tlist) * np.exp(-tlist * g2); sz_analytic = np.cos(2*np.pi*tlist) * np.exp(-tlist * g2); sx1, sy1, sz1 = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1896
https://github.com/qutip/qutip/issues/1896:4878,Integrability,integrat,integration,4878,"245](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=244) progress_bar, dims=rho0.dims); [246](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=245) res.num_collapse = len(c_ops); [248](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=247) if e_ops_dict:. File ~/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py:496, in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); [493](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=492) progress_bar.update(t_idx); [495](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=494) if not r.successful():; --> [496](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=495) raise Exception(""ODE integration error: Try to increase ""; [497](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=496) ""the allowed number of substeps by increasing ""; [498](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=497) ""the nsteps parameter in the Options class.""); [500](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=499) if opt.store_states or expt_callback:; [501](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=500) cdata = get_curr_state_data(r). Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class.; ```. ### Expected Behaviour. The evolution should have reproduced the result given in the tutorial notebook. ### Your Environment. ```shell; QuTiP Version: 4.7.0; Numpy Version: 1.21.1; Scipy Version: 1.7.3; Cython Version: None; Matplotlib Version: 3.5.0; Py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1896
https://github.com/qutip/qutip/issues/1896:5530,Integrability,integrat,integration,5530,"; [248](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=247) if e_ops_dict:. File ~/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py:496, in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); [493](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=492) progress_bar.update(t_idx); [495](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=494) if not r.successful():; --> [496](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=495) raise Exception(""ODE integration error: Try to increase ""; [497](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=496) ""the allowed number of substeps by increasing ""; [498](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=497) ""the nsteps parameter in the Options class.""); [500](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=499) if opt.store_states or expt_callback:; [501](file:///Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip/mesolve.py?line=500) cdata = get_curr_state_data(r). Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class.; ```. ### Expected Behaviour. The evolution should have reproduced the result given in the tutorial notebook. ### Your Environment. ```shell; QuTiP Version: 4.7.0; Numpy Version: 1.21.1; Scipy Version: 1.7.3; Cython Version: None; Matplotlib Version: 3.5.0; Python Version: 3.9.0; Number of CPUs: 8; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /Users/lzawbrito/miniforge3/envs/pulsee/lib/python3.9/site-packages/qutip; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1896
https://github.com/qutip/qutip/issues/1898:25,Deployability,Update,Update,25,"### Problem Description. Update user guide content of documentation to QuTiP 5, which contains many changes that may not be captured by the latest versions of the documentation, e.g., the content in https://qutip.org/docs/latest/guide/guide.html. . ### Proposed Solution. - Read the documentation files on the QuTiP 5 branch, at https://github.com/qutip/qutip/tree/dev.major; - Build locally the documentation on the branch and make sure it builds; - Read the documentation files and check that they match with qutip-5 branch code, so that the documentation matches the actual existing code, similarly to what happens for QuTiP 4.7, https://qutip.org/docs/latest/guide/guide.html and locally test ; - Make changes where needed. . ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1898
https://github.com/qutip/qutip/issues/1898:692,Testability,test,test,692,"### Problem Description. Update user guide content of documentation to QuTiP 5, which contains many changes that may not be captured by the latest versions of the documentation, e.g., the content in https://qutip.org/docs/latest/guide/guide.html. . ### Proposed Solution. - Read the documentation files on the QuTiP 5 branch, at https://github.com/qutip/qutip/tree/dev.major; - Build locally the documentation on the branch and make sure it builds; - Read the documentation files and check that they match with qutip-5 branch code, so that the documentation matches the actual existing code, similarly to what happens for QuTiP 4.7, https://qutip.org/docs/latest/guide/guide.html and locally test ; - Make changes where needed. . ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1898
https://github.com/qutip/qutip/issues/1898:37,Usability,guid,guide,37,"### Problem Description. Update user guide content of documentation to QuTiP 5, which contains many changes that may not be captured by the latest versions of the documentation, e.g., the content in https://qutip.org/docs/latest/guide/guide.html. . ### Proposed Solution. - Read the documentation files on the QuTiP 5 branch, at https://github.com/qutip/qutip/tree/dev.major; - Build locally the documentation on the branch and make sure it builds; - Read the documentation files and check that they match with qutip-5 branch code, so that the documentation matches the actual existing code, similarly to what happens for QuTiP 4.7, https://qutip.org/docs/latest/guide/guide.html and locally test ; - Make changes where needed. . ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1898
https://github.com/qutip/qutip/issues/1898:229,Usability,guid,guide,229,"### Problem Description. Update user guide content of documentation to QuTiP 5, which contains many changes that may not be captured by the latest versions of the documentation, e.g., the content in https://qutip.org/docs/latest/guide/guide.html. . ### Proposed Solution. - Read the documentation files on the QuTiP 5 branch, at https://github.com/qutip/qutip/tree/dev.major; - Build locally the documentation on the branch and make sure it builds; - Read the documentation files and check that they match with qutip-5 branch code, so that the documentation matches the actual existing code, similarly to what happens for QuTiP 4.7, https://qutip.org/docs/latest/guide/guide.html and locally test ; - Make changes where needed. . ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1898
https://github.com/qutip/qutip/issues/1898:235,Usability,guid,guide,235,"### Problem Description. Update user guide content of documentation to QuTiP 5, which contains many changes that may not be captured by the latest versions of the documentation, e.g., the content in https://qutip.org/docs/latest/guide/guide.html. . ### Proposed Solution. - Read the documentation files on the QuTiP 5 branch, at https://github.com/qutip/qutip/tree/dev.major; - Build locally the documentation on the branch and make sure it builds; - Read the documentation files and check that they match with qutip-5 branch code, so that the documentation matches the actual existing code, similarly to what happens for QuTiP 4.7, https://qutip.org/docs/latest/guide/guide.html and locally test ; - Make changes where needed. . ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1898
https://github.com/qutip/qutip/issues/1898:663,Usability,guid,guide,663,"### Problem Description. Update user guide content of documentation to QuTiP 5, which contains many changes that may not be captured by the latest versions of the documentation, e.g., the content in https://qutip.org/docs/latest/guide/guide.html. . ### Proposed Solution. - Read the documentation files on the QuTiP 5 branch, at https://github.com/qutip/qutip/tree/dev.major; - Build locally the documentation on the branch and make sure it builds; - Read the documentation files and check that they match with qutip-5 branch code, so that the documentation matches the actual existing code, similarly to what happens for QuTiP 4.7, https://qutip.org/docs/latest/guide/guide.html and locally test ; - Make changes where needed. . ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1898
https://github.com/qutip/qutip/issues/1898:669,Usability,guid,guide,669,"### Problem Description. Update user guide content of documentation to QuTiP 5, which contains many changes that may not be captured by the latest versions of the documentation, e.g., the content in https://qutip.org/docs/latest/guide/guide.html. . ### Proposed Solution. - Read the documentation files on the QuTiP 5 branch, at https://github.com/qutip/qutip/tree/dev.major; - Build locally the documentation on the branch and make sure it builds; - Read the documentation files and check that they match with qutip-5 branch code, so that the documentation matches the actual existing code, similarly to what happens for QuTiP 4.7, https://qutip.org/docs/latest/guide/guide.html and locally test ; - Make changes where needed. . ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1898
https://github.com/qutip/qutip/issues/1899:2467,Availability,error,error,2467,", qeye(2)) + tensor(qeye(2), sigmaz()); 5 H = H0; ----> 6 prop = propagator(H, 1.0, c_ops). /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/propagator.py in propagator(H, t, c_op_list, args, options, unitary_mode, parallel, progress_bar, _safe_mode, **kwargs); 240 shape=(N, N), dtype=complex)); 241 output = mesolve(H, rho0, tlist, c_op_list, [], args, options,; --> 242 _safe_mode=False); 243 for k, t in enumerate(tlist):; 244 u[:, n, k] = mat2vec(output.states[k].full()).T. /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 263 raise Exception(""Invalid H type""); 264 ; --> 265 func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); 266 ; 267 if _safe_mode:. /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/mesolve.py in _qobjevo_set(HS, rho0, args, e_ops, opt); 349 # Should be caught earlier in mesolve.; 350 raise ValueError(""rho0 must be a ket, density matrix or superoperator""); --> 351 _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); 352 return func, (); 353 . /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/mesolve.py in _test_liouvillian_dimensions(L_dims, rho_dims); 332 raise ValueError("""".join([; 333 ""incompatible Liouvillian and state dimensions: "",; --> 334 str(L_dims), "" and "", str(rho_dims),; 335 ])); 336 . ValueError: incompatible Liouvillian and state dimensions: [[[2, 2], [2, 2]], [[2, 2], [2, 2]]] and [[4], [4]]; ```. ### Expected Behaviour. In my given input, vectorization of `rho` is not taken into account. However the documentation could use clarification how input must be provided to avoid this error. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.21.2; Scipy Version: 1.7.3; Cython Version: 0.29.25; Matplotlib Version: 3.5.0; Python Version: 3.7.11; Number of CPUs: 6; BLAS Info: INTEL MKL; OPENMP Installed: False; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1899
https://github.com/qutip/qutip/issues/1899:2697,Deployability,Install,Installed,2697,", qeye(2)) + tensor(qeye(2), sigmaz()); 5 H = H0; ----> 6 prop = propagator(H, 1.0, c_ops). /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/propagator.py in propagator(H, t, c_op_list, args, options, unitary_mode, parallel, progress_bar, _safe_mode, **kwargs); 240 shape=(N, N), dtype=complex)); 241 output = mesolve(H, rho0, tlist, c_op_list, [], args, options,; --> 242 _safe_mode=False); 243 for k, t in enumerate(tlist):; 244 u[:, n, k] = mat2vec(output.states[k].full()).T. /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 263 raise Exception(""Invalid H type""); 264 ; --> 265 func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); 266 ; 267 if _safe_mode:. /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/mesolve.py in _qobjevo_set(HS, rho0, args, e_ops, opt); 349 # Should be caught earlier in mesolve.; 350 raise ValueError(""rho0 must be a ket, density matrix or superoperator""); --> 351 _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); 352 return func, (); 353 . /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/mesolve.py in _test_liouvillian_dimensions(L_dims, rho_dims); 332 raise ValueError("""".join([; 333 ""incompatible Liouvillian and state dimensions: "",; --> 334 str(L_dims), "" and "", str(rho_dims),; 335 ])); 336 . ValueError: incompatible Liouvillian and state dimensions: [[[2, 2], [2, 2]], [[2, 2], [2, 2]]] and [[4], [4]]; ```. ### Expected Behaviour. In my given input, vectorization of `rho` is not taken into account. However the documentation could use clarification how input must be provided to avoid this error. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.21.2; Scipy Version: 1.7.3; Cython Version: 0.29.25; Matplotlib Version: 3.5.0; Python Version: 3.7.11; Number of CPUs: 6; BLAS Info: INTEL MKL; OPENMP Installed: False; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1899
https://github.com/qutip/qutip/issues/1899:2456,Safety,avoid,avoid,2456,", qeye(2)) + tensor(qeye(2), sigmaz()); 5 H = H0; ----> 6 prop = propagator(H, 1.0, c_ops). /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/propagator.py in propagator(H, t, c_op_list, args, options, unitary_mode, parallel, progress_bar, _safe_mode, **kwargs); 240 shape=(N, N), dtype=complex)); 241 output = mesolve(H, rho0, tlist, c_op_list, [], args, options,; --> 242 _safe_mode=False); 243 for k, t in enumerate(tlist):; 244 u[:, n, k] = mat2vec(output.states[k].full()).T. /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 263 raise Exception(""Invalid H type""); 264 ; --> 265 func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); 266 ; 267 if _safe_mode:. /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/mesolve.py in _qobjevo_set(HS, rho0, args, e_ops, opt); 349 # Should be caught earlier in mesolve.; 350 raise ValueError(""rho0 must be a ket, density matrix or superoperator""); --> 351 _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); 352 return func, (); 353 . /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/mesolve.py in _test_liouvillian_dimensions(L_dims, rho_dims); 332 raise ValueError("""".join([; 333 ""incompatible Liouvillian and state dimensions: "",; --> 334 str(L_dims), "" and "", str(rho_dims),; 335 ])); 336 . ValueError: incompatible Liouvillian and state dimensions: [[[2, 2], [2, 2]], [[2, 2], [2, 2]]] and [[4], [4]]; ```. ### Expected Behaviour. In my given input, vectorization of `rho` is not taken into account. However the documentation could use clarification how input must be provided to avoid this error. ### Your Environment. ```shell; QuTiP Version: 4.6.2; Numpy Version: 1.21.2; Scipy Version: 1.7.3; Cython Version: 0.29.25; Matplotlib Version: 3.5.0; Python Version: 3.7.11; Number of CPUs: 6; BLAS Info: INTEL MKL; OPENMP Installed: False; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1899
https://github.com/qutip/qutip/issues/1899:130,Usability,clear,clear,130,"### Bug Description. The documentation indicates that there may be some subtlety about `rho` being vectorized. However, it is not clear how to then handle input with tensor product structure such that `propagator` doesn't fail with a `ValueError`. ### Code to Reproduce the Bug. ```shell; from qutip import sigmaz, qeye, propagator, tensor, sigmam. c_ops = [tensor(sigmam(), qeye(2))]; H0 = tensor(sigmaz(), qeye(2)) + tensor(qeye(2), sigmaz()); H = H0; prop = propagator(H, 1.0, c_ops); ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; ValueError Traceback (most recent call last); /var/folders/k_/98g3h5x154q9q5bnmlxj2zwr0000gr/T/ipykernel_59733/3250178117.py in <module>; 4 H0 = tensor(sigmaz(), qeye(2)) + tensor(qeye(2), sigmaz()); 5 H = H0; ----> 6 prop = propagator(H, 1.0, c_ops). /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/propagator.py in propagator(H, t, c_op_list, args, options, unitary_mode, parallel, progress_bar, _safe_mode, **kwargs); 240 shape=(N, N), dtype=complex)); 241 output = mesolve(H, rho0, tlist, c_op_list, [], args, options,; --> 242 _safe_mode=False); 243 for k, t in enumerate(tlist):; 244 u[:, n, k] = mat2vec(output.states[k].full()).T. /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 263 raise Exception(""Invalid H type""); 264 ; --> 265 func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); 266 ; 267 if _safe_mode:. /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/mesolve.py in _qobjevo_set(HS, rho0, args, e_ops, opt); 349 # Should be caught earlier in mesolve.; 350 raise ValueError(""rho0 must be a ket, density matrix or superoperator""); --> 351 _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); 352 return func, (); 353 . /opt/anaconda3/envs/scqubits_v2/lib/python3.7/site-packages/qutip/mesolve.py in _test_liouvillian_dimensions(L_d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1899
https://github.com/qutip/qutip/issues/1900:138,Modifiability,evolve,evolved,138,"I have a simple task of maximizing $\text{Tr}(O \rho(T))$ using GRAPE where $O$ is a given fixed Hermitian matrix and $\rho(T)$ is a time-evolved quantum state under given Hamiltonian and time interval $[0,T]$. You can also think about this as maximizing trace overlap between two quantum states, if we set $O$ to be another density matrix. I've used all three different fidelitycomputers, but apparently all of them failed to optimize the cost function properly. I'd appreciate it much if anyone can help me understanding what I've been doing wrong! I attached a simple example code below with explanations:. 1. First, I initialized setups such as defining Hamiltonian, initial state, and target observable $O$. Then by creating `create_pulse_optimizer` as follows, I defined/initialized the dynamics as `dyn` with some randomly chosen initial amps. I tried all possible choices of `fid_type`. (see code below). <img width=""977"" alt=""grape_example1"" src=""https://user-images.githubusercontent.com/55151494/170385354-f7efe678-11fc-47de-afa7-ac77359bb5e0.png"">. 2. I then ran the optimization using GRAPE and reported its results. As shown below and in particular the very last line of the figure, the cost function I wanted to estimate is just $0$, whereas my task wants to maximize $\text{Tr}(O\rho)$. While testing several things, I changed $O$ to a ket vector (e.g. $|00>$) and it worked very well. So in principle, I thought the code should work properly as we can think of $O$ being a quantum state (e.g. $|00><00|$). . <img width=""1013"" alt=""grape_2"" src=""https://user-images.githubusercontent.com/55151494/170385858-eeddb7fb-f821-4057-8503-ee2a52e27805.png"">; <img width=""968"" alt=""grape_3"" src=""https://user-images.githubusercontent.com/55151494/170385868-7816a7ee-cc90-4dba-83dd-3304cd2404d8.png"">. I'd be great if someone points out what I'm missing here. One of my guesses of why this is happening is perhaps because we evolve a ket statevector while the target observable is in full matrix",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1900
https://github.com/qutip/qutip/issues/1900:1931,Modifiability,evolve,evolve,1931," a given fixed Hermitian matrix and $\rho(T)$ is a time-evolved quantum state under given Hamiltonian and time interval $[0,T]$. You can also think about this as maximizing trace overlap between two quantum states, if we set $O$ to be another density matrix. I've used all three different fidelitycomputers, but apparently all of them failed to optimize the cost function properly. I'd appreciate it much if anyone can help me understanding what I've been doing wrong! I attached a simple example code below with explanations:. 1. First, I initialized setups such as defining Hamiltonian, initial state, and target observable $O$. Then by creating `create_pulse_optimizer` as follows, I defined/initialized the dynamics as `dyn` with some randomly chosen initial amps. I tried all possible choices of `fid_type`. (see code below). <img width=""977"" alt=""grape_example1"" src=""https://user-images.githubusercontent.com/55151494/170385354-f7efe678-11fc-47de-afa7-ac77359bb5e0.png"">. 2. I then ran the optimization using GRAPE and reported its results. As shown below and in particular the very last line of the figure, the cost function I wanted to estimate is just $0$, whereas my task wants to maximize $\text{Tr}(O\rho)$. While testing several things, I changed $O$ to a ket vector (e.g. $|00>$) and it worked very well. So in principle, I thought the code should work properly as we can think of $O$ being a quantum state (e.g. $|00><00|$). . <img width=""1013"" alt=""grape_2"" src=""https://user-images.githubusercontent.com/55151494/170385858-eeddb7fb-f821-4057-8503-ee2a52e27805.png"">; <img width=""968"" alt=""grape_3"" src=""https://user-images.githubusercontent.com/55151494/170385868-7816a7ee-cc90-4dba-83dd-3304cd2404d8.png"">. I'd be great if someone points out what I'm missing here. One of my guesses of why this is happening is perhaps because we evolve a ket statevector while the target observable is in full matrix form. If so though, I'm not sure how to cure this problem. Thank you in advance!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1900
https://github.com/qutip/qutip/issues/1900:427,Performance,optimiz,optimize,427,"I have a simple task of maximizing $\text{Tr}(O \rho(T))$ using GRAPE where $O$ is a given fixed Hermitian matrix and $\rho(T)$ is a time-evolved quantum state under given Hamiltonian and time interval $[0,T]$. You can also think about this as maximizing trace overlap between two quantum states, if we set $O$ to be another density matrix. I've used all three different fidelitycomputers, but apparently all of them failed to optimize the cost function properly. I'd appreciate it much if anyone can help me understanding what I've been doing wrong! I attached a simple example code below with explanations:. 1. First, I initialized setups such as defining Hamiltonian, initial state, and target observable $O$. Then by creating `create_pulse_optimizer` as follows, I defined/initialized the dynamics as `dyn` with some randomly chosen initial amps. I tried all possible choices of `fid_type`. (see code below). <img width=""977"" alt=""grape_example1"" src=""https://user-images.githubusercontent.com/55151494/170385354-f7efe678-11fc-47de-afa7-ac77359bb5e0.png"">. 2. I then ran the optimization using GRAPE and reported its results. As shown below and in particular the very last line of the figure, the cost function I wanted to estimate is just $0$, whereas my task wants to maximize $\text{Tr}(O\rho)$. While testing several things, I changed $O$ to a ket vector (e.g. $|00>$) and it worked very well. So in principle, I thought the code should work properly as we can think of $O$ being a quantum state (e.g. $|00><00|$). . <img width=""1013"" alt=""grape_2"" src=""https://user-images.githubusercontent.com/55151494/170385858-eeddb7fb-f821-4057-8503-ee2a52e27805.png"">; <img width=""968"" alt=""grape_3"" src=""https://user-images.githubusercontent.com/55151494/170385868-7816a7ee-cc90-4dba-83dd-3304cd2404d8.png"">. I'd be great if someone points out what I'm missing here. One of my guesses of why this is happening is perhaps because we evolve a ket statevector while the target observable is in full matrix",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1900
https://github.com/qutip/qutip/issues/1900:1079,Performance,optimiz,optimization,1079," a given fixed Hermitian matrix and $\rho(T)$ is a time-evolved quantum state under given Hamiltonian and time interval $[0,T]$. You can also think about this as maximizing trace overlap between two quantum states, if we set $O$ to be another density matrix. I've used all three different fidelitycomputers, but apparently all of them failed to optimize the cost function properly. I'd appreciate it much if anyone can help me understanding what I've been doing wrong! I attached a simple example code below with explanations:. 1. First, I initialized setups such as defining Hamiltonian, initial state, and target observable $O$. Then by creating `create_pulse_optimizer` as follows, I defined/initialized the dynamics as `dyn` with some randomly chosen initial amps. I tried all possible choices of `fid_type`. (see code below). <img width=""977"" alt=""grape_example1"" src=""https://user-images.githubusercontent.com/55151494/170385354-f7efe678-11fc-47de-afa7-ac77359bb5e0.png"">. 2. I then ran the optimization using GRAPE and reported its results. As shown below and in particular the very last line of the figure, the cost function I wanted to estimate is just $0$, whereas my task wants to maximize $\text{Tr}(O\rho)$. While testing several things, I changed $O$ to a ket vector (e.g. $|00>$) and it worked very well. So in principle, I thought the code should work properly as we can think of $O$ being a quantum state (e.g. $|00><00|$). . <img width=""1013"" alt=""grape_2"" src=""https://user-images.githubusercontent.com/55151494/170385858-eeddb7fb-f821-4057-8503-ee2a52e27805.png"">; <img width=""968"" alt=""grape_3"" src=""https://user-images.githubusercontent.com/55151494/170385868-7816a7ee-cc90-4dba-83dd-3304cd2404d8.png"">. I'd be great if someone points out what I'm missing here. One of my guesses of why this is happening is perhaps because we evolve a ket statevector while the target observable is in full matrix form. If so though, I'm not sure how to cure this problem. Thank you in advance!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1900
https://github.com/qutip/qutip/issues/1900:1309,Testability,test,testing,1309," a given fixed Hermitian matrix and $\rho(T)$ is a time-evolved quantum state under given Hamiltonian and time interval $[0,T]$. You can also think about this as maximizing trace overlap between two quantum states, if we set $O$ to be another density matrix. I've used all three different fidelitycomputers, but apparently all of them failed to optimize the cost function properly. I'd appreciate it much if anyone can help me understanding what I've been doing wrong! I attached a simple example code below with explanations:. 1. First, I initialized setups such as defining Hamiltonian, initial state, and target observable $O$. Then by creating `create_pulse_optimizer` as follows, I defined/initialized the dynamics as `dyn` with some randomly chosen initial amps. I tried all possible choices of `fid_type`. (see code below). <img width=""977"" alt=""grape_example1"" src=""https://user-images.githubusercontent.com/55151494/170385354-f7efe678-11fc-47de-afa7-ac77359bb5e0.png"">. 2. I then ran the optimization using GRAPE and reported its results. As shown below and in particular the very last line of the figure, the cost function I wanted to estimate is just $0$, whereas my task wants to maximize $\text{Tr}(O\rho)$. While testing several things, I changed $O$ to a ket vector (e.g. $|00>$) and it worked very well. So in principle, I thought the code should work properly as we can think of $O$ being a quantum state (e.g. $|00><00|$). . <img width=""1013"" alt=""grape_2"" src=""https://user-images.githubusercontent.com/55151494/170385858-eeddb7fb-f821-4057-8503-ee2a52e27805.png"">; <img width=""968"" alt=""grape_3"" src=""https://user-images.githubusercontent.com/55151494/170385868-7816a7ee-cc90-4dba-83dd-3304cd2404d8.png"">. I'd be great if someone points out what I'm missing here. One of my guesses of why this is happening is perhaps because we evolve a ket statevector while the target observable is in full matrix form. If so though, I'm not sure how to cure this problem. Thank you in advance!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/issues/1900
