id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.cpp:8,Testability,Benchmark,BenchmarkResult,8,"//===-- BenchmarkResult.cpp -------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.cpp:2,Integrability,Wrap,WrapColumn,2,/*WrapColumn*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:8,Testability,Benchmark,BenchmarkResult,8,"//===-- BenchmarkResult.h ---------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines classes to represent measurements and serialize/deserialize them to; // Yaml.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:44,Security,access,access,44,// The memory mappings that the snippet can access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:13,Deployability,configurat,configuration,13,"// An opaque configuration, that can be used to separate several benchmarks of; // the same instruction under different configurations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:120,Deployability,configurat,configurations,120,"// An opaque configuration, that can be used to separate several benchmarks of; // the same instruction under different configurations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:13,Modifiability,config,configuration,13,"// An opaque configuration, that can be used to separate several benchmarks of; // the same instruction under different configurations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:120,Modifiability,config,configurations,120,"// An opaque configuration, that can be used to separate several benchmarks of; // the same instruction under different configurations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:65,Testability,benchmark,benchmarks,65,"// An opaque configuration, that can be used to separate several benchmarks of; // the same instruction under different configurations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:42,Performance,load,loaded,42,// The address that the snippet should be loaded in at if the execution mode; // being used supports it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:34,Testability,Benchmark,BenchmarkMeasure,34,// A helper to create an unscaled BenchmarkMeasure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:17,Security,validat,validation,17,// These are the validation counter values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:32,Testability,benchmark,benchmark,32,// The result of an instruction benchmark.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:30,Testability,benchmark,benchmarked,30,// Which instruction is being benchmarked here?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:41,Testability,benchmark,benchmarks,41,"// Given a set of serialized instruction benchmarks, returns the set of; // triples and CPUs that appear in the list of benchmarks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:120,Testability,benchmark,benchmarks,120,"// Given a set of serialized instruction benchmarks, returns the set of; // triples and CPUs that appear in the list of benchmarks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:108,Testability,Benchmark,Benchmark,108,//------------------------------------------------------------------------------; // Utilities to work with Benchmark measures.; // A class that measures stats over benchmark measures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:165,Testability,benchmark,benchmark,165,//------------------------------------------------------------------------------; // Utilities to work with Benchmark measures.; // A class that measures stats over benchmark measures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:8,Testability,Benchmark,BenchmarkRunner,8,"//===-- BenchmarkRunner.cpp -------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:122,Availability,error,error,122,"// The exit code of the process on windows is not meaningful as a; // signal, so simply pass in -1 as the signal into the error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:81,Usability,simpl,simply,81,"// The exit code of the process on windows is not meaningful as a; // signal, so simply pass in -1 as the signal into the error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:430,Availability,error,errors,430,"// The following class implements a function executor that executes the; // benchmark code within a subprocess rather than within the main llvm-exegesis; // process. This allows for much more control over the execution context of the; // snippet, particularly with regard to memory. This class performs all the; // necessary functions to create the subprocess, execute the snippet in the; // subprocess, and report results/handle errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:294,Performance,perform,performs,294,"// The following class implements a function executor that executes the; // benchmark code within a subprocess rather than within the main llvm-exegesis; // process. This allows for much more control over the execution context of the; // snippet, particularly with regard to memory. This class performs all the; // necessary functions to create the subprocess, execute the snippet in the; // subprocess, and report results/handle errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:76,Testability,benchmark,benchmark,76,"// The following class implements a function executor that executes the; // benchmark code within a subprocess rather than within the main llvm-exegesis; // process. This allows for much more control over the execution context of the; // snippet, particularly with regard to memory. This class performs all the; // necessary functions to create the subprocess, execute the snippet in the; // subprocess, and report results/handle errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:453,Availability,failure,failures,453,"// Make sure to attach to the process (and wait for the sigstop to be; // delivered and for the process to continue) before we write to the counter; // file descriptor. Attaching to the process before writing to the socket; // ensures that the subprocess at most has blocked on the read call. If we; // attach afterwards, the subprocess might exit before we get to the attach; // call due to effects like scheduler contention, introducing transient; // failures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:405,Energy Efficiency,schedul,scheduler,405,"// Make sure to attach to the process (and wait for the sigstop to be; // delivered and for the process to continue) before we write to the counter; // file descriptor. Attaching to the process before writing to the socket; // ensures that the subprocess at most has blocked on the read call. If we; // attach afterwards, the subprocess might exit before we get to the attach; // call due to effects like scheduler contention, introducing transient; // failures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:6,Availability,error,error,6,"// An error was encountered running the snippet, process it",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:96,Availability,failure,failure,96,"// Disable core dumps in the child process as otherwise everytime we; // encounter an execution failure like a segmentation fault, we will create; // a core dump. We report the information directly rather than require the; // user inspect a core dump.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:124,Availability,fault,fault,124,"// Disable core dumps in the child process as otherwise everytime we; // encounter an execution failure like a segmentation fault, we will create; // a core dump. We report the information directly rather than require the; // user inspect a core dump.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:35,Testability,benchmark,benchmarking,35,// The following occurs within the benchmarking subprocess,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:214,Safety,safe,safely,214,// Glibc versions greater than 2.35 automatically call rseq during; // initialization. Unmapping the region that glibc sets up for this causes; // segfaults in the program Unregister the rseq region so that we can safely; // unmap it later,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:96,Security,validat,validate,96,// GLIBC_INITS_RSEQ; // The frontend that generates the memory annotation structures should; // validate that the address to map the snippet in at is a multiple of; // the page size. Assert that this is true here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:183,Testability,Assert,Assert,183,// GLIBC_INITS_RSEQ; // The frontend that generates the memory annotation structures should; // validate that the address to map the snippet in at is a multiple of; // the page size. Assert that this is true here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:135,Usability,clear,clearly,135,// Assemble at least kMinInstructionsForSnippet instructions by repeating; // the snippet for debug/analysis. This is so that the user clearly; // understands that the inside instructions are repeated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h:509,Performance,latency,latency,509,"//===-- BenchmarkRunner.h ---------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the abstract BenchmarkRunner class for measuring a certain execution; /// property of instructions (e.g. latency).; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h:8,Testability,Benchmark,BenchmarkRunner,8,"//===-- BenchmarkRunner.h ---------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the abstract BenchmarkRunner class for measuring a certain execution; /// property of instructions (e.g. latency).; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h:417,Testability,Benchmark,BenchmarkRunner,417,"//===-- BenchmarkRunner.h ---------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the abstract BenchmarkRunner class for measuring a certain execution; /// property of instructions (e.g. latency).; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h:23,Testability,benchmark,benchmark,23,// Common code for all benchmark modes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h:64,Modifiability,sandbox,sandboxed,64,// A helper to measure counters while executing a function in a sandboxed; // context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h:64,Testability,sandbox,sandboxed,64,// A helper to measure counters while executing a function in a sandboxed; // context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:577,Usability,simpl,simple,577,"// The clustering problem has the following characteristics:; // (A) - Low dimension (dimensions are typically proc resource units,; // typically < 10).; // (B) - Number of points : ~thousands (points are measurements of an MCInst); // (C) - Number of clusters: ~tens.; // (D) - The number of clusters is not known /a priory/.; // (E) - The amount of noise is relatively small.; // The problem is rather small. In terms of algorithms, (D) disqualifies; // k-means and makes algorithms such as DBSCAN[1] or OPTICS[2] more applicable.; //; // We've used DBSCAN here because it's simple to implement. This is a pretty; // straightforward and inefficient implementation of the pseudocode in [2].; //; // [1] https://en.wikipedia.org/wiki/DBSCAN; // [2] https://en.wikipedia.org/wiki/OPTICS_algorithm; // Finds the points at distance less than sqrt(EpsilonSquared) of Q (not; // including Q).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:3,Availability,Error,Error,3,// Error point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:3,Availability,Error,Error,3,// Error point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:3,Availability,Error,Error,3,// Error point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:16,Availability,error,error,16,// Pretend that error point is a neighbour.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:24,Safety,avoid,avoid,24,// Persistent buffer to avoid allocs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:7,Modifiability,extend,extend,7,// And extend to the neighbors of Q if the region is dense enough.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:3,Testability,assert,assert,3,"// assert(Neighbors.capacity() == (Points_.size() - 1));; // ^ True, but it is not quaranteed to be true in all the cases.; // Add noisy points to noise cluster.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:94,Testability,benchmark,benchmarks,94,"// Given an instruction Opcode, which sched class id's are represented,; // and which are the benchmarks for each sched class?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:335,Integrability,depend,depending,335,"// Given an instruction Opcode, we can make benchmarks (measurements) of the; // instruction characteristics/performance. Then, to facilitate further analysis; // we group the benchmarks with *similar* characteristics into clusters.; // Now, this is all not entirely deterministic. Some instructions have variable; // characteristics, depending on their arguments. And thus, if we do several; // benchmarks of the same instruction Opcode, we may end up with *different*; // performance characteristics measurements. And when we then do clustering,; // these several benchmarks of the same instruction Opcode may end up being; // clustered into *different* clusters. This is not great for further analysis.; // We shall find every opcode with benchmarks not in just one cluster, and move; // *all* the benchmarks of said Opcode into one new unstable cluster per Opcode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:305,Modifiability,variab,variable,305,"// Given an instruction Opcode, we can make benchmarks (measurements) of the; // instruction characteristics/performance. Then, to facilitate further analysis; // we group the benchmarks with *similar* characteristics into clusters.; // Now, this is all not entirely deterministic. Some instructions have variable; // characteristics, depending on their arguments. And thus, if we do several; // benchmarks of the same instruction Opcode, we may end up with *different*; // performance characteristics measurements. And when we then do clustering,; // these several benchmarks of the same instruction Opcode may end up being; // clustered into *different* clusters. This is not great for further analysis.; // We shall find every opcode with benchmarks not in just one cluster, and move; // *all* the benchmarks of said Opcode into one new unstable cluster per Opcode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:109,Performance,perform,performance,109,"// Given an instruction Opcode, we can make benchmarks (measurements) of the; // instruction characteristics/performance. Then, to facilitate further analysis; // we group the benchmarks with *similar* characteristics into clusters.; // Now, this is all not entirely deterministic. Some instructions have variable; // characteristics, depending on their arguments. And thus, if we do several; // benchmarks of the same instruction Opcode, we may end up with *different*; // performance characteristics measurements. And when we then do clustering,; // these several benchmarks of the same instruction Opcode may end up being; // clustered into *different* clusters. This is not great for further analysis.; // We shall find every opcode with benchmarks not in just one cluster, and move; // *all* the benchmarks of said Opcode into one new unstable cluster per Opcode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:474,Performance,perform,performance,474,"// Given an instruction Opcode, we can make benchmarks (measurements) of the; // instruction characteristics/performance. Then, to facilitate further analysis; // we group the benchmarks with *similar* characteristics into clusters.; // Now, this is all not entirely deterministic. Some instructions have variable; // characteristics, depending on their arguments. And thus, if we do several; // benchmarks of the same instruction Opcode, we may end up with *different*; // performance characteristics measurements. And when we then do clustering,; // these several benchmarks of the same instruction Opcode may end up being; // clustered into *different* clusters. This is not great for further analysis.; // We shall find every opcode with benchmarks not in just one cluster, and move; // *all* the benchmarks of said Opcode into one new unstable cluster per Opcode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:44,Testability,benchmark,benchmarks,44,"// Given an instruction Opcode, we can make benchmarks (measurements) of the; // instruction characteristics/performance. Then, to facilitate further analysis; // we group the benchmarks with *similar* characteristics into clusters.; // Now, this is all not entirely deterministic. Some instructions have variable; // characteristics, depending on their arguments. And thus, if we do several; // benchmarks of the same instruction Opcode, we may end up with *different*; // performance characteristics measurements. And when we then do clustering,; // these several benchmarks of the same instruction Opcode may end up being; // clustered into *different* clusters. This is not great for further analysis.; // We shall find every opcode with benchmarks not in just one cluster, and move; // *all* the benchmarks of said Opcode into one new unstable cluster per Opcode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:176,Testability,benchmark,benchmarks,176,"// Given an instruction Opcode, we can make benchmarks (measurements) of the; // instruction characteristics/performance. Then, to facilitate further analysis; // we group the benchmarks with *similar* characteristics into clusters.; // Now, this is all not entirely deterministic. Some instructions have variable; // characteristics, depending on their arguments. And thus, if we do several; // benchmarks of the same instruction Opcode, we may end up with *different*; // performance characteristics measurements. And when we then do clustering,; // these several benchmarks of the same instruction Opcode may end up being; // clustered into *different* clusters. This is not great for further analysis.; // We shall find every opcode with benchmarks not in just one cluster, and move; // *all* the benchmarks of said Opcode into one new unstable cluster per Opcode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:396,Testability,benchmark,benchmarks,396,"// Given an instruction Opcode, we can make benchmarks (measurements) of the; // instruction characteristics/performance. Then, to facilitate further analysis; // we group the benchmarks with *similar* characteristics into clusters.; // Now, this is all not entirely deterministic. Some instructions have variable; // characteristics, depending on their arguments. And thus, if we do several; // benchmarks of the same instruction Opcode, we may end up with *different*; // performance characteristics measurements. And when we then do clustering,; // these several benchmarks of the same instruction Opcode may end up being; // clustered into *different* clusters. This is not great for further analysis.; // We shall find every opcode with benchmarks not in just one cluster, and move; // *all* the benchmarks of said Opcode into one new unstable cluster per Opcode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:566,Testability,benchmark,benchmarks,566,"// Given an instruction Opcode, we can make benchmarks (measurements) of the; // instruction characteristics/performance. Then, to facilitate further analysis; // we group the benchmarks with *similar* characteristics into clusters.; // Now, this is all not entirely deterministic. Some instructions have variable; // characteristics, depending on their arguments. And thus, if we do several; // benchmarks of the same instruction Opcode, we may end up with *different*; // performance characteristics measurements. And when we then do clustering,; // these several benchmarks of the same instruction Opcode may end up being; // clustered into *different* clusters. This is not great for further analysis.; // We shall find every opcode with benchmarks not in just one cluster, and move; // *all* the benchmarks of said Opcode into one new unstable cluster per Opcode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:742,Testability,benchmark,benchmarks,742,"// Given an instruction Opcode, we can make benchmarks (measurements) of the; // instruction characteristics/performance. Then, to facilitate further analysis; // we group the benchmarks with *similar* characteristics into clusters.; // Now, this is all not entirely deterministic. Some instructions have variable; // characteristics, depending on their arguments. And thus, if we do several; // benchmarks of the same instruction Opcode, we may end up with *different*; // performance characteristics measurements. And when we then do clustering,; // these several benchmarks of the same instruction Opcode may end up being; // clustered into *different* clusters. This is not great for further analysis.; // We shall find every opcode with benchmarks not in just one cluster, and move; // *all* the benchmarks of said Opcode into one new unstable cluster per Opcode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:801,Testability,benchmark,benchmarks,801,"// Given an instruction Opcode, we can make benchmarks (measurements) of the; // instruction characteristics/performance. Then, to facilitate further analysis; // we group the benchmarks with *similar* characteristics into clusters.; // Now, this is all not entirely deterministic. Some instructions have variable; // characteristics, depending on their arguments. And thus, if we do several; // benchmarks of the same instruction Opcode, we may end up with *different*; // performance characteristics measurements. And when we then do clustering,; // these several benchmarks of the same instruction Opcode may end up being; // clustered into *different* clusters. This is not great for further analysis.; // We shall find every opcode with benchmarks not in just one cluster, and move; // *all* the benchmarks of said Opcode into one new unstable cluster per Opcode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:35,Modifiability,Config,Config,35,"// Given an instruction Opcode and Config, in which clusters do benchmarks of; // this instruction lie? Normally, they all should be in the same cluster.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:64,Testability,benchmark,benchmarks,64,"// Given an instruction Opcode and Config, in which clusters do benchmarks of; // this instruction lie? Normally, they all should be in the same cluster.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:60,Testability,benchmark,benchmarks,60,// Go through every cluster which we recorded as containing benchmarks; // of this UnstableOpcode. NOTE: we only recorded valid clusters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.h:417,Testability,benchmark,benchmark,417,"//===-- Clustering.h --------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Utilities to compute benchmark result clusters.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.h:14,Testability,benchmark,benchmarks,14,// Indices of benchmarks within the cluster.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h:64,Modifiability,Variab,Variables,64,// A template for an Instruction holding values for each of its Variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h:96,Modifiability,variab,variable,96,// Builds an MCInst from this InstructionTemplate setting its operands; // to the corresponding variable values. Precondition: All VariableValues must; // be set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h:131,Modifiability,Variab,VariableValues,131,// Builds an MCInst from this InstructionTemplate setting its operands; // to the corresponding variable values. Precondition: All VariableValues must; // be set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h:36,Energy Efficiency,power,powers,36,// Returns a sequence of increasing powers of two corresponding to all the; // Execution flags.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h:98,Modifiability,variab,variables,98,// A CodeTemplate is a set of InstructionTemplates that may not be fully; // specified (i.e. some variables are not yet set). This allows the; // SnippetGenerator to instantiate it many times with specific values to study; // their impact on instruction's performance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h:256,Performance,perform,performance,256,// A CodeTemplate is a set of InstructionTemplates that may not be fully; // specified (i.e. some variables are not yet set). This allows the; // SnippetGenerator to instantiate it many times with specific values to study; // their impact on instruction's performance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h:22,Modifiability,Config,Config,22,// See BenchmarkKey.::Config.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h:7,Testability,Benchmark,BenchmarkKey,7,// See BenchmarkKey.::Config.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.cpp:8,Availability,Error,Error,8,"//===-- Error.cpp -----------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h:8,Availability,Error,Error,8,"//===-- Error.h -------------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h:24,Availability,failure,failures,24,"// A class representing failures that happened within llvm-exegesis, they are; // used to report informations to the user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h:24,Availability,failure,failures,24,// A class representing failures that happened during clustering calculations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h:57,Availability,failure,failure,57,"// A class representing a non-descript snippet execution failure. This class; // is designed to sub-classed into more specific failures that contain; // additional data about the specific error that they represent. Instead of; // halting the program, the errors are reported in the output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h:127,Availability,failure,failures,127,"// A class representing a non-descript snippet execution failure. This class; // is designed to sub-classed into more specific failures that contain; // additional data about the specific error that they represent. Instead of; // halting the program, the errors are reported in the output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h:188,Availability,error,error,188,"// A class representing a non-descript snippet execution failure. This class; // is designed to sub-classed into more specific failures that contain; // additional data about the specific error that they represent. Instead of; // halting the program, the errors are reported in the output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h:255,Availability,error,errors,255,"// A class representing a non-descript snippet execution failure. This class; // is designed to sub-classed into more specific failures that contain; // additional data about the specific error that they represent. Instead of; // halting the program, the errors are reported in the output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h:50,Availability,fault,faults,50,// A class representing specifically segmentation faults that happen during; // snippet execution.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h:47,Availability,failure,failures,47,// A class representing all other non-specific failures that happen during; // snippet execution.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Error.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LatencyBenchmarkRunner.cpp:8,Performance,Latency,LatencyBenchmarkRunner,8,"//===-- LatencyBenchmarkRunner.cpp ------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LatencyBenchmarkRunner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LatencyBenchmarkRunner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LatencyBenchmarkRunner.h:8,Performance,Latency,LatencyBenchmarkRunner,8,"//===-- LatencyBenchmarkRunner.h --------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// A BenchmarkRunner implementation to measure instruction latencies.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LatencyBenchmarkRunner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LatencyBenchmarkRunner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LatencyBenchmarkRunner.h:398,Testability,Benchmark,BenchmarkRunner,398,"//===-- LatencyBenchmarkRunner.h --------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// A BenchmarkRunner implementation to measure instruction latencies.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LatencyBenchmarkRunner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LatencyBenchmarkRunner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LlvmState.cpp:3,Deployability,Update,Update,3,// Update Triple with the updated triple from the target lookup.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LlvmState.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LlvmState.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LlvmState.cpp:26,Deployability,update,updated,26,// Update Triple with the updated triple from the target lookup.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LlvmState.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LlvmState.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LlvmState.h:418,Security,access,access,418,"//===-- LlvmState.h ---------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// A class to set up and access common LLVM objects.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LlvmState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LlvmState.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LlvmState.h:260,Testability,test,tests,260,"// Factory function.; // If `Triple` is empty, uses the host triple.; // If `CpuName` is empty, uses the host CPU.; // If `UseDummyPerfCounters` is set, does not query the kernel; // for event counts.; // `UseDummyPerfCounters` and `Features` are intended for tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LlvmState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/LlvmState.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.cpp:3,Modifiability,Variab,Variables,3,// Variables.size() <= Operands.size(); // Assigning Variables to non tied explicit operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.cpp:53,Modifiability,Variab,Variables,53,// Variables.size() <= Operands.size(); // Assigning Variables to non tied explicit operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.cpp:13,Modifiability,Variab,Variables,13,// Assigning Variables to tied operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.cpp:25,Modifiability,Variab,Variables,25,// Assigning Operands to Variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:614,Modifiability,Variab,Variable,614,"//===-- MCInstrDescView.h ---------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Provide views around LLVM structures to represents an instruction instance,; /// as well as its implicit and explicit arguments in a uniform way.; /// Arguments that are explicit and independant (non tied) also have a Variable; /// associated to them so the instruction can be fully defined by reading its; /// Variables.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:707,Modifiability,Variab,Variables,707,"//===-- MCInstrDescView.h ---------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Provide views around LLVM structures to represents an instruction instance,; /// as well as its implicit and explicit arguments in a uniform way.; /// Arguments that are explicit and independant (non tied) also have a Variable; /// associated to them so the instruction can be fully defined by reading its; /// Variables.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:5,Modifiability,variab,variable,5,// A variable represents the value associated to an Operand or a set of Operands; // if they are tied together.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:29,Modifiability,Variab,Variable,29,// Returns the index of this Variable inside Instruction's Variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:59,Modifiability,Variab,Variable,59,// Returns the index of this Variable inside Instruction's Variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:51,Modifiability,Variab,Variable,51,// Returns the index of the Operand linked to this Variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:24,Modifiability,Variab,Variable,24,// Returns whether this Variable has more than one Operand linked to it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:44,Modifiability,Variab,Variable,44,// The indices of the operands tied to this Variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:21,Modifiability,Variab,Variable,21,// The index of this Variable in Instruction.Variables and its associated; // Value in InstructionBuilder.VariableValues.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:45,Modifiability,Variab,Variables,45,// The index of this Variable in Instruction.Variables and its associated; // Value in InstructionBuilder.VariableValues.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:106,Modifiability,Variab,VariableValues,106,// The index of this Variable in Instruction.Variables and its associated; // Value in InstructionBuilder.VariableValues.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:577,Modifiability,Variab,VariableIndex,577,"// MCOperandInfo can only represents Explicit operands. This object gives a; // uniform view of Implicit and Explicit Operands.; // - Index: can be used to refer to MCInstrDesc::operands for Explicit operands.; // - Tracker: is set for Register Operands and is used to keep track of possible; // registers and the registers reachable from them (aliasing registers).; // - Info: a shortcut for MCInstrDesc::operands()[Index].; // - TiedToIndex: the index of the Operand holding the value or -1.; // - ImplicitReg: the register value when Operand is Implicit, 0 otherwise.; // - VariableIndex: the index of the Variable holding the value for this Operand; // or -1 if this operand is implicit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:609,Modifiability,Variab,Variable,609,"// MCOperandInfo can only represents Explicit operands. This object gives a; // uniform view of Implicit and Explicit Operands.; // - Index: can be used to refer to MCInstrDesc::operands for Explicit operands.; // - Tracker: is set for Register Operands and is used to keep track of possible; // registers and the registers reachable from them (aliasing registers).; // - Info: a shortcut for MCInstrDesc::operands()[Index].; // - TiedToIndex: the index of the Operand holding the value or -1.; // - ImplicitReg: the register value when Operand is Implicit, 0 otherwise.; // - VariableIndex: the index of the Variable holding the value for this Operand; // or -1 if this operand is implicit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:18,Security,access,accessors,18,// Please use the accessors above and not the following fields.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:6,Performance,cache,cache,6,"/// A cache of BitVector to reuse between Instructions.; /// The cache will only be exercised during Instruction initialization.; /// For X86, this is ~160 unique vectors for all of the ~15K Instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:65,Performance,cache,cache,65,"/// A cache of BitVector to reuse between Instructions.; /// The cache will only be exercised during Instruction initialization.; /// For X86, this is ~160 unique vectors for all of the ~15K Instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:12,Energy Efficiency,allocate,allocates,12,// Finds or allocates the provided BitVector in the cache and retrieves it's; // unique instance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:52,Performance,cache,cache,52,// Finds or allocates the provided BitVector in the cache and retrieves it's; // unique instance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:52,Integrability,interface,interface,52,// A view over an MCInstrDesc offering a convenient interface to compute; // Register aliasing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:42,Energy Efficiency,allocate,allocated,42,"// Prevent copy or move, instructions are allocated once and cached.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:61,Performance,cache,cached,61,"// Prevent copy or move, instructions are allocated once and cached.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:38,Modifiability,Variab,Variable,38,"// Returns the Operand linked to this Variable.; // In case the Variable is tied, the primary (i.e. Def) Operand is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:64,Modifiability,Variab,Variable,64,"// Returns the Operand linked to this Variable.; // In case the Variable is tied, the primary (i.e. Def) Operand is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:68,Performance,cache,cache,68,// Instructions are expensive to instantiate. This class provides a cache of; // Instructions with lazy construction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:24,Deployability,configurat,configurations,24,// Returns all possible configurations leading Def registers of DefInstruction; // to alias with Use registers of UseInstruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:24,Modifiability,config,configurations,24,// Returns all possible configurations leading Def registers of DefInstruction; // to alias with Use registers of UseInstruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:23,Deployability,configurat,configuration,23,// True if no aliasing configuration is found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:23,Modifiability,config,configuration,23,// True if no aliasing configuration is found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MmapUtils.h:86,Availability,avail,available,86,"// Before kernel 4.17, Linux did not support MAP_FIXED_NOREPLACE, so if it is; // not available, simplfy define it as MAP_FIXED which performs the same; // function but does not guarantee existing mappings won't get clobbered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MmapUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MmapUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MmapUtils.h:134,Performance,perform,performs,134,"// Before kernel 4.17, Linux did not support MAP_FIXED_NOREPLACE, so if it is; // not available, simplfy define it as MAP_FIXED which performs the same; // function but does not guarantee existing mappings won't get clobbered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MmapUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MmapUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MmapUtils.h:97,Usability,simpl,simplfy,97,"// Before kernel 4.17, Linux did not support MAP_FIXED_NOREPLACE, so if it is; // not available, simplfy define it as MAP_FIXED which performs the same; // function but does not guarantee existing mappings won't get clobbered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MmapUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MmapUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp:183,Availability,avail,availability,183,"// FIXME: Load constants into registers (e.g. with fld1) to not break; // instructions like x87.; // Ideally we would like the only limitation on executing instructions to be the; // availability of the CPU resources (e.g. execution ports) needed to execute; // them, instead of the availability of their data dependencies.; // To achieve that, one approach is to generate instructions that do not have; // data dependencies between them.; //; // For some instructions, this is trivial:; // mov rax, qword ptr [rsi]; // mov rax, qword ptr [rsi]; // mov rax, qword ptr [rsi]; // mov rax, qword ptr [rsi]; // For the above snippet, haswell just renames rax four times and executes the; // four instructions two at a time on P23 and P0126.; //; // For some instructions, we just need to make sure that the source is; // different from the destination. For example, IDIV8r reads from GPR and; // writes to AX. We just need to ensure that the Var is assigned a; // register which is different from AX:; // idiv bx; // idiv bx; // idiv bx; // idiv bx; // The above snippet will be able to fully saturate the ports, while the same; // with ax would issue one uop every `latency(IDIV8r)` cycles.; //; // Some instructions make this harder because they both read and write from; // the same register:; // inc rax; // inc rax; // inc rax; // inc rax; // This has a data dependency from each instruction to the next, limit the; // number of instructions that can be issued in parallel.; // It turns out that this is not a big issue on recent Intel CPUs because they; // have heuristics to balance port pressure. In the snippet above, subsequent; // instructions will end up evenly distributed on {P0,P1,P5,P6}, but some CPUs; // might end up executing them all on P0 (just because they can), or try; // avoiding P5 because it's usually under high pressure from vector; // instructions.; // This issue is even more important for high-latency instructions because; // they increase the idle time of the CPU, e.g. :",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp:283,Availability,avail,availability,283,"// FIXME: Load constants into registers (e.g. with fld1) to not break; // instructions like x87.; // Ideally we would like the only limitation on executing instructions to be the; // availability of the CPU resources (e.g. execution ports) needed to execute; // them, instead of the availability of their data dependencies.; // To achieve that, one approach is to generate instructions that do not have; // data dependencies between them.; //; // For some instructions, this is trivial:; // mov rax, qword ptr [rsi]; // mov rax, qword ptr [rsi]; // mov rax, qword ptr [rsi]; // mov rax, qword ptr [rsi]; // For the above snippet, haswell just renames rax four times and executes the; // four instructions two at a time on P23 and P0126.; //; // For some instructions, we just need to make sure that the source is; // different from the destination. For example, IDIV8r reads from GPR and; // writes to AX. We just need to ensure that the Var is assigned a; // register which is different from AX:; // idiv bx; // idiv bx; // idiv bx; // idiv bx; // The above snippet will be able to fully saturate the ports, while the same; // with ax would issue one uop every `latency(IDIV8r)` cycles.; //; // Some instructions make this harder because they both read and write from; // the same register:; // inc rax; // inc rax; // inc rax; // inc rax; // This has a data dependency from each instruction to the next, limit the; // number of instructions that can be issued in parallel.; // It turns out that this is not a big issue on recent Intel CPUs because they; // have heuristics to balance port pressure. In the snippet above, subsequent; // instructions will end up evenly distributed on {P0,P1,P5,P6}, but some CPUs; // might end up executing them all on P0 (just because they can), or try; // avoiding P5 because it's usually under high pressure from vector; // instructions.; // This issue is even more important for high-latency instructions because; // they increase the idle time of the CPU, e.g. :",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp:310,Integrability,depend,dependencies,310,"// FIXME: Load constants into registers (e.g. with fld1) to not break; // instructions like x87.; // Ideally we would like the only limitation on executing instructions to be the; // availability of the CPU resources (e.g. execution ports) needed to execute; // them, instead of the availability of their data dependencies.; // To achieve that, one approach is to generate instructions that do not have; // data dependencies between them.; //; // For some instructions, this is trivial:; // mov rax, qword ptr [rsi]; // mov rax, qword ptr [rsi]; // mov rax, qword ptr [rsi]; // mov rax, qword ptr [rsi]; // For the above snippet, haswell just renames rax four times and executes the; // four instructions two at a time on P23 and P0126.; //; // For some instructions, we just need to make sure that the source is; // different from the destination. For example, IDIV8r reads from GPR and; // writes to AX. We just need to ensure that the Var is assigned a; // register which is different from AX:; // idiv bx; // idiv bx; // idiv bx; // idiv bx; // The above snippet will be able to fully saturate the ports, while the same; // with ax would issue one uop every `latency(IDIV8r)` cycles.; //; // Some instructions make this harder because they both read and write from; // the same register:; // inc rax; // inc rax; // inc rax; // inc rax; // This has a data dependency from each instruction to the next, limit the; // number of instructions that can be issued in parallel.; // It turns out that this is not a big issue on recent Intel CPUs because they; // have heuristics to balance port pressure. In the snippet above, subsequent; // instructions will end up evenly distributed on {P0,P1,P5,P6}, but some CPUs; // might end up executing them all on P0 (just because they can), or try; // avoiding P5 because it's usually under high pressure from vector; // instructions.; // This issue is even more important for high-latency instructions because; // they increase the idle time of the CPU, e.g. :",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp:412,Integrability,depend,dependencies,412,"// FIXME: Load constants into registers (e.g. with fld1) to not break; // instructions like x87.; // Ideally we would like the only limitation on executing instructions to be the; // availability of the CPU resources (e.g. execution ports) needed to execute; // them, instead of the availability of their data dependencies.; // To achieve that, one approach is to generate instructions that do not have; // data dependencies between them.; //; // For some instructions, this is trivial:; // mov rax, qword ptr [rsi]; // mov rax, qword ptr [rsi]; // mov rax, qword ptr [rsi]; // mov rax, qword ptr [rsi]; // For the above snippet, haswell just renames rax four times and executes the; // four instructions two at a time on P23 and P0126.; //; // For some instructions, we just need to make sure that the source is; // different from the destination. For example, IDIV8r reads from GPR and; // writes to AX. We just need to ensure that the Var is assigned a; // register which is different from AX:; // idiv bx; // idiv bx; // idiv bx; // idiv bx; // The above snippet will be able to fully saturate the ports, while the same; // with ax would issue one uop every `latency(IDIV8r)` cycles.; //; // Some instructions make this harder because they both read and write from; // the same register:; // inc rax; // inc rax; // inc rax; // inc rax; // This has a data dependency from each instruction to the next, limit the; // number of instructions that can be issued in parallel.; // It turns out that this is not a big issue on recent Intel CPUs because they; // have heuristics to balance port pressure. In the snippet above, subsequent; // instructions will end up evenly distributed on {P0,P1,P5,P6}, but some CPUs; // might end up executing them all on P0 (just because they can), or try; // avoiding P5 because it's usually under high pressure from vector; // instructions.; // This issue is even more important for high-latency instructions because; // they increase the idle time of the CPU, e.g. :",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp:1360,Integrability,depend,dependency,1360," achieve that, one approach is to generate instructions that do not have; // data dependencies between them.; //; // For some instructions, this is trivial:; // mov rax, qword ptr [rsi]; // mov rax, qword ptr [rsi]; // mov rax, qword ptr [rsi]; // mov rax, qword ptr [rsi]; // For the above snippet, haswell just renames rax four times and executes the; // four instructions two at a time on P23 and P0126.; //; // For some instructions, we just need to make sure that the source is; // different from the destination. For example, IDIV8r reads from GPR and; // writes to AX. We just need to ensure that the Var is assigned a; // register which is different from AX:; // idiv bx; // idiv bx; // idiv bx; // idiv bx; // The above snippet will be able to fully saturate the ports, while the same; // with ax would issue one uop every `latency(IDIV8r)` cycles.; //; // Some instructions make this harder because they both read and write from; // the same register:; // inc rax; // inc rax; // inc rax; // inc rax; // This has a data dependency from each instruction to the next, limit the; // number of instructions that can be issued in parallel.; // It turns out that this is not a big issue on recent Intel CPUs because they; // have heuristics to balance port pressure. In the snippet above, subsequent; // instructions will end up evenly distributed on {P0,P1,P5,P6}, but some CPUs; // might end up executing them all on P0 (just because they can), or try; // avoiding P5 because it's usually under high pressure from vector; // instructions.; // This issue is even more important for high-latency instructions because; // they increase the idle time of the CPU, e.g. :; // imul rax, rbx; // imul rax, rbx; // imul rax, rbx; // imul rax, rbx; //; // To avoid that, we do the renaming statically by generating as many; // independent exclusive assignments as possible (until all possible registers; // are exhausted) e.g.:; // imul rax, rbx; // imul rcx, rbx; // imul rdx, rbx; // imul r8, rbx; //; /",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp:10,Performance,Load,Load,10,"// FIXME: Load constants into registers (e.g. with fld1) to not break; // instructions like x87.; // Ideally we would like the only limitation on executing instructions to be the; // availability of the CPU resources (e.g. execution ports) needed to execute; // them, instead of the availability of their data dependencies.; // To achieve that, one approach is to generate instructions that do not have; // data dependencies between them.; //; // For some instructions, this is trivial:; // mov rax, qword ptr [rsi]; // mov rax, qword ptr [rsi]; // mov rax, qword ptr [rsi]; // mov rax, qword ptr [rsi]; // For the above snippet, haswell just renames rax four times and executes the; // four instructions two at a time on P23 and P0126.; //; // For some instructions, we just need to make sure that the source is; // different from the destination. For example, IDIV8r reads from GPR and; // writes to AX. We just need to ensure that the Var is assigned a; // register which is different from AX:; // idiv bx; // idiv bx; // idiv bx; // idiv bx; // The above snippet will be able to fully saturate the ports, while the same; // with ax would issue one uop every `latency(IDIV8r)` cycles.; //; // Some instructions make this harder because they both read and write from; // the same register:; // inc rax; // inc rax; // inc rax; // inc rax; // This has a data dependency from each instruction to the next, limit the; // number of instructions that can be issued in parallel.; // It turns out that this is not a big issue on recent Intel CPUs because they; // have heuristics to balance port pressure. In the snippet above, subsequent; // instructions will end up evenly distributed on {P0,P1,P5,P6}, but some CPUs; // might end up executing them all on P0 (just because they can), or try; // avoiding P5 because it's usually under high pressure from vector; // instructions.; // This issue is even more important for high-latency instructions because; // they increase the idle time of the CPU, e.g. :",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp:1163,Performance,latency,latency,1163,"with fld1) to not break; // instructions like x87.; // Ideally we would like the only limitation on executing instructions to be the; // availability of the CPU resources (e.g. execution ports) needed to execute; // them, instead of the availability of their data dependencies.; // To achieve that, one approach is to generate instructions that do not have; // data dependencies between them.; //; // For some instructions, this is trivial:; // mov rax, qword ptr [rsi]; // mov rax, qword ptr [rsi]; // mov rax, qword ptr [rsi]; // mov rax, qword ptr [rsi]; // For the above snippet, haswell just renames rax four times and executes the; // four instructions two at a time on P23 and P0126.; //; // For some instructions, we just need to make sure that the source is; // different from the destination. For example, IDIV8r reads from GPR and; // writes to AX. We just need to ensure that the Var is assigned a; // register which is different from AX:; // idiv bx; // idiv bx; // idiv bx; // idiv bx; // The above snippet will be able to fully saturate the ports, while the same; // with ax would issue one uop every `latency(IDIV8r)` cycles.; //; // Some instructions make this harder because they both read and write from; // the same register:; // inc rax; // inc rax; // inc rax; // inc rax; // This has a data dependency from each instruction to the next, limit the; // number of instructions that can be issued in parallel.; // It turns out that this is not a big issue on recent Intel CPUs because they; // have heuristics to balance port pressure. In the snippet above, subsequent; // instructions will end up evenly distributed on {P0,P1,P5,P6}, but some CPUs; // might end up executing them all on P0 (just because they can), or try; // avoiding P5 because it's usually under high pressure from vector; // instructions.; // This issue is even more important for high-latency instructions because; // they increase the idle time of the CPU, e.g. :; // imul rax, rbx; // imul rax, rbx; // imul",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp:1922,Performance,latency,latency,1922,"tr [rsi]; // For the above snippet, haswell just renames rax four times and executes the; // four instructions two at a time on P23 and P0126.; //; // For some instructions, we just need to make sure that the source is; // different from the destination. For example, IDIV8r reads from GPR and; // writes to AX. We just need to ensure that the Var is assigned a; // register which is different from AX:; // idiv bx; // idiv bx; // idiv bx; // idiv bx; // The above snippet will be able to fully saturate the ports, while the same; // with ax would issue one uop every `latency(IDIV8r)` cycles.; //; // Some instructions make this harder because they both read and write from; // the same register:; // inc rax; // inc rax; // inc rax; // inc rax; // This has a data dependency from each instruction to the next, limit the; // number of instructions that can be issued in parallel.; // It turns out that this is not a big issue on recent Intel CPUs because they; // have heuristics to balance port pressure. In the snippet above, subsequent; // instructions will end up evenly distributed on {P0,P1,P5,P6}, but some CPUs; // might end up executing them all on P0 (just because they can), or try; // avoiding P5 because it's usually under high pressure from vector; // instructions.; // This issue is even more important for high-latency instructions because; // they increase the idle time of the CPU, e.g. :; // imul rax, rbx; // imul rax, rbx; // imul rax, rbx; // imul rax, rbx; //; // To avoid that, we do the renaming statically by generating as many; // independent exclusive assignments as possible (until all possible registers; // are exhausted) e.g.:; // imul rax, rbx; // imul rcx, rbx; // imul rdx, rbx; // imul r8, rbx; //; // Some instruction even make the above static renaming impossible because; // they implicitly read and write from the same operand, e.g. ADC16rr reads; // and writes from EFLAGS.; // In that case we just use a greedy register assignment and hope for the; // best.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp:1792,Safety,avoid,avoiding,1792,"tr [rsi]; // For the above snippet, haswell just renames rax four times and executes the; // four instructions two at a time on P23 and P0126.; //; // For some instructions, we just need to make sure that the source is; // different from the destination. For example, IDIV8r reads from GPR and; // writes to AX. We just need to ensure that the Var is assigned a; // register which is different from AX:; // idiv bx; // idiv bx; // idiv bx; // idiv bx; // The above snippet will be able to fully saturate the ports, while the same; // with ax would issue one uop every `latency(IDIV8r)` cycles.; //; // Some instructions make this harder because they both read and write from; // the same register:; // inc rax; // inc rax; // inc rax; // inc rax; // This has a data dependency from each instruction to the next, limit the; // number of instructions that can be issued in parallel.; // It turns out that this is not a big issue on recent Intel CPUs because they; // have heuristics to balance port pressure. In the snippet above, subsequent; // instructions will end up evenly distributed on {P0,P1,P5,P6}, but some CPUs; // might end up executing them all on P0 (just because they can), or try; // avoiding P5 because it's usually under high pressure from vector; // instructions.; // This issue is even more important for high-latency instructions because; // they increase the idle time of the CPU, e.g. :; // imul rax, rbx; // imul rax, rbx; // imul rax, rbx; // imul rax, rbx; //; // To avoid that, we do the renaming statically by generating as many; // independent exclusive assignments as possible (until all possible registers; // are exhausted) e.g.:; // imul rax, rbx; // imul rcx, rbx; // imul rdx, rbx; // imul r8, rbx; //; // Some instruction even make the above static renaming impossible because; // they implicitly read and write from the same operand, e.g. ADC16rr reads; // and writes from EFLAGS.; // In that case we just use a greedy register assignment and hope for the; // best.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp:2085,Safety,avoid,avoid,2085,"tr [rsi]; // For the above snippet, haswell just renames rax four times and executes the; // four instructions two at a time on P23 and P0126.; //; // For some instructions, we just need to make sure that the source is; // different from the destination. For example, IDIV8r reads from GPR and; // writes to AX. We just need to ensure that the Var is assigned a; // register which is different from AX:; // idiv bx; // idiv bx; // idiv bx; // idiv bx; // The above snippet will be able to fully saturate the ports, while the same; // with ax would issue one uop every `latency(IDIV8r)` cycles.; //; // Some instructions make this harder because they both read and write from; // the same register:; // inc rax; // inc rax; // inc rax; // inc rax; // This has a data dependency from each instruction to the next, limit the; // number of instructions that can be issued in parallel.; // It turns out that this is not a big issue on recent Intel CPUs because they; // have heuristics to balance port pressure. In the snippet above, subsequent; // instructions will end up evenly distributed on {P0,P1,P5,P6}, but some CPUs; // might end up executing them all on P0 (just because they can), or try; // avoiding P5 because it's usually under high pressure from vector; // instructions.; // This issue is even more important for high-latency instructions because; // they increase the idle time of the CPU, e.g. :; // imul rax, rbx; // imul rax, rbx; // imul rax, rbx; // imul rax, rbx; //; // To avoid that, we do the renaming statically by generating as many; // independent exclusive assignments as possible (until all possible registers; // are exhausted) e.g.:; // imul rax, rbx; // imul rcx, rbx; // imul rdx, rbx; // imul r8, rbx; //; // Some instruction even make the above static renaming impossible because; // they implicitly read and write from the same operand, e.g. ADC16rr reads; // and writes from EFLAGS.; // In that case we just use a greedy register assignment and hope for the; // best.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.h:167,Performance,load,load,167,"// Instantiates memory operands within a snippet.; // To make computations as parallel as possible, we generate independant; // memory locations for instructions that load and store. If there are less; // than kMinNumDifferentAddresses in the original snippet, we duplicate; // instructions until there are this number of instructions.; // For example, assuming kMinNumDifferentAddresses=5 and; // getMaxMemoryAccessSize()=64, if the original snippet is:; // mov eax, [memory]; // we might generate:; // mov eax, [rdi]; // mov eax, [rdi + 64]; // mov eax, [rdi + 128]; // mov eax, [rdi + 192]; // mov eax, [rdi + 256]; // If the original snippet is:; // mov eax, [memory]; // add eax, [memory]; // we might generate:; // mov eax, [rdi]; // add eax, [rdi + 64]; // mov eax, [rdi + 128]; // add eax, [rdi + 192]; // mov eax, [rdi + 256]",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/ParallelSnippetGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp:3,Performance,Perform,Performance,3,// Performance counters may be unavailable for a number of reasons (such as; // kernel.perf_event_paranoid restriction or CPU being unknown to libpfm).; //; // Dummy event can be specified to skip interaction with real performance; // counters while still passing control to the generated code snippet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp:219,Performance,perform,performance,219,// Performance counters may be unavailable for a number of reasons (such as; // kernel.perf_event_paranoid restriction or CPU being unknown to libpfm).; //; // Dummy event can be specified to skip interaction with real performance; // counters while still passing control to the generated code snippet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp:47,Availability,avail,available,47,// We don't know beforehand which counters are available (e.g. 6 uops ports; // on Sandybridge but 8 on Haswell) so we report the missing counter without; // crashing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp:78,Safety,safe,safe,78,"// Reading a validation counter will only return a single value, so it is; // safe to only append the first value here. Also assert that this is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp:13,Security,validat,validation,13,"// Reading a validation counter will only return a single value, so it is; // safe to only append the first value here. Also assert that this is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp:125,Testability,assert,assert,125,"// Reading a validation counter will only return a single value, so it is; // safe to only append the first value here. Also assert that this is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h:19,Availability,error,error,19,// Returns true on error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h:37,Security,access,access,37,// Dummy event that does not require access to counters (for tests).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h:61,Testability,test,tests,61,// Dummy event that does not require access to counters (for tests).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h:43,Modifiability,config,configured,43,// Represents a single event that has been configured in the Linux perf; // subsystem.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h:197,Energy Efficiency,schedul,scheduled,197,// Consists of a counter measuring a specific event and associated validation; // counters measuring execution conditions. All counters in a group are part; // of a single event group and are thus scheduled on and off the CPU as a single; // unit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h:67,Security,validat,validation,67,// Consists of a counter measuring a specific event and associated validation; // counters measuring execution conditions. All counters in a group are part; // of a single event group and are thus scheduled on and off the CPU as a single; // unit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h:48,Availability,error,error,48,"/// Returns the current value of the counter or error if it cannot be read.; /// FunctionBytes: The benchmark function being executed.; /// This is used to filter out the measurements to ensure they are only; /// within the benchmarked code.; /// If empty (or not specified), then no filtering will be done.; /// Not all counters choose to use this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h:100,Testability,benchmark,benchmark,100,"/// Returns the current value of the counter or error if it cannot be read.; /// FunctionBytes: The benchmark function being executed.; /// This is used to filter out the measurements to ensure they are only; /// within the benchmarked code.; /// If empty (or not specified), then no filtering will be done.; /// Not all counters choose to use this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h:224,Testability,benchmark,benchmarked,224,"/// Returns the current value of the counter or error if it cannot be read.; /// FunctionBytes: The benchmark function being executed.; /// This is used to filter out the measurements to ensure they are only; /// within the benchmarked code.; /// If empty (or not specified), then no filtering will be done.; /// Not all counters choose to use this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/RegisterAliasing.h:5,Performance,cache,cache,5,// A cache of existing trackers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/RegisterAliasing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/RegisterAliasing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/RegisterAliasing.h:28,Performance,cache,cache,28,// RegInfo must outlive the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/RegisterAliasing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/RegisterAliasing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/RegisterAliasing.h:17,Performance,optimiz,optimized,17,"// `a = a & ~b`, optimized for few bit sets in B and no allocation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/RegisterAliasing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/RegisterAliasing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/RegisterValue.h:5,Usability,simpl,simple,5,// A simple object storing the value for a particular register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/RegisterValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/RegisterValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.cpp:18,Availability,redundant,redundant,18,"// Return the non-redundant list of WriteProcRes used by the given sched class.; // The scheduling model for LLVM is such that each instruction has a certain; // number of uops which consume resources which are described by WriteProcRes; // entries. Each entry describe how many cycles are spent on a specific ProcRes; // kind.; // For example, an instruction might have 3 uOps, one dispatching on P0; // (ProcResIdx=1) and two on P06 (ProcResIdx = 7).; // Note that LLVM additionally denormalizes resource consumption to include; // usage of super resources by subresources. So in practice if there exists a; // P016 (ProcResIdx=10), then the cycles consumed by P0 are also consumed by; // P06 (ProcResIdx = 7) and P016 (ProcResIdx = 10), and the resources consumed; // by P06 are also consumed by P016. In the figure below, parenthesized cycles; // denote implied usage of superresources by subresources:; // P0 P06 P016; // uOp1 1 (1) (1); // uOp2 1 (1); // uOp3 1 (1); // =============================; // 1 3 3; // Eventually we end up with three entries for the WriteProcRes of the; // instruction:; // {ProcResIdx=1, Cycles=1} // P0; // {ProcResIdx=7, Cycles=3} // P06; // {ProcResIdx=10, Cycles=3} // P016; //; // Note that in this case, P016 does not contribute any cycles, so it would; // be removed by this function.; // FIXME: Merge this with the equivalent in llvm-mca.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.cpp:88,Energy Efficiency,schedul,scheduling,88,"// Return the non-redundant list of WriteProcRes used by the given sched class.; // The scheduling model for LLVM is such that each instruction has a certain; // number of uops which consume resources which are described by WriteProcRes; // entries. Each entry describe how many cycles are spent on a specific ProcRes; // kind.; // For example, an instruction might have 3 uOps, one dispatching on P0; // (ProcResIdx=1) and two on P06 (ProcResIdx = 7).; // Note that LLVM additionally denormalizes resource consumption to include; // usage of super resources by subresources. So in practice if there exists a; // P016 (ProcResIdx=10), then the cycles consumed by P0 are also consumed by; // P06 (ProcResIdx = 7) and P016 (ProcResIdx = 10), and the resources consumed; // by P06 are also consumed by P016. In the figure below, parenthesized cycles; // denote implied usage of superresources by subresources:; // P0 P06 P016; // uOp1 1 (1) (1); // uOp2 1 (1); // uOp3 1 (1); // =============================; // 1 3 3; // Eventually we end up with three entries for the WriteProcRes of the; // instruction:; // {ProcResIdx=1, Cycles=1} // P0; // {ProcResIdx=7, Cycles=3} // P06; // {ProcResIdx=10, Cycles=3} // P016; //; // Note that in this case, P016 does not contribute any cycles, so it would; // be removed by this function.; // FIXME: Merge this with the equivalent in llvm-mca.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.cpp:507,Energy Efficiency,consumption,consumption,507,"// Return the non-redundant list of WriteProcRes used by the given sched class.; // The scheduling model for LLVM is such that each instruction has a certain; // number of uops which consume resources which are described by WriteProcRes; // entries. Each entry describe how many cycles are spent on a specific ProcRes; // kind.; // For example, an instruction might have 3 uOps, one dispatching on P0; // (ProcResIdx=1) and two on P06 (ProcResIdx = 7).; // Note that LLVM additionally denormalizes resource consumption to include; // usage of super resources by subresources. So in practice if there exists a; // P016 (ProcResIdx=10), then the cycles consumed by P0 are also consumed by; // P06 (ProcResIdx = 7) and P016 (ProcResIdx = 10), and the resources consumed; // by P06 are also consumed by P016. In the figure below, parenthesized cycles; // denote implied usage of superresources by subresources:; // P0 P06 P016; // uOp1 1 (1) (1); // uOp2 1 (1); // uOp3 1 (1); // =============================; // 1 3 3; // Eventually we end up with three entries for the WriteProcRes of the; // instruction:; // {ProcResIdx=1, Cycles=1} // P0; // {ProcResIdx=7, Cycles=3} // P06; // {ProcResIdx=10, Cycles=3} // P016; //; // Note that in this case, P016 does not contribute any cycles, so it would; // be removed by this function.; // FIXME: Merge this with the equivalent in llvm-mca.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.cpp:18,Safety,redund,redundant,18,"// Return the non-redundant list of WriteProcRes used by the given sched class.; // The scheduling model for LLVM is such that each instruction has a certain; // number of uops which consume resources which are described by WriteProcRes; // entries. Each entry describe how many cycles are spent on a specific ProcRes; // kind.; // For example, an instruction might have 3 uOps, one dispatching on P0; // (ProcResIdx=1) and two on P06 (ProcResIdx = 7).; // Note that LLVM additionally denormalizes resource consumption to include; // usage of super resources by subresources. So in practice if there exists a; // P016 (ProcResIdx=10), then the cycles consumed by P0 are also consumed by; // P06 (ProcResIdx = 7) and P016 (ProcResIdx = 10), and the resources consumed; // by P06 are also consumed by P016. In the figure below, parenthesized cycles; // denote implied usage of superresources by subresources:; // P0 P06 P016; // uOp1 1 (1) (1); // uOp2 1 (1); // uOp3 1 (1); // =============================; // 1 3 3; // Eventually we end up with three entries for the WriteProcRes of the; // instruction:; // {ProcResIdx=1, Cycles=1} // P0; // {ProcResIdx=7, Cycles=3} // P06; // {ProcResIdx=10, Cycles=3} // P016; //; // Note that in this case, P016 does not contribute any cycles, so it would; // be removed by this function.; // FIXME: Merge this with the equivalent in llvm-mca.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.cpp:20,Availability,mask,masks,20,// Collect resource masks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.cpp:12,Performance,latency,latency,12,// Find the latency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.h:98,Energy Efficiency,schedul,scheduler,98,// Computes the idealized ProcRes Unit pressure. This is the expected; // distribution if the CPU scheduler can distribute the load as evenly as; // possible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.h:127,Performance,load,load,127,// Computes the idealized ProcRes Unit pressure. This is the expected; // distribution if the CPU scheduler can distribute the load as evenly as; // possible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SchedClassResolution.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SerialSnippetGenerator.cpp:39,Modifiability,variab,variable,39,// Picking whatever value for the tied variable will make the instruction; // serial.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SerialSnippetGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SerialSnippetGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetFile.cpp:30,Testability,Benchmark,BenchmarkCode,30,// An MCStreamer that reads a BenchmarkCode definition from a file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetFile.cpp:36,Integrability,interface,interface,36,// Implementation of the MCStreamer interface. We only care about; // instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetFile.cpp:3,Security,Validat,Validate,3,// Validate that the annotation is a multiple of the platform's page; // size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetFile.cpp:17,Security,validat,validate,17,// __linux__; // validate that the annotation refers to an already existing memory; // definition,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetFile.cpp:3,Security,Validat,Validate,3,// Validate that the address in the annotation is a multiple of the; // platform's page size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp:70,Safety,abort,abort,70,"// If the instruction implicitly writes to ScratchSpacePointerInReg , abort.; // FIXME: We could make a copy of the scratch register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp:3,Safety,Avoid,Avoid,3,// Avoid reallocations in the loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp:26,Testability,Benchmark,BenchmarkCode,26,// TODO: Generate as many BenchmarkCode as needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp:36,Modifiability,config,configs,36,// We reached the number of allowed configs and return early.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp:85,Testability,benchmark,benchmarked,85,"// Mention the particular opcode - it is not necessarily the ""main""; // opcode being benchmarked by this snippet. For example, serial snippet; // generator uses one more opcode when in SERIAL_VIA_NON_MEMORY_INSTR; // execution mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h:528,Performance,latency,latency,528,"//===-- SnippetGenerator.h --------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the abstract SnippetGenerator class for generating code that allows; /// measuring a certain property of instructions (e.g. latency).; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h:44,Integrability,depend,dependency,44,// Generates code templates that has a self-dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h:24,Availability,failure,failures,24,"// A class representing failures that happened during Benchmark, they are used; // to report informations to the user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h:54,Testability,Benchmark,Benchmark,54,"// A class representing failures that happened during Benchmark, they are used; // to report informations to the user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h:23,Testability,benchmark,benchmark,23,// Common code for all benchmark modes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h:62,Testability,Benchmark,BenchmarkCode,62,// Calls generateCodeTemplate and expands it into one or more BenchmarkCode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h:49,Deployability,configurat,configurations,49,// A global Random Number Generator to randomize configurations.; // FIXME: Move random number generation into an object and make it seedable for; // unit tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h:49,Modifiability,config,configurations,49,// A global Random Number Generator to randomize configurations.; // FIXME: Move random number generation into an object and make it seedable for; // unit tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h:155,Testability,test,tests,155,// A global Random Number Generator to randomize configurations.; // FIXME: Move random number generation into an object and make it seedable for; // unit tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h:18,Deployability,configurat,configuration,18,"// Picks a random configuration, then selects a random def and a random use from; // it and finally set the selected values in the provided InstructionInstances.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h:18,Modifiability,config,configuration,18,"// Picks a random configuration, then selects a random def and a random use from; // it and finally set the selected values in the provided InstructionInstances.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h:33,Modifiability,Variab,Variables,33,// Assigns a Random Value to all Variables in IT that are still Invalid.; // Do not use any of the registers in `ForbiddenRegs`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h:3,Safety,Sanity check,Sanity check,3,// Sanity check generated instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SubprocessMemory.cpp:208,Testability,test,tests,208,"// Add the PID to the shared memory name so that if we're running multiple; // processes at the same time, they won't interfere with each other.; // This comes up particularly often when running the exegesis tests with; // llvm-lit",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SubprocessMemory.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SubprocessMemory.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SubprocessMemory.h:389,Performance,perform,performance,389,"// The following function sets up the auxiliary memory by opening shared; // memory objects backing memory definitions and putting file descriptors; // into appropriate places. Arguments: MemoryDefinitions - A map from memory; // values names to Memoryvalues, ParentPID - The ID of the process that; // setup the memory definitions, CounterFileDescriptor - The file descriptor; // for the performance counter that will be placed in the auxiliary memory; // section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SubprocessMemory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SubprocessMemory.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:25,Performance,perform,performance,25,// An optional name of a performance counter that can be used to measure; // cycles.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:25,Performance,perform,performance,25,// An optional name of a performance counter that can be used to measure; // uops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:36,Availability,avail,available,36,// Returns true if all features are available that are required by Opcode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:49,Modifiability,config,configure,49,// Generates the necessary ioctl system calls to configure the perf counters.; // The code generated by this function preserves all registers if the; // parameter SaveRegisters is set to true.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:16,Integrability,depend,dependent,16,// Gets the ABI dependent registers that are used to pass arguments in a; // function call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:92,Testability,test,test,92,// Gets the registers that might potentially need to be saved by while; // the setup in the test harness executes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:114,Testability,benchmark,benchmark,114,"// Returns the register pointing to scratch memory, or 0 if this target; // does not support memory operands. The benchmark function uses the; // default calling convention.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:21,Usability,usab,usable,21,// Returns a counter usable as a loop counter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:139,Availability,avail,available,139,"// Returns the maximum number of bytes a load/store instruction can access at; // once. This is typically the size of the largest register available on the; // processor. Note that this only used as a hint to generate independant; // load/stores to/from memory, so the exact returned value does not really; // matter as long as it's large enough.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:41,Performance,load,load,41,"// Returns the maximum number of bytes a load/store instruction can access at; // once. This is typically the size of the largest register available on the; // processor. Note that this only used as a hint to generate independant; // load/stores to/from memory, so the exact returned value does not really; // matter as long as it's large enough.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:234,Performance,load,load,234,"// Returns the maximum number of bytes a load/store instruction can access at; // once. This is typically the size of the largest register available on the; // processor. Note that this only used as a hint to generate independant; // load/stores to/from memory, so the exact returned value does not really; // matter as long as it's large enough.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:68,Security,access,access,68,"// Returns the maximum number of bytes a load/store instruction can access at; // once. This is typically the size of the largest register available on the; // processor. Note that this only used as a hint to generate independant; // load/stores to/from memory, so the exact returned value does not really; // matter as long as it's large enough.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:49,Modifiability,variab,variable,49,// Assigns a random operand of the right type to variable Var.; // The target is responsible for handling any operand starting from; // OPERAND_FIRST_TARGET.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:103,Integrability,depend,depending,103,"// For some instructions, it is interesting to measure how it's performance; // characteristics differ depending on it's operands.; // This allows us to produce all the interesting variants.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:64,Performance,perform,performance,64,"// For some instructions, it is interesting to measure how it's performance; // characteristics differ depending on it's operands.; // This allows us to produce all the interesting variants.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:83,Availability,error,error,83,// Checks hardware and software support for current benchmark mode.; // Returns an error if the target host does not have support to run the; // benchmark.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:52,Testability,benchmark,benchmark,52,// Checks hardware and software support for current benchmark mode.; // Returns an error if the target host does not have support to run the; // benchmark.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:145,Testability,benchmark,benchmark,145,// Checks hardware and software support for current benchmark mode.; // Returns an error if the target host does not have support to run the; // benchmark.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:13,Testability,benchmark,benchmark,13,// Creates a benchmark runner for the given mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:34,Safety,safe,safe,34,// Registers a target. Not thread safe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:99,Performance,perform,performance,99,// Returns dummy Pfm counters which can be used to execute generated snippet; // without access to performance counters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:89,Security,access,access,89,// Returns dummy Pfm counters which can be used to execute generated snippet; // without access to performance counters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:65,Testability,benchmark,benchmark,65,"// Saves the CPU state that needs to be preserved when running a benchmark,; // and returns and RAII object that restores the state on destruction.; // By default no state is preserved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:54,Testability,benchmark,benchmarks,54,// Targets can implement their own snippet generators/benchmarks runners by; // implementing these.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/UopsBenchmarkRunner.h:398,Testability,Benchmark,BenchmarkRunner,398,"//===-- UopsBenchmarkRunner.h -----------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// A BenchmarkRunner implementation to measure uop decomposition.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/UopsBenchmarkRunner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/UopsBenchmarkRunner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/AArch64/Target.cpp:28,Performance,load,load,28,// Generates instruction to load an immediate value into a register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/AArch64/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/AArch64/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp:14,Availability,error,error,14,// Returns an error if we cannot handle the memory references in this; // instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp:24,Security,access,access,24,// These have no memory access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp:9,Security,access,access,9,// These access memory and are handled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp:9,Security,access,access,9,// These access memory and are not handled yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp:57,Performance,load,load,57,// end anonymous namespace; // Generates instructions to load an immediate value into a register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp:51,Modifiability,extend,extending,51,// Expand to an ORi instead of a LUi to avoid sign-extending into the; // upper 32 bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp:40,Safety,avoid,avoid,40,// Expand to an ORi instead of a LUi to avoid sign-extending into the; // upper 32 bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Mips/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp:301,Energy Efficiency,Power,PowerPC,301,"//===-- Target.cpp ----------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; // The PowerPC ExegesisTarget.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp:28,Performance,load,load,28,// Generates instruction to load an immediate value into a register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp:64,Testability,benchmark,benchmark,64,"// R13 is reserved as Thread Pointer, we won't use threading in benchmark, so; // use it as scratch memory register",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp:112,Usability,simpl,simplicity,112,"// We don't really care about the real address in snippets,; // So hardcode X1 for X-form Memory Operations for simplicity.; // TODO: materialize the offset into a reggister",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp:102,Performance,load,load,102,"// X11 is optional use in function linkage, should be the least used one; // Use it as scratch reg to load immediate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp:106,Deployability,update,update,106,"// We don't care the real value in reg, so set 64 bits or duplicate 64 bits; // for simplicity.; // TODO: update these if we need a accurate 128 values in registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp:84,Usability,simpl,simplicity,84,"// We don't care the real value in reg, so set 64 bits or duplicate 64 bits; // for simplicity.; // TODO: update these if we need a accurate 128 values in registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:72,Performance,latency,latency-mode,72,"// If a positive value is specified, we are going to use the LBR in; // latency-mode.; //; // Note:; // - A small value is preferred, but too low a value could result in; // throttling.; // - A prime number is preferred to avoid always skipping certain blocks.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:223,Safety,avoid,avoid,223,"// If a positive value is specified, we are going to use the LBR in; // latency-mode.; //; // Note:; // - A small value is preferred, but too low a value could result in; // throttling.; // - A prime number is preferred to avoid always skipping certain blocks.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:10,Security,Validat,Validates,10,// FIXME: Validates that repetition-mode is loop if LBR is requested.; // Returns a non-null reason if we cannot handle the memory references in this; // instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:24,Security,access,access,24,// These have no memory access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:9,Security,access,access,9,// These access memory and are handled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:9,Security,access,access,9,// These access memory and are not handled yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:11,Performance,latency,latency,11,"// Common (latency, uops) code for LEA templates. `GetDestReg` takes the; // addressing base and index registers and returns the LEA destination register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:224,Performance,latency,latency,224,// These are instructions like; // - `ST(0) = fsqrt(ST(0))` (OneArgFPRW); // - `ST(0) = ST(0) + ST(i)` (TwoArgFP); // They are intrinsically serial and do not modify the state of the stack.; // We generate the same code for latency and uops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:28,Performance,load,load,28,// Generates instruction to load an immediate value into a register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:3,Energy Efficiency,Allocate,Allocates,3,// Allocates scratch memory on the stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:3,Performance,Load,Loads,3,// Loads scratch memory into register `Reg` using opcode `RMOpcode`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:3,Deployability,Release,Releases,3,// Releases scratch memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:115,Performance,load,load,115,"// Reserves some space on the stack, fills it with the content of the provided; // constant and provide methods to load the stack value into a register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:3,Availability,Mask,Mask,3,// Mask all FP exceptions,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:50,Security,validat,validation,50,// TODO(boomanaiden154): Add in support for using validation counters when; // using LBR counters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:123,Testability,benchmark,benchmarks,123,"// LBR is the only feature we conditionally support now.; // So if LBR is not requested, then we should be able to run the benchmarks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:64,Energy Efficiency,reduce,reduce,64,"// Optionally, also disable the upper (x86_64) SSE registers to reduce frontend; // decoder load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:92,Performance,load,load,92,"// Optionally, also disable the upper (x86_64) SSE registers to reduce frontend; // decoder load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:129,Performance,load,loaded,129,"// Preserve the syscall registers here as we don't; // want to make any assumptions about the ordering of what registers are; // loaded in first, and we might have already loaded in registers that we are; // going to be clobbering here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:172,Performance,load,loaded,172,"// Preserve the syscall registers here as we don't; // want to make any assumptions about the ordering of what registers are; // loaded in first, and we might have already loaded in registers that we are; // going to be clobbering here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:9,Availability,down,down,9,// Round down to the nearest page by getting rid of the least significant bits; // representing location in the page. Shift right to get rid of this info and; // then shift back left.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:9,Performance,load,load,9,// Use a load effective address to get the current instruction pointer and put; // it into the result register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:3,Performance,Load,Load,3,// Load in the size of the snippet to RDI from from the argument register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:114,Availability,down,down,114,// Add a one page to the start address to ensure that we're above the snippet; // since the above function rounds down.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:43,Modifiability,variab,variable,43,"// __linux__; // Instruction can have some variable operands, and we may want to see how; // different operands affect performance. So for each operand position,; // precompute all the possible choices we might care about,; // and greedily generate all the possible combinations of choices.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:119,Performance,perform,performance,119,"// __linux__; // Instruction can have some variable operands, and we may want to see how; // different operands affect performance. So for each operand position,; // precompute all the possible choices we might care about,; // and greedily generate all the possible combinations of choices.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:44,Modifiability,variab,variable,44,// We don't wish to explicitly explore this variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:41,Testability,log,logic,41,// But add invalid MCOperand to simplify logic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:32,Usability,simpl,simplify,32,// But add invalid MCOperand to simplify logic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:35,Modifiability,variab,variables,35,"// If we don't wish to explore any variables, defer to the baseline method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.cpp:26,Integrability,wrap,wrappers,26,// FIXME: Use appropriate wrappers for poll.h and mman.h; // to support Windows and remove this linux-only guard.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.cpp:99,Energy Efficiency,allocate,allocate,99,"// First page is reserved for perf_event_mmap_page. Data buffer starts on; // the next page, so we allocate one more page.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.cpp:3,Safety,timeout,timeout,3,/* timeout in ms */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.cpp:155,Testability,benchmark,benchmark,155,"// Parses the given data-buffer for stats and fill the CycleArray.; // If data has been extracted successfully, also modifies the code to jump; // out the benchmark loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.h:472,Performance,throughput,throughput,472,"//===-- X86Counter.h --------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Perf counter that reads the LBRs for measuring the benchmarked block's; /// throughput.; ///; /// More info at: https://lwn.net/Articles/680985; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.h:447,Testability,benchmark,benchmarked,447,"//===-- X86Counter.h --------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Perf counter that reads the LBRs for measuring the benchmarked block's; /// throughput.; ///; /// More info at: https://lwn.net/Articles/680985; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.h:26,Integrability,wrap,wrappers,26,// FIXME: Use appropriate wrappers for poll.h and mman.h; // to support Windows and remove this linux-only guard.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-extract/llvm-extract.cpp:12,Performance,load,loading,12,"// Use lazy loading, since we only care about selected global values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-extract/llvm-extract.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-extract/llvm-extract.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-extract/llvm-extract.cpp:20,Safety,avoid,avoid,20,// Use SetVector to avoid duplicates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-extract/llvm-extract.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-extract/llvm-extract.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp:146,Availability,error,errors,146,"// Make a stream refernce that will become a /dev/null log stream if; // Quiet is true, or normal output if Quiet is false. This can stop the; // errors and warnings from being displayed and producing too much output; // when they aren't desired.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp:55,Testability,log,log,55,"// Make a stream refernce that will become a /dev/null log stream if; // Quiet is true, or normal output if Quiet is false. This can stop the; // errors and warnings from being displayed and producing too much output; // when they aren't desired.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp:237,Performance,load,load,237,"// See if we can figure out the base address for a given object file, and if; // we can, then set the base address to use to this value. This will ease; // symbolication since clients can slide the GSYM lookup addresses by using; // the load bias of the shared library.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp:2,Availability,Recover,RecoverableErrorHandler,2,/*RecoverableErrorHandler=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp:2,Safety,Recover,RecoverableErrorHandler,2,/*RecoverableErrorHandler=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp:8,Availability,error,error,8,// Call error() if we have an error and it will exit with a status of 1,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp:30,Availability,error,error,30,// Call error() if we have an error and it will exit with a status of 1,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp:11,Security,access,access,11,// Dump or access data inside GSYM files,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-gsymutil/llvm-gsymutil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.cpp:7,Availability,Error,ErrorCollector,7,"//===- ErrorCollector.cpp -------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===-----------------------------------------------------------------------===/",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.cpp:106,Availability,error,error,106,// TODO: Make this return something (an AggregateError?) that gives more; // individual control over each error and which might be of interest.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:7,Availability,Error,ErrorCollector,7,"//===- ErrorCollector.h -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===-----------------------------------------------------------------------===/; ///; /// This class collects errors that should be reported or ignored in aggregate.; ///; /// Like llvm::Error, an ErrorCollector cannot be copied. Unlike llvm::Error,; /// an ErrorCollector may be destroyed if it was originally constructed to treat; /// errors as non-fatal. In this case, all Errors are consumed upon destruction.; /// An ErrorCollector may be initially constructed (or escalated) such that; /// errors are treated as fatal. This causes a crash if an attempt is made to; /// delete the ErrorCollector when some Errors have not been retrieved via; /// makeError().; ///; //===-----------------------------------------------------------------------===/",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:405,Availability,error,errors,405,"//===- ErrorCollector.h -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===-----------------------------------------------------------------------===/; ///; /// This class collects errors that should be reported or ignored in aggregate.; ///; /// Like llvm::Error, an ErrorCollector cannot be copied. Unlike llvm::Error,; /// an ErrorCollector may be destroyed if it was originally constructed to treat; /// errors as non-fatal. In this case, all Errors are consumed upon destruction.; /// An ErrorCollector may be initially constructed (or escalated) such that; /// errors are treated as fatal. This causes a crash if an attempt is made to; /// delete the ErrorCollector when some Errors have not been retrieved via; /// makeError().; ///; //===-----------------------------------------------------------------------===/",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:482,Availability,Error,Error,482,"//===- ErrorCollector.h -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===-----------------------------------------------------------------------===/; ///; /// This class collects errors that should be reported or ignored in aggregate.; ///; /// Like llvm::Error, an ErrorCollector cannot be copied. Unlike llvm::Error,; /// an ErrorCollector may be destroyed if it was originally constructed to treat; /// errors as non-fatal. In this case, all Errors are consumed upon destruction.; /// An ErrorCollector may be initially constructed (or escalated) such that; /// errors are treated as fatal. This causes a crash if an attempt is made to; /// delete the ErrorCollector when some Errors have not been retrieved via; /// makeError().; ///; //===-----------------------------------------------------------------------===/",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:492,Availability,Error,ErrorCollector,492,"//===- ErrorCollector.h -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===-----------------------------------------------------------------------===/; ///; /// This class collects errors that should be reported or ignored in aggregate.; ///; /// Like llvm::Error, an ErrorCollector cannot be copied. Unlike llvm::Error,; /// an ErrorCollector may be destroyed if it was originally constructed to treat; /// errors as non-fatal. In this case, all Errors are consumed upon destruction.; /// An ErrorCollector may be initially constructed (or escalated) such that; /// errors are treated as fatal. This causes a crash if an attempt is made to; /// delete the ErrorCollector when some Errors have not been retrieved via; /// makeError().; ///; //===-----------------------------------------------------------------------===/",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:538,Availability,Error,Error,538,"//===- ErrorCollector.h -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===-----------------------------------------------------------------------===/; ///; /// This class collects errors that should be reported or ignored in aggregate.; ///; /// Like llvm::Error, an ErrorCollector cannot be copied. Unlike llvm::Error,; /// an ErrorCollector may be destroyed if it was originally constructed to treat; /// errors as non-fatal. In this case, all Errors are consumed upon destruction.; /// An ErrorCollector may be initially constructed (or escalated) such that; /// errors are treated as fatal. This causes a crash if an attempt is made to; /// delete the ErrorCollector when some Errors have not been retrieved via; /// makeError().; ///; //===-----------------------------------------------------------------------===/",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:553,Availability,Error,ErrorCollector,553,"//===- ErrorCollector.h -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===-----------------------------------------------------------------------===/; ///; /// This class collects errors that should be reported or ignored in aggregate.; ///; /// Like llvm::Error, an ErrorCollector cannot be copied. Unlike llvm::Error,; /// an ErrorCollector may be destroyed if it was originally constructed to treat; /// errors as non-fatal. In this case, all Errors are consumed upon destruction.; /// An ErrorCollector may be initially constructed (or escalated) such that; /// errors are treated as fatal. This causes a crash if an attempt is made to; /// delete the ErrorCollector when some Errors have not been retrieved via; /// makeError().; ///; //===-----------------------------------------------------------------------===/",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:632,Availability,error,errors,632,"//===- ErrorCollector.h -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===-----------------------------------------------------------------------===/; ///; /// This class collects errors that should be reported or ignored in aggregate.; ///; /// Like llvm::Error, an ErrorCollector cannot be copied. Unlike llvm::Error,; /// an ErrorCollector may be destroyed if it was originally constructed to treat; /// errors as non-fatal. In this case, all Errors are consumed upon destruction.; /// An ErrorCollector may be initially constructed (or escalated) such that; /// errors are treated as fatal. This causes a crash if an attempt is made to; /// delete the ErrorCollector when some Errors have not been retrieved via; /// makeError().; ///; //===-----------------------------------------------------------------------===/",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:671,Availability,Error,Errors,671,"//===- ErrorCollector.h -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===-----------------------------------------------------------------------===/; ///; /// This class collects errors that should be reported or ignored in aggregate.; ///; /// Like llvm::Error, an ErrorCollector cannot be copied. Unlike llvm::Error,; /// an ErrorCollector may be destroyed if it was originally constructed to treat; /// errors as non-fatal. In this case, all Errors are consumed upon destruction.; /// An ErrorCollector may be initially constructed (or escalated) such that; /// errors are treated as fatal. This causes a crash if an attempt is made to; /// delete the ErrorCollector when some Errors have not been retrieved via; /// makeError().; ///; //===-----------------------------------------------------------------------===/",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:717,Availability,Error,ErrorCollector,717,"//===- ErrorCollector.h -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===-----------------------------------------------------------------------===/; ///; /// This class collects errors that should be reported or ignored in aggregate.; ///; /// Like llvm::Error, an ErrorCollector cannot be copied. Unlike llvm::Error,; /// an ErrorCollector may be destroyed if it was originally constructed to treat; /// errors as non-fatal. In this case, all Errors are consumed upon destruction.; /// An ErrorCollector may be initially constructed (or escalated) such that; /// errors are treated as fatal. This causes a crash if an attempt is made to; /// delete the ErrorCollector when some Errors have not been retrieved via; /// makeError().; ///; //===-----------------------------------------------------------------------===/",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:791,Availability,error,errors,791,"//===- ErrorCollector.h -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===-----------------------------------------------------------------------===/; ///; /// This class collects errors that should be reported or ignored in aggregate.; ///; /// Like llvm::Error, an ErrorCollector cannot be copied. Unlike llvm::Error,; /// an ErrorCollector may be destroyed if it was originally constructed to treat; /// errors as non-fatal. In this case, all Errors are consumed upon destruction.; /// An ErrorCollector may be initially constructed (or escalated) such that; /// errors are treated as fatal. This causes a crash if an attempt is made to; /// delete the ErrorCollector when some Errors have not been retrieved via; /// makeError().; ///; //===-----------------------------------------------------------------------===/",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:881,Availability,Error,ErrorCollector,881,"//===- ErrorCollector.h -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===-----------------------------------------------------------------------===/; ///; /// This class collects errors that should be reported or ignored in aggregate.; ///; /// Like llvm::Error, an ErrorCollector cannot be copied. Unlike llvm::Error,; /// an ErrorCollector may be destroyed if it was originally constructed to treat; /// errors as non-fatal. In this case, all Errors are consumed upon destruction.; /// An ErrorCollector may be initially constructed (or escalated) such that; /// errors are treated as fatal. This causes a crash if an attempt is made to; /// delete the ErrorCollector when some Errors have not been retrieved via; /// makeError().; ///; //===-----------------------------------------------------------------------===/",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:906,Availability,Error,Errors,906,"//===- ErrorCollector.h -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===-----------------------------------------------------------------------===/; ///; /// This class collects errors that should be reported or ignored in aggregate.; ///; /// Like llvm::Error, an ErrorCollector cannot be copied. Unlike llvm::Error,; /// an ErrorCollector may be destroyed if it was originally constructed to treat; /// errors as non-fatal. In this case, all Errors are consumed upon destruction.; /// An ErrorCollector may be initially constructed (or escalated) such that; /// errors are treated as fatal. This causes a crash if an attempt is made to; /// delete the ErrorCollector when some Errors have not been retrieved via; /// makeError().; ///; //===-----------------------------------------------------------------------===/",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:25,Availability,Error,ErrorCollector,25,"/// Upon destruction, an ErrorCollector will crash if UseFatalErrors=true and; /// there are remaining errors that haven't been fetched by makeError().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:103,Availability,error,errors,103,"/// Upon destruction, an ErrorCollector will crash if UseFatalErrors=true and; /// there are remaining errors that haven't been fetched by makeError().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:100,Availability,error,error,100,// TODO: Add move constructor and operator= when a testable situation arises.; /// Returns a single error that contains messages for all stored Errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:144,Availability,Error,Errors,144,// TODO: Add move constructor and operator= when a testable situation arises.; /// Returns a single error that contains messages for all stored Errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:120,Integrability,message,messages,120,// TODO: Add move constructor and operator= when a testable situation arises.; /// Returns a single error that contains messages for all stored Errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:51,Testability,test,testable,51,// TODO: Add move constructor and operator= when a testable situation arises.; /// Returns a single error that contains messages for all stored Errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:12,Availability,error,error,12,"/// Adds an error with a descriptive tag that helps with identification.; /// If the error is an Error::success(), it is checked and discarded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:85,Availability,error,error,85,"/// Adds an error with a descriptive tag that helps with identification.; /// If the error is an Error::success(), it is checked and discarded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:97,Availability,Error,Error,97,"/// Adds an error with a descriptive tag that helps with identification.; /// If the error is an Error::success(), it is checked and discarded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:20,Availability,Error,ErrorCollector,20,"/// This ensures an ErrorCollector will treat unhandled errors as fatal.; /// This function should be called if errors that usually can be ignored; /// are suddenly of concern (i.e. attempt multiple things that return Error,; /// but only care about the Errors if no attempt succeeds).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:56,Availability,error,errors,56,"/// This ensures an ErrorCollector will treat unhandled errors as fatal.; /// This function should be called if errors that usually can be ignored; /// are suddenly of concern (i.e. attempt multiple things that return Error,; /// but only care about the Errors if no attempt succeeds).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:112,Availability,error,errors,112,"/// This ensures an ErrorCollector will treat unhandled errors as fatal.; /// This function should be called if errors that usually can be ignored; /// are suddenly of concern (i.e. attempt multiple things that return Error,; /// but only care about the Errors if no attempt succeeds).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:218,Availability,Error,Error,218,"/// This ensures an ErrorCollector will treat unhandled errors as fatal.; /// This function should be called if errors that usually can be ignored; /// are suddenly of concern (i.e. attempt multiple things that return Error,; /// but only care about the Errors if no attempt succeeds).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:254,Availability,Error,Errors,254,"/// This ensures an ErrorCollector will treat unhandled errors as fatal.; /// This function should be called if errors that usually can be ignored; /// are suddenly of concern (i.e. attempt multiple things that return Error,; /// but only care about the Errors if no attempt succeeds).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:13,Availability,error,errors,13,/// Logs all errors to a raw_ostream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:4,Testability,Log,Logs,4,/// Logs all errors to a raw_ostream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:24,Availability,error,errors,24,"/// Returns true if all errors have been retrieved through makeError(), or; /// false if errors have been added since the last makeError() call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:89,Availability,error,errors,89,"/// Returns true if all errors have been retrieved through makeError(), or; /// false if errors have been added since the last makeError() call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/llvm-ifs.cpp:37,Availability,error,error,37,"// If both readers fail, build a new error that includes all information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/llvm-ifs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/llvm-ifs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/llvm-ifs.cpp:39,Testability,stub,stub,39,/// writeIFS() writes a Text-Based ELF stub to a file using the latest version; /// of the YAML parser.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/llvm-ifs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/llvm-ifs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/llvm-ifs.cpp:64,Safety,avoid,avoid,64,"// Compare IFS output with the existing IFS file. If unchanged, avoid; // changing the file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/llvm-ifs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/llvm-ifs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/llvm-ifs.cpp:33,Testability,stub,stubs,33,// Change SoName before emitting stubs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ifs/llvm-ifs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/llvm-ifs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-isel-fuzzer/DummyISelFuzzer.cpp:45,Safety,sanity check,sanity check,45,"//===-- DummyISelFuzzer.cpp - Entry point to sanity check the fuzzer ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-isel-fuzzer/DummyISelFuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-isel-fuzzer/DummyISelFuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-isel-fuzzer/DummyISelFuzzer.cpp:426,Testability,test,test,426,"//===-- DummyISelFuzzer.cpp - Entry point to sanity check the fuzzer ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-isel-fuzzer/DummyISelFuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-isel-fuzzer/DummyISelFuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-isel-fuzzer/llvm-isel-fuzzer.cpp:29,Usability,guid,guide,29,// use max bitcode size as a guide,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-isel-fuzzer/llvm-isel-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-isel-fuzzer/llvm-isel-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-isel-fuzzer/llvm-isel-fuzzer.cpp:14,Deployability,pipeline,pipeline,14,// Set up the pipeline like llc does.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-isel-fuzzer/llvm-isel-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-isel-fuzzer/llvm-isel-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-isel-fuzzer/llvm-isel-fuzzer.cpp:65,Availability,error,errors,65,// Make sure we print the summary and the current unit when LLVM errors out.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-isel-fuzzer/llvm-isel-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-isel-fuzzer/llvm-isel-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-itanium-demangle-fuzzer/DummyDemanglerFuzzer.cpp:50,Safety,sanity check,sanity check,50,"//===-- DummyDemanglerFuzzer.cpp - Entry point to sanity check the fuzzer -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-itanium-demangle-fuzzer/DummyDemanglerFuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-itanium-demangle-fuzzer/DummyDemanglerFuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-itanium-demangle-fuzzer/DummyDemanglerFuzzer.cpp:426,Testability,test,test,426,"//===-- DummyDemanglerFuzzer.cpp - Entry point to sanity check the fuzzer -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-itanium-demangle-fuzzer/DummyDemanglerFuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-itanium-demangle-fuzzer/DummyDemanglerFuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:40,Integrability,interface,interface,40,"//===- llvm-jitlink.cpp -- Command line interface/tester for llvm-jitlink -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This utility provides a simple command line interface to the llvm jitlink; // library, which makes relocatable object files executable in memory. Its; // primary function is as a testing utility for the jitlink library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:427,Integrability,interface,interface,427,"//===- llvm-jitlink.cpp -- Command line interface/tester for llvm-jitlink -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This utility provides a simple command line interface to the llvm jitlink; // library, which makes relocatable object files executable in memory. Its; // primary function is as a testing utility for the jitlink library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:50,Testability,test,tester,50,"//===- llvm-jitlink.cpp -- Command line interface/tester for llvm-jitlink -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This utility provides a simple command line interface to the llvm jitlink; // library, which makes relocatable object files executable in memory. Its; // primary function is as a testing utility for the jitlink library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:562,Testability,test,testing,562,"//===- llvm-jitlink.cpp -- Command line interface/tester for llvm-jitlink -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This utility provides a simple command line interface to the llvm jitlink; // library, which makes relocatable object files executable in memory. Its; // primary function is as a testing utility for the jitlink library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:407,Usability,simpl,simple,407,"//===- llvm-jitlink.cpp -- Command line interface/tester for llvm-jitlink -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This utility provides a simple command line interface to the llvm jitlink; // library, which makes relocatable object files executable in memory. Its; // primary function is as a testing utility for the jitlink library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:32,Testability,test,test,32,// If this graph is part of the test harness there's nothing to do.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:32,Testability,test,test,32,"// If this graph is part of the test then promote any symbols referenced by; // the harness to default scope, remove all symbols that clash with harness; // definitions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:68,Testability,test,testing,68,// A memory mapper with a fake offset applied only used for -noexec testing,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:20,Integrability,interface,interface,20,"// Get the standard interface for this object, but ignore the symbols field.; // We'll handle that manually to include promotion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:19,Availability,error,error,19,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:9,Testability,Test,Test,9,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:45,Integrability,depend,depends,45,// Out of process mode using SimpleRemoteEPC depends on threads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:29,Usability,Simpl,SimpleRemoteEPC,29,// Out of process mode using SimpleRemoteEPC depends on threads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:95,Availability,error,error,95,"// If we reached the end of the loop without connecting to a valid endpoint,; // dump the last error that was logged in socket() or connect().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:110,Testability,log,logged,110,"// If we reached the end of the loop without connecting to a valid endpoint,; // dump the last error that was logged in socket() or connect().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:45,Integrability,depend,depends,45,// Out of process mode using SimpleRemoteEPC depends on threads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:29,Usability,Simpl,SimpleRemoteEPC,29,// Out of process mode using SimpleRemoteEPC depends on threads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:30,Modifiability,Plugin,Plugin,30,/// Local ObjectLinkingLayer::Plugin class to forward modifyPassConfig to the; /// Session.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:107,Availability,avail,available,107,"// This symbol is used in testcases, but we're not reflecting process; // symbols so we'll need to make it available some other way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:26,Testability,test,testcases,26,"// This symbol is used in testcases, but we're not reflecting process; // symbols so we'll need to make it available some other way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:14,Testability,stub,stubs,14,// Let's keep stubs ordered by ascending address.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:18,Testability,stub,stub,18,// Regular single-stub match,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:49,Testability,test,tests,49,// Disable debugger support by default in noexec tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:12,Energy Efficiency,allocate,allocate,12,"// If -slab-allocate is passed, check that we're not trying to use it in; // -oop-executor or -oop-executor-connect mode.; //; // FIXME: Remove once we enable remote slab allocation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:45,Energy Efficiency,allocate,allocate,45,"// If -slab-address is passed, require -slab-allocate and -noexec",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:3,Performance,Load,Load,3,// Load each object into the corresponding JITDylib..,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:40,Integrability,interface,interface,40,// We're in -harness mode. Use a custom interface for this; // test object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:63,Testability,test,test,63,// We're in -harness mode. Use a custom interface for this; // test object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:22,Performance,load,loads,22,// 2. Collect library loads,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:3,Performance,Queue,Queue,3,// Queue to load library as in the order as it appears in the argument list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:12,Performance,load,load,12,// Queue to load library as in the order as it appears in the argument list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:99,Availability,error,errors,99,// If there are any load-<modified> options then turn on flag overrides; // to avoid flag mismatch errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:20,Performance,load,load,20,// If there are any load-<modified> options then turn on flag overrides; // to avoid flag mismatch errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:79,Safety,avoid,avoid,79,// If there are any load-<modified> options then turn on flag overrides; // to avoid flag mismatch errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:16,Performance,load,loads,16,// Sort library loads by position in the argument list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:22,Performance,load,loads,22,// 3. Process library loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:19,Availability,error,error,19,// If there was an error loading the file then skip it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:25,Performance,load,loading,25,// If there was an error loading the file then skip it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:47,Performance,load,load,47,// We identified the magic. Assume that we can load it -- we'll reset; // in the default case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:39,Availability,avail,available,39,// Add platform and process symbols if available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:31,Testability,test,test,31,// If the executing code set a test result override then use that.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h:33,Testability,stub,stubs,33,"/// Record symbols, GOT entries, stubs, and sections for ELF file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h:33,Testability,stub,stubs,33,"/// Record symbols, GOT entries, stubs, and sections for MachO file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h:33,Testability,stub,stubs,33,"/// Record symbols, GOT entries, stubs, and sections for COFF file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h:32,Modifiability,plugin,plugin,32,/// Adds a statistics gathering plugin if any stats options are used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink-executor/llvm-jitlink-executor.cpp:382,Usability,Simpl,Simple,382,"//===- llvm-jitlink-executor.cpp - Out-of-proc executor for llvm-jitlink -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Simple out-of-process executor for llvm-jitlink.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink-executor/llvm-jitlink-executor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink-executor/llvm-jitlink-executor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink-executor/llvm-jitlink-executor.cpp:34,Availability,error,errors,34,"// Avoid ""Address already in use"" errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink-executor/llvm-jitlink-executor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink-executor/llvm-jitlink-executor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink-executor/llvm-jitlink-executor.cpp:3,Safety,Avoid,Avoid,3,"// Avoid ""Address already in use"" errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink-executor/llvm-jitlink-executor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink-executor/llvm-jitlink-executor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink-executor/llvm-jitlink-executor.cpp:86,Integrability,Interface,Interface,86,// JITLink debug support plugins put information about JITed code in this GDB; // JIT Interface global from OrcTargetProcess.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink-executor/llvm-jitlink-executor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink-executor/llvm-jitlink-executor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink-executor/llvm-jitlink-executor.cpp:25,Modifiability,plugin,plugins,25,// JITLink debug support plugins put information about JITed code in this GDB; // JIT Interface global from OrcTargetProcess.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink-executor/llvm-jitlink-executor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink-executor/llvm-jitlink-executor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp:460,Integrability,interface,interface,460,"//===-- llvm-jitlistener.cpp - Utility for testing MCJIT event listener ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program is a used by lit tests to verify the MCJIT JITEventListener; // interface. It registers a mock JIT event listener, generates a module from; // an input IR file and dumps the reported event information to stdout.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp:43,Testability,test,testing,43,"//===-- llvm-jitlistener.cpp - Utility for testing MCJIT event listener ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program is a used by lit tests to verify the MCJIT JITEventListener; // interface. It registers a mock JIT event listener, generates a module from; // an input IR file and dumps the reported event information to stdout.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp:413,Testability,test,tests,413,"//===-- llvm-jitlistener.cpp - Utility for testing MCJIT event listener ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program is a used by lit tests to verify the MCJIT JITEventListener; // interface. It registers a mock JIT event listener, generates a module from; // an input IR file and dumps the reported event information to stdout.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp:486,Testability,mock,mock,486,"//===-- llvm-jitlistener.cpp - Utility for testing MCJIT event listener ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program is a used by lit tests to verify the MCJIT JITEventListener; // interface. It registers a mock JIT event listener, generates a module from; // an input IR file and dumps the reported event information to stdout.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp:7,Testability,test,testing,7,"// for testing, pretend we have an Intel Parallel Amplifier XE 2011; // instance attached",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp:79,Usability,usab,usable,79,"// If we have a native target, initialize it to ensure it is linked in and; // usable by the JIT.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/DependencyInfo.h:8,Integrability,Depend,DependencyInfo,8,"//===-- DependencyInfo.h --------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/DependencyInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/DependencyInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/DependencyInfo.h:14,Integrability,depend,dependencies,14,// Writes the dependencies to specified path. The content is first sorted by; // OpCode and then by the filename (in alphabetical order).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/DependencyInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/DependencyInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/DependencyInfo.h:15,Safety,avoid,avoid,15,// Subclass to avoid any overhead when not using this feature,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/DependencyInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/DependencyInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp:3,Deployability,Update,Updated,3,// Updated by 'D' and 'U' modifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp:9,Availability,error,error,9,// Throw error if not a valid object file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp:9,Availability,error,error,9,// Throw error if not in Mach-O format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp:9,Availability,error,error,9,// Throw error if not a valid IR object file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp:3,Deployability,Update,Update,3,// Update vector FileBuffers with the MemoryBuffers to transfer; // ownership.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp:177,Availability,error,error,177,"// A universal file member can be a MachOObjectFile, an IRObject or an; // Archive. In case we can successfully cast the member as an; // IRObject, it is safe to throw away the error generated due to; // casting the object as a MachOObjectFile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp:154,Safety,safe,safe,154,"// A universal file member can be a MachOObjectFile, an IRObject or an; // Archive. In case we can successfully cast the member as an; // IRObject, it is safe to throw away the error generated due to; // casting the object as a MachOObjectFile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp:176,Availability,error,error,176,"// A universal file member can be a MachOObjectFile, an IRObject or an; // Archive. In case we can successfully cast the member as an Archive,; // it is safe to throw away the error generated due to casting the; // object as a MachOObjectFile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp:153,Safety,safe,safe,153,"// A universal file member can be a MachOObjectFile, an IRObject or an; // Archive. In case we can successfully cast the member as an Archive,; // it is safe to throw away the error generated due to casting the; // object as a MachOObjectFile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp:3,Deployability,Update,Update,3,// Update vector FileBuffers with the MemoryBuffers to transfer; // ownership.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:45,Testability,test,testing,45,// Option to simulate function importing for testing. This enables using; // llvm-link to simulate ThinLTO backend processes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:21,Testability,test,testing,21,"// Option to support testing of function importing. The module summary; // must be specified in the case were we request imports via the -import; // option, as well as when compiling any module with functions that may be; // exported (imported by a different llvm-link -import invocation), to ensure; // consistent promotion and renaming of locals.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:58,Integrability,rout,routine,58,// Read the specified bitcode file in and return it. This routine searches the; // link path for the specified file to try to find it...; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:14,Performance,load,load,14,/// Helper to load on demand a Module from file and cache it for subsequent; /// queries during function importing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:52,Performance,cache,cache,52,/// Helper to load on demand a Module from file and cache it for subsequent; /// queries during function importing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:4,Performance,Cache,Cache,4,/// Cache of lazily loaded module for import.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:20,Performance,load,loaded,20,/// Cache of lazily loaded module for import.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:31,Performance,cache,cache,31,/// Retrieve a Module from the cache or lazily load it on demand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:47,Performance,load,load,47,/// Retrieve a Module from the cache or lazily load it on demand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:15,Performance,load,loader,15,"/// Create the loader, Module will be initialized in \p Context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:31,Performance,cache,cache,31,/// Retrieve a Module from the cache or lazily load it on demand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:47,Performance,load,load,47,/// Retrieve a Module from the cache or lazily load it on demand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:41,Performance,cache,cache,41,"// Get a Module for \p FileName from the cache, or load it lazily.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:51,Performance,load,load,51,"// Get a Module for \p FileName from the cache, or load it lazily.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:232,Performance,cache,cache,232,"// Owns the filename strings used to key into the ImportList. Normally this is; // constructed from the index and the strings are owned by the index, however,; // since we are synthesizing this data structure from options we need a cache; // to own those strings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:3,Performance,Load,Load,3,// Load the specified source module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:2,Usability,Clear,ClearDSOLocalOnDeclarations,2,/*ClearDSOLocalOnDeclarations=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:58,Performance,load,load,58,// Filter out flags that don't apply to the first file we load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:96,Modifiability,variab,variables,96,"// If a module summary index is supplied, load it so linkInModule can treat; // local functions/variables as exported and promote if necessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:42,Performance,load,load,42,"// If a module summary index is supplied, load it so linkInModule can treat; // local functions/variables as exported and promote if necessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:2,Usability,Clear,ClearDSOLocalOnDeclarations,2,/*ClearDSOLocalOnDeclarations=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lipo/llvm-lipo.cpp:3,Availability,error,errors,3,"// errors if multiple actions specified other than replace; // multiple replace flags may be specified, as long as they are not mixed with; // other action flags",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lipo/llvm-lipo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lipo/llvm-lipo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lipo/llvm-lipo.cpp:46,Testability,test,tested,46,"// This should be always the case, as this is tested in readInputBinaries",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lipo/llvm-lipo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lipo/llvm-lipo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lipo/llvm-lipo.cpp:3,Deployability,Update,Updates,3,// Updates vector ExtractedObjects with the MachOObjectFiles extracted from; // Universal Binary files to transfer ownership.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lipo/llvm-lipo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lipo/llvm-lipo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lipo/llvm-lipo.cpp:50,Availability,error,error,50,"// populates StringMap of slices to replace with; error checks for mismatched; // replace flag args, fat files, and duplicate arch_types",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lipo/llvm-lipo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lipo/llvm-lipo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:442,Performance,perform,performs,442,"//===- llvm-lto: a simple command-line program to link modules with LTO ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program takes in a list of bitcode files, links them, performs link-time; // optimization, and outputs an object file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:465,Performance,optimiz,optimization,465,"//===- llvm-lto: a simple command-line program to link modules with LTO ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program takes in a list of bitcode files, links them, performs link-time; // optimization, and outputs an object file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:19,Usability,simpl,simple,19,"//===- llvm-lto: a simple command-line program to link modules with LTO ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program takes in a list of bitcode files, links them, performs link-time; // optimization, and outputs an object file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:4,Performance,Load,Load,4,"/// Load each IR file and dump certain information based on active flags.; ///; /// The main point here is to provide lit-testable coverage for the LTOModule; /// functionality that's exposed by the C API. Moreover, this provides testing; /// coverage for modules that have been created in their own contexts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:184,Security,expose,exposed,184,"/// Load each IR file and dump certain information based on active flags.; ///; /// The main point here is to provide lit-testable coverage for the LTOModule; /// functionality that's exposed by the C API. Moreover, this provides testing; /// coverage for modules that have been created in their own contexts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:122,Testability,test,testable,122,"/// Load each IR file and dump certain information based on active flags.; ///; /// The main point here is to provide lit-testable coverage for the LTOModule; /// functionality that's exposed by the C API. Moreover, this provides testing; /// coverage for modules that have been created in their own contexts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:230,Testability,test,testing,230,"/// Load each IR file and dump certain information based on active flags.; ///; /// The main point here is to provide lit-testable coverage for the LTOModule; /// functionality that's exposed by the C API. Moreover, this provides testing; /// coverage for modules that have been created in their own contexts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:12,Integrability,depend,dependent,12,// List the dependent libraries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:166,Availability,avail,available,166,"/// Create a combined index file from the input IR files and write it.; ///; /// This is meant to enable testing of ThinLTO combined index generation,; /// currently available via the gold plugin via -thinlto.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:189,Modifiability,plugin,plugin,189,"/// Create a combined index file from the input IR files and write it.; ///; /// This is meant to enable testing of ThinLTO combined index generation,; /// currently available via the gold plugin via -thinlto.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:105,Testability,test,testing,105,"/// Create a combined index file from the input IR files and write it.; ///; /// This is meant to enable testing of ThinLTO combined index generation,; /// currently available via the gold plugin via -thinlto.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:87,Deployability,update,update,87,"// In order to use this index for testing, specifically import testing, we; // need to update any indirect call edges created from SamplePGO, so that they; // point to the correct GUIDs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:34,Testability,test,testing,34,"// In order to use this index for testing, specifically import testing, we; // need to update any indirect call edges created from SamplePGO, so that they; // point to the correct GUIDs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:63,Testability,test,testing,63,"// In order to use this index for testing, specifically import testing, we; // need to update any indirect call edges created from SamplePGO, so that they; // point to the correct GUIDs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:180,Usability,GUID,GUIDs,180,"// In order to use this index for testing, specifically import testing, we; // need to update any indirect call edges created from SamplePGO, so that they; // point to the correct GUIDs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:4,Performance,Load,Load,4,"/// Load the input files, create the combined index, and write it out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:3,Performance,Perform,Perform,3,"// Perform ""ThinLink"": just produce the index",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:4,Performance,Load,Load,4,"/// Load the combined index from disk, then compute and generate; /// individual index files suitable for ThinLTO distributed backend builds; /// on the files mentioned on the command line (these must match the index; /// content).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:32,Usability,GUID,GUIDs,32,// Build a map of module to the GUIDs and summary objects that should; // be written to its index.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:4,Performance,Load,Load,4,"/// Load the combined index from disk, compute the imports, and emit; /// the import file lists for each module to disk.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:4,Performance,Load,Load,4,"/// Load the combined index from disk, then load every file referenced by; /// the index and add them to the generator, finally perform the promotion; /// on the files mentioned on the command line (these must match the index; /// content).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:44,Performance,load,load,44,"/// Load the combined index from disk, then load every file referenced by; /// the index and add them to the generator, finally perform the promotion; /// on the files mentioned on the command line (these must match the index; /// content).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:128,Performance,perform,perform,128,"/// Load the combined index from disk, then load every file referenced by; /// the index and add them to the generator, finally perform the promotion; /// on the files mentioned on the command line (these must match the index; /// content).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:4,Performance,Load,Load,4,"/// Load the combined index from disk, then load every file referenced by; /// the index and add them to the generator, then performs the promotion and; /// cross module importing on the files mentioned on the command line; /// (these must match the index content).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:44,Performance,load,load,44,"/// Load the combined index from disk, then load every file referenced by; /// the index and add them to the generator, then performs the promotion and; /// cross module importing on the files mentioned on the command line; /// (these must match the index content).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:125,Performance,perform,performs,125,"/// Load the combined index from disk, then load every file referenced by; /// the index and add them to the generator, then performs the promotion and; /// cross module importing on the files mentioned on the command line; /// (these must match the index content).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:4,Performance,Load,Load,4,"/// Load the combined index from disk, then load every file referenced by",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:44,Performance,load,load,44,"/// Load the combined index from disk, then load every file referenced by",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:18,Modifiability,config,configured,18,// Initialize the configured targets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:11,Integrability,message,message,11,// Print a message here so that we know addModule() did not abort.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:60,Safety,abort,abort,60,// Print a message here so that we know addModule() did not abort.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:54,Security,expose,expose,54,// Add all the dso symbols to the table of symbols to expose.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:14,Integrability,message,messages,14,// Diagnostic messages should have been printed by the handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:14,Integrability,message,messages,14,// Diagnostic messages should have been printed by the handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp:14,Integrability,message,messages,14,// Diagnostic messages should have been printed by the handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto/llvm-lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp:61,Integrability,interface,interface,61,"//===-- llvm-lto2: test harness for the resolution-based LTO interface ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program takes in a list of bitcode files, links them and performs; // link-time optimization according to the provided symbol resolutions using the; // resolution-based LTO interface, and outputs one or more object files.; //; // This program is intended to eventually replace llvm-lto which uses the legacy; // LTO interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp:561,Integrability,interface,interface,561,"//===-- llvm-lto2: test harness for the resolution-based LTO interface ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program takes in a list of bitcode files, links them and performs; // link-time optimization according to the provided symbol resolutions using the; // resolution-based LTO interface, and outputs one or more object files.; //; // This program is intended to eventually replace llvm-lto which uses the legacy; // LTO interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp:704,Integrability,interface,interface,704,"//===-- llvm-lto2: test harness for the resolution-based LTO interface ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program takes in a list of bitcode files, links them and performs; // link-time optimization according to the provided symbol resolutions using the; // resolution-based LTO interface, and outputs one or more object files.; //; // This program is intended to eventually replace llvm-lto which uses the legacy; // LTO interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp:445,Performance,perform,performs,445,"//===-- llvm-lto2: test harness for the resolution-based LTO interface ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program takes in a list of bitcode files, links them and performs; // link-time optimization according to the provided symbol resolutions using the; // resolution-based LTO interface, and outputs one or more object files.; //; // This program is intended to eventually replace llvm-lto which uses the legacy; // LTO interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp:468,Performance,optimiz,optimization,468,"//===-- llvm-lto2: test harness for the resolution-based LTO interface ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program takes in a list of bitcode files, links them and performs; // link-time optimization according to the provided symbol resolutions using the; // resolution-based LTO interface, and outputs one or more object files.; //; // This program is intended to eventually replace llvm-lto which uses the legacy; // LTO interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp:19,Testability,test,test,19,"//===-- llvm-lto2: test harness for the resolution-based LTO interface ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program takes in a list of bitcode files, links them and performs; // link-time optimization according to the provided symbol resolutions using the; // resolution-based LTO interface, and outputs one or more object files.; //; // This program is intended to eventually replace llvm-lto which uses the legacy; // LTO interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp:24,Availability,avail,available,24,"// Default to using all available threads in the system, but using only one; // thread per core (no SMT).; // Use -thinlto-threads=all to use hardware_concurrency() instead, which means; // to use all hardware threads or cores in the system.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp:3,Performance,Optimiz,Optimization,3,// Optimization remarks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp:16,Deployability,pipeline,pipeline,16,"// Run a custom pipeline, if asked for.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp:27,Availability,error,error,27,"// Track whether we hit an error; in particular, in the multi-threaded case,; // we can't exit() early because the rest of the threads wouldn't have had a; // change to be join-ed, and that would result in a ""terminate called without; // an active exception"". Altogether, this results in nondeterministic; // behavior. Instead, we don't exit in the multi-threaded case, but we make; // sure to report the error and then at the end (after joining cleanly); // exit(1).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp:405,Availability,error,error,405,"// Track whether we hit an error; in particular, in the multi-threaded case,; // we can't exit() early because the rest of the threads wouldn't have had a; // change to be join-ed, and that would result in a ""terminate called without; // an active exception"". Altogether, this results in nondeterministic; // behavior. Instead, we don't exit in the multi-threaded case, but we make; // sure to report the error and then at the end (after joining cleanly); // exit(1).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp:56,Performance,multi-thread,multi-threaded,56,"// Track whether we hit an error; in particular, in the multi-threaded case,; // we can't exit() early because the rest of the threads wouldn't have had a; // change to be join-ed, and that would result in a ""terminate called without; // an active exception"". Altogether, this results in nondeterministic; // behavior. Instead, we don't exit in the multi-threaded case, but we make; // sure to report the error and then at the end (after joining cleanly); // exit(1).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp:349,Performance,multi-thread,multi-threaded,349,"// Track whether we hit an error; in particular, in the multi-threaded case,; // we can't exit() early because the rest of the threads wouldn't have had a; // change to be join-ed, and that would result in a ""terminate called without; // an active exception"". Altogether, this results in nondeterministic; // behavior. Instead, we don't exit in the multi-threaded case, but we make; // sure to report the error and then at the end (after joining cleanly); // exit(1).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp:83,Security,hash,hash,83,"// If it isn't found, look for ""."", which would have been added; // (followed by a hash) when the symbol was promoted during module; // splitting if it was defined in one part and used in the other.; // Try looking up the symbol name before the suffix.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lto2/llvm-lto2.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc/Disassembler.cpp:17,Availability,error,error,17,"// If we have an error, print it and skip to the end of line.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mc/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc/llvm-mc.cpp:401,Usability,simpl,simple,401,"//===-- llvm-mc.cpp - Machine Code Hacking Driver ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This utility is a simple driver that allows command line hacking on machine; // code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mc/llvm-mc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc/llvm-mc.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc/llvm-mc.cpp:3,Deployability,Update,Update,3,// Update the triple name and return the found target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mc/llvm-mc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc/llvm-mc.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc/llvm-mc.cpp:68,Safety,safe,safe,68,"// Now that GetTarget() has (potentially) replaced TripleName, it's safe to; // construct the Triple object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mc/llvm-mc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc/llvm-mc.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc/llvm-mc.cpp:21,Availability,error,errors,21,// Keep output if no errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mc/llvm-mc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc/llvm-mc.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp:22,Modifiability,variab,variable-length,22,// This is useful for variable-length instruction sets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp:1109,Safety,redund,redundancy,1109,"// The command line is unusual compared to other fuzzers due to the need to; // specify the target. Options like -triple, -mcpu, and -mattr work like; // their counterparts in llvm-mc, while -fuzzer-args collects options for the; // fuzzer itself.; //; // Examples:; //; // Fuzz the big-endian MIPS32R6 disassembler using 100,000 inputs of up to; // 4-bytes each and use the contents of ./corpus as the test corpus:; // llvm-mc-fuzzer -triple mips-linux-gnu -mcpu=mips32r6 -disassemble \; // -fuzzer-args -max_len=4 -runs=100000 ./corpus; //; // Infinitely fuzz the little-endian MIPS64R2 disassembler with the MSA; // feature enabled using up to 64-byte inputs:; // llvm-mc-fuzzer -triple mipsel-linux-gnu -mcpu=mips64r2 -mattr=msa \; // -disassemble -fuzzer-args ./corpus; //; // If your aim is to find instructions that are not tested, then it is; // advisable to constrain the maximum input size to a single instruction; // using -max_len as in the first example. This results in a test corpus of; // individual instructions that test unique paths. Without this constraint,; // there will be considerable redundancy in the corpus.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp:403,Testability,test,test,403,"// The command line is unusual compared to other fuzzers due to the need to; // specify the target. Options like -triple, -mcpu, and -mattr work like; // their counterparts in llvm-mc, while -fuzzer-args collects options for the; // fuzzer itself.; //; // Examples:; //; // Fuzz the big-endian MIPS32R6 disassembler using 100,000 inputs of up to; // 4-bytes each and use the contents of ./corpus as the test corpus:; // llvm-mc-fuzzer -triple mips-linux-gnu -mcpu=mips32r6 -disassemble \; // -fuzzer-args -max_len=4 -runs=100000 ./corpus; //; // Infinitely fuzz the little-endian MIPS64R2 disassembler with the MSA; // feature enabled using up to 64-byte inputs:; // llvm-mc-fuzzer -triple mipsel-linux-gnu -mcpu=mips64r2 -mattr=msa \; // -disassemble -fuzzer-args ./corpus; //; // If your aim is to find instructions that are not tested, then it is; // advisable to constrain the maximum input size to a single instruction; // using -max_len as in the first example. This results in a test corpus of; // individual instructions that test unique paths. Without this constraint,; // there will be considerable redundancy in the corpus.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp:831,Testability,test,tested,831,"// The command line is unusual compared to other fuzzers due to the need to; // specify the target. Options like -triple, -mcpu, and -mattr work like; // their counterparts in llvm-mc, while -fuzzer-args collects options for the; // fuzzer itself.; //; // Examples:; //; // Fuzz the big-endian MIPS32R6 disassembler using 100,000 inputs of up to; // 4-bytes each and use the contents of ./corpus as the test corpus:; // llvm-mc-fuzzer -triple mips-linux-gnu -mcpu=mips32r6 -disassemble \; // -fuzzer-args -max_len=4 -runs=100000 ./corpus; //; // Infinitely fuzz the little-endian MIPS64R2 disassembler with the MSA; // feature enabled using up to 64-byte inputs:; // llvm-mc-fuzzer -triple mipsel-linux-gnu -mcpu=mips64r2 -mattr=msa \; // -disassemble -fuzzer-args ./corpus; //; // If your aim is to find instructions that are not tested, then it is; // advisable to constrain the maximum input size to a single instruction; // using -max_len as in the first example. This results in a test corpus of; // individual instructions that test unique paths. Without this constraint,; // there will be considerable redundancy in the corpus.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp:986,Testability,test,test,986,"// The command line is unusual compared to other fuzzers due to the need to; // specify the target. Options like -triple, -mcpu, and -mattr work like; // their counterparts in llvm-mc, while -fuzzer-args collects options for the; // fuzzer itself.; //; // Examples:; //; // Fuzz the big-endian MIPS32R6 disassembler using 100,000 inputs of up to; // 4-bytes each and use the contents of ./corpus as the test corpus:; // llvm-mc-fuzzer -triple mips-linux-gnu -mcpu=mips32r6 -disassemble \; // -fuzzer-args -max_len=4 -runs=100000 ./corpus; //; // Infinitely fuzz the little-endian MIPS64R2 disassembler with the MSA; // feature enabled using up to 64-byte inputs:; // llvm-mc-fuzzer -triple mipsel-linux-gnu -mcpu=mips64r2 -mattr=msa \; // -disassemble -fuzzer-args ./corpus; //; // If your aim is to find instructions that are not tested, then it is; // advisable to constrain the maximum input size to a single instruction; // using -max_len as in the first example. This results in a test corpus of; // individual instructions that test unique paths. Without this constraint,; // there will be considerable redundancy in the corpus.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp:1034,Testability,test,test,1034,"// The command line is unusual compared to other fuzzers due to the need to; // specify the target. Options like -triple, -mcpu, and -mattr work like; // their counterparts in llvm-mc, while -fuzzer-args collects options for the; // fuzzer itself.; //; // Examples:; //; // Fuzz the big-endian MIPS32R6 disassembler using 100,000 inputs of up to; // 4-bytes each and use the contents of ./corpus as the test corpus:; // llvm-mc-fuzzer -triple mips-linux-gnu -mcpu=mips32r6 -disassemble \; // -fuzzer-args -max_len=4 -runs=100000 ./corpus; //; // Infinitely fuzz the little-endian MIPS64R2 disassembler with the MSA; // feature enabled using up to 64-byte inputs:; // llvm-mc-fuzzer -triple mipsel-linux-gnu -mcpu=mips64r2 -mattr=msa \; // -disassemble -fuzzer-args ./corpus; //; // If your aim is to find instructions that are not tested, then it is; // advisable to constrain the maximum input size to a single instruction; // using -max_len as in the first example. This results in a test corpus of; // individual instructions that test unique paths. Without this constraint,; // there will be considerable redundancy in the corpus.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp:294,Safety,avoid,avoid,294,// Rebuild the argv without the arguments llvm-mc-fuzzer consumed so that; // the driver can parse its arguments.; //; // FuzzerArgs cannot provide the non-const pointer that OriginalArgv needs.; // Re-use the strings from OriginalArgv instead of copying FuzzerArg to a; // non-const buffer to avoid the need to clean up when the fuzzer terminates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp:22,Modifiability,variab,variable-length,22,// This is useful for variable-length instruction sets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp:1109,Safety,redund,redundancy,1109,"// The command line is unusual compared to other fuzzers due to the need to; // specify the target. Options like -triple, -mcpu, and -mattr work like; // their counterparts in llvm-mc, while -fuzzer-args collects options for the; // fuzzer itself.; //; // Examples:; //; // Fuzz the big-endian MIPS32R6 disassembler using 100,000 inputs of up to; // 4-bytes each and use the contents of ./corpus as the test corpus:; // llvm-mc-fuzzer -triple mips-linux-gnu -mcpu=mips32r6 -disassemble \; // -fuzzer-args -max_len=4 -runs=100000 ./corpus; //; // Infinitely fuzz the little-endian MIPS64R2 disassembler with the MSA; // feature enabled using up to 64-byte inputs:; // llvm-mc-fuzzer -triple mipsel-linux-gnu -mcpu=mips64r2 -mattr=msa \; // -disassemble -fuzzer-args ./corpus; //; // If your aim is to find instructions that are not tested, then it is; // advisable to constrain the maximum input size to a single instruction; // using -max_len as in the first example. This results in a test corpus of; // individual instructions that test unique paths. Without this constraint,; // there will be considerable redundancy in the corpus.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp:403,Testability,test,test,403,"// The command line is unusual compared to other fuzzers due to the need to; // specify the target. Options like -triple, -mcpu, and -mattr work like; // their counterparts in llvm-mc, while -fuzzer-args collects options for the; // fuzzer itself.; //; // Examples:; //; // Fuzz the big-endian MIPS32R6 disassembler using 100,000 inputs of up to; // 4-bytes each and use the contents of ./corpus as the test corpus:; // llvm-mc-fuzzer -triple mips-linux-gnu -mcpu=mips32r6 -disassemble \; // -fuzzer-args -max_len=4 -runs=100000 ./corpus; //; // Infinitely fuzz the little-endian MIPS64R2 disassembler with the MSA; // feature enabled using up to 64-byte inputs:; // llvm-mc-fuzzer -triple mipsel-linux-gnu -mcpu=mips64r2 -mattr=msa \; // -disassemble -fuzzer-args ./corpus; //; // If your aim is to find instructions that are not tested, then it is; // advisable to constrain the maximum input size to a single instruction; // using -max_len as in the first example. This results in a test corpus of; // individual instructions that test unique paths. Without this constraint,; // there will be considerable redundancy in the corpus.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp:831,Testability,test,tested,831,"// The command line is unusual compared to other fuzzers due to the need to; // specify the target. Options like -triple, -mcpu, and -mattr work like; // their counterparts in llvm-mc, while -fuzzer-args collects options for the; // fuzzer itself.; //; // Examples:; //; // Fuzz the big-endian MIPS32R6 disassembler using 100,000 inputs of up to; // 4-bytes each and use the contents of ./corpus as the test corpus:; // llvm-mc-fuzzer -triple mips-linux-gnu -mcpu=mips32r6 -disassemble \; // -fuzzer-args -max_len=4 -runs=100000 ./corpus; //; // Infinitely fuzz the little-endian MIPS64R2 disassembler with the MSA; // feature enabled using up to 64-byte inputs:; // llvm-mc-fuzzer -triple mipsel-linux-gnu -mcpu=mips64r2 -mattr=msa \; // -disassemble -fuzzer-args ./corpus; //; // If your aim is to find instructions that are not tested, then it is; // advisable to constrain the maximum input size to a single instruction; // using -max_len as in the first example. This results in a test corpus of; // individual instructions that test unique paths. Without this constraint,; // there will be considerable redundancy in the corpus.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp:986,Testability,test,test,986,"// The command line is unusual compared to other fuzzers due to the need to; // specify the target. Options like -triple, -mcpu, and -mattr work like; // their counterparts in llvm-mc, while -fuzzer-args collects options for the; // fuzzer itself.; //; // Examples:; //; // Fuzz the big-endian MIPS32R6 disassembler using 100,000 inputs of up to; // 4-bytes each and use the contents of ./corpus as the test corpus:; // llvm-mc-fuzzer -triple mips-linux-gnu -mcpu=mips32r6 -disassemble \; // -fuzzer-args -max_len=4 -runs=100000 ./corpus; //; // Infinitely fuzz the little-endian MIPS64R2 disassembler with the MSA; // feature enabled using up to 64-byte inputs:; // llvm-mc-fuzzer -triple mipsel-linux-gnu -mcpu=mips64r2 -mattr=msa \; // -disassemble -fuzzer-args ./corpus; //; // If your aim is to find instructions that are not tested, then it is; // advisable to constrain the maximum input size to a single instruction; // using -max_len as in the first example. This results in a test corpus of; // individual instructions that test unique paths. Without this constraint,; // there will be considerable redundancy in the corpus.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp:1034,Testability,test,test,1034,"// The command line is unusual compared to other fuzzers due to the need to; // specify the target. Options like -triple, -mcpu, and -mattr work like; // their counterparts in llvm-mc, while -fuzzer-args collects options for the; // fuzzer itself.; //; // Examples:; //; // Fuzz the big-endian MIPS32R6 disassembler using 100,000 inputs of up to; // 4-bytes each and use the contents of ./corpus as the test corpus:; // llvm-mc-fuzzer -triple mips-linux-gnu -mcpu=mips32r6 -disassemble \; // -fuzzer-args -max_len=4 -runs=100000 ./corpus; //; // Infinitely fuzz the little-endian MIPS64R2 disassembler with the MSA; // feature enabled using up to 64-byte inputs:; // llvm-mc-fuzzer -triple mipsel-linux-gnu -mcpu=mips64r2 -mattr=msa \; // -disassemble -fuzzer-args ./corpus; //; // If your aim is to find instructions that are not tested, then it is; // advisable to constrain the maximum input size to a single instruction; // using -max_len as in the first example. This results in a test corpus of; // individual instructions that test unique paths. Without this constraint,; // there will be considerable redundancy in the corpus.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp:294,Safety,avoid,avoid,294,// Rebuild the argv without the arguments llvm-mc-fuzzer consumed so that; // the driver can parse its arguments.; //; // FuzzerArgs cannot provide the non-const pointer that OriginalArgv needs.; // Re-use the strings from OriginalArgv instead of copying FuzzerArg to a; // non-const buffer to avoid the need to clean up when the fuzzer terminates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-disassemble-fuzzer/llvm-mc-disassemble-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/CodeRegion.cpp:446,Integrability,interface,interface,446,"//===-------------------------- CodeRegion.cpp -----------------*- C++ -* -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements methods from the CodeRegions interface.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/CodeRegion.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/CodeRegion.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/CodeRegion.cpp:170,Usability,simpl,simply,170,"// Special case where there is only one user defined region,; // and this LLVM-MCA-END directive doesn't provide a region name.; // In this case, we assume that the user simply wanted to just terminate; // the only active region.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/CodeRegion.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/CodeRegion.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/CodeRegion.h:1986,Availability,avail,available,1986,"-------------------------------------------------------===//; /// \file; ///; /// This file implements class CodeRegion and CodeRegions, InstrumentRegion,; /// AnalysisRegions, and InstrumentRegions.; ///; /// A CodeRegion describes a region of assembly code guarded by special LLVM-MCA; /// comment directives.; ///; /// # LLVM-MCA-BEGIN foo; /// ... ## asm; /// # LLVM-MCA-END; ///; /// A comment starting with substring LLVM-MCA-BEGIN marks the beginning of a; /// new region of code.; /// A comment starting with substring LLVM-MCA-END marks the end of the; /// last-seen region of code.; ///; /// Code regions are not allowed to overlap. Each region can have a optional; /// description; internally, regions are described by a range of source; /// locations (SMLoc objects).; ///; /// An instruction (a MCInst) is added to a CodeRegion R only if its; /// location is in range [R.RangeStart, R.RangeEnd].; ///; /// A InstrumentRegion describes a region of assembly code guarded by; /// special LLVM-MCA comment directives.; ///; /// # LLVM-MCA-<INSTRUMENTATION_TYPE> <data>; /// ... ## asm; ///; /// where INSTRUMENTATION_TYPE is a type defined in llvm and expects to use; /// data.; ///; /// A comment starting with substring LLVM-MCA-<INSTRUMENTATION_TYPE>; /// brings data into scope for llvm-mca to use in its analysis for; /// all following instructions.; ///; /// If the same INSTRUMENTATION_TYPE is found later in the instruction list,; /// then the original InstrumentRegion will be automatically ended,; /// and a new InstrumentRegion will begin.; ///; /// If there are comments containing the different INSTRUMENTATION_TYPEs,; /// then both data sets remain available. In contrast with a CodeRegion,; /// an InstrumentRegion does not need a comment to end the region.; //; // An instruction (a MCInst) is added to an InstrumentRegion R only; // if its location is in range [R.RangeStart, R.RangeEnd].; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/CodeRegion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/CodeRegion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/CodeRegionGenerator.cpp:6,Availability,error,error,6,// An error if not of the form LLVM-MCA-TARGET-KIND,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/CodeRegionGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/CodeRegionGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:434,Performance,perform,performance,434,"//===-- llvm-mca.cpp - Machine Code Analyzer -------------------*- C++ -* -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This utility is a simple driver that allows static performance analysis on; // machine code similarly to how IACA (Intel Architecture Code Analyzer) works.; //; // llvm-mca [options] <file-name>; // -march <type>; // -mcpu <cpu>; // -o <file>; //; // The target defaults to the host target.; // The cpu defaults to the 'native' host cpu.; // The output defaults to standard output.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:401,Usability,simpl,simple,401,"//===-- llvm-mca.cpp - Machine Code Analyzer -------------------*- C++ -* -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This utility is a simple driver that allows static performance analysis on; // machine code similarly to how IACA (Intel Architecture Code Analyzer) works.; //; // llvm-mca [options] <file-name>; // -march <type>; // -mcpu <cpu>; // -o <file>; //; // The target defaults to the host target.; // The cpu defaults to the 'native' host cpu.; // The output defaults to standard output.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:3,Deployability,Update,Update,3,// Update TripleName with the updated triple from the target lookup.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:30,Deployability,update,updated,30,// Update TripleName with the updated triple from the target lookup.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:19,Availability,error,errors,19,// Handle pipeline errors here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:10,Deployability,pipeline,pipeline,10,// Handle pipeline errors here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:22,Availability,avail,available,22,// Enable printing of available targets when flag --version is specified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:195,Availability,error,error,195,"// Get the target from the triple. If a triple is not specified, then select; // the default triple for the host. If the triple doesn't correspond to any; // registered target, then exit with an error message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:201,Integrability,message,message,201,"// Get the target from the triple. If a triple is not specified, then select; // the default triple for the host. If the triple doesn't correspond to any; // registered target, then exit with an error message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:70,Safety,safe,safety,70,"// GetTarget() may replaced TripleName with a default triple.; // For safety, reconstruct the Triple object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:17,Availability,error,errors,17,// Early exit if errors were found by the code region parsing logic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:62,Testability,log,logic,62,// Early exit if errors were found by the code region parsing logic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:17,Availability,error,errors,17,// Early exit if errors were found by the instrumentation parsing logic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:66,Testability,log,logic,66,// Early exit if errors were found by the instrumentation parsing logic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:216,Deployability,toggle,toggled,216,// TODO: It may be a good idea to separate CB and IPP so that they can; // be used independently of each other. What I mean by this is to add; // an extra command-line arg --disable-ipp so that CB and IPP can be; // toggled without needing to toggle both of them together.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:243,Deployability,toggle,toggle,243,// TODO: It may be a good idea to separate CB and IPP so that they can; // be used independently of each other. What I mean by this is to add; // an extra command-line arg --disable-ipp so that CB and IPP can be; // toggled without needing to toggle both of them together.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:48,Deployability,pipeline,pipeline,48,// Create a context to control ownership of the pipeline hardware.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:12,Deployability,pipeline,pipeline,12,"// Create a pipeline, stages, and a printer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:29,Deployability,pipeline,pipeline,29,"// Create the views for this pipeline, execute, and emit a report.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:86,Integrability,depend,dependencies,86,// Create the CustomBehaviour object for enforcing Target Specific; // behaviours and dependencies that aren't expressed well enough; // in the tablegen. CB cannot depend on the list of MCInst or; // the source code (but it can depend on the list of; // mca::Instruction or any objects that can be reconstructed; // from the target information).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:164,Integrability,depend,depend,164,// Create the CustomBehaviour object for enforcing Target Specific; // behaviours and dependencies that aren't expressed well enough; // in the tablegen. CB cannot depend on the list of MCInst or; // the source code (but it can depend on the list of; // mca::Instruction or any objects that can be reconstructed; // from the target information).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:228,Integrability,depend,depend,228,// Create the CustomBehaviour object for enforcing Target Specific; // behaviours and dependencies that aren't expressed well enough; // in the tablegen. CB cannot depend on the list of MCInst or; // the source code (but it can depend on the list of; // mca::Instruction or any objects that can be reconstructed; // from the target information).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:18,Deployability,pipeline,pipeline,18,// Create a basic pipeline simulating an out-of-order backend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:396,Integrability,depend,depend,396,"// Targets can define their own custom Views that exist within their; // /lib/Target/ directory so that the View can utilize their CustomBehaviour; // or other backend symbols / functionality that are not already exposed; // through one of the MC-layer classes. These Views will be initialized; // using the CustomBehaviour::getViews() variants.; // If a target makes a custom View that does not depend on their target; // CB or their backend, they should put the View within; // /tools/llvm-mca/Views/ instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp:213,Security,expose,exposed,213,"// Targets can define their own custom Views that exist within their; // /lib/Target/ directory so that the View can utilize their CustomBehaviour; // or other backend symbols / functionality that are not already exposed; // through one of the MC-layer classes. These Views will be initialized; // using the CustomBehaviour::getViews() variants.; // If a target makes a custom View that does not depend on their target; // CB or their backend, they should put the View within; // /tools/llvm-mca/Views/ instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/llvm-mca.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/PipelinePrinter.cpp:27,Deployability,Pipeline,PipelinePrinter,27,"//===--------------------- PipelinePrinter.cpp ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the PipelinePrinter interface.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/PipelinePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/PipelinePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/PipelinePrinter.cpp:421,Deployability,Pipeline,PipelinePrinter,421,"//===--------------------- PipelinePrinter.cpp ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the PipelinePrinter interface.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/PipelinePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/PipelinePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/PipelinePrinter.cpp:437,Integrability,interface,interface,437,"//===--------------------- PipelinePrinter.cpp ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the PipelinePrinter interface.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/PipelinePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/PipelinePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/PipelinePrinter.h:27,Deployability,Pipeline,PipelinePrinter,27,"//===--------------------- PipelinePrinter.h --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements class PipelinePrinter.; ///; /// PipelinePrinter allows the customization of the performance report.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/PipelinePrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/PipelinePrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/PipelinePrinter.h:423,Deployability,Pipeline,PipelinePrinter,423,"//===--------------------- PipelinePrinter.h --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements class PipelinePrinter.; ///; /// PipelinePrinter allows the customization of the performance report.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/PipelinePrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/PipelinePrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/PipelinePrinter.h:450,Deployability,Pipeline,PipelinePrinter,450,"//===--------------------- PipelinePrinter.h --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements class PipelinePrinter.; ///; /// PipelinePrinter allows the customization of the performance report.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/PipelinePrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/PipelinePrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/PipelinePrinter.h:498,Performance,perform,performance,498,"//===--------------------- PipelinePrinter.h --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements class PipelinePrinter.; ///; /// PipelinePrinter allows the customization of the performance report.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/PipelinePrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/PipelinePrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp:27,Performance,Bottleneck,BottleneckAnalysis,27,"//===--------------------- BottleneckAnalysis.cpp ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the functionalities used by the BottleneckAnalysis; /// to report bottleneck info.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp:449,Performance,Bottleneck,BottleneckAnalysis,449,"//===--------------------- BottleneckAnalysis.cpp ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the functionalities used by the BottleneckAnalysis; /// to report bottleneck info.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp:483,Performance,bottleneck,bottleneck,483,"//===--------------------- BottleneckAnalysis.cpp ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the functionalities used by the BottleneckAnalysis; /// to report bottleneck info.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp:441,Integrability,depend,dependencies,441,"// A critical sequence is computed as the longest path from a node of the; // RootSet to a leaf node (i.e. a node with no successors). The RootSet is; // composed of nodes with at least one successor, and no predecessors.; //; // Each node of the graph starts with an initial default cost of zero. The; // cost of a node is a measure of criticality: the higher the cost, the bigger; // is the performance impact.; // For register and memory dependencies, the cost is a function of the write; // latency as well as the actual delay (in cycles) caused to users.; // For processor resource dependencies, the cost is a function of the resource; // pressure. Resource interferences with low frequency values are ignored.; //; // This algorithm is very similar to a (reverse) Dijkstra. Every iteration of; // the inner loop selects (i.e. visits) a node N from a set of `unvisited; // nodes`, and then propagates the cost of N to all its neighbors.; //; // The `unvisited nodes` set initially contains all the nodes from the; // RootSet. A node N is added to the `unvisited nodes` if all its; // predecessors have been visited already.; //; // For simplicity, every node tracks the number of unvisited incoming edges in; // field `NumVisitedPredecessors`. When the value of that field drops to; // zero, then the corresponding node is added to a `ToVisit` set.; //; // At the end of every iteration of the outer loop, set `ToVisit` becomes our; // new `unvisited nodes` set.; //; // The algorithm terminates when the set of unvisited nodes (i.e. our RootSet); // is empty. This algorithm works under the assumption that the graph is; // acyclic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp:587,Integrability,depend,dependencies,587,"// A critical sequence is computed as the longest path from a node of the; // RootSet to a leaf node (i.e. a node with no successors). The RootSet is; // composed of nodes with at least one successor, and no predecessors.; //; // Each node of the graph starts with an initial default cost of zero. The; // cost of a node is a measure of criticality: the higher the cost, the bigger; // is the performance impact.; // For register and memory dependencies, the cost is a function of the write; // latency as well as the actual delay (in cycles) caused to users.; // For processor resource dependencies, the cost is a function of the resource; // pressure. Resource interferences with low frequency values are ignored.; //; // This algorithm is very similar to a (reverse) Dijkstra. Every iteration of; // the inner loop selects (i.e. visits) a node N from a set of `unvisited; // nodes`, and then propagates the cost of N to all its neighbors.; //; // The `unvisited nodes` set initially contains all the nodes from the; // RootSet. A node N is added to the `unvisited nodes` if all its; // predecessors have been visited already.; //; // For simplicity, every node tracks the number of unvisited incoming edges in; // field `NumVisitedPredecessors`. When the value of that field drops to; // zero, then the corresponding node is added to a `ToVisit` set.; //; // At the end of every iteration of the outer loop, set `ToVisit` becomes our; // new `unvisited nodes` set.; //; // The algorithm terminates when the set of unvisited nodes (i.e. our RootSet); // is empty. This algorithm works under the assumption that the graph is; // acyclic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp:393,Performance,perform,performance,393,"// A critical sequence is computed as the longest path from a node of the; // RootSet to a leaf node (i.e. a node with no successors). The RootSet is; // composed of nodes with at least one successor, and no predecessors.; //; // Each node of the graph starts with an initial default cost of zero. The; // cost of a node is a measure of criticality: the higher the cost, the bigger; // is the performance impact.; // For register and memory dependencies, the cost is a function of the write; // latency as well as the actual delay (in cycles) caused to users.; // For processor resource dependencies, the cost is a function of the resource; // pressure. Resource interferences with low frequency values are ignored.; //; // This algorithm is very similar to a (reverse) Dijkstra. Every iteration of; // the inner loop selects (i.e. visits) a node N from a set of `unvisited; // nodes`, and then propagates the cost of N to all its neighbors.; //; // The `unvisited nodes` set initially contains all the nodes from the; // RootSet. A node N is added to the `unvisited nodes` if all its; // predecessors have been visited already.; //; // For simplicity, every node tracks the number of unvisited incoming edges in; // field `NumVisitedPredecessors`. When the value of that field drops to; // zero, then the corresponding node is added to a `ToVisit` set.; //; // At the end of every iteration of the outer loop, set `ToVisit` becomes our; // new `unvisited nodes` set.; //; // The algorithm terminates when the set of unvisited nodes (i.e. our RootSet); // is empty. This algorithm works under the assumption that the graph is; // acyclic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp:495,Performance,latency,latency,495,"// A critical sequence is computed as the longest path from a node of the; // RootSet to a leaf node (i.e. a node with no successors). The RootSet is; // composed of nodes with at least one successor, and no predecessors.; //; // Each node of the graph starts with an initial default cost of zero. The; // cost of a node is a measure of criticality: the higher the cost, the bigger; // is the performance impact.; // For register and memory dependencies, the cost is a function of the write; // latency as well as the actual delay (in cycles) caused to users.; // For processor resource dependencies, the cost is a function of the resource; // pressure. Resource interferences with low frequency values are ignored.; //; // This algorithm is very similar to a (reverse) Dijkstra. Every iteration of; // the inner loop selects (i.e. visits) a node N from a set of `unvisited; // nodes`, and then propagates the cost of N to all its neighbors.; //; // The `unvisited nodes` set initially contains all the nodes from the; // RootSet. A node N is added to the `unvisited nodes` if all its; // predecessors have been visited already.; //; // For simplicity, every node tracks the number of unvisited incoming edges in; // field `NumVisitedPredecessors`. When the value of that field drops to; // zero, then the corresponding node is added to a `ToVisit` set.; //; // At the end of every iteration of the outer loop, set `ToVisit` becomes our; // new `unvisited nodes` set.; //; // The algorithm terminates when the set of unvisited nodes (i.e. our RootSet); // is empty. This algorithm works under the assumption that the graph is; // acyclic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp:1141,Usability,simpl,simplicity,1141,"// A critical sequence is computed as the longest path from a node of the; // RootSet to a leaf node (i.e. a node with no successors). The RootSet is; // composed of nodes with at least one successor, and no predecessors.; //; // Each node of the graph starts with an initial default cost of zero. The; // cost of a node is a measure of criticality: the higher the cost, the bigger; // is the performance impact.; // For register and memory dependencies, the cost is a function of the write; // latency as well as the actual delay (in cycles) caused to users.; // For processor resource dependencies, the cost is a function of the resource; // pressure. Resource interferences with low frequency values are ignored.; //; // This algorithm is very similar to a (reverse) Dijkstra. Every iteration of; // the inner loop selects (i.e. visits) a node N from a set of `unvisited; // nodes`, and then propagates the cost of N to all its neighbors.; //; // The `unvisited nodes` set initially contains all the nodes from the; // RootSet. A node N is added to the `unvisited nodes` if all its; // predecessors have been visited already.; //; // For simplicity, every node tracks the number of unvisited incoming edges in; // field `NumVisitedPredecessors`. When the value of that field drops to; // zero, then the corresponding node is added to a `ToVisit` set.; //; // At the end of every iteration of the outer loop, set `ToVisit` becomes our; // new `unvisited nodes` set.; //; // The algorithm terminates when the set of unvisited nodes (i.e. our RootSet); // is empty. This algorithm works under the assumption that the graph is; // acyclic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp:79,Deployability,update,update,79,"// Check if this is the most expensive incoming edge seen so far. In; // case, update the total cost of the destination node (ToIID), as well; // its field `CriticalPredecessor`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp:417,Usability,simpl,simply,417,"// At this stage, nodes of the graph have been already visited, and costs have; // been propagated through the edges (see method `propagateThroughEdges()`).; // Identify the node N with the highest cost in the graph. By construction,; // that node is the last instruction of our critical sequence.; // Field N.Depth would tell us the total length of the sequence.; //; // To obtain the sequence of critical edges, we simply follow the chain of; // critical predecessors starting from node N (field; // DGNode::CriticalPredecessor).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp:20,Performance,bottleneck,bottlenecks,20,// Early exit if no bottlenecks were found during the simulation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:1221,Deployability,pipeline,pipeline,1221,".; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the bottleneck analysis view.; ///; /// This view internally observes backend pressure increase events in order to; /// identify problematic data dependencies and processor resource interferences.; ///; /// Example of bottleneck analysis report for a dot-product on X86 btver2:; ///; /// Cycles with backend pressure increase [ 40.76% ]; /// Throughput Bottlenecks: ; /// Resource Pressure [ 39.34% ]; /// - JFPA [ 39.34% ]; /// - JFPU0 [ 39.34% ]; /// Data Dependencies: [ 1.42% ]; /// - Register Dependencies [ 1.42% ]; /// - Memory Dependencies [ 0.00% ]; ///; /// According to the example, backend pressure increased during the 40.76% of; /// the simulated cycles. In particular, the major cause of backend pressure; /// increases was the contention on floating point adder JFPA accessible from; /// pipeline resource JFPU0.; ///; /// At the end of each cycle, if pressure on the simulated out-of-order buffers; /// has increased, a backend pressure event is reported.; /// In particular, this occurs when there is a delta between the number of uOps; /// dispatched and the number of uOps issued to the underlying pipelines.; ///; /// The bottleneck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; /// +----> 2. vhaddps %xmm3, %xmm3, %xmm4 ## REGISTER dependency: %xmm3; /// |;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:1535,Deployability,pipeline,pipelines,1535,"internally observes backend pressure increase events in order to; /// identify problematic data dependencies and processor resource interferences.; ///; /// Example of bottleneck analysis report for a dot-product on X86 btver2:; ///; /// Cycles with backend pressure increase [ 40.76% ]; /// Throughput Bottlenecks: ; /// Resource Pressure [ 39.34% ]; /// - JFPA [ 39.34% ]; /// - JFPU0 [ 39.34% ]; /// Data Dependencies: [ 1.42% ]; /// - Register Dependencies [ 1.42% ]; /// - Memory Dependencies [ 0.00% ]; ///; /// According to the example, backend pressure increased during the 40.76% of; /// the simulated cycles. In particular, the major cause of backend pressure; /// increases was the contention on floating point adder JFPA accessible from; /// pipeline resource JFPU0.; ///; /// At the end of each cycle, if pressure on the simulated out-of-order buffers; /// has increased, a backend pressure event is reported.; /// In particular, this occurs when there is a delta between the number of uOps; /// dispatched and the number of uOps issued to the underlying pipelines.; ///; /// The bottleneck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; /// +----> 2. vhaddps %xmm3, %xmm3, %xmm4 ## REGISTER dependency: %xmm3; /// |; /// | < loop carried > ; /// |; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; ///; ///; /// The algorithm that computes the critical sequence is very similar to a; /// critical path analysis.; /// ; /// A dependency graph is used internally to track de",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:563,Integrability,depend,dependencies,563,"//===--------------------- BottleneckAnalysis.h -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the bottleneck analysis view.; ///; /// This view internally observes backend pressure increase events in order to; /// identify problematic data dependencies and processor resource interferences.; ///; /// Example of bottleneck analysis report for a dot-product on X86 btver2:; ///; /// Cycles with backend pressure increase [ 40.76% ]; /// Throughput Bottlenecks: ; /// Resource Pressure [ 39.34% ]; /// - JFPA [ 39.34% ]; /// - JFPU0 [ 39.34% ]; /// Data Dependencies: [ 1.42% ]; /// - Register Dependencies [ 1.42% ]; /// - Memory Dependencies [ 0.00% ]; ///; /// According to the example, backend pressure increased during the 40.76% of; /// the simulated cycles. In particular, the major cause of backend pressure; /// increases was the contention on floating point adder JFPA accessible from; /// pipeline resource JFPU0.; ///; /// At the end of each cycle, if pressure on the simulated out-of-order buffers; /// has increased, a backend pressure event is reported.; /// In particular, this occurs when there is a delta between the number of uOps; /// dispatched and the number of uOps issued to the underlying pipelines.; ///; /// The bottleneck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +---->",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:875,Integrability,Depend,Dependencies,875,"//===--------------------- BottleneckAnalysis.h -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the bottleneck analysis view.; ///; /// This view internally observes backend pressure increase events in order to; /// identify problematic data dependencies and processor resource interferences.; ///; /// Example of bottleneck analysis report for a dot-product on X86 btver2:; ///; /// Cycles with backend pressure increase [ 40.76% ]; /// Throughput Bottlenecks: ; /// Resource Pressure [ 39.34% ]; /// - JFPA [ 39.34% ]; /// - JFPU0 [ 39.34% ]; /// Data Dependencies: [ 1.42% ]; /// - Register Dependencies [ 1.42% ]; /// - Memory Dependencies [ 0.00% ]; ///; /// According to the example, backend pressure increased during the 40.76% of; /// the simulated cycles. In particular, the major cause of backend pressure; /// increases was the contention on floating point adder JFPA accessible from; /// pipeline resource JFPU0.; ///; /// At the end of each cycle, if pressure on the simulated out-of-order buffers; /// has increased, a backend pressure event is reported.; /// In particular, this occurs when there is a delta between the number of uOps; /// dispatched and the number of uOps issued to the underlying pipelines.; ///; /// The bottleneck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +---->",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:915,Integrability,Depend,Dependencies,915,"//===--------------------- BottleneckAnalysis.h -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the bottleneck analysis view.; ///; /// This view internally observes backend pressure increase events in order to; /// identify problematic data dependencies and processor resource interferences.; ///; /// Example of bottleneck analysis report for a dot-product on X86 btver2:; ///; /// Cycles with backend pressure increase [ 40.76% ]; /// Throughput Bottlenecks: ; /// Resource Pressure [ 39.34% ]; /// - JFPA [ 39.34% ]; /// - JFPU0 [ 39.34% ]; /// Data Dependencies: [ 1.42% ]; /// - Register Dependencies [ 1.42% ]; /// - Memory Dependencies [ 0.00% ]; ///; /// According to the example, backend pressure increased during the 40.76% of; /// the simulated cycles. In particular, the major cause of backend pressure; /// increases was the contention on floating point adder JFPA accessible from; /// pipeline resource JFPU0.; ///; /// At the end of each cycle, if pressure on the simulated out-of-order buffers; /// has increased, a backend pressure event is reported.; /// In particular, this occurs when there is a delta between the number of uOps; /// dispatched and the number of uOps issued to the underlying pipelines.; ///; /// The bottleneck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +---->",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:952,Integrability,Depend,Dependencies,952,"//===--------------------- BottleneckAnalysis.h -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the bottleneck analysis view.; ///; /// This view internally observes backend pressure increase events in order to; /// identify problematic data dependencies and processor resource interferences.; ///; /// Example of bottleneck analysis report for a dot-product on X86 btver2:; ///; /// Cycles with backend pressure increase [ 40.76% ]; /// Throughput Bottlenecks: ; /// Resource Pressure [ 39.34% ]; /// - JFPA [ 39.34% ]; /// - JFPU0 [ 39.34% ]; /// Data Dependencies: [ 1.42% ]; /// - Register Dependencies [ 1.42% ]; /// - Memory Dependencies [ 0.00% ]; ///; /// According to the example, backend pressure increased during the 40.76% of; /// the simulated cycles. In particular, the major cause of backend pressure; /// increases was the contention on floating point adder JFPA accessible from; /// pipeline resource JFPU0.; ///; /// At the end of each cycle, if pressure on the simulated out-of-order buffers; /// has increased, a backend pressure event is reported.; /// In particular, this occurs when there is a delta between the number of uOps; /// dispatched and the number of uOps issued to the underlying pipelines.; ///; /// The bottleneck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +---->",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:1671,Integrability,depend,dependent,1671,"ttleneck analysis report for a dot-product on X86 btver2:; ///; /// Cycles with backend pressure increase [ 40.76% ]; /// Throughput Bottlenecks: ; /// Resource Pressure [ 39.34% ]; /// - JFPA [ 39.34% ]; /// - JFPU0 [ 39.34% ]; /// Data Dependencies: [ 1.42% ]; /// - Register Dependencies [ 1.42% ]; /// - Memory Dependencies [ 0.00% ]; ///; /// According to the example, backend pressure increased during the 40.76% of; /// the simulated cycles. In particular, the major cause of backend pressure; /// increases was the contention on floating point adder JFPA accessible from; /// pipeline resource JFPU0.; ///; /// At the end of each cycle, if pressure on the simulated out-of-order buffers; /// has increased, a backend pressure event is reported.; /// In particular, this occurs when there is a delta between the number of uOps; /// dispatched and the number of uOps issued to the underlying pipelines.; ///; /// The bottleneck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; /// +----> 2. vhaddps %xmm3, %xmm3, %xmm4 ## REGISTER dependency: %xmm3; /// |; /// | < loop carried > ; /// |; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; ///; ///; /// The algorithm that computes the critical sequence is very similar to a; /// critical path analysis.; /// ; /// A dependency graph is used internally to track dependencies between nodes.; /// Nodes of the graph represent instructions from the input assembly sequence,; /// and edges of the graph represent data dependencies or proce",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:1847,Integrability,Depend,Dependency,1847,"[ 39.34% ]; /// - JFPA [ 39.34% ]; /// - JFPU0 [ 39.34% ]; /// Data Dependencies: [ 1.42% ]; /// - Register Dependencies [ 1.42% ]; /// - Memory Dependencies [ 0.00% ]; ///; /// According to the example, backend pressure increased during the 40.76% of; /// the simulated cycles. In particular, the major cause of backend pressure; /// increases was the contention on floating point adder JFPA accessible from; /// pipeline resource JFPU0.; ///; /// At the end of each cycle, if pressure on the simulated out-of-order buffers; /// has increased, a backend pressure event is reported.; /// In particular, this occurs when there is a delta between the number of uOps; /// dispatched and the number of uOps issued to the underlying pipelines.; ///; /// The bottleneck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; /// +----> 2. vhaddps %xmm3, %xmm3, %xmm4 ## REGISTER dependency: %xmm3; /// |; /// | < loop carried > ; /// |; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; ///; ///; /// The algorithm that computes the critical sequence is very similar to a; /// critical path analysis.; /// ; /// A dependency graph is used internally to track dependencies between nodes.; /// Nodes of the graph represent instructions from the input assembly sequence,; /// and edges of the graph represent data dependencies or processor resource; /// interferences.; ///; /// Edges are dynamically 'discovered' by observing instruction state; /// transitions and backend pressure increase events. Edge",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:2140,Integrability,depend,dependency,2140," the contention on floating point adder JFPA accessible from; /// pipeline resource JFPU0.; ///; /// At the end of each cycle, if pressure on the simulated out-of-order buffers; /// has increased, a backend pressure event is reported.; /// In particular, this occurs when there is a delta between the number of uOps; /// dispatched and the number of uOps issued to the underlying pipelines.; ///; /// The bottleneck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; /// +----> 2. vhaddps %xmm3, %xmm3, %xmm4 ## REGISTER dependency: %xmm3; /// |; /// | < loop carried > ; /// |; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; ///; ///; /// The algorithm that computes the critical sequence is very similar to a; /// critical path analysis.; /// ; /// A dependency graph is used internally to track dependencies between nodes.; /// Nodes of the graph represent instructions from the input assembly sequence,; /// and edges of the graph represent data dependencies or processor resource; /// interferences.; ///; /// Edges are dynamically 'discovered' by observing instruction state; /// transitions and backend pressure increase events. Edges are internally; /// ranked based on their ""criticality"". A dependency is considered to be; /// critical if it takes a long time to execute, and if it contributes to; /// backend pressure increases. Criticality is internally measured in terms of; /// cycles; it is computed for every edge in the graph as a function of the edge; /// latency and th",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:2420,Integrability,depend,dependency,2420,"en the number of uOps; /// dispatched and the number of uOps issued to the underlying pipelines.; ///; /// The bottleneck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; /// +----> 2. vhaddps %xmm3, %xmm3, %xmm4 ## REGISTER dependency: %xmm3; /// |; /// | < loop carried > ; /// |; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; ///; ///; /// The algorithm that computes the critical sequence is very similar to a; /// critical path analysis.; /// ; /// A dependency graph is used internally to track dependencies between nodes.; /// Nodes of the graph represent instructions from the input assembly sequence,; /// and edges of the graph represent data dependencies or processor resource; /// interferences.; ///; /// Edges are dynamically 'discovered' by observing instruction state; /// transitions and backend pressure increase events. Edges are internally; /// ranked based on their ""criticality"". A dependency is considered to be; /// critical if it takes a long time to execute, and if it contributes to; /// backend pressure increases. Criticality is internally measured in terms of; /// cycles; it is computed for every edge in the graph as a function of the edge; /// latency and the number of backend pressure increase cycles contributed by; /// that edge.; ///; /// At the end of simulation, costs are propagated to nodes through the edges of; /// the graph, and the most expensive path connecting the root-set (a; /// set of nodes with no predecessors) to a leaf node is re",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:2465,Integrability,depend,dependencies,2465,"en the number of uOps; /// dispatched and the number of uOps issued to the underlying pipelines.; ///; /// The bottleneck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; /// +----> 2. vhaddps %xmm3, %xmm3, %xmm4 ## REGISTER dependency: %xmm3; /// |; /// | < loop carried > ; /// |; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; ///; ///; /// The algorithm that computes the critical sequence is very similar to a; /// critical path analysis.; /// ; /// A dependency graph is used internally to track dependencies between nodes.; /// Nodes of the graph represent instructions from the input assembly sequence,; /// and edges of the graph represent data dependencies or processor resource; /// interferences.; ///; /// Edges are dynamically 'discovered' by observing instruction state; /// transitions and backend pressure increase events. Edges are internally; /// ranked based on their ""criticality"". A dependency is considered to be; /// critical if it takes a long time to execute, and if it contributes to; /// backend pressure increases. Criticality is internally measured in terms of; /// cycles; it is computed for every edge in the graph as a function of the edge; /// latency and the number of backend pressure increase cycles contributed by; /// that edge.; ///; /// At the end of simulation, costs are propagated to nodes through the edges of; /// the graph, and the most expensive path connecting the root-set (a; /// set of nodes with no predecessors) to a leaf node is re",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:2617,Integrability,depend,dependencies,2617,"ck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; /// +----> 2. vhaddps %xmm3, %xmm3, %xmm4 ## REGISTER dependency: %xmm3; /// |; /// | < loop carried > ; /// |; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; ///; ///; /// The algorithm that computes the critical sequence is very similar to a; /// critical path analysis.; /// ; /// A dependency graph is used internally to track dependencies between nodes.; /// Nodes of the graph represent instructions from the input assembly sequence,; /// and edges of the graph represent data dependencies or processor resource; /// interferences.; ///; /// Edges are dynamically 'discovered' by observing instruction state; /// transitions and backend pressure increase events. Edges are internally; /// ranked based on their ""criticality"". A dependency is considered to be; /// critical if it takes a long time to execute, and if it contributes to; /// backend pressure increases. Criticality is internally measured in terms of; /// cycles; it is computed for every edge in the graph as a function of the edge; /// latency and the number of backend pressure increase cycles contributed by; /// that edge.; ///; /// At the end of simulation, costs are propagated to nodes through the edges of; /// the graph, and the most expensive path connecting the root-set (a; /// set of nodes with no predecessors) to a leaf node is reported as critical; /// sequence.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:2868,Integrability,depend,dependency,2868,"ck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; /// +----> 2. vhaddps %xmm3, %xmm3, %xmm4 ## REGISTER dependency: %xmm3; /// |; /// | < loop carried > ; /// |; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; ///; ///; /// The algorithm that computes the critical sequence is very similar to a; /// critical path analysis.; /// ; /// A dependency graph is used internally to track dependencies between nodes.; /// Nodes of the graph represent instructions from the input assembly sequence,; /// and edges of the graph represent data dependencies or processor resource; /// interferences.; ///; /// Edges are dynamically 'discovered' by observing instruction state; /// transitions and backend pressure increase events. Edges are internally; /// ranked based on their ""criticality"". A dependency is considered to be; /// critical if it takes a long time to execute, and if it contributes to; /// backend pressure increases. Criticality is internally measured in terms of; /// cycles; it is computed for every edge in the graph as a function of the edge; /// latency and the number of backend pressure increase cycles contributed by; /// that edge.; ///; /// At the end of simulation, costs are propagated to nodes through the edges of; /// the graph, and the most expensive path connecting the root-set (a; /// set of nodes with no predecessors) to a leaf node is reported as critical; /// sequence.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:27,Performance,Bottleneck,BottleneckAnalysis,27,"//===--------------------- BottleneckAnalysis.h -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the bottleneck analysis view.; ///; /// This view internally observes backend pressure increase events in order to; /// identify problematic data dependencies and processor resource interferences.; ///; /// Example of bottleneck analysis report for a dot-product on X86 btver2:; ///; /// Cycles with backend pressure increase [ 40.76% ]; /// Throughput Bottlenecks: ; /// Resource Pressure [ 39.34% ]; /// - JFPA [ 39.34% ]; /// - JFPU0 [ 39.34% ]; /// Data Dependencies: [ 1.42% ]; /// - Register Dependencies [ 1.42% ]; /// - Memory Dependencies [ 0.00% ]; ///; /// According to the example, backend pressure increased during the 40.76% of; /// the simulated cycles. In particular, the major cause of backend pressure; /// increases was the contention on floating point adder JFPA accessible from; /// pipeline resource JFPU0.; ///; /// At the end of each cycle, if pressure on the simulated out-of-order buffers; /// has increased, a backend pressure event is reported.; /// In particular, this occurs when there is a delta between the number of uOps; /// dispatched and the number of uOps issued to the underlying pipelines.; ///; /// The bottleneck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +---->",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:421,Performance,bottleneck,bottleneck,421,"//===--------------------- BottleneckAnalysis.h -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the bottleneck analysis view.; ///; /// This view internally observes backend pressure increase events in order to; /// identify problematic data dependencies and processor resource interferences.; ///; /// Example of bottleneck analysis report for a dot-product on X86 btver2:; ///; /// Cycles with backend pressure increase [ 40.76% ]; /// Throughput Bottlenecks: ; /// Resource Pressure [ 39.34% ]; /// - JFPA [ 39.34% ]; /// - JFPU0 [ 39.34% ]; /// Data Dependencies: [ 1.42% ]; /// - Register Dependencies [ 1.42% ]; /// - Memory Dependencies [ 0.00% ]; ///; /// According to the example, backend pressure increased during the 40.76% of; /// the simulated cycles. In particular, the major cause of backend pressure; /// increases was the contention on floating point adder JFPA accessible from; /// pipeline resource JFPU0.; ///; /// At the end of each cycle, if pressure on the simulated out-of-order buffers; /// has increased, a backend pressure event is reported.; /// In particular, this occurs when there is a delta between the number of uOps; /// dispatched and the number of uOps issued to the underlying pipelines.; ///; /// The bottleneck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +---->",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:635,Performance,bottleneck,bottleneck,635,"//===--------------------- BottleneckAnalysis.h -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the bottleneck analysis view.; ///; /// This view internally observes backend pressure increase events in order to; /// identify problematic data dependencies and processor resource interferences.; ///; /// Example of bottleneck analysis report for a dot-product on X86 btver2:; ///; /// Cycles with backend pressure increase [ 40.76% ]; /// Throughput Bottlenecks: ; /// Resource Pressure [ 39.34% ]; /// - JFPA [ 39.34% ]; /// - JFPU0 [ 39.34% ]; /// Data Dependencies: [ 1.42% ]; /// - Register Dependencies [ 1.42% ]; /// - Memory Dependencies [ 0.00% ]; ///; /// According to the example, backend pressure increased during the 40.76% of; /// the simulated cycles. In particular, the major cause of backend pressure; /// increases was the contention on floating point adder JFPA accessible from; /// pipeline resource JFPU0.; ///; /// At the end of each cycle, if pressure on the simulated out-of-order buffers; /// has increased, a backend pressure event is reported.; /// In particular, this occurs when there is a delta between the number of uOps; /// dispatched and the number of uOps issued to the underlying pipelines.; ///; /// The bottleneck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +---->",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:759,Performance,Throughput,Throughput,759,"//===--------------------- BottleneckAnalysis.h -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the bottleneck analysis view.; ///; /// This view internally observes backend pressure increase events in order to; /// identify problematic data dependencies and processor resource interferences.; ///; /// Example of bottleneck analysis report for a dot-product on X86 btver2:; ///; /// Cycles with backend pressure increase [ 40.76% ]; /// Throughput Bottlenecks: ; /// Resource Pressure [ 39.34% ]; /// - JFPA [ 39.34% ]; /// - JFPU0 [ 39.34% ]; /// Data Dependencies: [ 1.42% ]; /// - Register Dependencies [ 1.42% ]; /// - Memory Dependencies [ 0.00% ]; ///; /// According to the example, backend pressure increased during the 40.76% of; /// the simulated cycles. In particular, the major cause of backend pressure; /// increases was the contention on floating point adder JFPA accessible from; /// pipeline resource JFPU0.; ///; /// At the end of each cycle, if pressure on the simulated out-of-order buffers; /// has increased, a backend pressure event is reported.; /// In particular, this occurs when there is a delta between the number of uOps; /// dispatched and the number of uOps issued to the underlying pipelines.; ///; /// The bottleneck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +---->",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:770,Performance,Bottleneck,Bottlenecks,770,"//===--------------------- BottleneckAnalysis.h -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the bottleneck analysis view.; ///; /// This view internally observes backend pressure increase events in order to; /// identify problematic data dependencies and processor resource interferences.; ///; /// Example of bottleneck analysis report for a dot-product on X86 btver2:; ///; /// Cycles with backend pressure increase [ 40.76% ]; /// Throughput Bottlenecks: ; /// Resource Pressure [ 39.34% ]; /// - JFPA [ 39.34% ]; /// - JFPU0 [ 39.34% ]; /// Data Dependencies: [ 1.42% ]; /// - Register Dependencies [ 1.42% ]; /// - Memory Dependencies [ 0.00% ]; ///; /// According to the example, backend pressure increased during the 40.76% of; /// the simulated cycles. In particular, the major cause of backend pressure; /// increases was the contention on floating point adder JFPA accessible from; /// pipeline resource JFPU0.; ///; /// At the end of each cycle, if pressure on the simulated out-of-order buffers; /// has increased, a backend pressure event is reported.; /// In particular, this occurs when there is a delta between the number of uOps; /// dispatched and the number of uOps issued to the underlying pipelines.; ///; /// The bottleneck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +---->",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:1560,Performance,bottleneck,bottleneck,1560,"ttleneck analysis report for a dot-product on X86 btver2:; ///; /// Cycles with backend pressure increase [ 40.76% ]; /// Throughput Bottlenecks: ; /// Resource Pressure [ 39.34% ]; /// - JFPA [ 39.34% ]; /// - JFPU0 [ 39.34% ]; /// Data Dependencies: [ 1.42% ]; /// - Register Dependencies [ 1.42% ]; /// - Memory Dependencies [ 0.00% ]; ///; /// According to the example, backend pressure increased during the 40.76% of; /// the simulated cycles. In particular, the major cause of backend pressure; /// increases was the contention on floating point adder JFPA accessible from; /// pipeline resource JFPU0.; ///; /// At the end of each cycle, if pressure on the simulated out-of-order buffers; /// has increased, a backend pressure event is reported.; /// In particular, this occurs when there is a delta between the number of uOps; /// dispatched and the number of uOps issued to the underlying pipelines.; ///; /// The bottleneck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; /// +----> 2. vhaddps %xmm3, %xmm3, %xmm4 ## REGISTER dependency: %xmm3; /// |; /// | < loop carried > ; /// |; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; ///; ///; /// The algorithm that computes the critical sequence is very similar to a; /// critical path analysis.; /// ; /// A dependency graph is used internally to track dependencies between nodes.; /// Nodes of the graph represent instructions from the input assembly sequence,; /// and edges of the graph represent data dependencies or proce",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:3141,Performance,latency,latency,3141,"ck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; /// +----> 2. vhaddps %xmm3, %xmm3, %xmm4 ## REGISTER dependency: %xmm3; /// |; /// | < loop carried > ; /// |; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; ///; ///; /// The algorithm that computes the critical sequence is very similar to a; /// critical path analysis.; /// ; /// A dependency graph is used internally to track dependencies between nodes.; /// Nodes of the graph represent instructions from the input assembly sequence,; /// and edges of the graph represent data dependencies or processor resource; /// interferences.; ///; /// Edges are dynamically 'discovered' by observing instruction state; /// transitions and backend pressure increase events. Edges are internally; /// ranked based on their ""criticality"". A dependency is considered to be; /// critical if it takes a long time to execute, and if it contributes to; /// backend pressure increases. Criticality is internally measured in terms of; /// cycles; it is computed for every edge in the graph as a function of the edge; /// latency and the number of backend pressure increase cycles contributed by; /// that edge.; ///; /// At the end of simulation, costs are propagated to nodes through the edges of; /// the graph, and the most expensive path connecting the root-set (a; /// set of nodes with no predecessors) to a leaf node is reported as critical; /// sequence.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:1200,Security,access,accessible,1200,".; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the bottleneck analysis view.; ///; /// This view internally observes backend pressure increase events in order to; /// identify problematic data dependencies and processor resource interferences.; ///; /// Example of bottleneck analysis report for a dot-product on X86 btver2:; ///; /// Cycles with backend pressure increase [ 40.76% ]; /// Throughput Bottlenecks: ; /// Resource Pressure [ 39.34% ]; /// - JFPA [ 39.34% ]; /// - JFPU0 [ 39.34% ]; /// Data Dependencies: [ 1.42% ]; /// - Register Dependencies [ 1.42% ]; /// - Memory Dependencies [ 0.00% ]; ///; /// According to the example, backend pressure increased during the 40.76% of; /// the simulated cycles. In particular, the major cause of backend pressure; /// increases was the contention on floating point adder JFPA accessible from; /// pipeline resource JFPU0.; ///; /// At the end of each cycle, if pressure on the simulated out-of-order buffers; /// has increased, a backend pressure event is reported.; /// In particular, this occurs when there is a delta between the number of uOps; /// dispatched and the number of uOps issued to the underlying pipelines.; ///; /// The bottleneck analysis view is also responsible for identifying and; /// printing the most ""critical"" sequence of dependent instructions according to; /// the simulated run.; ///; /// Below is the critical sequence computed for the dot-product example on; /// btver2:; ///; /// Instruction Dependency Information; /// +----< 2. vhaddps %xmm3, %xmm3, %xmm4; /// |; /// | < loop carried > ; /// |; /// | 0. vmulps	 %xmm0, %xmm0, %xmm2; /// +----> 1. vhaddps %xmm2, %xmm2, %xmm3 ## RESOURCE interference: JFPA [ probability: 73% ]; /// +----> 2. vhaddps %xmm3, %xmm3, %xmm4 ## REGISTER dependency: %xmm3; /// |;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:104,Energy Efficiency,schedul,scheduling,104,// Resource pressure distribution. There is an element for every processor; // resource declared by the scheduling model. Quantities are number of cycles.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:81,Availability,mask,mask,81,// Each processor resource is associated with a so-called processor resource; // mask. This vector allows to correlate processor resource IDs with processor; // resource masks. There is exactly one element per each processor resource; // declared by the scheduling model.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:170,Availability,mask,masks,170,// Each processor resource is associated with a so-called processor resource; // mask. This vector allows to correlate processor resource IDs with processor; // resource masks. There is exactly one element per each processor resource; // declared by the scheduling model.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:254,Energy Efficiency,schedul,scheduling,254,// Each processor resource is associated with a so-called processor resource; // mask. This vector allows to correlate processor resource IDs with processor; // resource masks. There is exactly one element per each processor resource; // declared by the scheduling model.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:90,Availability,Mask,Mask,90,// Maps processor resource state indices (returned by calls to; // `getResourceStateIndex(Mask)` to processor resource identifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:77,Deployability,update,updated,77,// Identifies the last user of a processor resource unit.; // This vector is updated on every instruction issued event.; // There is one entry for every processor resource unit declared by the; // processor model. An all_ones value is treated like an invalid instruction; // identifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:5,Integrability,depend,dependency,5,// A dependency edge.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:3,Integrability,Depend,Dependency,3,"// Dependency edge descriptor.; //; // It specifies the dependency type, as well as the edge cost in cycles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:56,Integrability,depend,dependency,56,"// Dependency edge descriptor.; //; // It specifies the dependency type, as well as the edge cost in cycles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:15,Performance,bottleneck,bottleneck,15,// Used by the bottleneck analysis to compute the interference; // probability for processor resources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:987,Energy Efficiency,allocate,allocated,987,"// A dependency graph used by the bottleneck analysis to describe data; // dependencies and processor resource interferences between instructions.; //; // There is a node (an instance of struct DGNode) for every instruction in the; // input assembly sequence. Edges of the graph represent dependencies between; // instructions.; //; // Each edge of the graph is associated with a cost value which is used; // internally to rank dependency based on their impact on the runtime; // performance (see field DependencyEdge::Dependency::Cost). In general, the; // higher the cost of an edge, the higher the impact on performance.; //; // The cost of a dependency is a function of both the latency and the number of; // cycles where the dependency has been seen as critical (i.e. contributing to; // back-pressure increases).; //; // Loop carried dependencies are carefully expanded by the bottleneck analysis; // to guarantee that the graph stays acyclic. To this end, extra nodes are; // pre-allocated at construction time to describe instructions from ""past and; // future"" iterations. The graph is kept acyclic mainly because it simplifies; // the complexity of the algorithm that computes the critical sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:5,Integrability,depend,dependency,5,"// A dependency graph used by the bottleneck analysis to describe data; // dependencies and processor resource interferences between instructions.; //; // There is a node (an instance of struct DGNode) for every instruction in the; // input assembly sequence. Edges of the graph represent dependencies between; // instructions.; //; // Each edge of the graph is associated with a cost value which is used; // internally to rank dependency based on their impact on the runtime; // performance (see field DependencyEdge::Dependency::Cost). In general, the; // higher the cost of an edge, the higher the impact on performance.; //; // The cost of a dependency is a function of both the latency and the number of; // cycles where the dependency has been seen as critical (i.e. contributing to; // back-pressure increases).; //; // Loop carried dependencies are carefully expanded by the bottleneck analysis; // to guarantee that the graph stays acyclic. To this end, extra nodes are; // pre-allocated at construction time to describe instructions from ""past and; // future"" iterations. The graph is kept acyclic mainly because it simplifies; // the complexity of the algorithm that computes the critical sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:75,Integrability,depend,dependencies,75,"// A dependency graph used by the bottleneck analysis to describe data; // dependencies and processor resource interferences between instructions.; //; // There is a node (an instance of struct DGNode) for every instruction in the; // input assembly sequence. Edges of the graph represent dependencies between; // instructions.; //; // Each edge of the graph is associated with a cost value which is used; // internally to rank dependency based on their impact on the runtime; // performance (see field DependencyEdge::Dependency::Cost). In general, the; // higher the cost of an edge, the higher the impact on performance.; //; // The cost of a dependency is a function of both the latency and the number of; // cycles where the dependency has been seen as critical (i.e. contributing to; // back-pressure increases).; //; // Loop carried dependencies are carefully expanded by the bottleneck analysis; // to guarantee that the graph stays acyclic. To this end, extra nodes are; // pre-allocated at construction time to describe instructions from ""past and; // future"" iterations. The graph is kept acyclic mainly because it simplifies; // the complexity of the algorithm that computes the critical sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:289,Integrability,depend,dependencies,289,"// A dependency graph used by the bottleneck analysis to describe data; // dependencies and processor resource interferences between instructions.; //; // There is a node (an instance of struct DGNode) for every instruction in the; // input assembly sequence. Edges of the graph represent dependencies between; // instructions.; //; // Each edge of the graph is associated with a cost value which is used; // internally to rank dependency based on their impact on the runtime; // performance (see field DependencyEdge::Dependency::Cost). In general, the; // higher the cost of an edge, the higher the impact on performance.; //; // The cost of a dependency is a function of both the latency and the number of; // cycles where the dependency has been seen as critical (i.e. contributing to; // back-pressure increases).; //; // Loop carried dependencies are carefully expanded by the bottleneck analysis; // to guarantee that the graph stays acyclic. To this end, extra nodes are; // pre-allocated at construction time to describe instructions from ""past and; // future"" iterations. The graph is kept acyclic mainly because it simplifies; // the complexity of the algorithm that computes the critical sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:428,Integrability,depend,dependency,428,"// A dependency graph used by the bottleneck analysis to describe data; // dependencies and processor resource interferences between instructions.; //; // There is a node (an instance of struct DGNode) for every instruction in the; // input assembly sequence. Edges of the graph represent dependencies between; // instructions.; //; // Each edge of the graph is associated with a cost value which is used; // internally to rank dependency based on their impact on the runtime; // performance (see field DependencyEdge::Dependency::Cost). In general, the; // higher the cost of an edge, the higher the impact on performance.; //; // The cost of a dependency is a function of both the latency and the number of; // cycles where the dependency has been seen as critical (i.e. contributing to; // back-pressure increases).; //; // Loop carried dependencies are carefully expanded by the bottleneck analysis; // to guarantee that the graph stays acyclic. To this end, extra nodes are; // pre-allocated at construction time to describe instructions from ""past and; // future"" iterations. The graph is kept acyclic mainly because it simplifies; // the complexity of the algorithm that computes the critical sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:503,Integrability,Depend,DependencyEdge,503,"// A dependency graph used by the bottleneck analysis to describe data; // dependencies and processor resource interferences between instructions.; //; // There is a node (an instance of struct DGNode) for every instruction in the; // input assembly sequence. Edges of the graph represent dependencies between; // instructions.; //; // Each edge of the graph is associated with a cost value which is used; // internally to rank dependency based on their impact on the runtime; // performance (see field DependencyEdge::Dependency::Cost). In general, the; // higher the cost of an edge, the higher the impact on performance.; //; // The cost of a dependency is a function of both the latency and the number of; // cycles where the dependency has been seen as critical (i.e. contributing to; // back-pressure increases).; //; // Loop carried dependencies are carefully expanded by the bottleneck analysis; // to guarantee that the graph stays acyclic. To this end, extra nodes are; // pre-allocated at construction time to describe instructions from ""past and; // future"" iterations. The graph is kept acyclic mainly because it simplifies; // the complexity of the algorithm that computes the critical sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:519,Integrability,Depend,Dependency,519,"// A dependency graph used by the bottleneck analysis to describe data; // dependencies and processor resource interferences between instructions.; //; // There is a node (an instance of struct DGNode) for every instruction in the; // input assembly sequence. Edges of the graph represent dependencies between; // instructions.; //; // Each edge of the graph is associated with a cost value which is used; // internally to rank dependency based on their impact on the runtime; // performance (see field DependencyEdge::Dependency::Cost). In general, the; // higher the cost of an edge, the higher the impact on performance.; //; // The cost of a dependency is a function of both the latency and the number of; // cycles where the dependency has been seen as critical (i.e. contributing to; // back-pressure increases).; //; // Loop carried dependencies are carefully expanded by the bottleneck analysis; // to guarantee that the graph stays acyclic. To this end, extra nodes are; // pre-allocated at construction time to describe instructions from ""past and; // future"" iterations. The graph is kept acyclic mainly because it simplifies; // the complexity of the algorithm that computes the critical sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:646,Integrability,depend,dependency,646,"// A dependency graph used by the bottleneck analysis to describe data; // dependencies and processor resource interferences between instructions.; //; // There is a node (an instance of struct DGNode) for every instruction in the; // input assembly sequence. Edges of the graph represent dependencies between; // instructions.; //; // Each edge of the graph is associated with a cost value which is used; // internally to rank dependency based on their impact on the runtime; // performance (see field DependencyEdge::Dependency::Cost). In general, the; // higher the cost of an edge, the higher the impact on performance.; //; // The cost of a dependency is a function of both the latency and the number of; // cycles where the dependency has been seen as critical (i.e. contributing to; // back-pressure increases).; //; // Loop carried dependencies are carefully expanded by the bottleneck analysis; // to guarantee that the graph stays acyclic. To this end, extra nodes are; // pre-allocated at construction time to describe instructions from ""past and; // future"" iterations. The graph is kept acyclic mainly because it simplifies; // the complexity of the algorithm that computes the critical sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:730,Integrability,depend,dependency,730,"// A dependency graph used by the bottleneck analysis to describe data; // dependencies and processor resource interferences between instructions.; //; // There is a node (an instance of struct DGNode) for every instruction in the; // input assembly sequence. Edges of the graph represent dependencies between; // instructions.; //; // Each edge of the graph is associated with a cost value which is used; // internally to rank dependency based on their impact on the runtime; // performance (see field DependencyEdge::Dependency::Cost). In general, the; // higher the cost of an edge, the higher the impact on performance.; //; // The cost of a dependency is a function of both the latency and the number of; // cycles where the dependency has been seen as critical (i.e. contributing to; // back-pressure increases).; //; // Loop carried dependencies are carefully expanded by the bottleneck analysis; // to guarantee that the graph stays acyclic. To this end, extra nodes are; // pre-allocated at construction time to describe instructions from ""past and; // future"" iterations. The graph is kept acyclic mainly because it simplifies; // the complexity of the algorithm that computes the critical sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:840,Integrability,depend,dependencies,840,"// A dependency graph used by the bottleneck analysis to describe data; // dependencies and processor resource interferences between instructions.; //; // There is a node (an instance of struct DGNode) for every instruction in the; // input assembly sequence. Edges of the graph represent dependencies between; // instructions.; //; // Each edge of the graph is associated with a cost value which is used; // internally to rank dependency based on their impact on the runtime; // performance (see field DependencyEdge::Dependency::Cost). In general, the; // higher the cost of an edge, the higher the impact on performance.; //; // The cost of a dependency is a function of both the latency and the number of; // cycles where the dependency has been seen as critical (i.e. contributing to; // back-pressure increases).; //; // Loop carried dependencies are carefully expanded by the bottleneck analysis; // to guarantee that the graph stays acyclic. To this end, extra nodes are; // pre-allocated at construction time to describe instructions from ""past and; // future"" iterations. The graph is kept acyclic mainly because it simplifies; // the complexity of the algorithm that computes the critical sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:34,Performance,bottleneck,bottleneck,34,"// A dependency graph used by the bottleneck analysis to describe data; // dependencies and processor resource interferences between instructions.; //; // There is a node (an instance of struct DGNode) for every instruction in the; // input assembly sequence. Edges of the graph represent dependencies between; // instructions.; //; // Each edge of the graph is associated with a cost value which is used; // internally to rank dependency based on their impact on the runtime; // performance (see field DependencyEdge::Dependency::Cost). In general, the; // higher the cost of an edge, the higher the impact on performance.; //; // The cost of a dependency is a function of both the latency and the number of; // cycles where the dependency has been seen as critical (i.e. contributing to; // back-pressure increases).; //; // Loop carried dependencies are carefully expanded by the bottleneck analysis; // to guarantee that the graph stays acyclic. To this end, extra nodes are; // pre-allocated at construction time to describe instructions from ""past and; // future"" iterations. The graph is kept acyclic mainly because it simplifies; // the complexity of the algorithm that computes the critical sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:480,Performance,perform,performance,480,"// A dependency graph used by the bottleneck analysis to describe data; // dependencies and processor resource interferences between instructions.; //; // There is a node (an instance of struct DGNode) for every instruction in the; // input assembly sequence. Edges of the graph represent dependencies between; // instructions.; //; // Each edge of the graph is associated with a cost value which is used; // internally to rank dependency based on their impact on the runtime; // performance (see field DependencyEdge::Dependency::Cost). In general, the; // higher the cost of an edge, the higher the impact on performance.; //; // The cost of a dependency is a function of both the latency and the number of; // cycles where the dependency has been seen as critical (i.e. contributing to; // back-pressure increases).; //; // Loop carried dependencies are carefully expanded by the bottleneck analysis; // to guarantee that the graph stays acyclic. To this end, extra nodes are; // pre-allocated at construction time to describe instructions from ""past and; // future"" iterations. The graph is kept acyclic mainly because it simplifies; // the complexity of the algorithm that computes the critical sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:611,Performance,perform,performance,611,"// A dependency graph used by the bottleneck analysis to describe data; // dependencies and processor resource interferences between instructions.; //; // There is a node (an instance of struct DGNode) for every instruction in the; // input assembly sequence. Edges of the graph represent dependencies between; // instructions.; //; // Each edge of the graph is associated with a cost value which is used; // internally to rank dependency based on their impact on the runtime; // performance (see field DependencyEdge::Dependency::Cost). In general, the; // higher the cost of an edge, the higher the impact on performance.; //; // The cost of a dependency is a function of both the latency and the number of; // cycles where the dependency has been seen as critical (i.e. contributing to; // back-pressure increases).; //; // Loop carried dependencies are carefully expanded by the bottleneck analysis; // to guarantee that the graph stays acyclic. To this end, extra nodes are; // pre-allocated at construction time to describe instructions from ""past and; // future"" iterations. The graph is kept acyclic mainly because it simplifies; // the complexity of the algorithm that computes the critical sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:683,Performance,latency,latency,683,"// A dependency graph used by the bottleneck analysis to describe data; // dependencies and processor resource interferences between instructions.; //; // There is a node (an instance of struct DGNode) for every instruction in the; // input assembly sequence. Edges of the graph represent dependencies between; // instructions.; //; // Each edge of the graph is associated with a cost value which is used; // internally to rank dependency based on their impact on the runtime; // performance (see field DependencyEdge::Dependency::Cost). In general, the; // higher the cost of an edge, the higher the impact on performance.; //; // The cost of a dependency is a function of both the latency and the number of; // cycles where the dependency has been seen as critical (i.e. contributing to; // back-pressure increases).; //; // Loop carried dependencies are carefully expanded by the bottleneck analysis; // to guarantee that the graph stays acyclic. To this end, extra nodes are; // pre-allocated at construction time to describe instructions from ""past and; // future"" iterations. The graph is kept acyclic mainly because it simplifies; // the complexity of the algorithm that computes the critical sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:883,Performance,bottleneck,bottleneck,883,"// A dependency graph used by the bottleneck analysis to describe data; // dependencies and processor resource interferences between instructions.; //; // There is a node (an instance of struct DGNode) for every instruction in the; // input assembly sequence. Edges of the graph represent dependencies between; // instructions.; //; // Each edge of the graph is associated with a cost value which is used; // internally to rank dependency based on their impact on the runtime; // performance (see field DependencyEdge::Dependency::Cost). In general, the; // higher the cost of an edge, the higher the impact on performance.; //; // The cost of a dependency is a function of both the latency and the number of; // cycles where the dependency has been seen as critical (i.e. contributing to; // back-pressure increases).; //; // Loop carried dependencies are carefully expanded by the bottleneck analysis; // to guarantee that the graph stays acyclic. To this end, extra nodes are; // pre-allocated at construction time to describe instructions from ""past and; // future"" iterations. The graph is kept acyclic mainly because it simplifies; // the complexity of the algorithm that computes the critical sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:1126,Usability,simpl,simplifies,1126,"// A dependency graph used by the bottleneck analysis to describe data; // dependencies and processor resource interferences between instructions.; //; // There is a node (an instance of struct DGNode) for every instruction in the; // input assembly sequence. Edges of the graph represent dependencies between; // instructions.; //; // Each edge of the graph is associated with a cost value which is used; // internally to rank dependency based on their impact on the runtime; // performance (see field DependencyEdge::Dependency::Cost). In general, the; // higher the cost of an edge, the higher the impact on performance.; //; // The cost of a dependency is a function of both the latency and the number of; // cycles where the dependency has been seen as critical (i.e. contributing to; // back-pressure increases).; //; // Loop carried dependencies are carefully expanded by the bottleneck analysis; // to guarantee that the graph stays acyclic. To this end, extra nodes are; // pre-allocated at construction time to describe instructions from ""past and; // future"" iterations. The graph is kept acyclic mainly because it simplifies; // the complexity of the algorithm that computes the critical sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:17,Performance,bottleneck,bottleneck,17,"// Called by the bottleneck analysis at the end of simulation to propagate; // costs through the edges of the graph, and compute a critical path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:42,Performance,perform,performance,42,/// A view that collects and prints a few performance numbers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:11,Performance,throughput,throughput,11,// True if throughput was affected by dispatch stalls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:50,Deployability,pipeline,pipeline,50,// Cycles where backpressure increased because of pipeline pressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:55,Integrability,depend,dependencies,55,// Cycles where backpressure increased because of data dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:59,Integrability,depend,dependencies,59,// Cycles where backpressure increased because of register dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:57,Integrability,depend,dependencies,57,// Cycles where backpressure increased because of memory dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:24,Integrability,depend,dependency,24,// Used to populate the dependency graph DG.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:23,Integrability,message,message,23,// Prints a bottleneck message to OS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h:12,Performance,bottleneck,bottleneck,12,// Prints a bottleneck message to OS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/BottleneckAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.cpp:440,Integrability,interface,interface,440,"//===--------------------- DispatchStatistics.cpp ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the DispatchStatistics interface.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.h:759,Energy Efficiency,Schedul,Scheduler,759,"//===--------------------- DispatchStatistics.h -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements a view that prints a few statistics related to the; /// dispatch logic. It collects and analyzes instruction dispatch events as; /// well as static/dynamic dispatch stall events.; ///; /// Example:; /// ========; ///; /// Dynamic Dispatch Stall Cycles:; /// RAT - Register unavailable: 0; /// RCU - Retire tokens unavailable: 0; /// SCHEDQ - Scheduler full: 42; /// LQ - Load queue full: 0; /// SQ - Store queue full: 0; /// GROUP - Static restrictions on the dispatch group: 0; ///; ///; /// Dispatch Logic - number of cycles where we saw N micro opcodes dispatched:; /// [# dispatched], [# cycles]; /// 0, 15 (11.5%); /// 2, 4 (3.1%); ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.h:788,Performance,Load,Load,788,"//===--------------------- DispatchStatistics.h -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements a view that prints a few statistics related to the; /// dispatch logic. It collects and analyzes instruction dispatch events as; /// well as static/dynamic dispatch stall events.; ///; /// Example:; /// ========; ///; /// Dynamic Dispatch Stall Cycles:; /// RAT - Register unavailable: 0; /// RCU - Retire tokens unavailable: 0; /// SCHEDQ - Scheduler full: 42; /// LQ - Load queue full: 0; /// SQ - Store queue full: 0; /// GROUP - Static restrictions on the dispatch group: 0; ///; ///; /// Dispatch Logic - number of cycles where we saw N micro opcodes dispatched:; /// [# dispatched], [# cycles]; /// 0, 15 (11.5%); /// 2, 4 (3.1%); ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.h:793,Performance,queue,queue,793,"//===--------------------- DispatchStatistics.h -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements a view that prints a few statistics related to the; /// dispatch logic. It collects and analyzes instruction dispatch events as; /// well as static/dynamic dispatch stall events.; ///; /// Example:; /// ========; ///; /// Dynamic Dispatch Stall Cycles:; /// RAT - Register unavailable: 0; /// RCU - Retire tokens unavailable: 0; /// SCHEDQ - Scheduler full: 42; /// LQ - Load queue full: 0; /// SQ - Store queue full: 0; /// GROUP - Static restrictions on the dispatch group: 0; ///; ///; /// Dispatch Logic - number of cycles where we saw N micro opcodes dispatched:; /// [# dispatched], [# cycles]; /// 0, 15 (11.5%); /// 2, 4 (3.1%); ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.h:823,Performance,queue,queue,823,"//===--------------------- DispatchStatistics.h -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements a view that prints a few statistics related to the; /// dispatch logic. It collects and analyzes instruction dispatch events as; /// well as static/dynamic dispatch stall events.; ///; /// Example:; /// ========; ///; /// Dynamic Dispatch Stall Cycles:; /// RAT - Register unavailable: 0; /// RCU - Retire tokens unavailable: 0; /// SCHEDQ - Scheduler full: 42; /// LQ - Load queue full: 0; /// SQ - Store queue full: 0; /// GROUP - Static restrictions on the dispatch group: 0; ///; ///; /// Dispatch Logic - number of cycles where we saw N micro opcodes dispatched:; /// [# dispatched], [# cycles]; /// 0, 15 (11.5%); /// 2, 4 (3.1%); ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.h:482,Testability,log,logic,482,"//===--------------------- DispatchStatistics.h -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements a view that prints a few statistics related to the; /// dispatch logic. It collects and analyzes instruction dispatch events as; /// well as static/dynamic dispatch stall events.; ///; /// Example:; /// ========; ///; /// Dynamic Dispatch Stall Cycles:; /// RAT - Register unavailable: 0; /// RCU - Retire tokens unavailable: 0; /// SCHEDQ - Scheduler full: 42; /// LQ - Load queue full: 0; /// SQ - Store queue full: 0; /// GROUP - Static restrictions on the dispatch group: 0; ///; ///; /// Dispatch Logic - number of cycles where we saw N micro opcodes dispatched:; /// [# dispatched], [# cycles]; /// 0, 15 (11.5%); /// 2, 4 (3.1%); ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.h:919,Testability,Log,Logic,919,"//===--------------------- DispatchStatistics.h -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements a view that prints a few statistics related to the; /// dispatch logic. It collects and analyzes instruction dispatch events as; /// well as static/dynamic dispatch stall events.; ///; /// Example:; /// ========; ///; /// Dynamic Dispatch Stall Cycles:; /// RAT - Register unavailable: 0; /// RCU - Retire tokens unavailable: 0; /// SCHEDQ - Scheduler full: 42; /// LQ - Load queue full: 0; /// SQ - Store queue full: 0; /// GROUP - Static restrictions on the dispatch group: 0; ///; ///; /// Dispatch Logic - number of cycles where we saw N micro opcodes dispatched:; /// [# dispatched], [# cycles]; /// 0, 15 (11.5%); /// 2, 4 (3.1%); ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/DispatchStatistics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/InstructionInfoView.cpp:14,Energy Efficiency,schedul,scheduling,14,// Obtain the scheduling class information from the instruction; // and instruments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/InstructionInfoView.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/InstructionInfoView.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/InstructionInfoView.cpp:24,Energy Efficiency,schedul,scheduling,24,// Try to solve variant scheduling classes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/InstructionInfoView.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/InstructionInfoView.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/InstructionInfoView.cpp:13,Performance,latency,latency,13,// Add extra latency due to delays in the forwarding data paths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/InstructionInfoView.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/InstructionInfoView.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/InstructionInfoView.h:508,Performance,latency,latency,508,"//===--------------------- InstructionInfoView.h ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the instruction info view.; ///; /// The goal fo the instruction info view is to print the latency and reciprocal; /// throughput information for every instruction in the input sequence.; /// This section also reports extra information related to the number of micro; /// opcodes, and opcode properties (i.e. 'MayLoad', 'MayStore', 'HasSideEffects); ///; /// Example:; ///; /// Instruction Info:; /// [1]: #uOps; /// [2]: Latency; /// [3]: RThroughput; /// [4]: MayLoad; /// [5]: MayStore; /// [6]: HasSideEffects; ///; /// [1] [2] [3] [4] [5] [6]	Instructions:; /// 1 2 1.00 	vmulps	%xmm0, %xmm1, %xmm2; /// 1 3 1.00 	vhaddps	%xmm2, %xmm2, %xmm3; /// 1 3 1.00 	vhaddps	%xmm3, %xmm3, %xmm4; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/InstructionInfoView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/InstructionInfoView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/InstructionInfoView.h:536,Performance,throughput,throughput,536,"//===--------------------- InstructionInfoView.h ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the instruction info view.; ///; /// The goal fo the instruction info view is to print the latency and reciprocal; /// throughput information for every instruction in the input sequence.; /// This section also reports extra information related to the number of micro; /// opcodes, and opcode properties (i.e. 'MayLoad', 'MayStore', 'HasSideEffects); ///; /// Example:; ///; /// Instruction Info:; /// [1]: #uOps; /// [2]: Latency; /// [3]: RThroughput; /// [4]: MayLoad; /// [5]: MayStore; /// [6]: HasSideEffects; ///; /// [1] [2] [3] [4] [5] [6]	Instructions:; /// 1 2 1.00 	vmulps	%xmm0, %xmm1, %xmm2; /// 1 3 1.00 	vhaddps	%xmm2, %xmm2, %xmm3; /// 1 3 1.00 	vhaddps	%xmm3, %xmm3, %xmm4; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/InstructionInfoView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/InstructionInfoView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/InstructionInfoView.h:839,Performance,Latency,Latency,839,"//===--------------------- InstructionInfoView.h ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the instruction info view.; ///; /// The goal fo the instruction info view is to print the latency and reciprocal; /// throughput information for every instruction in the input sequence.; /// This section also reports extra information related to the number of micro; /// opcodes, and opcode properties (i.e. 'MayLoad', 'MayStore', 'HasSideEffects); ///; /// Example:; ///; /// Instruction Info:; /// [1]: #uOps; /// [2]: Latency; /// [3]: RThroughput; /// [4]: MayLoad; /// [5]: MayStore; /// [6]: HasSideEffects; ///; /// [1] [2] [3] [4] [5] [6]	Instructions:; /// 1 2 1.00 	vmulps	%xmm0, %xmm1, %xmm2; /// 1 3 1.00 	vhaddps	%xmm2, %xmm2, %xmm3; /// 1 3 1.00 	vhaddps	%xmm3, %xmm3, %xmm4; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/InstructionInfoView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/InstructionInfoView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/InstructionView.h:423,Integrability,interface,interface,423,"//===----------------------- InstructionView.h ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the main interface for Views that examine and reference; /// a sequence of machine instructions.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/InstructionView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/InstructionView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/RegisterFileStatistics.cpp:444,Integrability,interface,interface,444,"//===--------------------- RegisterFileStatistics.cpp -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the RegisterFileStatistics interface.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/RegisterFileStatistics.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/RegisterFileStatistics.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/RegisterFileStatistics.cpp:48,Energy Efficiency,schedul,scheduling,48,// Obtain the register file descriptor from the scheduling model.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/RegisterFileStatistics.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/RegisterFileStatistics.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/RegisterFileStatistics.h:805,Performance,optimiz,optimizable,805,"//===--------------------- RegisterFileStatistics.h -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This view collects and prints register file usage statistics.; ///; /// Example (-mcpu=btver2):; /// ========================; ///; /// Register File statistics:; /// Total number of mappings created: 6; /// Max number of mappings used: 3; ///; /// * Register File #1 -- FpuPRF:; /// Number of physical registers: 72; /// Total number of mappings created: 0; /// Max number of mappings used: 0; /// Number of optimizable moves: 200; /// Number of moves eliminated: 200 (100.0%); /// Number of zero moves: 200 (100.0%); /// Max moves eliminated per cycle: 2; ///; /// * Register File #2 -- IntegerPRF:; /// Number of physical registers: 64; /// Total number of mappings created: 6; /// Max number of mappings used: 3; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/RegisterFileStatistics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/RegisterFileStatistics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/ResourcePressureView.cpp:453,Integrability,interface,interface,453,"//===--------------------- ResourcePressureView.cpp -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements methods in the ResourcePressureView interface.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/ResourcePressureView.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/ResourcePressureView.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/ResourcePressureView.h:520,Deployability,Pipeline,Pipeline,520,"//===--------------------- ResourcePressureView.h ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file define class ResourcePressureView.; /// Class ResourcePressureView observes hardware events generated by; /// the Pipeline object and collects statistics related to resource usage at; /// instruction granularity.; /// Resource pressure information is then printed out to a stream in the; /// form of a table like the one from the example below:; ///; /// Resources:; /// [0] - JALU0; /// [1] - JALU1; /// [2] - JDiv; /// [3] - JFPM; /// [4] - JFPU0; /// [5] - JFPU1; /// [6] - JLAGU; /// [7] - JSAGU; /// [8] - JSTC; /// [9] - JVIMUL; ///; /// Resource pressure per iteration:; /// [0] [1] [2] [3] [4] [5] [6] [7] [8] [9]; /// 0.00 0.00 0.00 0.00 2.00 2.00 0.00 0.00 0.00 0.00; ///; /// Resource pressure by instruction:; /// [0] [1] [2] [3] [4] [5] [6] [7] [8] [9] Instructions:; /// - - - - - 1.00 - - - - vpermilpd $1, %xmm0,; /// %xmm1; /// - - - - 1.00 - - - - - vaddps %xmm0, %xmm1,; /// %xmm2; /// - - - - - 1.00 - - - - vmovshdup %xmm2, %xmm3; /// - - - - 1.00 - - - - - vaddss %xmm2, %xmm3,; /// %xmm4; ///; /// In this example, we have AVX code executed on AMD Jaguar (btver2).; /// Both shuffles and vector floating point add operations on XMM registers have; /// a reciprocal throughput of 1cy.; /// Each add is issued to pipeline JFPU0, while each shuffle is issued to; /// pipeline JFPU1. The overall pressure per iteration is reported by two; /// tables: the first smaller table is the resource pressure per iteration;; /// the second table reports resource pressure per instruction. Values are the; /// average resource cycles consumed by an instruction.; /// Every vector add fr",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/ResourcePressureView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/ResourcePressureView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/ResourcePressureView.h:1640,Deployability,pipeline,pipeline,1640,"icense-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file define class ResourcePressureView.; /// Class ResourcePressureView observes hardware events generated by; /// the Pipeline object and collects statistics related to resource usage at; /// instruction granularity.; /// Resource pressure information is then printed out to a stream in the; /// form of a table like the one from the example below:; ///; /// Resources:; /// [0] - JALU0; /// [1] - JALU1; /// [2] - JDiv; /// [3] - JFPM; /// [4] - JFPU0; /// [5] - JFPU1; /// [6] - JLAGU; /// [7] - JSAGU; /// [8] - JSTC; /// [9] - JVIMUL; ///; /// Resource pressure per iteration:; /// [0] [1] [2] [3] [4] [5] [6] [7] [8] [9]; /// 0.00 0.00 0.00 0.00 2.00 2.00 0.00 0.00 0.00 0.00; ///; /// Resource pressure by instruction:; /// [0] [1] [2] [3] [4] [5] [6] [7] [8] [9] Instructions:; /// - - - - - 1.00 - - - - vpermilpd $1, %xmm0,; /// %xmm1; /// - - - - 1.00 - - - - - vaddps %xmm0, %xmm1,; /// %xmm2; /// - - - - - 1.00 - - - - vmovshdup %xmm2, %xmm3; /// - - - - 1.00 - - - - - vaddss %xmm2, %xmm3,; /// %xmm4; ///; /// In this example, we have AVX code executed on AMD Jaguar (btver2).; /// Both shuffles and vector floating point add operations on XMM registers have; /// a reciprocal throughput of 1cy.; /// Each add is issued to pipeline JFPU0, while each shuffle is issued to; /// pipeline JFPU1. The overall pressure per iteration is reported by two; /// tables: the first smaller table is the resource pressure per iteration;; /// the second table reports resource pressure per instruction. Values are the; /// average resource cycles consumed by an instruction.; /// Every vector add from the example uses resource JFPU0 for an average of 1cy; /// per iteration. Consequently, the resource pressure on JFPU0 is of 2cy per; /// iteration.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/ResourcePressureView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/ResourcePressureView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/ResourcePressureView.h:1693,Deployability,pipeline,pipeline,1693,"icense-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file define class ResourcePressureView.; /// Class ResourcePressureView observes hardware events generated by; /// the Pipeline object and collects statistics related to resource usage at; /// instruction granularity.; /// Resource pressure information is then printed out to a stream in the; /// form of a table like the one from the example below:; ///; /// Resources:; /// [0] - JALU0; /// [1] - JALU1; /// [2] - JDiv; /// [3] - JFPM; /// [4] - JFPU0; /// [5] - JFPU1; /// [6] - JLAGU; /// [7] - JSAGU; /// [8] - JSTC; /// [9] - JVIMUL; ///; /// Resource pressure per iteration:; /// [0] [1] [2] [3] [4] [5] [6] [7] [8] [9]; /// 0.00 0.00 0.00 0.00 2.00 2.00 0.00 0.00 0.00 0.00; ///; /// Resource pressure by instruction:; /// [0] [1] [2] [3] [4] [5] [6] [7] [8] [9] Instructions:; /// - - - - - 1.00 - - - - vpermilpd $1, %xmm0,; /// %xmm1; /// - - - - 1.00 - - - - - vaddps %xmm0, %xmm1,; /// %xmm2; /// - - - - - 1.00 - - - - vmovshdup %xmm2, %xmm3; /// - - - - 1.00 - - - - - vaddss %xmm2, %xmm3,; /// %xmm4; ///; /// In this example, we have AVX code executed on AMD Jaguar (btver2).; /// Both shuffles and vector floating point add operations on XMM registers have; /// a reciprocal throughput of 1cy.; /// Each add is issued to pipeline JFPU0, while each shuffle is issued to; /// pipeline JFPU1. The overall pressure per iteration is reported by two; /// tables: the first smaller table is the resource pressure per iteration;; /// the second table reports resource pressure per instruction. Values are the; /// average resource cycles consumed by an instruction.; /// Every vector add from the example uses resource JFPU0 for an average of 1cy; /// per iteration. Consequently, the resource pressure on JFPU0 is of 2cy per; /// iteration.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/ResourcePressureView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/ResourcePressureView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/ResourcePressureView.h:1594,Performance,throughput,throughput,1594,"icense-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file define class ResourcePressureView.; /// Class ResourcePressureView observes hardware events generated by; /// the Pipeline object and collects statistics related to resource usage at; /// instruction granularity.; /// Resource pressure information is then printed out to a stream in the; /// form of a table like the one from the example below:; ///; /// Resources:; /// [0] - JALU0; /// [1] - JALU1; /// [2] - JDiv; /// [3] - JFPM; /// [4] - JFPU0; /// [5] - JFPU1; /// [6] - JLAGU; /// [7] - JSAGU; /// [8] - JSTC; /// [9] - JVIMUL; ///; /// Resource pressure per iteration:; /// [0] [1] [2] [3] [4] [5] [6] [7] [8] [9]; /// 0.00 0.00 0.00 0.00 2.00 2.00 0.00 0.00 0.00 0.00; ///; /// Resource pressure by instruction:; /// [0] [1] [2] [3] [4] [5] [6] [7] [8] [9] Instructions:; /// - - - - - 1.00 - - - - vpermilpd $1, %xmm0,; /// %xmm1; /// - - - - 1.00 - - - - - vaddps %xmm0, %xmm1,; /// %xmm2; /// - - - - - 1.00 - - - - vmovshdup %xmm2, %xmm3; /// - - - - 1.00 - - - - - vaddss %xmm2, %xmm3,; /// %xmm4; ///; /// In this example, we have AVX code executed on AMD Jaguar (btver2).; /// Both shuffles and vector floating point add operations on XMM registers have; /// a reciprocal throughput of 1cy.; /// Each add is issued to pipeline JFPU0, while each shuffle is issued to; /// pipeline JFPU1. The overall pressure per iteration is reported by two; /// tables: the first smaller table is the resource pressure per iteration;; /// the second table reports resource pressure per instruction. Values are the; /// average resource cycles consumed by an instruction.; /// Every vector add from the example uses resource JFPU0 for an average of 1cy; /// per iteration. Consequently, the resource pressure on JFPU0 is of 2cy per; /// iteration.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/ResourcePressureView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/ResourcePressureView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/RetireControlUnitStatistics.cpp:449,Integrability,interface,interface,449,"//===--------------------- RetireControlUnitStatistics.cpp ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the RetireControlUnitStatistics interface.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/RetireControlUnitStatistics.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/RetireControlUnitStatistics.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/RetireControlUnitStatistics.cpp:3,Deployability,Update,Update,3,// Update histogram,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/RetireControlUnitStatistics.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/RetireControlUnitStatistics.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp:27,Energy Efficiency,Schedul,SchedulerStatistics,27,"//===--------------------- SchedulerStatistics.cpp --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the SchedulerStatistics interface.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp:421,Energy Efficiency,Schedul,SchedulerStatistics,421,"//===--------------------- SchedulerStatistics.cpp --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the SchedulerStatistics interface.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp:441,Integrability,interface,interface,441,"//===--------------------- SchedulerStatistics.cpp --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the SchedulerStatistics interface.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp:143,Deployability,release,released,143,"// FIXME: This implementation works under the assumption that load/store queue; // entries are reserved at 'instruction dispatched' stage, and released at; // 'instruction executed' stage. This currently matches the behavior of LSUnit.; //; // The current design minimizes the number of events generated by the; // Dispatch/Execute stages, at the cost of doing extra bookkeeping in method; // `onEvent`. However, it introduces a subtle dependency between this view and; // how the LSUnit works.; //; // In future we should add a new ""memory queue"" event type, so that we stop; // making assumptions on how LSUnit internally works (See PR39828).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp:436,Integrability,depend,dependency,436,"// FIXME: This implementation works under the assumption that load/store queue; // entries are reserved at 'instruction dispatched' stage, and released at; // 'instruction executed' stage. This currently matches the behavior of LSUnit.; //; // The current design minimizes the number of events generated by the; // Dispatch/Execute stages, at the cost of doing extra bookkeeping in method; // `onEvent`. However, it introduces a subtle dependency between this view and; // how the LSUnit works.; //; // In future we should add a new ""memory queue"" event type, so that we stop; // making assumptions on how LSUnit internally works (See PR39828).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp:62,Performance,load,load,62,"// FIXME: This implementation works under the assumption that load/store queue; // entries are reserved at 'instruction dispatched' stage, and released at; // 'instruction executed' stage. This currently matches the behavior of LSUnit.; //; // The current design minimizes the number of events generated by the; // Dispatch/Execute stages, at the cost of doing extra bookkeeping in method; // `onEvent`. However, it introduces a subtle dependency between this view and; // how the LSUnit works.; //; // In future we should add a new ""memory queue"" event type, so that we stop; // making assumptions on how LSUnit internally works (See PR39828).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp:73,Performance,queue,queue,73,"// FIXME: This implementation works under the assumption that load/store queue; // entries are reserved at 'instruction dispatched' stage, and released at; // 'instruction executed' stage. This currently matches the behavior of LSUnit.; //; // The current design minimizes the number of events generated by the; // Dispatch/Execute stages, at the cost of doing extra bookkeeping in method; // `onEvent`. However, it introduces a subtle dependency between this view and; // how the LSUnit works.; //; // In future we should add a new ""memory queue"" event type, so that we stop; // making assumptions on how LSUnit internally works (See PR39828).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp:541,Performance,queue,queue,541,"// FIXME: This implementation works under the assumption that load/store queue; // entries are reserved at 'instruction dispatched' stage, and released at; // 'instruction executed' stage. This currently matches the behavior of LSUnit.; //; // The current design minimizes the number of events generated by the; // Dispatch/Execute stages, at the cost of doing extra bookkeeping in method; // `onEvent`. However, it introduces a subtle dependency between this view and; // how the LSUnit works.; //; // In future we should add a new ""memory queue"" event type, so that we stop; // making assumptions on how LSUnit internally works (See PR39828).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h:27,Energy Efficiency,Schedul,SchedulerStatistics,27,"//===--------------------- SchedulerStatistics.h ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines class SchedulerStatistics. Class SchedulerStatistics is a; /// View that listens to instruction issue events in order to print general; /// statistics related to the hardware schedulers.; ///; /// Example:; /// ========; ///; /// Schedulers - number of cycles where we saw N instructions issued:; /// [# issued], [# cycles]; /// 0, 6 (2.9%); /// 1, 106 (50.7%); /// 2, 97 (46.4%); ///; /// Scheduler's queue usage:; /// [1] Resource name.; /// [2] Average number of used buffer entries.; /// [3] Maximum number of used buffer entries.; /// [4] Total number of buffer entries.; ///; /// [1] [2] [3] [4]; /// JALU01 0 0 20; /// JFPU01 15 18 18; /// JLSAGU 0 0 12; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h:420,Energy Efficiency,Schedul,SchedulerStatistics,420,"//===--------------------- SchedulerStatistics.h ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines class SchedulerStatistics. Class SchedulerStatistics is a; /// View that listens to instruction issue events in order to print general; /// statistics related to the hardware schedulers.; ///; /// Example:; /// ========; ///; /// Schedulers - number of cycles where we saw N instructions issued:; /// [# issued], [# cycles]; /// 0, 6 (2.9%); /// 1, 106 (50.7%); /// 2, 97 (46.4%); ///; /// Scheduler's queue usage:; /// [1] Resource name.; /// [2] Average number of used buffer entries.; /// [3] Maximum number of used buffer entries.; /// [4] Total number of buffer entries.; ///; /// [1] [2] [3] [4]; /// JALU01 0 0 20; /// JFPU01 15 18 18; /// JLSAGU 0 0 12; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h:447,Energy Efficiency,Schedul,SchedulerStatistics,447,"//===--------------------- SchedulerStatistics.h ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines class SchedulerStatistics. Class SchedulerStatistics is a; /// View that listens to instruction issue events in order to print general; /// statistics related to the hardware schedulers.; ///; /// Example:; /// ========; ///; /// Schedulers - number of cycles where we saw N instructions issued:; /// [# issued], [# cycles]; /// 0, 6 (2.9%); /// 1, 106 (50.7%); /// 2, 97 (46.4%); ///; /// Scheduler's queue usage:; /// [1] Resource name.; /// [2] Average number of used buffer entries.; /// [3] Maximum number of used buffer entries.; /// [4] Total number of buffer entries.; ///; /// [1] [2] [3] [4]; /// JALU01 0 0 20; /// JFPU01 15 18 18; /// JLSAGU 0 0 12; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h:589,Energy Efficiency,schedul,schedulers,589,"//===--------------------- SchedulerStatistics.h ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines class SchedulerStatistics. Class SchedulerStatistics is a; /// View that listens to instruction issue events in order to print general; /// statistics related to the hardware schedulers.; ///; /// Example:; /// ========; ///; /// Schedulers - number of cycles where we saw N instructions issued:; /// [# issued], [# cycles]; /// 0, 6 (2.9%); /// 1, 106 (50.7%); /// 2, 97 (46.4%); ///; /// Scheduler's queue usage:; /// [1] Resource name.; /// [2] Average number of used buffer entries.; /// [3] Maximum number of used buffer entries.; /// [4] Total number of buffer entries.; ///; /// [1] [2] [3] [4]; /// JALU01 0 0 20; /// JFPU01 15 18 18; /// JLSAGU 0 0 12; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h:644,Energy Efficiency,Schedul,Schedulers,644,"//===--------------------- SchedulerStatistics.h ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines class SchedulerStatistics. Class SchedulerStatistics is a; /// View that listens to instruction issue events in order to print general; /// statistics related to the hardware schedulers.; ///; /// Example:; /// ========; ///; /// Schedulers - number of cycles where we saw N instructions issued:; /// [# issued], [# cycles]; /// 0, 6 (2.9%); /// 1, 106 (50.7%); /// 2, 97 (46.4%); ///; /// Scheduler's queue usage:; /// [1] Resource name.; /// [2] Average number of used buffer entries.; /// [3] Maximum number of used buffer entries.; /// [4] Total number of buffer entries.; ///; /// [1] [2] [3] [4]; /// JALU01 0 0 20; /// JFPU01 15 18 18; /// JLSAGU 0 0 12; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h:804,Energy Efficiency,Schedul,Scheduler,804,"//===--------------------- SchedulerStatistics.h ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines class SchedulerStatistics. Class SchedulerStatistics is a; /// View that listens to instruction issue events in order to print general; /// statistics related to the hardware schedulers.; ///; /// Example:; /// ========; ///; /// Schedulers - number of cycles where we saw N instructions issued:; /// [# issued], [# cycles]; /// 0, 6 (2.9%); /// 1, 106 (50.7%); /// 2, 97 (46.4%); ///; /// Scheduler's queue usage:; /// [1] Resource name.; /// [2] Average number of used buffer entries.; /// [3] Maximum number of used buffer entries.; /// [4] Total number of buffer entries.; ///; /// [1] [2] [3] [4]; /// JALU01 0 0 20; /// JFPU01 15 18 18; /// JLSAGU 0 0 12; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h:816,Performance,queue,queue,816,"//===--------------------- SchedulerStatistics.h ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines class SchedulerStatistics. Class SchedulerStatistics is a; /// View that listens to instruction issue events in order to print general; /// statistics related to the hardware schedulers.; ///; /// Example:; /// ========; ///; /// Schedulers - number of cycles where we saw N instructions issued:; /// [# issued], [# cycles]; /// 0, 6 (2.9%); /// 1, 106 (50.7%); /// 2, 97 (46.4%); ///; /// Scheduler's queue usage:; /// [1] Resource name.; /// [2] Average number of used buffer entries.; /// [3] Maximum number of used buffer entries.; /// [4] Total number of buffer entries.; ///; /// [1] [2] [3] [4]; /// JALU01 0 0 20; /// JFPU01 15 18 18; /// JLSAGU 0 0 12; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h:25,Energy Efficiency,schedul,scheduler,25,// Tracks the usage of a scheduler's queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h:37,Performance,queue,queue,37,// Tracks the usage of a scheduler's queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h:32,Energy Efficiency,schedul,scheduler,32,// Increases the number of used scheduler queue slots of every buffered; // resource in the Buffers set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h:42,Performance,queue,queue,42,// Increases the number of used scheduler queue slots of every buffered; // resource in the Buffers set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h:39,Energy Efficiency,schedul,scheduler,39,// Decreases by one the number of used scheduler queue slots of every; // buffered resource in the Buffers set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h:49,Performance,queue,queue,49,// Decreases by one the number of used scheduler queue slots of every; // buffered resource in the Buffers set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SchedulerStatistics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.cpp:105,Availability,avail,available,105,// Update the cumulative number of resource cycles based on the processor; // resource usage information available from the instruction descriptor. We; // need to compute the cumulative number of resource cycles for every; // processor resource which is consumed by an instruction of the block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.cpp:3,Deployability,Update,Update,3,// Update the cumulative number of resource cycles based on the processor; // resource usage information available from the instruction descriptor. We; // need to compute the cumulative number of resource cycles for every; // processor resource which is consumed by an instruction of the block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h:519,Performance,perform,performance,519,"//===--------------------- SummaryView.h ------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the summary view.; ///; /// The goal of the summary view is to give a very quick overview of the; /// performance throughput. Below is an example of summary view:; ///; ///; /// Iterations: 300; /// Instructions: 900; /// Total Cycles: 610; /// Dispatch Width: 2; /// IPC: 1.48; /// Block RThroughput: 2.0; ///; /// The summary view collects a few performance numbers. The two main; /// performance indicators are 'Total Cycles' and IPC (Instructions Per Cycle).; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h:531,Performance,throughput,throughput,531,"//===--------------------- SummaryView.h ------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the summary view.; ///; /// The goal of the summary view is to give a very quick overview of the; /// performance throughput. Below is an example of summary view:; ///; ///; /// Iterations: 300; /// Instructions: 900; /// Total Cycles: 610; /// Dispatch Width: 2; /// IPC: 1.48; /// Block RThroughput: 2.0; ///; /// The summary view collects a few performance numbers. The two main; /// performance indicators are 'Total Cycles' and IPC (Instructions Per Cycle).; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h:765,Performance,perform,performance,765,"//===--------------------- SummaryView.h ------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the summary view.; ///; /// The goal of the summary view is to give a very quick overview of the; /// performance throughput. Below is an example of summary view:; ///; ///; /// Iterations: 300; /// Instructions: 900; /// Total Cycles: 610; /// Dispatch Width: 2; /// IPC: 1.48; /// Block RThroughput: 2.0; ///; /// The summary view collects a few performance numbers. The two main; /// performance indicators are 'Total Cycles' and IPC (Instructions Per Cycle).; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h:804,Performance,perform,performance,804,"//===--------------------- SummaryView.h ------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the summary view.; ///; /// The goal of the summary view is to give a very quick overview of the; /// performance throughput. Below is an example of summary view:; ///; ///; /// Iterations: 300; /// Instructions: 900; /// Total Cycles: 610; /// Dispatch Width: 2; /// IPC: 1.48; /// Block RThroughput: 2.0; ///; /// The summary view collects a few performance numbers. The two main; /// performance indicators are 'Total Cycles' and IPC (Instructions Per Cycle).; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h:42,Performance,perform,performance,42,/// A view that collects and prints a few performance numbers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h:81,Availability,mask,mask,81,// Each processor resource is associated with a so-called processor resource; // mask. This vector allows to correlate processor resource IDs with processor; // resource masks. There is exactly one element per each processor resource; // declared by the scheduling model.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h:170,Availability,mask,masks,170,// Each processor resource is associated with a so-called processor resource; // mask. This vector allows to correlate processor resource IDs with processor; // resource masks. There is exactly one element per each processor resource; // declared by the scheduling model.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h:254,Energy Efficiency,schedul,scheduling,254,// Each processor resource is associated with a so-called processor resource; // mask. This vector allows to correlate processor resource IDs with processor; // resource masks. There is exactly one element per each processor resource; // declared by the scheduling model.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/SummaryView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.cpp:435,Integrability,interface,interface,435,"//===--------------------- TimelineView.cpp ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \brief; ///; /// This file implements the TimelineView interface.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.cpp:3,Deployability,Update,Update,3,// Update the WaitTime entry which corresponds to this Index.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.cpp:8,Performance,latency,latency,8,"// Zero latency instructions have the same value for CycleDispatched,; // CycleIssued and CycleExecuted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.cpp:131,Performance,latency,latency,131,"// When an instruction is retired after timeline-max-cycles,; // its CycleRetired is left at 0. However, it's possible for; // a 0 latency instruction to be retired during cycle 0 and we; // don't want to early exit in that case. The CycleExecuted; // attribute is set correctly whether or not it is greater; // than timeline-max-cycles so we can use that to ensure; // we don't early exit because of a 0 latency instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.cpp:405,Performance,latency,latency,405,"// When an instruction is retired after timeline-max-cycles,; // its CycleRetired is left at 0. However, it's possible for; // a 0 latency instruction to be retired during cycle 0 and we; // don't want to early exit in that case. The CycleExecuted; // attribute is set correctly whether or not it is greater; // than timeline-max-cycles so we can use that to ensure; // we don't early exit because of a 0 latency instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h:519,Deployability,pipeline,pipeline,519,"//===--------------------- TimelineView.h -----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \brief; ///; /// This file implements a timeline view for the llvm-mca tool.; ///; /// Class TimelineView observes events generated by the pipeline. For every; /// instruction executed by the pipeline, it stores information related to; /// state transition. It then plots that information in the form of a table; /// as reported by the example below:; ///; /// Timeline view:; /// 	 0123456; /// Index	0123456789; ///; /// [0,0]	DeER . . ..	vmovshdup %xmm0, %xmm1; /// [0,1]	DeER . . ..	vpermilpd $1, %xmm0, %xmm2; /// [0,2]	.DeER. . ..	vpermilps $231, %xmm0, %xmm5; /// [0,3]	.DeeeER . ..	vaddss %xmm1, %xmm0, %xmm3; /// [0,4]	. D==eeeER. ..	vaddss %xmm3, %xmm2, %xmm4; /// [0,5]	. D=====eeeER ..	vaddss %xmm4, %xmm5, %xmm6; ///; /// [1,0]	. DeE------R ..	vmovshdup %xmm0, %xmm1; /// [1,1]	. DeE------R ..	vpermilpd $1, %xmm0, %xmm2; /// [1,2]	. DeE-----R ..	vpermilps $231, %xmm0, %xmm5; /// [1,3]	. D=eeeE--R ..	vaddss %xmm1, %xmm0, %xmm3; /// [1,4]	. D===eeeER ..	vaddss %xmm3, %xmm2, %xmm4; /// [1,5]	. D======eeeER	vaddss %xmm4, %xmm5, %xmm6; ///; /// There is an entry for every instruction in the input assembly sequence.; /// The first field is a pair of numbers obtained from the instruction index.; /// The first element of the pair is the iteration index, while the second; /// element of the pair is a sequence number (i.e. a position in the assembly; /// sequence).; /// The second field of the table is the actual timeline information; each; /// column is the information related to a specific cycle of execution.; /// The timeline of an instruction is described by a sequence of character; /// where each ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h:572,Deployability,pipeline,pipeline,572,"//===--------------------- TimelineView.h -----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \brief; ///; /// This file implements a timeline view for the llvm-mca tool.; ///; /// Class TimelineView observes events generated by the pipeline. For every; /// instruction executed by the pipeline, it stores information related to; /// state transition. It then plots that information in the form of a table; /// as reported by the example below:; ///; /// Timeline view:; /// 	 0123456; /// Index	0123456789; ///; /// [0,0]	DeER . . ..	vmovshdup %xmm0, %xmm1; /// [0,1]	DeER . . ..	vpermilpd $1, %xmm0, %xmm2; /// [0,2]	.DeER. . ..	vpermilps $231, %xmm0, %xmm5; /// [0,3]	.DeeeER . ..	vaddss %xmm1, %xmm0, %xmm3; /// [0,4]	. D==eeeER. ..	vaddss %xmm3, %xmm2, %xmm4; /// [0,5]	. D=====eeeER ..	vaddss %xmm4, %xmm5, %xmm6; ///; /// [1,0]	. DeE------R ..	vmovshdup %xmm0, %xmm1; /// [1,1]	. DeE------R ..	vpermilpd $1, %xmm0, %xmm2; /// [1,2]	. DeE-----R ..	vpermilps $231, %xmm0, %xmm5; /// [1,3]	. D=eeeE--R ..	vaddss %xmm1, %xmm0, %xmm3; /// [1,4]	. D===eeeER ..	vaddss %xmm3, %xmm2, %xmm4; /// [1,5]	. D======eeeER	vaddss %xmm4, %xmm5, %xmm6; ///; /// There is an entry for every instruction in the input assembly sequence.; /// The first field is a pair of numbers obtained from the instruction index.; /// The first element of the pair is the iteration index, while the second; /// element of the pair is a sequence number (i.e. a position in the assembly; /// sequence).; /// The second field of the table is the actual timeline information; each; /// column is the information related to a specific cycle of execution.; /// The timeline of an instruction is described by a sequence of character; /// where each ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h:4295,Deployability,pipeline,pipeline,4295,"ntry.; ///; /// Based on the timeline view information from the example, instruction 0; /// at iteration 0 was dispatched at cycle 0, and was retired at cycle 3.; /// Instruction [0,1] was also dispatched at cycle 0, and it retired at; /// the same cycle than instruction [0,0].; /// Instruction [0,4] has been dispatched at cycle 2. However, it had to; /// wait for two cycles before being issued. That is because operands; /// became ready only at cycle 5.; ///; /// This view helps further understanding bottlenecks and the impact of; /// resource pressure on the code.; ///; /// To better understand why instructions had to wait for multiple cycles in; /// the scheduler's queue, class TimelineView also reports extra timing info; /// in another table named ""Average Wait times"" (see example below).; ///; ///; /// Average Wait times (based on the timeline view):; /// [0]: Executions; /// [1]: Average time spent waiting in a scheduler's queue; /// [2]: Average time spent waiting in a scheduler's queue while ready; /// [3]: Average time elapsed from WB until retire stage; ///; ///	[0]	[1]	[2]	[3]; /// 0.	 2	1.0	1.0	3.0	vmovshdup %xmm0, %xmm1; /// 1.	 2	1.0	1.0	3.0	vpermilpd $1, %xmm0, %xmm2; /// 2.	 2	1.0	1.0	2.5	vpermilps $231, %xmm0, %xmm5; /// 3.	 2	1.5	0.5	1.0	vaddss %xmm1, %xmm0, %xmm3; /// 4.	 2	3.5	0.0	0.0	vaddss %xmm3, %xmm2, %xmm4; /// 5.	 2	6.5	0.0	0.0	vaddss %xmm4, %xmm5, %xmm6; /// 2	2.4	0.6	1.6 <total>; ///; /// By comparing column [2] with column [1], we get an idea about how many; /// cycles were spent in the scheduler's queue due to data dependencies.; ///; /// In this example, instruction 5 spent an average of ~6 cycles in the; /// scheduler's queue. As soon as operands became ready, the instruction; /// was immediately issued to the pipeline(s).; /// That is expected because instruction 5 cannot transition to the ""ready""; /// state until %xmm4 is written by instruction 4.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h:2280,Energy Efficiency,Schedul,Scheduler,2280,"xmm2; /// [1,2]	. DeE-----R ..	vpermilps $231, %xmm0, %xmm5; /// [1,3]	. D=eeeE--R ..	vaddss %xmm1, %xmm0, %xmm3; /// [1,4]	. D===eeeER ..	vaddss %xmm3, %xmm2, %xmm4; /// [1,5]	. D======eeeER	vaddss %xmm4, %xmm5, %xmm6; ///; /// There is an entry for every instruction in the input assembly sequence.; /// The first field is a pair of numbers obtained from the instruction index.; /// The first element of the pair is the iteration index, while the second; /// element of the pair is a sequence number (i.e. a position in the assembly; /// sequence).; /// The second field of the table is the actual timeline information; each; /// column is the information related to a specific cycle of execution.; /// The timeline of an instruction is described by a sequence of character; /// where each character represents the instruction state at a specific cycle.; ///; /// Possible instruction states are:; /// D: Instruction Dispatched; /// e: Instruction Executing; /// E: Instruction Executed (write-back stage); /// R: Instruction retired; /// =: Instruction waiting in the Scheduler's queue; /// -: Instruction executed, waiting to retire in order.; ///; /// dots ('.') and empty spaces are cycles where the instruction is not; /// in-flight.; ///; /// The last column is the assembly instruction associated to the entry.; ///; /// Based on the timeline view information from the example, instruction 0; /// at iteration 0 was dispatched at cycle 0, and was retired at cycle 3.; /// Instruction [0,1] was also dispatched at cycle 0, and it retired at; /// the same cycle than instruction [0,0].; /// Instruction [0,4] has been dispatched at cycle 2. However, it had to; /// wait for two cycles before being issued. That is because operands; /// became ready only at cycle 5.; ///; /// This view helps further understanding bottlenecks and the impact of; /// resource pressure on the code.; ///; /// To better understand why instructions had to wait for multiple cycles in; /// the scheduler's queue, cla",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h:3188,Energy Efficiency,schedul,scheduler,3188,"stage); /// R: Instruction retired; /// =: Instruction waiting in the Scheduler's queue; /// -: Instruction executed, waiting to retire in order.; ///; /// dots ('.') and empty spaces are cycles where the instruction is not; /// in-flight.; ///; /// The last column is the assembly instruction associated to the entry.; ///; /// Based on the timeline view information from the example, instruction 0; /// at iteration 0 was dispatched at cycle 0, and was retired at cycle 3.; /// Instruction [0,1] was also dispatched at cycle 0, and it retired at; /// the same cycle than instruction [0,0].; /// Instruction [0,4] has been dispatched at cycle 2. However, it had to; /// wait for two cycles before being issued. That is because operands; /// became ready only at cycle 5.; ///; /// This view helps further understanding bottlenecks and the impact of; /// resource pressure on the code.; ///; /// To better understand why instructions had to wait for multiple cycles in; /// the scheduler's queue, class TimelineView also reports extra timing info; /// in another table named ""Average Wait times"" (see example below).; ///; ///; /// Average Wait times (based on the timeline view):; /// [0]: Executions; /// [1]: Average time spent waiting in a scheduler's queue; /// [2]: Average time spent waiting in a scheduler's queue while ready; /// [3]: Average time elapsed from WB until retire stage; ///; ///	[0]	[1]	[2]	[3]; /// 0.	 2	1.0	1.0	3.0	vmovshdup %xmm0, %xmm1; /// 1.	 2	1.0	1.0	3.0	vpermilpd $1, %xmm0, %xmm2; /// 2.	 2	1.0	1.0	2.5	vpermilps $231, %xmm0, %xmm5; /// 3.	 2	1.5	0.5	1.0	vaddss %xmm1, %xmm0, %xmm3; /// 4.	 2	3.5	0.0	0.0	vaddss %xmm3, %xmm2, %xmm4; /// 5.	 2	6.5	0.0	0.0	vaddss %xmm4, %xmm5, %xmm6; /// 2	2.4	0.6	1.6 <total>; ///; /// By comparing column [2] with column [1], we get an idea about how many; /// cycles were spent in the scheduler's queue due to data dependencies.; ///; /// In this example, instruction 5 spent an average of ~6 cycles in the; /// scheduler's queue. A",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h:3454,Energy Efficiency,schedul,scheduler,3454,"he assembly instruction associated to the entry.; ///; /// Based on the timeline view information from the example, instruction 0; /// at iteration 0 was dispatched at cycle 0, and was retired at cycle 3.; /// Instruction [0,1] was also dispatched at cycle 0, and it retired at; /// the same cycle than instruction [0,0].; /// Instruction [0,4] has been dispatched at cycle 2. However, it had to; /// wait for two cycles before being issued. That is because operands; /// became ready only at cycle 5.; ///; /// This view helps further understanding bottlenecks and the impact of; /// resource pressure on the code.; ///; /// To better understand why instructions had to wait for multiple cycles in; /// the scheduler's queue, class TimelineView also reports extra timing info; /// in another table named ""Average Wait times"" (see example below).; ///; ///; /// Average Wait times (based on the timeline view):; /// [0]: Executions; /// [1]: Average time spent waiting in a scheduler's queue; /// [2]: Average time spent waiting in a scheduler's queue while ready; /// [3]: Average time elapsed from WB until retire stage; ///; ///	[0]	[1]	[2]	[3]; /// 0.	 2	1.0	1.0	3.0	vmovshdup %xmm0, %xmm1; /// 1.	 2	1.0	1.0	3.0	vpermilpd $1, %xmm0, %xmm2; /// 2.	 2	1.0	1.0	2.5	vpermilps $231, %xmm0, %xmm5; /// 3.	 2	1.5	0.5	1.0	vaddss %xmm1, %xmm0, %xmm3; /// 4.	 2	3.5	0.0	0.0	vaddss %xmm3, %xmm2, %xmm4; /// 5.	 2	6.5	0.0	0.0	vaddss %xmm4, %xmm5, %xmm6; /// 2	2.4	0.6	1.6 <total>; ///; /// By comparing column [2] with column [1], we get an idea about how many; /// cycles were spent in the scheduler's queue due to data dependencies.; ///; /// In this example, instruction 5 spent an average of ~6 cycles in the; /// scheduler's queue. As soon as operands became ready, the instruction; /// was immediately issued to the pipeline(s).; /// That is expected because instruction 5 cannot transition to the ""ready""; /// state until %xmm4 is written by instruction 4.; ///; //===---------------------------------",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h:3514,Energy Efficiency,schedul,scheduler,3514,"he assembly instruction associated to the entry.; ///; /// Based on the timeline view information from the example, instruction 0; /// at iteration 0 was dispatched at cycle 0, and was retired at cycle 3.; /// Instruction [0,1] was also dispatched at cycle 0, and it retired at; /// the same cycle than instruction [0,0].; /// Instruction [0,4] has been dispatched at cycle 2. However, it had to; /// wait for two cycles before being issued. That is because operands; /// became ready only at cycle 5.; ///; /// This view helps further understanding bottlenecks and the impact of; /// resource pressure on the code.; ///; /// To better understand why instructions had to wait for multiple cycles in; /// the scheduler's queue, class TimelineView also reports extra timing info; /// in another table named ""Average Wait times"" (see example below).; ///; ///; /// Average Wait times (based on the timeline view):; /// [0]: Executions; /// [1]: Average time spent waiting in a scheduler's queue; /// [2]: Average time spent waiting in a scheduler's queue while ready; /// [3]: Average time elapsed from WB until retire stage; ///; ///	[0]	[1]	[2]	[3]; /// 0.	 2	1.0	1.0	3.0	vmovshdup %xmm0, %xmm1; /// 1.	 2	1.0	1.0	3.0	vpermilpd $1, %xmm0, %xmm2; /// 2.	 2	1.0	1.0	2.5	vpermilps $231, %xmm0, %xmm5; /// 3.	 2	1.5	0.5	1.0	vaddss %xmm1, %xmm0, %xmm3; /// 4.	 2	3.5	0.0	0.0	vaddss %xmm3, %xmm2, %xmm4; /// 5.	 2	6.5	0.0	0.0	vaddss %xmm4, %xmm5, %xmm6; /// 2	2.4	0.6	1.6 <total>; ///; /// By comparing column [2] with column [1], we get an idea about how many; /// cycles were spent in the scheduler's queue due to data dependencies.; ///; /// In this example, instruction 5 spent an average of ~6 cycles in the; /// scheduler's queue. As soon as operands became ready, the instruction; /// was immediately issued to the pipeline(s).; /// That is expected because instruction 5 cannot transition to the ""ready""; /// state until %xmm4 is written by instruction 4.; ///; //===---------------------------------",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h:4064,Energy Efficiency,schedul,scheduler,4064,"ntry.; ///; /// Based on the timeline view information from the example, instruction 0; /// at iteration 0 was dispatched at cycle 0, and was retired at cycle 3.; /// Instruction [0,1] was also dispatched at cycle 0, and it retired at; /// the same cycle than instruction [0,0].; /// Instruction [0,4] has been dispatched at cycle 2. However, it had to; /// wait for two cycles before being issued. That is because operands; /// became ready only at cycle 5.; ///; /// This view helps further understanding bottlenecks and the impact of; /// resource pressure on the code.; ///; /// To better understand why instructions had to wait for multiple cycles in; /// the scheduler's queue, class TimelineView also reports extra timing info; /// in another table named ""Average Wait times"" (see example below).; ///; ///; /// Average Wait times (based on the timeline view):; /// [0]: Executions; /// [1]: Average time spent waiting in a scheduler's queue; /// [2]: Average time spent waiting in a scheduler's queue while ready; /// [3]: Average time elapsed from WB until retire stage; ///; ///	[0]	[1]	[2]	[3]; /// 0.	 2	1.0	1.0	3.0	vmovshdup %xmm0, %xmm1; /// 1.	 2	1.0	1.0	3.0	vpermilpd $1, %xmm0, %xmm2; /// 2.	 2	1.0	1.0	2.5	vpermilps $231, %xmm0, %xmm5; /// 3.	 2	1.5	0.5	1.0	vaddss %xmm1, %xmm0, %xmm3; /// 4.	 2	3.5	0.0	0.0	vaddss %xmm3, %xmm2, %xmm4; /// 5.	 2	6.5	0.0	0.0	vaddss %xmm4, %xmm5, %xmm6; /// 2	2.4	0.6	1.6 <total>; ///; /// By comparing column [2] with column [1], we get an idea about how many; /// cycles were spent in the scheduler's queue due to data dependencies.; ///; /// In this example, instruction 5 spent an average of ~6 cycles in the; /// scheduler's queue. As soon as operands became ready, the instruction; /// was immediately issued to the pipeline(s).; /// That is expected because instruction 5 cannot transition to the ""ready""; /// state until %xmm4 is written by instruction 4.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h:4191,Energy Efficiency,schedul,scheduler,4191,"ntry.; ///; /// Based on the timeline view information from the example, instruction 0; /// at iteration 0 was dispatched at cycle 0, and was retired at cycle 3.; /// Instruction [0,1] was also dispatched at cycle 0, and it retired at; /// the same cycle than instruction [0,0].; /// Instruction [0,4] has been dispatched at cycle 2. However, it had to; /// wait for two cycles before being issued. That is because operands; /// became ready only at cycle 5.; ///; /// This view helps further understanding bottlenecks and the impact of; /// resource pressure on the code.; ///; /// To better understand why instructions had to wait for multiple cycles in; /// the scheduler's queue, class TimelineView also reports extra timing info; /// in another table named ""Average Wait times"" (see example below).; ///; ///; /// Average Wait times (based on the timeline view):; /// [0]: Executions; /// [1]: Average time spent waiting in a scheduler's queue; /// [2]: Average time spent waiting in a scheduler's queue while ready; /// [3]: Average time elapsed from WB until retire stage; ///; ///	[0]	[1]	[2]	[3]; /// 0.	 2	1.0	1.0	3.0	vmovshdup %xmm0, %xmm1; /// 1.	 2	1.0	1.0	3.0	vpermilpd $1, %xmm0, %xmm2; /// 2.	 2	1.0	1.0	2.5	vpermilps $231, %xmm0, %xmm5; /// 3.	 2	1.5	0.5	1.0	vaddss %xmm1, %xmm0, %xmm3; /// 4.	 2	3.5	0.0	0.0	vaddss %xmm3, %xmm2, %xmm4; /// 5.	 2	6.5	0.0	0.0	vaddss %xmm4, %xmm5, %xmm6; /// 2	2.4	0.6	1.6 <total>; ///; /// By comparing column [2] with column [1], we get an idea about how many; /// cycles were spent in the scheduler's queue due to data dependencies.; ///; /// In this example, instruction 5 spent an average of ~6 cycles in the; /// scheduler's queue. As soon as operands became ready, the instruction; /// was immediately issued to the pipeline(s).; /// That is expected because instruction 5 cannot transition to the ""ready""; /// state until %xmm4 is written by instruction 4.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h:4094,Integrability,depend,dependencies,4094,"ntry.; ///; /// Based on the timeline view information from the example, instruction 0; /// at iteration 0 was dispatched at cycle 0, and was retired at cycle 3.; /// Instruction [0,1] was also dispatched at cycle 0, and it retired at; /// the same cycle than instruction [0,0].; /// Instruction [0,4] has been dispatched at cycle 2. However, it had to; /// wait for two cycles before being issued. That is because operands; /// became ready only at cycle 5.; ///; /// This view helps further understanding bottlenecks and the impact of; /// resource pressure on the code.; ///; /// To better understand why instructions had to wait for multiple cycles in; /// the scheduler's queue, class TimelineView also reports extra timing info; /// in another table named ""Average Wait times"" (see example below).; ///; ///; /// Average Wait times (based on the timeline view):; /// [0]: Executions; /// [1]: Average time spent waiting in a scheduler's queue; /// [2]: Average time spent waiting in a scheduler's queue while ready; /// [3]: Average time elapsed from WB until retire stage; ///; ///	[0]	[1]	[2]	[3]; /// 0.	 2	1.0	1.0	3.0	vmovshdup %xmm0, %xmm1; /// 1.	 2	1.0	1.0	3.0	vpermilpd $1, %xmm0, %xmm2; /// 2.	 2	1.0	1.0	2.5	vpermilps $231, %xmm0, %xmm5; /// 3.	 2	1.5	0.5	1.0	vaddss %xmm1, %xmm0, %xmm3; /// 4.	 2	3.5	0.0	0.0	vaddss %xmm3, %xmm2, %xmm4; /// 5.	 2	6.5	0.0	0.0	vaddss %xmm4, %xmm5, %xmm6; /// 2	2.4	0.6	1.6 <total>; ///; /// By comparing column [2] with column [1], we get an idea about how many; /// cycles were spent in the scheduler's queue due to data dependencies.; ///; /// In this example, instruction 5 spent an average of ~6 cycles in the; /// scheduler's queue. As soon as operands became ready, the instruction; /// was immediately issued to the pipeline(s).; /// That is expected because instruction 5 cannot transition to the ""ready""; /// state until %xmm4 is written by instruction 4.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h:2292,Performance,queue,queue,2292,"xmm2; /// [1,2]	. DeE-----R ..	vpermilps $231, %xmm0, %xmm5; /// [1,3]	. D=eeeE--R ..	vaddss %xmm1, %xmm0, %xmm3; /// [1,4]	. D===eeeER ..	vaddss %xmm3, %xmm2, %xmm4; /// [1,5]	. D======eeeER	vaddss %xmm4, %xmm5, %xmm6; ///; /// There is an entry for every instruction in the input assembly sequence.; /// The first field is a pair of numbers obtained from the instruction index.; /// The first element of the pair is the iteration index, while the second; /// element of the pair is a sequence number (i.e. a position in the assembly; /// sequence).; /// The second field of the table is the actual timeline information; each; /// column is the information related to a specific cycle of execution.; /// The timeline of an instruction is described by a sequence of character; /// where each character represents the instruction state at a specific cycle.; ///; /// Possible instruction states are:; /// D: Instruction Dispatched; /// e: Instruction Executing; /// E: Instruction Executed (write-back stage); /// R: Instruction retired; /// =: Instruction waiting in the Scheduler's queue; /// -: Instruction executed, waiting to retire in order.; ///; /// dots ('.') and empty spaces are cycles where the instruction is not; /// in-flight.; ///; /// The last column is the assembly instruction associated to the entry.; ///; /// Based on the timeline view information from the example, instruction 0; /// at iteration 0 was dispatched at cycle 0, and was retired at cycle 3.; /// Instruction [0,1] was also dispatched at cycle 0, and it retired at; /// the same cycle than instruction [0,0].; /// Instruction [0,4] has been dispatched at cycle 2. However, it had to; /// wait for two cycles before being issued. That is because operands; /// became ready only at cycle 5.; ///; /// This view helps further understanding bottlenecks and the impact of; /// resource pressure on the code.; ///; /// To better understand why instructions had to wait for multiple cycles in; /// the scheduler's queue, cla",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h:3030,Performance,bottleneck,bottlenecks,3030,"state at a specific cycle.; ///; /// Possible instruction states are:; /// D: Instruction Dispatched; /// e: Instruction Executing; /// E: Instruction Executed (write-back stage); /// R: Instruction retired; /// =: Instruction waiting in the Scheduler's queue; /// -: Instruction executed, waiting to retire in order.; ///; /// dots ('.') and empty spaces are cycles where the instruction is not; /// in-flight.; ///; /// The last column is the assembly instruction associated to the entry.; ///; /// Based on the timeline view information from the example, instruction 0; /// at iteration 0 was dispatched at cycle 0, and was retired at cycle 3.; /// Instruction [0,1] was also dispatched at cycle 0, and it retired at; /// the same cycle than instruction [0,0].; /// Instruction [0,4] has been dispatched at cycle 2. However, it had to; /// wait for two cycles before being issued. That is because operands; /// became ready only at cycle 5.; ///; /// This view helps further understanding bottlenecks and the impact of; /// resource pressure on the code.; ///; /// To better understand why instructions had to wait for multiple cycles in; /// the scheduler's queue, class TimelineView also reports extra timing info; /// in another table named ""Average Wait times"" (see example below).; ///; ///; /// Average Wait times (based on the timeline view):; /// [0]: Executions; /// [1]: Average time spent waiting in a scheduler's queue; /// [2]: Average time spent waiting in a scheduler's queue while ready; /// [3]: Average time elapsed from WB until retire stage; ///; ///	[0]	[1]	[2]	[3]; /// 0.	 2	1.0	1.0	3.0	vmovshdup %xmm0, %xmm1; /// 1.	 2	1.0	1.0	3.0	vpermilpd $1, %xmm0, %xmm2; /// 2.	 2	1.0	1.0	2.5	vpermilps $231, %xmm0, %xmm5; /// 3.	 2	1.5	0.5	1.0	vaddss %xmm1, %xmm0, %xmm3; /// 4.	 2	3.5	0.0	0.0	vaddss %xmm3, %xmm2, %xmm4; /// 5.	 2	6.5	0.0	0.0	vaddss %xmm4, %xmm5, %xmm6; /// 2	2.4	0.6	1.6 <total>; ///; /// By comparing column [2] with column [1], we get an idea about how many; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h:3200,Performance,queue,queue,3200,"stage); /// R: Instruction retired; /// =: Instruction waiting in the Scheduler's queue; /// -: Instruction executed, waiting to retire in order.; ///; /// dots ('.') and empty spaces are cycles where the instruction is not; /// in-flight.; ///; /// The last column is the assembly instruction associated to the entry.; ///; /// Based on the timeline view information from the example, instruction 0; /// at iteration 0 was dispatched at cycle 0, and was retired at cycle 3.; /// Instruction [0,1] was also dispatched at cycle 0, and it retired at; /// the same cycle than instruction [0,0].; /// Instruction [0,4] has been dispatched at cycle 2. However, it had to; /// wait for two cycles before being issued. That is because operands; /// became ready only at cycle 5.; ///; /// This view helps further understanding bottlenecks and the impact of; /// resource pressure on the code.; ///; /// To better understand why instructions had to wait for multiple cycles in; /// the scheduler's queue, class TimelineView also reports extra timing info; /// in another table named ""Average Wait times"" (see example below).; ///; ///; /// Average Wait times (based on the timeline view):; /// [0]: Executions; /// [1]: Average time spent waiting in a scheduler's queue; /// [2]: Average time spent waiting in a scheduler's queue while ready; /// [3]: Average time elapsed from WB until retire stage; ///; ///	[0]	[1]	[2]	[3]; /// 0.	 2	1.0	1.0	3.0	vmovshdup %xmm0, %xmm1; /// 1.	 2	1.0	1.0	3.0	vpermilpd $1, %xmm0, %xmm2; /// 2.	 2	1.0	1.0	2.5	vpermilps $231, %xmm0, %xmm5; /// 3.	 2	1.5	0.5	1.0	vaddss %xmm1, %xmm0, %xmm3; /// 4.	 2	3.5	0.0	0.0	vaddss %xmm3, %xmm2, %xmm4; /// 5.	 2	6.5	0.0	0.0	vaddss %xmm4, %xmm5, %xmm6; /// 2	2.4	0.6	1.6 <total>; ///; /// By comparing column [2] with column [1], we get an idea about how many; /// cycles were spent in the scheduler's queue due to data dependencies.; ///; /// In this example, instruction 5 spent an average of ~6 cycles in the; /// scheduler's queue. A",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h:3466,Performance,queue,queue,3466,"he assembly instruction associated to the entry.; ///; /// Based on the timeline view information from the example, instruction 0; /// at iteration 0 was dispatched at cycle 0, and was retired at cycle 3.; /// Instruction [0,1] was also dispatched at cycle 0, and it retired at; /// the same cycle than instruction [0,0].; /// Instruction [0,4] has been dispatched at cycle 2. However, it had to; /// wait for two cycles before being issued. That is because operands; /// became ready only at cycle 5.; ///; /// This view helps further understanding bottlenecks and the impact of; /// resource pressure on the code.; ///; /// To better understand why instructions had to wait for multiple cycles in; /// the scheduler's queue, class TimelineView also reports extra timing info; /// in another table named ""Average Wait times"" (see example below).; ///; ///; /// Average Wait times (based on the timeline view):; /// [0]: Executions; /// [1]: Average time spent waiting in a scheduler's queue; /// [2]: Average time spent waiting in a scheduler's queue while ready; /// [3]: Average time elapsed from WB until retire stage; ///; ///	[0]	[1]	[2]	[3]; /// 0.	 2	1.0	1.0	3.0	vmovshdup %xmm0, %xmm1; /// 1.	 2	1.0	1.0	3.0	vpermilpd $1, %xmm0, %xmm2; /// 2.	 2	1.0	1.0	2.5	vpermilps $231, %xmm0, %xmm5; /// 3.	 2	1.5	0.5	1.0	vaddss %xmm1, %xmm0, %xmm3; /// 4.	 2	3.5	0.0	0.0	vaddss %xmm3, %xmm2, %xmm4; /// 5.	 2	6.5	0.0	0.0	vaddss %xmm4, %xmm5, %xmm6; /// 2	2.4	0.6	1.6 <total>; ///; /// By comparing column [2] with column [1], we get an idea about how many; /// cycles were spent in the scheduler's queue due to data dependencies.; ///; /// In this example, instruction 5 spent an average of ~6 cycles in the; /// scheduler's queue. As soon as operands became ready, the instruction; /// was immediately issued to the pipeline(s).; /// That is expected because instruction 5 cannot transition to the ""ready""; /// state until %xmm4 is written by instruction 4.; ///; //===---------------------------------",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h:3526,Performance,queue,queue,3526,"he assembly instruction associated to the entry.; ///; /// Based on the timeline view information from the example, instruction 0; /// at iteration 0 was dispatched at cycle 0, and was retired at cycle 3.; /// Instruction [0,1] was also dispatched at cycle 0, and it retired at; /// the same cycle than instruction [0,0].; /// Instruction [0,4] has been dispatched at cycle 2. However, it had to; /// wait for two cycles before being issued. That is because operands; /// became ready only at cycle 5.; ///; /// This view helps further understanding bottlenecks and the impact of; /// resource pressure on the code.; ///; /// To better understand why instructions had to wait for multiple cycles in; /// the scheduler's queue, class TimelineView also reports extra timing info; /// in another table named ""Average Wait times"" (see example below).; ///; ///; /// Average Wait times (based on the timeline view):; /// [0]: Executions; /// [1]: Average time spent waiting in a scheduler's queue; /// [2]: Average time spent waiting in a scheduler's queue while ready; /// [3]: Average time elapsed from WB until retire stage; ///; ///	[0]	[1]	[2]	[3]; /// 0.	 2	1.0	1.0	3.0	vmovshdup %xmm0, %xmm1; /// 1.	 2	1.0	1.0	3.0	vpermilpd $1, %xmm0, %xmm2; /// 2.	 2	1.0	1.0	2.5	vpermilps $231, %xmm0, %xmm5; /// 3.	 2	1.5	0.5	1.0	vaddss %xmm1, %xmm0, %xmm3; /// 4.	 2	3.5	0.0	0.0	vaddss %xmm3, %xmm2, %xmm4; /// 5.	 2	6.5	0.0	0.0	vaddss %xmm4, %xmm5, %xmm6; /// 2	2.4	0.6	1.6 <total>; ///; /// By comparing column [2] with column [1], we get an idea about how many; /// cycles were spent in the scheduler's queue due to data dependencies.; ///; /// In this example, instruction 5 spent an average of ~6 cycles in the; /// scheduler's queue. As soon as operands became ready, the instruction; /// was immediately issued to the pipeline(s).; /// That is expected because instruction 5 cannot transition to the ""ready""; /// state until %xmm4 is written by instruction 4.; ///; //===---------------------------------",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h:4076,Performance,queue,queue,4076,"ntry.; ///; /// Based on the timeline view information from the example, instruction 0; /// at iteration 0 was dispatched at cycle 0, and was retired at cycle 3.; /// Instruction [0,1] was also dispatched at cycle 0, and it retired at; /// the same cycle than instruction [0,0].; /// Instruction [0,4] has been dispatched at cycle 2. However, it had to; /// wait for two cycles before being issued. That is because operands; /// became ready only at cycle 5.; ///; /// This view helps further understanding bottlenecks and the impact of; /// resource pressure on the code.; ///; /// To better understand why instructions had to wait for multiple cycles in; /// the scheduler's queue, class TimelineView also reports extra timing info; /// in another table named ""Average Wait times"" (see example below).; ///; ///; /// Average Wait times (based on the timeline view):; /// [0]: Executions; /// [1]: Average time spent waiting in a scheduler's queue; /// [2]: Average time spent waiting in a scheduler's queue while ready; /// [3]: Average time elapsed from WB until retire stage; ///; ///	[0]	[1]	[2]	[3]; /// 0.	 2	1.0	1.0	3.0	vmovshdup %xmm0, %xmm1; /// 1.	 2	1.0	1.0	3.0	vpermilpd $1, %xmm0, %xmm2; /// 2.	 2	1.0	1.0	2.5	vpermilps $231, %xmm0, %xmm5; /// 3.	 2	1.5	0.5	1.0	vaddss %xmm1, %xmm0, %xmm3; /// 4.	 2	3.5	0.0	0.0	vaddss %xmm3, %xmm2, %xmm4; /// 5.	 2	6.5	0.0	0.0	vaddss %xmm4, %xmm5, %xmm6; /// 2	2.4	0.6	1.6 <total>; ///; /// By comparing column [2] with column [1], we get an idea about how many; /// cycles were spent in the scheduler's queue due to data dependencies.; ///; /// In this example, instruction 5 spent an average of ~6 cycles in the; /// scheduler's queue. As soon as operands became ready, the instruction; /// was immediately issued to the pipeline(s).; /// That is expected because instruction 5 cannot transition to the ""ready""; /// state until %xmm4 is written by instruction 4.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h:4203,Performance,queue,queue,4203,"ntry.; ///; /// Based on the timeline view information from the example, instruction 0; /// at iteration 0 was dispatched at cycle 0, and was retired at cycle 3.; /// Instruction [0,1] was also dispatched at cycle 0, and it retired at; /// the same cycle than instruction [0,0].; /// Instruction [0,4] has been dispatched at cycle 2. However, it had to; /// wait for two cycles before being issued. That is because operands; /// became ready only at cycle 5.; ///; /// This view helps further understanding bottlenecks and the impact of; /// resource pressure on the code.; ///; /// To better understand why instructions had to wait for multiple cycles in; /// the scheduler's queue, class TimelineView also reports extra timing info; /// in another table named ""Average Wait times"" (see example below).; ///; ///; /// Average Wait times (based on the timeline view):; /// [0]: Executions; /// [1]: Average time spent waiting in a scheduler's queue; /// [2]: Average time spent waiting in a scheduler's queue while ready; /// [3]: Average time elapsed from WB until retire stage; ///; ///	[0]	[1]	[2]	[3]; /// 0.	 2	1.0	1.0	3.0	vmovshdup %xmm0, %xmm1; /// 1.	 2	1.0	1.0	3.0	vpermilpd $1, %xmm0, %xmm2; /// 2.	 2	1.0	1.0	2.5	vpermilps $231, %xmm0, %xmm5; /// 3.	 2	1.5	0.5	1.0	vaddss %xmm1, %xmm0, %xmm3; /// 4.	 2	3.5	0.0	0.0	vaddss %xmm3, %xmm2, %xmm4; /// 5.	 2	6.5	0.0	0.0	vaddss %xmm4, %xmm5, %xmm6; /// 2	2.4	0.6	1.6 <total>; ///; /// By comparing column [2] with column [1], we get an idea about how many; /// cycles were spent in the scheduler's queue due to data dependencies.; ///; /// In this example, instruction 5 spent an average of ~6 cycles in the; /// scheduler's queue. As soon as operands became ready, the instruction; /// was immediately issued to the pipeline(s).; /// That is expected because instruction 5 cannot transition to the ""ready""; /// state until %xmm4 is written by instruction 4.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h:161,Deployability,Pipeline,Pipeline,161,"/// This class listens to instruction state transition events; /// in order to construct a timeline information.; ///; /// For every instruction executed by the Pipeline, this class constructs; /// a TimelineViewEntry object. TimelineViewEntry objects are then used; /// to print the timeline information, as well as the ""average wait times""; /// for every instruction in the input assembly sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h:33,Energy Efficiency,schedul,scheduler,33,// Instruction is waiting in the scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mca/Views/TimelineView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-microsoft-demangle-fuzzer/DummyDemanglerFuzzer.cpp:49,Safety,sanity check,sanity check,49,"//===--- DummyDemanglerMain.cpp - Entry point to sanity check the fuzzer --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-microsoft-demangle-fuzzer/DummyDemanglerFuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-microsoft-demangle-fuzzer/DummyDemanglerFuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-microsoft-demangle-fuzzer/DummyDemanglerFuzzer.cpp:426,Testability,test,test,426,"//===--- DummyDemanglerMain.cpp - Entry point to sanity check the fuzzer --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-microsoft-demangle-fuzzer/DummyDemanglerFuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-microsoft-demangle-fuzzer/DummyDemanglerFuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ml/Disassembler.cpp:17,Availability,error,error,17,"// If we have an error, print it and skip to the end of line.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ml/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ml/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ml/llvm-ml.cpp:385,Usability,simpl,simple,385,"//===-- llvm-ml.cpp - masm-compatible assembler -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A simple driver around MasmParser; based on llvm-mc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ml/llvm-ml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ml/llvm-ml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ml/llvm-ml.cpp:14,Safety,safe,safe,14,// Not thread-safe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ml/llvm-ml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ml/llvm-ml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ml/llvm-ml.cpp:14,Safety,safe,safe,14,// Not thread-safe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ml/llvm-ml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ml/llvm-ml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ml/llvm-ml.cpp:21,Availability,error,errors,21,// Keep output if no errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-ml/llvm-ml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ml/llvm-ml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-modextract/llvm-modextract.cpp:403,Testability,test,testing,403,"//===-- llvm-modextract.cpp - LLVM module extractor utility ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program is for testing features that rely on multi-module bitcode files.; // It takes a multi-module bitcode file, extracts one of the modules and writes; // it to the output file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-modextract/llvm-modextract.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-modextract/llvm-modextract.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:19,Availability,error,error,19,"// This version of error() prints the archive name and member name, for example:; // ""libx.a(foo.o)"" after the ToolName before the error message. It sets; // HadError but returns allowing the code to move on to other archive members.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:131,Availability,error,error,131,"// This version of error() prints the archive name and member name, for example:; // ""libx.a(foo.o)"" after the ToolName before the error message. It sets; // HadError but returns allowing the code to move on to other archive members.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:137,Integrability,message,message,137,"// This version of error() prints the archive name and member name, for example:; // ""libx.a(foo.o)"" after the ToolName before the error message. It sets; // HadError but returns allowing the code to move on to other archive members.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:22,Availability,error,error,22,"// TODO: if we have a error getting the name then it would be nice to print; // the index of which archive member this is and or its offset in the; // archive instead of ""???"" as the name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:19,Availability,error,error,19,"// This version of error() prints the file name and which architecture slice it; // is from, for example: ""foo.o (for architecture i386)"" after the ToolName; // before the error message. It sets HadError but returns allowing the code to; // move on to other architecture slices.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:172,Availability,error,error,172,"// This version of error() prints the file name and which architecture slice it; // is from, for example: ""foo.o (for architecture i386)"" after the ToolName; // before the error message. It sets HadError but returns allowing the code to; // move on to other architecture slices.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:178,Integrability,message,message,178,"// This version of error() prints the file name and which architecture slice it; // is from, for example: ""foo.o (for architecture i386)"" after the ToolName; // before the error message. It sets HadError but returns allowing the code to; // move on to other architecture slices.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:19,Availability,error,error,19,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:9,Testability,Test,Test,9,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:47,Availability,error,error,47,"// If the I->getSection() call would return an error, the earlier I->getType(); // call will already have returned the same error first.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:124,Availability,error,error,124,"// If the I->getSection() call would return an error, the earlier I->getType(); // call will already have returned the same error first.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:128,Testability,test,test,128,// There is no symbol in the nlist symbol table for this so we set; // Sym effectivly to null and the rest of code in here must test for; // it and not do things like Sym.getFlags() for it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:138,Testability,test,test,138,// Again there is no symbol in the nlist symbol table for this so; // we set Sym effectivly to null and the rest of code in here must; // test for it and not do things like Sym.getFlags() for it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:128,Testability,test,test,128,// There is no symbol in the nlist symbol table for this so we set; // Sym effectivly to null and the rest of code in here must test for; // it and not do things like Sym.getFlags() for it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:128,Testability,test,test,128,// There is no symbol in the nlist symbol table for this so we set; // Sym effectivly to null and the rest of code in here must test for; // it and not do things like Sym.getFlags() for it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:128,Testability,test,test,128,// There is no symbol in the nlist symbol table for this so we set; // Sym effectivly to null and the rest of code in here must test for; // it and not do things like Sym.getFlags() for it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:67,Energy Efficiency,consumption,consumption,67,"// We found a function starts segment, parse the addresses for; // consumption.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:128,Testability,test,test,128,// There is no symbol in the nlist symbol table for this so we set; // Sym effectivly to null and the rest of code in here must test for; // it and not do things like Sym.getFlags() for it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:29,Availability,error,error,29,// Returns false if there is error found or true otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:18,Availability,error,error,18,"// If there is an error in hasSymbols(), the error should be encountered in; // function getSymbolNamesFromObject first.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:45,Availability,error,error,45,"// If there is an error in hasSymbols(), the error should be encountered in; // function getSymbolNamesFromObject first.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:282,Availability,error,error,282,// checkMachOAndArchFlags() checks to see if the SymbolicFile is a Mach-O file; // and if it is and there is a list of architecture flags is specified then; // check to make sure this Mach-O file is one of those architectures or all; // architectures was specificed. If not then an error is generated and this; // routine returns false. Else it returns true.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:314,Integrability,rout,routine,314,// checkMachOAndArchFlags() checks to see if the SymbolicFile is a Mach-O file; // and if it is and there is a list of architecture flags is specified then; // check to make sure this Mach-O file is one of those architectures or all; // architectures was specificed. If not then an error is generated and this; // routine returns false. Else it returns true.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:32,Modifiability,variab,variable,32,"// Get BitMode from enviornment variable ""OBJECT_MODE"" for AIX OS, if; // specified.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp:167,Deployability,install,install-name-tool,167,// We need to recognize the following filenames:; //; // llvm-objcopy -> objcopy; // strip-10.exe -> strip; // powerpc64-unknown-freebsd13-objcopy -> objcopy; // llvm-install-name-tool -> install-name-tool,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp:188,Deployability,install,install-name-tool,188,// We need to recognize the following filenames:; //; // llvm-objcopy -> objcopy; // strip-10.exe -> strip; // powerpc64-unknown-freebsd13-objcopy -> objcopy; // llvm-install-name-tool -> install-name-tool,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp:38,Modifiability,Config,Config,38,// Apply transformations described by Config and store result into; // Config.OutputFilename using specified ObjcopyFunc function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp:71,Modifiability,Config,Config,71,// Apply transformations described by Config and store result into; // Config.OutputFilename using specified ObjcopyFunc function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp:29,Modifiability,Config,Config,29,// Copy .dwo tables from the Config.InputFilename into Config.SplitDWO; // file using specified ObjcopyFunc function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp:55,Modifiability,Config,Config,55,// Copy .dwo tables from the Config.InputFilename into Config.SplitDWO; // file using specified ObjcopyFunc function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp:38,Modifiability,Config,Config,38,"// Apply transformations described by Config, remove .dwo tables and; // store result into Config.OutputFilename using specified ObjcopyFunc; // function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp:91,Modifiability,Config,Config,91,"// Apply transformations described by Config, remove .dwo tables and; // store result into Config.OutputFilename using specified ObjcopyFunc; // function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/llvm-objcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp:3,Energy Efficiency,Power,PowerPC,3,// PowerPC,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp:38,Performance,load,load,38,"// Parse input option \p ArgValue and load section data. This function; // extracts section name and name of the file keeping section data from; // ArgValue, loads data from the file, and stores section name and data; // into the vector of new sections \p NewSections.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp:158,Performance,load,loads,158,"// Parse input option \p ArgValue and load section data. This function; // extracts section name and name of the file keeping section data from; // ArgValue, loads data from the file, and stores section name and data; // into the vector of new sections \p NewSections.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp:35,Modifiability,config,config,35,// parseObjcopyOptions returns the config and sets the input arguments. If a; // help flag is set then parseObjcopyOptions will print the help messege and; // exit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp:126,Safety,avoid,avoid,126,// The gnu_debuglink's target is expected to not change or else its CRC would; // become invalidated and get rejected. We can avoid recalculating the; // checksum for every target file inside an archive by precomputing the CRC; // here. This prevents a significant amount of I/O.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp:154,Security,checksum,checksum,154,// The gnu_debuglink's target is expected to not change or else its CRC would; // become invalidated and get rejected. We can avoid recalculating the; // checksum for every target file inside an archive by precomputing the CRC; // here. This prevents a significant amount of I/O.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp:43,Modifiability,config,config,43,// parseInstallNameToolOptions returns the config and sets the input arguments.; // If a help flag is set then parseInstallNameToolOptions will print the help; // messege and exit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp:33,Modifiability,config,config,33,// parseStripOptions returns the config and sets the input arguments. If a; // help flag is set then parseStripOptions will print the help messege and; // exit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:3,Deployability,Configurat,Configuration,3,"// Configuration for the overall invocation of this tool. When invoked as; // objcopy, will always contain exactly one CopyConfig. When invoked as strip,; // will contain one or more CopyConfigs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:3,Modifiability,Config,Configuration,3,"// Configuration for the overall invocation of this tool. When invoked as; // objcopy, will always contain exactly one CopyConfig. When invoked as strip,; // will contain one or more CopyConfigs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:165,Availability,Error,ErrorCallback,165,// ParseObjcopyOptions returns the config and sets the input arguments. If a; // help flag is set then ParseObjcopyOptions will print the help messege and; // exit. ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:197,Availability,recover,recoverable,197,// ParseObjcopyOptions returns the config and sets the input arguments. If a; // help flag is set then ParseObjcopyOptions will print the help messege and; // exit. ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:209,Availability,error,errors,209,// ParseObjcopyOptions returns the config and sets the input arguments. If a; // help flag is set then ParseObjcopyOptions will print the help messege and; // exit. ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:220,Availability,Error,Error,220,// ParseObjcopyOptions returns the config and sets the input arguments. If a; // help flag is set then ParseObjcopyOptions will print the help messege and; // exit. ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:35,Modifiability,config,config,35,// ParseObjcopyOptions returns the config and sets the input arguments. If a; // help flag is set then ParseObjcopyOptions will print the help messege and; // exit. ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:197,Safety,recover,recoverable,197,// ParseObjcopyOptions returns the config and sets the input arguments. If a; // help flag is set then ParseObjcopyOptions will print the help messege and; // exit. ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:255,Safety,abort,aborts,255,// ParseObjcopyOptions returns the config and sets the input arguments. If a; // help flag is set then ParseObjcopyOptions will print the help messege and; // exit. ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:43,Modifiability,config,config,43,// ParseInstallNameToolOptions returns the config and sets the input arguments.; // If a help flag is set then ParseInstallNameToolOptions will print the help; // messege and exit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:40,Modifiability,config,config,40,// ParseBitcodeStripOptions returns the config and sets the input arguments.; // If a help flag is set then ParseBitcodeStripOptions will print the help; // messege and exit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:161,Availability,Error,ErrorCallback,161,// ParseStripOptions returns the config and sets the input arguments. If a; // help flag is set then ParseStripOptions will print the help messege and; // exit. ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:193,Availability,recover,recoverable,193,// ParseStripOptions returns the config and sets the input arguments. If a; // help flag is set then ParseStripOptions will print the help messege and; // exit. ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:205,Availability,error,errors,205,// ParseStripOptions returns the config and sets the input arguments. If a; // help flag is set then ParseStripOptions will print the help messege and; // exit. ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:216,Availability,Error,Error,216,// ParseStripOptions returns the config and sets the input arguments. If a; // help flag is set then ParseStripOptions will print the help messege and; // exit. ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:33,Modifiability,config,config,33,// ParseStripOptions returns the config and sets the input arguments. If a; // help flag is set then ParseStripOptions will print the help messege and; // exit. ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:193,Safety,recover,recoverable,193,// ParseStripOptions returns the config and sets the input arguments. If a; // help flag is set then ParseStripOptions will print the help messege and; // exit. ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h:251,Safety,abort,aborts,251,// ParseStripOptions returns the config and sets the input arguments. If a; // help flag is set then ParseStripOptions will print the help messege and; // exit. ErrorCallback is used to handle recoverable errors. An Error returned; // by the callback aborts the parsing and is then returned by this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/COFFDump.cpp:134,Performance,load,loader,134,// Prints import tables. The import table is a table containing the list of; // DLL name and symbol names which will be linked by the loader.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/COFFDump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/COFFDump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/ELFDump.cpp:344,Usability,simpl,simplicity,344,"// If there is no Symbol associated with the relocation, we set the undef; // boolean value to 'true'. This will prevent us from calling functions that; // requires the relocation to be associated with a symbol.; //; // In SHT_REL case we would need to read the addend from section data.; // GNU objdump does not do that and we just follow for simplicity atm.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/ELFDump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/ELFDump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/ELFDump.cpp:19,Availability,error,error,19,// TODO: test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/ELFDump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/ELFDump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/ELFDump.cpp:9,Testability,test,test,9,// TODO: test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/ELFDump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/ELFDump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:518,Integrability,depend,depending,518,"//===-- llvm-objdump.cpp - Object file dumping utility for llvm -----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program is a utility that works like binutils ""objdump"", that is, it; // dumps out a plethora of information about an object file depending on the; // flags.; //; // The flags and output of this program should be near identical to those of; // binutils objdump.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:41,Safety,avoid,avoid,41,// StringSet does not allow empty key so avoid adding sections with; // no name (such as the section with index 0) here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:107,Integrability,wrap,wrap,107,// Start at UINT64_MAX so that the first index returned after an increment is; // zero (after the unsigned wrap).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:17,Availability,error,error,17,"// If we have an error getting the name then we print the index of the archive; // member. Since we are already in an error state, we just ignore this error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:118,Availability,error,error,118,"// If we have an error getting the name then we print the index of the archive; // member. Since we are already in an error state, we just ignore this error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:151,Availability,error,error,151,"// If we have an error getting the name then we print the index of the archive; // member. Since we are already in an error state, we just ignore this error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:3,Deployability,Update,Update,3,// Update the triple name and return the found target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:208,Performance,load,loadable,208,"// Used for --adjust-vma to check if address should be adjusted by the; // specified value for a given section.; // For ELF we do not adjust non-allocatable sections like debug ones,; // because they are not loadable.; // TODO: implement for other file formats.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:123,Integrability,depend,depending,123,"// Return zero for any address before the first mapping symbol; this means; // we should use the default disassembly mode, depending on the target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:24,Energy Efficiency,Power,PowerPC,24,// So far only supports PowerPC and X86.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:6,Energy Efficiency,Power,PowerPC,6,"// On PowerPC and AIX, a function call is encoded as a branch to 0.; // On other PowerPC platforms (ELF), a function call is encoded as; // a branch to self. Do not add a label for these cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:81,Energy Efficiency,Power,PowerPC,81,"// On PowerPC and AIX, a function call is encoded as a branch to 0.; // On other PowerPC platforms (ELF), a function call is encoded as; // a branch to self. Do not add a label for these cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:165,Availability,error,error,165,// Don't ask a Mach-O STAB symbol for its section unless you know that; // STAB symbol's section field refers to a valid section index. Otherwise; // the symbol may error trying to load a section that does not exist.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:181,Performance,load,load,181,// Don't ask a Mach-O STAB symbol for its section unless you know that; // STAB symbol's section field refers to a valid section index. Otherwise; // the symbol may error trying to load a section that does not exist.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:49,Usability,simpl,simple,49,"// Sort all the symbols, this allows us to use a simple binary search to find; // Multiple symbols can have the same address. Use a stable sort to stabilize; // the output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:50,Safety,safe,safe,50,"// Now we've finished modifying that vector, it's safe to make; // a vector of StringRefs pointing into it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:388,Availability,failure,failure,388,"// Distinguish ELF data from code symbols, which will be used later on to; // decide whether to 'disassemble' this chunk as a data declaration via; // dumpELFData(), or whether to treat it as code.; //; // If data _and_ code symbols are defined at the same address, the code; // takes priority, on the grounds that disassembling code is our main; // purpose here, and it would be a worse failure to _not_ interpret; // something that _was_ meaningful as code than vice versa.; //; // Any ELF symbol type that is not clearly data will be regarded as code.; // In particular, one of the uses of STT_NOTYPE is for branch targets; // inside functions, for which STT_FUNC would be inaccurate.; //; // So here, we spot whether there's any non-data symbol present at all,; // and only set the DisassembleAsELFData flag if there isn't. Also, we use; // this distinction to inform the decision of which symbol to print at; // the head of the section, so that if we're printing code, we print a; // code-related symbol name to go with it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:516,Usability,clear,clearly,516,"// Distinguish ELF data from code symbols, which will be used later on to; // decide whether to 'disassemble' this chunk as a data declaration via; // dumpELFData(), or whether to treat it as code.; //; // If data _and_ code symbols are defined at the same address, the code; // takes priority, on the grounds that disassembling code is our main; // purpose here, and it would be a worse failure to _not_ interpret; // something that _was_ meaningful as code than vice versa.; //; // Any ELF symbol type that is not clearly data will be regarded as code.; // In particular, one of the uses of STT_NOTYPE is for branch targets; // inside functions, for which STT_FUNC would be inaccurate.; //; // So here, we spot whether there's any non-data symbol present at all,; // and only set the DisassembleAsELFData flag if there isn't. Also, we use; // this distinction to inform the decision of which symbol to print at; // the head of the section, so that if we're printing code, we print a; // code-related symbol name to go with it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:261,Availability,failure,failure,261,"// If onSymbolStart returns Fail, that means it identified some kind; // of special data at this address, but wasn't able to disassemble it; // meaningfully. So we fall back to disassembling the failed region; // as bytes, assuming that the target detected the failure before; // printing anything.; //; // Return values Success or SoftFail (i.e no 'real' failure) are; // expected to mean that the target has emitted its own output.; //; // Either way, 'Size' will have been set to the amount of data; // covered by whatever prologue the target identified. So we advance; // our own position to beyond that. Sometimes that will be the entire; // distance to the next symbol, and sometimes it will be just a; // prologue and we should start disassembling instructions from where; // it left off.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:356,Availability,failure,failure,356,"// If onSymbolStart returns Fail, that means it identified some kind; // of special data at this address, but wasn't able to disassemble it; // meaningfully. So we fall back to disassembling the failed region; // as bytes, assuming that the target detected the failure before; // printing anything.; //; // Return values Success or SoftFail (i.e no 'real' failure) are; // expected to mean that the target has emitted its own output.; //; // Either way, 'Size' will have been set to the amount of data; // covered by whatever prologue the target identified. So we advance; // our own position to beyond that. Sometimes that will be the entire; // distance to the next symbol, and sometimes it will be just a; // prologue and we should start disassembling instructions from where; // it left off.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:248,Safety,detect,detected,248,"// If onSymbolStart returns Fail, that means it identified some kind; // of special data at this address, but wasn't able to disassemble it; // meaningfully. So we fall back to disassembling the failed region; // as bytes, assuming that the target detected the failure before; // printing anything.; //; // Return values Success or SoftFail (i.e no 'real' failure) are; // expected to mean that the target has emitted its own output.; //; // Either way, 'Size' will have been set to the amount of data; // covered by whatever prologue the target identified. So we advance; // our own position to beyond that. Sometimes that will be the entire; // distance to the next symbol, and sometimes it will be just a; // prologue and we should start disassembling instructions from where; // it left off.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:34,Deployability,patch,patched,34,"// For --reloc: print zero blocks patched by relocations, so that; // relocations can be shown in the dump.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:218,Safety,avoid,avoid,218,"// If disassembly succeeds, we try to resolve the target address; // (jump target or memory operand address) and print it to the; // right of the instruction.; //; // Otherwise, we don't print anything else so that we avoid; // analyzing invalid or incomplete instruction information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:118,Security,access,accessed,118,"// In a relocatable object, the target's section must reside in; // the same section as the call instruction or it is accessed; // through a relocation.; //; // In a non-relocatable object, the target may be in any section.; // In that case, locate the section(s) containing the target; // address and find the symbol in one of those, if possible.; //; // N.B. Except for XCOFF, we don't walk the relocations in the; // relocatable case yet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:27,Safety,avoid,avoid,27,// Skip mapping symbols to avoid possible ambiguity as they; // do not allow uniquely identifying the target address.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:24,Availability,error,error,24,"// If -r was used, this error will be printed later.; // Otherwise, we ignore the error and print what; // would have been printed without using relocations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:82,Availability,error,error,82,"// If -r was used, this error will be printed later.; // Otherwise, we ignore the error and print what; // would have been printed without using relocations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:30,Deployability,update,update,30,"// When --adjust-vma is used, update the address printed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:165,Availability,error,error,165,// Don't ask a Mach-O STAB symbol for its section unless you know that; // STAB symbol's section field refers to a valid section index. Otherwise; // the symbol may error trying to load a section that does not exist.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:181,Performance,load,load,181,// Don't ask a Mach-O STAB symbol for its section unless you know that; // STAB symbol's section field refers to a valid section index. Otherwise; // the symbol may error trying to load a section that does not exist.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:3,Safety,Avoid,Avoid,3,// Avoid other output when using a raw option.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp:3,Safety,Avoid,Avoid,3,// Avoid other output when using a raw option.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/llvm-objdump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:73,Energy Efficiency,consumption,consumption,73,"// We found a function starts segment, parse the addresses for later; // consumption.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:3,Availability,Error,Errors,3,// Errors will be handled when printing the table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:280,Availability,error,error,280,// checkMachOAndArchFlags() checks to see if the ObjectFile is a Mach-O file; // and if it is and there is a list of architecture flags is specified then; // check to make sure this Mach-O file is one of those architectures or all; // architectures were specified. If not then an error is generated and this; // routine returns false. Else it returns true.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:312,Integrability,rout,routine,312,// checkMachOAndArchFlags() checks to see if the ObjectFile is a Mach-O file; // and if it is and there is a list of architecture flags is specified then; // check to make sure this Mach-O file is one of those architectures or all; // architectures were specified. If not then an error is generated and this; // routine returns false. Else it returns true.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:92,Availability,error,error,92,// If we need the symbol table to do the operation then check it here to; // produce a good error message as to where the Mach-O file comes from in; // the error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:156,Availability,error,error,156,// If we need the symbol table to do the operation then check it here to; // produce a good error message as to where the Mach-O file comes from in; // the error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:98,Integrability,message,message,98,// If we need the symbol table to do the operation then check it here to; // produce a good error message as to where the Mach-O file comes from in; // the error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:162,Integrability,message,message,162,// If we need the symbol table to do the operation then check it here to; // produce a good error message as to where the Mach-O file comes from in; // the error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:202,Integrability,rout,routine,202,"// namespace; // SymbolizerGetOpInfo() is the operand information call back function.; // This is called to get the symbolic information for operand(s) of an; // instruction when it is being done. This routine does this from; // the relocation information, symbol table, etc. That block of information; // is a pointer to the struct DisassembleInfo that was passed when the; // disassembler context was created and passed to back to here when; // called back by the disassembler for instruction operands that could have; // relocation information. The address of the instruction containing operand is; // at the Pc parameter. The immediate value the operand has is passed in; // op_info->Value and is at Offset past the start of the instruction and has a; // byte Size of 1, 2 or 4. The symbolc information is returned in TagBuf is the; // LLVMOpInfo1 struct defined in the header ""llvm-c/Disassembler.h"" as symbol; // names and addends of the symbolic expression to add for the operand. The; // value of TagType is currently 1 (for the LLVMOpInfo1 struct). If symbolic; // information is returned then this function returns 1 else it returns 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:267,Testability,stub,stub,267,// If we have a branch that is not an external relocation entry then; // return 0 so the code in tryAddingSymbolicOperand() can use the; // SymbolLookUp call back with the branch target address to look up the; // symbol and possibility add an annotation for a symbol stub.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:178,Testability,stub,stub,178,// GuessIndirectSymbol returns the name of the indirect symbol for the; // ReferenceValue passed in or nullptr. This is used when ReferenceValue maybe; // an address of a symbol stub or a lazy or non-lazy pointer to associate the; // symbol name being referenced by the stub or pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:270,Testability,stub,stub,270,// GuessIndirectSymbol returns the name of the indirect symbol for the; // ReferenceValue passed in or nullptr. This is used when ReferenceValue maybe; // an address of a symbol stub or a lazy or non-lazy pointer to associate the; // symbol name being referenced by the stub or pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:139,Energy Efficiency,allocate,allocates,139,// method_reference() is called passing it the ReferenceName that might be; // a reference it to an Objective-C method call. If so then it allocates and; // assembles a method call string with the values last seen and saved in; // the DisassembleInfo's class_name and selector_name fields. This is saved; // into the method field of the info and any previous string is free'ed.; // Then the class_name field in the info is set to nullptr. The method call; // string is set into ReferenceName and ReferenceType is set to; // LLVMDisassembler_ReferenceType_Out_Objc_Message. If this not a method call; // then both ReferenceType and ReferenceName are left unchanged.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:128,Integrability,message,message,128,"// GuessPointerPointer() is passed the address of what might be a pointer to; // a reference to an Objective-C class, selector, message ref or cfstring.; // If so the value of the pointer is returned and one of the booleans are set; // to true. If not zero is returned and all the booleans are set to false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:281,Integrability,rout,routine,281,"// TODO: For fully linked images, look through the external relocation; // entries off the dynamic symtab command. For these the r_offset is from the; // start of the first writeable segment in the Mach-O file. So the offset; // to this section from that segment is passed to this routine by the caller,; // as the database_offset. Which is the difference of the section's starting; // address and the first writable segment.; //; // NOTE: need add passing the database_offset to this routine.; // We did not find an external relocation entry so look up the ReferenceValue; // as an address of a symbol and if found return that symbol's name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:485,Integrability,rout,routine,485,"// TODO: For fully linked images, look through the external relocation; // entries off the dynamic symtab command. For these the r_offset is from the; // start of the first writeable segment in the Mach-O file. So the offset; // to this section from that segment is passed to this routine by the caller,; // as the database_offset. Which is the difference of the section's starting; // address and the first writable segment.; //; // NOTE: need add passing the database_offset to this routine.; // We did not find an external relocation entry so look up the ReferenceValue; // as an address of a symbol and if found return that symbol's name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:3,Performance,Cache,Cache,3,// Cache (64-bit pointer),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:3,Performance,Cache,Cache,3,/* Cache (32-bit pointer) */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:3,Availability,mask,masks,3,/* masks for objc_image_info.flags */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:48,Modifiability,variab,variable,48,// uint32_t defs[1]; /* void * (32-bit pointer) variable size */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:39,Modifiability,variab,variable,39,// struct objc_ivar_t ivar_list[1]; /* variable length structure */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:43,Modifiability,variab,variable,43,// struct objc_method_t method_list[1]; /* variable length structure */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:24,Integrability,Protocol,Protocol,24,"// uint32_t list[1]; /* Protocol *, aka struct objc_protocol_t *; // (32-bit pointer) */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:76,Integrability,Message,Message,76,"// Look for literals such as Objective-C CFStrings refs, Selector refs,; // Message refs and Class refs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:1341,Performance,load,loaded,1341,"// SymbolizerSymbolLookUp is the symbol lookup function passed when creating; // the Symbolizer. It looks up the ReferenceValue using the info passed via the; // pointer to the struct DisassembleInfo that was passed when MCSymbolizer; // is created and returns the symbol name that matches the ReferenceValue or; // nullptr if none. The ReferenceType is passed in for the IN type of; // reference the instruction is making from the values in defined in the header; // ""llvm-c/Disassembler.h"". On return the ReferenceType can set to a specific; // Out type and the ReferenceName will also be set which is added as a comment; // to the disassembled instruction.; //; // If the symbol name is a C++ mangled name then the demangled name is; // returned through ReferenceName and ReferenceType is set to; // LLVMDisassembler_ReferenceType_DeMangled_Name .; //; // When this is called to get a symbol name for a branch target then the; // ReferenceType will be LLVMDisassembler_ReferenceType_In_Branch and then; // SymbolValue will be looked for in the indirect symbol table to determine if; // it is an address for a symbol stub. If so then the symbol name for that; // stub is returned indirectly through ReferenceName and then ReferenceType is; // set to LLVMDisassembler_ReferenceType_Out_SymbolStub.; //; // When this is called with an value loaded via a PC relative load then; // ReferenceType will be LLVMDisassembler_ReferenceType_In_PCrel_Load then the; // SymbolValue is checked to be an address of literal pointer, symbol pointer,; // or an Objective-C meta data reference. If so the output ReferenceType is; // set to correspond to that as well as setting the ReferenceName.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:1366,Performance,load,load,1366,"// SymbolizerSymbolLookUp is the symbol lookup function passed when creating; // the Symbolizer. It looks up the ReferenceValue using the info passed via the; // pointer to the struct DisassembleInfo that was passed when MCSymbolizer; // is created and returns the symbol name that matches the ReferenceValue or; // nullptr if none. The ReferenceType is passed in for the IN type of; // reference the instruction is making from the values in defined in the header; // ""llvm-c/Disassembler.h"". On return the ReferenceType can set to a specific; // Out type and the ReferenceName will also be set which is added as a comment; // to the disassembled instruction.; //; // If the symbol name is a C++ mangled name then the demangled name is; // returned through ReferenceName and ReferenceType is set to; // LLVMDisassembler_ReferenceType_DeMangled_Name .; //; // When this is called to get a symbol name for a branch target then the; // ReferenceType will be LLVMDisassembler_ReferenceType_In_Branch and then; // SymbolValue will be looked for in the indirect symbol table to determine if; // it is an address for a symbol stub. If so then the symbol name for that; // stub is returned indirectly through ReferenceName and then ReferenceType is; // set to LLVMDisassembler_ReferenceType_Out_SymbolStub.; //; // When this is called with an value loaded via a PC relative load then; // ReferenceType will be LLVMDisassembler_ReferenceType_In_PCrel_Load then the; // SymbolValue is checked to be an address of literal pointer, symbol pointer,; // or an Objective-C meta data reference. If so the output ReferenceType is; // set to correspond to that as well as setting the ReferenceName.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:1119,Testability,stub,stub,1119,"// SymbolizerSymbolLookUp is the symbol lookup function passed when creating; // the Symbolizer. It looks up the ReferenceValue using the info passed via the; // pointer to the struct DisassembleInfo that was passed when MCSymbolizer; // is created and returns the symbol name that matches the ReferenceValue or; // nullptr if none. The ReferenceType is passed in for the IN type of; // reference the instruction is making from the values in defined in the header; // ""llvm-c/Disassembler.h"". On return the ReferenceType can set to a specific; // Out type and the ReferenceName will also be set which is added as a comment; // to the disassembled instruction.; //; // If the symbol name is a C++ mangled name then the demangled name is; // returned through ReferenceName and ReferenceType is set to; // LLVMDisassembler_ReferenceType_DeMangled_Name .; //; // When this is called to get a symbol name for a branch target then the; // ReferenceType will be LLVMDisassembler_ReferenceType_In_Branch and then; // SymbolValue will be looked for in the indirect symbol table to determine if; // it is an address for a symbol stub. If so then the symbol name for that; // stub is returned indirectly through ReferenceName and then ReferenceType is; // set to LLVMDisassembler_ReferenceType_Out_SymbolStub.; //; // When this is called with an value loaded via a PC relative load then; // ReferenceType will be LLVMDisassembler_ReferenceType_In_PCrel_Load then the; // SymbolValue is checked to be an address of literal pointer, symbol pointer,; // or an Objective-C meta data reference. If so the output ReferenceType is; // set to correspond to that as well as setting the ReferenceName.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:1165,Testability,stub,stub,1165,"// SymbolizerSymbolLookUp is the symbol lookup function passed when creating; // the Symbolizer. It looks up the ReferenceValue using the info passed via the; // pointer to the struct DisassembleInfo that was passed when MCSymbolizer; // is created and returns the symbol name that matches the ReferenceValue or; // nullptr if none. The ReferenceType is passed in for the IN type of; // reference the instruction is making from the values in defined in the header; // ""llvm-c/Disassembler.h"". On return the ReferenceType can set to a specific; // Out type and the ReferenceName will also be set which is added as a comment; // to the disassembled instruction.; //; // If the symbol name is a C++ mangled name then the demangled name is; // returned through ReferenceName and ReferenceType is set to; // LLVMDisassembler_ReferenceType_DeMangled_Name .; //; // When this is called to get a symbol name for a branch target then the; // ReferenceType will be LLVMDisassembler_ReferenceType_In_Branch and then; // SymbolValue will be looked for in the indirect symbol table to determine if; // it is an address for a symbol stub. If so then the symbol name for that; // stub is returned indirectly through ReferenceName and then ReferenceType is; // set to LLVMDisassembler_ReferenceType_Out_SymbolStub.; //; // When this is called with an value loaded via a PC relative load then; // ReferenceType will be LLVMDisassembler_ReferenceType_In_PCrel_Load then the; // SymbolValue is checked to be an address of literal pointer, symbol pointer,; // or an Objective-C meta data reference. If so the output ReferenceType is; // set to correspond to that as well as setting the ReferenceName.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:43,Performance,load,load,43,// If this is arm64 and the reference is a load register instruction and we; // have seen an adrp instruction just before it and the adrp's Xd register; // matches this add's Xn register reconstruct the value being referenced and; // look to see if it is a literal pointer. Note the load register; // instruction is passed in ReferenceValue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:283,Performance,load,load,283,// If this is arm64 and the reference is a load register instruction and we; // have seen an adrp instruction just before it and the adrp's Xd register; // matches this add's Xn register reconstruct the value being referenced and; // look to see if it is a literal pointer. Note the load register; // instruction is passed in ReferenceValue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:27,Performance,load,load,27,// If this arm64 and is an load register (PC-relative) instruction the; // ReferenceValue is the PC plus the immediate value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:8,Safety,detect,detect,8,// Auto-detect w/o --dsym.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:3,Performance,Load,Load,3,// Load the file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:28,Availability,alive,alive,28,"// We need to keep the file alive, because we're replacing DbgObj with it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:30,Availability,alive,alive,30,// We need to keep the Binary alive with the buffer,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:30,Availability,alive,alive,30,// We need to keep the Binary alive with the buffer,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:96,Integrability,rout,routine,96,// Create a map of symbol addresses to symbol names for use by; // the SymbolizerSymbolLookUp() routine.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:33,Testability,stub,stubs,33,// Skip all symbols if this is a stubs file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:319,Availability,avail,available,319,"//===----------------------------------; // A shared list of common encodings; //===----------------------------------; // These occupy indices in the range [0, N] whenever an encoding is referenced; // from a compressed 2nd level index table. In practice the linker only; // creates ~128 of these, so that indices are available to embed encodings in; // the 2nd level index.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:25,Availability,error,errors,25,// TODO: Actually report errors helpfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:44,Performance,load,load,44,// TODO: get and print the raw bytes of the load command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:38,Performance,load,load,38,// TODO: print all the other kinds of load commands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:43,Deployability,update,update,43,// Strong symbols don't have a location to update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:511,Deployability,update,updated,511,"//===-- SourcePrinter.cpp - source interleaving utilities ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the LiveVariablePrinter and SourcePrinter classes to; // keep track of DWARF info as the current address is updated, and print out the; // source file line and variable liveness as needed.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:563,Modifiability,variab,variable,563,"//===-- SourcePrinter.cpp - source interleaving utilities ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the LiveVariablePrinter and SourcePrinter classes to; // keep track of DWARF info as the current address is updated, and print out the; // source file line and variable liveness as needed.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:86,Availability,error,error,86,"// If the variable doesn't have any locations, just ignore it. We don't; // report an error or warning here as that could be noisy on optimised; // code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:10,Modifiability,variab,variable,10,"// If the variable doesn't have any locations, just ignore it. We don't; // report an error or warning here as that could be noisy on optimised; // code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:65,Modifiability,variab,variable,65,// Get the column number (in characters) at which the first live variable; // line should be printed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:293,Modifiability,variab,variable,293,"// Indent to the first live-range column to the right of the currently; // printed line, and return the index of that column.; // TODO: formatted_raw_ostream uses ""column"" to mean a number of characters; // since the last \n, and we use it to mean the number of slots in which we; // put live variable lines. Pick a less overloaded word.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:3,Testability,Log,Logical,3,"// Logical column number: column zero is the first column we print in, each; // logical column is 2 physical columns wide.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:80,Testability,log,logical,80,"// Logical column number: column zero is the first column we print in, each; // logical column is 2 physical columns wide.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:4,Deployability,Update,Update,4,"/// Update to match the state of the instruction between ThisAddr and; /// NextAddr. In the common case, any live range active at ThisAddr is; /// live-in to the instruction, and any live range active at NextAddr is; /// live-out of the instruction. If IncludeDefinedVars is false, then live; /// ranges starting at NextAddr will be ignored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:16,Modifiability,variab,variables,16,"// First, check variables which have already been assigned a column, so; // that we don't change their order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:18,Modifiability,variab,variables,18,"// Next, look for variables which don't already have a column, but which; // are now live.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:292,Deployability,update,update,292,"/// Print live ranges to the right of an existing line. This assumes the; /// line is not an instruction, so doesn't start or end any live ranges, so; /// we only need to print active ranges or empty columns. If AfterInst is; /// true, this is being printed after the last instruction fed to update(),; /// otherwise this is being printed before it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:19,Modifiability,variab,variable,19,"/// Print any live variable range info needed to the right of a; /// non-instruction line of disassembly. This is where we print the variable; /// names and expressions, with thin line-drawing characters connecting them; /// to the live range which starts at the next instruction. If MustPrint is; /// true, we have to print at least one line (with the continuation of any; /// already-active live ranges) because something has already been printed; /// earlier on this line.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:133,Modifiability,variab,variable,133,"/// Print any live variable range info needed to the right of a; /// non-instruction line of disassembly. This is where we print the variable; /// names and expressions, with thin line-drawing characters connecting them; /// to the live range which starts at the next instruction. If MustPrint is; /// true, we have to print at least one line (with the continuation of any; /// already-active live ranges) because something has already been printed; /// earlier on this line.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:18,Modifiability,variab,variable,18,"// Then print the variable name and location of the new live range,; // with box drawing characters joining it to the live range line.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:100,Modifiability,variab,variables,100,"// If we must print something (because we printed a line/column number),; // but don't have any new variables to print, then print a line which; // just continues any existing live ranges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:19,Modifiability,variab,variable,19,/// Print the live variable ranges to the right of a disassembled instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:76,Availability,avail,available,76,// Get the source line text for LineInfo:; // - use LineInfo::LineSource if available;; // - use LineCache if LineInfo::Source otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h:80,Modifiability,variab,variable,80,"/// Stores a single expression representing the location of a source-level; /// variable, along with the PC range for which that expression is valid.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h:37,Modifiability,variab,variable,37,/// Helper class for printing source variable locations alongside disassembly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h:80,Modifiability,variab,variable,80,// Information we want to track about one column in which we are printing a; // variable live range.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h:12,Modifiability,variab,variables,12,// All live variables we know about in the object/image file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h:65,Modifiability,variab,variable,65,// Get the column number (in characters) at which the first live variable; // line should be printed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h:293,Modifiability,variab,variable,293,"// Indent to the first live-range column to the right of the currently; // printed line, and return the index of that column.; // TODO: formatted_raw_ostream uses ""column"" to mean a number of characters; // since the last \n, and we use it to mean the number of slots in which we; // put live variable lines. Pick a less overloaded word.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h:4,Deployability,Update,Update,4,"/// Update to match the state of the instruction between ThisAddr and; /// NextAddr. In the common case, any live range active at ThisAddr is; /// live-in to the instruction, and any live range active at NextAddr is; /// live-out of the instruction. If IncludeDefinedVars is false, then live; /// ranges starting at NextAddr will be ignored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h:292,Deployability,update,update,292,"/// Print live ranges to the right of an existing line. This assumes the; /// line is not an instruction, so doesn't start or end any live ranges, so; /// we only need to print active ranges or empty columns. If AfterInst is; /// true, this is being printed after the last instruction fed to update(),; /// otherwise this is being printed before it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h:19,Modifiability,variab,variable,19,"/// Print any live variable range info needed to the right of a; /// non-instruction line of disassembly. This is where we print the variable; /// names and expressions, with thin line-drawing characters connecting them; /// to the live range which starts at the next instruction. If MustPrint is; /// true, we have to print at least one line (with the continuation of any; /// already-active live ranges) because something has already been printed; /// earlier on this line.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h:133,Modifiability,variab,variable,133,"/// Print any live variable range info needed to the right of a; /// non-instruction line of disassembly. This is where we print the variable; /// names and expressions, with thin line-drawing characters connecting them; /// to the live range which starts at the next instruction. If MustPrint is; /// true, we have to print at least one line (with the continuation of any; /// already-active live ranges) because something has already been printed; /// earlier on this line.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h:19,Modifiability,variab,variable,19,/// Print the live variable ranges to the right of a disassembled instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h:32,Performance,cache,cached,32,// Mark the line endings of the cached source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/DummyOptFuzzer.cpp:45,Safety,sanity check,sanity check,45,"//===--- DummyOptFuzzer.cpp - Entry point to sanity check the fuzzer ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/DummyOptFuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/DummyOptFuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/DummyOptFuzzer.cpp:426,Testability,test,test,426,"//===--- DummyOptFuzzer.cpp - Entry point to sanity check the fuzzer ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/DummyOptFuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/DummyOptFuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp:395,Performance,optimiz,optimization,395,"//===--- llvm-opt-fuzzer.cpp - Fuzzer for instruction selection ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Tool to fuzz optimization passes using libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp:3,Safety,Avoid,Avoid,3,// Avoid adding incorrect test cases to the corpus.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp:26,Testability,test,test,26,// Avoid adding incorrect test cases to the corpus.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp:428,Availability,error,error,428,// There are some invariants which are not checked by the verifier in favor; // of having them checked by the parser. They may be considered as bugs in the; // verifier and should be fixed there. However until all of those are covered; // we want to check for them explicitly. Otherwise we will add incorrect input; // to the corpus and this is going to confuse the fuzzer which will start; // exploration of the bitcode reader error handling code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp:17,Integrability,depend,dependant,17,// Set up target dependant options; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp:15,Deployability,pipeline,pipeline,15,// Create pass pipeline; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp:61,Availability,error,error,61,"// Only fail with assert above, otherwise ignore the parsing error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp:18,Testability,assert,assert,18,"// Only fail with assert above, otherwise ignore the parsing error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp:31,Testability,test,test,31,// Run passes which we need to test; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp:65,Availability,error,errors,65,// Make sure we print the summary and the current unit when LLVM errors out.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp:19,Deployability,pipeline,pipeline,19,// Check that pass pipeline is specified and correct; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-report/OptReport.cpp:448,Performance,optimiz,optimization,448,"//===------------------ llvm-opt-report/OptReport.cpp ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements a tool that can parse the YAML optimization; /// records and generate an optimization summary annotated source listing; /// report.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-opt-report/OptReport.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-report/OptReport.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-report/OptReport.cpp:490,Performance,optimiz,optimization,490,"//===------------------ llvm-opt-report/OptReport.cpp ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file implements a tool that can parse the YAML optimization; /// records and generate an optimization summary annotated source listing; /// report.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-opt-report/OptReport.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-report/OptReport.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-report/OptReport.cpp:59,Performance,optimiz,optimization,59,// The per-location information collected for producing an optimization report.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-opt-report/OptReport.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-report/OptReport.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-report/OptReport.cpp:32,Performance,optimiz,optimizations,32,"// We need to figure out if the optimizations for this line were the same; // in each function context. If not, then we want to group the similar; // function contexts together and display each group separately. If; // they're all the same, then we only display the line once without any; // additional markings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-opt-report/OptReport.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-report/OptReport.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/DumpOutputStyle.cpp:26,Integrability,depend,dependents,26,"// If we need to dump all dependents, then iterate each index and find; // all dependents, adding them to a map ordered by TypeIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-pdbutil/DumpOutputStyle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/DumpOutputStyle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/DumpOutputStyle.cpp:79,Integrability,depend,dependents,79,"// If we need to dump all dependents, then iterate each index and find; // all dependents, adding them to a map ordered by TypeIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-pdbutil/DumpOutputStyle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/DumpOutputStyle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/DumpOutputStyle.cpp:44,Security,hash,hash,44,// Return early if we aren't dumping public hash table and address map info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-pdbutil/DumpOutputStyle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/DumpOutputStyle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/llvm-pdbutil.cpp:27,Security,checksum,checksum,27,"// Each module has its own checksum subsection, so scan for it every time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-pdbutil/llvm-pdbutil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/llvm-pdbutil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/MinimalSymbolDumper.cpp:9,Availability,down,down,9,// Break down the annotation byte code and calculate code and line offsets.; // FIXME: It would be helpful if we could look up the initial file and inlinee; // lines offset using the inlinee index above.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-pdbutil/MinimalSymbolDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/MinimalSymbolDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/MinimalSymbolDumper.cpp:30,Deployability,update,updates,30,"// Apparently this annotation updates the code offset. It's hard to make; // MSVC produce this opcode, but clang uses it, and debuggers seem to use; // this interpretation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-pdbutil/MinimalSymbolDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/MinimalSymbolDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/PrettyClassLayoutGraphicalDumper.cpp:55,Modifiability,extend,extend,55,"// This might be an empty base, in which case it could extend outside the; // bounds of the parent class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-pdbutil/PrettyClassLayoutGraphicalDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/PrettyClassLayoutGraphicalDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/PrettyTypeDumper.cpp:221,Usability,responsiv,responsive,221,"// If we're using no sort mode, then we can start getting immediate output; // from the tool by just filtering as we go, rather than processing; // everything up front so that we can sort it. This makes the tool more; // responsive. So only precompute the filtered/sorted set of classes if; // necessary due to the specified options.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-pdbutil/PrettyTypeDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/PrettyTypeDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/PrettyVariableDumper.h:45,Modifiability,variab,variable,45,"//===- PrettyVariableDumper.h - PDBSymDumper variable dumper ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-pdbutil/PrettyVariableDumper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/PrettyVariableDumper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/StreamUtil.cpp:25,Performance,load,load,25,"// It's OK if we fail to load some of these streams, we still attempt to print; // what we can.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-pdbutil/StreamUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/StreamUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/StreamUtil.cpp:11,Availability,error,errors,11,// Consume errors from missing streams.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-pdbutil/StreamUtil.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/StreamUtil.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/TypeReferenceTracker.cpp:46,Security,expose,expose,46,"// LazyRandomTypeCollection doesn't appear to expose the number of records, so; // just iterate up front to find out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-pdbutil/TypeReferenceTracker.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/TypeReferenceTracker.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/TypeReferenceTracker.cpp:89,Security,hash,hash,89,// Get the TpiStream pointer for forward decl resolution if this is a pdb.; // Build the hash map to enable resolving forward decls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-pdbutil/TypeReferenceTracker.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/TypeReferenceTracker.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/TypeReferenceTracker.cpp:11,Usability,simpl,simple,11,"// If it's simple or already seen, no need to add to work list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-pdbutil/TypeReferenceTracker.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/TypeReferenceTracker.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/TypeReferenceTracker.cpp:20,Availability,failure,failure,20,// FIXME: Check for failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-pdbutil/TypeReferenceTracker.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/TypeReferenceTracker.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/TypeReferenceTracker.cpp:20,Availability,failure,failure,20,// FIXME: Check for failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-pdbutil/TypeReferenceTracker.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/TypeReferenceTracker.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:126,Testability,assert,asserts,126,"// NOTE: cl::alias must not have cl::sub(), since aliased option's cl::sub(); // will be used. llvm::cl::alias::done() method asserts this condition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:90,Usability,simpl,simplicity,90,// WARNING: This reservoir size value is propagated to any input indexed; // profiles for simplicity. Changing this value between invocations could; // result in sample bias.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:43,Availability,error,errors,43,/// Keep track of merged data and reported errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:54,Testability,Test,TestFileName,54,"/// Computer the overlap b/w profile BaseFilename and TestFileName,; /// and store the program level result to Overlap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:4,Performance,Load,Load,4,/// Load an input into a writer context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:45,Availability,error,error,45,"// TODO: This only saves the first non-fatal error from InstrProfReader, and; // then added to WriterContext::Errors. However, this is not extensible, if; // we have more non-fatal errors from InstrProfReader in the future. How; // should this interact with different -failure-mode?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:110,Availability,Error,Errors,110,"// TODO: This only saves the first non-fatal error from InstrProfReader, and; // then added to WriterContext::Errors. However, this is not extensible, if; // we have more non-fatal errors from InstrProfReader in the future. How; // should this interact with different -failure-mode?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:181,Availability,error,errors,181,"// TODO: This only saves the first non-fatal error from InstrProfReader, and; // then added to WriterContext::Errors. However, this is not extensible, if; // we have more non-fatal errors from InstrProfReader in the future. How; // should this interact with different -failure-mode?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:269,Availability,failure,failure-mode,269,"// TODO: This only saves the first non-fatal error from InstrProfReader, and; // then added to WriterContext::Errors. However, this is not extensible, if; // we have more non-fatal errors from InstrProfReader in the future. How; // should this interact with different -failure-mode?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:31,Availability,error,error,31,// Only show the first time an error occurs in this file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:36,Availability,error,error,36,// Only show hint the first time an error occurs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:40,Safety,detect,detect,40,"// If NumThreads is not specified, auto-detect a good default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:3,Performance,Load,Load,3,// Load the inputs in parallel (N/NumThreads serial steps).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:19,Availability,error,errors,19,// Handle deferred errors encountered during merging. If the number of errors; // is equal to the number of inputs the merge failed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:71,Availability,error,errors,71,// Handle deferred errors encountered during merging. If the number of errors; // is equal to the number of inputs the merge failed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:307,Performance,perform,performance,307,"/// Either set all the counters in the instr profile entry \p IFE to; /// -1 / -2 /in order to drop the profile or scale up the; /// counters in \p IFP to be above hot / cold threshold. We use; /// the ratio of zero counters in the profile of a function to; /// decide the profile is helpful or harmful for performance,; /// and to choose whether to scale up or drop it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:596,Deployability,update,update,596,"// We need to flatten the SampleFDO profile as the InstrFDO; // profile does not have inlined callsite profiles.; // One caveat is the pre-inlined function -- their samples; // should be collapsed into the caller function.; // Here we do a DFS traversal to get the flatten profile; // info: the sum of entrycount and the max of maxcount.; // Here is the algorithm:; // recursive (FS, root_name) {; // name = FS->getName();; // get samples for FS;; // if (InstrProf.find(name) {; // root_name = name;; // } else {; // if (name is in static_func map) {; // root_name = static_name;; // }; // }; // update the Map entry for root_name;; // for (subfs: FS) {; // recursive(subfs, root_name);; // }; // }; //; // Here is an example.; //; // SampleProfile:; // foo:12345:1000; // 1: 1000; // 2.1: 1000; // 15: 5000; // 4: bar:1000; // 1: 1000; // 2: goo:3000; // 1: 3000; // 8: bar:40000; // 1: 10000; // 2: goo:30000; // 1: 30000; //; // InstrProfile has two entries:; // foo; // bar.cc;bar; //; // After BuildMaxSampleMap, we should have the following in FlattenSampleMap:; // {""foo"", {1000, 5000}}; // {""bar.cc;bar"", {11000, 30000}}; //; // foo's has an entry count of 1000, and max body count of 5000.; // bar.cc;bar has an entry count of 11000 (sum two callsites of 1000 and; // 10000), and max count of 30000 (from the callsite in line 8).; //; // Note that goo's count will remain in bar.cc;bar() as it does not have an; // entry in InstrProfile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:72,Deployability,update,update,72,"// Here the EntrySample is of an inlined function, so we should not; // update the EntrySample in the map.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:40,Availability,alive,alive,40,// Make sure that the file buffer stays alive for the duration of the; // weighted input vector's lifetime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:62,Testability,Test,TestFilename,62,/// Computer the overlap b/w profile BaseFilename and profile TestFilename.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:69,Testability,test,test,69,// Number of and total samples of units that only present in base or test; // profile,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:48,Testability,test,test,48,// Number of units and total samples in base or test profile,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:100,Testability,test,test,100,"// For SampleOverlapStats instances representing functions, weights of the; // function in base and test profiles",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:105,Deployability,update,update,105,"/// Advance one step based on the previous match status unless the previous; /// status is MS_None. Then update Status based on the comparison between two; /// container iterators at the current step. If the previous status is; /// MS_None, it means two iterators are at the beginning and no comparison has; /// been made, so we simply update Status without advancing the iterators.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:336,Deployability,update,update,336,"/// Advance one step based on the previous match status unless the previous; /// status is MS_None. Then update Status based on the comparison between two; /// container iterators at the current step. If the previous status is; /// MS_None, it means two iterators are at the beginning and no comparison has; /// been made, so we simply update Status without advancing the iterators.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:329,Usability,simpl,simply,329,"/// Advance one step based on the previous match status unless the previous; /// status is MS_None. Then update Status based on the comparison between two; /// container iterators at the current step. If the previous status is; /// MS_None, it means two iterators are at the beginning and no comparison has; /// been made, so we simply update Status without advancing the iterators.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:3,Deployability,Update,Update,3,// Update Status according to iterators at the current step.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:68,Integrability,interface,interface,68,/// Detect 0-sample input profile and report to output stream. This interface; /// should be called after loadProfiles().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:106,Performance,load,loadProfiles,106,/// Detect 0-sample input profile and report to output stream. This interface; /// should be called after loadProfiles().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:4,Safety,Detect,Detect,4,/// Detect 0-sample input profile and report to output stream. This interface; /// should be called after loadProfiles().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:55,Testability,test,test,55,"/// This function tries matching functions in base and test profiles. For each; /// pair of matched functions, it aggregates the function-level; /// similarity into a profile-level similarity. It also dump function-level; /// similarity information of functions specified by --function,; /// --value-cutoff, and --similarity-cutoff options. The program-level; /// similarity PS is computed as follows:; /// Given function-level similarity FS(A) for all function A, the; /// weight of function A in base profile WB(A), and the weight of function; /// A in test profile WT(A), compute PS(base_profile, test_profile) =; /// sum_A(FS(A) * avg(WB(A), WT(A))) ranging in [0.0f to 1.0f] with 0.0; /// meaning no-overlap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:555,Testability,test,test,555,"/// This function tries matching functions in base and test profiles. For each; /// pair of matched functions, it aggregates the function-level; /// similarity into a profile-level similarity. It also dump function-level; /// similarity information of functions specified by --function,; /// --value-cutoff, and --similarity-cutoff options. The program-level; /// similarity PS is computed as follows:; /// Given function-level similarity FS(A) for all function A, the; /// weight of function A in base profile WB(A), and the weight of function; /// A in test profile WT(A), compute PS(base_profile, test_profile) =; /// sum_A(FS(A) * avg(WB(A), WT(A))) ranging in [0.0f to 1.0f] with 0.0; /// meaning no-overlap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:233,Safety,avoid,avoid,233,/// Initialize ProfOverlap with the sum of samples in base and test; /// profiles. This function also computes and keeps the sum of samples and; /// max sample counts of each function in BaseStats and TestStats for later; /// use to avoid re-computations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:63,Testability,test,test,63,/// Initialize ProfOverlap with the sum of samples in base and test; /// profiles. This function also computes and keeps the sum of samples and; /// max sample counts of each function in BaseStats and TestStats for later; /// use to avoid re-computations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:201,Testability,Test,TestStats,201,/// Initialize ProfOverlap with the sum of samples in base and test; /// profiles. This function also computes and keeps the sum of samples and; /// max sample counts of each function in BaseStats and TestStats for later; /// use to avoid re-computations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:4,Performance,Load,Load,4,/// Load profiles specified by BaseFilename and TestFilename.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:48,Testability,Test,TestFilename,48,/// Load profiles specified by BaseFilename and TestFilename.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:17,Testability,Test,TestStats,17,"// BaseStats and TestStats hold FuncSampleStats for each function, with; // function name as the key.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:43,Testability,Test,TestHotThreshold,43,// Block samples above BaseHotThreshold or TestHotThreshold are considered hot; // for tracking hot blocks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:96,Testability,test,test,96,"/// Return a similarity of two line/block sample counters in the same; /// function in base and test profiles. The line/block-similarity BS(i) is; /// computed as follows:; /// For an offsets i, given the sample count at i in base profile BB(i),; /// the sample count at i in test profile BT(i), the sum of sample counts; /// in this function in base profile SB, and the sum of sample counts in; /// this function in test profile ST, compute BS(i) = 1.0 - fabs(BB(i)/SB -; /// BT(i)/ST), ranging in [0.0f to 1.0f] with 0.0 meaning no-overlap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:276,Testability,test,test,276,"/// Return a similarity of two line/block sample counters in the same; /// function in base and test profiles. The line/block-similarity BS(i) is; /// computed as follows:; /// For an offsets i, given the sample count at i in base profile BB(i),; /// the sample count at i in test profile BT(i), the sum of sample counts; /// in this function in base profile SB, and the sum of sample counts in; /// this function in test profile ST, compute BS(i) = 1.0 - fabs(BB(i)/SB -; /// BT(i)/ST), ranging in [0.0f to 1.0f] with 0.0 meaning no-overlap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:417,Testability,test,test,417,"/// Return a similarity of two line/block sample counters in the same; /// function in base and test profiles. The line/block-similarity BS(i) is; /// computed as follows:; /// For an offsets i, given the sample count at i in base profile BB(i),; /// the sample count at i in test profile BT(i), the sum of sample counts; /// in this function in base profile SB, and the sum of sample counts in; /// this function in test profile ST, compute BS(i) = 1.0 - fabs(BB(i)/SB -; /// BT(i)/ST), ranging in [0.0f to 1.0f] with 0.0 meaning no-overlap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:18,Deployability,update,updates,18,"/// This function updates statistics in FuncOverlap, HotBlockOverlap, and; /// Difference for two sample units in a matched function according to the; /// given match status.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:18,Deployability,update,updates,18,"/// This function updates statistics in FuncOverlap, HotBlockOverlap, and; /// Difference for unmatched callees that only present in one profile in a; /// matched caller function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:18,Deployability,update,updates,18,"/// This function updates sample overlap statistics of an overlap function in; /// base and test profile. It also calculates a function-internal similarity; /// FIS as follows:; /// For offsets i that have samples in at least one profile in this; /// function A, given BS(i) returned by computeBlockSimilarity(), compute; /// FIS(A) = (2.0 - sum_i(1.0 - BS(i))) / 2, ranging in [0.0f to 1.0f] with; /// 0.0 meaning no overlap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:92,Testability,test,test,92,"/// This function updates sample overlap statistics of an overlap function in; /// base and test profile. It also calculates a function-internal similarity; /// FIS as follows:; /// For offsets i that have samples in at least one profile in this; /// function A, given BS(i) returned by computeBlockSimilarity(), compute; /// FIS(A) = (2.0 - sum_i(1.0 - BS(i))) / 2, ranging in [0.0f to 1.0f] with; /// 0.0 meaning no overlap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:281,Testability,test,test,281,"/// The function-level similarity FS(A) for a function A is computed as; /// follows:; /// Compute a function-internal similarity FIS(A) by; /// computeSampleFunctionInternalOverlap(). Then, with the weight of; /// function A in base profile WB(A), and the weight of function A in test; /// profile WT(A), compute FS(A) = FIS(A) * (1.0 - fabs(WB(A) - WT(A))); /// ranging in [0.0f to 1.0f] with 0.0 meaning no overlap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:180,Testability,test,test,180,/// Profile-level similarity (PS) is a weighted aggregate over function-level; /// similarities (FS). This method weights the FS value by the function; /// weights in the base and test profiles for the aggregation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:18,Testability,Test,TestFunc,18,"// If BaseFunc or TestFunc is nullptr, it means the functions do not overlap.; // In this case, we use DefaultFuncInternalSimilarity as the function internal; // similarity.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:48,Testability,test,test,48,// Accumulate the percentage of base unique and test unique samples into; // ProfOverlap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:80,Testability,test,test,80,// Remove matched base functions for later reporting functions not found; // in test profile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:57,Testability,test,test,57,// Traverse through functions in base profile but not in test profile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:3,Performance,Load,Load,3,// Load BaseHotThreshold and TestHotThreshold as 99-percentile threshold in; // profile summary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:29,Testability,Test,TestHotThreshold,29,// Load BaseHotThreshold and TestHotThreshold as 99-percentile threshold in; // profile summary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:13,Availability,error,error,13,// Since the error can be related to the profile or the binary we do not; // pass whence. Instead additional context is provided where necessary in; // the error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:156,Availability,error,error,156,// Since the error can be related to the profile or the binary we do not; // pass whence. Instead additional context is provided where necessary in; // the error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:162,Integrability,message,message,162,// Since the error can be related to the profile or the binary we do not; // pass whence. Instead additional context is provided where necessary in; // the error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CallContext.h:111,Integrability,wrap,wrapper,111,// TODO: This operation is expansive. If it ever gets called multiple times we; // may think of making a class wrapper with internal states for it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/CallContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CallContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp:35,Usability,guid,guided,35,"//===-- CSPreInliner.cpp - Profile guided preinliner -------------- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp:117,Performance,tune,tuned,117,// The switches specify inline thresholds used in SampleProfileLoader inlining.; // TODO: the actual threshold to be tuned here because the size here is based; // on machine code not LLVM IR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp:19,Usability,guid,guid-to-name,19,"// TODO: Pass in a guid-to-name map in order for; // ContextTracker.getFuncNameFor to work, if `Profiles` can have md5 codes; // as their profile context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp:55,Performance,tune,tuned,55,// Set default preinliner hot/cold call site threshold tuned with CSSPGO.; // for good performance with reasonable profile size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp:87,Performance,perform,performance,87,// Set default preinliner hot/cold call site threshold tuned with CSSPGO.; // for good performance with reasonable profile size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp:90,Availability,down,down,90,// Trim cold edges to get a more stable call graph. This allows for a more; // stable top-down order which in turns helps the stablity of the generated; // profile from run to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp:57,Availability,down,down,57,"// Now that we have a profiled call graph, construct top-down order; // by building up SCC and reversing SCC order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp:27,Availability,reliab,reliable,27,"// Call site count is more reliable, so we look up the corresponding call; // target profile in caller's context profile to retrieve call site count.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp:34,Usability,simpl,simply,34,"// If replay inline is requested, simply follow the inline decision of the; // profiled binary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp:55,Availability,down,down,55,"// Execute global pre-inliner to estimate a global top-down inline; // decision and merge profiles accordingly. This helps with profile; // merge for ThinLTO otherwise we won't be able to merge profiles back; // to base profile across module/thin-backend boundaries.; // It also helps better compress context profile to control profile; // size, as we now only need context profile for functions going to; // be inlined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.h:33,Usability,guid,guided,33,"//===-- CSPreInliner.h - Profile guided preinliner ---------------- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.h:21,Usability,GUID,GUID,21,// Tie breaker using GUID so we have stable/deterministic inlining order,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.h:335,Energy Efficiency,reduce,reduce,335,"// Pre-compilation inliner based on context-sensitive profile.; // The PreInliner estimates inline decision using hotness from profile; // and cost estimation from machine code size. It helps merges context; // profile globally and achieves better post-inine profile quality, which; // otherwise won't be possible for ThinLTO. It also reduce context profile; // size by only keep context that is estimated to be inlined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/CSPreInliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ErrorHandling.h:8,Availability,Error,ErrorHandling,8,"//===-- ErrorHandling.h - Error handler -------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ErrorHandling.h:26,Availability,Error,Error,26,"//===-- ErrorHandling.h - Error handler -------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ErrorHandling.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ErrorHandling.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/llvm-profgen.cpp:3,Security,Validat,Validate,3,// Validate the command line input.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/llvm-profgen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/llvm-profgen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/llvm-profgen.cpp:3,Security,Validat,Validate,3,// Validate input profile is provided only once,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/llvm-profgen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/llvm-profgen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/llvm-profgen.cpp:3,Performance,Load,Load,3,// Load symbols and disassemble the code of a given binary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/llvm-profgen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/llvm-profgen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp:197,Performance,cache,cached,197,"// Ignore cyclic paths. Since we are doing a recursive DFS walk, if the source; // frame being visited is already in the stack, it means we are seeing a; // cycle. This is done before querying the cached result because the cached; // result may be computed based on the same path. Consider the following case:; // A -> B, B -> A, A -> D; // When computing unique reachablity from A to D, the cached result for (B,D); // should not be counted since the unique path B->A->D is basically the same; // path as A->D. Counting that with invalidate the uniqueness from A to D.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp:223,Performance,cache,cached,223,"// Ignore cyclic paths. Since we are doing a recursive DFS walk, if the source; // frame being visited is already in the stack, it means we are seeing a; // cycle. This is done before querying the cached result because the cached; // result may be computed based on the same path. Consider the following case:; // A -> B, B -> A, A -> D; // When computing unique reachablity from A to D, the cached result for (B,D); // should not be counted since the unique path B->A->D is basically the same; // path as A->D. Counting that with invalidate the uniqueness from A to D.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp:392,Performance,cache,cached,392,"// Ignore cyclic paths. Since we are doing a recursive DFS walk, if the source; // frame being visited is already in the stack, it means we are seeing a; // cycle. This is done before querying the cached result because the cached; // result may be computed based on the same path. Consider the following case:; // A -> B, B -> A, A -> D; // When computing unique reachablity from A to D, the cached result for (B,D); // should not be counted since the unique path B->A->D is basically the same; // path as A->D. Counting that with invalidate the uniqueness from A to D.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp:35,Performance,cache,cached,35,"// If already computed, return the cached result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp:3,Usability,Undo,Undo,3,// Undo already-computed path if it is not unique.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp:3,Performance,Cache,Cache,3,// Cache the result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp:3,Usability,Undo,Undo,3,// Undo already-computed path if it is not unique.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp:132,Performance,throughput,throughput,132,// Done with the inference if the calle is reachable via a single callsite.; // This may not be accurate but it improves the search throughput.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp:3,Usability,Undo,Undo,3,// Undo already-computed path if it is not unique.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.h:205,Availability,avail,availabe,205,// Compute a unique tail call path from the source frame address to the target; // function. Output the unique path prefix (not including `To`) in; // `UniquePath` if exists. Return the number of possibly availabe tail call; // paths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.h:200,Availability,avail,availabe,200,// Compute a unique tail call path from the source function to the target; // function. Output the unique path prefix (not including `To`) in; // `UniquePath` if exists. Return the number of possibly availabe tail call; // paths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.h:125,Availability,down,down,125,// A map of call instructions to their target addresses. This is first; // populated with static call edges but then trimmed down to dynamic call; // edges based on LBR samples.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.h:130,Availability,down,down,130,// A map of tail call instructions to their target addresses. This is first; // populated with static call edges but then trimmed down to dynamic call; // edges based on LBR samples.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.h:3,Performance,Cache,Cached,3,// Cached results from a CallerCalleePair to a unique call path between them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.h:57,Availability,avail,available,57,// Cached results from CallerCalleePair to the number of available call paths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.h:3,Performance,Cache,Cached,3,// Cached results from CallerCalleePair to the number of available call paths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/MissingFrameInferrer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:310,Usability,simpl,simply,310,// We don't need to top frame probe since it should be extracted; // from the range.; // The outcome of the virtual unwinding with pseudo probes is a; // map from a context key to the address range being unwound.; // This means basically linear unwinding is not needed for pseudo; // probes. The range will be simply recorded here and will be; // converted to a list of pseudo probes to report in ProfileGenerator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:9,Availability,Toler,Tolerate,9,"// TODO: Tolerate tail call for now, as we may see tail call from libraries.; // This is only for intra function branches, excluding tail calls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:3,Availability,Recover,Recover,3,// Recover the call stack,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:3,Safety,Recover,Recover,3,// Recover the call stack,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:3,Safety,Sanity check,Sanity check,3,"// Sanity check - making sure leaf of LBR aligns with leaf of stack sample; // Stack sample sometimes can be unreliable, so filter out bogus ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:61,Deployability,update,update,61,// Skip unwinding the rest of LBR trace. Reset the stack and update the; // state so that the rest of the trace can still be processed as if they; // do not have stack samples.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:34,Performance,load,loaded,34,// Drop the event if its image is loaded at the same address,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:81,Deployability,update,update,81,"// A binary image could be unloaded and then reloaded at different; // place, so update binary load address.; // Only update for the first executable segment and assume all other; // segments are loaded at consecutive memory addresses, which is the case on; // X64.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:118,Deployability,update,update,118,"// A binary image could be unloaded and then reloaded at different; // place, so update binary load address.; // Only update for the first executable segment and assume all other; // segments are loaded at consecutive memory addresses, which is the case on; // X64.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:95,Performance,load,load,95,"// A binary image could be unloaded and then reloaded at different; // place, so update binary load address.; // Only update for the first executable segment and assume all other; // segments are loaded at consecutive memory addresses, which is the case on; // X64.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:196,Performance,load,loaded,196,"// A binary image could be unloaded and then reloaded at different; // place, so update binary load address.; // Only update for the first executable segment and assume all other; // segments are loaded at consecutive memory addresses, which is the case on; // X64.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:23,Performance,load,loaded,23,// Verify segments are loaded consecutively.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:20,Performance,load,loading,20,// The event is for loading a separate executable segment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:65,Performance,load,loaded,65,// Find the segment the event falls in. A large segment could be loaded; // via multiple mmap calls with consecutive memory addresses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:33,Performance,load,load,33,// Canonicalize to use preferred load address as base address.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:39,Energy Efficiency,reduce,reduce,39,// Filter external-to-external case to reduce LBR trace size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:304,Energy Efficiency,reduce,reduce,304,"// Filter out broken stack sample. We may not have complete frame info; // if sample end up in prolog/epilog, the result is dangling context not; // connected to entry point. This should be relatively rare thus not much; // impact on overall profile quality. However we do want to filter them; // out to reduce the number of different calling contexts. One instance; // of such case - when sample landed in prolog/epilog, somehow stack; // walking will be broken in an unexpected way that higher frames will be; // missing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:9,Availability,redundant,redundant,9,"// Avoid redundant warning, only warn at the first unmatched sample.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:3,Safety,Avoid,Avoid,3,"// Avoid redundant warning, only warn at the first unmatched sample.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:9,Safety,redund,redundant,9,"// Avoid redundant warning, only warn at the first unmatched sample.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:30,Safety,avoid,avoid,30,// Canonicalize stack leaf to avoid 'random' IP from leaf frame skew LBR; // ranges,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:30,Deployability,update,update,30,"// If this not the first LBR, update the range count between TO of current; // LBR and FROM of next LBR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:121,Safety,detect,detection,121,"// A LBR sample is like:; // 40062f 0x5c6313f/0x5c63170/P/-/-/0 0x5c630e7/0x5c63130/P/-/-/0 ...; // A heuristic for fast detection by checking whether a; // leading "" 0x"" and the '/' exist.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:16,Safety,avoid,avoid,16,// Short cut to avoid string find is possible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp:3,Safety,Detect,Detect,3,// Detect sample with call stack,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:369,Deployability,rolling,rolling,369,"// Hash interface for generic data of type T; // Data should implement a \fn getHashCode and a \fn isEqual; // Currently getHashCode is non-virtual to avoid the overhead of calling vtable,; // i.e we explicitly calculate hash of derived class, assign to base class's; // HashCode. This also provides the flexibility for calculating the hash code; // incrementally(like rolling hash) during frame stack unwinding since unwinding; // only changes the leaf of frame stack. \fn isEqual is a virtual function,; // which will have perf overhead. In the future, if we redesign a better hash; // function, then we can just skip this or switch to non-virtual function(like; // just ignore comparison if hash conflicts probabilities is low)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:8,Integrability,interface,interface,8,"// Hash interface for generic data of type T; // Data should implement a \fn getHashCode and a \fn isEqual; // Currently getHashCode is non-virtual to avoid the overhead of calling vtable,; // i.e we explicitly calculate hash of derived class, assign to base class's; // HashCode. This also provides the flexibility for calculating the hash code; // incrementally(like rolling hash) during frame stack unwinding since unwinding; // only changes the leaf of frame stack. \fn isEqual is a virtual function,; // which will have perf overhead. In the future, if we redesign a better hash; // function, then we can just skip this or switch to non-virtual function(like; // just ignore comparison if hash conflicts probabilities is low)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:151,Safety,avoid,avoid,151,"// Hash interface for generic data of type T; // Data should implement a \fn getHashCode and a \fn isEqual; // Currently getHashCode is non-virtual to avoid the overhead of calling vtable,; // i.e we explicitly calculate hash of derived class, assign to base class's; // HashCode. This also provides the flexibility for calculating the hash code; // incrementally(like rolling hash) during frame stack unwinding since unwinding; // only changes the leaf of frame stack. \fn isEqual is a virtual function,; // which will have perf overhead. In the future, if we redesign a better hash; // function, then we can just skip this or switch to non-virtual function(like; // just ignore comparison if hash conflicts probabilities is low)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:3,Security,Hash,Hash,3,"// Hash interface for generic data of type T; // Data should implement a \fn getHashCode and a \fn isEqual; // Currently getHashCode is non-virtual to avoid the overhead of calling vtable,; // i.e we explicitly calculate hash of derived class, assign to base class's; // HashCode. This also provides the flexibility for calculating the hash code; // incrementally(like rolling hash) during frame stack unwinding since unwinding; // only changes the leaf of frame stack. \fn isEqual is a virtual function,; // which will have perf overhead. In the future, if we redesign a better hash; // function, then we can just skip this or switch to non-virtual function(like; // just ignore comparison if hash conflicts probabilities is low)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:221,Security,hash,hash,221,"// Hash interface for generic data of type T; // Data should implement a \fn getHashCode and a \fn isEqual; // Currently getHashCode is non-virtual to avoid the overhead of calling vtable,; // i.e we explicitly calculate hash of derived class, assign to base class's; // HashCode. This also provides the flexibility for calculating the hash code; // incrementally(like rolling hash) during frame stack unwinding since unwinding; // only changes the leaf of frame stack. \fn isEqual is a virtual function,; // which will have perf overhead. In the future, if we redesign a better hash; // function, then we can just skip this or switch to non-virtual function(like; // just ignore comparison if hash conflicts probabilities is low)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:271,Security,Hash,HashCode,271,"// Hash interface for generic data of type T; // Data should implement a \fn getHashCode and a \fn isEqual; // Currently getHashCode is non-virtual to avoid the overhead of calling vtable,; // i.e we explicitly calculate hash of derived class, assign to base class's; // HashCode. This also provides the flexibility for calculating the hash code; // incrementally(like rolling hash) during frame stack unwinding since unwinding; // only changes the leaf of frame stack. \fn isEqual is a virtual function,; // which will have perf overhead. In the future, if we redesign a better hash; // function, then we can just skip this or switch to non-virtual function(like; // just ignore comparison if hash conflicts probabilities is low)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:336,Security,hash,hash,336,"// Hash interface for generic data of type T; // Data should implement a \fn getHashCode and a \fn isEqual; // Currently getHashCode is non-virtual to avoid the overhead of calling vtable,; // i.e we explicitly calculate hash of derived class, assign to base class's; // HashCode. This also provides the flexibility for calculating the hash code; // incrementally(like rolling hash) during frame stack unwinding since unwinding; // only changes the leaf of frame stack. \fn isEqual is a virtual function,; // which will have perf overhead. In the future, if we redesign a better hash; // function, then we can just skip this or switch to non-virtual function(like; // just ignore comparison if hash conflicts probabilities is low)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:377,Security,hash,hash,377,"// Hash interface for generic data of type T; // Data should implement a \fn getHashCode and a \fn isEqual; // Currently getHashCode is non-virtual to avoid the overhead of calling vtable,; // i.e we explicitly calculate hash of derived class, assign to base class's; // HashCode. This also provides the flexibility for calculating the hash code; // incrementally(like rolling hash) during frame stack unwinding since unwinding; // only changes the leaf of frame stack. \fn isEqual is a virtual function,; // which will have perf overhead. In the future, if we redesign a better hash; // function, then we can just skip this or switch to non-virtual function(like; // just ignore comparison if hash conflicts probabilities is low)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:579,Security,hash,hash,579,"// Hash interface for generic data of type T; // Data should implement a \fn getHashCode and a \fn isEqual; // Currently getHashCode is non-virtual to avoid the overhead of calling vtable,; // i.e we explicitly calculate hash of derived class, assign to base class's; // HashCode. This also provides the flexibility for calculating the hash code; // incrementally(like rolling hash) during frame stack unwinding since unwinding; // only changes the leaf of frame stack. \fn isEqual is a virtual function,; // which will have perf overhead. In the future, if we redesign a better hash; // function, then we can just skip this or switch to non-virtual function(like; // just ignore comparison if hash conflicts probabilities is low)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:694,Security,hash,hash,694,"// Hash interface for generic data of type T; // Data should implement a \fn getHashCode and a \fn isEqual; // Currently getHashCode is non-virtual to avoid the overhead of calling vtable,; // i.e we explicitly calculate hash of derived class, assign to base class's; // HashCode. This also provides the flexibility for calculating the hash code; // incrementally(like rolling hash) during frame stack unwinding since unwinding; // only changes the leaf of frame stack. \fn isEqual is a virtual function,; // which will have perf overhead. In the future, if we redesign a better hash; // function, then we can just skip this or switch to non-virtual function(like; // just ignore comparison if hash conflicts probabilities is low)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:3,Security,Hash,Hash,3,// Hash code generation,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:3,Security,Hash,Hash,3,// Hash equal,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:19,Security,hash,hash,19,// Use simple DJB2 hash,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:7,Usability,simpl,simple,7,// Use simple DJB2 hash,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:3,Integrability,Wrap,Wrapper,3,// Wrapper for sample counters including range counter and branch counter,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:50,Availability,reliab,reliable,50,"// Simply check addressIsReturn, as ret is always reliable, both for; // regular call and tail call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:3,Usability,Simpl,Simply,3,"// Simply check addressIsReturn, as ret is always reliable, both for; // regular call and tail call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:3,Deployability,Update,Update,3,// Update base address based on mmap events,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:24,Deployability,update,update,24,// Parse mmap event and update binary address,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h:64,Usability,simpl,simple,64,"// Post process the profile after trace aggregation, we will do simple range; // overlap computation for AutoFDO, or unwind for CSSPGO(hybrid sample).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/PerfReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp:56,Availability,down,down,56,"// Start from top-level context-less function, traverse down the reverse; // context trie to find the best/longest match for given context, then; // retrieve the size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp:73,Performance,optimiz,optimization,73,"// This ProbeContext has a probe, so it has code before inlining and; // optimization. Make sure we mark its size as known.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp:7,Availability,down,down,7,// DFS down the probe inline tree,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp:22,Performance,load,load,22,// Find the preferred load address for text sections.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp:3,Performance,Load,Load,3,"// Load debug info of subprograms from DWARF section.; // If path of debug info binary is specified, use the debug info from it,; // otherwise use the debug info from the executable binary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp:100,Availability,avail,available,100,"// FIXME: This should be the page size of the system running profiling.; // However such info isn't available at post-processing time, assuming; // 4K page now. Note that we don't use EXEC_PAGESIZE from <linux/param.h>; // because we may build the tools on non-linux.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp:27,Performance,load,loaded,27,// Segments will always be loaded at a page boundary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp:86,Availability,avail,available,86,// Build TopLevelProbeFrameMap to track size for optimized inlinees when probe; // is available,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp:49,Performance,optimiz,optimized,49,// Build TopLevelProbeFrameMap to track size for optimized inlinees when probe; // is available,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp:135,Performance,optimiz,optimized,135,// Any inter-function unconditional jump is considered tail call at; // this point. This is not 100% accurate and could further be; // optimized based on some source annotation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp:51,Usability,GUID,GUID,51,// Create a mapping from virtual address to symbol GUID and the other way; // around.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp:16,Security,hash,hash,16,// Populate the hash binary function map for MD5 function name lookup. This; // is done after BinaryFunctions are finalized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp:9,Performance,optimiz,optimized-away,9,// Track optimized-away inlinee for probed binary. A function inlined and then; // optimized away should still have their probes left over in places.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp:83,Performance,optimiz,optimized,83,// Track optimized-away inlinee for probed binary. A function inlined and then; // optimized away should still have their probes left over in places.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:76,Deployability,continuous,continuous,76,"// Info about function range. A function can be split into multiple; // non-continuous ranges, each range corresponds to one FuncRange.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:256,Performance,optimiz,optimization,256,"// Track function byte size under different context (outlined version as well as; // various inlined versions). It also provides query support to get function; // size with the best matching context, which is used to help pre-inliner use; // accurate post-optimization size to make decisions.; // TODO: If an inlinee is completely optimized away, ideally we should have zero; // for its context size, currently we would misss such context since it doesn't; // have instructions. To fix this, we need to mark all inlinee with entry probe; // but without instructions as having zero size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:331,Performance,optimiz,optimized,331,"// Track function byte size under different context (outlined version as well as; // various inlined versions). It also provides query support to get function; // size with the best matching context, which is used to help pre-inliner use; // accurate post-optimization size to make decisions.; // TODO: If an inlinee is completely optimized away, ideally we should have zero; // for its context size, currently we would misss such context since it doesn't; // have instructions. To fix this, we need to mark all inlinee with entry probe; // but without instructions as having zero size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:30,Performance,optimiz,optimized,30,"// For inlinees that are full optimized away, we can establish zero size using; // their remaining probes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:319,Performance,optimiz,optimization,319,"// Root node for context trie tree, node that this is a reverse context trie; // with callee as parent and caller as child. This way we can traverse from; // root to find the best/longest matching context if an exact match does not; // exist. It gives us the best possible estimate for function's post-inline,; // post-optimization byte size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:19,Modifiability,config,configure,19,// Options used to configure the symbolizer,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:65,Performance,load,loaded,65,// The runtime base address that the first executable segment is loaded at.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:43,Performance,load,loadabe,43,// The runtime base address that the first loadabe segment is loaded at.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:62,Performance,load,loaded,62,// The runtime base address that the first loadabe segment is loaded at.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:17,Performance,load,load,17,// The preferred load address of each executable segment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:56,Security,hash,hash,56,// Lookup BinaryFunctions using the function name's MD5 hash. Needed if the; // profile is using MD5.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:3,Usability,GUID,GUID,3,// GUID to Elf symbol start address map,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:31,Usability,GUID,GUID,31,// Start address to Elf symbol GUID map,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:40,Performance,optimiz,optimizations,40,// Infer missing frames due to compiler optimizations such as tail call; // elimination.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:24,Performance,load,loading,24,// Indicate if the base loading address is parsed from the mmap event or uses; // the preferred address,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:16,Availability,redundant,redundant,16,// Use to avoid redundant warning.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:10,Safety,avoid,avoid,10,// Use to avoid redundant warning.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:16,Safety,redund,redundant,16,// Use to avoid redundant warning.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:3,Performance,Load,Load,3,// Load debug info of subprograms from DWARF section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:3,Performance,Load,Load,3,// Load debug info from DWARF unit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:45,Deployability,continuous,continuous,45,// A function may be spilt into multiple non-continuous address ranges. We use; // this to set whether start a function range is the real entry of the; // function and also set false to the non-function label.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:33,Performance,load,load,33,// Canonicalize to use preferred load address as base address.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:24,Performance,load,load,24,// Return the preferred load address for the first executable segment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:24,Performance,load,load,24,// Return the preferred load address for the first loadable segment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:51,Performance,load,loadable,51,// Return the preferred load address for the first loadable segment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:3,Performance,Load,Load,3,// Load the symbols from debug table and populate into symbol list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h:3,Usability,Clear,Clear,3,// Clear the current context for an unknown probe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfiledBinary.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp:35,Modifiability,extend,extended,35,// Populate profile symbol list if extended binary format is used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp:58,Testability,log,logic,58,"/*; For the above example. With boundary points, follwing logic finds two; disjoint region of. [A,B]: 300; [B+1,C]: 200. If there is a boundary point that both begin and end, the point itself; becomes a separate disjoint region. For example, if we have original; ranges of. |<--- 100 --->|; |<--- 200 --->|; A B C. there are three boundary points with their begin/end counts of. A: (100, 0); B: (200, 100); C: (0, 200). the disjoint ranges would be. [A, B-1]: 100; [B, B]: 300; [B+1, C]: 200. Example for zero value range:. |<--- 100 --->|; |<--- 200 --->|; |<--------------- 0 ----------------->|; A B C D E F. [A, B-1] : 0; [B, C] : 100; [C+1, D-1]: 0; [D, E] : 200; [E+1, F] : 0; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp:3,Deployability,Update,Update,3,"// Update ContextWasInlined attribute for existing contexts.; // The current function can be called in two ways:; // - when processing a probe of the current frame; // - when processing the entry probe of an inlinee's frame, which; // is then used to update the callsite count of the current frame.; // The two can happen in any order, hence here we are making sure; // `ContextWasInlined` is always set as expected.; // TODO: Note that the former does not always happen if no probes of the; // current frame has samples, and if the latter happens, we could lose the; // attribute. This should be fixed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp:251,Deployability,update,update,251,"// Update ContextWasInlined attribute for existing contexts.; // The current function can be called in two ways:; // - when processing a probe of the current frame; // - when processing the entry probe of an inlinee's frame, which; // is then used to update the callsite count of the current frame.; // The two can happen in any order, hence here we are making sure; // `ContextWasInlined` is always set as expected.; // TODO: Note that the former does not always happen if no probes of the; // current frame has samples, and if the latter happens, we could lose the; // attribute. This should be fixed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp:167,Integrability,depend,depends,167,"// There is no call jmp sample between the inliner and inlinee, we need to use; // the inlinee's context to infer inliner's context, i.e. parent(inliner)'s; // sample depends on child(inlinee)'s sample, so traverse the tree in; // post-order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp:111,Safety,avoid,avoid,111,"// If we already have head sample counts, we must have value profile; // for call sites added already. Skip to avoid double counting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp:25,Safety,avoid,avoid,25,// Set the flag below to avoid merging the profile again in; // computeSummaryAndThreshold,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp:3,Availability,Recover,Recover,3,// Recover the old value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp:3,Safety,Recover,Recover,3,// Recover the old value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp:95,Performance,optimiz,optimized,95,"// Assign zero count for remaining probes without sample hits to; // differentiate from probes optimized away, of which the counts are unknown; // and will be inferred by the compiler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.h:120,Testability,Log,Log,120,"/*; For each region boundary point, mark if it is begin or end (or both) of; the region. Boundary points are inclusive. Log the sample count as well; so we can use it when we compute the sample count of each disjoint region; later. Note that there might be multiple ranges with different sample; count that share same begin/end point. We need to accumulate the sample; count for the boundary point for such case, because for the example; below,. |<--100-->|; |<------200------>|; A B C. sample count for disjoint region [A,B] would be 300.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.h:109,Safety,detect,detection,109,"// This is a linear algorithm that deduplicates adjacent repeated; // sequences of size I. The deduplication detection runs on a sliding; // window whose size is 2*I and it keeps sliding the window to deduplicate; // the data inside. Once duplication is detected, deduplicate it by; // skipping the right half part of the window, otherwise just copy back; // the new one by appending them at the back of End pointer(for the next; // iteration).; //; // For example:; // Input: [a1, a2, b1, b2]; // (Added index to distinguish the same char, the origin is [a, a, b,; // b], the size of the dedup window is 2(I = 1) at the beginning); //; // 1) The initial status is a dummy window[null, a1], then just copy the; // right half of the window(End = 0), then slide the window.; // Result: [a1], a2, b1, b2 (End points to the element right before ],; // after ] is the data of the previous iteration); //; // 2) Next window is [a1, a2]. Since a1 == a2, then skip the right half of; // the window i.e the duplication happen. Only slide the window.; // Result: [a1], a2, b1, b2; //; // 3) Next window is [a2, b1], copy the right half of the window(b1 is; // new) to the End and slide the window.; // Result: [a1, b1], b1, b2; //; // 4) Next window is [b1, b2], same to 2), skip b2.; // Result: [a1, b1], b1, b2; // After resize, it will be [a, b]; // Use pointers like below to do comparison inside the window; // [a b c a b c]; // | | | | |; // LeftBoundary Left Right Left+I Right+I; // A duplication found if Left < LeftBoundry.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.h:254,Safety,detect,detected,254,"// This is a linear algorithm that deduplicates adjacent repeated; // sequences of size I. The deduplication detection runs on a sliding; // window whose size is 2*I and it keeps sliding the window to deduplicate; // the data inside. Once duplication is detected, deduplicate it by; // skipping the right half part of the window, otherwise just copy back; // the new one by appending them at the back of End pointer(for the next; // iteration).; //; // For example:; // Input: [a1, a2, b1, b2]; // (Added index to distinguish the same char, the origin is [a, a, b,; // b], the size of the dedup window is 2(I = 1) at the beginning); //; // 1) The initial status is a dummy window[null, a1], then just copy the; // right half of the window(End = 0), then slide the window.; // Result: [a1], a2, b1, b2 (End points to the element right before ],; // after ] is the data of the previous iteration); //; // 2) Next window is [a1, a2]. Since a1 == a2, then skip the right half of; // the window i.e the duplication happen. Only slide the window.; // Result: [a1], a2, b1, b2; //; // 3) Next window is [a2, b1], copy the right half of the window(b1 is; // new) to the End and slide the window.; // Result: [a1, b1], b1, b2; //; // 4) Next window is [b1, b2], same to 2), skip b2.; // Result: [a1, b1], b1, b2; // After resize, it will be [a, b]; // Use pointers like below to do comparison inside the window; // [a b c a b c]; // | | | | |; // LeftBoundary Left Right Left+I Right+I; // A duplication found if Left < LeftBoundry.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.h:6,Safety,avoid,avoids,6,"// To avoids scanning a part of a sequence repeatedly, it finds out; // the common suffix of two hald in the window. The common suffix will; // serve as the common prefix of next possible pair of duplicate; // sequences. The non-common part will be ignored and never scanned; // again.; // For example.; // Input: [a, b1], c1, b2, c2; // I = 2; //; // 1) For the window [a, b1, c1, b2], non-common-suffix for the right; // part is 'c1', copy it and only slide the window 1 step.; // Result: [a, b1, c1], b2, c2; //; // 2) Next window is [b1, c1, b2, c2], so duplication happen.; // Result after resize: [a, b, c]",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profgen/ProfileGenerator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/llvm-rc.cpp:104,Safety,avoid,avoid,104,// The llvm Support classes don't handle reading from stdout of a child; // process; otherwise we could avoid using a temp file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/llvm-rc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/llvm-rc.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/llvm-rc.cpp:376,Integrability,depend,depends,376,"// GNU windres passes the arguments almost as-is on to popen() (it only; // backslash escapes spaces in the arguments), where a shell would; // unescape backslash escapes for quotes and similar. This means that; // when calling GNU windres, callers need to double escape chars like; // quotes, e.g. as -DSTRING=\\\""1.2.3\\\"".; //; // Exactly how the arguments are interpreted depends on the platform; // though - but the cases where this matters (where callers would have; // done this double escaping) probably is confined to cases like these; // quoted string defines, and those happen to work the same across unix; // and windows.; //; // If GNU windres is executed with --use-temp-file, it doesn't use; // popen() to invoke the preprocessor, but uses another function which; // actually preserves tricky characters better. To mimic this behaviour,; // don't unescape arguments here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/llvm-rc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/llvm-rc.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/llvm-rc.cpp:287,Testability,log,logic,287,"// Technically, these are handled the same way as e.g. defines, but; // the way we consistently unescape the unix way breaks windows paths; // with single backslashes. Alternatively, our unescape function would; // need to mimic the platform specific command line parsing/unescaping; // logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/llvm-rc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/llvm-rc.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/llvm-rc.cpp:21,Modifiability,variab,variable,21,// Clear the INLCUDE variable for the external preprocessor,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/llvm-rc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/llvm-rc.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/llvm-rc.cpp:3,Usability,Clear,Clear,3,// Clear the INLCUDE variable for the external preprocessor,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/llvm-rc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/llvm-rc.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp:38,Availability,Error,Error,38,// Take an expression returning llvm::Error and forward the error if it exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp:60,Availability,error,error,60,// Take an expression returning llvm::Error and forward the error if it exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp:238,Safety,predict,predictably,238,"// Describes a way to handle '\0' characters when processing the string.; // rc.exe tool sometimes behaves in a weird way in postprocessing.; // If the string to be output is equivalent to a C-string (e.g. in MENU; // titles), string is (predictably) truncated after first 0-byte.; // When outputting a string table, the behavior is equivalent to appending; // '\0\0' at the end of the string, and then stripping the string; // before the first '\0\0' occurrence.; // Finally, when handling strings in user-defined resources, 0-bytes; // aren't stripped, nor do they terminate the string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp:670,Safety,detect,detect,670,"// We don't want to read non-ASCII hex digits. std:: functions past; // 0xFF invoke UB.; //; // FIXME: actually, Microsoft version probably doesn't check this; // condition and uses their Unicode version of 'isxdigit'. However,; // there are some hex-digit Unicode character outside of ASCII, and; // some of these are actually accepted by rc.exe, the notable example; // being fullwidth forms (U+FF10..U+FF19 etc.) These can be written; // instead of ASCII digits in \x... escape sequence and get accepted.; // However, the resulting hexcodes seem totally unpredictable.; // We think it's infeasible to try to reproduce this behavior, nor to; // put effort in order to detect it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp:56,Deployability,Update,Update,56,// RETURN_IF_ERROR(handleError(dumpResource(Ctx)));; // Update the sizes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp:3,Performance,Load,Load,3,// Load the fragment of file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp:14,Modifiability,rewrite,rewrite,14,"// We need to rewrite the cursor headers, and fetch actual values; // for Planes/BitCount.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp:197,Availability,fault,fault,197,"// We cannot let the higher word of DefaultStyle be equal to 0xFFFF.; // In such a case, whole object (in .res file) is equivalent to a; // DIALOGEX. It might lead to access violation/segmentation fault in; // resource readers. For example,; // 1 DIALOG 0, 0, 0, 65432; // STYLE 0xFFFF0001 {}; // would be compiled to a DIALOGEX with 65432 controls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp:167,Security,access,access,167,"// We cannot let the higher word of DefaultStyle be equal to 0xFFFF.; // In such a case, whole object (in .res file) is equivalent to a; // DIALOGEX. It might lead to access violation/segmentation fault in; // resource readers. For example,; // 1 DIALOG 0, 0, 0, 65432; // STYLE 0xFFFF0001 {}; // would be compiled to a DIALOGEX with 65432 controls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp:11,Usability,learn,learn,11,// https://learn.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-menuitemtemplate,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp:11,Usability,learn,learn,11,// https://learn.microsoft.com/en-us/windows/win32/menurc/menuex-template-item,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp:68,Usability,learn,learn,68,"// At first, MENUEX_TEMPLATE_HEADER structure.; // Ref:; // https://learn.microsoft.com/en-us/windows/win32/menurc/menuex-template-header",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp:244,Integrability,depend,depends,244,"// rc has a peculiar algorithm to output VERSIONINFO VALUEs. Each VALUE; // is a mapping from the key (string) to the value (a sequence of ints or; // a sequence of strings).; //; // If integers are to be written: width of each integer written depends on; // whether it's been declared 'long' (it's DWORD then) or not (it's WORD).; // ValueLength defined in structure referenced below is then the total; // number of bytes taken by these integers.; //; // If strings are to be written: characters are always WORDs.; // Moreover, '\0' character is written after the last string, and between; // every two strings separated by comma (if strings are not comma-separated,; // they're simply concatenated). ValueLength is equal to the number of WORDs; // written (that is, half of the bytes written).; //; // Ref: msdn.microsoft.com/en-us/library/windows/desktop/ms646994.aspx",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp:680,Usability,simpl,simply,680,"// rc has a peculiar algorithm to output VERSIONINFO VALUEs. Each VALUE; // is a mapping from the key (string) to the value (a sequence of ints or; // a sequence of strings).; //; // If integers are to be written: width of each integer written depends on; // whether it's been declared 'long' (it's DWORD then) or not (it's WORD).; // ValueLength defined in structure referenced below is then the total; // number of bytes taken by these integers.; //; // If strings are to be written: characters are always WORDs.; // Moreover, '\0' character is written after the last string, and between; // every two strings separated by comma (if strings are not comma-separated,; // they're simply concatenated). ValueLength is equal to the number of WORDs; // written (that is, half of the bytes written).; //; // Ref: msdn.microsoft.com/en-us/library/windows/desktop/ms646994.aspx",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.h:22,Modifiability,variab,variable,22,// Ignore the INCLUDE variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.h:27,Integrability,depend,depends,27,// Each STRINGTABLE bundle depends on ID of the bundle and language; // description.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.h:27,Energy Efficiency,allocate,allocated,27,// Icon and cursor IDs are allocated starting from 1 and increasing for; // each icon/cursor dumped. This maintains the current ID to be allocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.h:137,Energy Efficiency,allocate,allocated,137,// Icon and cursor IDs are allocated starting from 1 and increasing for; // each icon/cursor dumped. This maintains the current ID to be allocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp:405,Integrability,interface,interface,405,"//===-- ResourceScriptCppFilter.cpp ----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===---------------------------------------------------------------------===//; //; // This file implements an interface defined in ResourceScriptCppFilter.h.; //; //===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp:30,Availability,error,error,30,// Returns true to signify an error,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptCppFilter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptCppFilter.h:767,Usability,simpl,simply,767,"//===-- ResourceScriptCppFilter.h ------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===---------------------------------------------------------------------===//; //; // This filters the input to llvm-rc for preprocessor markers, removing; // preprocessing directives that a preprocessor can output or leave behind.; //; // It also filters out any contribution from files named *.h or *.c, based; // on preprocessor line markers. When preprocessing RC files, the included; // headers can leave behind C declarations, that RC doesn't understand.; // Rc.exe simply discards anything that comes from files named *.h or *.h.; //; // https://msdn.microsoft.com/en-us/library/windows/desktop/aa381033(v=vs.85).aspx; //; //===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptCppFilter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptCppFilter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.cpp:38,Availability,Error,Error,38,// Take an expression returning llvm::Error and forward the error if it exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.cpp:60,Availability,error,error,60,// Take an expression returning llvm::Error and forward the error if it exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.cpp:90,Availability,error,error,90,// Take an expression returning llvm::Expected<T> and assign it to Var or; // forward the error out of the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.cpp:765,Availability,mask,mask,765,"// An integer description might consist of a single integer or; // an arithmetic expression evaluating to the integer. The expressions; // can contain the following tokens: <int> ( ) + - | & ~ not. Their meaning; // is the same as in C++ except for 'not' expression.; // The operators in the original RC implementation have the following; // precedence:; // 1) Unary operators (- ~ not),; // 2) Binary operators (+ - & |), with no precedence.; //; // 'not' expression is mostly useful for style values. It evaluates to 0,; // but value given to the operator is stored separately from integer value.; // It's mostly useful for control style expressions and causes bits from; // default control style to be excluded from generated style. For binary; // operators the mask from the right operand is applied to the left operand; // and masks from both operands are combined in operator result.; //; // The following grammar is used to parse the expressions Exp1:; // Exp1 ::= Exp2 || Exp1 + Exp2 || Exp1 - Exp2 || Exp1 | Exp2 || Exp1 & Exp2; // Exp2 ::= -Exp2 || ~Exp2 || not Expr2 || Int || (Exp1).; // (More conveniently, Exp1 is a non-empty sequence of Exp2 expressions,; // separated by binary operators.); //; // Expressions of type Exp1 are read by parseIntExpr1(Inner) method, while Exp2; // is read by parseIntExpr2().; //; // The original Microsoft tool handles multiple unary operators incorrectly.; // For example, in 16-bit little-endian integers:; // 1 => 01 00, -1 => ff ff, --1 => ff ff, ---1 => 01 00;; // 1 => 01 00, ~1 => fe ff, ~~1 => fd ff, ~~~1 => fc ff.; // Our implementation differs from the original one and handles these; // operators correctly:; // 1 => 01 00, -1 => ff ff, --1 => 01 00, ---1 => ff ff;; // 1 => 01 00, ~1 => fe ff, ~~1 => 01 00, ~~~1 => fe ff.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.cpp:832,Availability,mask,masks,832,"// An integer description might consist of a single integer or; // an arithmetic expression evaluating to the integer. The expressions; // can contain the following tokens: <int> ( ) + - | & ~ not. Their meaning; // is the same as in C++ except for 'not' expression.; // The operators in the original RC implementation have the following; // precedence:; // 1) Unary operators (- ~ not),; // 2) Binary operators (+ - & |), with no precedence.; //; // 'not' expression is mostly useful for style values. It evaluates to 0,; // but value given to the operator is stored separately from integer value.; // It's mostly useful for control style expressions and causes bits from; // default control style to be excluded from generated style. For binary; // operators the mask from the right operand is applied to the left operand; // and masks from both operands are combined in operator result.; //; // The following grammar is used to parse the expressions Exp1:; // Exp1 ::= Exp2 || Exp1 + Exp2 || Exp1 - Exp2 || Exp1 | Exp2 || Exp1 & Exp2; // Exp2 ::= -Exp2 || ~Exp2 || not Expr2 || Int || (Exp1).; // (More conveniently, Exp1 is a non-empty sequence of Exp2 expressions,; // separated by binary operators.); //; // Expressions of type Exp1 are read by parseIntExpr1(Inner) method, while Exp2; // is read by parseIntExpr2().; //; // The original Microsoft tool handles multiple unary operators incorrectly.; // For example, in 16-bit little-endian integers:; // 1 => 01 00, -1 => ff ff, --1 => ff ff, ---1 => 01 00;; // 1 => 01 00, ~1 => fe ff, ~~1 => fd ff, ~~~1 => fc ff.; // Our implementation differs from the original one and handles these; // operators correctly:; // 1 => 01 00, -1 => ff ff, --1 => 01 00, ---1 => ff ff;; // 1 => 01 00, ~1 => fe ff, ~~1 => 01 00, ~~~1 => fe ff.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.cpp:81,Integrability,depend,depending,81,"// Each control definition (except CONTROL) follows one of the schemes below; // depending on the control class:; // [class] text, id, x, y, width, height [, style] [, exstyle] [, helpID]; // [class] id, x, y, width, height [, style] [, exstyle] [, helpID]; // Note that control ids must be integers.; // Text might be either a string or an integer pointing to resource ID.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.cpp:121,Integrability,depend,depends,121,"// Read a non-empty list of strings and/or ints, each; // possibly preceded by a comma. Unfortunately, the tool behavior depends; // on them existing or not, so we need to memorize where we found them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h:29,Availability,failure,failure,29,// Class describing a single failure of parser.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h:14,Availability,Error,Error,14,// Keep llvm::Error happy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h:54,Availability,error,error,54,"// Reads and returns a single resource definition, or error message if any; // occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h:60,Integrability,message,message,60,"// Reads and returns a single resource definition, or error message if any; // occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h:156,Availability,error,error,156,"// Read at least MinCount, and at most MaxCount integers separated by; // commas. The parser stops reading after fetching MaxCount integers; // or after an error occurs. Whenever the parser reads a comma, it; // expects an integer to follow.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h:346,Modifiability,extend,extend,346,"// Reads a set of optional statements. These can change the behavior of; // a number of resource types (e.g. STRINGTABLE, MENU or DIALOG) if provided; // before the main block with the contents of the resource.; // Usually, resources use a basic set of optional statements:; // CHARACTERISTICS, LANGUAGE, VERSION; // However, DIALOG and DIALOGEX extend this list by the following items:; // CAPTION, CLASS, EXSTYLE, FONT, MENU, STYLE; // UseExtendedStatements flag (off by default) allows the parser to read; // the additional types of statements.; //; // Ref (to the list of all optional statements):; // msdn.microsoft.com/en-us/library/windows/desktop/aa381002(v=vs.85).aspx",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h:13,Availability,error,error,13,"// Raises an error. If IsAlreadyRead = false (default), this complains about; // the token that couldn't be parsed. If the flag is on, this complains about; // the correctly read token that makes no sense (that is, the current parser; // state is beyond the erroneous token.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptStmt.h:11,Integrability,wrap,wrapper,11,// Integer wrapper that also holds information whether the user declared; // the integer to be long (by appending L to the end of the integer) or not.; // It allows to be implicitly cast from and to uint32_t in order; // to be compatible with the parts of code that don't care about the integers; // being marked long.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptStmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptStmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptStmt.h:156,Modifiability,variab,variable,156,"// These kinds don't have assigned type IDs (they might be the resources; // of invalid kind, expand to many resource structures in .res files,; // or have variable type ID). In order to avoid ID clashes with IDs above,; // we assign the kinds the values 256 and larger.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptStmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptStmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptStmt.h:187,Safety,avoid,avoid,187,"// These kinds don't have assigned type IDs (they might be the resources; // of invalid kind, expand to many resource structures in .res files,; // or have variable type ID). In order to avoid ID clashes with IDs above,; // we assign the kinds the values 256 and larger.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptStmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptStmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptStmt.h:3,Usability,Simpl,Simple,3,// Simple information about a single control type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptStmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptStmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.cpp:405,Integrability,interface,interface,405,"//===-- ResourceScriptToken.cpp ---------------------------------*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===---------------------------------------------------------------------===//; //; // This file implements an interface defined in ResourceScriptToken.h.; // In particular, it defines an .rc script tokenizer.; //; //===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.cpp:58,Availability,Error,Error,58,"// Consumes a token. If any problem occurred, a non-empty Error is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.cpp:23,Energy Efficiency,consumption,consumption,23,// One-character token consumption.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.h:489,Availability,avail,available,489,"//===-- ResourceScriptToken.h -----------------------------------*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===---------------------------------------------------------------------===//; //; // This declares the .rc script tokens and defines an interface for tokenizing; // the input data. The list of available tokens is located at; // ResourceScriptTokenList.def.; //; // Note that the tokenizer does not support preprocessor directives. The; // preprocessor should do its work on the .rc file before running llvm-rc.; //; // As for now, it is possible to parse ASCII files only (the behavior on; // UTF files might be undefined). However, it already consumes UTF-8 BOM, if; // there is any. Thus, ASCII-compatible UTF-8 files are tokenized correctly.; //; // Ref: msdn.microsoft.com/en-us/library/windows/desktop/aa380599(v=vs.85).aspx; //; //===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.h:432,Integrability,interface,interface,432,"//===-- ResourceScriptToken.h -----------------------------------*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===---------------------------------------------------------------------===//; //; // This declares the .rc script tokens and defines an interface for tokenizing; // the input data. The list of available tokens is located at; // ResourceScriptTokenList.def.; //; // Note that the tokenizer does not support preprocessor directives. The; // preprocessor should do its work on the .rc file before running llvm-rc.; //; // As for now, it is possible to parse ASCII files only (the behavior on; // UTF files might be undefined). However, it already consumes UTF-8 BOM, if; // there is any. Thus, ASCII-compatible UTF-8 files are tokenized correctly.; //; // Ref: msdn.microsoft.com/en-us/library/windows/desktop/aa380599(v=vs.85).aspx; //; //===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.h:302,Safety,safe,safe,302,// A definition of a single resource script token. Each token has its kind; // (declared in ResourceScriptTokenList) and holds a value - a reference; // representation of the token.; // RCToken does not claim ownership on its value. A memory buffer containing; // the token value should be stored in a safe place and cannot be freed; // nor reallocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.h:34,Availability,error,error,34,"// Tokenize Input.; // In case no error occurred, the return value contains; // tokens in order they were in the input file.; // In case of any error, the return value contains; // a textual representation of error.; //; // Tokens returned by this function hold only references to the parts; // of the Input. Memory buffer containing Input cannot be freed,; // modified or reallocated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.h:144,Availability,error,error,144,"// Tokenize Input.; // In case no error occurred, the return value contains; // tokens in order they were in the input file.; // In case of any error, the return value contains; // a textual representation of error.; //; // Tokens returned by this function hold only references to the parts; // of the Input. Memory buffer containing Input cannot be freed,; // modified or reallocated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.h:209,Availability,error,error,209,"// Tokenize Input.; // In case no error occurred, the return value contains; // tokens in order they were in the input file.; // In case of any error, the return value contains; // a textual representation of error.; //; // Tokens returned by this function hold only references to the parts; // of the Input. Memory buffer containing Input cannot be freed,; // modified or reallocated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptToken.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h:25,Availability,error,errors,25,// TODO: Actually report errors helpfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h:390,Availability,recover,recover,390,"/// Iterate through the sections, searching for the relocation section; /// associated with the unwind index table section specified by; /// IndexSectionIndex. Iterate the associated section searching for the; /// relocation associated with the index table entry specified by; /// IndexTableOffset. The symbol is the section symbol for the exception; /// handling table. Use this symbol to recover the actual exception handling; /// table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h:390,Safety,recover,recover,390,"/// Iterate through the sections, searching for the relocation section; /// associated with the unwind index table section specified by; /// IndexSectionIndex. Iterate the associated section searching for the; /// relocation associated with the index table entry specified by; /// IndexTableOffset. The symbol is the section symbol for the exception; /// handling table. Use this symbol to recover the actual exception handling; /// table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h:16,Availability,failure,failure,16,// TODO: handle failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h:214,Integrability,rout,routine,214,/// ARM EHABI Section 6.2 - The generic model; ///; /// An exception-handling table entry for the generic model is laid out as:; ///; /// 3 3; /// 1 0 0; /// +-+------------------------------+; /// |0| personality routine offset |; /// +-+------------------------------+; /// | personality routine data ... |; ///; ///; /// ARM EHABI Section 6.3 - The ARM-defined compact model; ///; /// An exception-handling table entry for the compact model looks like:; ///; /// 3 3 2 2 2 2; /// 1 0 8 7 4 3 0; /// +-+---+----+-----------------------+; /// |1| 0 | Ix | data for pers routine |; /// +-+---+----+-----------------------+; /// | more personality routine data |,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h:290,Integrability,rout,routine,290,/// ARM EHABI Section 6.2 - The generic model; ///; /// An exception-handling table entry for the generic model is laid out as:; ///; /// 3 3; /// 1 0 0; /// +-+------------------------------+; /// |0| personality routine offset |; /// +-+------------------------------+; /// | personality routine data ... |; ///; ///; /// ARM EHABI Section 6.3 - The ARM-defined compact model; ///; /// An exception-handling table entry for the compact model looks like:; ///; /// 3 3 2 2 2 2; /// 1 0 8 7 4 3 0; /// +-+---+----+-----------------------+; /// |1| 0 | Ix | data for pers routine |; /// +-+---+----+-----------------------+; /// | more personality routine data |,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h:571,Integrability,rout,routine,571,/// ARM EHABI Section 6.2 - The generic model; ///; /// An exception-handling table entry for the generic model is laid out as:; ///; /// 3 3; /// 1 0 0; /// +-+------------------------------+; /// |0| personality routine offset |; /// +-+------------------------------+; /// | personality routine data ... |; ///; ///; /// ARM EHABI Section 6.3 - The ARM-defined compact model; ///; /// An exception-handling table entry for the compact model looks like:; ///; /// 3 3 2 2 2 2; /// 1 0 8 7 4 3 0; /// +-+---+----+-----------------------+; /// |1| 0 | Ix | data for pers routine |; /// +-+---+----+-----------------------+; /// | more personality routine data |,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h:647,Integrability,rout,routine,647,/// ARM EHABI Section 6.2 - The generic model; ///; /// An exception-handling table entry for the generic model is laid out as:; ///; /// 3 3; /// 1 0 0; /// +-+------------------------------+; /// |0| personality routine offset |; /// +-+------------------------------+; /// | personality routine data ... |; ///; ///; /// ARM EHABI Section 6.3 - The ARM-defined compact model; ///; /// An exception-handling table entry for the compact model looks like:; ///; /// 3 3 2 2 2 2; /// 1 0 8 7 4 3 0; /// +-+---+----+-----------------------+; /// |1| 0 | Ix | data for pers routine |; /// +-+---+----+-----------------------+; /// | more personality routine data |,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h:16,Availability,failure,failure,16,// TODO: handle failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h:137,Usability,clear,clear,137,"/// ARM EHABI Section 5 - Index Table Entries; /// * The first word contains a PREL31 offset to the start of a function with; /// bit 31 clear; /// * The second word contains one of:; /// - The PREL31 offset of the start of the table entry for the function,; /// with bit 31 clear; /// - The exception-handling table entry itself with bit 31 set; /// - The special bit pattern EXIDX_CANTUNWIND, indicating that associated; /// frames cannot be unwound",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h:275,Usability,clear,clear,275,"/// ARM EHABI Section 5 - Index Table Entries; /// * The first word contains a PREL31 offset to the start of a function with; /// bit 31 clear; /// * The second word contains one of:; /// - The PREL31 offset of the start of the table entry for the function,; /// with bit 31 clear; /// - The exception-handling table entry itself with bit 31 set; /// - The special bit pattern EXIDX_CANTUNWIND, indicating that associated; /// frames cannot be unwound",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h:183,Availability,reliab,reliable,183,"// In a relocatable output we might have many .ARM.exidx sections linked to; // their code sections via the sh_link field. For a non-relocatable ELF file; // the sh_link field is not reliable, because we have one .ARM.exidx section; // normally, but might have many code sections.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h:16,Availability,failure,failure,16,// TODO: handle failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h:16,Availability,failure,failure,16,// TODO: handle failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMEHABIPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp:2764,Integrability,rout,routine,2764," data as it is unnecessary for the; // purposes of validation, with the synthesis being required only by a proper; // unwinder.; //; // For functions that are large or do not match canonical forms, the data is; // split up into two portions, with the actual data residing in the ""exception; // data"" table (.xdata) with a reference to the entry from the ""procedure data""; // (.pdata) entry.; //; // The exception data contains information about the frame setup, all of the; // epilogue scopes (for functions for which there are multiple exit points) and; // the associated exception handler. Additionally, the entry contains byte-code; // describing how to unwind the function (c.f. Decoder::decodeOpcodes).; //; // +---------------------------------------+; // | Function Entry Address |; // +---------------------------------------+; // | Exception Data Entry Address |; // +---------------------------------------+; //; // This layout is parsed by Decoder::dumpUnpackedEntry. Such an entry must; // first resolve the exception data entry address. This structure; // (ExceptionDataRecord) has a variable sized header; // (c.f. ARM::WinEH::HeaderWords) and encodes most of the same information as; // the packed form. However, because this information is insufficient to; // synthesize the unwinding, there are associated unwinding bytecode which make; // up the bulk of the Decoder.; //; // The decoder itself is table-driven, using the first byte to determine the; // opcode and dispatching to the associated printing routine. The bytecode; // itself is a variable length instruction encoding that can fully describe the; // state of the stack and the necessary operations for unwinding to the; // beginning of the frame.; //; // The byte-code maintains a 1-1 instruction mapping, indicating both the width; // of the instruction (Thumb2 instructions are variable length, 16 or 32 bits; // wide) allowing the program to unwind from any point in the prologue, body, or; // epilogue of the function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp:2340,Modifiability,variab,variable,2340," data as it is unnecessary for the; // purposes of validation, with the synthesis being required only by a proper; // unwinder.; //; // For functions that are large or do not match canonical forms, the data is; // split up into two portions, with the actual data residing in the ""exception; // data"" table (.xdata) with a reference to the entry from the ""procedure data""; // (.pdata) entry.; //; // The exception data contains information about the frame setup, all of the; // epilogue scopes (for functions for which there are multiple exit points) and; // the associated exception handler. Additionally, the entry contains byte-code; // describing how to unwind the function (c.f. Decoder::decodeOpcodes).; //; // +---------------------------------------+; // | Function Entry Address |; // +---------------------------------------+; // | Exception Data Entry Address |; // +---------------------------------------+; //; // This layout is parsed by Decoder::dumpUnpackedEntry. Such an entry must; // first resolve the exception data entry address. This structure; // (ExceptionDataRecord) has a variable sized header; // (c.f. ARM::WinEH::HeaderWords) and encodes most of the same information as; // the packed form. However, because this information is insufficient to; // synthesize the unwinding, there are associated unwinding bytecode which make; // up the bulk of the Decoder.; //; // The decoder itself is table-driven, using the first byte to determine the; // opcode and dispatching to the associated printing routine. The bytecode; // itself is a variable length instruction encoding that can fully describe the; // state of the stack and the necessary operations for unwinding to the; // beginning of the frame.; //; // The byte-code maintains a 1-1 instruction mapping, indicating both the width; // of the instruction (Thumb2 instructions are variable length, 16 or 32 bits; // wide) allowing the program to unwind from any point in the prologue, body, or; // epilogue of the function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp:2802,Modifiability,variab,variable,2802," data as it is unnecessary for the; // purposes of validation, with the synthesis being required only by a proper; // unwinder.; //; // For functions that are large or do not match canonical forms, the data is; // split up into two portions, with the actual data residing in the ""exception; // data"" table (.xdata) with a reference to the entry from the ""procedure data""; // (.pdata) entry.; //; // The exception data contains information about the frame setup, all of the; // epilogue scopes (for functions for which there are multiple exit points) and; // the associated exception handler. Additionally, the entry contains byte-code; // describing how to unwind the function (c.f. Decoder::decodeOpcodes).; //; // +---------------------------------------+; // | Function Entry Address |; // +---------------------------------------+; // | Exception Data Entry Address |; // +---------------------------------------+; //; // This layout is parsed by Decoder::dumpUnpackedEntry. Such an entry must; // first resolve the exception data entry address. This structure; // (ExceptionDataRecord) has a variable sized header; // (c.f. ARM::WinEH::HeaderWords) and encodes most of the same information as; // the packed form. However, because this information is insufficient to; // synthesize the unwinding, there are associated unwinding bytecode which make; // up the bulk of the Decoder.; //; // The decoder itself is table-driven, using the first byte to determine the; // opcode and dispatching to the associated printing routine. The bytecode; // itself is a variable length instruction encoding that can fully describe the; // state of the stack and the necessary operations for unwinding to the; // beginning of the frame.; //; // The byte-code maintains a 1-1 instruction mapping, indicating both the width; // of the instruction (Thumb2 instructions are variable length, 16 or 32 bits; // wide) allowing the program to unwind from any point in the prologue, body, or; // epilogue of the function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp:3101,Modifiability,variab,variable,3101," data as it is unnecessary for the; // purposes of validation, with the synthesis being required only by a proper; // unwinder.; //; // For functions that are large or do not match canonical forms, the data is; // split up into two portions, with the actual data residing in the ""exception; // data"" table (.xdata) with a reference to the entry from the ""procedure data""; // (.pdata) entry.; //; // The exception data contains information about the frame setup, all of the; // epilogue scopes (for functions for which there are multiple exit points) and; // the associated exception handler. Additionally, the entry contains byte-code; // describing how to unwind the function (c.f. Decoder::decodeOpcodes).; //; // +---------------------------------------+; // | Function Entry Address |; // +---------------------------------------+; // | Exception Data Entry Address |; // +---------------------------------------+; //; // This layout is parsed by Decoder::dumpUnpackedEntry. Such an entry must; // first resolve the exception data entry address. This structure; // (ExceptionDataRecord) has a variable sized header; // (c.f. ARM::WinEH::HeaderWords) and encodes most of the same information as; // the packed form. However, because this information is insufficient to; // synthesize the unwinding, there are associated unwinding bytecode which make; // up the bulk of the Decoder.; //; // The decoder itself is table-driven, using the first byte to determine the; // opcode and dispatching to the associated printing routine. The bytecode; // itself is a variable length instruction encoding that can fully describe the; // state of the stack and the necessary operations for unwinding to the; // beginning of the frame.; //; // The byte-code maintains a 1-1 instruction mapping, indicating both the width; // of the instruction (Thumb2 instructions are variable length, 16 or 32 bits; // wide) allowing the program to unwind from any point in the prologue, body, or; // epilogue of the function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp:1294,Security,validat,validation,1294,"on; //; //===----------------------------------------------------------------------===//; // Windows on ARM uses a series of serialised data structures (RuntimeFunction); // to create a table of information for unwinding. In order to conserve space,; // there are two different ways that this data is represented.; //; // For functions with canonical forms for the prologue and epilogue, the data; // can be stored in a ""packed"" form. In this case, the data is packed into the; // RuntimeFunction's remaining 30-bits and can fully describe the entire frame.; //; // +---------------------------------------+; // | Function Entry Address |; // +---------------------------------------+; // | Packed Form Data |; // +---------------------------------------+; //; // This layout is parsed by Decoder::dumpPackedEntry. No unwind bytecode is; // associated with such a frame as they can be derived from the provided data.; // The decoder does not synthesize this data as it is unnecessary for the; // purposes of validation, with the synthesis being required only by a proper; // unwinder.; //; // For functions that are large or do not match canonical forms, the data is; // split up into two portions, with the actual data residing in the ""exception; // data"" table (.xdata) with a reference to the entry from the ""procedure data""; // (.pdata) entry.; //; // The exception data contains information about the frame setup, all of the; // epilogue scopes (for functions for which there are multiple exit points) and; // the associated exception handler. Additionally, the entry contains byte-code; // describing how to unwind the function (c.f. Decoder::decodeOpcodes).; //; // +---------------------------------------+; // | Function Entry Address |; // +---------------------------------------+; // | Exception Data Entry Address |; // +---------------------------------------+; //; // This layout is parsed by Decoder::dumpUnpackedEntry. Such an entry must; // first resolve the exception data entry ad",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp:27,Performance,load,load,27,// Encoded stack offset of load/store instruction; decoding varies by mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp:3,Safety,Sanity check,Sanity check,3,"// Sanity check to ensure that the .xdata header is present.; // A header is one or two words, followed by at least one word to describe; // the unwind codes. Applicable to both ARM and AArch64.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp:25,Availability,error,errors,25,// TODO: Actually report errors helpfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp:15,Usability,undo,undocumented,15,"// CR=2 is yet undocumented, see; // https://github.com/MicrosoftDocs/cpp-docs/pull/4202 for upstream; // progress on getting it documented.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ARMWinEHPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp:31,Usability,simpl,simplicity,31,// Forward to CVTypeDumper for simplicity.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp:61,Security,checksum,checksum,61,"/// Given a .debug$S section, find the string table and file checksum table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp:57,Performance,load,load,57,"// Ideally, if D.AddressOfRawData == 0, we should try to load the payload; // using D.PointerToRawData instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp:27,Security,Secur,SecurityCookie,27,// Print everything before SecurityCookie. The vast majority of images today; // have all these fields.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp:13,Safety,safe,safe,13,// Print the safe SEH table if present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp:195,Modifiability,variab,variable,195,"// The FrameFunc string is a small RPN program. It can be broken up into; // statements that end in the '=' operator, which assigns the value on; // the top of the stack to the previously pushed variable. Variables can; // be temporary values ($T0) or physical registers ($esp). Print each; // assignment on its own line to make these programs easier to read.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp:205,Modifiability,Variab,Variables,205,"// The FrameFunc string is a small RPN program. It can be broken up into; // statements that end in the '=' operator, which assigns the value on; // the top of the stack to the previously pushed variable. Variables can; // be temporary values ($T0) or physical registers ($esp). Print each; // assignment on its own line to make these programs easier to read.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp:12,Security,checksum,checksum,12,// The file checksum subsection should precede all references to it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp:21,Security,checksum,checksum,21,// Check if the file checksum table offset is valid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp:22,Availability,error,error,22,// TODO Propagate the error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:27,Availability,error,error,27,/// Owner object. Used for error reporting.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:20,Availability,error,error,20,/// Dumper used for error reporting.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:4,Availability,Error,Error,4,/// Error prefix. Used for error reporting to provide more information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:27,Availability,error,error,27,/// Error prefix. Used for error reporting to provide more information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:31,Availability,error,error,31,/// Region size name. Used for error reporting.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:30,Availability,error,error,30,"/// Entry size name. Used for error reporting. If this field is empty, errors; /// will not mention the entry size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:71,Availability,error,errors,71,"/// Entry size name. Used for error reporting. If this field is empty, errors; /// will not mention the entry size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:42,Energy Efficiency,efficient,efficient,42,"// Hash histogram shows statistics of how efficient the hash was for the; // dynamic symbol table. The table shows the number of hash buckets for; // different lengths of chains as an absolute number and percentage of the; // total buckets, and the cumulative coverage of symbols for each set of; // buckets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:3,Security,Hash,Hash,3,"// Hash histogram shows statistics of how efficient the hash was for the; // dynamic symbol table. The table shows the number of hash buckets for; // different lengths of chains as an absolute number and percentage of the; // total buckets, and the cumulative coverage of symbols for each set of; // buckets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:56,Security,hash,hash,56,"// Hash histogram shows statistics of how efficient the hash was for the; // dynamic symbol table. The table shows the number of hash buckets for; // different lengths of chains as an absolute number and percentage of the; // total buckets, and the cumulative coverage of symbols for each set of; // buckets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:129,Security,hash,hash,129,"// Hash histogram shows statistics of how efficient the hash was for the; // dynamic symbol table. The table shows the number of hash buckets for; // different lengths of chains as an absolute number and percentage of the; // total buckets, and the cumulative coverage of symbols for each set of; // buckets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:28,Testability,log,logical,28,// The st_other field has 2 logical parts. The first two bits hold the symbol; // visibility (STV_*) and the remainder hold other platform-specific values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:38,Performance,load,loaded,38,"// If the VersionMap has already been loaded or if there is no dynamic symtab; // or version table, there is nothing to do.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:3,Availability,Mask,Mask,3,// Mask off all the processor-specific bits. This removes the SHF_EXCLUDE; // bit if set so that it doesn't also get printed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:22,Performance,LOAD,LOAD,22,"// E.g. ""PT_LOAD"" -> ""LOAD"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:76,Security,validat,validated,76,"// Use cantFail(), because p_offset/p_filesz fields of a PT_DYNAMIC are; // validated in findDynamic() and so createDRI() is not expected to fail.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:134,Safety,sanity check,sanity checks,134,"// At this point we have tables found from the section header and from the; // dynamic segment. Usually they match, but we have to do sanity checks to; // verify that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:191,Performance,load,loaders,191,"// Often we find the information about the dynamic symbol table; // location in the SHT_DYNSYM section header. However, the value in; // DT_SYMTAB has priority, because it is used by dynamic loaders to; // locate .dynsym at runtime. The location we find in the section header; // and the location we find here should match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:120,Security,hash,hash,120,"// According to the ELF gABI: ""The number of symbol table entries should; // equal nchain"". Check to see if the DT_HASH hash table nchain value; // conflicts with the number of symbols in the dynamic symbol table; // according to the section header.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:57,Security,hash,hash,57,"// Derive the dynamic symbol table size from the DT_HASH hash table, if; // present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:16,Integrability,depend,dependency,16,// Dump version dependency section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:321,Performance,load,loaders,321,"// A normal empty GNU hash table section produced by linker might have; // symndx set to the number of dynamic symbols + 1 (for the zero symbol); // and have dummy null values in the Bloom filter and in the buckets; // vector (or no values at all). It happens because the value of symndx is not; // important for dynamic loaders when the GNU hash table is empty. They just; // skip the whole object during symbol lookup. In such cases, the symndx value; // is irrelevant and we should not report a warning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:22,Security,hash,hash,22,"// A normal empty GNU hash table section produced by linker might have; // symndx set to the number of dynamic symbols + 1 (for the zero symbol); // and have dummy null values in the Bloom filter and in the buckets; // vector (or no values at all). It happens because the value of symndx is not; // important for dynamic loaders when the GNU hash table is empty. They just; // skip the whole object during symbol lookup. In such cases, the symndx value; // is irrelevant and we should not report a warning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:342,Security,hash,hash,342,"// A normal empty GNU hash table section produced by linker might have; // symndx set to the number of dynamic symbols + 1 (for the zero symbol); // and have dummy null values in the Bloom filter and in the buckets; // vector (or no values at all). It happens because the value of symndx is not; // important for dynamic loaders when the GNU hash table is empty. They just; // skip the whole object during symbol lookup. In such cases, the symndx value; // is irrelevant and we should not report a warning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:28,Security,hash,hash,28,// Print histogram for the .hash section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:32,Security,hash,hash,32,// Print histogram for the .gnu.hash section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:6,Security,hash,hash,6,"// If hash table is correct, we have at least chains with 0 length.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:33,Availability,error,error,33,"// In this case we can ignore an error, because we have already reported a; // warning about the broken section header table earlier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:33,Availability,error,error,33,"// In this case we can ignore an error, because we have already reported a; // warning about the broken section header table earlier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:34,Integrability,depend,dependent,34,// First two fields are bit width dependent. The rest of them are fixed width.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:25,Security,hash,hash,25,// Try printing the .gnu.hash table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:86,Safety,avoid,avoid,86,// FIXME: Metadata Verifier only works with AMDHSA.; // This is an ugly workaround to avoid the verifier for other MD; // formats (e.g. amdpal),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:57,Modifiability,Polymorphi,PolymorphicTraits,57,"// TODO: passing a scalar root to toYAML() asserts:; // (PolymorphicTraits<T>::getKind(Val) != NodeKind::Scalar &&; // ""plain scalar documents are not supported""); // To avoid this crash we print the raw data instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:170,Safety,avoid,avoid,170,"// TODO: passing a scalar root to toYAML() asserts:; // (PolymorphicTraits<T>::getKind(Val) != NodeKind::Scalar &&; // ""plain scalar documents are not supported""); // To avoid this crash we print the raw data instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:43,Testability,assert,asserts,43,"// TODO: passing a scalar root to toYAML() asserts:; // (PolymorphicTraits<T>::getKind(Val) != NodeKind::Scalar &&; // ""plain scalar documents are not supported""); // To avoid this crash we print the raw data instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:42,Availability,error,error,42,"// Note: it is impossible to trigger this error currently, it is; // untested.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/llvm-readobj.cpp:707,Usability,learn,learn,707,"//===- llvm-readobj.cpp - Dump contents of an Object File -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a tool similar to readelf, except it works on multiple object file; // formats. The main purpose of this tool is to provide detailed output suitable; // for FileCheck.; //; // Flags should be similar to readelf where supported, but the output format; // does not need to be identical. The point is to not make users learn yet; // another set of flags.; //; // Output should be specialized for each format where appropriate.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/llvm-readobj.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/llvm-readobj.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/llvm-readobj.cpp:42,Availability,error,error,42,// Flush the standard output to print the error at a; // proper place.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/llvm-readobj.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/llvm-readobj.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/llvm-readobj.cpp:20,Availability,error,error,20,// Default to print error if no filename is specified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/llvm-readobj.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/llvm-readobj.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/MachODumper.cpp:165,Availability,error,error,165,// Don't ask a Mach-O STABS symbol for its section unless we know that; // STAB symbol's section field refers to a valid section index. Otherwise; // the symbol may error trying to load a section that does not exist.; // TODO: Add a whitelist of STABS symbol types that contain valid section; // indices.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/MachODumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/MachODumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/MachODumper.cpp:181,Performance,load,load,181,// Don't ask a Mach-O STABS symbol for its section unless we know that; // STAB symbol's section field refers to a valid section index. Otherwise; // the symbol may error trying to load a section that does not exist.; // TODO: Add a whitelist of STABS symbol types that contain valid section; // indices.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/MachODumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/MachODumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ObjDumper.cpp:35,Availability,error,errors,35,// Dumper reports all non-critical errors as warnings.; // It does not print the same warning more than once.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/ObjDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ObjDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/Win64EHDumper.cpp:25,Availability,error,errors,25,// TODO: Actually report errors helpfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/Win64EHDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/Win64EHDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/XCOFFDumper.cpp:153,Testability,test,tests,153,"// This handling of the time stamp assumes that the host system's time_t is; // compatible with AIX time_t. If a platform is not compatible, the lit; // tests will let us know.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/XCOFFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/XCOFFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/XCOFFDumper.cpp:73,Performance,Load,LoaderSecRelEnt,73,"// Because there are implicit symbol index values (-2, -1, 0, 1, 2),; // LoaderSecRelEnt.SymbolIndex - FirstSymIdxOfLoaderSec will get the; // real symbol from the symbol table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/XCOFFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/XCOFFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/XCOFFDumper.cpp:30,Performance,load,loader,30,"// TODO The interpretation of loader, exception and type check section; // headers are different from that of generic section headers. We will; // implement them later. We interpret them as generic section headers for; // now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readobj/XCOFFDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/XCOFFDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/DiffEngine.cpp:95,Deployability,install,install,95,// Iterate through inline frameworks/libraries from interface file and find; // match based on install name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readtapi/DiffEngine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/DiffEngine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/DiffEngine.cpp:52,Integrability,interface,interface,52,// Iterate through inline frameworks/libraries from interface file and find; // match based on install name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readtapi/DiffEngine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/DiffEngine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/DiffEngine.h:407,Integrability,interface,interface,407,"//===-- DiffEngine.h - File comparator --------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header defines the interface to the llvm-tapi difference engine,; // which structurally compares two tbd files.; //; //===----------------------------------------------------------------------===/",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readtapi/DiffEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/DiffEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/DiffEngine.h:4,Integrability,Interface,InterfaceInputOrder,4,/// InterfaceInputOrder determines from which file the diff attribute belongs; /// to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readtapi/DiffEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/DiffEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/DiffEngine.h:4,Deployability,Install,Install,4,/// Install name of the framework/library.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readtapi/DiffEngine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/DiffEngine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/llvm-readtapi.cpp:41,Availability,failure,failures,41,// Use unique exit code to differentiate failures not directly caused from; // TextAPI operations. This is used for wrapping `compare` operations in; // automation and scripting.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readtapi/llvm-readtapi.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/llvm-readtapi.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/llvm-readtapi.cpp:116,Integrability,wrap,wrapping,116,// Use unique exit code to differentiate failures not directly caused from; // TextAPI operations. This is used for wrapping `compare` operations in; // automation and scripting.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readtapi/llvm-readtapi.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/llvm-readtapi.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/llvm-readtapi.cpp:34,Availability,error,error,34,// anonymous namespace; // Handle error reporting in cases where `ExitOnError` is not used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-readtapi/llvm-readtapi.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readtapi/llvm-readtapi.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/DeltaManager.cpp:47,Energy Efficiency,reduce,reduce,47,"//===- DeltaManager.cpp - Runs Delta Passes to reduce Input ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file calls each specialized Delta pass in order to reduce the input IR; // file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/DeltaManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/DeltaManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/DeltaManager.cpp:439,Energy Efficiency,reduce,reduce,439,"//===- DeltaManager.cpp - Runs Delta Passes to reduce Input ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file calls each specialized Delta pass in order to reduce the input IR; // file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/DeltaManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/DeltaManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/DeltaManager.cpp:18,Availability,error,errored,18,// We should have errored on unrecognized passes before trying to run; // anything.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/DeltaManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/DeltaManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/DeltaManager.cpp:18,Availability,avail,available,18,// Built a set of available delta passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/DeltaManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/DeltaManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/DeltaManager.h:45,Energy Efficiency,reduce,reduce,45,"//===- DeltaManager.h - Runs Delta Passes to reduce Input -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file calls each specialized Delta pass in order to reduce the input IR; // file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/DeltaManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/DeltaManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/DeltaManager.h:439,Energy Efficiency,reduce,reduce,439,"//===- DeltaManager.h - Runs Delta Passes to reduce Input -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file calls each specialized Delta pass in order to reduce the input IR; // file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/DeltaManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/DeltaManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp:677,Deployability,integrat,integrated,677,"//===- llvm-reduce.cpp - The LLVM Delta Reduction utility -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program tries to reduce an IR test case for a given interesting-ness; // test. It runs multiple delta debugging passes in order to minimize the input; // file. It's worth noting that this is a part of the bugpoint redesign; // proposal, and thus a *temporary* tool that will eventually be integrated; // into the bugpoint tool itself.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp:12,Energy Efficiency,reduce,reduce,12,"//===- llvm-reduce.cpp - The LLVM Delta Reduction utility -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program tries to reduce an IR test case for a given interesting-ness; // test. It runs multiple delta debugging passes in order to minimize the input; // file. It's worth noting that this is a part of the bugpoint redesign; // proposal, and thus a *temporary* tool that will eventually be integrated; // into the bugpoint tool itself.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp:405,Energy Efficiency,reduce,reduce,405,"//===- llvm-reduce.cpp - The LLVM Delta Reduction utility -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program tries to reduce an IR test case for a given interesting-ness; // test. It runs multiple delta debugging passes in order to minimize the input; // file. It's worth noting that this is a part of the bugpoint redesign; // proposal, and thus a *temporary* tool that will eventually be integrated; // into the bugpoint tool itself.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp:677,Integrability,integrat,integrated,677,"//===- llvm-reduce.cpp - The LLVM Delta Reduction utility -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program tries to reduce an IR test case for a given interesting-ness; // test. It runs multiple delta debugging passes in order to minimize the input; // file. It's worth noting that this is a part of the bugpoint redesign; // proposal, and thus a *temporary* tool that will eventually be integrated; // into the bugpoint tool itself.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp:418,Testability,test,test,418,"//===- llvm-reduce.cpp - The LLVM Delta Reduction utility -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program tries to reduce an IR test case for a given interesting-ness; // test. It runs multiple delta debugging passes in order to minimize the input; // file. It's worth noting that this is a part of the bugpoint redesign; // proposal, and thus a *temporary* tool that will eventually be integrated; // into the bugpoint tool itself.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp:461,Testability,test,test,461,"//===- llvm-reduce.cpp - The LLVM Delta Reduction utility -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program tries to reduce an IR test case for a given interesting-ness; // test. It runs multiple delta debugging passes in order to minimize the input; // file. It's worth noting that this is a part of the bugpoint redesign; // proposal, and thus a *temporary* tool that will eventually be integrated; // into the bugpoint tool itself.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp:113,Energy Efficiency,reduce,reduce,113,"/// Turn off crash debugging features; ///; /// Crash is expected, so disable crash reports and symbolization to reduce; /// output clutter and avoid potentially slow symbolization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp:144,Safety,avoid,avoid,144,"/// Turn off crash debugging features; ///; /// Crash is expected, so disable crash reports and symbolization to reduce; /// output clutter and avoid potentially slow symbolization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp:40,Integrability,wrap,wrapper,40,// TODO: Copied from not. Should have a wrapper around setenv.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp:36,Testability,test,tests,36,"// RemoveDIs debug-info transition: tests may request that we /try/ to use the; // new debug-info format, if it's built in.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp:14,Testability,test,test,14,// Initialize test environment,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp:34,Testability,test,testcase,34,"// This parses and writes out the testcase into a temporary file copy for the; // test, rather than evaluating the source IR directly. This is for the; // convenience of lit tests; the stripped out comments may have broken the; // interestingness checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp:82,Testability,test,test,82,"// This parses and writes out the testcase into a temporary file copy for the; // test, rather than evaluating the source IR directly. This is for the; // convenience of lit tests; the stripped out comments may have broken the; // interestingness checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp:174,Testability,test,tests,174,"// This parses and writes out the testcase into a temporary file copy for the; // test, rather than evaluating the source IR directly. This is for the; // convenience of lit tests; the stripped out comments may have broken the; // interestingness checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp:10,Energy Efficiency,reduce,reduce,10,// Try to reduce code,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp:9,Energy Efficiency,reduce,reduced,9,// Print reduced file to STDOUT,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp:7,Energy Efficiency,Reduce,ReducerWorkItem,7,"//===- ReducerWorkItem.cpp - Wrapper for Module and MachineFunction -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp:29,Integrability,Wrap,Wrapper,29,"//===- ReducerWorkItem.cpp - Wrapper for Module and MachineFunction -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp:16,Testability,test,test,16,"// FIXME: Needs test, missing MIR serialization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp:29,Integrability,interface,interface,29,// FIXME: We have no generic interface for allocating custom PSVs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp:3,Deployability,Update,Update,3,// Update MBB.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp:2,Safety,Abort,AbortOnError,2,/*AbortOnError=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp:2,Safety,Abort,AbortOnError,2,/*AbortOnError=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp:9,Energy Efficiency,Reduce,ReducerWorkItem,9,// Write ReducerWorkItem to tmp file,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp:83,Usability,simpl,simpler,83,/// Try to produce some number that indicates a function is getting smaller /; /// simpler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp:10,Energy Efficiency,Reduce,ReduceOperandsSkip,10,"// FIXME: ReduceOperandsSkip has similar function, except it uses larger numbers; // for more reduced.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp:94,Energy Efficiency,reduce,reduced,94,"// FIXME: ReduceOperandsSkip has similar function, except it uses larger numbers; // for more reduced.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.h:7,Energy Efficiency,Reduce,ReducerWorkItem,7,"//===- ReducerWorkItem.h - Wrapper for Module -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.h:27,Integrability,Wrap,Wrapper,27,"//===- ReducerWorkItem.h - Wrapper for Module -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/ReducerWorkItem.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.cpp:8,Testability,Test,TestRunner,8,"//===-- TestRunner.cpp ----------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.cpp:29,Testability,test,test,29,"/// Runs the interestingness test, passes file to be tested as first argument; /// and other specified test arguments after that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.cpp:53,Testability,test,tested,53,"/// Runs the interestingness test, passes file to be tested as first argument; /// and other specified test arguments after that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.cpp:103,Testability,test,test,103,"/// Runs the interestingness test, passes file to be tested as first argument; /// and other specified test arguments after that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h:19,Energy Efficiency,reduce,reduce,19,"//===-- tools/llvm-reduce/TestRunner.h ---------------------------*- C++ -*-===/; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h:26,Testability,Test,TestRunner,26,"//===-- tools/llvm-reduce/TestRunner.h ---------------------------*- C++ -*-===/; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h:118,Energy Efficiency,reduce,reduced,118,"// This class contains all the info necessary for running the provided; // interesting-ness test, as well as the most reduced module and its; // respective filename.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h:92,Testability,test,test,92,"// This class contains all the info necessary for running the provided; // interesting-ness test, as well as the most reduced module and its; // respective filename.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h:30,Testability,test,test,30,"/// Runs the interesting-ness test for the specified file; /// @returns 0 if test was successful, 1 if otherwise",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h:77,Testability,test,test,77,"/// Runs the interesting-ness test for the specified file; /// @returns 0 if test was successful, 1 if otherwise",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h:21,Energy Efficiency,reduce,reduced,21,/// Returns the most reduced version of the original testcase,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h:53,Testability,test,testcase,53,/// Returns the most reduced version of the original testcase,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp:564,Energy Efficiency,reduce,reduce,564,"//===- Delta.cpp - Delta Debugging Algorithm Implementation ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the implementation for the Delta Debugging Algorithm:; // it splits a given set of Targets (i.e. Functions, Instructions, BBs, etc.); // into chunks and tries to reduce the number chunks that are interesting.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp:22,Energy Efficiency,reduce,reduced,22,"// Program became non-reduced, so this chunk appears to be interesting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp:29,Energy Efficiency,reduce,reduced,29,// Communicate that the task reduced a chunk.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp:77,Energy Efficiency,reduce,reduces,77,"/// Runs the Delta Debugging algorithm, splits the code into chunks and; /// reduces the amount of chunks that are considered interesting by the; /// given test. The number of chunks is determined by a preliminary run of the; /// reduction pass where no change must be made to the module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp:156,Testability,test,test,156,"/// Runs the Delta Debugging algorithm, splits the code into chunks and; /// reduces the amount of chunks that are considered interesting by the; /// given test. The number of chunks is determined by a preliminary run of the; /// reduction pass where no change must be made to the module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp:61,Energy Efficiency,reduce,reduce,61,// Make sure that the number of chunks does not change as we reduce.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp:311,Energy Efficiency,reduce,reduces,311,"// Queue jobs to process NumInitialTasks chunks in parallel using; // ChunkThreadPool. When the tasks are added to the pool, parse the; // original module from OriginalBC with a fresh LLVMContext object. This; // ensures that the cloned module of each task uses an independent; // LLVMContext object. If a task reduces the input, serialize the result; // back in the corresponding Result element.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp:3,Performance,Queue,Queue,3,"// Queue jobs to process NumInitialTasks chunks in parallel using; // ChunkThreadPool. When the tasks are added to the pool, parse the; // original module from OriginalBC with a fresh LLVMContext object. This; // ensures that the cloned module of each task uses an independent; // LLVMContext object. If a task reduces the input, serialize the result; // back in the corresponding Result element.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp:110,Energy Efficiency,reduce,reduced,110,"// Start processing results of the queued tasks. We wait for the first; // task in the queue to finish. If it reduced a chunk, we parse the; // result and exit the loop.; // Otherwise we will try to schedule a new task, if; // * no other pending job reduced a chunk and; // * we have not reached the end of the chunk.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp:199,Energy Efficiency,schedul,schedule,199,"// Start processing results of the queued tasks. We wait for the first; // task in the queue to finish. If it reduced a chunk, we parse the; // result and exit the loop.; // Otherwise we will try to schedule a new task, if; // * no other pending job reduced a chunk and; // * we have not reached the end of the chunk.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp:250,Energy Efficiency,reduce,reduced,250,"// Start processing results of the queued tasks. We wait for the first; // task in the queue to finish. If it reduced a chunk, we parse the; // result and exit the loop.; // Otherwise we will try to schedule a new task, if; // * no other pending job reduced a chunk and; // * we have not reached the end of the chunk.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp:35,Performance,queue,queued,35,"// Start processing results of the queued tasks. We wait for the first; // task in the queue to finish. If it reduced a chunk, we parse the; // result and exit the loop.; // Otherwise we will try to schedule a new task, if; // * no other pending job reduced a chunk and; // * we have not reached the end of the chunk.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp:87,Performance,queue,queue,87,"// Start processing results of the queued tasks. We wait for the first; // task in the queue to finish. If it reduced a chunk, we parse the; // result and exit the loop.; // Otherwise we will try to schedule a new task, if; // * no other pending job reduced a chunk and; // * we have not reached the end of the chunk.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp:76,Safety,avoid,avoid,76,"// If we broke out of the loop, we still need to wait for everything to; // avoid race access to the chunk set.; //; // TODO: Create a way to kill remaining items we're ignoring; they could; // take a long time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp:87,Security,access,access,87,"// If we broke out of the loop, we still need to wait for everything to; // avoid race access to the chunk set.; //; // TODO: Create a way to kill remaining items we're ignoring; they could; // take a long time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp:9,Energy Efficiency,reduce,reduced,9,// If we reduced the testcase replace it,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp:21,Testability,test,testcase,21,// If we reduced the testcase replace it,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h:564,Energy Efficiency,reduce,reduce,564,"//===- Delta.h - Delta Debugging Algorithm Implementation -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the implementation for the Delta Debugging Algorithm:; // it splits a given set of Targets (i.e. Functions, Instructions, BBs, etc.); // into chunks and tries to reduce the number chunks that are interesting.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h:20,Integrability,interface,interface,20,/// Provides opaque interface for querying into ChunksToKeep without having to; /// actually understand what is going on.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h:763,Energy Efficiency,reduce,reduced,763,"/// This function implements the Delta Debugging algorithm, it receives a; /// number of Targets (e.g. Functions, Instructions, Basic Blocks, etc.) and; /// splits them in half; these chunks of targets are then tested while ignoring; /// one chunk, if a chunk is proven to be uninteresting (i.e. fails the test); /// it is removed from consideration. The algorithm will attempt to split the; /// Chunks in half and start the process again until it can't split chunks; /// anymore.; ///; /// This function is intended to be called by each specialized delta pass (e.g.; /// RemoveFunctions) and receives three key parameters:; /// * Test: The main TestRunner instance which is used to run the provided; /// interesting-ness test, as well as to store and access the reduced Program.; /// * ExtractChunksFromModule: A function used to tailor the main program so it; /// only contains Targets that are inside Chunks of the given iteration.; /// Note: This function is implemented by each specialized Delta pass; ///; /// Other implementations of the Delta Debugging algorithm can also be found in; /// the CReduce, Delta, and Lithium projects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h:752,Security,access,access,752,"/// This function implements the Delta Debugging algorithm, it receives a; /// number of Targets (e.g. Functions, Instructions, Basic Blocks, etc.) and; /// splits them in half; these chunks of targets are then tested while ignoring; /// one chunk, if a chunk is proven to be uninteresting (i.e. fails the test); /// it is removed from consideration. The algorithm will attempt to split the; /// Chunks in half and start the process again until it can't split chunks; /// anymore.; ///; /// This function is intended to be called by each specialized delta pass (e.g.; /// RemoveFunctions) and receives three key parameters:; /// * Test: The main TestRunner instance which is used to run the provided; /// interesting-ness test, as well as to store and access the reduced Program.; /// * ExtractChunksFromModule: A function used to tailor the main program so it; /// only contains Targets that are inside Chunks of the given iteration.; /// Note: This function is implemented by each specialized Delta pass; ///; /// Other implementations of the Delta Debugging algorithm can also be found in; /// the CReduce, Delta, and Lithium projects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h:211,Testability,test,tested,211,"/// This function implements the Delta Debugging algorithm, it receives a; /// number of Targets (e.g. Functions, Instructions, Basic Blocks, etc.) and; /// splits them in half; these chunks of targets are then tested while ignoring; /// one chunk, if a chunk is proven to be uninteresting (i.e. fails the test); /// it is removed from consideration. The algorithm will attempt to split the; /// Chunks in half and start the process again until it can't split chunks; /// anymore.; ///; /// This function is intended to be called by each specialized delta pass (e.g.; /// RemoveFunctions) and receives three key parameters:; /// * Test: The main TestRunner instance which is used to run the provided; /// interesting-ness test, as well as to store and access the reduced Program.; /// * ExtractChunksFromModule: A function used to tailor the main program so it; /// only contains Targets that are inside Chunks of the given iteration.; /// Note: This function is implemented by each specialized Delta pass; ///; /// Other implementations of the Delta Debugging algorithm can also be found in; /// the CReduce, Delta, and Lithium projects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h:306,Testability,test,test,306,"/// This function implements the Delta Debugging algorithm, it receives a; /// number of Targets (e.g. Functions, Instructions, Basic Blocks, etc.) and; /// splits them in half; these chunks of targets are then tested while ignoring; /// one chunk, if a chunk is proven to be uninteresting (i.e. fails the test); /// it is removed from consideration. The algorithm will attempt to split the; /// Chunks in half and start the process again until it can't split chunks; /// anymore.; ///; /// This function is intended to be called by each specialized delta pass (e.g.; /// RemoveFunctions) and receives three key parameters:; /// * Test: The main TestRunner instance which is used to run the provided; /// interesting-ness test, as well as to store and access the reduced Program.; /// * ExtractChunksFromModule: A function used to tailor the main program so it; /// only contains Targets that are inside Chunks of the given iteration.; /// Note: This function is implemented by each specialized Delta pass; ///; /// Other implementations of the Delta Debugging algorithm can also be found in; /// the CReduce, Delta, and Lithium projects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h:631,Testability,Test,Test,631,"/// This function implements the Delta Debugging algorithm, it receives a; /// number of Targets (e.g. Functions, Instructions, Basic Blocks, etc.) and; /// splits them in half; these chunks of targets are then tested while ignoring; /// one chunk, if a chunk is proven to be uninteresting (i.e. fails the test); /// it is removed from consideration. The algorithm will attempt to split the; /// Chunks in half and start the process again until it can't split chunks; /// anymore.; ///; /// This function is intended to be called by each specialized delta pass (e.g.; /// RemoveFunctions) and receives three key parameters:; /// * Test: The main TestRunner instance which is used to run the provided; /// interesting-ness test, as well as to store and access the reduced Program.; /// * ExtractChunksFromModule: A function used to tailor the main program so it; /// only contains Targets that are inside Chunks of the given iteration.; /// Note: This function is implemented by each specialized Delta pass; ///; /// Other implementations of the Delta Debugging algorithm can also be found in; /// the CReduce, Delta, and Lithium projects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h:646,Testability,Test,TestRunner,646,"/// This function implements the Delta Debugging algorithm, it receives a; /// number of Targets (e.g. Functions, Instructions, Basic Blocks, etc.) and; /// splits them in half; these chunks of targets are then tested while ignoring; /// one chunk, if a chunk is proven to be uninteresting (i.e. fails the test); /// it is removed from consideration. The algorithm will attempt to split the; /// Chunks in half and start the process again until it can't split chunks; /// anymore.; ///; /// This function is intended to be called by each specialized delta pass (e.g.; /// RemoveFunctions) and receives three key parameters:; /// * Test: The main TestRunner instance which is used to run the provided; /// interesting-ness test, as well as to store and access the reduced Program.; /// * ExtractChunksFromModule: A function used to tailor the main program so it; /// only contains Targets that are inside Chunks of the given iteration.; /// Note: This function is implemented by each specialized Delta pass; ///; /// Other implementations of the Delta Debugging algorithm can also be found in; /// the CReduce, Delta, and Lithium projects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h:722,Testability,test,test,722,"/// This function implements the Delta Debugging algorithm, it receives a; /// number of Targets (e.g. Functions, Instructions, Basic Blocks, etc.) and; /// splits them in half; these chunks of targets are then tested while ignoring; /// one chunk, if a chunk is proven to be uninteresting (i.e. fails the test); /// it is removed from consideration. The algorithm will attempt to split the; /// Chunks in half and start the process again until it can't split chunks; /// anymore.; ///; /// This function is intended to be called by each specialized delta pass (e.g.; /// RemoveFunctions) and receives three key parameters:; /// * Test: The main TestRunner instance which is used to run the provided; /// interesting-ness test, as well as to store and access the reduced Program.; /// * ExtractChunksFromModule: A function used to tailor the main program so it; /// only contains Targets that are inside Chunks of the given iteration.; /// Note: This function is implemented by each specialized Delta pass; ///; /// Other implementations of the Delta Debugging algorithm can also be found in; /// the CReduce, Delta, and Lithium projects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Delta.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp:7,Energy Efficiency,Reduce,ReduceAliases,7,"//===- ReduceAliases.cpp - Specialized Delta Pass -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce aliases in the provided Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceAliases.cpp - Specialized Delta Pass -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce aliases in the provided Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAliases.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAliases.h:7,Energy Efficiency,Reduce,ReduceAliases,7,"//===- ReduceAliases.h - Specialized Delta Pass -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce aliases in the provided Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAliases.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAliases.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAliases.h:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceAliases.h - Specialized Delta Pass -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce aliases in the provided Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAliases.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAliases.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceArguments.cpp:7,Energy Efficiency,Reduce,ReduceArguments,7,"//===- ReduceArguments.cpp - Specialized Delta Pass -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting Arguments from declared and defined functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceArguments.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceArguments.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceArguments.cpp:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceArguments.cpp - Specialized Delta Pass -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting Arguments from declared and defined functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceArguments.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceArguments.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceArguments.cpp:19,Energy Efficiency,reduce,reduce,19,// No arguments to reduce,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceArguments.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceArguments.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceArguments.h:7,Energy Efficiency,Reduce,ReduceArguments,7,"//===- ReduceArguments.h - Specialized Delta Pass ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting Arguments from defined functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceArguments.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceArguments.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceArguments.h:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceArguments.h - Specialized Delta Pass ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting Arguments from defined functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceArguments.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceArguments.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp:7,Energy Efficiency,Reduce,ReduceAttributes,7,"//===- ReduceAttributes.cpp - Specialized Delta Pass ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting attributes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceAttributes.cpp - Specialized Delta Pass ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting attributes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp:48,Modifiability,variab,variables,48,"/// Given ChunksToKeep, produce a map of global variables/functions/calls; /// and indexes of attributes to be preserved for each of them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp:10,Modifiability,variab,variables,10,// Global variables only have one attribute set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.h:7,Energy Efficiency,Reduce,ReduceAttributes,7,"//===- ReduceAttributes.h - Specialized Delta Pass --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting attributes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.h:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceAttributes.h - Specialized Delta Pass --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting attributes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceAttributes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp:7,Energy Efficiency,Reduce,ReduceBasicBlocks,7,"//===- ReduceBasicBlocks.cpp - Specialized Delta Pass ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting BasicBlocks from defined functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceBasicBlocks.cpp - Specialized Delta Pass ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting BasicBlocks from defined functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp:83,Safety,avoid,avoid,83,"// If the selected successor is the landing pad, clear the chunk; // successors to avoid creating a regular branch to the landing pad which; // would result in invalid IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp:49,Usability,clear,clear,49,"// If the selected successor is the landing pad, clear the chunk; // successors to avoid creating a regular branch to the landing pad which; // would result in invalid IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp:77,Safety,avoid,avoid,77,"// Skip any function with unreachable blocks. It's somewhat difficult to; // avoid producing invalid IR without deleting them.; //; // We also do not want to unconditionally delete them, as doing so would; // break the invariant of changing the number of chunks during counting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h:7,Energy Efficiency,Reduce,ReduceArguments,7,"//===- ReduceArguments.h - Specialized Delta Pass ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting BasicBlocks from defined functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceArguments.h - Specialized Delta Pass ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting BasicBlocks from defined functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceBasicBlocks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDIMetadata.cpp:7,Energy Efficiency,Reduce,ReduceDIMetadata,7,"//===- ReduceDIMetadata.cpp - Specialized Delta pass for DebugInfo --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements two functions used by the Generic Delta Debugging; // Algorithm, which are used to reduce DebugInfo metadata nodes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDIMetadata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDIMetadata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDIMetadata.cpp:487,Energy Efficiency,reduce,reduce,487,"//===- ReduceDIMetadata.cpp - Specialized Delta pass for DebugInfo --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements two functions used by the Generic Delta Debugging; // Algorithm, which are used to reduce DebugInfo metadata nodes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDIMetadata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDIMetadata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDIMetadata.h:7,Energy Efficiency,Reduce,ReduceMetadata,7,"//===- ReduceMetadata.h - Specialized Delta Pass --------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements two functions used by the Generic Delta Debugging; // Algorithm, which are used to reduce Metadata nodes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDIMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDIMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDIMetadata.h:487,Energy Efficiency,reduce,reduce,487,"//===- ReduceMetadata.h - Specialized Delta Pass --------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements two functions used by the Generic Delta Debugging; // Algorithm, which are used to reduce Metadata nodes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDIMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDIMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDPValues.cpp:7,Energy Efficiency,Reduce,ReduceDPValues,7,"//===- ReduceDPValues.cpp - Specialized Delta Pass ------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting DPValues from defined functions.; //; // DPValues store variable-location debug-info and are attached to instructions.; // This information used to be represented by intrinsics such as dbg.value, and; // would naturally get reduced by llvm-reduce like any other instruction. As; // DPValues get stored elsewhere, they need to be enumerated and eliminated like; // any other data structure in LLVM.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDPValues.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDPValues.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDPValues.cpp:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceDPValues.cpp - Specialized Delta Pass ------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting DPValues from defined functions.; //; // DPValues store variable-location debug-info and are attached to instructions.; // This information used to be represented by intrinsics such as dbg.value, and; // would naturally get reduced by llvm-reduce like any other instruction. As; // DPValues get stored elsewhere, they need to be enumerated and eliminated like; // any other data structure in LLVM.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDPValues.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDPValues.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDPValues.cpp:711,Energy Efficiency,reduce,reduced,711,"//===- ReduceDPValues.cpp - Specialized Delta Pass ------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting DPValues from defined functions.; //; // DPValues store variable-location debug-info and are attached to instructions.; // This information used to be represented by intrinsics such as dbg.value, and; // would naturally get reduced by llvm-reduce like any other instruction. As; // DPValues get stored elsewhere, they need to be enumerated and eliminated like; // any other data structure in LLVM.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDPValues.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDPValues.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDPValues.cpp:727,Energy Efficiency,reduce,reduce,727,"//===- ReduceDPValues.cpp - Specialized Delta Pass ------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting DPValues from defined functions.; //; // DPValues store variable-location debug-info and are attached to instructions.; // This information used to be represented by intrinsics such as dbg.value, and; // would naturally get reduced by llvm-reduce like any other instruction. As; // DPValues get stored elsewhere, they need to be enumerated and eliminated like; // any other data structure in LLVM.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDPValues.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDPValues.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDPValues.cpp:543,Modifiability,variab,variable-location,543,"//===- ReduceDPValues.cpp - Specialized Delta Pass ------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting DPValues from defined functions.; //; // DPValues store variable-location debug-info and are attached to instructions.; // This information used to be represented by intrinsics such as dbg.value, and; // would naturally get reduced by llvm-reduce like any other instruction. As; // DPValues get stored elsewhere, they need to be enumerated and eliminated like; // any other data structure in LLVM.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDPValues.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDPValues.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDPValues.h:7,Energy Efficiency,Reduce,ReduceDPValues,7,"//===- ReduceDPValues.h -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting DPValues from defined functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDPValues.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDPValues.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDPValues.h:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceDPValues.h -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting DPValues from defined functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDPValues.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceDPValues.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp:7,Energy Efficiency,Reduce,ReduceFunctions,7,"//===- ReduceFunctions.cpp - Specialized Delta Pass -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce function bodies in the provided Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceFunctions.cpp - Specialized Delta Pass -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce function bodies in the provided Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h:7,Energy Efficiency,Reduce,ReduceFunctionBodies,7,"//===- ReduceFunctionBodies.h - Specialized Delta Pass ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce function bodies in the provided Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceFunctionBodies.h - Specialized Delta Pass ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce function bodies in the provided Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctionBodies.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp:7,Energy Efficiency,Reduce,ReduceFunctions,7,"//===- ReduceFunctions.cpp - Specialized Delta Pass -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce functions (and any instruction that calls it) in the provided; // Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceFunctions.cpp - Specialized Delta Pass -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce functions (and any instruction that calls it) in the provided; // Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp:64,Energy Efficiency,reduce,reduce,64,"// Intrinsics don't have function bodies that are useful to; // reduce. Additionally, intrinsics may have additional operand; // constraints. But, do drop intrinsics that are not referenced.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctions.h:7,Energy Efficiency,Reduce,ReduceFunctions,7,"//===- ReduceFunctions.h - Specialized Delta Pass ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce functions (and any instruction that calls it) in the provided; // Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctions.h:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceFunctions.h - Specialized Delta Pass ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce functions (and any instruction that calls it) in the provided; // Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceFunctions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp:7,Energy Efficiency,Reduce,ReduceGlobalObjects,7,"//===- ReduceGlobalObjects.cpp --------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h:7,Energy Efficiency,Reduce,ReduceGlobalObjects,7,"//===- ReduceGlobalObjects.h ------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalObjects.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp:7,Energy Efficiency,Reduce,ReduceGlobalValues,7,"//===- ReduceGlobalValues.cpp - Specialized Delta Pass --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass to reduce; // global value attributes/specifiers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp:453,Energy Efficiency,reduce,reduce,453,"//===- ReduceGlobalValues.cpp - Specialized Delta Pass --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass to reduce; // global value attributes/specifiers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h:7,Energy Efficiency,Reduce,ReduceGlobalValues,7,"//===- ReduceGlobalValues.h - Specialized Delta Pass ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass to reduce; // global value attributes/specifiers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h:453,Energy Efficiency,reduce,reduce,453,"//===- ReduceGlobalValues.h - Specialized Delta Pass ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass to reduce; // global value attributes/specifiers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalValues.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp:7,Energy Efficiency,Reduce,ReduceGlobalVars,7,"//===- ReduceGlobalVars.cpp - Specialized Delta Pass ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce initializers of Global Variables in the provided Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceGlobalVars.cpp - Specialized Delta Pass ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce initializers of Global Variables in the provided Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp:496,Modifiability,Variab,Variables,496,"//===- ReduceGlobalVars.cpp - Specialized Delta Pass ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce initializers of Global Variables in the provided Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h:7,Energy Efficiency,Reduce,ReduceGlobalVarInitializers,7,"//===- ReduceGlobalVarInitializers.h ----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce initializers of Global Variables in the provided Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceGlobalVarInitializers.h ----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce initializers of Global Variables in the provided Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h:496,Modifiability,Variab,Variables,496,"//===- ReduceGlobalVarInitializers.h ----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce initializers of Global Variables in the provided Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVarInitializers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp:7,Energy Efficiency,Reduce,ReduceGlobalVars,7,"//===- ReduceGlobalVars.cpp - Specialized Delta Pass ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce Global Variables in the provided Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceGlobalVars.cpp - Specialized Delta Pass ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce Global Variables in the provided Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp:480,Modifiability,Variab,Variables,480,"//===- ReduceGlobalVars.cpp - Specialized Delta Pass ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce Global Variables in the provided Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h:7,Energy Efficiency,Reduce,ReduceGlobalVars,7,"//===- ReduceGlobalVars.h - Specialized Delta Pass --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce Global Variables in the provided Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceGlobalVars.h - Specialized Delta Pass --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce Global Variables in the provided Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h:480,Modifiability,Variab,Variables,480,"//===- ReduceGlobalVars.h - Specialized Delta Pass --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce Global Variables in the provided Module.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceGlobalVars.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlags.cpp:7,Energy Efficiency,Reduce,ReduceInstructionFlags,7,"//===- ReduceInstructionFlags.cpp - Specialized Delta Pass ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Try to remove optimization flags on instructions; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlags.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlags.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlags.cpp:397,Performance,optimiz,optimization,397,"//===- ReduceInstructionFlags.cpp - Specialized Delta Pass ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Try to remove optimization flags on instructions; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlags.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlags.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlags.h:7,Energy Efficiency,Reduce,ReduceInstructionFlags,7,"//===- ReduceInstructionFlags.h - Specialized Delta Pass --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlagsMIR.cpp:7,Energy Efficiency,Reduce,ReduceInstructionFlagsMIR,7,"//===- ReduceInstructionFlagsMIR.cpp - Specialized Delta Pass -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting MachineInstr flags from the MachineFunction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlagsMIR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlagsMIR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlagsMIR.cpp:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceInstructionFlagsMIR.cpp - Specialized Delta Pass -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting MachineInstr flags from the MachineFunction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlagsMIR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlagsMIR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlagsMIR.cpp:21,Usability,clear,clear,21,// TODO: Should this clear flags individually?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlagsMIR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlagsMIR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlagsMIR.h:7,Energy Efficiency,Reduce,ReduceInstructionFlagsMIR,7,"//===- ReduceInstructionFlagsMIR.h -----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting MachineInstr flags from the MachineFunction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlagsMIR.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlagsMIR.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlagsMIR.h:465,Energy Efficiency,reduce,reduce,465,"//===- ReduceInstructionFlagsMIR.h -----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting MachineInstr flags from the MachineFunction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlagsMIR.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionFlagsMIR.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp:7,Energy Efficiency,Reduce,ReduceInstructions,7,"//===- ReduceInstructions.cpp - Specialized Delta Pass ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting Instructions from defined functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp:467,Energy Efficiency,reduce,reduce,467,"//===- ReduceInstructions.cpp - Specialized Delta Pass ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting Instructions from defined functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructions.h:7,Energy Efficiency,Reduce,ReduceInstructions,7,"//===- ReduceInstructions.h -------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting Arguments from defined functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructions.h:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceInstructions.h -------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting Arguments from defined functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp:7,Energy Efficiency,Reduce,ReduceInstructionsMIR,7,"//===- ReduceInstructionsMIR.cpp - Specialized Delta Pass -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting MachineInstr from the MachineFunction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceInstructionsMIR.cpp - Specialized Delta Pass -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting MachineInstr from the MachineFunction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp:29,Deployability,update,update,29,// For each MI to be deleted update users of regs defined by that MI to use; // some other dominating definition (that is not to be deleted).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp:3,Deployability,Update,Update,3,// Update all uses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h:7,Energy Efficiency,Reduce,ReduceInstructionsMIR,7,"//===- ReduceInstructionsMIR.h - Specialized Delta Pass --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting MachineInstr from the MachineFunction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h:465,Energy Efficiency,reduce,reduce,465,"//===- ReduceInstructionsMIR.h - Specialized Delta Pass --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting MachineInstr from the MachineFunction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInstructionsMIR.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInvokes.cpp:7,Energy Efficiency,Reduce,ReduceInvokes,7,"//===- ReduceInvokes.cpp - Specialized Delta Pass -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Try to replace invokes with calls.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInvokes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInvokes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInvokes.h:7,Energy Efficiency,Reduce,ReduceInvokes,7,"//===- ReduceInvokes.h - Specialized Delta Pass -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInvokes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceInvokes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceIRReferences.cpp:7,Energy Efficiency,Reduce,ReduceIRReferences,7,"//===- ReduceIRReferences.cpp - Specialized Delta Pass --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to remove backreferences to the IR from MIR. In particular, this will remove; // the Value references in MachineMemOperands.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceIRReferences.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceIRReferences.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceIRReferences.h:7,Energy Efficiency,Reduce,ReduceIRReferences,7,"//===- ReduceIRReferences.h - Specialized Delta Pass -----------*- c++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting IR references from the MachineFunction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceIRReferences.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceIRReferences.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceIRReferences.h:465,Energy Efficiency,reduce,reduce,465,"//===- ReduceIRReferences.h - Specialized Delta Pass -----------*- c++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting IR references from the MachineFunction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceIRReferences.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceIRReferences.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceMemoryOperations.cpp:7,Energy Efficiency,Reduce,ReduceOpcodes,7,"//===- ReduceOpcodes.cpp - Specialized Delta Pass -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceMemoryOperations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceMemoryOperations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceMemoryOperations.h:7,Energy Efficiency,Reduce,ReduceMemoryOperations,7,"//===- ReduceMemoryOperations.h - Specialized Delta Pass --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceMemoryOperations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceMemoryOperations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp:7,Energy Efficiency,Reduce,ReduceMetadata,7,"//===- ReduceMetadata.cpp - Specialized Delta Pass ------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements two functions used by the Generic Delta Debugging; // Algorithm, which are used to reduce Metadata nodes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp:487,Energy Efficiency,reduce,reduce,487,"//===- ReduceMetadata.cpp - Specialized Delta Pass ------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements two functions used by the Generic Delta Debugging; // Algorithm, which are used to reduce Metadata nodes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp:23,Usability,simpl,simple,23,"// Named metadata with simple list-like behavior, so that it's valid to remove; // operands individually.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceMetadata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceMetadata.h:7,Energy Efficiency,Reduce,ReduceMetadata,7,"//===- ReduceMetadata.h - Specialized Delta Pass ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements two functions used by the Generic Delta Debugging; // Algorithm, which are used to reduce Metadata nodes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceMetadata.h:487,Energy Efficiency,reduce,reduce,487,"//===- ReduceMetadata.h - Specialized Delta Pass ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements two functions used by the Generic Delta Debugging; // Algorithm, which are used to reduce Metadata nodes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp:7,Energy Efficiency,Reduce,ReduceModuleData,7,"//===- ReduceModuleData.cpp -----------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a reduce pass to reduce various module data.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp:406,Energy Efficiency,reduce,reduce,406,"//===- ReduceModuleData.cpp -----------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a reduce pass to reduce various module data.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp:421,Energy Efficiency,reduce,reduce,421,"//===- ReduceModuleData.cpp -----------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a reduce pass to reduce various module data.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp:9,Usability,clear,clear,9,// TODO: clear line by line rather than all at once,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceModuleData.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceModuleData.h:7,Energy Efficiency,Reduce,ReduceModuleData,7,"//===- ReduceModuleData.h ---------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceModuleData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceModuleData.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOpcodes.cpp:7,Energy Efficiency,Reduce,ReduceOpcodes,7,"//===- ReduceOpcodes.cpp - Specialized Delta Pass -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Try to replace instructions that are likely to codegen to simpler or smaller; // sequences. This is a fuzzy and target specific concept.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOpcodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOpcodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOpcodes.cpp:441,Usability,simpl,simpler,441,"//===- ReduceOpcodes.cpp - Specialized Delta Pass -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Try to replace instructions that are likely to codegen to simpler or smaller; // sequences. This is a fuzzy and target specific concept.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOpcodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOpcodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOpcodes.cpp:64,Performance,load,load,64,/// Look for calls that look like they could be replaced with a load or store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOpcodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOpcodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOpcodes.h:7,Energy Efficiency,Reduce,ReduceOpcodes,7,"//===- ReduceOpcodes.h - Specialized Delta Pass -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOpcodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOpcodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp:7,Energy Efficiency,Reduce,ReduceOperandBundes,7,"//===- ReduceOperandBundes.cpp - Specialized Delta Pass -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting operand bundes from calls.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceOperandBundes.cpp - Specialized Delta Pass -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting operand bundes from calls.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h:7,Energy Efficiency,Reduce,ReduceOperandBundes,7,"//===- ReduceOperandBundes.h ------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting operand bundes from calls.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceOperandBundes.h ------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting operand bundes from calls.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandBundles.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp:57,Energy Efficiency,reduce,reduce,57,// TODO: be more precise about which GEP operands we can reduce (e.g. array; // indexes),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperands.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp:323,Energy Efficiency,reduce,reduced,323,"/// Collect all values that are directly or indirectly referenced by @p Root,; /// including Root itself. This is a BF search such that the more steps needed; /// to get to the reference, the more behind it is found in @p Collection. Each; /// step could be its own reduction, therefore we consider later values ""more; /// reduced"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp:57,Energy Efficiency,reduce,reduce,57,// TODO: be more precise about which GEP operands we can reduce (e.g. array; // indexes),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp:70,Energy Efficiency,reduce,reduced,70,"/// Return a reduction priority for @p V. A higher values means ""more reduced"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp:34,Energy Efficiency,reduce,reduced,34,"// Return whether @p LHS is ""more reduced"" that @p RHS. That is, whether; // @p RHS should be preferred over @p LHS in a reduced output. This is a; // partial order, a Value may not be preferable over another.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp:121,Energy Efficiency,reduce,reduced,121,"// Return whether @p LHS is ""more reduced"" that @p RHS. That is, whether; // @p RHS should be preferred over @p LHS in a reduced output. This is a; // partial order, a Value may not be preferable over another.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp:23,Energy Efficiency,reduce,reduced,23,// A value is not more reduced than itself.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp:15,Energy Efficiency,reduce,reduced,15,"// LHS is more reduced if it is defined further up the dominance tree. In a; // chain of definitions,; //; // %a = ..; // %b = op %a; // %c = op %b; //; // every use of %b can be replaced by %a, but not by a use of %c. That is, a; // use %c can be replaced in steps first by %b, then by %a, making %a the; // ""more reduced"" choice that skips over more instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp:315,Energy Efficiency,reduce,reduced,315,"// LHS is more reduced if it is defined further up the dominance tree. In a; // chain of definitions,; //; // %a = ..; // %b = op %a; // %c = op %b; //; // every use of %b can be replaced by %a, but not by a use of %c. That is, a; // use %c can be replaced in steps first by %b, then by %a, making %a the; // ""more reduced"" choice that skips over more instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp:43,Energy Efficiency,reduce,reduced,43,"// Only consider candidates that are ""more reduced"" than the original; // value. This explicitly also rules out candidates with the same; // reduction power. This is to ensure that repeated invocations of this; // pass eventually reach a fixpoint without switch back and forth; // between two opportunities with the same reductive power.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp:151,Energy Efficiency,power,power,151,"// Only consider candidates that are ""more reduced"" than the original; // value. This explicitly also rules out candidates with the same; // reduction power. This is to ensure that repeated invocations of this; // pass eventually reach a fixpoint without switch back and forth; // between two opportunities with the same reductive power.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp:331,Energy Efficiency,power,power,331,"// Only consider candidates that are ""more reduced"" than the original; // value. This explicitly also rules out candidates with the same; // reduction power. This is to ensure that repeated invocations of this; // pass eventually reach a fixpoint without switch back and forth; // between two opportunities with the same reductive power.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp:63,Energy Efficiency,power,power,63,"// Independency of collectReferencedValues's idea of reductive power,; // ensure the partial order of IsMoreReduced is enforced.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp:77,Energy Efficiency,reduce,reduced,77,// Only apply the candidate the Oracle selected to keep that is the most; // reduced. Candidates with less reductive power can be interpreted as an; // intermediate step that is immediately replaced with the more reduced; // one. The number of shouldKeep() calls must be independent of the result; // of previous shouldKeep() calls to keep the total number of calls; // in-sync with what countOperands() has computed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp:117,Energy Efficiency,power,power,117,// Only apply the candidate the Oracle selected to keep that is the most; // reduced. Candidates with less reductive power can be interpreted as an; // intermediate step that is immediately replaced with the more reduced; // one. The number of shouldKeep() calls must be independent of the result; // of previous shouldKeep() calls to keep the total number of calls; // in-sync with what countOperands() has computed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp:213,Energy Efficiency,reduce,reduced,213,// Only apply the candidate the Oracle selected to keep that is the most; // reduced. Candidates with less reductive power can be interpreted as an; // intermediate step that is immediately replaced with the more reduced; // one. The number of shouldKeep() calls must be independent of the result; // of previous shouldKeep() calls to keep the total number of calls; // in-sync with what countOperands() has computed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceOperandsSkip.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterDefs.cpp:7,Energy Efficiency,Reduce,ReduceRegisterDefs,7,"//===- ReduceRegisterDefs.cpp - Specialized Delta Pass --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting register uses from the MachineFunction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterDefs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterDefs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterDefs.cpp:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceRegisterDefs.cpp - Specialized Delta Pass --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting register uses from the MachineFunction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterDefs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterDefs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterDefs.h:7,Energy Efficiency,Reduce,ReduceRegisterDefs,7,"//===- ReduceRegisterDefs.h - Specialized Delta Pass -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting register defs from the MachineFunction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterDefs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterDefs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterDefs.h:465,Energy Efficiency,reduce,reduce,465,"//===- ReduceRegisterDefs.h - Specialized Delta Pass -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting register defs from the MachineFunction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterDefs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterDefs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterMasks.cpp:489,Availability,mask,masks,489,"//===- ReduceRegisterMasks.cpp - Specialized Delta Pass -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce custom register masks from the MachineFunction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterMasks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterMasks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterMasks.cpp:7,Energy Efficiency,Reduce,ReduceRegisterMasks,7,"//===- ReduceRegisterMasks.cpp - Specialized Delta Pass -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce custom register masks from the MachineFunction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterMasks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterMasks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterMasks.cpp:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceRegisterMasks.cpp - Specialized Delta Pass -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce custom register masks from the MachineFunction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterMasks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterMasks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterMasks.cpp:34,Availability,mask,masks,34,// We're only reducing custom reg masks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterMasks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterMasks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterMasks.h:7,Energy Efficiency,Reduce,ReduceRegisterMasks,7,"//===- ReduceRegisterMasks.h - Specialized Delta Pass ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterMasks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterMasks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterUses.cpp:7,Energy Efficiency,Reduce,ReduceRegisterUses,7,"//===- ReduceRegisterUses.cpp - Specialized Delta Pass --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting register uses from the MachineFunction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterUses.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterUses.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterUses.cpp:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceRegisterUses.cpp - Specialized Delta Pass --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting register uses from the MachineFunction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterUses.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterUses.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterUses.h:7,Energy Efficiency,Reduce,ReduceRegisterUses,7,"//===- ReduceRegisterUses.h - Specialized Delta Pass -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting register uses from the MachineFunction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterUses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterUses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterUses.h:465,Energy Efficiency,reduce,reduce,465,"//===- ReduceRegisterUses.h - Specialized Delta Pass -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce uninteresting register uses from the MachineFunction.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterUses.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceRegisterUses.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp:7,Energy Efficiency,Reduce,ReduceSpecialGlobals,7,"//===- ReduceSpecialGlobals.cpp - Specialized Delta Pass ------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce special globals, like @llvm.used, in the provided Module.; //; // For more details about special globals, see; // https://llvm.org/docs/LangRef.html#intrinsic-global-variables; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceSpecialGlobals.cpp - Specialized Delta Pass ------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce special globals, like @llvm.used, in the provided Module.; //; // For more details about special globals, see; // https://llvm.org/docs/LangRef.html#intrinsic-global-variables; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp:639,Modifiability,variab,variables,639,"//===- ReduceSpecialGlobals.cpp - Specialized Delta Pass ------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce special globals, like @llvm.used, in the provided Module.; //; // For more details about special globals, see; // https://llvm.org/docs/LangRef.html#intrinsic-global-variables; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h:7,Energy Efficiency,Reduce,ReduceSpecialGlobals,7,"//===- ReduceSpecialGlobals.h - Specialized Delta Pass ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce special globals, like @llvm.used, in the provided Module.; //; // For more details about special globals, see; // https://llvm.org/docs/LangRef.html#intrinsic-global-variables; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h:466,Energy Efficiency,reduce,reduce,466,"//===- ReduceSpecialGlobals.h - Specialized Delta Pass ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce special globals, like @llvm.used, in the provided Module.; //; // For more details about special globals, see; // https://llvm.org/docs/LangRef.html#intrinsic-global-variables; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h:639,Modifiability,variab,variables,639,"//===- ReduceSpecialGlobals.h - Specialized Delta Pass ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to reduce special globals, like @llvm.used, in the provided Module.; //; // For more details about special globals, see; // https://llvm.org/docs/LangRef.html#intrinsic-global-variables; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceSpecialGlobals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceUsingSimplifyCFG.cpp:7,Energy Efficiency,Reduce,ReduceUsingSimplifyCFG,7,"//===- ReduceUsingSimplifyCFG.h - Specialized Delta Pass ------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to call SimplifyCFG on individual basic blocks.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceUsingSimplifyCFG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceUsingSimplifyCFG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceUsingSimplifyCFG.cpp:471,Usability,Simpl,SimplifyCFG,471,"//===- ReduceUsingSimplifyCFG.h - Specialized Delta Pass ------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to call SimplifyCFG on individual basic blocks.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceUsingSimplifyCFG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceUsingSimplifyCFG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceUsingSimplifyCFG.h:7,Energy Efficiency,Reduce,ReduceUsingSimplifyCFG,7,"//===- ReduceUsingSimplifyCFG.h - Specialized Delta Pass --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to call SimplifyCFG on individual basic blocks.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceUsingSimplifyCFG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceUsingSimplifyCFG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceUsingSimplifyCFG.h:471,Usability,Simpl,SimplifyCFG,471,"//===- ReduceUsingSimplifyCFG.h - Specialized Delta Pass --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to call SimplifyCFG on individual basic blocks.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceUsingSimplifyCFG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceUsingSimplifyCFG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceVirtualRegisters.cpp:7,Energy Efficiency,Reduce,ReduceVirtualRegisters,7,"//===- ReduceVirtualRegisters.cpp - Specialized Delta Pass ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to simplify virtual registers in MIR.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceVirtualRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceVirtualRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceVirtualRegisters.cpp:466,Usability,simpl,simplify,466,"//===- ReduceVirtualRegisters.cpp - Specialized Delta Pass ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to simplify virtual registers in MIR.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceVirtualRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceVirtualRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceVirtualRegisters.h:7,Energy Efficiency,Reduce,ReduceVirtualRegisters,7,"//===- ReduceVirtualRegisters.h - Specialized Delta Pass -------*- c++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to simplify virtual register information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceVirtualRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceVirtualRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceVirtualRegisters.h:465,Usability,simpl,simplify,465,"//===- ReduceVirtualRegisters.h - Specialized Delta Pass -------*- c++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to simplify virtual register information.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceVirtualRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/ReduceVirtualRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/SimplifyInstructions.cpp:7,Usability,Simpl,SimplifyInstructions,7,"//===- SimplifyInstructions.cpp - Specialized Delta Pass ------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to simplify Instructions in defined functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/SimplifyInstructions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/SimplifyInstructions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/SimplifyInstructions.cpp:466,Usability,simpl,simplify,466,"//===- SimplifyInstructions.cpp - Specialized Delta Pass ------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a function which calls the Generic Delta pass in order; // to simplify Instructions in defined functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/SimplifyInstructions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/SimplifyInstructions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/SimplifyInstructions.cpp:10,Usability,simpl,simplifyInstruction,10,"/// Calls simplifyInstruction in each instruction in functions, and replaces; /// their values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/SimplifyInstructions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/SimplifyInstructions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/SimplifyInstructions.h:7,Usability,Simpl,SimplifyInstructions,7,"//===- SimplifyInstructions.h - Specialized Delta Pass ----------*- C++- *-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/SimplifyInstructions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/SimplifyInstructions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Utils.cpp:24,Energy Efficiency,reduce,reduce,24,"//===- Utils.cpp - llvm-reduce utility functions --------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains some utility functions supporting llvm-reduce.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Utils.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Utils.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Utils.cpp:441,Energy Efficiency,reduce,reduce,441,"//===- Utils.cpp - llvm-reduce utility functions --------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains some utility functions supporting llvm-reduce.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Utils.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Utils.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Utils.h:22,Energy Efficiency,reduce,reduce,22,"//===- Utils.h - llvm-reduce utility functions ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains some utility functions supporting llvm-reduce.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Utils.h:441,Energy Efficiency,reduce,reduce,441,"//===- Utils.h - llvm-reduce utility functions ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains some utility functions supporting llvm-reduce.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/deltas/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkConvert.cpp:219,Availability,Error,Error,219,"/// Parses all remarks in the input YAML file.; /// \p [out] ParsedRemarks - Filled with remarks parsed from the input file.; /// \p [out] StrTab - A string table populated for later remark serialization.; /// \returns Error::success() if all remarks were successfully parsed, and an; /// Error otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkConvert.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkConvert.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkConvert.cpp:289,Availability,Error,Error,289,"/// Parses all remarks in the input YAML file.; /// \p [out] ParsedRemarks - Filled with remarks parsed from the input file.; /// \p [out] StrTab - A string table populated for later remark serialization.; /// \returns Error::success() if all remarks were successfully parsed, and an; /// Error otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkConvert.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkConvert.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkConvert.cpp:178,Availability,Error,Error,178,/// Reserialize a list of parsed YAML remarks into bitstream remarks.; /// \p ParsedRemarks - A list of remarks.; /// \p StrTab - The string table for the remarks.; /// \returns Error::success() on success.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkConvert.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkConvert.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkConvert.cpp:75,Availability,Error,Error,75,"/// Parse YAML remarks and reserialize as bitstream remarks.; /// \returns Error::success() on success, and an Error otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkConvert.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkConvert.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkConvert.cpp:111,Availability,Error,Error,111,"/// Parse YAML remarks and reserialize as bitstream remarks.; /// \returns Error::success() on success, and an Error otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkConvert.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkConvert.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkConvert.cpp:78,Availability,Error,Error,78,"/// Parse bitstream remarks and reserialize as YAML remarks.; /// \returns An Error if reserialization fails, or Error::success() on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkConvert.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkConvert.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkConvert.cpp:113,Availability,Error,Error,113,"/// Parse bitstream remarks and reserialize as YAML remarks.; /// \returns An Error if reserialization fails, or Error::success() on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkConvert.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkConvert.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkCount.cpp:78,Availability,Error,Error,78,"/// Outputs all instruction count remarks in the file as a CSV.; /// \returns Error::success() on success, and an Error otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkCount.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkCount.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkCount.cpp:114,Availability,Error,Error,114,"/// Outputs all instruction count remarks in the file as a CSV.; /// \returns Error::success() on success, and an Error otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkCount.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkCount.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkCounter.h:105,Availability,error,error,105,/// Returns a filter object if all the arguments provided are valid regex; /// types otherwise return an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkCounter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkCounter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkCounter.h:25,Availability,error,error,25,/// Convert Regex string error to an error object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkCounter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkCounter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkCounter.h:37,Availability,error,error,37,/// Convert Regex string error to an error object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkCounter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkCounter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkCounter.h:186,Availability,Error,Error,186,/// Create an argument counter. If the provided \p Arguments represent a regex; /// vector then we need to check that the provided regular expressions are; /// valid if not we return an Error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkCounter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkCounter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkCounter.h:4,Deployability,Update,Update,4,/// Update the internal count map based on the remark integer arguments that; /// correspond the the user specified argument keys to collect for.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkCounter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkCounter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp:3,Security,Access,Accessors,3,// Accessors for the remarks from the first file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp:3,Security,Access,Accessors,3,// Accessors for the remarks from the second file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp:410,Availability,Error,Error,410,"/// Collects an expected integer value from a given argument index in a remark.; ///; /// \p Remark - The remark.; /// \p ArgIdx - The index where the integer value should be found.; /// \p ExpectedKeyName - The expected key name for the index; /// (e.g. ""InstructionCount""); ///; /// \returns the integer value at the index if it exists, and the key-value pair; /// is what is expected. Otherwise, returns an Error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp:65,Availability,error,errors,65,/// Wrapper function for readFileAndProcessRemarks which handles errors.; ///; /// \param[in] InputFileName - Name of file to read from.; /// \param[out] FuncNameToSizeInfo - Populated with information from size; /// remarks in the input file.; ///; /// \returns true if readFileAndProcessRemarks returned no errors. False; /// otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp:309,Availability,error,errors,309,/// Wrapper function for readFileAndProcessRemarks which handles errors.; ///; /// \param[in] InputFileName - Name of file to read from.; /// \param[out] FuncNameToSizeInfo - Populated with information from size; /// remarks in the input file.; ///; /// \returns true if readFileAndProcessRemarks returned no errors. False; /// otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp:4,Integrability,Wrap,Wrapper,4,/// Wrapper function for readFileAndProcessRemarks which handles errors.; ///; /// \param[in] InputFileName - Name of file to read from.; /// \param[out] FuncNameToSizeInfo - Populated with information from size; /// remarks in the input file.; ///; /// \returns true if readFileAndProcessRemarks returned no errors. False; /// otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp:91,Energy Efficiency,consumption,consumption,91,"/// Output all diffs in \p DiffsByFilesPresent as a JSON report. This is; /// intended for consumption by external tools.; ///; /// \p InputFileNameA - File A used to produce the report.; /// \p InputFileNameB - File B used ot produce the report.; /// \p OS - Output stream.; ///; /// JSON output includes:; /// - \p InputFileNameA and \p InputFileNameB under ""Files"".; /// - Functions present in both files under ""InBoth"".; /// - Functions present only in A in ""OnlyInA"".; /// - Functions present only in B in ""OnlyInB"".; /// - Instruction count and stack size differences for each function.; ///; /// Differences are represented using [count_a, count_b]. The actual difference; /// can be computed via count_b - count_a.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp:93,Availability,Error,Error,93,"/// Output all diffs in \p DiffsByFilesPresent using the desired output style.; /// \returns Error::success() on success, and an Error otherwise.; /// \p InputFileNameA - Name of input file A; may be used in the report.; /// \p InputFileNameB - Name of input file B; may be used in the report.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp:129,Availability,Error,Error,129,"/// Output all diffs in \p DiffsByFilesPresent using the desired output style.; /// \returns Error::success() on success, and an Error otherwise.; /// \p InputFileNameA - Name of input file A; may be used in the report.; /// \p InputFileNameB - Name of input file B; may be used in the report.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp:49,Availability,error,errors,49,/// Boolean wrapper for outputDiff which handles errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp:12,Integrability,wrap,wrapper,12,/// Boolean wrapper for outputDiff which handles errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkSizeDiff.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkUtilHelpers.cpp:66,Availability,Error,Error,66,"/// \returns A MemoryBuffer for the input file on success, and an Error; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkUtilHelpers.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkUtilHelpers.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkUtilHelpers.cpp:92,Availability,Error,Error,92,"/// \returns A ToolOutputFile which can be used for writing remarks on success,; /// and an Error otherwise.; /// \p OutputFileName is the desired destination.; /// \p OutputFormat",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkUtilHelpers.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkUtilHelpers.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkUtilRegistry.cpp:395,Usability,simpl,simple,395,"//===- RemarkUtilRegistry.cpp: Implement a command registry. --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implement a simple subcommand registry.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkUtilRegistry.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkUtilRegistry.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkUtilRegistry.h:395,Usability,simpl,simple,395,"//===- RemarkUtilRegistry.h: Implement a command registry. ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implement a simple subcommand registry.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkUtilRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-remarkutil/RemarkUtilRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:32,Testability,Test,Testing,32,"//===-- llvm-rtdyld.cpp - MCJIT Testing Tool ------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a testing tool for use with the MC-JIT LLVM components.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:393,Testability,test,testing,393,"//===-- llvm-rtdyld.cpp - MCJIT Testing Tool ------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a testing tool for use with the MC-JIT LLVM components.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:105,Integrability,rout,routines,105,"// A trivial memory manager that doesn't do anything fancy, just uses the; // support library allocation routines directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:113,Energy Efficiency,allocate,allocateTLSSection,113,"// In case the execution needs TLS storage, we define a very small TLS memory; // area here that will be used in allocateTLSSection().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:3,Performance,Load,Load,3,// Load any dylibs requested on the command line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:3,Performance,Load,Load,3,// Load the input memory buffer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:3,Performance,Load,Load,3,// Load the object file,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:25,Availability,error,errors,25,// TODO: Actually report errors helpfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:25,Availability,error,errors,25,// TODO: Actually report errors helpfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:25,Availability,error,errors,25,// TODO: Actually report errors helpfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:25,Availability,error,errors,25,// TODO: Actually report errors helpfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate a slab of memory upfront, if required. This is used if; // we want to test small code models.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:82,Testability,test,test,82,"// Allocate a slab of memory upfront, if required. This is used if; // we want to test small code models.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:3,Performance,Load,Load,3,// Load any dylibs requested on the command line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:3,Performance,Load,Load,3,// Load the input memory buffer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:3,Performance,Load,Load,3,// Load the object file,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:49,Availability,Error,Error,49,// Resove all the relocations we can.; // FIXME: Error out if there are unresolved relocations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:30,Performance,cache,cache,30,// Invalidate the instruction cache for each loaded function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:45,Performance,load,loaded,45,// Invalidate the instruction cache for each loaded function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:584,Testability,test,test,584,"// Scatter sections in all directions!; // Remaps section addresses for -verify mode. The following command line options; // can be used to customize the layout of the memory within the phony target's; // address space:; // -target-addr-start <s> -- Specify where the phony target address range starts.; // -target-addr-end <e> -- Specify where the phony target address range ends.; // -target-section-sep <d> -- Specify how big a gap should be left between the; // end of one section and the start of the next.; // Defaults to zero. Set to something big; // (e.g. 1 << 32) to stress-test stubs, GOTs, etc.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:589,Testability,stub,stubs,589,"// Scatter sections in all directions!; // Remaps section addresses for -verify mode. The following command line options; // can be used to customize the layout of the memory within the phony target's; // address space:; // -target-addr-start <s> -- Specify where the phony target address range starts.; // -target-addr-end <e> -- Specify where the phony target address range ends.; // -target-section-sep <d> -- Specify how big a gap should be left between the; // end of one section and the start of the next.; // Defaults to zero. Set to something big; // (e.g. 1 << 32) to stress-test stubs, GOTs, etc.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:20,Energy Efficiency,allocate,allocated,20,"// Keep an ""already allocated"" mapping of section target addresses to sizes.; // Sections whose address mappings aren't specified on the command line will; // allocated around the explicitly mapped sections while maintaining the; // minimum separation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:159,Energy Efficiency,allocate,allocated,159,"// Keep an ""already allocated"" mapping of section target addresses to sizes.; // Sections whose address mappings aren't specified on the command line will; // allocated around the explicitly mapped sections while maintaining the; // minimum separation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:146,Energy Efficiency,allocate,allocated,146,"// Move the previously applied mappings (whether explicitly specified on the; // command line, or implicitly set by RuntimeDyld) into the already-allocated; // map.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:25,Performance,Load,LoadAddr,25,// A section will have a LoadAddr of 0 if it wasn't loaded for whatever; // reason (e.g. zero byte COFF sections). Don't include those sections in; // the allocation map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:52,Performance,load,loaded,52,// A section will have a LoadAddr of 0 if it wasn't loaded for whatever; // reason (e.g. zero byte COFF sections). Don't include those sections in; // the allocation map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:3,Performance,Load,Load,3,"// Load and link the objects specified on the command line, but do not execute; // anything. Instead, attach a RuntimeDyldChecker instance and call it to; // verify the correctness of the linked memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:3,Performance,Load,Load,3,// Load any dylibs requested on the command line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:3,Performance,Load,Load,3,// Load the input memory buffer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:3,Performance,Load,Load,3,// Load the object file,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:3,Performance,Load,LoadObjects,3,/* LoadObjects */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:3,Performance,Load,LoadObjects,3,/* LoadObjects */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:3,Performance,Load,LoadObjects,3,/* LoadObjects */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp:50,Safety,sanity check,sanity check,50,"//===-- DummyDemanglerFuzzer.cpp - Entry point to sanity check the fuzzer -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp:426,Testability,test,test,426,"//===-- DummyDemanglerFuzzer.cpp - Entry point to sanity check the fuzzer -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rust-demangle-fuzzer/DummyDemanglerFuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-sim/llvm-sim.cpp:342,Availability,error,error,342,/// Exports the given SimilarityGroups to a JSON file at \p FilePath.; ///; /// \param FilePath - The path to the output location.; /// \param SimSections - The similarity groups to process.; /// \param LLVMInstNum - The mapping of Instructions to their location in the; /// module represented by an unsigned integer.; /// \returns A nonzero error code if there was a failure creating the file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-sim/llvm-sim.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-sim/llvm-sim.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-sim/llvm-sim.cpp:368,Availability,failure,failure,368,/// Exports the given SimilarityGroups to a JSON file at \p FilePath.; ///; /// \param FilePath - The path to the output location.; /// \param SimSections - The similarity groups to process.; /// \param LLVMInstNum - The mapping of Instructions to their location in the; /// module represented by an unsigned integer.; /// \returns A nonzero error code if there was a failure creating the file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-sim/llvm-sim.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-sim/llvm-sim.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp:19,Availability,error,error,19,"// This version of error() prints the archive name and member name, for example:; // ""libx.a(foo.o)"" after the ToolName before the error message. It sets; // HadError but returns allowing the code to move on to other archive members.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp:131,Availability,error,error,131,"// This version of error() prints the archive name and member name, for example:; // ""libx.a(foo.o)"" after the ToolName before the error message. It sets; // HadError but returns allowing the code to move on to other archive members.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp:137,Integrability,message,message,137,"// This version of error() prints the archive name and member name, for example:; // ""libx.a(foo.o)"" after the ToolName before the error message. It sets; // HadError but returns allowing the code to move on to other archive members.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp:22,Availability,error,error,22,"// TODO: if we have a error getting the name then it would be nice to print; // the index of which archive member this is and or its offset in the; // archive instead of ""???"" as the name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp:19,Availability,error,error,19,"// This version of error() prints the file name and which architecture slice it // is from, for example: ""foo.o (for architecture i386)"" after the ToolName; // before the error message. It sets HadError but returns allowing the code to; // move on to other architecture slices.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp:171,Availability,error,error,171,"// This version of error() prints the file name and which architecture slice it // is from, for example: ""foo.o (for architecture i386)"" after the ToolName; // before the error message. It sets HadError but returns allowing the code to; // move on to other architecture slices.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp:177,Integrability,message,message,177,"// This version of error() prints the file name and which architecture slice it // is from, for example: ""foo.o (for architecture i386)"" after the ToolName; // before the error message. It sets HadError but returns allowing the code to; // move on to other architecture slices.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp:261,Availability,error,error,261,/// Checks to see if the @p O ObjectFile is a Mach-O file and if it is and there; /// is a list of architecture flags specified then check to make sure this; /// Mach-O file is one of those architectures or all architectures was; /// specificed. If not then an error is generated and this routine returns; /// false. Else it returns true.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp:289,Integrability,rout,routine,289,/// Checks to see if the @p O ObjectFile is a Mach-O file and if it is and there; /// is a list of architecture flags specified then check to make sure this; /// Mach-O file is one of those architectures or all architectures was; /// specificed. If not then an error is generated and this routine returns; /// false. Else it returns true.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-size/llvm-size.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-special-case-list-fuzzer/DummySpecialCaseListFuzzer.cpp:426,Testability,test,test,426,"//===--- DummySpecialCaseListFuzzer.cpp -----------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-special-case-list-fuzzer/DummySpecialCaseListFuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-special-case-list-fuzzer/DummySpecialCaseListFuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-split/llvm-split.cpp:42,Testability,test,testing,42,"//===-- llvm-split: command line tool for testing module splitter ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program can be used to test the llvm::SplitModule function.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-split/llvm-split.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-split/llvm-split.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-split/llvm-split.cpp:411,Testability,test,test,411,"//===-- llvm-split: command line tool for testing module splitter ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program can be used to test the llvm::SplitModule function.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-split/llvm-split.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-split/llvm-split.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp:60,Testability,test,test,60,"//===- llvm-stress.cpp - Generate random LL files to stress-test LLVM -----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program is a utility that generates random .ll files to stress-test; // different components in LLVM.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp:451,Testability,test,test,451,"//===- llvm-stress.cpp - Generate random LL files to stress-test LLVM -----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program is a utility that generates random .ll files to stress-test; // different components in LLVM.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp:203,Security,secur,secure,203,/// A utility class to provide a pseudo-random number generator which is; /// the same across all platforms. This is somewhat close to the libc; /// implementation. Note: This is not a cryptographically secure pseudorandom; /// number generator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp:33,Performance,scalab,scalable,33,// Select either fixed length or scalable vectors with 50% probability; // (only if scalable vectors are enabled),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp:84,Performance,scalab,scalable,84,// Select either fixed length or scalable vectors with 50% probability; // (only if scalable vectors are enabled),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp:46,Performance,scalab,scalable,46,// Can't express arbitrary shufflevectors for scalable vectors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp:35,Deployability,configurat,configuration,35,// Try a bunch of different select configuration until a valid one is found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp:35,Modifiability,config,configuration,35,// Try a bunch of different select configuration until a valid one is found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp:711,Availability,error,error,711,"//===-- llvm-symbolizer.cpp - Simple addr2line-like symbolizer ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This utility works much like ""addr2line"". It is able of transforming; // tuples (module name, module offset) to code locations (function name,; // file, line number, column number). It is targeted for compiler-rt tools; // (especially AddressSanitizer and ThreadSanitizer) that can use it; // to symbolize stack traces in their error reports.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp:30,Usability,Simpl,Simple,30,"//===-- llvm-symbolizer.cpp - Simple addr2line-like symbolizer ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This utility works much like ""addr2line"". It is able of transforming; // tuples (module name, module offset) to code locations (function name,; // file, line number, column number). It is targeted for compiler-rt tools; // (especially AddressSanitizer and ThreadSanitizer) that can use it; // to symbolize stack traces in their error reports.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp:6,Availability,error,error,6,"// No error, print the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp:14,Availability,error,error,14,// Handle the error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp:65,Availability,redundant,redundant,65,"// GNU addr2line assumes the address is hexadecimal and allows a redundant; // ""0x"" or ""0X"" prefix; do the same for compatibility.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp:65,Safety,redund,redundant,65,"// GNU addr2line assumes the address is hexadecimal and allows a redundant; // ""0x"" or ""0X"" prefix; do the same for compatibility.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp:19,Modifiability,variab,variable,19,// The environment variable specifies initial options which can be overridden; // by commnad line options.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp:154,Performance,cache,cached,154,"// When an input file is specified, exit immediately if the file cannot be; // read. If getOrCreateModuleInfo succeeds, symbolizeInput will reuse the; // cached file handle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp:24,Availability,error,errors,24,// For argument parsing errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp:90,Availability,error,errors,90,"// Most of the ObjectFile interfaces return an Expected<T>, so make it easy; // to ignore errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp:26,Integrability,interface,interfaces,26,"// Most of the ObjectFile interfaces return an Expected<T>, so make it easy; // to ignore errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp:12,Availability,error,error,12,// Sink the error and return a nothing value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp:25,Availability,error,error,25,"// Ignore the name-fetch error, just report the index.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp:112,Availability,avail,available,112,"// Store all the names that TargetLibraryInfo knows about; the bool indicates; // whether TLI has it marked as ""available"" for the target of interest.; // This is a vector to preserve the sorted order for better reporting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp:34,Availability,avail,available,34,// getName returns names only for available funcs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp:96,Security,hash,hashed,96,// Store all the exported symbol names we found in the input libraries.; // We use a map to get hashed lookup speed; the bool is meaningless.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-tli-checker/llvm-tli-checker.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-undname/llvm-undname.cpp:66,Availability,echo,echo,66,"// If the user is manually typing in these decorated names, don't echo; // them to the terminal a second time. If they're coming from redirected; // input, however, then we should display the input line so that the; // mangled and demangled name can be easily correlated in the output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-undname/llvm-undname.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-undname/llvm-undname.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/llvm-xray.cpp:47,Integrability,message,message,47,"// If all else fails, we still print the usage message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/llvm-xray.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/llvm-xray.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/trie-node.h:423,Integrability,rout,routines,423,"//===- trie-node.h - XRay Call Stack Data Structure -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides a data structure and routines for working with call stacks; // of instrumented functions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/trie-node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/trie-node.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/trie-node.h:15,Modifiability,parameteriz,parameterized,15,/// Additional parameterized data on each node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/trie-node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/trie-node.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/trie-node.h:176,Energy Efficiency,allocate,allocated,176,"/// Merges together two TrieNodes with like function ids, aggregating their; /// callee lists and durations. The caller must provide storage where new merged; /// nodes can be allocated in the form of a linked list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/trie-node.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/trie-node.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-account.h:405,Integrability,interface,interface,405,"//===- xray-account.h - XRay Function Call Accounting ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the interface for performing some basic function call; // accounting from an XRay trace.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-account.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-account.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-account.h:419,Performance,perform,performing,419,"//===- xray-account.h - XRay Function Call Accounting ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the interface for performing some basic function call; // accounting from an XRay trace.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-account.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-account.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-color-helper.cpp:19,Modifiability,extend,extend,19,// Sequential Maps extend the last colors given out of range inputs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-color-helper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-color-helper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-color-helper.cpp:29,Energy Efficiency,green,green,29,// The PiYG color scheme has green and red for missing right and left; // respectively.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-color-helper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-color-helper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-color-helper.cpp:46,Integrability,Rout,Routine,46,// The Hue component of the HSV interpolation Routine,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-color-helper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-color-helper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-color-helper.h:16,Availability,avail,availible,16,/// Enum of the availible Sequential Color Schemes,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-color-helper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-color-helper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-color-helper.h:16,Availability,avail,availible,16,/// Enum of the availible Diverging Color Schemes,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-color-helper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-color-helper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-converter.cpp:46,Testability,log,logs,46,// Skip custom and typed event records for v1 logs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-converter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-converter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-converter.cpp:447,Safety,avoid,avoid,447,// Chrome trace event format always wants data in micros.; // CyclesPerMicro = CycleHertz / 10^6; // TSC / CyclesPerMicro == TSC * 10^6 / CycleHertz == MicroTimestamp; // Could lose some precision here by converting the TSC to a double to; // multiply by the period in micros. 52 bit mantissa is a good start though.; // TODO: Make feature request to Chrome Trace viewer to accept ticks and a; // frequency or do some more involved calculation to avoid dangers of; // conversion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-converter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-converter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-converter.cpp:197,Testability,log,logged,197,"// Each record is represented as a json dictionary with function name,; // type of B for begin or E for end, thread id, process id,; // timestamp in microseconds, and a stack frame id. The ids are logged; // in an id dictionary after the events.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-converter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-converter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-converter.cpp:44,Energy Efficiency,reduce,reduces,44,// The stackFrames dictionary substantially reduces size of the output file by; // avoiding repeating the entire call stack of function names for each entry.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-converter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-converter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-converter.cpp:83,Safety,avoid,avoiding,83,// The stackFrames dictionary substantially reduces size of the output file by; // avoiding repeating the entire call stack of function names for each entry.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-converter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-converter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-extract.cpp:420,Integrability,interface,interface,420,"//===- xray-extract.cpp: XRay Instrumentation Map Extraction --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of the xray-extract.h interface.; //; // FIXME: Support other XRay-instrumented binary formats other than ELF.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-extract.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-extract.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-fdr-dump.cpp:11,Security,validat,validate,11,// Then we validate while printing each block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-fdr-dump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-fdr-dump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp:3,Deployability,Update,Updates,3,// Updates the statistics for a GraphRenderer::TimeStat,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp:440,Availability,recover,recover,440,"// Evaluates an XRay record and performs accounting on it.; //; // If the record is an ENTER record it pushes the FuncID and TSC onto a; // structure representing the call stack for that function.; // If the record is an EXIT record it checks computes computes the ammount of; // time the function took to complete and then stores that information in an; // edge of the graph. If there is no matching ENTER record the function tries; // to recover by assuming that there were EXIT records which were missed, for; // example caused by tail call elimination and if the option is enabled then; // then tries to recover from this.; //; // This function will also error if the records are out of order, as the trace; // is expected to be sorted.; //; // The graph generated has an immaginary root for functions called by no-one at; // FuncId 0.; //; // FIXME: Refactor this and account subcommand to reduce code duplication.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp:608,Availability,recover,recover,608,"// Evaluates an XRay record and performs accounting on it.; //; // If the record is an ENTER record it pushes the FuncID and TSC onto a; // structure representing the call stack for that function.; // If the record is an EXIT record it checks computes computes the ammount of; // time the function took to complete and then stores that information in an; // edge of the graph. If there is no matching ENTER record the function tries; // to recover by assuming that there were EXIT records which were missed, for; // example caused by tail call elimination and if the option is enabled then; // then tries to recover from this.; //; // This function will also error if the records are out of order, as the trace; // is expected to be sorted.; //; // The graph generated has an immaginary root for functions called by no-one at; // FuncId 0.; //; // FIXME: Refactor this and account subcommand to reduce code duplication.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp:659,Availability,error,error,659,"// Evaluates an XRay record and performs accounting on it.; //; // If the record is an ENTER record it pushes the FuncID and TSC onto a; // structure representing the call stack for that function.; // If the record is an EXIT record it checks computes computes the ammount of; // time the function took to complete and then stores that information in an; // edge of the graph. If there is no matching ENTER record the function tries; // to recover by assuming that there were EXIT records which were missed, for; // example caused by tail call elimination and if the option is enabled then; // then tries to recover from this.; //; // This function will also error if the records are out of order, as the trace; // is expected to be sorted.; //; // The graph generated has an immaginary root for functions called by no-one at; // FuncId 0.; //; // FIXME: Refactor this and account subcommand to reduce code duplication.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp:895,Energy Efficiency,reduce,reduce,895,"// Evaluates an XRay record and performs accounting on it.; //; // If the record is an ENTER record it pushes the FuncID and TSC onto a; // structure representing the call stack for that function.; // If the record is an EXIT record it checks computes computes the ammount of; // time the function took to complete and then stores that information in an; // edge of the graph. If there is no matching ENTER record the function tries; // to recover by assuming that there were EXIT records which were missed, for; // example caused by tail call elimination and if the option is enabled then; // then tries to recover from this.; //; // This function will also error if the records are out of order, as the trace; // is expected to be sorted.; //; // The graph generated has an immaginary root for functions called by no-one at; // FuncId 0.; //; // FIXME: Refactor this and account subcommand to reduce code duplication.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp:855,Modifiability,Refactor,Refactor,855,"// Evaluates an XRay record and performs accounting on it.; //; // If the record is an ENTER record it pushes the FuncID and TSC onto a; // structure representing the call stack for that function.; // If the record is an EXIT record it checks computes computes the ammount of; // time the function took to complete and then stores that information in an; // edge of the graph. If there is no matching ENTER record the function tries; // to recover by assuming that there were EXIT records which were missed, for; // example caused by tail call elimination and if the option is enabled then; // then tries to recover from this.; //; // This function will also error if the records are out of order, as the trace; // is expected to be sorted.; //; // The graph generated has an immaginary root for functions called by no-one at; // FuncId 0.; //; // FIXME: Refactor this and account subcommand to reduce code duplication.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp:32,Performance,perform,performs,32,"// Evaluates an XRay record and performs accounting on it.; //; // If the record is an ENTER record it pushes the FuncID and TSC onto a; // structure representing the call stack for that function.; // If the record is an EXIT record it checks computes computes the ammount of; // time the function took to complete and then stores that information in an; // edge of the graph. If there is no matching ENTER record the function tries; // to recover by assuming that there were EXIT records which were missed, for; // example caused by tail call elimination and if the option is enabled then; // then tries to recover from this.; //; // This function will also error if the records are out of order, as the trace; // is expected to be sorted.; //; // The graph generated has an immaginary root for functions called by no-one at; // FuncId 0.; //; // FIXME: Refactor this and account subcommand to reduce code duplication.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp:440,Safety,recover,recover,440,"// Evaluates an XRay record and performs accounting on it.; //; // If the record is an ENTER record it pushes the FuncID and TSC onto a; // structure representing the call stack for that function.; // If the record is an EXIT record it checks computes computes the ammount of; // time the function took to complete and then stores that information in an; // edge of the graph. If there is no matching ENTER record the function tries; // to recover by assuming that there were EXIT records which were missed, for; // example caused by tail call elimination and if the option is enabled then; // then tries to recover from this.; //; // This function will also error if the records are out of order, as the trace; // is expected to be sorted.; //; // The graph generated has an immaginary root for functions called by no-one at; // FuncId 0.; //; // FIXME: Refactor this and account subcommand to reduce code duplication.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp:608,Safety,recover,recover,608,"// Evaluates an XRay record and performs accounting on it.; //; // If the record is an ENTER record it pushes the FuncID and TSC onto a; // structure representing the call stack for that function.; // If the record is an EXIT record it checks computes computes the ammount of; // time the function took to complete and then stores that information in an; // edge of the graph. If there is no matching ENTER record the function tries; // to recover by assuming that there were EXIT records which were missed, for; // example caused by tail call elimination and if the option is enabled then; // then tries to recover from this.; //; // This function will also error if the records are out of order, as the trace; // is expected to be sorted.; //; // The graph generated has an immaginary root for functions called by no-one at; // FuncId 0.; //; // FIXME: Refactor this and account subcommand to reduce code duplication.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp:54,Energy Efficiency,reduce,reduce,54,// FIXME: Refactor this and the account subcommand to reduce code; // duplication,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp:10,Modifiability,Refactor,Refactor,10,// FIXME: Refactor this and the account subcommand to reduce code; // duplication,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h:30,Testability,log,logic,30,"/// A class encapsulating the logic related to analyzing XRay traces, producting; /// Graphs from them and then exporting those graphs for review.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h:138,Performance,Latency,LatencyAccountant,138,/// Use a Map to store the Function stack for each thread whilst building the; /// graph.; ///; /// FIXME: Perhaps we can Build this into LatencyAccountant? or vise versa?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h:15,Performance,latency,latency,15,/// Calculates latency statistics for each edge and stores the data in the; /// Graph,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h:15,Performance,latency,latency,15,/// Calculates latency statistics for each vertex and stores the data in the; /// Graph,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h:15,Performance,latency,latency,15,/// Normalises latency statistics for each edge and vertex by CycleFrequency;,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h:66,Security,access,access,66,/// Takes in a reference to a FuncIdHelper in order to have ready access to; /// Symbol names.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h:302,Availability,robust,robust,302,"/// Process an Xray record and expand the graph.; ///; /// This Function will return true on success, or false if records are not; /// presented in per-thread call-tree DFS order. (That is for each thread the; /// Records should be in order runtime on an ideal system.); ///; /// FIXME: Make this more robust against small irregularities.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-registry.cpp:395,Usability,simpl,simple,395,"//===- xray-registry.cpp: Implement a command registry. -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implement a simple subcommand registry.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-registry.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-registry.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-registry.h:395,Usability,simpl,simple,395,"//===- xray-registry.h - Define registry mechanism for commands. ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implement a simple subcommand registry.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-registry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-registry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-stacks.cpp:1947,Usability,simpl,simple,1947,"tributions of the function call durations with; /// statistics at each level of the stack. This works by doing the following; /// algorithm:; ///; /// 1. When unwinding, record the duration of each unwound function associated; /// with the path up to which the unwinding stops. For example:; ///; /// Step Duration (? means has start time); ///; /// push a <start time> a = ?; /// push b <start time> a = ?, a->b = ?; /// push c <start time> a = ?, a->b = ?, a->b->c = ?; /// pop c <end time> a = ?, a->b = ?, emit duration(a->b->c); /// pop b <end time> a = ?, emit duration(a->b); /// push c <start time> a = ?, a->c = ?; /// pop c <end time> a = ?, emit duration(a->c); /// pop a <end time> emit duration(a); ///; /// 2. We then account for the various stacks we've collected, and for each of; /// them will have measurements that look like the following (continuing; /// with the above simple example):; ///; /// c : [<id(""a->b->c""), [durations]>, <id(""a->c""), [durations]>]; /// b : [<id(""a->b""), [durations]>]; /// a : [<id(""a""), [durations]>]; ///; /// This allows us to compute, for each stack id, and each function that; /// shows up in the stack, some important statistics like:; ///; /// - median; /// - 99th percentile; /// - mean + stddev; /// - count; ///; /// 3. For cases where we don't have durations for some of the higher levels; /// of the stack (perhaps instrumentation wasn't activated when the stack was; /// entered), we can mark them appropriately.; ///; /// Computing this data also allows us to implement lookup by call stack nodes,; /// so that we can find functions that show up in multiple stack traces and; /// show the statistical properties of that function in various contexts. We; /// can compute information similar to the following:; ///; /// Function: 'c'; /// Stacks: 2 / 2; /// Stack ID: ...; /// Stack Count: ...; /// # Function ...; /// 0 a ...; /// 1 b ...; /// 2 c ...; ///; /// Stack ID: ...; /// Stack Count: ...; /// # Function ...; /// 0 a ...; /// 1 c",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-stacks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-stacks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-stacks.cpp:3,Safety,Avoid,Avoid,3,// Avoid the magic number of 4 propagated through the code with an alias.; // We use this SmallVector to track the root nodes in a call graph.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-stacks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-stacks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-stacks.cpp:117,Availability,down,down,117,"// Traverse the pointers up to the parent, noting the sums, then print; // in reverse order (callers at top, callees down bottom).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-stacks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-stacks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-stacks.cpp:251,Availability,down,down,251,"/// Prints values for stacks in a format consumable for the flamegraph.pl; /// tool. This is a line based format that lists each level in the stack; /// hierarchy in a semicolon delimited form followed by a space and a numeric; /// value. If breaking down by thread, the thread ID will be added as the; /// root level of the stack.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-stacks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-stacks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-stacks.cpp:3,Performance,Load,Load,3,"// Load each file provided as a command-line argument. For each one of them; // account to a single StackTrie, and just print the whole trie for now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-xray/xray-stacks.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-stacks.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-yaml-numeric-parser-fuzzer/DummyYAMLNumericParserFuzzer.cpp:426,Testability,test,test,426,"//===--- DummyYAMLNumericParserFuzzer.cpp ---------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-yaml-numeric-parser-fuzzer/DummyYAMLNumericParserFuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-yaml-numeric-parser-fuzzer/DummyYAMLNumericParserFuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-yaml-parser-fuzzer/DummyYAMLParserFuzzer.cpp:426,Testability,test,test,426,"//===--- DummyYAMLParserFuzzer.cpp ----------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implementation of main so we can build and test without linking libFuzzer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/llvm-yaml-parser-fuzzer/DummyYAMLParserFuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-yaml-parser-fuzzer/DummyYAMLParserFuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lto/lto.cpp:31,Performance,Optimiz,Optimizer,31,"//===-lto.cpp - LLVM Link Time Optimizer ----------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the Link Time Optimization library. This library is; // intended to be used by linker to optimize code at link time.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/lto/lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lto/lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lto/lto.cpp:418,Performance,Optimiz,Optimization,418,"//===-lto.cpp - LLVM Link Time Optimizer ----------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the Link Time Optimization library. This library is; // intended to be used by linker to optimize code at link time.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/lto/lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lto/lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lto/lto.cpp:493,Performance,optimiz,optimize,493,"//===-lto.cpp - LLVM Link Time Optimizer ----------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the Link Time Optimization library. This library is; // intended to be used by linker to optimize code at link time.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/lto/lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lto/lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lto/lto.cpp:21,Availability,error,error,21,// Holds most recent error string.; // *** Not thread safe ***,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/lto/lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lto/lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lto/lto.cpp:54,Safety,safe,safe,54,// Holds most recent error string.; // *** Not thread safe ***,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/lto/lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lto/lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lto/lto.cpp:72,Safety,safe,safe,72,// Holds the initialization state of the LTO module.; // *** Not thread safe ***,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/lto/lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lto/lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lto/lto.cpp:18,Modifiability,config,configured,18,// Initialize the configured targets if they have not been initialized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/lto/lto.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lto/lto.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lto/LTODisassembler.cpp:47,Integrability,interface,interface,47,"//===-- LTODisassembler.cpp - LTO Disassembler interface ------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This function provides utility methods used by clients of libLTO that want; // to use the disassembler.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/lto/LTODisassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lto/LTODisassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/coff2yaml.cpp:49,Security,checksum,checksums,49,// Iterate all .debug$S sections looking for the checksums and string table.; // Exit as soon as both sections are found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/coff2yaml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/coff2yaml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp:17,Availability,error,errors,17,"// We ignore any errors that don't prevent parsing the section, since we can; // still represent such sections.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp:17,Availability,error,errors,17,"// We ignore any errors that don't prevent parsing the section, since we can; // still represent such sections. These errors are recorded via the; // WarningHandler parameter of Set.extract().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp:118,Availability,error,errors,118,"// We ignore any errors that don't prevent parsing the section, since we can; // still represent such sections. These errors are recorded via the; // WarningHandler parameter of Set.extract().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp:17,Availability,error,errors,17,"// We ignore any errors that don't prevent parsing the section, since we can; // still represent such sections.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp:9,Testability,Test,Test,9,// TODO: Test dumping .debug_gnu_pubnames section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp:9,Testability,Test,Test,9,// TODO: Test dumping .debug_gnu_pubtypes section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp:42,Availability,error,error,42,"// FIXME: Ideally we would propagate this error upwards, but that would; // prevent us from displaying any debug info at all. For now we just consume; // the error and display everything that was parsed successfully.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp:158,Availability,error,error,158,"// FIXME: Ideally we would propagate this error upwards, but that would; // prevent us from displaying any debug info at all. For now we just consume; // the error and display everything that was parsed successfully.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/elf2yaml.cpp:331,Energy Efficiency,reduce,reduce,331,"// Normally we use ""Symbols:"" and ""DynamicSymbols:"" to describe contents of; // symbol tables. We also build and emit corresponding string tables; // implicitly. But sometimes it is important to preserve positions and virtual; // addresses of allocatable sections, e.g. for creating program headers.; // Generally we are trying to reduce noise in the YAML output. Because; // of that we do not print non-allocatable versions of such sections and; // assume they are placed at the end.; // We also dump symbol tables when the Size field is set. It happens when they; // are empty, which should not normally happen.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/elf2yaml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/elf2yaml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/elf2yaml.cpp:128,Energy Efficiency,reduce,reduces,128,"// We only set the ""Offset"" field when it can't be naturally derived; // from the offset and size of the previous section. This reduces; // the noise in the YAML output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/elf2yaml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/elf2yaml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/elf2yaml.cpp:83,Security,access,access,83,// Dump symbols. We need to do this early because other sections might want; // to access the deduplicated symbol names that we also create here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/elf2yaml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/elf2yaml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/elf2yaml.cpp:62,Security,validat,validates,62,// The `getSHNDXTable` calls the `getSection` internally when validates; // the symbol table section linked to the SHT_SYMTAB_SHNDX section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/elf2yaml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/elf2yaml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/elf2yaml.cpp:37,Usability,simpl,simple,37,// We dump all sections first. It is simple and allows us to verify that all; // sections are valid and also to generalize the code. But we are not going to; // keep all of them in the final output (see comments for; // 'shouldPrintSection()'). Undesired chunks will be removed later.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/elf2yaml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/elf2yaml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/elf2yaml.cpp:106,Energy Efficiency,reduce,reduce,106,// yaml2obj sets the alignment of a segment to 1 by default.; // We do not print the default alignment to reduce noise in the output.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/elf2yaml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/elf2yaml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/macho2yaml.cpp:341,Availability,down,down,341,"/*!; * /brief processes a node from the export trie, and its children.; *; * To my knowledge there is no documentation of the encoded format of this data; * other than in the heads of the Apple linker engineers. To that end hopefully; * this comment and the implementation below can serve to light the way for; * anyone crazy enough to come down this path in the future.; *; * This function reads and preserves the trie structure of the export trie. To; * my knowledge there is no code anywhere else that reads the data and preserves; * the Trie. LD64 (sources available at opensource.apple.com) has a similar; * implementation that parses the export trie into a vector. That code as well; * as LLVM's libObject MachO implementation were the basis for this.; *; * The export trie is an encoded trie. The node serialization is a bit awkward.; * The below pseudo-code is the best description I've come up with for it.; *; * struct SerializedNode {; * ULEB128 TerminalSize;; * struct TerminalData { <-- This is only present if TerminalSize > 0; * ULEB128 Flags;; * ULEB128 Address; <-- Present if (! Flags & REEXPORT ); * ULEB128 Other; <-- Present if ( Flags & REEXPORT ||; * Flags & STUB_AND_RESOLVER ); * char[] ImportName; <-- Present if ( Flags & REEXPORT ); * }; * uint8_t ChildrenCount;; * Pair<char[], ULEB128> ChildNameOffsetPair[ChildrenCount];; * SerializedNode Children[ChildrenCount]; * }; *; * Terminal nodes are nodes that represent actual exports. They can appear; * anywhere in the tree other than at the root; they do not need to be leaf; * nodes. When reading the data out of the trie this routine reads it in-order,; * but it puts the child names and offsets directly into the child nodes. This; * results in looping over the children twice during serialization and; * de-serialization, but it makes the YAML representation more human readable.; *; * Below is an example of the graph from a ""Hello World"" executable:; *; * -------; * | '' |; * -------; * |; * -------; * | '_' |; * --",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/macho2yaml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/macho2yaml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/macho2yaml.cpp:561,Availability,avail,available,561,"/*!; * /brief processes a node from the export trie, and its children.; *; * To my knowledge there is no documentation of the encoded format of this data; * other than in the heads of the Apple linker engineers. To that end hopefully; * this comment and the implementation below can serve to light the way for; * anyone crazy enough to come down this path in the future.; *; * This function reads and preserves the trie structure of the export trie. To; * my knowledge there is no code anywhere else that reads the data and preserves; * the Trie. LD64 (sources available at opensource.apple.com) has a similar; * implementation that parses the export trie into a vector. That code as well; * as LLVM's libObject MachO implementation were the basis for this.; *; * The export trie is an encoded trie. The node serialization is a bit awkward.; * The below pseudo-code is the best description I've come up with for it.; *; * struct SerializedNode {; * ULEB128 TerminalSize;; * struct TerminalData { <-- This is only present if TerminalSize > 0; * ULEB128 Flags;; * ULEB128 Address; <-- Present if (! Flags & REEXPORT ); * ULEB128 Other; <-- Present if ( Flags & REEXPORT ||; * Flags & STUB_AND_RESOLVER ); * char[] ImportName; <-- Present if ( Flags & REEXPORT ); * }; * uint8_t ChildrenCount;; * Pair<char[], ULEB128> ChildNameOffsetPair[ChildrenCount];; * SerializedNode Children[ChildrenCount]; * }; *; * Terminal nodes are nodes that represent actual exports. They can appear; * anywhere in the tree other than at the root; they do not need to be leaf; * nodes. When reading the data out of the trie this routine reads it in-order,; * but it puts the child names and offsets directly into the child nodes. This; * results in looping over the children twice during serialization and; * de-serialization, but it makes the YAML representation more human readable.; *; * Below is an example of the graph from a ""Hello World"" executable:; *; * -------; * | '' |; * -------; * |; * -------; * | '_' |; * --",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/macho2yaml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/macho2yaml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/macho2yaml.cpp:1606,Integrability,rout,routine,1606,"there is no code anywhere else that reads the data and preserves; * the Trie. LD64 (sources available at opensource.apple.com) has a similar; * implementation that parses the export trie into a vector. That code as well; * as LLVM's libObject MachO implementation were the basis for this.; *; * The export trie is an encoded trie. The node serialization is a bit awkward.; * The below pseudo-code is the best description I've come up with for it.; *; * struct SerializedNode {; * ULEB128 TerminalSize;; * struct TerminalData { <-- This is only present if TerminalSize > 0; * ULEB128 Flags;; * ULEB128 Address; <-- Present if (! Flags & REEXPORT ); * ULEB128 Other; <-- Present if ( Flags & REEXPORT ||; * Flags & STUB_AND_RESOLVER ); * char[] ImportName; <-- Present if ( Flags & REEXPORT ); * }; * uint8_t ChildrenCount;; * Pair<char[], ULEB128> ChildNameOffsetPair[ChildrenCount];; * SerializedNode Children[ChildrenCount]; * }; *; * Terminal nodes are nodes that represent actual exports. They can appear; * anywhere in the tree other than at the root; they do not need to be leaf; * nodes. When reading the data out of the trie this routine reads it in-order,; * but it puts the child names and offsets directly into the child nodes. This; * results in looping over the children twice during serialization and; * de-serialization, but it makes the YAML representation more human readable.; *; * Below is an example of the graph from a ""Hello World"" executable:; *; * -------; * | '' |; * -------; * |; * -------; * | '_' |; * -------; * |; * |----------------------------------------|; * | |; * ------------------------ ---------------------; * | '_mh_execute_header' | | 'main' |; * | Flags: 0x00000000 | | Flags: 0x00000000 |; * | Addr: 0x00000000 | | Addr: 0x00001160 |; * ------------------------ ---------------------; *; * This graph represents the trie for the exports ""__mh_execute_header"" and; * ""_main"". In the graph only the ""_main"" and ""__mh_execute_header"" nodes are; * terminal.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/macho2yaml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/macho2yaml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/obj2yaml.h:328,Integrability,rout,routines,328,"//===------ utils/obj2yaml.hpp - obj2yaml conversion tool -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; // This file declares some helper routines, and also the format-specific; // writers. To add a new format, add the declaration here, and, in a separate; // source file, implement it.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/obj2yaml.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/obj2yaml.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/wasm2yaml.cpp:130,Safety,avoid,avoid,130,"// Only propagate the section size encoding length if it's not the minimal; // size or 5 (the default ""padded"" value). This is to avoid having every; // YAML output polluted with this value when we usually don't care about it; // (and avoid rewriting all the test expectations).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/wasm2yaml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/wasm2yaml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/wasm2yaml.cpp:235,Safety,avoid,avoid,235,"// Only propagate the section size encoding length if it's not the minimal; // size or 5 (the default ""padded"" value). This is to avoid having every; // YAML output polluted with this value when we usually don't care about it; // (and avoid rewriting all the test expectations).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/wasm2yaml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/wasm2yaml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/wasm2yaml.cpp:259,Testability,test,test,259,"// Only propagate the section size encoding length if it's not the minimal; // size or 5 (the default ""padded"" value). This is to avoid having every; // YAML output polluted with this value when we usually don't care about it; // (and avoid rewriting all the test expectations).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/obj2yaml/wasm2yaml.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/wasm2yaml.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp:439,Testability,log,logically,439,"//===- NewPMDriver.cpp - Driver for opt with new PM -----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file is just a split of the code that logically belongs in opt.cpp but; /// that includes the new pass manager headers.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp:67,Deployability,pipeline,pipeline,67,"// This flag specifies a textual description of the alias analysis pipeline to; // use when querying for aliasing information. It only works in concert with; // the ""passes"" flag above.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp:37,Deployability,pipeline,pipeline,37,/// {{@ These options accept textual pipeline descriptions which will be; /// inserted into default pipelines at the respective extension points,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp:100,Deployability,pipeline,pipelines,100,/// {{@ These options accept textual pipeline descriptions which will be; /// inserted into default pipelines at the respective extension points,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp:14,Deployability,pipeline,pipeline,14,// Verify the pipeline is parseable:,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp:121,Deployability,pipeline,pipeline,121,"/// If one of the EPPipeline command line options was given, register callbacks; /// for parsing and inserting the given pipeline",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp:18,Modifiability,plugin,plugins,18,"// For any loaded plugins, let them register pass builder callbacks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp:11,Performance,load,loaded,11,"// For any loaded plugins, let them register pass builder callbacks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp:84,Deployability,pipeline,pipeline,84,// Specially handle the alias analysis manager so that we can register; // a custom pipeline of AA passes with it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp:50,Deployability,pipeline,pipeline,50,// Add any relevant output pass at the end of the pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp:61,Deployability,pipeline,pipeline,61,"// Print a textual, '-passes=' compatible, representation of pipeline if; // requested.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp:40,Deployability,pipeline,pipeline,40,// Check that we can parse the returned pipeline string as an actual; // pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp:73,Deployability,pipeline,pipeline,73,// Check that we can parse the returned pipeline string as an actual; // pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.h:680,Integrability,rout,routines,680,"//===- NewPMDriver.h - Function to drive opt with the new PM ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// A single function which is called to drive the opt behavior for the new; /// PassManager.; ///; /// This is only in a separate TU with a header to avoid including all of the; /// old pass manager headers and the new pass manager headers into the same; /// file. Eventually all of the routines here will get folded back into; /// opt.cpp.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/NewPMDriver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.h:543,Safety,avoid,avoid,543,"//===- NewPMDriver.h - Function to drive opt with the new PM ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// A single function which is called to drive the opt behavior for the new; /// PassManager.; ///; /// This is only in a separate TU with a header to avoid including all of the; /// old pass manager headers and the new pass manager headers into the same; /// file. Eventually all of the routines here will get folded back into; /// opt.cpp.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/NewPMDriver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.h:243,Integrability,interface,interface,243,"/// Driver function to run the new pass manager over a module.; ///; /// This function only exists factored away from opt.cpp in order to prevent; /// inclusion of the new pass manager headers and the old headers into the same; /// file. It's interface is consequentially somewhat ad-hoc, but will go away; /// when the transition finishes.; ///; /// ThinLTOLinkOut is only used when OK is OK_OutputThinLTOBitcode, and can be; /// nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/NewPMDriver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/NewPMDriver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:34,Performance,Optimiz,Optimizer,34,"//===- opt.cpp - The LLVM Modular Optimizer -------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Optimizations may be specified an arbitrary number of times on the command; // line, They are run in the order specified.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/opt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:383,Performance,Optimiz,Optimizations,383,"//===- opt.cpp - The LLVM Modular Optimizer -------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Optimizations may be specified an arbitrary number of times on the command; // line, They are run in the order specified.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/opt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:7,Performance,Optimiz,OptimizationList,7,// The OptimizationList is automatically populated with registered Passes by the; // PassNameParser.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/opt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:70,Deployability,pipeline,pipeline,70,"// This flag specifies a textual description of the optimization pass pipeline; // to run over the module. This flag switches opt to use the new pass manager; // infrastructure, completely disabling all of the flags specific to the old; // pass management.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/opt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:52,Performance,optimiz,optimization,52,"// This flag specifies a textual description of the optimization pass pipeline; // to run over the module. This flag switches opt to use the new pass manager; // infrastructure, completely disabling all of the flags specific to the old; // pass management.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/opt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:36,Testability,test,tests,36,"// RemoveDIs debug-info transition: tests may request that we /try/ to use the; // new debug-info format, if it's built in.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/opt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:3,Performance,Load,Load,3,// Load the input module...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/opt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:149,Integrability,depend,dependent,149,"// If the triple string is still empty, we don't fall back to; // sys::getDefaultTargetTriple() since we do not want to have differing; // behaviour dependent on the configured default triple. Therefore, if the; // user did not pass -mtriple or define an explicit triple/datalayout in; // the IR, we should default to an empty (default) DataLayout.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/opt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:166,Modifiability,config,configured,166,"// If the triple string is still empty, we don't fall back to; // sys::getDefaultTargetTriple() since we do not want to have differing; // behaviour dependent on the configured default triple. Therefore, if the; // user did not pass -mtriple or define an explicit triple/datalayout in; // the IR, we should default to an empty (default) DataLayout.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/opt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:86,Deployability,pipeline,pipelines,86,// Immediately run the verifier to catch any problems before starting up the; // pass pipelines. Otherwise we can crash on broken code during; // doInitialization().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/opt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:246,Performance,perform,performed,246,// Enable testing of whole program devirtualization on this module by invoking; // the facility for updating public visibility to linkage unit visibility when; // specified by an internal option. This is normally done during LTO which is; // not performed via opt.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/opt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:10,Testability,test,testing,10,// Enable testing of whole program devirtualization on this module by invoking; // the facility for updating public visibility to linkage unit visibility when; // specified by an internal option. This is normally done during LTO which is; // not performed via opt.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/opt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:58,Integrability,interface,interface,58,// FIXME: These need linker information via a; // TBD new interface.; /*DynamicExportSymbols=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/opt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:2,Security,Validat,ValidateAllVtablesHaveTypeInfos,2,/*ValidateAllVtablesHaveTypeInfos=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/opt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:110,Integrability,message,message,110,"// If the output is set to be emitted to standard out, and standard out is a; // console, print out a warning message and refuse to do it. We don't; // impress anyone by spewing tons of binary goo to a terminal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/opt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:16,Usability,simpl,simplify-libcalls,16,// The -disable-simplify-libcalls flag actually disables all builtin optzns.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/opt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:65,Deployability,pipeline,pipeline,65,// The user has asked to use the new pass manager and provided a pipeline; // string. Hand off the rest of the functionality to the new code for that; // layer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/opt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:134,Integrability,wrap,wrap,134,"// Create a PassManager to hold and optimize the collection of passes we are; // about to build. If the -debugify-each option is set, wrap each pass with; // the (-check)-debugify passes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/opt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:36,Performance,optimiz,optimize,36,"// Create a PassManager to hold and optimize the collection of passes we are; // about to build. If the -debugify-each option is set, wrap each pass with; // the (-check)-debugify passes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/opt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:16,Performance,optimiz,optimization,16,// Create a new optimization pass for each one specified on the command line,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/opt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp:57,Performance,optimiz,optimization,57,// Check that the module is well formed on completion of optimization,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt/opt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt/opt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-diff.py:152,Integrability,depend,depending,152,"""""""Generate the difference of two YAML files into a new YAML file (works on; pair of directories too). A new attribute 'Added' is set to True or False; depending whether the entry is added or removed from the first input to the; next. The tools requires PyYAML.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-diff.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-diff.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-stats.py:29,Performance,optimiz,optimization,29,"""""""Generate statistics about optimization records from the YAML files; generated with -fsave-optimization-record and -fdiagnostics-show-hotness. The tools requires PyYAML and Pygments Python packages.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-stats.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-stats.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-stats.py:93,Performance,optimiz,optimization-record,93,"""""""Generate statistics about optimization records from the YAML files; generated with -fsave-optimization-record and -fdiagnostics-show-hotness. The tools requires PyYAML and Pygments Python packages.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-stats.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-stats.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py:37,Performance,optimiz,optimization,37,"""""""Generate HTML output to visualize optimization records from the YAML files; generated with -fsave-optimization-record and -fdiagnostics-show-hotness. The tools requires PyYAML and Pygments Python packages.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py:101,Performance,optimiz,optimization-record,101,"""""""Generate HTML output to visualize optimization records from the YAML files; generated with -fsave-optimization-record and -fdiagnostics-show-hotness. The tools requires PyYAML and Pygments Python packages.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py:18,Integrability,message,message,18,# Create expanded message and link if we have a multiline message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py:58,Integrability,message,message,58,# Create expanded message and link if we have a multiline message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py:215,Integrability,message,message,215,"""""""; <tr>; <td></td>; <td>{r.RelativeHotness}</td>; <td class=\""column-entry-{r.color}\"">{r.PassWithDiffPrefix}</td>; <td><pre style=""display:inline"">{indent}</pre><span class=\""column-entry-yellow\"">{expand_link} {message}&nbsp;</span>{expand_message}</td>; <td class=\""column-entry-yellow\"">{inlining_context}</td>; </tr>""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py:234,Deployability,toggle,toggleExpandedMessage,234,"""""""; <html>; <title>{}</title>; <meta charset=""utf-8"" />; <head>; <link rel='stylesheet' type='text/css' href='style.css'>; <script type=""text/javascript"">; /* Simple helper to show/hide the expanded message of a remark. */; function toggleExpandedMessage(e) {{; var FullTextElems = e.parentElement.parentElement.getElementsByClassName(""full-info"");; if (!FullTextElems || FullTextElems.length < 1) {{; return false;; }}; var FullText = FullTextElems[0];; if (FullText.style.display == 'none') {{; e.innerHTML = '-';; FullText.style.display = 'block';; }} else {{; e.innerHTML = '+';; FullText.style.display = 'none';; }}; }}; </script>; </head>; <body>; <div class=""centered"">; <table class=""source"">; <thead>; <tr>; <th style=""width: 2%"">Line</td>; <th style=""width: 3%"">Hotness</td>; <th style=""width: 10%"">Optimization</td>; <th style=""width: 70%"">Source</td>; <th style=""width: 15%"">Inline Context</td>; </tr>; </thead>; <tbody>""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py:200,Integrability,message,message,200,"""""""; <html>; <title>{}</title>; <meta charset=""utf-8"" />; <head>; <link rel='stylesheet' type='text/css' href='style.css'>; <script type=""text/javascript"">; /* Simple helper to show/hide the expanded message of a remark. */; function toggleExpandedMessage(e) {{; var FullTextElems = e.parentElement.parentElement.getElementsByClassName(""full-info"");; if (!FullTextElems || FullTextElems.length < 1) {{; return false;; }}; var FullText = FullTextElems[0];; if (FullText.style.display == 'none') {{; e.innerHTML = '-';; FullText.style.display = 'block';; }} else {{; e.innerHTML = '+';; FullText.style.display = 'none';; }}; }}; </script>; </head>; <body>; <div class=""centered"">; <table class=""source"">; <thead>; <tr>; <th style=""width: 2%"">Line</td>; <th style=""width: 3%"">Hotness</td>; <th style=""width: 10%"">Optimization</td>; <th style=""width: 70%"">Source</td>; <th style=""width: 15%"">Inline Context</td>; </tr>; </thead>; <tbody>""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py:810,Performance,Optimiz,Optimization,810,"""""""; <html>; <title>{}</title>; <meta charset=""utf-8"" />; <head>; <link rel='stylesheet' type='text/css' href='style.css'>; <script type=""text/javascript"">; /* Simple helper to show/hide the expanded message of a remark. */; function toggleExpandedMessage(e) {{; var FullTextElems = e.parentElement.parentElement.getElementsByClassName(""full-info"");; if (!FullTextElems || FullTextElems.length < 1) {{; return false;; }}; var FullText = FullTextElems[0];; if (FullText.style.display == 'none') {{; e.innerHTML = '-';; FullText.style.display = 'block';; }} else {{; e.innerHTML = '+';; FullText.style.display = 'none';; }}; }}; </script>; </head>; <body>; <div class=""centered"">; <table class=""source"">; <thead>; <tr>; <th style=""width: 2%"">Line</td>; <th style=""width: 3%"">Hotness</td>; <th style=""width: 10%"">Optimization</td>; <th style=""width: 70%"">Source</td>; <th style=""width: 15%"">Inline Context</td>; </tr>; </thead>; <tbody>""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py:160,Usability,Simpl,Simple,160,"""""""; <html>; <title>{}</title>; <meta charset=""utf-8"" />; <head>; <link rel='stylesheet' type='text/css' href='style.css'>; <script type=""text/javascript"">; /* Simple helper to show/hide the expanded message of a remark. */; function toggleExpandedMessage(e) {{; var FullTextElems = e.parentElement.parentElement.getElementsByClassName(""full-info"");; if (!FullTextElems || FullTextElems.length < 1) {{; return false;; }}; var FullText = FullTextElems[0];; if (FullText.style.display == 'none') {{; e.innerHTML = '-';; FullText.style.display = 'block';; }} else {{; e.innerHTML = '+';; FullText.style.display = 'none';; }}; }}; </script>; </head>; <body>; <div class=""centered"">; <table class=""source"">; <thead>; <tr>; <th style=""width: 2%"">Line</td>; <th style=""width: 3%"">Hotness</td>; <th style=""width: 10%"">Optimization</td>; <th style=""width: 70%"">Source</td>; <th style=""width: 15%"">Inline Context</td>; </tr>; </thead>; <tbody>""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py:28,Modifiability,variab,variable,28,# Do not make this a global variable. Values needed to be propagated through; # to individual classes and functions to be portable with multiprocessing across; # Windows and non-Windows.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py:122,Modifiability,portab,portable,122,# Do not make this a global variable. Values needed to be propagated through; # to individual classes and functions to be portable with multiprocessing across; # Windows and non-Windows.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/opt-viewer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py:372,Security,hash,hashable,372,"# Intern all strings since we have lot of duplication across filenames,; # remark text.; #; # Change Args from a list of dicts to a tuple of tuples. This saves; # memory in two ways. One, a small tuple is significantly smaller than a; # small dict. Two, using tuple instead of list allows Args to be directly; # used as part of the key (in Python only immutable types are hashable).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py:56,Performance,optimiz,optimization,56,"# The inverse operation of the dictonary-related memory optimization in; # _reduce_memory_dict. E.g.; # (('DebugLoc', (('File', ...) ... ))) -> [{'DebugLoc': {'File': ...} ....}]",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py:11,Performance,cache,cached,11,# Return a cached dictionary for the arguments. The key for each entry is; # the argument key (e.g. 'Callee' for inlining remarks. The value is a; # list containing the value (e.g. for 'Callee' the function) and; # optionally a DebugLoc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py:2,Safety,Avoid,Avoid,2,# Avoid remarks withoug debug location or if they are duplicated,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py:73,Integrability,depend,depend,73,# Bring max_hotness into the remarks so that; # RelativeHotness does not depend on an external global.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/opt-viewer/optrecord.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sancov/sancov.cpp:438,Security,sanitiz,sanitizer,438,"//===-- sancov.cpp --------------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This file is a command-line tool for reading and analyzing sanitizer; // coverage.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/sancov/sancov.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sancov/sancov.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sancov/sancov.cpp:70,Availability,avail,available,70,// Symcov file content: set of covered Ids plus information about all available; // coverage points.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/sancov/sancov.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sancov/sancov.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sancov/sancov.cpp:13,Availability,ERROR,ERROR,13,// --------- ERROR HANDLING ---------,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/sancov/sancov.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sancov/sancov.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sancov/sancov.cpp:57,Testability,stub,stubs,57,// Locate __sanitizer_cov* function addresses inside the stubs table on MachO.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/sancov/sancov.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sancov/sancov.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sancov/sancov.cpp:19,Availability,error,error,19,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/sancov/sancov.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sancov/sancov.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sancov/sancov.cpp:9,Testability,Test,Test,9,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/sancov/sancov.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sancov/sancov.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sancov/sancov.cpp:3,Security,Sanitiz,Sanitizer,3,// Sanitizer coverage uses the address of the next instruction - 1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/sancov/sancov.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sancov/sancov.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sanstats/sanstats.cpp:22,Security,Sanitiz,Sanitizer,22,"//===- sanstats.cpp - Sanitizer statistics dumper -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This tool dumps statistics information from files in the format produced; // by clang's -fsanitize-stats feature.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/sanstats/sanstats.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/sanstats/sanstats.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/verify-uselistorder/verify-uselistorder.cpp:50,Performance,Optimiz,Optimizer,50,"//===- verify-uselistorder.cpp - The LLVM Modular Optimizer ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Verify that use-list order can be serialized correctly. After reading the; // provided IR, this tool shuffles the use-lists and then writes and reads to a; // separate Module whose use-list orders are compared to the original.; //; // The shuffles are deterministic, but guarantee that use-lists will change.; // The algorithm per iteration is as follows:; //; // 1. Seed the random number generator. The seed is different for each; // shuffle. Shuffle 0 uses default+0, shuffle 1 uses default+1, and so on.; //; // 2. Visit every Value in a deterministic order.; //; // 3. Assign a random number to each Use in the Value's use-list in order.; //; // 4. If the numbers are already in order, reassign numbers until they aren't.; //; // 5. Sort the use-list using Value::sortUseList(), which is a stable sort.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/verify-uselistorder/verify-uselistorder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/verify-uselistorder/verify-uselistorder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/verify-uselistorder/verify-uselistorder.cpp:27,Integrability,wrap,wrapper,27,// Look through a metadata wrapper.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/verify-uselistorder/verify-uselistorder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/verify-uselistorder/verify-uselistorder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/verify-uselistorder/verify-uselistorder.cpp:27,Integrability,wrap,wrapper,27,// Look through a metadata wrapper.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/verify-uselistorder/verify-uselistorder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/verify-uselistorder/verify-uselistorder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/verify-uselistorder/verify-uselistorder.cpp:3,Performance,Load,Load,3,// Load the input module...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/verify-uselistorder/verify-uselistorder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/verify-uselistorder/verify-uselistorder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp:297,Testability,assert,asserts,297,// Make sure that whatever symbol the demangler is operating on is; // present in the module (the signature is not important). This is; // because `tryDemangleForVFABI` fails if the function is not; // present. We need to make sure we can even invoke; // `getOrInsertFunction` because such method asserts on strings with; // zeroes.; // TODO: What is this actually testing? That we don't crash?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp:365,Testability,test,testing,365,// Make sure that whatever symbol the demangler is operating on is; // present in the module (the signature is not important). This is; // because `tryDemangleForVFABI` fails if the function is not; // present. We need to make sure we can even invoke; // `getOrInsertFunction` because such method asserts on strings with; // zeroes.; // TODO: What is this actually testing? That we don't crash?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp:10,Performance,optimiz,optimize,10,// Do not optimize away the return value. Inspired by; // https://github.com/google/benchmark/blob/main/include/benchmark/benchmark.h#L307-L345,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp:84,Testability,benchmark,benchmark,84,// Do not optimize away the return value. Inspired by; // https://github.com/google/benchmark/blob/main/include/benchmark/benchmark.h#L307-L345,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp:112,Testability,benchmark,benchmark,112,// Do not optimize away the return value. Inspired by; // https://github.com/google/benchmark/blob/main/include/benchmark/benchmark.h#L307-L345,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp:122,Testability,benchmark,benchmark,122,// Do not optimize away the return value. Inspired by; // https://github.com/google/benchmark/blob/main/include/benchmark/benchmark.h#L307-L345,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/vfabi-demangle-fuzzer/vfabi-demangler-fuzzer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/yaml2obj/yaml2obj.cpp:511,Testability,test,tests,511,"//===- yaml2obj - Convert YAML to a binary object file --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program takes a YAML description of an object file and outputs the; // binary equivalent.; //; // This is used for writing tests that require binary files.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/tools/yaml2obj/yaml2obj.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/yaml2obj/yaml2obj.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:65,Availability,down,down,65,"#!/usr/bin/env python; #; # Given a previous good compile narrow down miscompiles.; # Expects two directories named ""before"" and ""after"" each containing a set of; # assembly or object files where the ""after"" version is assumed to be broken.; # You also have to provide a script called ""link_test"". It is called with a; # list of files which should be linked together and result tested. ""link_test""; # should returns with exitcode 0 if the linking and testing succeeded.; #; # If a response file is provided, only the object files that are listed in the; # file are inspected. In addition, the ""link_test"" is called with a temporary; # response file representing one iteration of bisection.; #; # abtest.py operates by taking all files from the ""before"" directory and; # in each step replacing one of them with a file from the ""bad"" directory.; #; # Additionally you can perform the same steps with a single .s file. In this; # mode functions are identified by "" -- Begin function FunctionName"" and; # "" -- End function"" markers. The abtest.py then takes all; # function from the file in the ""before"" directory and replaces one function; # with the corresponding function from the ""bad"" file in each step.; #; # Example usage to identify miscompiled files:; # 1. Create a link_test script, make it executable. Simple Example:; # clang ""$@"" -o /tmp/test && /tmp/test || echo ""PROBLEM""; # 2. Run the script to figure out which files are miscompiled:; # > ./abtest.py; # somefile.s: ok; # someotherfile.s: skipped: same content; # anotherfile.s: failed: './link_test' exitcode != 0; # ...; # Example usage to identify miscompiled functions inside a file:; # 3. Run the tests on a single file (assuming before/file.s and; # after/file.s exist); # > ./abtest.py file.s; # funcname1 [0/XX]: ok; # funcname2 [1/XX]: ok; # funcname3 [2/XX]: skipped: same content; # funcname4 [3/XX]: failed: './link_test' exitcode != 0; # ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:1368,Availability,echo,echo,1368,"#!/usr/bin/env python; #; # Given a previous good compile narrow down miscompiles.; # Expects two directories named ""before"" and ""after"" each containing a set of; # assembly or object files where the ""after"" version is assumed to be broken.; # You also have to provide a script called ""link_test"". It is called with a; # list of files which should be linked together and result tested. ""link_test""; # should returns with exitcode 0 if the linking and testing succeeded.; #; # If a response file is provided, only the object files that are listed in the; # file are inspected. In addition, the ""link_test"" is called with a temporary; # response file representing one iteration of bisection.; #; # abtest.py operates by taking all files from the ""before"" directory and; # in each step replacing one of them with a file from the ""bad"" directory.; #; # Additionally you can perform the same steps with a single .s file. In this; # mode functions are identified by "" -- Begin function FunctionName"" and; # "" -- End function"" markers. The abtest.py then takes all; # function from the file in the ""before"" directory and replaces one function; # with the corresponding function from the ""bad"" file in each step.; #; # Example usage to identify miscompiled files:; # 1. Create a link_test script, make it executable. Simple Example:; # clang ""$@"" -o /tmp/test && /tmp/test || echo ""PROBLEM""; # 2. Run the script to figure out which files are miscompiled:; # > ./abtest.py; # somefile.s: ok; # someotherfile.s: skipped: same content; # anotherfile.s: failed: './link_test' exitcode != 0; # ...; # Example usage to identify miscompiled functions inside a file:; # 3. Run the tests on a single file (assuming before/file.s and; # after/file.s exist); # > ./abtest.py file.s; # funcname1 [0/XX]: ok; # funcname2 [1/XX]: ok; # funcname3 [2/XX]: skipped: same content; # funcname4 [3/XX]: failed: './link_test' exitcode != 0; # ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:870,Performance,perform,perform,870,"#!/usr/bin/env python; #; # Given a previous good compile narrow down miscompiles.; # Expects two directories named ""before"" and ""after"" each containing a set of; # assembly or object files where the ""after"" version is assumed to be broken.; # You also have to provide a script called ""link_test"". It is called with a; # list of files which should be linked together and result tested. ""link_test""; # should returns with exitcode 0 if the linking and testing succeeded.; #; # If a response file is provided, only the object files that are listed in the; # file are inspected. In addition, the ""link_test"" is called with a temporary; # response file representing one iteration of bisection.; #; # abtest.py operates by taking all files from the ""before"" directory and; # in each step replacing one of them with a file from the ""bad"" directory.; #; # Additionally you can perform the same steps with a single .s file. In this; # mode functions are identified by "" -- Begin function FunctionName"" and; # "" -- End function"" markers. The abtest.py then takes all; # function from the file in the ""before"" directory and replaces one function; # with the corresponding function from the ""bad"" file in each step.; #; # Example usage to identify miscompiled files:; # 1. Create a link_test script, make it executable. Simple Example:; # clang ""$@"" -o /tmp/test && /tmp/test || echo ""PROBLEM""; # 2. Run the script to figure out which files are miscompiled:; # > ./abtest.py; # somefile.s: ok; # someotherfile.s: skipped: same content; # anotherfile.s: failed: './link_test' exitcode != 0; # ...; # Example usage to identify miscompiled functions inside a file:; # 3. Run the tests on a single file (assuming before/file.s and; # after/file.s exist); # > ./abtest.py file.s; # funcname1 [0/XX]: ok; # funcname2 [1/XX]: ok; # funcname3 [2/XX]: skipped: same content; # funcname4 [3/XX]: failed: './link_test' exitcode != 0; # ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:378,Testability,test,tested,378,"#!/usr/bin/env python; #; # Given a previous good compile narrow down miscompiles.; # Expects two directories named ""before"" and ""after"" each containing a set of; # assembly or object files where the ""after"" version is assumed to be broken.; # You also have to provide a script called ""link_test"". It is called with a; # list of files which should be linked together and result tested. ""link_test""; # should returns with exitcode 0 if the linking and testing succeeded.; #; # If a response file is provided, only the object files that are listed in the; # file are inspected. In addition, the ""link_test"" is called with a temporary; # response file representing one iteration of bisection.; #; # abtest.py operates by taking all files from the ""before"" directory and; # in each step replacing one of them with a file from the ""bad"" directory.; #; # Additionally you can perform the same steps with a single .s file. In this; # mode functions are identified by "" -- Begin function FunctionName"" and; # "" -- End function"" markers. The abtest.py then takes all; # function from the file in the ""before"" directory and replaces one function; # with the corresponding function from the ""bad"" file in each step.; #; # Example usage to identify miscompiled files:; # 1. Create a link_test script, make it executable. Simple Example:; # clang ""$@"" -o /tmp/test && /tmp/test || echo ""PROBLEM""; # 2. Run the script to figure out which files are miscompiled:; # > ./abtest.py; # somefile.s: ok; # someotherfile.s: skipped: same content; # anotherfile.s: failed: './link_test' exitcode != 0; # ...; # Example usage to identify miscompiled functions inside a file:; # 3. Run the tests on a single file (assuming before/file.s and; # after/file.s exist); # > ./abtest.py file.s; # funcname1 [0/XX]: ok; # funcname2 [1/XX]: ok; # funcname3 [2/XX]: skipped: same content; # funcname4 [3/XX]: failed: './link_test' exitcode != 0; # ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:451,Testability,test,testing,451,"#!/usr/bin/env python; #; # Given a previous good compile narrow down miscompiles.; # Expects two directories named ""before"" and ""after"" each containing a set of; # assembly or object files where the ""after"" version is assumed to be broken.; # You also have to provide a script called ""link_test"". It is called with a; # list of files which should be linked together and result tested. ""link_test""; # should returns with exitcode 0 if the linking and testing succeeded.; #; # If a response file is provided, only the object files that are listed in the; # file are inspected. In addition, the ""link_test"" is called with a temporary; # response file representing one iteration of bisection.; #; # abtest.py operates by taking all files from the ""before"" directory and; # in each step replacing one of them with a file from the ""bad"" directory.; #; # Additionally you can perform the same steps with a single .s file. In this; # mode functions are identified by "" -- Begin function FunctionName"" and; # "" -- End function"" markers. The abtest.py then takes all; # function from the file in the ""before"" directory and replaces one function; # with the corresponding function from the ""bad"" file in each step.; #; # Example usage to identify miscompiled files:; # 1. Create a link_test script, make it executable. Simple Example:; # clang ""$@"" -o /tmp/test && /tmp/test || echo ""PROBLEM""; # 2. Run the script to figure out which files are miscompiled:; # > ./abtest.py; # somefile.s: ok; # someotherfile.s: skipped: same content; # anotherfile.s: failed: './link_test' exitcode != 0; # ...; # Example usage to identify miscompiled functions inside a file:; # 3. Run the tests on a single file (assuming before/file.s and; # after/file.s exist); # > ./abtest.py file.s; # funcname1 [0/XX]: ok; # funcname2 [1/XX]: ok; # funcname3 [2/XX]: skipped: same content; # funcname4 [3/XX]: failed: './link_test' exitcode != 0; # ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:1347,Testability,test,test,1347,"#!/usr/bin/env python; #; # Given a previous good compile narrow down miscompiles.; # Expects two directories named ""before"" and ""after"" each containing a set of; # assembly or object files where the ""after"" version is assumed to be broken.; # You also have to provide a script called ""link_test"". It is called with a; # list of files which should be linked together and result tested. ""link_test""; # should returns with exitcode 0 if the linking and testing succeeded.; #; # If a response file is provided, only the object files that are listed in the; # file are inspected. In addition, the ""link_test"" is called with a temporary; # response file representing one iteration of bisection.; #; # abtest.py operates by taking all files from the ""before"" directory and; # in each step replacing one of them with a file from the ""bad"" directory.; #; # Additionally you can perform the same steps with a single .s file. In this; # mode functions are identified by "" -- Begin function FunctionName"" and; # "" -- End function"" markers. The abtest.py then takes all; # function from the file in the ""before"" directory and replaces one function; # with the corresponding function from the ""bad"" file in each step.; #; # Example usage to identify miscompiled files:; # 1. Create a link_test script, make it executable. Simple Example:; # clang ""$@"" -o /tmp/test && /tmp/test || echo ""PROBLEM""; # 2. Run the script to figure out which files are miscompiled:; # > ./abtest.py; # somefile.s: ok; # someotherfile.s: skipped: same content; # anotherfile.s: failed: './link_test' exitcode != 0; # ...; # Example usage to identify miscompiled functions inside a file:; # 3. Run the tests on a single file (assuming before/file.s and; # after/file.s exist); # > ./abtest.py file.s; # funcname1 [0/XX]: ok; # funcname2 [1/XX]: ok; # funcname3 [2/XX]: skipped: same content; # funcname4 [3/XX]: failed: './link_test' exitcode != 0; # ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:1360,Testability,test,test,1360,"#!/usr/bin/env python; #; # Given a previous good compile narrow down miscompiles.; # Expects two directories named ""before"" and ""after"" each containing a set of; # assembly or object files where the ""after"" version is assumed to be broken.; # You also have to provide a script called ""link_test"". It is called with a; # list of files which should be linked together and result tested. ""link_test""; # should returns with exitcode 0 if the linking and testing succeeded.; #; # If a response file is provided, only the object files that are listed in the; # file are inspected. In addition, the ""link_test"" is called with a temporary; # response file representing one iteration of bisection.; #; # abtest.py operates by taking all files from the ""before"" directory and; # in each step replacing one of them with a file from the ""bad"" directory.; #; # Additionally you can perform the same steps with a single .s file. In this; # mode functions are identified by "" -- Begin function FunctionName"" and; # "" -- End function"" markers. The abtest.py then takes all; # function from the file in the ""before"" directory and replaces one function; # with the corresponding function from the ""bad"" file in each step.; #; # Example usage to identify miscompiled files:; # 1. Create a link_test script, make it executable. Simple Example:; # clang ""$@"" -o /tmp/test && /tmp/test || echo ""PROBLEM""; # 2. Run the script to figure out which files are miscompiled:; # > ./abtest.py; # somefile.s: ok; # someotherfile.s: skipped: same content; # anotherfile.s: failed: './link_test' exitcode != 0; # ...; # Example usage to identify miscompiled functions inside a file:; # 3. Run the tests on a single file (assuming before/file.s and; # after/file.s exist); # > ./abtest.py file.s; # funcname1 [0/XX]: ok; # funcname2 [1/XX]: ok; # funcname3 [2/XX]: skipped: same content; # funcname4 [3/XX]: failed: './link_test' exitcode != 0; # ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:1665,Testability,test,tests,1665,"#!/usr/bin/env python; #; # Given a previous good compile narrow down miscompiles.; # Expects two directories named ""before"" and ""after"" each containing a set of; # assembly or object files where the ""after"" version is assumed to be broken.; # You also have to provide a script called ""link_test"". It is called with a; # list of files which should be linked together and result tested. ""link_test""; # should returns with exitcode 0 if the linking and testing succeeded.; #; # If a response file is provided, only the object files that are listed in the; # file are inspected. In addition, the ""link_test"" is called with a temporary; # response file representing one iteration of bisection.; #; # abtest.py operates by taking all files from the ""before"" directory and; # in each step replacing one of them with a file from the ""bad"" directory.; #; # Additionally you can perform the same steps with a single .s file. In this; # mode functions are identified by "" -- Begin function FunctionName"" and; # "" -- End function"" markers. The abtest.py then takes all; # function from the file in the ""before"" directory and replaces one function; # with the corresponding function from the ""bad"" file in each step.; #; # Example usage to identify miscompiled files:; # 1. Create a link_test script, make it executable. Simple Example:; # clang ""$@"" -o /tmp/test && /tmp/test || echo ""PROBLEM""; # 2. Run the script to figure out which files are miscompiled:; # > ./abtest.py; # somefile.s: ok; # someotherfile.s: skipped: same content; # anotherfile.s: failed: './link_test' exitcode != 0; # ...; # Example usage to identify miscompiled functions inside a file:; # 3. Run the tests on a single file (assuming before/file.s and; # after/file.s exist); # > ./abtest.py file.s; # funcname1 [0/XX]: ok; # funcname2 [1/XX]: ok; # funcname3 [2/XX]: skipped: same content; # funcname4 [3/XX]: failed: './link_test' exitcode != 0; # ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:1309,Usability,Simpl,Simple,1309,"#!/usr/bin/env python; #; # Given a previous good compile narrow down miscompiles.; # Expects two directories named ""before"" and ""after"" each containing a set of; # assembly or object files where the ""after"" version is assumed to be broken.; # You also have to provide a script called ""link_test"". It is called with a; # list of files which should be linked together and result tested. ""link_test""; # should returns with exitcode 0 if the linking and testing succeeded.; #; # If a response file is provided, only the object files that are listed in the; # file are inspected. In addition, the ""link_test"" is called with a temporary; # response file representing one iteration of bisection.; #; # abtest.py operates by taking all files from the ""before"" directory and; # in each step replacing one of them with a file from the ""bad"" directory.; #; # Additionally you can perform the same steps with a single .s file. In this; # mode functions are identified by "" -- Begin function FunctionName"" and; # "" -- End function"" markers. The abtest.py then takes all; # function from the file in the ""before"" directory and replaces one function; # with the corresponding function from the ""bad"" file in each step.; #; # Example usage to identify miscompiled files:; # 1. Create a link_test script, make it executable. Simple Example:; # clang ""$@"" -o /tmp/test && /tmp/test || echo ""PROBLEM""; # 2. Run the script to figure out which files are miscompiled:; # > ./abtest.py; # somefile.s: ok; # someotherfile.s: skipped: same content; # anotherfile.s: failed: './link_test' exitcode != 0; # ...; # Example usage to identify miscompiled functions inside a file:; # 3. Run the tests on a single file (assuming before/file.s and; # after/file.s exist); # > ./abtest.py file.s; # funcname1 [0/XX]: ok; # funcname2 [1/XX]: ok; # funcname3 [2/XX]: skipped: same content; # funcname4 [3/XX]: failed: './link_test' exitcode != 0; # ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:26,Testability,test,test,26,# Specify LINKTEST via `--test`. Default value is './link_test'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:191,Availability,failure,failure,191,# TODO:; # - We could optimize based on the knowledge that when splitting a failed; # partition into two and one side checks out okay then we can deduce that; # the other partition must be a failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:22,Performance,optimiz,optimize,22,# TODO:; # - We could optimize based on the knowledge that when splitting a failed; # partition into two and one side checks out okay then we can deduce that; # the other partition must be a failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py:33,Safety,sanity check,sanity check,33,# This shouldn't happen when the sanity check works...; # Maybe link_test isn't deterministic?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/abtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/abtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py:22,Availability,failure,failures,22,"""""""Reduces GlobalISel failures. This script is a utility to reduce tests that GlobalISel; fails to compile. It runs llc to get the error message using a regex and creates; a custom command to check that specific error. Then, it runs bugpoint; with the custom command. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py:131,Availability,error,error,131,"""""""Reduces GlobalISel failures. This script is a utility to reduce tests that GlobalISel; fails to compile. It runs llc to get the error message using a regex and creates; a custom command to check that specific error. Then, it runs bugpoint; with the custom command. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py:212,Availability,error,error,212,"""""""Reduces GlobalISel failures. This script is a utility to reduce tests that GlobalISel; fails to compile. It runs llc to get the error message using a regex and creates; a custom command to check that specific error. Then, it runs bugpoint; with the custom command. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py:3,Energy Efficiency,Reduce,Reduces,3,"""""""Reduces GlobalISel failures. This script is a utility to reduce tests that GlobalISel; fails to compile. It runs llc to get the error message using a regex and creates; a custom command to check that specific error. Then, it runs bugpoint; with the custom command. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py:60,Energy Efficiency,reduce,reduce,60,"""""""Reduces GlobalISel failures. This script is a utility to reduce tests that GlobalISel; fails to compile. It runs llc to get the error message using a regex and creates; a custom command to check that specific error. Then, it runs bugpoint; with the custom command. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py:137,Integrability,message,message,137,"""""""Reduces GlobalISel failures. This script is a utility to reduce tests that GlobalISel; fails to compile. It runs llc to get the error message using a regex and creates; a custom command to check that specific error. Then, it runs bugpoint; with the custom command. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py:67,Testability,test,tests,67,"""""""Reduces GlobalISel failures. This script is a utility to reduce tests that GlobalISel; fails to compile. It runs llc to get the error message using a regex and creates; a custom command to check that specific error. Then, it runs bugpoint; with the custom command. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/bugpoint_gisel_reducer.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:440,Availability,failure,failure,440,"""""""Script to find missing formal dependencies in a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'pytho",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:821,Availability,reliab,reliably,821,"""""""Script to find missing formal dependencies in a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'pytho",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:862,Availability,failure,failure,862,"""""""Script to find missing formal dependencies in a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'pytho",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:1966,Availability,avail,available,1966,"a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'python3-pygraphviz' package in Debian and Ubuntu. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:507,Energy Efficiency,schedul,schedule,507,"""""""Script to find missing formal dependencies in a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'pytho",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:33,Integrability,depend,dependencies,33,"""""""Script to find missing formal dependencies in a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'pytho",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:296,Integrability,depend,dependency,296,"""""""Script to find missing formal dependencies in a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'pytho",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:462,Integrability,depend,depending,462,"""""""Script to find missing formal dependencies in a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'pytho",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:1092,Integrability,depend,dependencies,1092,"a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'python3-pygraphviz' package in Debian and Ubuntu. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:1193,Integrability,depend,dependencies,1193,"a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'python3-pygraphviz' package in Debian and Ubuntu. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:1380,Integrability,depend,dependencies,1380,"a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'python3-pygraphviz' package in Debian and Ubuntu. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:1442,Integrability,depend,dependencies,1442,"a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'python3-pygraphviz' package in Debian and Ubuntu. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:1735,Integrability,depend,dependency,1735,"a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'python3-pygraphviz' package in Debian and Ubuntu. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:1694,Performance,perform,perform,1694,"a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'python3-pygraphviz' package in Debian and Ubuntu. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:792,Safety,detect,detect,792,"""""""Script to find missing formal dependencies in a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'pytho",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:732,Testability,test,test,732,"""""""Script to find missing formal dependencies in a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'pytho",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:884,Testability,test,test,884,"""""""Script to find missing formal dependencies in a build.ninja file. Suppose you have a header file that's autogenerated by (for example) Tablegen.; If a C++ compilation step needs to include that header, then it must be; executed after the Tablegen build step that generates the header. So the; dependency graph in build.ninja should have the Tablegen build step as an; ancestor of the C++ one. If it does not, then there's a latent build-failure; bug, because depending on the order that ninja chooses to schedule its build; steps, the C++ build step could run first, and fail because the header it needs; does not exist yet. But because that kind of bug can easily be latent or intermittent, you might; not notice, if your local test build happens to succeed. What you'd like is a; way to detect problems of this kind reliably, even if they _didn't_ cause a; failure on your first test. This script tries to do that. It's specific to the 'ninja' build tool, because; ninja has useful auxiliary output modes that produce the necessary data:. - 'ninja -t graph' emits the full DAG of formal dependencies derived from; build.ninja (in Graphviz format). - 'ninja -t deps' dumps the database of dependencies discovered at build time; by finding out which headers each source file actually included. By cross-checking these two sources of data against each other, you can find; true dependencies shown by 'deps' that are not reflected as formal dependencies; in 'graph', i.e. a generated header that is required by a given source file but; not forced to be built first. To run it:. - set up a build directory using ninja as the build tool (cmake -G Ninja). - in that build directory, run ninja to perform an actual build (populating; the dependency database). - then, in the same build directory, run this script. No arguments are needed; (but -C and -f are accepted, and propagated to ninja for convenience). Requirements outside core Python: the 'pygraphviz' module, available via pip or; as the 'pytho",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:100,Usability,simpl,simply,100,# Count the number of immediate predecessors *not yet output* for each; # vertex. Initially this is simply their in-degrees.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:97,Integrability,depend,dependency,97,"# Remove v itself from the set before yielding it, so that the caller; # doesn't get the trivial dependency of v on itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:17,Integrability,depend,dependency,17,# Get the formal dependency graph and decode it using pygraphviz.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:19,Integrability,depend,dependency,19,# Fetch the cached dependency data and check it against our formal ancestry; # data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:12,Performance,cache,cached,12,# Fetch the cached dependency data and check it against our formal ancestry; # data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:226,Safety,detect,detecting,226,"# ninja -t deps output consists of stanzas of the following form,; # separated by a blank line:; #; # target: [other information we don't need]; # some_file.cpp; # some_header.h; # other_header.h; #; # We parse this ad-hoc by detecting the four leading spaces in a; # source-file line, and the colon in a target line. 'currtarget' stores; # the last target name we saw.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:32,Integrability,depend,dependency,32,"# We're only interested in this dependency if it's a *generated*; # file, i.e. it is in our set of targets. Also, we must check that; # currtarget is actually a target we know about: the dependency; # cache is not cleared when build.ninja changes, so it can contain; # stale data from targets that existed only in past builds in the; # same directory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:187,Integrability,depend,dependency,187,"# We're only interested in this dependency if it's a *generated*; # file, i.e. it is in our set of targets. Also, we must check that; # currtarget is actually a target we know about: the dependency; # cache is not cleared when build.ninja changes, so it can contain; # stale data from targets that existed only in past builds in the; # same directory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:201,Performance,cache,cache,201,"# We're only interested in this dependency if it's a *generated*; # file, i.e. it is in our set of targets. Also, we must check that; # currtarget is actually a target we know about: the dependency; # cache is not cleared when build.ninja changes, so it can contain; # stale data from targets that existed only in past builds in the; # same directory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py:214,Usability,clear,cleared,214,"# We're only interested in this dependency if it's a *generated*; # file, i.e. it is in our set of targets. Also, we must check that; # currtarget is actually a target we know about: the dependency; # cache is not cleared when build.ninja changes, so it can contain; # stale data from targets that existed only in past builds in the; # same directory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/check_ninja_deps.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/check_ninja_deps.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/chunk-print-before-all.py:95,Testability,log,log,95,"#!/usr/bin/env python; # Given a -print-before-all and/or -print-after-all -print-module-scope log from; # an opt invocation, chunk it into a series of individual IR files, one for each; # pass invocation. If the log ends with an obvious stack trace, try to split off; # a separate ""crashinfo.txt"" file leaving only the valid input IR in the last; # chunk. Files are written to current working directory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/chunk-print-before-all.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/chunk-print-before-all.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/chunk-print-before-all.py:213,Testability,log,log,213,"#!/usr/bin/env python; # Given a -print-before-all and/or -print-after-all -print-module-scope log from; # an opt invocation, chunk it into a series of individual IR files, one for each; # pass invocation. If the log ends with an obvious stack trace, try to split off; # a separate ""crashinfo.txt"" file leaving only the valid input IR in the last; # chunk. Files are written to current working directory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/chunk-print-before-all.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/chunk-print-before-all.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:517,Deployability,update,updated,517,"""""""; This script:; - Builds clang with user-defined flags; - Uses that clang to build an instrumented clang, which can be used to collect; PGO samples; - Builds a user-defined set of sources (default: clang) to act as a; ""benchmark"" to generate a PGO profile; - Builds clang once more with the PGO profile generated above. This is a total of four clean builds of clang (by default). This may take a; while. :). This scripts duplicates https://llvm.org/docs/AdvancedBuilds.html#multi-stage-pgo; Eventually, it will be updated to instead call the cmake cache mentioned there.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:551,Performance,cache,cache,551,"""""""; This script:; - Builds clang with user-defined flags; - Uses that clang to build an instrumented clang, which can be used to collect; PGO samples; - Builds a user-defined set of sources (default: clang) to act as a; ""benchmark"" to generate a PGO profile; - Builds clang once more with the PGO profile generated above. This is a total of four clean builds of clang (by default). This may take a; while. :). This scripts duplicates https://llvm.org/docs/AdvancedBuilds.html#multi-stage-pgo; Eventually, it will be updated to instead call the cmake cache mentioned there.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:222,Testability,benchmark,benchmark,222,"""""""; This script:; - Builds clang with user-defined flags; - Uses that clang to build an instrumented clang, which can be used to collect; PGO samples; - Builds a user-defined set of sources (default: clang) to act as a; ""benchmark"" to generate a PGO profile; - Builds clang once more with the PGO profile generated above. This is a total of four clean builds of clang (by default). This may take a; while. :). This scripts duplicates https://llvm.org/docs/AdvancedBuilds.html#multi-stage-pgo; Eventually, it will be updated to instead call the cmake cache mentioned there.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:9,Deployability,configurat,configuration,9,"### User configuration; # If you want to use a different 'benchmark' than building clang, make this; # function do what you want. out_dir is the build directory for clang, so all; # of the clang binaries will live under ""${out_dir}/bin/"". Using clang in; # ${out_dir} will magically have the profiles go to the right place.; #; # You may assume that out_dir is a freshly-built directory that you can reach; # in to build more things, if you'd like.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:9,Modifiability,config,configuration,9,"### User configuration; # If you want to use a different 'benchmark' than building clang, make this; # function do what you want. out_dir is the build directory for clang, so all; # of the clang binaries will live under ""${out_dir}/bin/"". Using clang in; # ${out_dir} will magically have the profiles go to the right place.; #; # You may assume that out_dir is a freshly-built directory that you can reach; # in to build more things, if you'd like.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:58,Testability,benchmark,benchmark,58,"### User configuration; # If you want to use a different 'benchmark' than building clang, make this; # function do what you want. out_dir is the build directory for clang, so all; # of the clang binaries will live under ""${out_dir}/bin/"". Using clang in; # ${out_dir} will magically have the profiles go to the right place.; #; # You may assume that out_dir is a freshly-built directory that you can reach; # in to build more things, if you'd like.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:8,Testability,benchmark,benchmark,8,"""""""The 'benchmark' we run to generate profile data.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:131,Modifiability,config,configured,131,"# `check-llvm` and `check-clang` are cheap ways to increase coverage. The; # former lets us touch on the non-x86 backends a bit if configured, and the; # latter gives us more C to chew on (and will send us through diagnostic; # paths a fair amount, though the `if (stuff_is_broken) { diag() ... }`; # branches should still heavily be weighted in the not-taken direction,; # since we built all of LLVM/etc).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:11,Modifiability,config,configure,11,"# libcxx's configure step messes with our link order: we'll link; # libclang_rt.profile after libgcc, and the former requires atexit from the; # latter. So, configure checks fail.; #; # Since we don't need libcxx or compiler-rt anyway, just disable them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:157,Modifiability,config,configure,157,"# libcxx's configure step messes with our link order: we'll link; # libclang_rt.profile after libgcc, and the former requires atexit from the; # latter. So, configure checks fail.; #; # Since we don't need libcxx or compiler-rt anyway, just disable them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py:29,Security,hash,hash,29,# We'll get complaints about hash mismatches in `main` in tools/etc. Ignore; # it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/collect_and_build_with_pgo.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py:34,Testability,log,log,34,"""""""; Helper script to convert the log generated by '-debug-only=constraint-system'; to a Python script that uses Z3 to verify the decisions using Z3's Python API. Example usage:. > cat path/to/file.log; ---; x6 + -1 * x7 <= -1; x6 + -1 * x7 <= -2; sat. > ./convert-constraint-log-to-z3.py path/to/file.log > check.py && python ./check.py. > cat check.py; from z3 import *; x3 = Int(""x3""); x1 = Int(""x1""); x2 = Int(""x2""); s = Solver(); s.add(x1 + -1 * x2 <= 0); s.add(x2 + -1 * x3 <= 0); s.add(-1 * x1 + x3 <= -1); assert(s.check() == unsat); print('all checks passed'); """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py:198,Testability,log,log,198,"""""""; Helper script to convert the log generated by '-debug-only=constraint-system'; to a Python script that uses Z3 to verify the decisions using Z3's Python API. Example usage:. > cat path/to/file.log; ---; x6 + -1 * x7 <= -1; x6 + -1 * x7 <= -2; sat. > ./convert-constraint-log-to-z3.py path/to/file.log > check.py && python ./check.py. > cat check.py; from z3 import *; x3 = Int(""x3""); x1 = Int(""x1""); x2 = Int(""x2""); s = Solver(); s.add(x1 + -1 * x2 <= 0); s.add(x2 + -1 * x3 <= 0); s.add(-1 * x1 + x3 <= -1); assert(s.check() == unsat); print('all checks passed'); """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py:276,Testability,log,log-to-,276,"""""""; Helper script to convert the log generated by '-debug-only=constraint-system'; to a Python script that uses Z3 to verify the decisions using Z3's Python API. Example usage:. > cat path/to/file.log; ---; x6 + -1 * x7 <= -1; x6 + -1 * x7 <= -2; sat. > ./convert-constraint-log-to-z3.py path/to/file.log > check.py && python ./check.py. > cat check.py; from z3 import *; x3 = Int(""x3""); x1 = Int(""x1""); x2 = Int(""x2""); s = Solver(); s.add(x1 + -1 * x2 <= 0); s.add(x2 + -1 * x3 <= 0); s.add(-1 * x1 + x3 <= -1); assert(s.check() == unsat); print('all checks passed'); """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py:302,Testability,log,log,302,"""""""; Helper script to convert the log generated by '-debug-only=constraint-system'; to a Python script that uses Z3 to verify the decisions using Z3's Python API. Example usage:. > cat path/to/file.log; ---; x6 + -1 * x7 <= -1; x6 + -1 * x7 <= -2; sat. > ./convert-constraint-log-to-z3.py path/to/file.log > check.py && python ./check.py. > cat check.py; from z3 import *; x3 = Int(""x3""); x1 = Int(""x1""); x2 = Int(""x2""); s = Solver(); s.add(x1 + -1 * x2 <= 0); s.add(x2 + -1 * x3 <= 0); s.add(-1 * x1 + x3 <= -1); assert(s.check() == unsat); print('all checks passed'); """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py:514,Testability,assert,assert,514,"""""""; Helper script to convert the log generated by '-debug-only=constraint-system'; to a Python script that uses Z3 to verify the decisions using Z3's Python API. Example usage:. > cat path/to/file.log; ---; x6 + -1 * x7 <= -1; x6 + -1 * x7 <= -2; sat. > ./convert-constraint-log-to-z3.py path/to/file.log > check.py && python ./check.py. > cat check.py; from z3 import *; x3 = Int(""x3""); x1 = Int(""x1""); x2 = Int(""x2""); s = Solver(); s.add(x1 + -1 * x2 <= 0); s.add(x2 + -1 * x3 <= 0); s.add(-1 * x1 + x3 <= -1); assert(s.check() == unsat); print('all checks passed'); """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/convert-constraint-log-to-z3.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/create_ladder_graph.py:329,Testability,test,test,329,"""""""A ladder graph creation program. This is a python program that creates c source code that will generate; CFGs that are ladder graphs. Ladder graphs are generally the worst case; for a lot of dominance related algorithms (Dominance frontiers, etc),; and often generate N^2 or worse behavior. One good use of this program is to test whether your linear time algorithm is; really behaving linearly.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/create_ladder_graph.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/create_ladder_graph.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/demangle_tree.py:271,Testability,test,testing,271,"# Given a path to llvm-objdump and a directory tree, spider the directory tree; # dumping every object file encountered with correct options needed to demangle; # symbols in the object file, and collect statistics about failed / crashed; # demanglings. Useful for stress testing the demangler against a large corpus; # of inputs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/demangle_tree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/demangle_tree.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/demangle_tree.py:2,Energy Efficiency,Drain,Drain,2,"# Drain the tasks, `pool_size` at a time, until we have less than; # `pool_size` tasks remaining.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/demangle_tree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/demangle_tree.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAclean.py:333,Availability,error,error,333,"#!/usr/bin/env python; # changelog:; # 10/13/2005b: replaced the # in tmp(.#*)* with alphanumeric and _, this will then remove; # nodes such as %tmp.1.i and %tmp._i.3; # 10/13/2005: exntended to remove variables of the form %tmp(.#)* rather than just; #%tmp.#, i.e. it now will remove %tmp.12.3.15 etc, additionally fixed a spelling error in; # the comments; # 10/12/2005: now it only removes nodes and edges for which the label is %tmp.# rather; # than removing all lines for which the lable CONTAINS %tmp.#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/DSAclean.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAclean.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAclean.py:202,Modifiability,variab,variables,202,"#!/usr/bin/env python; # changelog:; # 10/13/2005b: replaced the # in tmp(.#*)* with alphanumeric and _, this will then remove; # nodes such as %tmp.1.i and %tmp._i.3; # 10/13/2005: exntended to remove variables of the form %tmp(.#)* rather than just; #%tmp.#, i.e. it now will remove %tmp.12.3.15 etc, additionally fixed a spelling error in; # the comments; # 10/12/2005: now it only removes nodes and edges for which the label is %tmp.# rather; # than removing all lines for which the lable CONTAINS %tmp.#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/DSAclean.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAclean.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAextract.py:52,Modifiability,variab,variable,52,"# if this name is for the current node, add the dot variable name; # for the node (it will be Node(hex number)) to our set of nodes",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/DSAextract.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAextract.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAextract.py:2,Testability,test,test,2,# test code; # print '\n',MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/DSAextract.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAextract.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAextract.py:183,Availability,robust,robust,183,"# there are three types of lines we are looking for; # 1) node lines, 2) edge lines 3) support lines (like page size, etc); # is this an edge line?; # note that this is no completely robust, if a none edge line; # for some reason contains -> it will be missidentified; # hand edit the file if this happens",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/DSAextract.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/DSAextract.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract-section.py:280,Integrability,wrap,wrapper,280,"""""""; Helper script to print out the raw content of an ELF section.; Example usages:; ```; # print out as bits by default; extract-section.py .text --input-file=foo.o; ```; ```; # read from stdin and print out in hex; cat foo.o | extract-section.py -h .text; ```; This is merely a wrapper around `llvm-readobj` that focuses on the binary; content as well as providing more formatting options.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract-section.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract-section.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:30,Modifiability,portab,portable,30,"# '-P' means the output is in portable format,; # '-g' means we only get global symbols,; # '-Xany' enforce handling both 32- and 64-bit objects on AIX,; # '--no-demangle' ensure that C++ symbol names are not demangled; note; # that llvm-nm do not demangle by default, but the system nm on AIX does; # that, so the behavior may change in the future,; # '-p' do not waste time sorting the symbols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:71,Integrability,depend,depending,71,"# Look for undefined symbols, which have type U and may or may not; # (depending on which nm is being used) have value and size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:52,Security,expose,exposed,52,"# Skip X86GenMnemonicTables functions, they are not exposed from llvm/include/.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:59,Safety,detect,detect,59,"# Keep mangled llvm:: and clang:: function symbols. How we detect these is a; # bit of a mess and imprecise, but that avoids having to completely demangle; # the symbol name. The outermost namespace is at the end of the identifier; # mangling, and the identifier mangling is followed by the type mangling, so; # we look for (llvm|clang)@@ followed by something that looks like a; # function type mangling. To spot a function type we use (this is derived; # from clang/lib/AST/MicrosoftMangle.cpp):; # <function-type> ::= <function-class> <this-cvr-qualifiers>; # <calling-convention> <return-type>; # <argument-list> <throw-spec>; # <function-class> ::= [A-Z]; # <this-cvr-qualifiers> ::= [A-Z0-9_]*; # <calling-convention> ::= [A-JQ]; # <return-type> ::= .+; # <argument-list> ::= X (void); # ::= .+@ (list of types); # ::= .*Z (list of types, varargs); # <throw-spec> ::= exceptions are not allowed",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:118,Safety,avoid,avoids,118,"# Keep mangled llvm:: and clang:: function symbols. How we detect these is a; # bit of a mess and imprecise, but that avoids having to completely demangle; # the symbol name. The outermost namespace is at the end of the identifier; # mangling, and the identifier mangling is followed by the type mangling, so; # we look for (llvm|clang)@@ followed by something that looks like a; # function type mangling. To spot a function type we use (this is derived; # from clang/lib/AST/MicrosoftMangle.cpp):; # <function-type> ::= <function-class> <this-cvr-qualifiers>; # <calling-convention> <return-type>; # <argument-list> <throw-spec>; # <function-class> ::= [A-Z]; # <this-cvr-qualifiers> ::= [A-Z0-9_]*; # <calling-convention> ::= [A-JQ]; # <return-type> ::= .+; # <argument-list> ::= X (void); # ::= .+@ (list of types); # ::= .*Z (list of types, varargs); # <throw-spec> ::= exceptions are not allowed",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:147,Safety,safe,safely,147,# Itanium manglings are of the form _Z<identifier_mangling><type_mangling>. We; # demangle the identifier mangling to identify symbols that can be safely; # discarded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:77,Integrability,interface,interface,77,"# Certain kinds of complex manglings we assume cannot be part of a public; # interface, and we handle them by raising an exception.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:14,Usability,simpl,simple,14,# Check for a simple name,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:62,Integrability,depend,depends,62,# How we determine which symbols to keep and which to discard depends on; # the mangling scheme,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:308,Availability,error,error,308,"# Extract symbols from libraries in parallel. This is a huge time saver when; # doing a debug build, as there are hundreds of thousands of symbols in each; # library.; # FIXME: On AIX, the default pool size can be too big for a logical; # partition's allocated memory, and can lead to an out of memory; # IO error. We are setting the pool size to 8 to avoid such; # errors at the moment, and will look for a graceful solution later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:366,Availability,error,errors,366,"# Extract symbols from libraries in parallel. This is a huge time saver when; # doing a debug build, as there are hundreds of thousands of symbols in each; # library.; # FIXME: On AIX, the default pool size can be too big for a logical; # partition's allocated memory, and can lead to an out of memory; # IO error. We are setting the pool size to 8 to avoid such; # errors at the moment, and will look for a graceful solution later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:251,Energy Efficiency,allocate,allocated,251,"# Extract symbols from libraries in parallel. This is a huge time saver when; # doing a debug build, as there are hundreds of thousands of symbols in each; # library.; # FIXME: On AIX, the default pool size can be too big for a logical; # partition's allocated memory, and can lead to an out of memory; # IO error. We are setting the pool size to 8 to avoid such; # errors at the moment, and will look for a graceful solution later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:352,Safety,avoid,avoid,352,"# Extract symbols from libraries in parallel. This is a huge time saver when; # doing a debug build, as there are hundreds of thousands of symbols in each; # library.; # FIXME: On AIX, the default pool size can be too big for a logical; # partition's allocated memory, and can lead to an out of memory; # IO error. We are setting the pool size to 8 to avoid such; # errors at the moment, and will look for a graceful solution later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py:228,Testability,log,logical,228,"# Extract symbols from libraries in parallel. This is a huge time saver when; # doing a debug build, as there are hundreds of thousands of symbols in each; # library.; # FIXME: On AIX, the default pool size can be too big for a logical; # partition's allocated memory, and can lead to an out of memory; # IO error. We are setting the pool size to 8 to avoid such; # errors at the moment, and will look for a graceful solution later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_symbols.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_symbols.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_vplan.py:201,Deployability,install,installed,201,"#!/usr/bin/env python; # This script extracts the VPlan digraphs from the vectoriser debug messages; # and saves them in individual dot files (one for each plan). Optionally, and; # providing 'dot' is installed, it can also render the dot into a PNG file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_vplan.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_vplan.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_vplan.py:91,Integrability,message,messages,91,"#!/usr/bin/env python; # This script extracts the VPlan digraphs from the vectoriser debug messages; # and saves them in individual dot files (one for each plan). Optionally, and; # providing 'dot' is installed, it can also render the dot into a PNG file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/extract_vplan.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/extract_vplan.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/indirect_calls.py:254,Integrability,Depend,Depends,254,"""""""A tool for looking for indirect jumps and calls in x86 binaries. Helpful to verify whether or not retpoline mitigations are catching; all of the indirect branches in a binary and telling you which; functions the remaining ones are in (assembly, etc). Depends on llvm-objdump being in your path and is tied to the; dump format.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/indirect_calls.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/indirect_calls.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lldbDataFormatters.py:42,Performance,Load,Load,42,"""""""; LLDB Formatters for LLVM data types. Load into LLDB with 'command script import /path/to/lldbDataFormatters.py'; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lldbDataFormatters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lldbDataFormatters.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lldbDataFormatters.py:127,Security,expose,expose,127,"# By default, DenseMap instances use DenseMapPair to hold key-value; # entries. When the entry is a DenseMapPair, unwrap it to expose the; # children as simple std::pair values.; #; # This entry type is customizable (a template parameter). For other; # types, expose the entry type as is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lldbDataFormatters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lldbDataFormatters.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lldbDataFormatters.py:260,Security,expose,expose,260,"# By default, DenseMap instances use DenseMapPair to hold key-value; # entries. When the entry is a DenseMapPair, unwrap it to expose the; # children as simple std::pair values.; #; # This entry type is customizable (a template parameter). For other; # types, expose the entry type as is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lldbDataFormatters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lldbDataFormatters.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lldbDataFormatters.py:153,Usability,simpl,simple,153,"# By default, DenseMap instances use DenseMapPair to hold key-value; # entries. When the entry is a DenseMapPair, unwrap it to expose the; # children as simple std::pair values.; #; # This entry type is customizable (a template parameter). For other; # types, expose the entry type as is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lldbDataFormatters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lldbDataFormatters.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-gisel-cov.py:129,Integrability,depend,depending,129,"""""""; Summarize the information in the given coverage files. Emits the number of rules covered or the percentage of rules covered depending; on whether --num-rules has been used to specify the total number of rules.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/llvm-gisel-cov.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-gisel-cov.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py:73,Testability,test,testing,73,#!/usr/bin/env python; #; # Debugify summary for the original debug info testing.; #,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py:23,Modifiability,Variab,Variable,23,# Create the table for Variable bugs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py:103,Usability,simpl,simple,103,"# The file contains json object per line.; # An example of the line (formatted json):; # {; # ""file"": ""simple.c"",; # ""pass"": ""Deduce function attributes in RPO"",; # ""bugs"": [; # [; # {; # ""action"": ""drop"",; # ""metadata"": ""DISubprogram"",; # ""name"": ""fn2""; # },; # {; # ""action"": ""drop"",; # ""metadata"": ""DISubprogram"",; # ""name"": ""fn1""; # }; # ]; # ]; # }",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py:29,Modifiability,variab,variable,29,# DIVarBugs with same pass & variable name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-original-di-preservation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py:66,Deployability,pipeline,pipeline,66,"""""""Utility functions for creating and manipulating LLVM 'opt' NPM pipeline objects.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py:10,Deployability,pipeline,pipeline,10,"""""""Create pipeline object from string representation.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py:35,Deployability,pipeline,pipeline,35,"""""""Create string representation of pipeline object.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py:54,Deployability,pipeline,pipeline,54,"""""""Count number of passes (pass-managers excluded) in pipeline object.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py:18,Deployability,pipeline,pipeline,18,"""""""Create two new pipeline objects by splitting pipeObj in two directly after pass with index splitIndex.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py:14,Deployability,pipeline,pipeline,14,"""""""Create new pipeline object by removing pass with index removeIndex from pipeObj.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py:18,Deployability,pipeline,pipeline,18,"""""""Create copy of pipeline object srcPipeObj.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py:14,Deployability,pipeline,pipeline,14,"""""""Create new pipeline object by removing empty pass-managers (those with count = 0) from srcPipeObj.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:391,Availability,error,error,391,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:572,Availability,error,error,572,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:789,Availability,error,error,789,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:123,Deployability,pipeline,pipeline,123,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:213,Deployability,pipeline,pipeline-passes,213,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:358,Deployability,pipeline,pipeline,358,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:424,Deployability,pipeline,pipeline,424,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:497,Deployability,pipeline,pipeline,497,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:536,Deployability,pipeline,pipeline,536,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:647,Deployability,pipeline,pipeline,647,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:729,Deployability,pipeline,pipeline,729,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:753,Deployability,pipeline,pipeline,753,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:855,Deployability,pipeline,pipeline,855,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:1085,Deployability,PIPELINE,PIPELINE,1085,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Script for automatic 'opt' pipeline reduction for when using the new; # pass-manager (NPM). Based around the '-print-pipeline-passes' option.; #; # The reduction algorithm consists of several phases (steps).; #; # Step #0: Verify that input fails with the given pipeline and make note of the; # error code.; #; # Step #1: Split pipeline in two starting from front and move forward as long as; # first pipeline exits normally and the second pipeline fails with the expected; # error code. Move on to step #2 with the IR from the split point and the; # pipeline from the second invocation.; #; # Step #2: Remove passes from end of the pipeline as long as the pipeline fails; # with the expected error code.; #; # Step #3: Make several sweeps over the remaining pipeline trying to remove one; # pass at a time. Repeat sweeps until unable to remove any more passes.; #; # Usage example:; # reduce_pipeline.py --opt-binary=./build-all-Debug/bin/opt --input=input.ll --output=output.ll --passes=PIPELINE [EXTRA-OPT-ARGS ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:45,Deployability,pipeline,pipeline-passes,45,# Step #-1; # Launch 'opt' once with '-print-pipeline-passes' to expand pipeline before; # starting reduction. Allows specifying a default pipelines (e.g.; # '-passes=default<O3>').,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:72,Deployability,pipeline,pipeline,72,# Step #-1; # Launch 'opt' once with '-print-pipeline-passes' to expand pipeline before; # starting reduction. Allows specifying a default pipelines (e.g.; # '-passes=default<O3>').,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:139,Deployability,pipeline,pipelines,139,# Step #-1; # Launch 'opt' once with '-print-pipeline-passes' to expand pipeline before; # starting reduction. Allows specifying a default pipelines (e.g.; # '-passes=default<O3>').,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:72,Availability,failure,failure,72,"# Step #0; # Confirm that the given input, passes and options result in failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:27,Availability,down,down,27,"# Step #1; # Try to narrow down the failing pass sequence by splitting the pipeline in two; # opt invocations (A and B) starting with invocation A only running the first; # pipeline pass and invocation B the remaining. Keep moving the split point; # forward as long as invocation A exits normally and invocation B fails with; # the expected error. This will accomplish two things first the input IR will be; # further reduced and second, with that IR, the reduced pipeline for invocation; # B will be sufficient to reproduce.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:341,Availability,error,error,341,"# Step #1; # Try to narrow down the failing pass sequence by splitting the pipeline in two; # opt invocations (A and B) starting with invocation A only running the first; # pipeline pass and invocation B the remaining. Keep moving the split point; # forward as long as invocation A exits normally and invocation B fails with; # the expected error. This will accomplish two things first the input IR will be; # further reduced and second, with that IR, the reduced pipeline for invocation; # B will be sufficient to reproduce.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:75,Deployability,pipeline,pipeline,75,"# Step #1; # Try to narrow down the failing pass sequence by splitting the pipeline in two; # opt invocations (A and B) starting with invocation A only running the first; # pipeline pass and invocation B the remaining. Keep moving the split point; # forward as long as invocation A exits normally and invocation B fails with; # the expected error. This will accomplish two things first the input IR will be; # further reduced and second, with that IR, the reduced pipeline for invocation; # B will be sufficient to reproduce.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:173,Deployability,pipeline,pipeline,173,"# Step #1; # Try to narrow down the failing pass sequence by splitting the pipeline in two; # opt invocations (A and B) starting with invocation A only running the first; # pipeline pass and invocation B the remaining. Keep moving the split point; # forward as long as invocation A exits normally and invocation B fails with; # the expected error. This will accomplish two things first the input IR will be; # further reduced and second, with that IR, the reduced pipeline for invocation; # B will be sufficient to reproduce.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:464,Deployability,pipeline,pipeline,464,"# Step #1; # Try to narrow down the failing pass sequence by splitting the pipeline in two; # opt invocations (A and B) starting with invocation A only running the first; # pipeline pass and invocation B the remaining. Keep moving the split point; # forward as long as invocation A exits normally and invocation B fails with; # the expected error. This will accomplish two things first the input IR will be; # further reduced and second, with that IR, the reduced pipeline for invocation; # B will be sufficient to reproduce.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:418,Energy Efficiency,reduce,reduced,418,"# Step #1; # Try to narrow down the failing pass sequence by splitting the pipeline in two; # opt invocations (A and B) starting with invocation A only running the first; # pipeline pass and invocation B the remaining. Keep moving the split point; # forward as long as invocation A exits normally and invocation B fails with; # the expected error. This will accomplish two things first the input IR will be; # further reduced and second, with that IR, the reduced pipeline for invocation; # B will be sufficient to reproduce.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:456,Energy Efficiency,reduce,reduced,456,"# Step #1; # Try to narrow down the failing pass sequence by splitting the pipeline in two; # opt invocations (A and B) starting with invocation A only running the first; # pipeline pass and invocation B the remaining. Keep moving the split point; # forward as long as invocation A exits normally and invocation B fails with; # the expected error. This will accomplish two things first the input IR will be; # further reduced and second, with that IR, the reduced pipeline for invocation; # B will be sufficient to reproduce.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:103,Availability,error,error,103,# Step #2; # Try removing passes from the end of the remaining pipeline while still; # reproducing the error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:63,Deployability,pipeline,pipeline,63,# Step #2; # Try removing passes from the end of the remaining pipeline while still; # reproducing the error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:32,Deployability,pipeline,pipeline,32,# Step #3; # Now that we have a pipeline that is reduced both front and back we do; # exhaustive sweeps over the remainder trying to remove one pass at a time.; # Repeat as long as reduction is possible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py:49,Energy Efficiency,reduce,reduced,49,# Step #3; # Now that we have a pipeline that is reduced both front and back we do; # exhaustive sweeps over the remainder trying to remove one pass at a time.; # Repeat as long as reduction is possible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py:41,Testability,test,tests,41,"""""""Replaces absolute line numbers in lit-tests with relative line numbers. Writing line numbers like 152 in 'RUN: or CHECK:' makes tests hard to maintain:; inserting lines in the middle of the test means updating all the line numbers. Encoding them relative to the current line helps, and tools support it:; Lit will substitute %(line+2) with the actual line number; FileCheck supports [[@LINE+2]]. This tool takes a regex which captures a line number, and a list of test files.; It searches for line numbers in the files and replaces them with a relative; line number reference.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/relative_lines.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py:131,Testability,test,tests,131,"""""""Replaces absolute line numbers in lit-tests with relative line numbers. Writing line numbers like 152 in 'RUN: or CHECK:' makes tests hard to maintain:; inserting lines in the middle of the test means updating all the line numbers. Encoding them relative to the current line helps, and tools support it:; Lit will substitute %(line+2) with the actual line number; FileCheck supports [[@LINE+2]]. This tool takes a regex which captures a line number, and a list of test files.; It searches for line numbers in the files and replaces them with a relative; line number reference.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/relative_lines.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py:193,Testability,test,test,193,"""""""Replaces absolute line numbers in lit-tests with relative line numbers. Writing line numbers like 152 in 'RUN: or CHECK:' makes tests hard to maintain:; inserting lines in the middle of the test means updating all the line numbers. Encoding them relative to the current line helps, and tools support it:; Lit will substitute %(line+2) with the actual line number; FileCheck supports [[@LINE+2]]. This tool takes a regex which captures a line number, and a list of test files.; It searches for line numbers in the files and replaces them with a relative; line number reference.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/relative_lines.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py:467,Testability,test,test,467,"""""""Replaces absolute line numbers in lit-tests with relative line numbers. Writing line numbers like 152 in 'RUN: or CHECK:' makes tests hard to maintain:; inserting lines in the middle of the test means updating all the line numbers. Encoding them relative to the current line helps, and tools support it:; Lit will substitute %(line+2) with the actual line number; FileCheck supports [[@LINE+2]]. This tool takes a regex which captures a line number, and a list of test files.; It searches for line numbers in the files and replaces them with a relative; line number reference.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/relative_lines.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py:38,Testability,test,test,38,"""""""Example usage:; find -type f clang/test/CodeCompletion | grep -v /Inputs/ | \\; xargs relative_lines.py --dry-run --verbose --near=100 \\; --pattern='-code-completion-at[ =]%s:(\d+)' \\; --pattern='requires fix-it: {(\d+):\d+-(\d+):\d+}'; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/relative_lines.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/relative_lines.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:123,Testability,test,tests,123,"""""""; Runs an executable on a remote host. This is meant to be used as an executor when running the LLVM and the Libraries; tests on a target.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:85,Testability,test,test,85,"# Note: The default value is for the backward compatibility with a hack in; # libcxx test suite.; # If an argument is a file that ends in `.tmp.exe`, assume it is the name; # of an executable generated by a test file. We call these test-executables; # below. This allows us to do custom processing like codesigning test-executables; # and changing their path when running on the remote host. It's also possible; # for there to be no such executable, for example in the case of a .sh.cpp; # test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:207,Testability,test,test,207,"# Note: The default value is for the backward compatibility with a hack in; # libcxx test suite.; # If an argument is a file that ends in `.tmp.exe`, assume it is the name; # of an executable generated by a test file. We call these test-executables; # below. This allows us to do custom processing like codesigning test-executables; # and changing their path when running on the remote host. It's also possible; # for there to be no such executable, for example in the case of a .sh.cpp; # test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:232,Testability,test,test-executables,232,"# Note: The default value is for the backward compatibility with a hack in; # libcxx test suite.; # If an argument is a file that ends in `.tmp.exe`, assume it is the name; # of an executable generated by a test file. We call these test-executables; # below. This allows us to do custom processing like codesigning test-executables; # and changing their path when running on the remote host. It's also possible; # for there to be no such executable, for example in the case of a .sh.cpp; # test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:315,Testability,test,test-executables,315,"# Note: The default value is for the backward compatibility with a hack in; # libcxx test suite.; # If an argument is a file that ends in `.tmp.exe`, assume it is the name; # of an executable generated by a test file. We call these test-executables; # below. This allows us to do custom processing like codesigning test-executables; # and changing their path when running on the remote host. It's also possible; # for there to be no such executable, for example in the case of a .sh.cpp; # test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:490,Testability,test,test,490,"# Note: The default value is for the backward compatibility with a hack in; # libcxx test suite.; # If an argument is a file that ends in `.tmp.exe`, assume it is the name; # of an executable generated by a test file. We call these test-executables; # below. This allows us to do custom processing like codesigning test-executables; # and changing their path when running on the remote host. It's also possible; # for there to be no such executable, for example in the case of a .sh.cpp; # test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:41,Testability,test,test,41,# Create a temporary directory where the test will be run.; # That is effectively the value of %T on the remote host.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:34,Testability,test,test-executables,34,# Do any necessary codesigning of test-executables found in the command line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:88,Testability,test,test,88,"# tar up the execution directory (which contains everything that's needed; # to run the test), and copy the tarball over to the remote host.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:56,Security,access,accessing,56,"# Make sure we close the file before we scp it, because accessing; # the temporary file while still open doesn't work on Windows.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:12,Integrability,depend,dependencies,12,# Untar the dependencies in the temporary directory and remove the tarball.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:132,Testability,test,test-executable,132,# Make sure all executables in the remote command line have 'execute'; # permissions on the remote host. The host that compiled the test-executable; # might not have a notion of 'executable' permissions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py:181,Testability,test,test-executables,181,"# Execute the command through SSH in the temporary directory, with the; # correct environment. We tweak the command line to run it on the remote; # host by transforming the path of test-executables to their path in the; # temporary directory on the remote host.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/remote-exec.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/remote-exec.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py:1104,Deployability,release,release,1104,"""""""Checks for reverts of commits across a given git commit. To clarify the meaning of 'across' with an example, if we had the following; commit history (where `a -> b` notes that `b` is a direct child of `a`):. 123abc -> 223abc -> 323abc -> 423abc -> 523abc. And where 423abc is a revert of 223abc, this revert is considered to be 'across'; 323abc. More generally, a revert A of a parent commit B is considered to be; 'across' a commit C if C is a parent of A and B is a parent of C. Please note that revert detection in general is really difficult, since merge; conflicts/etc always introduce _some_ amount of fuzziness. This script just; uses a bundle of heuristics, and is bound to ignore / incorrectly flag some; reverts. The hope is that it'll easily catch the vast majority (>90%) of them,; though. This is designed to be used in one of two ways: an import in Python, or run; directly from a shell. If you want to import this, the `find_reverts`; function is the thing to look at. If you'd rather use this from a shell, have a; usage example:. ```; ./revert_checker.py c47f97169 origin/main origin/release/12.x; ```. This checks for all reverts from the tip of origin/main to c47f97169, which are; across the latter. It then does the same for origin/release/12.x to c47f97169.; Duplicate reverts discovered when walking both roots (origin/main and; origin/release/12.x) are deduplicated in output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py:1256,Deployability,release,release,1256,"""""""Checks for reverts of commits across a given git commit. To clarify the meaning of 'across' with an example, if we had the following; commit history (where `a -> b` notes that `b` is a direct child of `a`):. 123abc -> 223abc -> 323abc -> 423abc -> 523abc. And where 423abc is a revert of 223abc, this revert is considered to be 'across'; 323abc. More generally, a revert A of a parent commit B is considered to be; 'across' a commit C if C is a parent of A and B is a parent of C. Please note that revert detection in general is really difficult, since merge; conflicts/etc always introduce _some_ amount of fuzziness. This script just; uses a bundle of heuristics, and is bound to ignore / incorrectly flag some; reverts. The hope is that it'll easily catch the vast majority (>90%) of them,; though. This is designed to be used in one of two ways: an import in Python, or run; directly from a shell. If you want to import this, the `find_reverts`; function is the thing to look at. If you'd rather use this from a shell, have a; usage example:. ```; ./revert_checker.py c47f97169 origin/main origin/release/12.x; ```. This checks for all reverts from the tip of origin/main to c47f97169, which are; across the latter. It then does the same for origin/release/12.x to c47f97169.; Duplicate reverts discovered when walking both roots (origin/main and; origin/release/12.x) are deduplicated in output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py:1362,Deployability,release,release,1362,"""""""Checks for reverts of commits across a given git commit. To clarify the meaning of 'across' with an example, if we had the following; commit history (where `a -> b` notes that `b` is a direct child of `a`):. 123abc -> 223abc -> 323abc -> 423abc -> 523abc. And where 423abc is a revert of 223abc, this revert is considered to be 'across'; 323abc. More generally, a revert A of a parent commit B is considered to be; 'across' a commit C if C is a parent of A and B is a parent of C. Please note that revert detection in general is really difficult, since merge; conflicts/etc always introduce _some_ amount of fuzziness. This script just; uses a bundle of heuristics, and is bound to ignore / incorrectly flag some; reverts. The hope is that it'll easily catch the vast majority (>90%) of them,; though. This is designed to be used in one of two ways: an import in Python, or run; directly from a shell. If you want to import this, the `find_reverts`; function is the thing to look at. If you'd rather use this from a shell, have a; usage example:. ```; ./revert_checker.py c47f97169 origin/main origin/release/12.x; ```. This checks for all reverts from the tip of origin/main to c47f97169, which are; across the latter. It then does the same for origin/release/12.x to c47f97169.; Duplicate reverts discovered when walking both roots (origin/main and; origin/release/12.x) are deduplicated in output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py:508,Safety,detect,detection,508,"""""""Checks for reverts of commits across a given git commit. To clarify the meaning of 'across' with an example, if we had the following; commit history (where `a -> b` notes that `b` is a direct child of `a`):. 123abc -> 223abc -> 323abc -> 423abc -> 523abc. And where 423abc is a revert of 223abc, this revert is considered to be 'across'; 323abc. More generally, a revert A of a parent commit B is considered to be; 'across' a commit C if C is a parent of A and B is a parent of C. Please note that revert detection in general is really difficult, since merge; conflicts/etc always introduce _some_ amount of fuzziness. This script just; uses a bundle of heuristics, and is bound to ignore / incorrectly flag some; reverts. The hope is that it'll easily catch the vast majority (>90%) of them,; though. This is designed to be used in one of two ways: an import in Python, or run; directly from a shell. If you want to import this, the `find_reverts`; function is the thing to look at. If you'd rather use this from a shell, have a; usage example:. ```; ./revert_checker.py c47f97169 origin/main origin/release/12.x; ```. This checks for all reverts from the tip of origin/main to c47f97169, which are; across the latter. It then does the same for origin/release/12.x to c47f97169.; Duplicate reverts discovered when walking both roots (origin/main and; origin/release/12.x) are deduplicated in output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py:54,Testability,log,log,54,"# Find the next separator line. If there's nothing to log, it may not exist.; # It might not be the first line if git feels complainy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py:42,Testability,log,log,42,"# Since `all_reverts` contains reverts in log order (e.g., newer comes before; # older), we need to reverse this to keep with our guarantee of older =; # earlier in the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py:85,Availability,avail,available,85,"""""""Tests for revert_checker. Note that these tests require having LLVM's git history available, since our; repository has a few interesting instances of edge-cases.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker_test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py:3,Testability,Test,Tests,3,"""""""Tests for revert_checker. Note that these tests require having LLVM's git history available, since our; repository has a few interesting instances of edge-cases.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker_test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py:45,Testability,test,tests,45,"""""""Tests for revert_checker. Note that these tests require having LLVM's git history available, since our; repository has a few interesting instances of edge-cases.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker_test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py:28,Security,access,access,28,# pylint: disable=protected-access,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker_test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py:20,Integrability,message,messages,20,"""""""Silences all log messages. Also collects info about log messages that would've been emitted.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker_test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py:59,Integrability,message,messages,59,"""""""Silences all log messages. Also collects info about log messages that would've been emitted.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker_test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py:16,Testability,log,log,16,"""""""Silences all log messages. Also collects info about log messages that would've been emitted.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker_test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py:55,Testability,log,log,55,"""""""Silences all log messages. Also collects info about log messages that would've been emitted.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker_test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py:3,Testability,Test,Tests,3,"""""""Tests for revert_checker.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/revert_checker_test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/revert_checker_test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:1064,Availability,failure,failure,1064,"""""""Script to bisect over files in an rsp file. This is mostly used for detecting which file contains a miscompile between two; compiler revisions. It does this by bisecting over an rsp file. Between two; build directories, this script will make the rsp file reference the current; build directory's version of some set of the rsp's object files/libraries, and; reference the other build directory's version of the same files for the; remaining set of object files/libraries. Build the target in two separate directories with the two compiler revisions,; keeping the rsp file around since ninja by default deletes the rsp file after; building.; $ ninja -d keeprsp mytarget. Create a script to build the target and run an interesting test. Get the; command to build the target via; $ ninja -t commands | grep mytarget; The command to build the target should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and what",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:71,Safety,detect,detecting,71,"""""""Script to bisect over files in an rsp file. This is mostly used for detecting which file contains a miscompile between two; compiler revisions. It does this by bisecting over an rsp file. Between two; build directories, this script will make the rsp file reference the current; build directory's version of some set of the rsp's object files/libraries, and; reference the other build directory's version of the same files for the; remaining set of object files/libraries. Build the target in two separate directories with the two compiler revisions,; keeping the rsp file around since ninja by default deletes the rsp file after; building.; $ ninja -d keeprsp mytarget. Create a script to build the target and run an interesting test. Get the; command to build the target via; $ ninja -t commands | grep mytarget; The command to build the target should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and what",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:732,Testability,test,test,732,"""""""Script to bisect over files in an rsp file. This is mostly used for detecting which file contains a miscompile between two; compiler revisions. It does this by bisecting over an rsp file. Between two; build directories, this script will make the rsp file reference the current; build directory's version of some set of the rsp's object files/libraries, and; reference the other build directory's version of the same files for the; remaining set of object files/libraries. Build the target in two separate directories with the two compiler revisions,; keeping the rsp file around since ninja by default deletes the rsp file after; building.; $ ninja -d keeprsp mytarget. Create a script to build the target and run an interesting test. Get the; command to build the target via; $ ninja -t commands | grep mytarget; The command to build the target should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and what",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:913,Testability,test,test,913,"""""""Script to bisect over files in an rsp file. This is mostly used for detecting which file contains a miscompile between two; compiler revisions. It does this by bisecting over an rsp file. Between two; build directories, this script will make the rsp file reference the current; build directory's version of some set of the rsp's object files/libraries, and; reference the other build directory's version of the same files for the; remaining set of object files/libraries. Build the target in two separate directories with the two compiler revisions,; keeping the rsp file around since ninja by default deletes the rsp file after; building.; $ ninja -d keeprsp mytarget. Create a script to build the target and run an interesting test. Get the; command to build the target via; $ ninja -t commands | grep mytarget; The command to build the target should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and what",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:984,Testability,test,test,984,"""""""Script to bisect over files in an rsp file. This is mostly used for detecting which file contains a miscompile between two; compiler revisions. It does this by bisecting over an rsp file. Between two; build directories, this script will make the rsp file reference the current; build directory's version of some set of the rsp's object files/libraries, and; reference the other build directory's version of the same files for the; remaining set of object files/libraries. Build the target in two separate directories with the two compiler revisions,; keeping the rsp file around since ninja by default deletes the rsp file after; building.; $ ninja -d keeprsp mytarget. Create a script to build the target and run an interesting test. Get the; command to build the target via; $ ninja -t commands | grep mytarget; The command to build the target should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and what",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:1004,Testability,test,test,1004,"""""""Script to bisect over files in an rsp file. This is mostly used for detecting which file contains a miscompile between two; compiler revisions. It does this by bisecting over an rsp file. Between two; build directories, this script will make the rsp file reference the current; build directory's version of some set of the rsp's object files/libraries, and; reference the other build directory's version of the same files for the; remaining set of object files/libraries. Build the target in two separate directories with the two compiler revisions,; keeping the rsp file around since ninja by default deletes the rsp file after; building.; $ ninja -d keeprsp mytarget. Create a script to build the target and run an interesting test. Get the; command to build the target via; $ ninja -t commands | grep mytarget; The command to build the target should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and what",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:1163,Testability,test,test,1163,"evisions. It does this by bisecting over an rsp file. Between two; build directories, this script will make the rsp file reference the current; build directory's version of some set of the rsp's object files/libraries, and; reference the other build directory's version of the same files for the; remaining set of object files/libraries. Build the target in two separate directories with the two compiler revisions,; keeping the rsp file around since ninja by default deletes the rsp file after; building.; $ ninja -d keeprsp mytarget. Create a script to build the target and run an interesting test. Get the; command to build the target via; $ ninja -t commands | grep mytarget; The command to build the target should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and whatever test reproduces a; miscompile and returns a non-zero exit code when there is a miscompile. For; example; ```; #!/bin/bash; # immedia",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:1222,Testability,test,test,1222,"the rsp file reference the current; build directory's version of some set of the rsp's object files/libraries, and; reference the other build directory's version of the same files for the; remaining set of object files/libraries. Build the target in two separate directories with the two compiler revisions,; keeping the rsp file around since ninja by default deletes the rsp file after; building.; $ ninja -d keeprsp mytarget. Create a script to build the target and run an interesting test. Get the; command to build the target via; $ ninja -t commands | grep mytarget; The command to build the target should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and whatever test reproduces a; miscompile and returns a non-zero exit code when there is a miscompile. For; example; ```; #!/bin/bash; # immediately bail out of script if any command returns a non-zero return code; set -e; clang -o foo @foo.rsp; ./foo;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:1957,Testability,test,test,1957,"t should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and whatever test reproduces a; miscompile and returns a non-zero exit code when there is a miscompile. For; example; ```; #!/bin/bash; # immediately bail out of script if any command returns a non-zero return code; set -e; clang -o foo @foo.rsp; ./foo; ```. With buildgood/ as the working directory, run; $ path/to/llvm-project/llvm/utils/rsp_bisect.py \; --test=path/to/test_script --rsp=./foo.rsp --other_rel_path=../buildbad/; If rsp_bisect is successful, it will print the first file in the rsp file that; when using the bad build directory's version causes the test script to return a; different return code. foo.rsp.0 and foo.rsp.1 will also be written. foo.rsp.0; will be a copy of foo.rsp with the relevant file using the version in; buildgood/, and foo.rsp.1 will be a copy of foo.rsp with the relevant file; using the version in buildbad/. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:2006,Testability,test,test,2006,"t should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and whatever test reproduces a; miscompile and returns a non-zero exit code when there is a miscompile. For; example; ```; #!/bin/bash; # immediately bail out of script if any command returns a non-zero return code; set -e; clang -o foo @foo.rsp; ./foo; ```. With buildgood/ as the working directory, run; $ path/to/llvm-project/llvm/utils/rsp_bisect.py \; --test=path/to/test_script --rsp=./foo.rsp --other_rel_path=../buildbad/; If rsp_bisect is successful, it will print the first file in the rsp file that; when using the bad build directory's version causes the test script to return a; different return code. foo.rsp.0 and foo.rsp.1 will also be written. foo.rsp.0; will be a copy of foo.rsp with the relevant file using the version in; buildgood/, and foo.rsp.1 will be a copy of foo.rsp with the relevant file; using the version in buildbad/. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:2352,Testability,test,test,2352,"t should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and whatever test reproduces a; miscompile and returns a non-zero exit code when there is a miscompile. For; example; ```; #!/bin/bash; # immediately bail out of script if any command returns a non-zero return code; set -e; clang -o foo @foo.rsp; ./foo; ```. With buildgood/ as the working directory, run; $ path/to/llvm-project/llvm/utils/rsp_bisect.py \; --test=path/to/test_script --rsp=./foo.rsp --other_rel_path=../buildbad/; If rsp_bisect is successful, it will print the first file in the rsp file that; when using the bad build directory's version causes the test script to return a; different return code. foo.rsp.0 and foo.rsp.1 will also be written. foo.rsp.0; will be a copy of foo.rsp with the relevant file using the version in; buildgood/, and foo.rsp.1 will be a copy of foo.rsp with the relevant file; using the version in buildbad/. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:2560,Testability,test,test,2560,"t should reference the rsp file.; This script doesn't care if the test script returns 0 or 1 for specifically the; successful or failing test, just that the test script returns a different; return code for success vs failure.; Since the command that `ninja -t commands` is run from the build directory,; usually the test script cd's to the build directory. $ rsp_bisect.py --test=path/to/test_script --rsp=path/to/build/target.rsp; --other_rel_path=../Other; where --other_rel_path is the relative path from the first build directory to; the other build directory. This is prepended to files in the rsp. For a full example, if the foo target is suspected to contain a miscompile in; some file, have two different build directories, buildgood/ and buildbad/ and; run; $ ninja -d keeprsp foo; in both so we have two versions of all relevant object files that may contain a; miscompile, one built by a good compiler and one by a bad compiler. In buildgood/, run; $ ninja -t commands | grep '-o .*foo'; to get the command to link the files together. It may look something like; clang -o foo @foo.rsp. Now create a test script that runs the link step and whatever test reproduces a; miscompile and returns a non-zero exit code when there is a miscompile. For; example; ```; #!/bin/bash; # immediately bail out of script if any command returns a non-zero return code; set -e; clang -o foo @foo.rsp; ./foo; ```. With buildgood/ as the working directory, run; $ path/to/llvm-project/llvm/utils/rsp_bisect.py \; --test=path/to/test_script --rsp=./foo.rsp --other_rel_path=../buildbad/; If rsp_bisect is successful, it will print the first file in the rsp file that; when using the bad build directory's version causes the test script to return a; different return code. foo.rsp.0 and foo.rsp.1 will also be written. foo.rsp.0; will be a copy of foo.rsp with the relevant file using the version in; buildgood/, and foo.rsp.1 will be a copy of foo.rsp with the relevant file; using the version in buildbad/. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:12,Testability,test,test,12,"""""""Runs the test and returns whether it was successful or not.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:42,Testability,test,test,42,"""""""Write the rsp file to disk and run the test.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:52,Testability,test,test,52,"""""""Bisect over rsp entries. Args:; zero_result: the test result when modify_after_num is 0. Returns:; The index of the file in the rsp file where the test result changes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py:150,Testability,test,test,150,"""""""Bisect over rsp entries. Args:; zero_result: the test result when modify_after_num is 0. Returns:; The index of the file in the rsp file where the test result changes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:25,Testability,test,tester,25,"""""""A shuffle vector fuzz tester. This is a python program to fuzz test the LLVM shufflevector instruction. It; generates a function with a random sequnece of shufflevectors, maintaining the; element mapping accumulated across the function. It then generates a main; function which calls it with a different value in each element and checks that; the result matches the expected mapping. Take the output IR printed to stdout, compile it to an executable using whatever; set of transforms you want to test, and run the program. If it crashes, it found; a bug.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:66,Testability,test,test,66,"""""""A shuffle vector fuzz tester. This is a python program to fuzz test the LLVM shufflevector instruction. It; generates a function with a random sequnece of shufflevectors, maintaining the; element mapping accumulated across the function. It then generates a main; function which calls it with a different value in each element and checks that; the result matches the expected mapping. Take the output IR printed to stdout, compile it to an executable using whatever; set of transforms you want to test, and run the program. If it crashes, it found; a bug.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:499,Testability,test,test,499,"""""""A shuffle vector fuzz tester. This is a python program to fuzz test the LLVM shufflevector instruction. It; generates a function with a random sequnece of shufflevectors, maintaining the; element mapping accumulated across the function. It then generates a main; function which calls it with a different value in each element and checks that; the result matches the expected mapping. Take the output IR printed to stdout, compile it to an executable using whatever; set of transforms you want to test, and run the program. If it crashes, it found; a bug.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:661,Energy Efficiency,power,power,661,"# Because undef (-1) saturates and is indistinguishable when testing the; # correctness of a shuffle, we want to bias our fuzz toward having a decent; # mixture of non-undef lanes in the end. With a deep shuffle tree, the; # probabilies aren't good so we need to bias things. The math here is that if; # we uniformly select between -1 and the other inputs, each element of the; # result will have the following probability of being undef:; #; # 1 - (shuffle_range/(shuffle_range+1))^max_shuffle_height; #; # More generally, for any probability P of selecting a defined element in; # a single shuffle, the end result is:; #; # 1 - P^max_shuffle_height; #; # The power of the shuffle height is the real problem, as we want:; #; # 1 - shuffle_range/(shuffle_range+1); #; # So we bias the selection of undef at any given node based on the tree; # height. Below, let 'A' be 'len(shuffle_range)', 'C' be 'max_shuffle_height',; # and 'B' be the bias we use to compensate for; # C '((A+1)*A^(1/C))/(A*(A+1)^(1/C))':; #; # 1 - (B * A)/(A + 1)^C = 1 - A/(A + 1); #; # So at each node we use:; #; # 1 - (B * A)/(A + 1); # = 1 - ((A + 1) * A * A^(1/C))/(A * (A + 1) * (A + 1)^(1/C)); # = 1 - ((A + 1) * A^((C + 1)/C))/(A * (A + 1)^((C + 1)/C)); #; # This is the formula we use to select undef lanes in the shuffle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:61,Testability,test,testing,61,"# Because undef (-1) saturates and is indistinguishable when testing the; # correctness of a shuffle, we want to bias our fuzz toward having a decent; # mixture of non-undef lanes in the end. With a deep shuffle tree, the; # probabilies aren't good so we need to bias things. The math here is that if; # we uniformly select between -1 and the other inputs, each element of the; # result will have the following probability of being undef:; #; # 1 - (shuffle_range/(shuffle_range+1))^max_shuffle_height; #; # More generally, for any probability P of selecting a defined element in; # a single shuffle, the end result is:; #; # 1 - P^max_shuffle_height; #; # The power of the shuffle height is the real problem, as we want:; #; # 1 - shuffle_range/(shuffle_range+1); #; # So we bias the selection of undef at any given node based on the tree; # height. Below, let 'A' be 'len(shuffle_range)', 'C' be 'max_shuffle_height',; # and 'B' be the bias we use to compensate for; # C '((A+1)*A^(1/C))/(A*(A+1)^(1/C))':; #; # 1 - (B * A)/(A + 1)^C = 1 - A/(A + 1); #; # So at each node we use:; #; # 1 - (B * A)/(A + 1); # = 1 - ((A + 1) * A * A^(1/C))/(A * (A + 1) * (A + 1)^(1/C)); # = 1 - ((A + 1) * A^((C + 1)/C))/(A * (A + 1)^((C + 1)/C)); #; # This is the formula we use to select undef lanes in the shuffle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:45,Testability,test,test,45,"""""""; define internal fastcc <%(N)d x %(T)s> @test(%(arguments)s) noinline nounwind {; entry:""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:59,Availability,error,errors,59,# Generate some string constants that we can use to report errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:6,Availability,error,error,6,"""""""; @error.%(i)d = private unnamed_addr global [128 x i8] c""%(s)s""; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:11,Integrability,wrap,wrapper,11,# Define a wrapper function which is marked 'optnone' to prevent; # interprocedural optimizations from deleting the test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:84,Performance,optimiz,optimizations,84,# Define a wrapper function which is marked 'optnone' to prevent; # interprocedural optimizations from deleting the test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:116,Testability,test,test,116,# Define a wrapper function which is marked 'optnone' to prevent; # interprocedural optimizations from deleting the test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:133,Testability,test,test,133,"""""""; define internal fastcc <%(N)d x %(T)s> @test_wrapper(%(arguments)s) optnone noinline {; %%result = call fastcc <%(N)d x %(T)s> @test(%(arguments)s); ret <%(N)d x %(T)s> %%result; }; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:69,Availability,error,error,69,"""""""; define i32 @main() {; entry:; ; Create a scratch space to print error messages.; %%str = alloca [128 x i8]; %%str.ptr = getelementptr inbounds [128 x i8], [128 x i8]* %%str, i32 0, i32 0. ; Build the input vector and call the test function.; %%v = call fastcc <%(N)d x %(T)s> @test_wrapper(%(inputs)s); ; We need to cast this back to an integer type vector to easily check the; ; result.; %%v.cast = bitcast <%(N)d x %(T)s> %%v to <%(N)d x %(IT)s>; br label %%test.0; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:75,Integrability,message,messages,75,"""""""; define i32 @main() {; entry:; ; Create a scratch space to print error messages.; %%str = alloca [128 x i8]; %%str.ptr = getelementptr inbounds [128 x i8], [128 x i8]* %%str, i32 0, i32 0. ; Build the input vector and call the test function.; %%v = call fastcc <%(N)d x %(T)s> @test_wrapper(%(inputs)s); ; We need to cast this back to an integer type vector to easily check the; ; result.; %%v.cast = bitcast <%(N)d x %(T)s> %%v to <%(N)d x %(IT)s>; br label %%test.0; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:231,Testability,test,test,231,"""""""; define i32 @main() {; entry:; ; Create a scratch space to print error messages.; %%str = alloca [128 x i8]; %%str.ptr = getelementptr inbounds [128 x i8], [128 x i8]* %%str, i32 0, i32 0. ; Build the input vector and call the test function.; %%v = call fastcc <%(N)d x %(T)s> @test_wrapper(%(inputs)s); ; We need to cast this back to an integer type vector to easily check the; ; result.; %%v.cast = bitcast <%(N)d x %(T)s> %%v to <%(N)d x %(IT)s>; br label %%test.0; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:465,Testability,test,test,465,"""""""; define i32 @main() {; entry:; ; Create a scratch space to print error messages.; %%str = alloca [128 x i8]; %%str.ptr = getelementptr inbounds [128 x i8], [128 x i8]* %%str, i32 0, i32 0. ; Build the input vector and call the test function.; %%v = call fastcc <%(N)d x %(T)s> @test_wrapper(%(inputs)s); ; We need to cast this back to an integer type vector to easily check the; ; result.; %%v.cast = bitcast <%(N)d x %(T)s> %%v to <%(N)d x %(IT)s>; br label %%test.0; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:2,Testability,Test,Test,2,# Test that each non-undef result lane contains the expected value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:5,Testability,test,test,5,"""""""; test.%(i)d:; ; Skip this lane, its value is undef.; br label %%test.%(next_i)d; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:68,Testability,test,test,68,"""""""; test.%(i)d:; ; Skip this lane, its value is undef.; br label %%test.%(next_i)d; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:245,Availability,error,error,245,"""""""; test.%(i)d:; %%v.%(i)d = extractelement <%(N)d x %(IT)s> %%v.cast, i32 %(i)d; %%cmp.%(i)d = icmp ne %(IT)s %%v.%(i)d, %(r)d; br i1 %%cmp.%(i)d, label %%die.%(i)d, label %%test.%(next_i)d. die.%(i)d:; ; Capture the actual value and print an error message.; %%tmp.%(i)d = zext %(IT)s %%v.%(i)d to i2048; %%bad.%(i)d = trunc i2048 %%tmp.%(i)d to i32; call i32 (i8*, i8*, ...) @sprintf(i8* %%str.ptr, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @error.%(i)d, i32 0, i32 0), i32 %%bad.%(i)d); %%length.%(i)d = call i32 @strlen(i8* %%str.ptr); call i32 @write(i32 2, i8* %%str.ptr, i32 %%length.%(i)d); call void @llvm.trap(); unreachable; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:455,Availability,error,error,455,"""""""; test.%(i)d:; %%v.%(i)d = extractelement <%(N)d x %(IT)s> %%v.cast, i32 %(i)d; %%cmp.%(i)d = icmp ne %(IT)s %%v.%(i)d, %(r)d; br i1 %%cmp.%(i)d, label %%die.%(i)d, label %%test.%(next_i)d. die.%(i)d:; ; Capture the actual value and print an error message.; %%tmp.%(i)d = zext %(IT)s %%v.%(i)d to i2048; %%bad.%(i)d = trunc i2048 %%tmp.%(i)d to i32; call i32 (i8*, i8*, ...) @sprintf(i8* %%str.ptr, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @error.%(i)d, i32 0, i32 0), i32 %%bad.%(i)d); %%length.%(i)d = call i32 @strlen(i8* %%str.ptr); call i32 @write(i32 2, i8* %%str.ptr, i32 %%length.%(i)d); call void @llvm.trap(); unreachable; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:251,Integrability,message,message,251,"""""""; test.%(i)d:; %%v.%(i)d = extractelement <%(N)d x %(IT)s> %%v.cast, i32 %(i)d; %%cmp.%(i)d = icmp ne %(IT)s %%v.%(i)d, %(r)d; br i1 %%cmp.%(i)d, label %%die.%(i)d, label %%test.%(next_i)d. die.%(i)d:; ; Capture the actual value and print an error message.; %%tmp.%(i)d = zext %(IT)s %%v.%(i)d to i2048; %%bad.%(i)d = trunc i2048 %%tmp.%(i)d to i32; call i32 (i8*, i8*, ...) @sprintf(i8* %%str.ptr, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @error.%(i)d, i32 0, i32 0), i32 %%bad.%(i)d); %%length.%(i)d = call i32 @strlen(i8* %%str.ptr); call i32 @write(i32 2, i8* %%str.ptr, i32 %%length.%(i)d); call void @llvm.trap(); unreachable; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:5,Testability,test,test,5,"""""""; test.%(i)d:; %%v.%(i)d = extractelement <%(N)d x %(IT)s> %%v.cast, i32 %(i)d; %%cmp.%(i)d = icmp ne %(IT)s %%v.%(i)d, %(r)d; br i1 %%cmp.%(i)d, label %%die.%(i)d, label %%test.%(next_i)d. die.%(i)d:; ; Capture the actual value and print an error message.; %%tmp.%(i)d = zext %(IT)s %%v.%(i)d to i2048; %%bad.%(i)d = trunc i2048 %%tmp.%(i)d to i32; call i32 (i8*, i8*, ...) @sprintf(i8* %%str.ptr, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @error.%(i)d, i32 0, i32 0), i32 %%bad.%(i)d); %%length.%(i)d = call i32 @strlen(i8* %%str.ptr); call i32 @write(i32 2, i8* %%str.ptr, i32 %%length.%(i)d); call void @llvm.trap(); unreachable; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:176,Testability,test,test,176,"""""""; test.%(i)d:; %%v.%(i)d = extractelement <%(N)d x %(IT)s> %%v.cast, i32 %(i)d; %%cmp.%(i)d = icmp ne %(IT)s %%v.%(i)d, %(r)d; br i1 %%cmp.%(i)d, label %%die.%(i)d, label %%test.%(next_i)d. die.%(i)d:; ; Capture the actual value and print an error message.; %%tmp.%(i)d = zext %(IT)s %%v.%(i)d to i2048; %%bad.%(i)d = trunc i2048 %%tmp.%(i)d to i32; call i32 (i8*, i8*, ...) @sprintf(i8* %%str.ptr, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @error.%(i)d, i32 0, i32 0), i32 %%bad.%(i)d); %%length.%(i)d = call i32 @strlen(i8* %%str.ptr); call i32 @write(i32 2, i8* %%str.ptr, i32 %%length.%(i)d); call void @llvm.trap(); unreachable; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py:5,Testability,test,test,5,"""""""; test.%d:; ret i32 0; }. declare i32 @strlen(i8*); declare i32 @write(i32, i8*, i32); declare i32 @sprintf(i8*, i8*, ...); declare void @llvm.trap() noreturn nounwind; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_fuzz.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_fuzz.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:661,Availability,error,error,661,"""""""A shuffle-select vector fuzz tester. This is a python program to fuzz test the LLVM shufflevector and select; instructions. It generates a function with a random sequnece of shufflevectors; while optionally attaching it with a select instruction (regular or zero merge),; maintaining the element mapping accumulated across the function. It then; generates a main function which calls it with a different value in each element; and checks that the result matches the expected mapping. Take the output IR printed to stdout, compile it to an executable using whatever; set of transforms you want to test, and run the program. If it crashes, it found; a bug (an error message with the expected and actual result is printed).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:667,Integrability,message,message,667,"""""""A shuffle-select vector fuzz tester. This is a python program to fuzz test the LLVM shufflevector and select; instructions. It generates a function with a random sequnece of shufflevectors; while optionally attaching it with a select instruction (regular or zero merge),; maintaining the element mapping accumulated across the function. It then; generates a main function which calls it with a different value in each element; and checks that the result matches the expected mapping. Take the output IR printed to stdout, compile it to an executable using whatever; set of transforms you want to test, and run the program. If it crashes, it found; a bug (an error message with the expected and actual result is printed).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:32,Testability,test,tester,32,"""""""A shuffle-select vector fuzz tester. This is a python program to fuzz test the LLVM shufflevector and select; instructions. It generates a function with a random sequnece of shufflevectors; while optionally attaching it with a select instruction (regular or zero merge),; maintaining the element mapping accumulated across the function. It then; generates a main function which calls it with a different value in each element; and checks that the result matches the expected mapping. Take the output IR printed to stdout, compile it to an executable using whatever; set of transforms you want to test, and run the program. If it crashes, it found; a bug (an error message with the expected and actual result is printed).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:73,Testability,test,test,73,"""""""A shuffle-select vector fuzz tester. This is a python program to fuzz test the LLVM shufflevector and select; instructions. It generates a function with a random sequnece of shufflevectors; while optionally attaching it with a select instruction (regular or zero merge),; maintaining the element mapping accumulated across the function. It then; generates a main function which calls it with a different value in each element; and checks that the result matches the expected mapping. Take the output IR printed to stdout, compile it to an executable using whatever; set of transforms you want to test, and run the program. If it crashes, it found; a bug (an error message with the expected and actual result is printed).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:599,Testability,test,test,599,"""""""A shuffle-select vector fuzz tester. This is a python program to fuzz test the LLVM shufflevector and select; instructions. It generates a function with a random sequnece of shufflevectors; while optionally attaching it with a select instruction (regular or zero merge),; maintaining the element mapping accumulated across the function. It then; generates a main function which calls it with a different value in each element; and checks that the result matches the expected mapping. Take the output IR printed to stdout, compile it to an executable using whatever; set of transforms you want to test, and run the program. If it crashes, it found; a bug (an error message with the expected and actual result is printed).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:46,Availability,mask,mask,46,# Possibility of one undef index in generated mask for shufflevector instruction,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:46,Availability,mask,mask,46,# Possibility of one undef index in generated mask for select instruction,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:32,Modifiability,variab,variable,32,# Class to represent any value (variable) that can be used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:37,Testability,test,tested,37,"# Returns a random vector type to be tested; # In case one of the dimensions (scalar type/number of elements) is provided,; # fill the blank dimension and return appropriate Type object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:11,Availability,mask,mask,11,"# Generate mask for shufflevector IR instruction, with SHUF_UNDEF_POS possibility; # of one undef index.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:11,Availability,mask,mask,11,"# Generate mask for select IR instruction, with SEL_UNDEF_POS possibility; # of one undef index.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:11,Availability,avail,available,11,# Choose 2 available Values - remove them from inputs list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:69,Availability,avail,available,69,# Add the select instructions to the list of instructions and to the available Values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:70,Availability,avail,available,70,"# If the shuffle instruction is not followed by select, add it to the available Values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:32,Testability,test,tested,32,"""""""; Choose specific type to be tested.; i8, i16, i32, i64, f32 or f64.; (default: random)""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:19,Testability,test,test,19,# print the actual test function by dumping the generated instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:12,Availability,error,error,12,# Print the error message templates as global strings,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:18,Integrability,message,message,18,# Print the error message templates as global strings,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:33,Availability,failure,failure,33,# Prepare the runtime checks and failure handlers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:7,Availability,failure,failure,7,# Emit failure handler for each runtime check with proper error message,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:58,Availability,error,error,58,# Emit failure handler for each runtime check with proper error message,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:64,Integrability,message,message,64,# Emit failure handler for each runtime check with proper error message,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py:41,Testability,test,test,41,# Prepare the input values passed to the test function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/shuffle_select_fuzz_tester.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sort_includes.py:159,Deployability,Patch,Patches,159,"""""""Script to sort the top-most block of #include lines. Assumes the LLVM coding conventions. Currently, this script only bothers sorting the llvm/... headers. Patches; welcome for more functionality, and sorting other header groups.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/sort_includes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sort_includes.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sort_includes.py:45,Testability,test,test,45,# Skip files which are under INPUTS trees or test trees.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/sort_includes.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sort_includes.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sysroot.py:255,Integrability,depend,depending,255,# The SDKs used by default in compiler-rt/cmake/base-config-ix.cmake.; # COMPILER_RT_ENABLE_IOS defaults to on.; # COMPILER_RT_ENABLE_WATCHOS and COMPILER_RT_ENABLE_TV default to off.; # compiler-rt/cmake/config-ix.cmake sets DARWIN_EMBEDDED_PLATFORMS; # depending on these.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/sysroot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sysroot.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sysroot.py:53,Modifiability,config,config-ix,53,# The SDKs used by default in compiler-rt/cmake/base-config-ix.cmake.; # COMPILER_RT_ENABLE_IOS defaults to on.; # COMPILER_RT_ENABLE_WATCHOS and COMPILER_RT_ENABLE_TV default to off.; # compiler-rt/cmake/config-ix.cmake sets DARWIN_EMBEDDED_PLATFORMS; # depending on these.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/sysroot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sysroot.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sysroot.py:205,Modifiability,config,config-ix,205,# The SDKs used by default in compiler-rt/cmake/base-config-ix.cmake.; # COMPILER_RT_ENABLE_IOS defaults to on.; # COMPILER_RT_ENABLE_WATCHOS and COMPILER_RT_ENABLE_TV default to off.; # compiler-rt/cmake/config-ix.cmake sets DARWIN_EMBEDDED_PLATFORMS; # depending on these.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/sysroot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sysroot.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sysroot.py:208,Deployability,update,updated,208,"# sdkpath is something like /.../SDKs/MacOSX11.1.sdk, which is a; # symlink to MacOSX.sdk in the same directory. Resolve the symlink,; # to make the symlink in out_dir less likely to break when the SDK; # is updated (which will bump the number on xcrun's output, but not; # on the symlink destination).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/sysroot.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/sysroot.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/unicode-case-fold.py:307,Usability,Simpl,Simple,307,"""""""; Unicode case folding database conversion utility. Parses the database and generates a C++ function which implements the case; folding algorithm. The database entries are of the form:. <code>; <status>; <mapping>; # <name>. <status> can be one of four characters:; C - Common mappings; S - mappings for Simple case folding; F - mappings for Full case folding; T - special case for Turkish I characters. Right now this generates a function which implements simple case folding (C+S; entries).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/unicode-case-fold.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/unicode-case-fold.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/unicode-case-fold.py:460,Usability,simpl,simple,460,"""""""; Unicode case folding database conversion utility. Parses the database and generates a C++ function which implements the case; folding algorithm. The database entries are of the form:. <code>; <status>; <mapping>; # <name>. <status> can be one of four characters:; C - Common mappings; S - mappings for Simple case folding; F - mappings for Full case folding; T - special case for Turkish I characters. Right now this generates a function which implements simple case folding (C+S; entries).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/unicode-case-fold.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/unicode-case-fold.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/unicode-case-fold.py:7,Modifiability,variab,variable,7,# This variable will body of the mappings function,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/unicode-case-fold.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/unicode-case-fold.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/unicode-case-fold.py:47,Usability,Simpl,Simple,47,"# Reads file line-by-line, extracts Common and Simple case fold mappings and; # returns a (from_char, to_char, from_name) tuple.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/unicode-case-fold.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/unicode-case-fold.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:1171,Availability,down,down,1171,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:99,Deployability,update,update,99,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:179,Deployability,update,update,179,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:351,Deployability,patch,patch,351,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:451,Deployability,patch,patch,451,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:502,Deployability,Update,Update,502,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:827,Deployability,patch,patch,827,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:1016,Deployability,patch,patch,1016,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:64,Testability,test,tests,64,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:124,Testability,test,test,124,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:197,Testability,test,tests,197,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:228,Testability,test,test,228,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:308,Testability,test,test,308,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:426,Testability,test,test,426,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:550,Testability,test,tests,550,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:924,Testability,test,tests,924,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:1047,Testability,test,test,1047,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:1268,Testability,test,test,1268,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py:1356,Testability,test,test,1356,"""""""A script to generate FileCheck statements for 'opt' analysis tests. This script is a utility to update LLVM opt analysis test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:; $ update_analyze_test_checks.py --opt=../bin/opt test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -passes='print<cost-model>' -disable-output 2>&1 | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review. A common pattern is to have the script insert complete checking of every; instruction. Then, edit it down to only check the relevant instructions.; The script is designed to make adding checks to a test case fast, it is *not*; designed to be authoratitive about what constitutes a good test!; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_analyze_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_any_test_checks.py:86,Testability,test,test,86,"""""""Dispatch to update_*_test_checks.py scripts automatically in bulk. Given a list of test files, this script will invoke the correct; update_test_checks-style script, skipping any tests which have not previously; had assertions autogenerated.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_any_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_any_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_any_test_checks.py:181,Testability,test,tests,181,"""""""Dispatch to update_*_test_checks.py scripts automatically in bulk. Given a list of test files, this script will invoke the correct; update_test_checks-style script, skipping any tests which have not previously; had assertions autogenerated.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_any_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_any_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_any_test_checks.py:218,Testability,assert,assertions,218,"""""""Dispatch to update_*_test_checks.py scripts automatically in bulk. Given a list of test files, this script will invoke the correct; update_test_checks-style script, skipping any tests which have not previously; had assertions autogenerated.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_any_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_any_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:16,Deployability,update,update,16,"""""""A utility to update LLVM IR CHECK lines in C/C++ FileCheck test files. Example RUN lines in .c/.cc test files:. // RUN: %clang -emit-llvm -S %s -o - -O2 | FileCheck %s; // RUN: %clangxx -emit-llvm -S %s -o - -O2 | FileCheck -check-prefix=CHECK-A %s. Usage:. % utils/update_cc_test_checks.py --llvm-bin=release/bin test/a.cc; % utils/update_cc_test_checks.py --clang=release/bin/clang /tmp/c/a.cc; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:305,Deployability,release,release,305,"""""""A utility to update LLVM IR CHECK lines in C/C++ FileCheck test files. Example RUN lines in .c/.cc test files:. // RUN: %clang -emit-llvm -S %s -o - -O2 | FileCheck %s; // RUN: %clangxx -emit-llvm -S %s -o - -O2 | FileCheck -check-prefix=CHECK-A %s. Usage:. % utils/update_cc_test_checks.py --llvm-bin=release/bin test/a.cc; % utils/update_cc_test_checks.py --clang=release/bin/clang /tmp/c/a.cc; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:369,Deployability,release,release,369,"""""""A utility to update LLVM IR CHECK lines in C/C++ FileCheck test files. Example RUN lines in .c/.cc test files:. // RUN: %clang -emit-llvm -S %s -o - -O2 | FileCheck %s; // RUN: %clangxx -emit-llvm -S %s -o - -O2 | FileCheck -check-prefix=CHECK-A %s. Usage:. % utils/update_cc_test_checks.py --llvm-bin=release/bin test/a.cc; % utils/update_cc_test_checks.py --clang=release/bin/clang /tmp/c/a.cc; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:62,Testability,test,test,62,"""""""A utility to update LLVM IR CHECK lines in C/C++ FileCheck test files. Example RUN lines in .c/.cc test files:. // RUN: %clang -emit-llvm -S %s -o - -O2 | FileCheck %s; // RUN: %clangxx -emit-llvm -S %s -o - -O2 | FileCheck -check-prefix=CHECK-A %s. Usage:. % utils/update_cc_test_checks.py --llvm-bin=release/bin test/a.cc; % utils/update_cc_test_checks.py --clang=release/bin/clang /tmp/c/a.cc; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:102,Testability,test,test,102,"""""""A utility to update LLVM IR CHECK lines in C/C++ FileCheck test files. Example RUN lines in .c/.cc test files:. // RUN: %clang -emit-llvm -S %s -o - -O2 | FileCheck %s; // RUN: %clangxx -emit-llvm -S %s -o - -O2 | FileCheck -check-prefix=CHECK-A %s. Usage:. % utils/update_cc_test_checks.py --llvm-bin=release/bin test/a.cc; % utils/update_cc_test_checks.py --clang=release/bin/clang /tmp/c/a.cc; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:317,Testability,test,test,317,"""""""A utility to update LLVM IR CHECK lines in C/C++ FileCheck test files. Example RUN lines in .c/.cc test files:. // RUN: %clang -emit-llvm -S %s -o - -O2 | FileCheck %s; // RUN: %clangxx -emit-llvm -S %s -o - -O2 | FileCheck -check-prefix=CHECK-A %s. Usage:. % utils/update_cc_test_checks.py --llvm-bin=release/bin test/a.cc; % utils/update_cc_test_checks.py --clang=release/bin/clang /tmp/c/a.cc; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:6,Testability,test,tests,6,# For tests that invoke %clang instead if %clang_cc1 we have to use; # -Xclang -ast-dump=json instead:,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:107,Modifiability,variab,variables,107,# Parse the clang JSON and add all children of type FunctionDecl.; # TODO: Should we add checks for global variables being emitted?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:58,Deployability,update,update,58,# Determine the builtin includes directory so that we can update tests that; # depend on the builtin headers. See get_clang_builtin_include_dir() and; # use_clang() in llvm/utils/lit/lit/llvm/config.py.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:79,Integrability,depend,depend,79,# Determine the builtin includes directory so that we can update tests that; # depend on the builtin headers. See get_clang_builtin_include_dir() and; # use_clang() in llvm/utils/lit/lit/llvm/config.py.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:192,Modifiability,config,config,192,# Determine the builtin includes directory so that we can update tests that; # depend on the builtin headers. See get_clang_builtin_include_dir() and; # use_clang() in llvm/utils/lit/lit/llvm/config.py.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:65,Testability,test,tests,65,# Determine the builtin includes directory so that we can update tests that; # depend on the builtin headers. See get_clang_builtin_include_dir() and; # use_clang() in llvm/utils/lit/lit/llvm/config.py.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:157,Availability,error,error,157,"# Many uses of this tool will not need an opt binary, because it's only; # needed for updating a test that runs clang | opt | FileCheck. So we; # defer this error message until we find that opt is actually needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:163,Integrability,message,message,163,"# Many uses of this tool will not need an opt binary, because it's only; # needed for updating a test that runs clang | opt | FileCheck. So we; # defer this error message until we find that opt is actually needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:97,Testability,test,test,97,"# Many uses of this tool will not need an opt binary, because it's only; # needed for updating a test that runs clang | opt | FileCheck. So we; # defer this error message until we find that opt is actually needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py:160,Usability,simpl,simply,160,"# One line may contain multiple function declarations.; # Skip if the mangled name has been added before.; # The line number may come from an included file, we simply require; # the search string (normally the function's spelling name, but is; # the class's spelling name for class specializations) to appear on; # the line to exclude functions from other files.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_cc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_cc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py:15,Deployability,update,update,15,"""""""A test case update script. This script is a utility to update LLVM 'llc' based test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_llc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py:58,Deployability,update,update,58,"""""""A test case update script. This script is a utility to update LLVM 'llc' based test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_llc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py:137,Deployability,update,update,137,"""""""A test case update script. This script is a utility to update LLVM 'llc' based test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_llc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py:5,Testability,test,test,5,"""""""A test case update script. This script is a utility to update LLVM 'llc' based test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_llc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py:82,Testability,test,test,82,"""""""A test case update script. This script is a utility to update LLVM 'llc' based test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_llc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py:155,Testability,test,tests,155,"""""""A test case update script. This script is a utility to update LLVM 'llc' based test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_llc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py:186,Testability,test,test,186,"""""""A test case update script. This script is a utility to update LLVM 'llc' based test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_llc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py:48,Availability,down,downstream,48,# llc is the only llc-like in the LLVM tree but downstream forks can add; # additional ones here if they have them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_llc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py:202,Safety,predict,predict,202,"# Generate the appropriate checks for each function. We need to emit; # these in the order according to the generated output so that CHECK-LABEL; # works properly. func_order provides that.; # We can't predict where various passes might insert functions so we can't; # be sure the input function order is maintained. Therefore, first spit; # out all the source lines.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_llc_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_llc_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:15,Deployability,update,update,15,"""""""A test case update script. This script is a utility to update LLVM 'llvm-mca' based test cases with new; FileCheck patterns.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:58,Deployability,update,update,58,"""""""A test case update script. This script is a utility to update LLVM 'llvm-mca' based test cases with new; FileCheck patterns.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:5,Testability,test,test,5,"""""""A test case update script. This script is a utility to update LLVM 'llvm-mca' based test cases with new; FileCheck patterns.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:87,Testability,test,test,87,"""""""A test case update script. This script is a utility to update LLVM 'llvm-mca' based test cases with new; FileCheck patterns.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:11,Availability,Error,Error,11,"""""""Generic Error that can be raised without printing a traceback.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:3,Testability,Log,Log,3,"""""""Log a user warning to stderr.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:76,Availability,down,down,76,"""""""Given a block_info, see if we can analyze it further to let us break it; down by prefix per-line rather than per-block.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:5,Usability,simpl,simplify,5,"# To simplify output, we'll only proceed if the very first line of the block; # texts is common to each of them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:102,Availability,avail,available,102,"# The line is not common to each block, or we don't have a common prefix.; # If there are no prefixes available, warn and bail out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:9,Security,hash,hashable,9,"""""""Get a hashable key based on the current tool_args and prefixes.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:4,Performance,cache,cache,4,"# A cache of the furthest-back position in any block list of the first; # instance of each block, indexed by the block itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:53,Availability,down,down,53,"# If we have multiple block_texts, try to break them down further to avoid; # the case where we have very similar block_texts repeated after each; # other.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:69,Safety,avoid,avoid,69,"# If we have multiple block_texts, try to break them down further to avoid; # the case where we have very similar block_texts repeated after each; # other.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:16,Testability,test,test,16,# Call this per test. By default each warning will only be written once; # per source location. Reset the warning filter so that now each warning; # will be written once per source location per test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py:194,Testability,test,test,194,# Call this per test. By default each warning will only be written once; # per source location. Reset the warning filter so that now each warning; # will be written once per source location per test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mca_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mca_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py:3,Deployability,Update,Updates,3,"""""""Updates FileCheck checks in MIR tests. This script is a utility to update MIR based tests with new FileCheck; patterns. The checks added by this script will cover the entire body of each; function it handles. Virtual registers used are given names via; FileCheck patterns, so if you do want to check a subset of the body it; should be straightforward to trim out the irrelevant parts. None of; the YAML metadata will be checked, other than function names, and fixedStack; if the --print-fixed-stack option is used. If there are multiple llc commands in a test, the full set of checks; will be repeated for each different check pattern. Checks for patterns; that are common between different commands will be left as-is by; default, or removed if the --remove-common-prefixes flag is provided.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mir_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py:70,Deployability,update,update,70,"""""""Updates FileCheck checks in MIR tests. This script is a utility to update MIR based tests with new FileCheck; patterns. The checks added by this script will cover the entire body of each; function it handles. Virtual registers used are given names via; FileCheck patterns, so if you do want to check a subset of the body it; should be straightforward to trim out the irrelevant parts. None of; the YAML metadata will be checked, other than function names, and fixedStack; if the --print-fixed-stack option is used. If there are multiple llc commands in a test, the full set of checks; will be repeated for each different check pattern. Checks for patterns; that are common between different commands will be left as-is by; default, or removed if the --remove-common-prefixes flag is provided.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mir_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py:35,Testability,test,tests,35,"""""""Updates FileCheck checks in MIR tests. This script is a utility to update MIR based tests with new FileCheck; patterns. The checks added by this script will cover the entire body of each; function it handles. Virtual registers used are given names via; FileCheck patterns, so if you do want to check a subset of the body it; should be straightforward to trim out the irrelevant parts. None of; the YAML metadata will be checked, other than function names, and fixedStack; if the --print-fixed-stack option is used. If there are multiple llc commands in a test, the full set of checks; will be repeated for each different check pattern. Checks for patterns; that are common between different commands will be left as-is by; default, or removed if the --remove-common-prefixes flag is provided.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mir_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py:87,Testability,test,tests,87,"""""""Updates FileCheck checks in MIR tests. This script is a utility to update MIR based tests with new FileCheck; patterns. The checks added by this script will cover the entire body of each; function it handles. Virtual registers used are given names via; FileCheck patterns, so if you do want to check a subset of the body it; should be straightforward to trim out the irrelevant parts. None of; the YAML metadata will be checked, other than function names, and fixedStack; if the --print-fixed-stack option is used. If there are multiple llc commands in a test, the full set of checks; will be repeated for each different check pattern. Checks for patterns; that are common between different commands will be left as-is by; default, or removed if the --remove-common-prefixes flag is provided.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mir_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py:558,Testability,test,test,558,"""""""Updates FileCheck checks in MIR tests. This script is a utility to update MIR based tests with new FileCheck; patterns. The checks added by this script will cover the entire body of each; function it handles. Virtual registers used are given names via; FileCheck patterns, so if you do want to check a subset of the body it; should be straightforward to trim out the irrelevant parts. None of; the YAML metadata will be checked, other than function names, and fixedStack; if the --print-fixed-stack option is used. If there are multiple llc commands in a test, the full set of checks; will be repeated for each different check pattern. Checks for patterns; that are common between different commands will be left as-is by; default, or removed if the --remove-common-prefixes flag is provided.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mir_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py:2,Usability,Simpl,Simplify,2,# Simplify some common prefixes and suffixes,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mir_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py:2,Safety,Avoid,Avoid,2,# Avoid ambiguity when opcodes end in numbers,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_mir_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_mir_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:101,Deployability,update,update,101,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:172,Deployability,update,update,172,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:551,Deployability,patch,patch,551,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:651,Deployability,patch,patch,651,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:702,Deployability,Update,Update,702,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:994,Deployability,patch,patch,994,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:1183,Deployability,patch,patch,1183,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:66,Testability,test,tests,66,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:117,Testability,test,test,117,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:190,Testability,test,tests,190,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:221,Testability,test,test,221,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:325,Testability,test,test,325,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:416,Testability,test,test,416,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:508,Testability,test,test,508,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:626,Testability,test,test,626,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:750,Testability,test,tests,750,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:1091,Testability,test,tests,1091,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:1214,Testability,test,test,1214,"""""""A script to generate FileCheck statements for 'opt' regression tests. This script is a utility to update LLVM opt test cases with new; FileCheck patterns. It can either update all of the tests in the file or; a single test function. Example usage:. # Default to using `opt` as found in your PATH.; $ update_test_checks.py test/foo.ll. # Override the path lookup.; $ update_test_checks.py --tool-binary=../bin/opt test/foo.ll. # Use a custom tool instead of `opt`.; $ update_test_checks.py --tool=yourtool test/foo.ll. Workflow:; 1. Make a compiler patch that requires updating some number of FileCheck lines; in regression test files.; 2. Save the patch and revert it from your local work area.; 3. Update the RUN-lines in the affected regression tests to look canonical.; Example: ""; RUN: opt < %s -instcombine -S | FileCheck %s""; 4. Refresh the FileCheck lines for either the entire file or select functions by; running this script.; 5. Commit the fresh baseline of checks.; 6. Apply your patch from step 1 and rebuild your local binaries.; 7. Re-run this script on affected regression tests.; 8. Check the diffs to ensure the script has done something reasonable.; 9. Submit a patch including the regression test diffs for review.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py:202,Safety,predict,predict,202,"# Generate the appropriate checks for each function. We need to emit; # these in the order according to the generated output so that CHECK-LABEL; # works properly. func_order provides that.; # We can't predict where various passes might insert functions so we can't; # be sure the input function order is maintained. Therefore, first spit; # out all the source lines.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/update_test_checks.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/update_test_checks.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/wciia.py:293,Usability,simpl,simplistic,293,"""""""; wciia - Whose Code Is It Anyway. Determines code owner of the file/folder relative to the llvm source root.; Code owner is determined from the content of the CODE_OWNERS.TXT ; by parsing the D: field. usage:. utils/wciia.py path. limitations:; - must be run from llvm source root; - very simplistic algorithm; - only handles * as a wildcard; - not very user friendly ; - does not handle the proposed F: field. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/wciia.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/wciia.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/wciia.py:7,Usability,simpl,simplistic,7,# very simplistic way of findning the best match,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/wciia.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/wciia.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:31,Security,checksum,checksums,31,""""""" A small program to compute checksums of LLVM checkout.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:11,Security,checksum,checksums,11,"""""""Compute checksums for LLVM sources checked out using svn. Args:; root_path: a directory of llvm checkout.; projects: a list of LLVMProject instances, which describe checkout paths,; relative to root_path. Returns:; A dict mapping from project name to project checksum.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:262,Security,checksum,checksum,262,"""""""Compute checksums for LLVM sources checked out using svn. Args:; root_path: a directory of llvm checkout.; projects: a list of LLVMProject instances, which describe checkout paths,; relative to root_path. Returns:; A dict mapping from project name to project checksum.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:2,Security,Hash,Hash,2,# Hash each project.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:16,Security,checksum,checksum,16,# Compute final checksum.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:10,Security,checksum,checksums,10,"""""""Writes checksums to a text file. Args:; checksums: a dict mapping from project name to project checksum (result of; ComputeLLVMChecksums).; f: a file object to write into.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:43,Security,checksum,checksums,43,"""""""Writes checksums to a text file. Args:; checksums: a dict mapping from project name to project checksum (result of; ComputeLLVMChecksums).; f: a file object to write into.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:98,Security,checksum,checksum,98,"""""""Writes checksums to a text file. Args:; checksums: a dict mapping from project name to project checksum (result of; ComputeLLVMChecksums).; f: a file object to write into.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:9,Security,checksum,checksums,9,"""""""Reads checksums from a text file, produced by WriteLLVMChecksums. Returns:; A dict, mapping from project name to project checksum.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:124,Security,checksum,checksum,124,"""""""Reads checksums from a text file, produced by WriteLLVMChecksums. Returns:; A dict, mapping from project name to project checksum.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:3,Security,Validat,Validates,3,"""""""Validates that reference_checksums and new_checksums match. Args:; reference_checksums: a dict of reference checksums, mapping from a project; name to a project checksum.; new_checksums: a dict of checksums to be checked, mapping from a project; name to a project checksum.; allow_missing_projects:; When True, reference_checksums may contain more projects than; new_checksums. Projects missing from new_checksums are ignored.; When False, new_checksums and reference_checksums must contain checksums; for the same set of projects. If there is a project in; reference_checksums, missing from new_checksums, ValidateChecksums; will return False. Returns:; True, if checksums match with regards to allow_missing_projects flag value.; False, otherwise.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:111,Security,checksum,checksums,111,"""""""Validates that reference_checksums and new_checksums match. Args:; reference_checksums: a dict of reference checksums, mapping from a project; name to a project checksum.; new_checksums: a dict of checksums to be checked, mapping from a project; name to a project checksum.; allow_missing_projects:; When True, reference_checksums may contain more projects than; new_checksums. Projects missing from new_checksums are ignored.; When False, new_checksums and reference_checksums must contain checksums; for the same set of projects. If there is a project in; reference_checksums, missing from new_checksums, ValidateChecksums; will return False. Returns:; True, if checksums match with regards to allow_missing_projects flag value.; False, otherwise.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:164,Security,checksum,checksum,164,"""""""Validates that reference_checksums and new_checksums match. Args:; reference_checksums: a dict of reference checksums, mapping from a project; name to a project checksum.; new_checksums: a dict of checksums to be checked, mapping from a project; name to a project checksum.; allow_missing_projects:; When True, reference_checksums may contain more projects than; new_checksums. Projects missing from new_checksums are ignored.; When False, new_checksums and reference_checksums must contain checksums; for the same set of projects. If there is a project in; reference_checksums, missing from new_checksums, ValidateChecksums; will return False. Returns:; True, if checksums match with regards to allow_missing_projects flag value.; False, otherwise.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:200,Security,checksum,checksums,200,"""""""Validates that reference_checksums and new_checksums match. Args:; reference_checksums: a dict of reference checksums, mapping from a project; name to a project checksum.; new_checksums: a dict of checksums to be checked, mapping from a project; name to a project checksum.; allow_missing_projects:; When True, reference_checksums may contain more projects than; new_checksums. Projects missing from new_checksums are ignored.; When False, new_checksums and reference_checksums must contain checksums; for the same set of projects. If there is a project in; reference_checksums, missing from new_checksums, ValidateChecksums; will return False. Returns:; True, if checksums match with regards to allow_missing_projects flag value.; False, otherwise.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:267,Security,checksum,checksum,267,"""""""Validates that reference_checksums and new_checksums match. Args:; reference_checksums: a dict of reference checksums, mapping from a project; name to a project checksum.; new_checksums: a dict of checksums to be checked, mapping from a project; name to a project checksum.; allow_missing_projects:; When True, reference_checksums may contain more projects than; new_checksums. Projects missing from new_checksums are ignored.; When False, new_checksums and reference_checksums must contain checksums; for the same set of projects. If there is a project in; reference_checksums, missing from new_checksums, ValidateChecksums; will return False. Returns:; True, if checksums match with regards to allow_missing_projects flag value.; False, otherwise.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:494,Security,checksum,checksums,494,"""""""Validates that reference_checksums and new_checksums match. Args:; reference_checksums: a dict of reference checksums, mapping from a project; name to a project checksum.; new_checksums: a dict of checksums to be checked, mapping from a project; name to a project checksum.; allow_missing_projects:; When True, reference_checksums may contain more projects than; new_checksums. Projects missing from new_checksums are ignored.; When False, new_checksums and reference_checksums must contain checksums; for the same set of projects. If there is a project in; reference_checksums, missing from new_checksums, ValidateChecksums; will return False. Returns:; True, if checksums match with regards to allow_missing_projects flag value.; False, otherwise.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:610,Security,Validat,ValidateChecksums,610,"""""""Validates that reference_checksums and new_checksums match. Args:; reference_checksums: a dict of reference checksums, mapping from a project; name to a project checksum.; new_checksums: a dict of checksums to be checked, mapping from a project; name to a project checksum.; allow_missing_projects:; When True, reference_checksums may contain more projects than; new_checksums. Projects missing from new_checksums are ignored.; When False, new_checksums and reference_checksums must contain checksums; for the same set of projects. If there is a project in; reference_checksums, missing from new_checksums, ValidateChecksums; will return False. Returns:; True, if checksums match with regards to allow_missing_projects flag value.; False, otherwise.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:667,Security,checksum,checksums,667,"""""""Validates that reference_checksums and new_checksums match. Args:; reference_checksums: a dict of reference checksums, mapping from a project; name to a project checksum.; new_checksums: a dict of checksums to be checked, mapping from a project; name to a project checksum.; allow_missing_projects:; When True, reference_checksums may contain more projects than; new_checksums. Projects missing from new_checksums are ignored.; When False, new_checksums and reference_checksums must contain checksums; for the same set of projects. If there is a project in; reference_checksums, missing from new_checksums, ValidateChecksums; will return False. Returns:; True, if checksums match with regards to allow_missing_projects flag value.; False, otherwise.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:22,Security,checksum,checksum,22,# We never computed a checksum for this project.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py:2,Security,Checksum,Checksum,2,# Checksum did not match.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/llvm_checksum.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/project_tree.py:40,Security,checksum,checksums,40,"""""""Contains helper functions to compute checksums for LLVM checkouts.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/project_tree.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/docker/scripts/llvm_checksum/project_tree.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp:586,Availability,error,error,586,"//===- FileCheck.cpp - Check that File's Contents match what is expected --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // FileCheck does a line-by line check of a file that validates whether it; // contains the expected content. This is useful for regression tests etc.; //; // This program exits with an exit status of 2 on error, exit status of 0 if; // the file matched the expected contents, and exit status of 1 if it did not; // contain the expected contents.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp:434,Security,validat,validates,434,"//===- FileCheck.cpp - Check that File's Contents match what is expected --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // FileCheck does a line-by line check of a file that validates whether it; // contains the expected content. This is useful for regression tests etc.; //; // This program exits with an exit status of 2 on error, exit status of 0 if; // the file matched the expected contents, and exit status of 1 if it did not; // contain the expected contents.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp:520,Testability,test,tests,520,"//===- FileCheck.cpp - Check that File's Contents match what is expected --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // FileCheck does a line-by line check of a file that validates whether it; // contains the expected content. This is useful for regression tests etc.; //; // This program exits with an exit status of 2 on error, exit status of 0 if; // the file matched the expected contents, and exit status of 1 if it did not; // contain the expected contents.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp:62,Availability,error,error,62,/// Does this marker indicate inclusion by -dump-input-filter=error?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp:241,Usability,simpl,simply,241,"// It's less confusing if notes that don't actually have ranges don't have; // markers. For example, a marker for 'with ""VAR"" equal to ""5""' would; // seem to indicate where ""VAR"" matches, but the location we actually have; // for the marker simply points to the start of the match/search range for; // the full pattern of which the substitution is potentially just one; // component.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp:172,Usability,clear,clear,172,"/// To OS, print a vertical ellipsis (right-justified at LabelWidth) if it would; /// occupy less lines than ElidedLines, but print ElidedLines otherwise. Either; /// way, clear ElidedLines. Thus, if ElidedLines is empty, do nothing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp:228,Testability,log,logic,228,"// 2. Sort annotations in the temporal order FileCheck produced; // their associated diagnostics.; //; // This sort offers several benefits:; //; // A. On a single input line, the order of annotations reflects; // the FileCheck logic for processing directives/patterns.; // This can be helpful in understanding cases in which the; // order of the associated directives/patterns in the check; // file or on the command line either (i) does not match the; // temporal order in which FileCheck looks for matches for the; // directives/patterns (due to, for example, CHECK-LABEL,; // CHECK-NOT, or `--implicit-check-not`) or (ii) does match; // that order but does not match the order of those; // diagnostics along an input line (due to, for example,; // CHECK-DAG).; //; // On the other hand, because our presentation format presents; // input lines in order, there's no clear way to offer the; // same benefit across input lines. For consistency, it might; // then seem worthwhile to have annotations on a single line; // also sorted in input order (that is, by input column).; // However, in practice, this appears to be more confusing; // than helpful. Perhaps it's intuitive to expect annotations; // to be listed in the temporal order in which they were; // produced except in cases the presentation format obviously; // and inherently cannot support it (that is, across input; // lines).; //; // B. When diagnostics' annotations are split among multiple; // input lines, the user must track them from one input line; // to the next. One property of the sort chosen here is that; // it facilitates the user in this regard by ensuring the; // following: when comparing any two input lines, a; // diagnostic's annotations are sorted in the same position; // relative to all other diagnostics' annotations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp:869,Usability,clear,clear,869,"// 2. Sort annotations in the temporal order FileCheck produced; // their associated diagnostics.; //; // This sort offers several benefits:; //; // A. On a single input line, the order of annotations reflects; // the FileCheck logic for processing directives/patterns.; // This can be helpful in understanding cases in which the; // order of the associated directives/patterns in the check; // file or on the command line either (i) does not match the; // temporal order in which FileCheck looks for matches for the; // directives/patterns (due to, for example, CHECK-LABEL,; // CHECK-NOT, or `--implicit-check-not`) or (ii) does match; // that order but does not match the order of those; // diagnostics along an input line (due to, for example,; // CHECK-DAG).; //; // On the other hand, because our presentation format presents; // input lines in order, there's no clear way to offer the; // same benefit across input lines. For consistency, it might; // then seem worthwhile to have annotations on a single line; // also sorted in input order (that is, by input column).; // However, in practice, this appears to be more confusing; // than helpful. Perhaps it's intuitive to expect annotations; // to be listed in the temporal order in which they were; // produced except in cases the presentation format obviously; // and inherently cannot support it (that is, across input; // lines).; //; // B. When diagnostics' annotations are split among multiple; // input lines, the user must track them from one input line; // to the next. One property of the sort chosen here is that; // it facilitates the user in this regard by ensuring the; // following: when comparing any two input lines, a; // diagnostic's annotations are sorted in the same position; // relative to all other diagnostics' annotations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp:1167,Usability,intuit,intuitive,1167,"// 2. Sort annotations in the temporal order FileCheck produced; // their associated diagnostics.; //; // This sort offers several benefits:; //; // A. On a single input line, the order of annotations reflects; // the FileCheck logic for processing directives/patterns.; // This can be helpful in understanding cases in which the; // order of the associated directives/patterns in the check; // file or on the command line either (i) does not match the; // temporal order in which FileCheck looks for matches for the; // directives/patterns (due to, for example, CHECK-LABEL,; // CHECK-NOT, or `--implicit-check-not`) or (ii) does match; // that order but does not match the order of those; // diagnostics along an input line (due to, for example,; // CHECK-DAG).; //; // On the other hand, because our presentation format presents; // input lines in order, there's no clear way to offer the; // same benefit across input lines. For consistency, it might; // then seem worthwhile to have annotations on a single line; // also sorted in input order (that is, by input column).; // However, in practice, this appears to be more confusing; // than helpful. Perhaps it's intuitive to expect annotations; // to be listed in the temporal order in which they were; // produced except in cases the presentation format obviously; // and inherently cannot support it (that is, across input; // lines).; //; // B. When diagnostics' annotations are split among multiple; // input lines, the user must track them from one input line; // to the next. One property of the sort chosen here is that; // it facilitates the user in this regard by ensuring the; // following: when comparing any two input lines, a; // diagnostic's annotations are sorted in the same position; // relative to all other diagnostics' annotations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp:37,Integrability,message,messages,37,// Overwrite for improved diagnostic messages,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/FileCheck/FileCheck.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py:17,Safety,detect,detects,17,"""""""A linter that detects potential typos in FileCheck directive names. Consider a broken test foo.cpp:. // RUN: clang -cc1 -ast-dump %s | FileCheck %s --check-prefix=NEW; // RUN: clang -cc1 -ast-dump %s -std=c++98 | FileCheck %s --check-prefix=OLD; auto x = 42;; // NEWW: auto is a c++11 extension; // ODL-NOT: auto is a c++11 extension. We first detect the locally valid FileCheck directive prefixes by parsing the; --check-prefix flags. Here we get {CHECK, NEW, OLD}, so our directive names are; {CHECK, NEW, OLD, CHECK-NOT, NEW-NOT, ...}. Then we look for lines that look like directives. These are of the form 'FOO:',; usually at the beginning of a line or a comment. If any of these are a; ""near-miss"" for a directive name, then we suspect this is a typo and report it. Usage: filecheck_lint path/to/test/file/1 ... path/to/test/file/n; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py:347,Safety,detect,detect,347,"""""""A linter that detects potential typos in FileCheck directive names. Consider a broken test foo.cpp:. // RUN: clang -cc1 -ast-dump %s | FileCheck %s --check-prefix=NEW; // RUN: clang -cc1 -ast-dump %s -std=c++98 | FileCheck %s --check-prefix=OLD; auto x = 42;; // NEWW: auto is a c++11 extension; // ODL-NOT: auto is a c++11 extension. We first detect the locally valid FileCheck directive prefixes by parsing the; --check-prefix flags. Here we get {CHECK, NEW, OLD}, so our directive names are; {CHECK, NEW, OLD, CHECK-NOT, NEW-NOT, ...}. Then we look for lines that look like directives. These are of the form 'FOO:',; usually at the beginning of a line or a comment. If any of these are a; ""near-miss"" for a directive name, then we suspect this is a typo and report it. Usage: filecheck_lint path/to/test/file/1 ... path/to/test/file/n; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py:89,Testability,test,test,89,"""""""A linter that detects potential typos in FileCheck directive names. Consider a broken test foo.cpp:. // RUN: clang -cc1 -ast-dump %s | FileCheck %s --check-prefix=NEW; // RUN: clang -cc1 -ast-dump %s -std=c++98 | FileCheck %s --check-prefix=OLD; auto x = 42;; // NEWW: auto is a c++11 extension; // ODL-NOT: auto is a c++11 extension. We first detect the locally valid FileCheck directive prefixes by parsing the; --check-prefix flags. Here we get {CHECK, NEW, OLD}, so our directive names are; {CHECK, NEW, OLD, CHECK-NOT, NEW-NOT, ...}. Then we look for lines that look like directives. These are of the form 'FOO:',; usually at the beginning of a line or a comment. If any of these are a; ""near-miss"" for a directive name, then we suspect this is a typo and report it. Usage: filecheck_lint path/to/test/file/1 ... path/to/test/file/n; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py:805,Testability,test,test,805,"""""""A linter that detects potential typos in FileCheck directive names. Consider a broken test foo.cpp:. // RUN: clang -cc1 -ast-dump %s | FileCheck %s --check-prefix=NEW; // RUN: clang -cc1 -ast-dump %s -std=c++98 | FileCheck %s --check-prefix=OLD; auto x = 42;; // NEWW: auto is a c++11 extension; // ODL-NOT: auto is a c++11 extension. We first detect the locally valid FileCheck directive prefixes by parsing the; --check-prefix flags. Here we get {CHECK, NEW, OLD}, so our directive names are; {CHECK, NEW, OLD, CHECK-NOT, NEW-NOT, ...}. Then we look for lines that look like directives. These are of the form 'FOO:',; usually at the beginning of a line or a comment. If any of these are a; ""near-miss"" for a directive name, then we suspect this is a typo and report it. Usage: filecheck_lint path/to/test/file/1 ... path/to/test/file/n; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py:829,Testability,test,test,829,"""""""A linter that detects potential typos in FileCheck directive names. Consider a broken test foo.cpp:. // RUN: clang -cc1 -ast-dump %s | FileCheck %s --check-prefix=NEW; // RUN: clang -cc1 -ast-dump %s -std=c++98 | FileCheck %s --check-prefix=OLD; auto x = 42;; // NEWW: auto is a c++11 extension; // ODL-NOT: auto is a c++11 extension. We first detect the locally valid FileCheck directive prefixes by parsing the; --check-prefix flags. Here we get {CHECK, NEW, OLD}, so our directive names are; {CHECK, NEW, OLD, CHECK-NOT, NEW-NOT, ...}. Then we look for lines that look like directives. These are of the form 'FOO:',; usually at the beginning of a line or a comment. If any of these are a; ""near-miss"" for a directive name, then we suspect this is a typo and report it. Usage: filecheck_lint path/to/test/file/1 ... path/to/test/file/n; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py:160,Safety,avoid,avoid,160,"# 'NOTE' and 'TODO' are not directives, but are likely to be false positives; # if encountered and to generate noise as a result. We filter them out also to; # avoid this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py:3,Safety,Detect,Detects,3,"""""""Detects potential typos in FileCheck directives. Args:; content: the content of the file; filepath: the path to the file to check for typos in directives; threshold: the (inclusive) maximum edit distance between a potential; directive and an actual directive, such that the potential directive is; classified as a typo. Yields:; Diagnostics, in order from the top of the file.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py:153,Testability,log,logic,153,# TODO(bchetioui): match count directives more finely. We skip directives; # starting with 'CHECK-COUNT-' for the moment as they require more complex; # logic to be handled correctly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py:101,Safety,avoid,avoid,101,"# Ignoring potential typos that will not be matched later due to a too low; # threshold, in order to avoid potentially long computation times.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/filecheck_lint/filecheck_lint.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/fpcmp/fpcmp.cpp:464,Availability,toler,tolerate,464,"//===- fpcmp.cpp - A fuzzy ""cmp"" that permits floating point noise --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // fpcmp is a tool that basically works like the 'cmp' tool, except that it can; // tolerate errors due to floating point noise, with the -r and -a options.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/fpcmp/fpcmp.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/fpcmp/fpcmp.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/fpcmp/fpcmp.cpp:473,Availability,error,errors,473,"//===- fpcmp.cpp - A fuzzy ""cmp"" that permits floating point noise --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // fpcmp is a tool that basically works like the 'cmp' tool, except that it can; // tolerate errors due to floating point noise, with the -r and -a options.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/fpcmp/fpcmp.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/fpcmp/fpcmp.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py:76,Availability,error,error,76,"# the following is invalid, GDB fails with:; # Python Exception <class 'gdb.error'> Attempt to take address of value; # not located in memory.; # because isEqual took parameter (for the unsigned long key I was testing); # by const ref, and GDB; # It's also not entirely general - we should be accessing the ""getFirst()""; # member function, not the 'first' member variable, but I've yet to figure; # out how to find/call member functions (especially (const) overloaded; # ones) on a gdb.Value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py:363,Modifiability,variab,variable,363,"# the following is invalid, GDB fails with:; # Python Exception <class 'gdb.error'> Attempt to take address of value; # not located in memory.; # because isEqual took parameter (for the unsigned long key I was testing); # by const ref, and GDB; # It's also not entirely general - we should be accessing the ""getFirst()""; # member function, not the 'first' member variable, but I've yet to figure; # out how to find/call member functions (especially (const) overloaded; # ones) on a gdb.Value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py:293,Security,access,accessing,293,"# the following is invalid, GDB fails with:; # Python Exception <class 'gdb.error'> Attempt to take address of value; # not located in memory.; # because isEqual took parameter (for the unsigned long key I was testing); # by const ref, and GDB; # It's also not entirely general - we should be accessing the ""getFirst()""; # member function, not the 'first' member variable, but I've yet to figure; # out how to find/call member functions (especially (const) overloaded; # ones) on a gdb.Value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py:210,Testability,test,testing,210,"# the following is invalid, GDB fails with:; # Python Exception <class 'gdb.error'> Attempt to take address of value; # not located in memory.; # because isEqual took parameter (for the unsigned long key I was testing); # by const ref, and GDB; # It's also not entirely general - we should be accessing the ""getFirst()""; # member function, not the 'first' member variable, but I've yet to figure; # out how to find/call member functions (especially (const) overloaded; # ones) on a gdb.Value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py:119,Availability,error,error,119,"""""""Lookup the default pretty-printer for val and use it. If no pretty-printer is defined for the type of val, print an error and; return a placeholder string.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py:26,Availability,error,error,26,# Note: this throws a gdb.error if the info type is not used (by means of a; # call to getPointer() or similar) in the current translation unit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py:42,Integrability,Depend,Depending,42,"# One of Prev and PrevAndSentinel exists. Depending on #defines used to; # compile LLVM, the base_type's template argument is either true of false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/gdb-scripts/prettyprinters.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py:127,Deployability,install,installed,127,"""""""; This script is run by GitHub actions to ensure that the code in PR's conform to; the coding style of LLVM. It can also be installed as a pre-commit git hook to; check the coding style before submitting it. The canonical source of this script; is in the LLVM source tree under llvm/utils/git. For C/C++ code it uses clang-format and for Python code it uses darker (which; in turn invokes black). You can learn more about the LLVM coding style on llvm.org:; https://llvm.org/docs/CodingStandards.html. You can install this script as a git hook by symlinking it to the .git/hooks; directory:. ln -s $(pwd)/llvm/utils/git/code-format-helper.py .git/hooks/pre-commit. You can control the exact path to clang-format or darker with the following; environment variables: $CLANG_FORMAT_PATH and $DARKER_FORMAT_PATH.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/code-format-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py:513,Deployability,install,install,513,"""""""; This script is run by GitHub actions to ensure that the code in PR's conform to; the coding style of LLVM. It can also be installed as a pre-commit git hook to; check the coding style before submitting it. The canonical source of this script; is in the LLVM source tree under llvm/utils/git. For C/C++ code it uses clang-format and for Python code it uses darker (which; in turn invokes black). You can learn more about the LLVM coding style on llvm.org:; https://llvm.org/docs/CodingStandards.html. You can install this script as a git hook by symlinking it to the .git/hooks; directory:. ln -s $(pwd)/llvm/utils/git/code-format-helper.py .git/hooks/pre-commit. You can control the exact path to clang-format or darker with the following; environment variables: $CLANG_FORMAT_PATH and $DARKER_FORMAT_PATH.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/code-format-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py:757,Modifiability,variab,variables,757,"""""""; This script is run by GitHub actions to ensure that the code in PR's conform to; the coding style of LLVM. It can also be installed as a pre-commit git hook to; check the coding style before submitting it. The canonical source of this script; is in the LLVM source tree under llvm/utils/git. For C/C++ code it uses clang-format and for Python code it uses darker (which; in turn invokes black). You can learn more about the LLVM coding style on llvm.org:; https://llvm.org/docs/CodingStandards.html. You can install this script as a git hook by symlinking it to the .git/hooks; directory:. ln -s $(pwd)/llvm/utils/git/code-format-helper.py .git/hooks/pre-commit. You can control the exact path to clang-format or darker with the following; environment variables: $CLANG_FORMAT_PATH and $DARKER_FORMAT_PATH.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/code-format-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py:408,Usability,learn,learn,408,"""""""; This script is run by GitHub actions to ensure that the code in PR's conform to; the coding style of LLVM. It can also be installed as a pre-commit git hook to; check the coding style before submitting it. The canonical source of this script; is in the LLVM source tree under llvm/utils/git. For C/C++ code it uses clang-format and for Python code it uses darker (which; in turn invokes black). You can learn more about the LLVM coding style on llvm.org:; https://llvm.org/docs/CodingStandards.html. You can install this script as a git hook by symlinking it to the .git/hooks; directory:. ln -s $(pwd)/llvm/utils/git/code-format-helper.py .git/hooks/pre-commit. You can control the exact path to clang-format or darker with the following; environment variables: $CLANG_FORMAT_PATH and $DARKER_FORMAT_PATH.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/code-format-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py:136,Deployability,install,installed,136,"# TODO: any type should be replaced with the correct github type, but it requires refactoring to; # not require the github module to be installed everywhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/code-format-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py:82,Modifiability,refactor,refactoring,82,"# TODO: any type should be replaced with the correct github type, but it requires refactoring to; # not require the github module to be installed everywhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/code-format-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py:85,Availability,failure,failure,85,# The formatter failed but didn't output a diff (e.g. some sort of; # infrastructure failure).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/code-format-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py:24,Testability,log,log,24,# Print the diff in the log so that it is viewable there,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/code-format-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py:24,Testability,log,log,24,# Print the diff in the log so that it is viewable there,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/code-format-helper.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/code-format-helper.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:80,Integrability,Rout,Routines,80,"#!/usr/bin/env python3; #; # ======- github-automation - LLVM GitHub Automation Routines--*- python -*--==#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ==-------------------------------------------------------------------------==#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:620,Deployability,integrat,integration,620,"""""""; Hi!. This issue may be a good introductory issue for people new to working on LLVM. If you would like to work on this issue, your first steps are:. 1. In the comments of the issue, request for it to be assigned to you.; 2. Fix the issue locally.; 3. [Run the test suite](https://llvm.org/docs/TestingGuide.html#unit-and-regression-tests) locally. Remember that the subdirectories under `test/` create fine-grained testing targets, so you can e.g. use `make check-clang-ast` to only run Clang's AST tests.; 4. Create a Git commit.; 5. Run [`git clang-format HEAD~1`](https://clang.llvm.org/docs/ClangFormat.html#git-integration) to format your changes.; 6. Open a [pull request](https://github.com/llvm/llvm-project/pulls) to the [upstream repository](https://github.com/llvm/llvm-project) on GitHub. Detailed instructions can be found [in GitHub's documentation](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request). If you have any further questions about this issue, don't hesitate to ask via a comment in the thread below.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:620,Integrability,integrat,integration,620,"""""""; Hi!. This issue may be a good introductory issue for people new to working on LLVM. If you would like to work on this issue, your first steps are:. 1. In the comments of the issue, request for it to be assigned to you.; 2. Fix the issue locally.; 3. [Run the test suite](https://llvm.org/docs/TestingGuide.html#unit-and-regression-tests) locally. Remember that the subdirectories under `test/` create fine-grained testing targets, so you can e.g. use `make check-clang-ast` to only run Clang's AST tests.; 4. Create a Git commit.; 5. Run [`git clang-format HEAD~1`](https://clang.llvm.org/docs/ClangFormat.html#git-integration) to format your changes.; 6. Open a [pull request](https://github.com/llvm/llvm-project/pulls) to the [upstream repository](https://github.com/llvm/llvm-project) on GitHub. Detailed instructions can be found [in GitHub's documentation](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request). If you have any further questions about this issue, don't hesitate to ask via a comment in the thread below.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:264,Testability,test,test,264,"""""""; Hi!. This issue may be a good introductory issue for people new to working on LLVM. If you would like to work on this issue, your first steps are:. 1. In the comments of the issue, request for it to be assigned to you.; 2. Fix the issue locally.; 3. [Run the test suite](https://llvm.org/docs/TestingGuide.html#unit-and-regression-tests) locally. Remember that the subdirectories under `test/` create fine-grained testing targets, so you can e.g. use `make check-clang-ast` to only run Clang's AST tests.; 4. Create a Git commit.; 5. Run [`git clang-format HEAD~1`](https://clang.llvm.org/docs/ClangFormat.html#git-integration) to format your changes.; 6. Open a [pull request](https://github.com/llvm/llvm-project/pulls) to the [upstream repository](https://github.com/llvm/llvm-project) on GitHub. Detailed instructions can be found [in GitHub's documentation](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request). If you have any further questions about this issue, don't hesitate to ask via a comment in the thread below.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:298,Testability,Test,TestingGuide,298,"""""""; Hi!. This issue may be a good introductory issue for people new to working on LLVM. If you would like to work on this issue, your first steps are:. 1. In the comments of the issue, request for it to be assigned to you.; 2. Fix the issue locally.; 3. [Run the test suite](https://llvm.org/docs/TestingGuide.html#unit-and-regression-tests) locally. Remember that the subdirectories under `test/` create fine-grained testing targets, so you can e.g. use `make check-clang-ast` to only run Clang's AST tests.; 4. Create a Git commit.; 5. Run [`git clang-format HEAD~1`](https://clang.llvm.org/docs/ClangFormat.html#git-integration) to format your changes.; 6. Open a [pull request](https://github.com/llvm/llvm-project/pulls) to the [upstream repository](https://github.com/llvm/llvm-project) on GitHub. Detailed instructions can be found [in GitHub's documentation](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request). If you have any further questions about this issue, don't hesitate to ask via a comment in the thread below.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:336,Testability,test,tests,336,"""""""; Hi!. This issue may be a good introductory issue for people new to working on LLVM. If you would like to work on this issue, your first steps are:. 1. In the comments of the issue, request for it to be assigned to you.; 2. Fix the issue locally.; 3. [Run the test suite](https://llvm.org/docs/TestingGuide.html#unit-and-regression-tests) locally. Remember that the subdirectories under `test/` create fine-grained testing targets, so you can e.g. use `make check-clang-ast` to only run Clang's AST tests.; 4. Create a Git commit.; 5. Run [`git clang-format HEAD~1`](https://clang.llvm.org/docs/ClangFormat.html#git-integration) to format your changes.; 6. Open a [pull request](https://github.com/llvm/llvm-project/pulls) to the [upstream repository](https://github.com/llvm/llvm-project) on GitHub. Detailed instructions can be found [in GitHub's documentation](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request). If you have any further questions about this issue, don't hesitate to ask via a comment in the thread below.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:392,Testability,test,test,392,"""""""; Hi!. This issue may be a good introductory issue for people new to working on LLVM. If you would like to work on this issue, your first steps are:. 1. In the comments of the issue, request for it to be assigned to you.; 2. Fix the issue locally.; 3. [Run the test suite](https://llvm.org/docs/TestingGuide.html#unit-and-regression-tests) locally. Remember that the subdirectories under `test/` create fine-grained testing targets, so you can e.g. use `make check-clang-ast` to only run Clang's AST tests.; 4. Create a Git commit.; 5. Run [`git clang-format HEAD~1`](https://clang.llvm.org/docs/ClangFormat.html#git-integration) to format your changes.; 6. Open a [pull request](https://github.com/llvm/llvm-project/pulls) to the [upstream repository](https://github.com/llvm/llvm-project) on GitHub. Detailed instructions can be found [in GitHub's documentation](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request). If you have any further questions about this issue, don't hesitate to ask via a comment in the thread below.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:419,Testability,test,testing,419,"""""""; Hi!. This issue may be a good introductory issue for people new to working on LLVM. If you would like to work on this issue, your first steps are:. 1. In the comments of the issue, request for it to be assigned to you.; 2. Fix the issue locally.; 3. [Run the test suite](https://llvm.org/docs/TestingGuide.html#unit-and-regression-tests) locally. Remember that the subdirectories under `test/` create fine-grained testing targets, so you can e.g. use `make check-clang-ast` to only run Clang's AST tests.; 4. Create a Git commit.; 5. Run [`git clang-format HEAD~1`](https://clang.llvm.org/docs/ClangFormat.html#git-integration) to format your changes.; 6. Open a [pull request](https://github.com/llvm/llvm-project/pulls) to the [upstream repository](https://github.com/llvm/llvm-project) on GitHub. Detailed instructions can be found [in GitHub's documentation](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request). If you have any further questions about this issue, don't hesitate to ask via a comment in the thread below.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:503,Testability,test,tests,503,"""""""; Hi!. This issue may be a good introductory issue for people new to working on LLVM. If you would like to work on this issue, your first steps are:. 1. In the comments of the issue, request for it to be assigned to you.; 2. Fix the issue locally.; 3. [Run the test suite](https://llvm.org/docs/TestingGuide.html#unit-and-regression-tests) locally. Remember that the subdirectories under `test/` create fine-grained testing targets, so you can e.g. use `make check-clang-ast` to only run Clang's AST tests.; 4. Create a Git commit.; 5. Run [`git clang-format HEAD~1`](https://clang.llvm.org/docs/ClangFormat.html#git-integration) to format your changes.; 6. Open a [pull request](https://github.com/llvm/llvm-project/pulls) to the [upstream repository](https://github.com/llvm/llvm-project) on GitHub. Detailed instructions can be found [in GitHub's documentation](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request). If you have any further questions about this issue, don't hesitate to ask via a comment in the thread below.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:152,Availability,failure,failures,152,"# If the description of an issue/pull request is empty, the Github API; # library returns None instead of an empty string. Handle this here to; # avoid failures from trying to manipulate None.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:146,Safety,avoid,avoid,146,"# If the description of an issue/pull request is empty, the Github API; # library returns None instead of an empty string. Handle this here to; # avoid failures from trying to manipulate None.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:5,Modifiability,Config,Configure,5,"""""""; Configure the git repo in `git_dir` with the llvmbot account so; commits are attributed to llvmbot.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:38,Testability,log,login,38,"""""""; Tries to translate a Phabricator login to a github login by; finding a commit made in Phabricator's Differential.; The commit's SHA1 is then looked up in the github repo and; the committer's login associated with that commit is returned. :param str phab_token: The Conduit API token to use for communication with Pabricator; :param github.Repository.Repository repo: The github repo to use when looking for the SHA1 found in Differential; :param str phab_login: The Phabricator login to be translated.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:56,Testability,log,login,56,"""""""; Tries to translate a Phabricator login to a github login by; finding a commit made in Phabricator's Differential.; The commit's SHA1 is then looked up in the github repo and; the committer's login associated with that commit is returned. :param str phab_token: The Conduit API token to use for communication with Pabricator; :param github.Repository.Repository repo: The github repo to use when looking for the SHA1 found in Differential; :param str phab_login: The Phabricator login to be translated.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:196,Testability,log,login,196,"""""""; Tries to translate a Phabricator login to a github login by; finding a commit made in Phabricator's Differential.; The commit's SHA1 is then looked up in the github repo and; the committer's login associated with that commit is returned. :param str phab_token: The Conduit API token to use for communication with Pabricator; :param github.Repository.Repository repo: The github repo to use when looking for the SHA1 found in Differential; :param str phab_login: The Phabricator login to be translated.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:483,Testability,log,login,483,"""""""; Tries to translate a Phabricator login to a github login by; finding a commit made in Phabricator's Differential.; The commit's SHA1 is then looked up in the github repo and; the committer's login associated with that commit is returned. :param str phab_token: The Conduit API token to use for communication with Pabricator; :param github.Repository.Repository repo: The github repo to use when looking for the SHA1 found in Differential; :param str phab_login: The Phabricator login to be translated.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:24,Security,hash,hash,24,"""""""; Extract the commit hash from the argument passed to /action github; comment actions. We currently only support passing the commit hash; directly or use the github URL, such as; https://github.com/llvm/llvm-project/commit/2832d7941f4207f1fcf813b27cf08cecc3086959; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:135,Security,hash,hash,135,"""""""; Extract the commit hash from the argument passed to /action github; comment actions. We currently only support passing the commit hash; directly or use the github URL, such as; https://github.com/llvm/llvm-project/commit/2832d7941f4207f1fcf813b27cf08cecc3086959; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:52,Deployability,release,release-workflow,52,"""""""; This class implements the sub-commands for the release-workflow command.; The current sub-commands are:; * create-branch; * create-pull-request. The execute_command method will automatically choose the correct sub-command; based on the text in stdin.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:218,Deployability,Release,Release,218,"""""""; Create a pull request in `self.repo_name`. The base branch of the; pull request will be chosen based on the the milestone attached to; the issue represented by `self.issue_number` For example if the milestone; is Release 13.0.1, then the base branch will be release/13.x. `branch`; will be used as the compare branch.; https://docs.github.com/en/get-started/quickstart/github-glossary#base-branch; https://docs.github.com/en/get-started/quickstart/github-glossary#compare-branch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py:263,Deployability,release,release,263,"""""""; Create a pull request in `self.repo_name`. The base branch of the; pull request will be chosen based on the the milestone attached to; the issue represented by `self.issue_number` For example if the milestone; is Release 13.0.1, then the base branch will be release/13.x. `branch`; will be used as the compare branch.; https://docs.github.com/en/get-started/quickstart/github-glossary#base-branch; https://docs.github.com/en/get-started/quickstart/github-glossary#compare-branch; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/github-automation.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/github-automation.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:62,Deployability,Integrat,Integration,62,"#!/usr/bin/env python3; #; # ======- pre-push - LLVM Git Help Integration ---------*- python -*--========#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ==------------------------------------------------------------------------==#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/pre-push.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:62,Integrability,Integrat,Integration,62,"#!/usr/bin/env python3; #; # ======- pre-push - LLVM Git Help Integration ---------*- python -*--========#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ==------------------------------------------------------------------------==#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/pre-push.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:23,Deployability,integrat,integration,23,"""""""; pre-push git hook integration; =============================. This script is intended to be setup as a pre-push hook, from the root of the; repo run:. ln -sf ../../llvm/utils/git/pre-push.py .git/hooks/pre-push. From the git doc:. The pre-push hook runs during git push, after the remote refs have been; updated but before any objects have been transferred. It receives the name; and location of the remote as parameters, and a list of to-be-updated refs; through stdin. You can use it to validate a set of ref updates before a push; occurs (a non-zero exit code will abort the push).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/pre-push.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:309,Deployability,update,updated,309,"""""""; pre-push git hook integration; =============================. This script is intended to be setup as a pre-push hook, from the root of the; repo run:. ln -sf ../../llvm/utils/git/pre-push.py .git/hooks/pre-push. From the git doc:. The pre-push hook runs during git push, after the remote refs have been; updated but before any objects have been transferred. It receives the name; and location of the remote as parameters, and a list of to-be-updated refs; through stdin. You can use it to validate a set of ref updates before a push; occurs (a non-zero exit code will abort the push).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/pre-push.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:447,Deployability,update,updated,447,"""""""; pre-push git hook integration; =============================. This script is intended to be setup as a pre-push hook, from the root of the; repo run:. ln -sf ../../llvm/utils/git/pre-push.py .git/hooks/pre-push. From the git doc:. The pre-push hook runs during git push, after the remote refs have been; updated but before any objects have been transferred. It receives the name; and location of the remote as parameters, and a list of to-be-updated refs; through stdin. You can use it to validate a set of ref updates before a push; occurs (a non-zero exit code will abort the push).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/pre-push.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:516,Deployability,update,updates,516,"""""""; pre-push git hook integration; =============================. This script is intended to be setup as a pre-push hook, from the root of the; repo run:. ln -sf ../../llvm/utils/git/pre-push.py .git/hooks/pre-push. From the git doc:. The pre-push hook runs during git push, after the remote refs have been; updated but before any objects have been transferred. It receives the name; and location of the remote as parameters, and a list of to-be-updated refs; through stdin. You can use it to validate a set of ref updates before a push; occurs (a non-zero exit code will abort the push).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/pre-push.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:23,Integrability,integrat,integration,23,"""""""; pre-push git hook integration; =============================. This script is intended to be setup as a pre-push hook, from the root of the; repo run:. ln -sf ../../llvm/utils/git/pre-push.py .git/hooks/pre-push. From the git doc:. The pre-push hook runs during git push, after the remote refs have been; updated but before any objects have been transferred. It receives the name; and location of the remote as parameters, and a list of to-be-updated refs; through stdin. You can use it to validate a set of ref updates before a push; occurs (a non-zero exit code will abort the push).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/pre-push.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:573,Safety,abort,abort,573,"""""""; pre-push git hook integration; =============================. This script is intended to be setup as a pre-push hook, from the root of the; repo run:. ln -sf ../../llvm/utils/git/pre-push.py .git/hooks/pre-push. From the git doc:. The pre-push hook runs during git push, after the remote refs have been; updated but before any objects have been transferred. It receives the name; and location of the remote as parameters, and a list of to-be-updated refs; through stdin. You can use it to validate a set of ref updates before a push; occurs (a non-zero exit code will abort the push).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/pre-push.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:494,Security,validat,validate,494,"""""""; pre-push git hook integration; =============================. This script is intended to be setup as a pre-push hook, from the root of the; repo run:. ln -sf ../../llvm/utils/git/pre-push.py .git/hooks/pre-push. From the git doc:. The pre-push hook runs during git push, after the remote refs have been; updated but before any objects have been transferred. It receives the name; and location of the remote as parameters, and a list of to-be-updated refs; through stdin. You can use it to validate a set of ref updates before a push; occurs (a non-zero exit code will abort the push).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/pre-push.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:19,Testability,log,logging,19,# Escape args when logging for easy repro.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/pre-push.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:10,Availability,error,errors,10,# Silence errors if requested.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/pre-push.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py:2,Deployability,Update,Update,2,"# Update to existing branch, examine new commits",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/git/pre-push.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/git/pre-push.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:1003,Integrability,Message,MessageBoxEx,1003,"//===- KillTheDoctor - Prevent Dr. Watson from stopping tests ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program provides an extremely hacky way to stop Dr. Watson from starting; // due to unhandled exceptions in child processes.; //; // This simply starts the program named in the first positional argument with; // the arguments following it under a debugger. All this debugger does is catch; // any unhandled exceptions thrown in the child process and close the program; // (and hopefully tells someone about it).; //; // This also provides another really hacky method to prevent assert dialog boxes; // from popping up. When --no-user32 is passed, if any process loads user32.dll,; // we assume it is trying to call MessageBoxEx and terminate it. The proper way; // to do this would be to actually set a break point, but there's quite a bit; // of code involved to get the address of MessageBoxEx in the remote process's; // address space due to Address space layout randomization (ASLR). This can be; // added if it's ever actually needed.; //; // If the subprocess exits for any reason other than successful termination, -1; // is returned. If the process exits normally the value it returned is returned.; //; // I hate Windows.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:1171,Integrability,Message,MessageBoxEx,1171,"//===- KillTheDoctor - Prevent Dr. Watson from stopping tests ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program provides an extremely hacky way to stop Dr. Watson from starting; // due to unhandled exceptions in child processes.; //; // This simply starts the program named in the first positional argument with; // the arguments following it under a debugger. All this debugger does is catch; // any unhandled exceptions thrown in the child process and close the program; // (and hopefully tells someone about it).; //; // This also provides another really hacky method to prevent assert dialog boxes; // from popping up. When --no-user32 is passed, if any process loads user32.dll,; // we assume it is trying to call MessageBoxEx and terminate it. The proper way; // to do this would be to actually set a break point, but there's quite a bit; // of code involved to get the address of MessageBoxEx in the remote process's; // address space due to Address space layout randomization (ASLR). This can be; // added if it's ever actually needed.; //; // If the subprocess exits for any reason other than successful termination, -1; // is returned. If the process exits normally the value it returned is returned.; //; // I hate Windows.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:950,Performance,load,loads,950,"//===- KillTheDoctor - Prevent Dr. Watson from stopping tests ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program provides an extremely hacky way to stop Dr. Watson from starting; // due to unhandled exceptions in child processes.; //; // This simply starts the program named in the first positional argument with; // the arguments following it under a debugger. All this debugger does is catch; // any unhandled exceptions thrown in the child process and close the program; // (and hopefully tells someone about it).; //; // This also provides another really hacky method to prevent assert dialog boxes; // from popping up. When --no-user32 is passed, if any process loads user32.dll,; // we assume it is trying to call MessageBoxEx and terminate it. The proper way; // to do this would be to actually set a break point, but there's quite a bit; // of code involved to get the address of MessageBoxEx in the remote process's; // address space due to Address space layout randomization (ASLR). This can be; // added if it's ever actually needed.; //; // If the subprocess exits for any reason other than successful termination, -1; // is returned. If the process exits normally the value it returned is returned.; //; // I hate Windows.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:56,Testability,test,tests,56,"//===- KillTheDoctor - Prevent Dr. Watson from stopping tests ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program provides an extremely hacky way to stop Dr. Watson from starting; // due to unhandled exceptions in child processes.; //; // This simply starts the program named in the first positional argument with; // the arguments following it under a debugger. All this debugger does is catch; // any unhandled exceptions thrown in the child process and close the program; // (and hopefully tells someone about it).; //; // This also provides another really hacky method to prevent assert dialog boxes; // from popping up. When --no-user32 is passed, if any process loads user32.dll,; // we assume it is trying to call MessageBoxEx and terminate it. The proper way; // to do this would be to actually set a break point, but there's quite a bit; // of code involved to get the address of MessageBoxEx in the remote process's; // address space due to Address space layout randomization (ASLR). This can be; // added if it's ever actually needed.; //; // If the subprocess exits for any reason other than successful termination, -1; // is returned. If the process exits normally the value it returned is returned.; //; // I hate Windows.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:866,Testability,assert,assert,866,"//===- KillTheDoctor - Prevent Dr. Watson from stopping tests ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program provides an extremely hacky way to stop Dr. Watson from starting; // due to unhandled exceptions in child processes.; //; // This simply starts the program named in the first positional argument with; // the arguments following it under a debugger. All this debugger does is catch; // any unhandled exceptions thrown in the child process and close the program; // (and hopefully tells someone about it).; //; // This also provides another really hacky method to prevent assert dialog boxes; // from popping up. When --no-user32 is passed, if any process loads user32.dll,; // we assume it is trying to call MessageBoxEx and terminate it. The proper way; // to do this would be to actually set a break point, but there's quite a bit; // of code involved to get the address of MessageBoxEx in the remote process's; // address space due to Address space layout randomization (ASLR). This can be; // added if it's ever actually needed.; //; // If the subprocess exits for any reason other than successful termination, -1; // is returned. If the process exits normally the value it returned is returned.; //; // I hate Windows.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:526,Usability,simpl,simply,526,"//===- KillTheDoctor - Prevent Dr. Watson from stopping tests ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This program provides an extremely hacky way to stop Dr. Watson from starting; // due to unhandled exceptions in child processes.; //; // This simply starts the program named in the first positional argument with; // the arguments following it under a debugger. All this debugger does is catch; // any unhandled exceptions thrown in the child process and close the program; // (and hopefully tells someone about it).; //; // This also provides another really hacky method to prevent assert dialog boxes; // from popping up. When --no-user32 is passed, if any process loads user32.dll,; // we assume it is trying to call MessageBoxEx and terminate it. The proper way; // to do this would be to actually set a break point, but there's quite a bit; // of code involved to get the address of MessageBoxEx in the remote process's; // address space due to Address space layout randomization (ASLR). This can be; // added if it's ever actually needed.; //; // If the subprocess exits for any reason other than successful termination, -1; // is returned. If the process exits normally the value it returned is returned.; //; // I hate Windows.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:114,Usability,simpl,simple,114,"/// Find program using shell lookup rules.; /// @param Program This is either an absolute path, relative path, or simple a; /// program name. Look in PATH for any programs that match. If no; /// extension is present, try all extensions in PATHEXT.; /// @return If ec == errc::success, The absolute path to the program. Otherwise; /// the return value is undefined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:44,Availability,error,error,44,"// This may have been the file, return with error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:7,Availability,error,error,7,// Set error mode to not display any message boxes. The child process inherits; // this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:37,Integrability,message,message,37,// Set error mode to not display any message boxes. The child process inherits; // this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:70,Modifiability,inherit,inherits,70,// Set error mode to not display any message boxes. The child process inherits; // this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:97,Safety,Timeout,Timeout,97,"// We check with > instead of using Timeleft because if; // TotalTimeMiliseconds is greater than Timeout * 1000, TimeLeft would; // underflow.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:127,Integrability,message,message,127,"// Program is loading user32.dll, in the applications we are testing,; // this only happens if an assert has fired. By now the message has; // already been printed, so simply close the program.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:14,Performance,load,loading,14,"// Program is loading user32.dll, in the applications we are testing,; // this only happens if an assert has fired. By now the message has; // already been printed, so simply close the program.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:61,Testability,test,testing,61,"// Program is loading user32.dll, in the applications we are testing,; // this only happens if an assert has fired. By now the message has; // already been printed, so simply close the program.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:98,Testability,assert,assert,98,"// Program is loading user32.dll, in the applications we are testing,; // this only happens if an assert has fired. By now the message has; // already been printed, so simply close the program.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:168,Usability,simpl,simply,168,"// Program is loading user32.dll, in the applications we are testing,; // this only happens if an assert has fired. By now the message has; // already been printed, so simply close the program.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lint/cpp_lint.py:164,Modifiability,Config,Config,164,# TODO: implement private headers; # TODO: implement gtest headers; # TODO: implement top-level llvm/* headers; # TODO: implement llvm/Support/* headers; # Process Config/* headers,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lint/cpp_lint.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lint/cpp_lint.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/setup.py:129,Deployability,install,install,129,"# setuptools expects to be invoked from within the directory of setup.py, but it; # is nice to allow:; # python path/to/setup.py install; # to work (for scripts, etc.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/setup.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/setup.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py:497,Availability,error,error,497,# A simple evaluator of boolean expressions.; #; # Grammar:; # expr :: or_expr; # or_expr :: and_expr ('||' and_expr)*; # and_expr :: not_expr ('&&' not_expr)*; # not_expr :: '!' not_expr; # '(' or_expr ')'; # match_expr; # match_expr :: braced_regex; # identifier; # braced_regex match_expr; # identifier match_expr; # identifier :: [-+=._a-zA-Z0-9]+; # braced_regex :: '{{' python_regex '}}'; # Evaluates `string` as a boolean expression.; # Returns True or False. Throws a ValueError on syntax error.; #; # Variables in `variables` are true.; # Regexes that match any variable in `variables` are true.; # 'true' is true.; # All other identifiers are false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py:510,Modifiability,Variab,Variables,510,# A simple evaluator of boolean expressions.; #; # Grammar:; # expr :: or_expr; # or_expr :: and_expr ('||' and_expr)*; # and_expr :: not_expr ('&&' not_expr)*; # not_expr :: '!' not_expr; # '(' or_expr ')'; # match_expr; # match_expr :: braced_regex; # identifier; # braced_regex match_expr; # identifier match_expr; # identifier :: [-+=._a-zA-Z0-9]+; # braced_regex :: '{{' python_regex '}}'; # Evaluates `string` as a boolean expression.; # Returns True or False. Throws a ValueError on syntax error.; #; # Variables in `variables` are true.; # Regexes that match any variable in `variables` are true.; # 'true' is true.; # All other identifiers are false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py:524,Modifiability,variab,variables,524,# A simple evaluator of boolean expressions.; #; # Grammar:; # expr :: or_expr; # or_expr :: and_expr ('||' and_expr)*; # and_expr :: not_expr ('&&' not_expr)*; # not_expr :: '!' not_expr; # '(' or_expr ')'; # match_expr; # match_expr :: braced_regex; # identifier; # braced_regex match_expr; # identifier match_expr; # identifier :: [-+=._a-zA-Z0-9]+; # braced_regex :: '{{' python_regex '}}'; # Evaluates `string` as a boolean expression.; # Returns True or False. Throws a ValueError on syntax error.; #; # Variables in `variables` are true.; # Regexes that match any variable in `variables` are true.; # 'true' is true.; # All other identifiers are false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py:571,Modifiability,variab,variable,571,# A simple evaluator of boolean expressions.; #; # Grammar:; # expr :: or_expr; # or_expr :: and_expr ('||' and_expr)*; # and_expr :: not_expr ('&&' not_expr)*; # not_expr :: '!' not_expr; # '(' or_expr ')'; # match_expr; # match_expr :: braced_regex; # identifier; # braced_regex match_expr; # identifier match_expr; # identifier :: [-+=._a-zA-Z0-9]+; # braced_regex :: '{{' python_regex '}}'; # Evaluates `string` as a boolean expression.; # Returns True or False. Throws a ValueError on syntax error.; #; # Variables in `variables` are true.; # Regexes that match any variable in `variables` are true.; # 'true' is true.; # All other identifiers are false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py:584,Modifiability,variab,variables,584,# A simple evaluator of boolean expressions.; #; # Grammar:; # expr :: or_expr; # or_expr :: and_expr ('||' and_expr)*; # and_expr :: not_expr ('&&' not_expr)*; # not_expr :: '!' not_expr; # '(' or_expr ')'; # match_expr; # match_expr :: braced_regex; # identifier; # braced_regex match_expr; # identifier match_expr; # identifier :: [-+=._a-zA-Z0-9]+; # braced_regex :: '{{' python_regex '}}'; # Evaluates `string` as a boolean expression.; # Returns True or False. Throws a ValueError on syntax error.; #; # Variables in `variables` are true.; # Regexes that match any variable in `variables` are true.; # 'true' is true.; # All other identifiers are false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py:4,Usability,simpl,simple,4,# A simple evaluator of boolean expressions.; #; # Grammar:; # expr :: or_expr; # or_expr :: and_expr ('||' and_expr)*; # and_expr :: not_expr ('&&' not_expr)*; # not_expr :: '!' not_expr; # '(' or_expr ')'; # match_expr; # match_expr :: braced_regex; # identifier; # braced_regex match_expr; # identifier match_expr; # identifier :: [-+=._a-zA-Z0-9]+; # braced_regex :: '{{' python_regex '}}'; # Evaluates `string` as a boolean expression.; # Returns True or False. Throws a ValueError on syntax error.; #; # Variables in `variables` are true.; # Regexes that match any variable in `variables` are true.; # 'true' is true.; # All other identifiers are false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py:11,Testability,Test,Tests,11,#######; # Tests,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py:101,Availability,error,error,101,# Evaluate boolean expression `expr`.; # Fail if it does not throw a ValueError containing the text `error`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/BooleanExpression.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/cl_arguments.py:30,Modifiability,variab,variables,30,# LIT is special: environment variables override command line arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/cl_arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/cl_arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/cl_arguments.py:2,Security,Validat,Validate,2,# Validate command line options,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/cl_arguments.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/cl_arguments.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:5,Testability,Test,Test,5,"""""""; Test discovery functions.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:33,Performance,cache,cache,33,"""""""getTestSuite(item, litConfig, cache) -> (suite, relative_path). Find the test suite containing @arg item. @retval (None, ...) - Indicates no test suite contains @arg item.; @retval (suite, relative_path) - The suite that @arg item is in, and its; relative path inside that suite.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:76,Testability,test,test,76,"""""""getTestSuite(item, litConfig, cache) -> (suite, relative_path). Find the test suite containing @arg item. @retval (None, ...) - Indicates no test suite contains @arg item.; @retval (suite, relative_path) - The suite that @arg item is in, and its; relative path inside that suite.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:144,Testability,test,test,144,"""""""getTestSuite(item, litConfig, cache) -> (suite, relative_path). Find the test suite containing @arg item. @retval (None, ...) - Indicates no test suite contains @arg item.; @retval (suite, relative_path) - The suite that @arg item is in, and its; relative path inside that suite.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:19,Modifiability,config,config,19,# Check for a site config or a lit config.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:35,Modifiability,config,config,35,# Check for a site config or a lit config.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:22,Modifiability,config,config,22,"# If we didn't find a config file, keep looking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:85,Deployability,configurat,configuration,85,"# This is a private builtin parameter which can be used to perform; # translation of configuration paths. Specifically, this parameter; # can be set to a dictionary that the discovery process will consult; # when it finds a configuration it is about to load. If the given; # path is in the map, the value of that key is a path to the; # configuration to load instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:224,Deployability,configurat,configuration,224,"# This is a private builtin parameter which can be used to perform; # translation of configuration paths. Specifically, this parameter; # can be set to a dictionary that the discovery process will consult; # when it finds a configuration it is about to load. If the given; # path is in the map, the value of that key is a path to the; # configuration to load instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:337,Deployability,configurat,configuration,337,"# This is a private builtin parameter which can be used to perform; # translation of configuration paths. Specifically, this parameter; # can be set to a dictionary that the discovery process will consult; # when it finds a configuration it is about to load. If the given; # path is in the map, the value of that key is a path to the; # configuration to load instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:85,Modifiability,config,configuration,85,"# This is a private builtin parameter which can be used to perform; # translation of configuration paths. Specifically, this parameter; # can be set to a dictionary that the discovery process will consult; # when it finds a configuration it is about to load. If the given; # path is in the map, the value of that key is a path to the; # configuration to load instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:224,Modifiability,config,configuration,224,"# This is a private builtin parameter which can be used to perform; # translation of configuration paths. Specifically, this parameter; # can be set to a dictionary that the discovery process will consult; # when it finds a configuration it is about to load. If the given; # path is in the map, the value of that key is a path to the; # configuration to load instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:337,Modifiability,config,configuration,337,"# This is a private builtin parameter which can be used to perform; # translation of configuration paths. Specifically, this parameter; # can be set to a dictionary that the discovery process will consult; # when it finds a configuration it is about to load. If the given; # path is in the map, the value of that key is a path to the; # configuration to load instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:59,Performance,perform,perform,59,"# This is a private builtin parameter which can be used to perform; # translation of configuration paths. Specifically, this parameter; # can be set to a dictionary that the discovery process will consult; # when it finds a configuration it is about to load. If the given; # path is in the map, the value of that key is a path to the; # configuration to load instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:253,Performance,load,load,253,"# This is a private builtin parameter which can be used to perform; # translation of configuration paths. Specifically, this parameter; # can be set to a dictionary that the discovery process will consult; # when it finds a configuration it is about to load. If the given; # path is in the map, the value of that key is a path to the; # configuration to load instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:354,Performance,load,load,354,"# This is a private builtin parameter which can be used to perform; # translation of configuration paths. Specifically, this parameter; # can be set to a dictionary that the discovery process will consult; # when it finds a configuration it is about to load. If the given; # path is in the map, the value of that key is a path to the; # configuration to load instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:38,Modifiability,config,config,38,"# We found a test suite, create a new config for it and load it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:56,Performance,load,load,56,"# We found a test suite, create a new config for it and load it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:13,Testability,test,test,13,"# We found a test suite, create a new config for it and load it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:36,Testability,test,test,36,# Check for an already instantiated test suite.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:17,Modifiability,config,config,17,# Get the parent config.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:28,Deployability,configurat,configuration,28,# Check if there is a local configuration file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:28,Modifiability,config,configuration,28,# Check if there is a local configuration file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:32,Modifiability,config,config,32,"# If not, just reuse the parent config.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:56,Deployability,configurat,configuration,56,"# Otherwise, copy the current config and load the local configuration; # file into it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:30,Modifiability,config,config,30,"# Otherwise, copy the current config and load the local configuration; # file into it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:56,Modifiability,config,configuration,56,"# Otherwise, copy the current config and load the local configuration; # file into it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:41,Performance,load,load,41,"# Otherwise, copy the current config and load the local configuration; # file into it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:11,Testability,test,test,11,# Find the test suite for this input and its relative path.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:37,Availability,error,errors,37,# Check that the source path exists (errors here are reported by the; # caller).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:28,Testability,test,test,28,# Check if the user named a test directly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:174,Availability,error,error,174,"# If we don't have a test format or if we are running standalone tests,; # always ""find"" the test itself. Otherwise, we might find no tests at; # all, which is considered an error but isn't an error with standalone; # tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:193,Availability,error,error,193,"# If we don't have a test format or if we are running standalone tests,; # always ""find"" the test itself. Otherwise, we might find no tests at; # all, which is considered an error but isn't an error with standalone; # tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:21,Testability,test,test,21,"# If we don't have a test format or if we are running standalone tests,; # always ""find"" the test itself. Otherwise, we might find no tests at; # all, which is considered an error but isn't an error with standalone; # tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:65,Testability,test,tests,65,"# If we don't have a test format or if we are running standalone tests,; # always ""find"" the test itself. Otherwise, we might find no tests at; # all, which is considered an error but isn't an error with standalone; # tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:93,Testability,test,test,93,"# If we don't have a test format or if we are running standalone tests,; # always ""find"" the test itself. Otherwise, we might find no tests at; # all, which is considered an error but isn't an error with standalone; # tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:134,Testability,test,tests,134,"# If we don't have a test format or if we are running standalone tests,; # always ""find"" the test itself. Otherwise, we might find no tests at; # all, which is considered an error but isn't an error with standalone; # tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:218,Testability,test,tests,218,"# If we don't have a test format or if we are running standalone tests,; # always ""find"" the test itself. Otherwise, we might find no tests at; # all, which is considered an error but isn't an error with standalone; # tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:83,Deployability,configurat,configuration,83,"# Otherwise we have a directory to search for tests, start by getting the; # local configuration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:83,Modifiability,config,configuration,83,"# Otherwise we have a directory to search for tests, start by getting the; # local configuration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:46,Testability,test,tests,46,"# Otherwise we have a directory to search for tests, start by getting the; # local configuration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:21,Testability,test,tests,21,# Directory contains tests to be run standalone. Do not try to discover.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:13,Testability,test,tests,13,# Search for tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:81,Deployability,configurat,configuration,81,"# Check for nested test suites, first in the execpath in case there is a; # site configuration and then in the source path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:81,Modifiability,config,configuration,81,"# Check for nested test suites, first in the execpath in case there is a; # site configuration and then in the source path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:19,Testability,test,test,19,"# Check for nested test suites, first in the execpath in case there is a; # site configuration and then in the source path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:61,Testability,test,test,61,"# If the this directory recursively maps back to the current test suite,; # disregard it (this can happen if the exec root is located inside the; # current test suite, for example).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:156,Testability,test,test,156,"# If the this directory recursively maps back to the current test suite,; # disregard it (this can happen if the exec root is located inside the; # current test suite, for example).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:13,Performance,load,load,13,"# Otherwise, load from the nested test suite, if present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:34,Testability,test,test,34,"# Otherwise, load from the nested test suite, if present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:66,Deployability,configurat,configuration,66,"""""""; find_tests_for_inputs(lit_config, inputs) -> [Test]. Given a configuration object and a list of input specifiers, find all the; tests to execute.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:66,Modifiability,config,configuration,66,"""""""; find_tests_for_inputs(lit_config, inputs) -> [Test]. Given a configuration object and a list of input specifiers, find all the; tests to execute.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:51,Testability,Test,Test,51,"""""""; find_tests_for_inputs(lit_config, inputs) -> [Test]. Given a configuration object and a list of input specifiers, find all the; tests to execute.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:133,Testability,test,tests,133,"""""""; find_tests_for_inputs(lit_config, inputs) -> [Test]. Given a configuration object and a list of input specifiers, find all the; tests to execute.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:2,Performance,Load,Load,2,# Load the tests from the inputs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:11,Testability,test,tests,11,# Load the tests from the inputs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:70,Performance,perform,performance,70,# This data is no longer needed but keeping it around causes awful; # performance problems while the test suites run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:101,Testability,test,test,101,# This data is no longer needed but keeping it around causes awful; # performance problems while the test suites run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:20,Availability,error,errors,20,"# If there were any errors during test discovery, exit now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py:34,Testability,test,test,34,"# If there were any errors during test discovery, exit now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/discovery.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/discovery.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py:11,Testability,test,test,11,# Show the test result line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/display.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py:16,Availability,failure,failure,16,"# Show the test failure output, if requested.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/display.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py:11,Testability,test,test,11,"# Show the test failure output, if requested.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/display.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py:111,Availability,error,errors,111,# Python 2 can raise UnicodeDecodeError here too in cases; # where the stdout encoding is ASCII. Ignore decode errors; # in this case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/display.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py:9,Testability,test,test,9,"# Report test metrics, if present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/display.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py:15,Testability,test,tests,15,"# Report micro-tests, if present",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/display.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/display.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:15,Deployability,Configurat,Configuration,15,"""""""LitConfig - Configuration data for a 'lit' test runner instance, shared; across all tests. The LitConfig object is also used to communicate with client configuration; files, it is always passed in as the global variable 'lit' so that; configuration files can access common functionality and internal components; easily.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:155,Deployability,configurat,configuration,155,"""""""LitConfig - Configuration data for a 'lit' test runner instance, shared; across all tests. The LitConfig object is also used to communicate with client configuration; files, it is always passed in as the global variable 'lit' so that; configuration files can access common functionality and internal components; easily.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:238,Deployability,configurat,configuration,238,"""""""LitConfig - Configuration data for a 'lit' test runner instance, shared; across all tests. The LitConfig object is also used to communicate with client configuration; files, it is always passed in as the global variable 'lit' so that; configuration files can access common functionality and internal components; easily.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:15,Modifiability,Config,Configuration,15,"""""""LitConfig - Configuration data for a 'lit' test runner instance, shared; across all tests. The LitConfig object is also used to communicate with client configuration; files, it is always passed in as the global variable 'lit' so that; configuration files can access common functionality and internal components; easily.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:155,Modifiability,config,configuration,155,"""""""LitConfig - Configuration data for a 'lit' test runner instance, shared; across all tests. The LitConfig object is also used to communicate with client configuration; files, it is always passed in as the global variable 'lit' so that; configuration files can access common functionality and internal components; easily.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:214,Modifiability,variab,variable,214,"""""""LitConfig - Configuration data for a 'lit' test runner instance, shared; across all tests. The LitConfig object is also used to communicate with client configuration; files, it is always passed in as the global variable 'lit' so that; configuration files can access common functionality and internal components; easily.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:238,Modifiability,config,configuration,238,"""""""LitConfig - Configuration data for a 'lit' test runner instance, shared; across all tests. The LitConfig object is also used to communicate with client configuration; files, it is always passed in as the global variable 'lit' so that; configuration files can access common functionality and internal components; easily.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:262,Security,access,access,262,"""""""LitConfig - Configuration data for a 'lit' test runner instance, shared; across all tests. The LitConfig object is also used to communicate with client configuration; files, it is always passed in as the global variable 'lit' so that; configuration files can access common functionality and internal components; easily.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:46,Testability,test,test,46,"""""""LitConfig - Configuration data for a 'lit' test runner instance, shared; across all tests. The LitConfig object is also used to communicate with client configuration; files, it is always passed in as the global variable 'lit' so that; configuration files can access common functionality and internal components; easily.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:87,Testability,test,tests,87,"""""""LitConfig - Configuration data for a 'lit' test runner instance, shared; across all tests. The LitConfig object is also used to communicate with client configuration; files, it is always passed in as the global variable 'lit' so that; configuration files can access common functionality and internal components; easily.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:18,Testability,test,test,18,# The name of the test runner.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:43,Modifiability,variab,variable,43,# The items to add to the PATH environment variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:2,Deployability,Configurat,Configuration,2,# Configuration files to look for when discovering test suites.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:2,Modifiability,Config,Configuration,2,# Configuration files to look for when discovering test suites.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:51,Testability,test,test,51,# Configuration files to look for when discovering test suites.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:5,Integrability,Interface,Interface,5,"""""""; Interface for getting maximum time to spend executing; a single test; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:69,Testability,test,test,69,"""""""; Interface for getting maximum time to spend executing; a single test; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:37,Availability,error,error,37,"""""""; Returns a tuple (<supported> , <error message>); where; `<supported>` is True if setting maxIndividualTestTime is supported; on the current host, returns False otherwise.; `<error message>` is an empty string if `<supported>` is True,; otherwise is contains a string describing why setting; maxIndividualTestTime is not supported.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:179,Availability,error,error,179,"""""""; Returns a tuple (<supported> , <error message>); where; `<supported>` is True if setting maxIndividualTestTime is supported; on the current host, returns False otherwise.; `<error message>` is an empty string if `<supported>` is True,; otherwise is contains a string describing why setting; maxIndividualTestTime is not supported.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:43,Integrability,message,message,43,"""""""; Returns a tuple (<supported> , <error message>); where; `<supported>` is True if setting maxIndividualTestTime is supported; on the current host, returns False otherwise.; `<error message>` is an empty string if `<supported>` is True,; otherwise is contains a string describing why setting; maxIndividualTestTime is not supported.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:185,Integrability,message,message,185,"""""""; Returns a tuple (<supported> , <error message>); where; `<supported>` is True if setting maxIndividualTestTime is supported; on the current host, returns False otherwise.; `<error message>` is an empty string if `<supported>` is True,; otherwise is contains a string describing why setting; maxIndividualTestTime is not supported.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:5,Integrability,Interface,Interface,5,"""""""; Interface for setting maximum time to spend executing; a single test; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:69,Testability,test,test,69,"""""""; Interface for setting maximum time to spend executing; a single test; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:101,Availability,avail,available,101,# The current implementation needs psutil on some platforms to set; # a timeout per test. Check it's available.; # See lit.util.killProcessAndChildren(),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:72,Safety,timeout,timeout,72,# The current implementation needs psutil on some platforms to set; # a timeout per test. Check it's available.; # See lit.util.killProcessAndChildren(),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:84,Testability,test,test,84,# The current implementation needs psutil on some platforms to set; # a timeout per test. Check it's available.; # See lit.util.killProcessAndChildren(),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:5,Integrability,Interface,Interface,5,"""""""; Interface for getting the per_test_coverage value; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:5,Integrability,Interface,Interface,5,"""""""; Interface for setting the per_test_coverage value; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:15,Modifiability,config,config,15,"""""""load_config(config, path) - Load a config object from an alternate; path.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:38,Modifiability,config,config,38,"""""""load_config(config, path) - Load a config object from an alternate; path.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:31,Performance,Load,Load,31,"""""""load_config(config, path) - Load a config object from an alternate; path.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:31,Integrability,message,message,31,# Get the file/line where this message was generated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:46,Integrability,wrap,wrapper,46,"# Step out of _write_message, and then out of wrapper.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py:111,Safety,avoid,avoid,111,"# In a git bash terminal, the writes to sys.stderr aren't visible; # on screen immediately. Flush them here to avoid broken/misoredered; # output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:14,Energy Efficiency,adapt,adaptor,14,"""""""; TestCase adaptor for providing a Python 'unittest' compatible interface to 'lit'; tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:67,Integrability,interface,interface,67,"""""""; TestCase adaptor for providing a Python 'unittest' compatible interface to 'lit'; tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:14,Modifiability,adapt,adaptor,14,"""""""; TestCase adaptor for providing a Python 'unittest' compatible interface to 'lit'; tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:5,Testability,Test,TestCase,5,"""""""; TestCase adaptor for providing a Python 'unittest' compatible interface to 'lit'; tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:87,Testability,test,tests,87,"""""""; TestCase adaptor for providing a Python 'unittest' compatible interface to 'lit'; tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:10,Testability,test,test,10,# Run the test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:2,Energy Efficiency,Adapt,Adapt,2,# Adapt the result to unittest.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:2,Modifiability,Adapt,Adapt,2,# Adapt the result to unittest.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:20,Modifiability,config,config,20,# Create the global config object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:2,Performance,Perform,Perform,2,# Perform test discovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:10,Testability,test,test,10,# Perform test discovery.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:20,Testability,test,test,20,# Return a unittest test suite which just runs the tests in order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py:51,Testability,test,tests,51,# Return a unittest test suite which just runs the tests in order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/LitTestCase.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:16,Deployability,Integrat,Integrated,16,"""""""; lit - LLVM Integrated Tester. See lit.pod for more information.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/main.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:16,Integrability,Integrat,Integrated,16,"""""""; lit - LLVM Integrated Tester. See lit.pod for more information.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/main.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:27,Testability,Test,Tester,27,"""""""; lit - LLVM Integrated Tester. See lit.pod for more information.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/main.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:25,Deployability,configurat,configuration,25,# Command line overrides configuration for maxIndividualTestTime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/main.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:25,Modifiability,config,configuration,25,# Command line overrides configuration for maxIndividualTestTime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/main.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:54,Testability,test,tests,54,"# When running multiple shards, don't include skipped tests in the xunit; # output since merging the files will result in duplicates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/main.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:51,Testability,test,test,51,"# For clarity, generate a preview of the first few test indices in the shard; # to accompany the arithmetic expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/main.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:256,Energy Efficiency,monitor,monitor,256,"# Create a temp directory inside the normal temp directory so that we can; # try to avoid temporary test file leaks. The user can avoid this behavior; # by setting LIT_PRESERVES_TMP in the environment, so they can easily use; # their own temp directory to monitor temporary file leaks or handle them at; # the buildbot level.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/main.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:84,Safety,avoid,avoid,84,"# Create a temp directory inside the normal temp directory so that we can; # try to avoid temporary test file leaks. The user can avoid this behavior; # by setting LIT_PRESERVES_TMP in the environment, so they can easily use; # their own temp directory to monitor temporary file leaks or handle them at; # the buildbot level.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/main.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:130,Safety,avoid,avoid,130,"# Create a temp directory inside the normal temp directory so that we can; # try to avoid temporary test file leaks. The user can avoid this behavior; # by setting LIT_PRESERVES_TMP in the environment, so they can easily use; # their own temp directory to monitor temporary file leaks or handle them at; # the buildbot level.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/main.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py:100,Testability,test,test,100,"# Create a temp directory inside the normal temp directory so that we can; # try to avoid temporary test file leaks. The user can avoid this behavior; # by setting LIT_PRESERVES_TMP in the environment, so they can easily use; # their own temp directory to monitor temporary file leaks or handle them at; # the buildbot level.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/main.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/main.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:357,Energy Efficiency,GREEN,GREEN,357,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:364,Energy Efficiency,green,green,364,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:573,Energy Efficiency,GREEN,GREEN,573,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:579,Energy Efficiency,green,green,579,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:33,Modifiability,portab,portably,33,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:131,Modifiability,variab,variables,131,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:692,Modifiability,variab,variable,692,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:999,Modifiability,variab,variable,999,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:209,Performance,perform,perform,209,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:488,Performance,perform,perform,488,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:883,Testability,test,test,883,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:944,Testability,test,testing,944,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:246,Usability,simpl,simply,246,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:937,Usability,simpl,simply,937,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:1104,Usability,clear,clearning,1104,"""""""; A class that can be used to portably generate formatted output to; a terminal. `TerminalController` defines a set of instance variables whose; values are initialized to the control sequence necessary to; perform a given action. These can be simply included in normal; output to the terminal:. >>> term = TerminalController(); >>> print('This is '+term.GREEN+'green'+term.NORMAL). Alternatively, the `render()` method can used, which replaces; '${action}' with the string required to perform 'action':. >>> term = TerminalController(); >>> print(term.render('This is ${GREEN}green${NORMAL}')). If the terminal doesn't support a given action, then the value of; the corresponding instance variable will be set to ''. As a; result, the above code will still work on terminals that do not; support color, except that their output will not be colored.; Also, this means that you can test whether the terminal supports a; given action by simply testing the truth value of the; corresponding instance variable:. >>> term = TerminalController(); >>> if term.CLEAR_SCREEN:; ... print('This terminal supports clearning the screen.'). Finally, if the width and height of the terminal are known, then; they will be stored in the `COLS` and `LINES` attributes.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:19,Availability,down,down,19,#: Move the cursor down one line,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:3,Usability,Clear,Clear,3,#: Clear the screen and move to home position,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:3,Usability,Clear,Clear,3,#: Clear to the end of the line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:3,Usability,Clear,Clear,3,#: Clear to the beginning of the line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:3,Usability,Clear,Clear,3,#: Clear to the end of the screen; # Output modes:,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:20,Availability,DOWN,DOWN,20,"""""""; BOL=cr UP=cuu1 DOWN=cud1 LEFT=cub1 RIGHT=cuf1; CLEAR_SCREEN=clear CLEAR_EOL=el CLEAR_BOL=el1 CLEAR_EOS=ed BOLD=bold; BLINK=blink DIM=dim REVERSE=rev UNDERLINE=smul NORMAL=sgr0; HIDE_CURSOR=cinvis SHOW_CURSOR=cnorm""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:65,Usability,clear,clear,65,"""""""; BOL=cr UP=cuu1 DOWN=cud1 LEFT=cub1 RIGHT=cuf1; CLEAR_SCREEN=clear CLEAR_EOL=el CLEAR_BOL=el1 CLEAR_EOS=ed BOLD=bold; BLINK=blink DIM=dim REVERSE=rev UNDERLINE=smul NORMAL=sgr0; HIDE_CURSOR=cinvis SHOW_CURSOR=cnorm""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:14,Energy Efficiency,GREEN,GREEN,14,"""""""BLACK BLUE GREEN CYAN RED MAGENTA YELLOW WHITE""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:15,Availability,avail,available,15,# Curses isn't available on all platforms,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:93,Usability,progress bar,progress bar,93,#######################################################################; # Example use case: progress bar; #######################################################################,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:7,Usability,simpl,simple,7,"""""""; A simple progress bar which doesn't need any terminal support. This prints out a progress bar like:; 'Header: 0.. 10.. 20.. ...'; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:14,Usability,progress bar,progress bar,14,"""""""; A simple progress bar which doesn't need any terminal support. This prints out a progress bar like:; 'Header: 0.. 10.. 20.. ...'; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:86,Usability,progress bar,progress bar,86,"""""""; A simple progress bar which doesn't need any terminal support. This prints out a progress bar like:; 'Header: 0.. 10.. 20.. ...'; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:118,Integrability,message,message,118,"""""""; A 3-line progress bar, which looks like::. Header; 20% [===========----------------------------------]; progress message. The progress bar is colored, if the terminal supports color; output; and adjusts to the width of the terminal.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:14,Usability,progress bar,progress bar,14,"""""""; A 3-line progress bar, which looks like::. Header; 20% [===========----------------------------------]; progress message. The progress bar is colored, if the terminal supports color; output; and adjusts to the width of the terminal.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:131,Usability,progress bar,progress bar,131,"""""""; A 3-line progress bar, which looks like::. Header; 20% [===========----------------------------------]; progress message. The progress bar is colored, if the terminal supports color; output; and adjusts to the width of the terminal.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py:7,Deployability,update,update,7,"# self.update(0, '')",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ProgressBar.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:84,Safety,avoid,avoid,84,# Suite names are not necessarily unique. Include object identity in sort; # key to avoid mixing tests of different suites.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:97,Testability,test,tests,97,# Suite names are not necessarily unique. Include object identity in sort; # key to avoid mixing tests of different suites.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:44,Deployability,configurat,configuration,44,# FIXME: Record some information on the lit configuration used?; # FIXME: Record information from the individual test suites?; # Encode the tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:44,Modifiability,config,configuration,44,# FIXME: Record some information on the lit configuration used?; # FIXME: Record information from the individual test suites?; # Encode the tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:113,Testability,test,test,113,# FIXME: Record some information on the lit configuration used?; # FIXME: Record information from the individual test suites?; # Encode the tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:140,Testability,test,tests,140,# FIXME: Record some information on the lit configuration used?; # FIXME: Record information from the individual test suites?; # Encode the tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:6,Testability,test,test,6,"# Add test metrics, if present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:15,Testability,test,tests,15,"# Report micro-tests separately, if present",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:16,Testability,test,test,16,# Expand parent test name with micro test name,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:37,Testability,test,test,37,# Expand parent test name with micro test name,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:75,Integrability,wrap,wrap,75,# In the unlikely case that the output contains the CDATA; # terminator we wrap it by creating a new CDATA block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:10,Testability,test,test,10,"# Failing test output sometimes contains control characters like; # \x1b (e.g. if there was some -fcolor-diagnostics output) which are; # not allowed inside XML files.; # This causes problems with CI systems: for example, the Jenkins; # JUnit XML will throw an exception when ecountering those; # characters and similar problems also occur with GitLab CI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:13,Testability,test,tests,13,# Encode the tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:16,Testability,test,test,16,# Expand parent test name with micro test name,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:37,Testability,test,test,37,# Expand parent test name with micro test name,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py:18,Testability,test,test,18,# Find when first test started so we can make start times relative.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/reports.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/reports.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:15,Modifiability,config,configured,15,"""""""A concrete, configured testing run.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:26,Testability,test,testing,26,"""""""A concrete, configured testing run.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:188,Availability,avail,available,188,"""""""; Execute the tests in the run using up to the specified number of; parallel tasks, and inform the caller of each individual result. The; provided tests should be a subset of the tests available in this run; object. The progress_callback will be invoked for each completed test. If timeout is non-None, it should be a time in seconds after which to; stop executing tests. Returns the elapsed testing time. Upon completion, each test in the run will have its result; computed. Tests which were not actually executed (for any reason) will; be marked SKIPPED.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:285,Safety,timeout,timeout,285,"""""""; Execute the tests in the run using up to the specified number of; parallel tasks, and inform the caller of each individual result. The; provided tests should be a subset of the tests available in this run; object. The progress_callback will be invoked for each completed test. If timeout is non-None, it should be a time in seconds after which to; stop executing tests. Returns the elapsed testing time. Upon completion, each test in the run will have its result; computed. Tests which were not actually executed (for any reason) will; be marked SKIPPED.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:17,Testability,test,tests,17,"""""""; Execute the tests in the run using up to the specified number of; parallel tasks, and inform the caller of each individual result. The; provided tests should be a subset of the tests available in this run; object. The progress_callback will be invoked for each completed test. If timeout is non-None, it should be a time in seconds after which to; stop executing tests. Returns the elapsed testing time. Upon completion, each test in the run will have its result; computed. Tests which were not actually executed (for any reason) will; be marked SKIPPED.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:150,Testability,test,tests,150,"""""""; Execute the tests in the run using up to the specified number of; parallel tasks, and inform the caller of each individual result. The; provided tests should be a subset of the tests available in this run; object. The progress_callback will be invoked for each completed test. If timeout is non-None, it should be a time in seconds after which to; stop executing tests. Returns the elapsed testing time. Upon completion, each test in the run will have its result; computed. Tests which were not actually executed (for any reason) will; be marked SKIPPED.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:182,Testability,test,tests,182,"""""""; Execute the tests in the run using up to the specified number of; parallel tasks, and inform the caller of each individual result. The; provided tests should be a subset of the tests available in this run; object. The progress_callback will be invoked for each completed test. If timeout is non-None, it should be a time in seconds after which to; stop executing tests. Returns the elapsed testing time. Upon completion, each test in the run will have its result; computed. Tests which were not actually executed (for any reason) will; be marked SKIPPED.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:276,Testability,test,test,276,"""""""; Execute the tests in the run using up to the specified number of; parallel tasks, and inform the caller of each individual result. The; provided tests should be a subset of the tests available in this run; object. The progress_callback will be invoked for each completed test. If timeout is non-None, it should be a time in seconds after which to; stop executing tests. Returns the elapsed testing time. Upon completion, each test in the run will have its result; computed. Tests which were not actually executed (for any reason) will; be marked SKIPPED.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:368,Testability,test,tests,368,"""""""; Execute the tests in the run using up to the specified number of; parallel tasks, and inform the caller of each individual result. The; provided tests should be a subset of the tests available in this run; object. The progress_callback will be invoked for each completed test. If timeout is non-None, it should be a time in seconds after which to; stop executing tests. Returns the elapsed testing time. Upon completion, each test in the run will have its result; computed. Tests which were not actually executed (for any reason) will; be marked SKIPPED.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:395,Testability,test,testing,395,"""""""; Execute the tests in the run using up to the specified number of; parallel tasks, and inform the caller of each individual result. The; provided tests should be a subset of the tests available in this run; object. The progress_callback will be invoked for each completed test. If timeout is non-None, it should be a time in seconds after which to; stop executing tests. Returns the elapsed testing time. Upon completion, each test in the run will have its result; computed. Tests which were not actually executed (for any reason) will; be marked SKIPPED.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:431,Testability,test,test,431,"""""""; Execute the tests in the run using up to the specified number of; parallel tasks, and inform the caller of each individual result. The; provided tests should be a subset of the tests available in this run; object. The progress_callback will be invoked for each completed test. If timeout is non-None, it should be a time in seconds after which to; stop executing tests. Returns the elapsed testing time. Upon completion, each test in the run will have its result; computed. Tests which were not actually executed (for any reason) will; be marked SKIPPED.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:479,Testability,Test,Tests,479,"""""""; Execute the tests in the run using up to the specified number of; parallel tasks, and inform the caller of each individual result. The; provided tests should be a subset of the tests available in this run; object. The progress_callback will be invoked for each completed test. If timeout is non-None, it should be a time in seconds after which to; stop executing tests. Returns the elapsed testing time. Upon completion, each test in the run will have its result; computed. Tests which were not actually executed (for any reason) will; be marked SKIPPED.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:9,Safety,timeout,timeouts,9,"# Larger timeouts (one year, positive infinity) don't work on Windows.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:2,Deployability,Update,Update,2,"# Update local test object ""in place"" from remote test object. This; # ensures that the original test object which is used for printing test; # results reflects the changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:15,Testability,test,test,15,"# Update local test object ""in place"" from remote test object. This; # ensures that the original test object which is used for printing test; # results reflects the changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:50,Testability,test,test,50,"# Update local test object ""in place"" from remote test object. This; # ensures that the original test object which is used for printing test; # results reflects the changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:97,Testability,test,test,97,"# Update local test object ""in place"" from remote test object. This; # ensures that the original test object which is used for printing test; # results reflects the changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:136,Testability,test,test,136,"# Update local test object ""in place"" from remote test object. This; # ensures that the original test object which is used for printing test; # results reflects the changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:50,Testability,test,tests,50,"# TODO(yln): interferes with progress bar; # Some tests use threads internally, and at least on Linux each of these; # threads counts toward the current process limit. Try to raise the (soft); # process limit so that tests don't fail due to resource exhaustion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:217,Testability,test,tests,217,"# TODO(yln): interferes with progress bar; # Some tests use threads internally, and at least on Linux each of these; # threads counts toward the current process limit. Try to raise the (soft); # process limit so that tests don't fail due to resource exhaustion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:29,Usability,progress bar,progress bar,29,"# TODO(yln): interferes with progress bar; # Some tests use threads internally, and at least on Linux each of these; # threads counts toward the current process limit. Try to raise the (soft); # process limit so that tests don't fail due to resource exhaustion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py:13,Safety,safe,safety,13,# the 2 is a safety factor; # Importing the resource module will likely fail on Windows.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/run.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/run.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ShCommands.py:18,Security,validat,validation,18,# For debugging / validation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ShCommands.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ShCommands.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ShUtil.py:737,Modifiability,portab,portable,737,"# If a quote character is present, lex_arg_quoted will remove the quotes; # and append the argument directly. This causes a problem when the; # quoted portion contains a glob character, as the character will no; # longer be treated literally. If glob characters occur *only* inside; # of quotes, then we can handle this by not globbing at all, and if; # glob characters occur *only* outside of quotes, we can still glob just; # fine. But if a glob character occurs both inside and outside of; # quotes this presents a problem. In practice this is such an obscure; # edge case that it doesn't seem worth the added complexity to support.; # By adding an assertion, it means some bot somewhere will catch this; # and flag the user of a non-portable test (which could almost certainly; # be re-written to work correctly without triggering this).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ShUtil.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ShUtil.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ShUtil.py:652,Testability,assert,assertion,652,"# If a quote character is present, lex_arg_quoted will remove the quotes; # and append the argument directly. This causes a problem when the; # quoted portion contains a glob character, as the character will no; # longer be treated literally. If glob characters occur *only* inside; # of quotes, then we can handle this by not globbing at all, and if; # glob characters occur *only* outside of quotes, we can still glob just; # fine. But if a glob character occurs both inside and outside of; # quotes this presents a problem. In practice this is such an obscure; # edge case that it doesn't seem worth the added complexity to support.; # By adding an assertion, it means some bot somewhere will catch this; # and flag the user of a non-portable test (which could almost certainly; # be re-written to work correctly without triggering this).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ShUtil.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ShUtil.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ShUtil.py:746,Testability,test,test,746,"# If a quote character is present, lex_arg_quoted will remove the quotes; # and append the argument directly. This causes a problem when the; # quoted portion contains a glob character, as the character will no; # longer be treated literally. If glob characters occur *only* inside; # of quotes, then we can handle this by not globbing at all, and if; # glob characters occur *only* outside of quotes, we can still glob just; # fine. But if a glob character occurs both inside and outside of; # quotes this presents a problem. In practice this is such an obscure; # edge case that it doesn't seem worth the added complexity to support.; # By adding an assertion, it means some bot somewhere will catch this; # and flag the user of a non-portable test (which could almost certainly; # be re-written to work correctly without triggering this).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/ShUtil.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/ShUtil.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:2,Testability,Test,Test,2,# Test result codes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:3,Testability,Test,Test,3,"""""""Test result codes.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:2,Availability,Failure,Failures,2,# Failures,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:2,Testability,Test,Test,2,# Test metric values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:109,Testability,test,test,109,"""""""; todata() -> json-serializable data. Convert this metric to content suitable for serializing in the JSON test; output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:2,Testability,Test,Test,2,# Test results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:3,Integrability,Wrap,Wrapper,3,"""""""Wrapper for the results of executing an individual test.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:54,Testability,test,test,54,"""""""Wrapper for the results of executing an individual test.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:6,Testability,test,test,6,# The test output.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:33,Testability,test,test,33,"# The wall timing to execute the test, if timing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:31,Testability,test,test,31,# The metrics reported by this test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:12,Testability,test,test,12,# The micro-test results reported by this test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:42,Testability,test,test,42,# The micro-test results reported by this test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:120,Availability,error,error,120,"""""""; addMetric(name, value). Attach a test metric to the test result, with the given name and list of; values. It is an error to attempt to attach the metrics with the same; name multiple times. Each value must be an instance of a MetricValue subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:38,Testability,test,test,38,"""""""; addMetric(name, value). Attach a test metric to the test result, with the given name and list of; values. It is an error to attempt to attach the metrics with the same; name multiple times. Each value must be an instance of a MetricValue subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:57,Testability,test,test,57,"""""""; addMetric(name, value). Attach a test metric to the test result, with the given name and list of; values. It is an error to attempt to attach the metrics with the same; name multiple times. Each value must be an instance of a MetricValue subclass.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:123,Availability,error,error,123,"""""""; addMicroResult(microResult). Attach a micro-test result to the test result, with the given name and; result. It is an error to attempt to attach a micro-test with the; same name multiple times. Each micro-test result must be an instance of the Result class.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:49,Testability,test,test,49,"""""""; addMicroResult(microResult). Attach a micro-test result to the test result, with the given name and; result. It is an error to attempt to attach a micro-test with the; same name multiple times. Each micro-test result must be an instance of the Result class.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:68,Testability,test,test,68,"""""""; addMicroResult(microResult). Attach a micro-test result to the test result, with the given name and; result. It is an error to attempt to attach a micro-test with the; same name multiple times. Each micro-test result must be an instance of the Result class.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:158,Testability,test,test,158,"""""""; addMicroResult(microResult). Attach a micro-test result to the test result, with the given name and; result. It is an error to attempt to attach a micro-test with the; same name multiple times. Each micro-test result must be an instance of the Result class.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:210,Testability,test,test,210,"""""""; addMicroResult(microResult). Attach a micro-test result to the test result, with the given name and; result. It is an error to attempt to attach a micro-test with the; same name multiple times. Each micro-test result must be an instance of the Result class.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:2,Testability,Test,Test,2,# Test classes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:3,Testability,Test,TestSuite,3,"""""""TestSuite - Information on a group of tests. A test suite groups together a set of logically related tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:41,Testability,test,tests,41,"""""""TestSuite - Information on a group of tests. A test suite groups together a set of logically related tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:50,Testability,test,test,50,"""""""TestSuite - Information on a group of tests. A test suite groups together a set of logically related tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:86,Testability,log,logically,86,"""""""TestSuite - Information on a group of tests. A test suite groups together a set of logically related tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:104,Testability,test,tests,104,"""""""TestSuite - Information on a group of tests. A test suite groups together a set of logically related tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:17,Deployability,configurat,configuration,17,# The test suite configuration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:17,Modifiability,config,configuration,17,# The test suite configuration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:6,Testability,test,test,6,# The test suite configuration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:3,Testability,Test,Test,3,"""""""Test - Information on a single test instance.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:34,Testability,test,test,34,"""""""Test - Information on a single test instance.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:40,Testability,test,test,40,"# A list of conditions under which this test is expected to fail.; # Each condition is a boolean expression of features, or '*'.; # These can optionally be provided by test format handlers,; # and will be honored when the test result is supplied.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:168,Testability,test,test,168,"# A list of conditions under which this test is expected to fail.; # Each condition is a boolean expression of features, or '*'.; # These can optionally be provided by test format handlers,; # and will be honored when the test result is supplied.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:222,Testability,test,test,222,"# A list of conditions under which this test is expected to fail.; # Each condition is a boolean expression of features, or '*'.; # These can optionally be provided by test format handlers,; # and will be honored when the test result is supplied.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:65,Testability,test,test,65,# A list of conditions that must be satisfied before running the test.; # Each condition is a boolean expression of features. All of them; # must be True for the test to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:162,Testability,test,test,162,# A list of conditions that must be satisfied before running the test.; # Each condition is a boolean expression of features. All of them; # must be True for the test to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:53,Testability,test,test,53,# A list of conditions that prevent execution of the test.; # Each condition is a boolean expression of features. All of them; # must be False for the test to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:151,Testability,test,test,151,# A list of conditions that prevent execution of the test.; # Each condition is a boolean expression of features. All of them; # must be False for the test to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:51,Testability,test,test,51,# An optional number of retries allowed before the test finally succeeds.; # The test is run at most once plus the number of retries specified here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:81,Testability,test,test,81,# An optional number of retries allowed before the test finally succeeds.; # The test is run at most once plus the number of retries specified here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:6,Testability,test,test,6,"# The test result, once complete.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:20,Availability,failure,failure,20,"# The previous test failure state, if applicable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:15,Testability,test,test,15,"# The previous test failure state, if applicable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:15,Testability,test,test,15,"# The previous test elapsed time, if applicable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:9,Availability,error,error,9,# Syntax error in an XFAIL line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:292,Availability,error,error,292,"""""""; isExpectedToFail() -> bool. Check whether this test is expected to fail in the current; configuration. This check relies on the test xfails property which by; some test formats may not be computed until the test has first been; executed.; Throws ValueError if an XFAIL line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:93,Deployability,configurat,configuration,93,"""""""; isExpectedToFail() -> bool. Check whether this test is expected to fail in the current; configuration. This check relies on the test xfails property which by; some test formats may not be computed until the test has first been; executed.; Throws ValueError if an XFAIL line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:93,Modifiability,config,configuration,93,"""""""; isExpectedToFail() -> bool. Check whether this test is expected to fail in the current; configuration. This check relies on the test xfails property which by; some test formats may not be computed until the test has first been; executed.; Throws ValueError if an XFAIL line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:52,Testability,test,test,52,"""""""; isExpectedToFail() -> bool. Check whether this test is expected to fail in the current; configuration. This check relies on the test xfails property which by; some test formats may not be computed until the test has first been; executed.; Throws ValueError if an XFAIL line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:133,Testability,test,test,133,"""""""; isExpectedToFail() -> bool. Check whether this test is expected to fail in the current; configuration. This check relies on the test xfails property which by; some test formats may not be computed until the test has first been; executed.; Throws ValueError if an XFAIL line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:169,Testability,test,test,169,"""""""; isExpectedToFail() -> bool. Check whether this test is expected to fail in the current; configuration. This check relies on the test xfails property which by; some test formats may not be computed until the test has first been; executed.; Throws ValueError if an XFAIL line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:212,Testability,test,test,212,"""""""; isExpectedToFail() -> bool. Check whether this test is expected to fail in the current; configuration. This check relies on the test xfails property which by; some test formats may not be computed until the test has first been; executed.; Throws ValueError if an XFAIL line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:38,Availability,avail,available,38,# Check if any of the xfails match an available feature.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:148,Availability,avail,available,148,"""""""; isWithinFeatureLimits() -> bool. A test is within the feature limits set by run_only_tests if; 1. the test's requirements ARE satisfied by the available features; 2. the test's requirements ARE NOT satisfied after the limiting; features are removed from the available features. Throws ValueError if a REQUIRES line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:263,Availability,avail,available,263,"""""""; isWithinFeatureLimits() -> bool. A test is within the feature limits set by run_only_tests if; 1. the test's requirements ARE satisfied by the available features; 2. the test's requirements ARE NOT satisfied after the limiting; features are removed from the available features. Throws ValueError if a REQUIRES line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:333,Availability,error,error,333,"""""""; isWithinFeatureLimits() -> bool. A test is within the feature limits set by run_only_tests if; 1. the test's requirements ARE satisfied by the available features; 2. the test's requirements ARE NOT satisfied after the limiting; features are removed from the available features. Throws ValueError if a REQUIRES line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:40,Testability,test,test,40,"""""""; isWithinFeatureLimits() -> bool. A test is within the feature limits set by run_only_tests if; 1. the test's requirements ARE satisfied by the available features; 2. the test's requirements ARE NOT satisfied after the limiting; features are removed from the available features. Throws ValueError if a REQUIRES line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:107,Testability,test,test,107,"""""""; isWithinFeatureLimits() -> bool. A test is within the feature limits set by run_only_tests if; 1. the test's requirements ARE satisfied by the available features; 2. the test's requirements ARE NOT satisfied after the limiting; features are removed from the available features. Throws ValueError if a REQUIRES line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:175,Testability,test,test,175,"""""""; isWithinFeatureLimits() -> bool. A test is within the feature limits set by run_only_tests if; 1. the test's requirements ARE satisfied by the available features; 2. the test's requirements ARE NOT satisfied after the limiting; features are removed from the available features. Throws ValueError if a REQUIRES line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:171,Availability,error,error,171,"""""""; getMissingRequiredFeatures() -> list of strings. Returns a list of features from REQUIRES that are not satisfied.""; Throws ValueError if a REQUIRES line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:205,Availability,error,error,205,"""""""; getUnsupportedFeatures() -> list of strings. Returns a list of features from UNSUPPORTED that are present; in the test configuration's features.; Throws ValueError if an UNSUPPORTED line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:124,Deployability,configurat,configuration,124,"""""""; getUnsupportedFeatures() -> list of strings. Returns a list of features from UNSUPPORTED that are present; in the test configuration's features.; Throws ValueError if an UNSUPPORTED line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:124,Modifiability,config,configuration,124,"""""""; getUnsupportedFeatures() -> list of strings. Returns a list of features from UNSUPPORTED that are present; in the test configuration's features.; Throws ValueError if an UNSUPPORTED line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:119,Testability,test,test,119,"""""""; getUnsupportedFeatures() -> list of strings. Returns a list of features from UNSUPPORTED that are present; in the test configuration's features.; Throws ValueError if an UNSUPPORTED line has a syntax error.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py:141,Testability,test,test,141,"""""""; getUsedFeatures() -> list of strings. Returns a list of all features appearing in XFAIL, UNSUPPORTED and; REQUIRES annotations for this test.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/Test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/Test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:5,Testability,Test,TestingConfig,5,"""""""; TestingConfig - Information on the tests inside a suite.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:40,Testability,test,tests,40,"""""""; TestingConfig - Information on the tests inside a suite.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:32,Testability,Test,TestingConfig,32,"""""""; fromdefaults(litConfig) -> TestingConfig. Create a TestingConfig object with default values.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:56,Testability,Test,TestingConfig,56,"""""""; fromdefaults(litConfig) -> TestingConfig. Create a TestingConfig object with default values.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:57,Deployability,install,installer,57,"# Avoid Windows heuristics which try to detect potential installer; # programs (which may need to run with elevated privileges) and ask; # if the user wants to run them in that way. This heuristic may; # match for executables containing the substrings ""patch"" (which is; # a substring of ""dispatch""), ""update"", ""setup"", etc. Set this; # environment variable indicating that we want to execute them with; # the current user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:253,Deployability,patch,patch,253,"# Avoid Windows heuristics which try to detect potential installer; # programs (which may need to run with elevated privileges) and ask; # if the user wants to run them in that way. This heuristic may; # match for executables containing the substrings ""patch"" (which is; # a substring of ""dispatch""), ""update"", ""setup"", etc. Set this; # environment variable indicating that we want to execute them with; # the current user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:302,Deployability,update,update,302,"# Avoid Windows heuristics which try to detect potential installer; # programs (which may need to run with elevated privileges) and ask; # if the user wants to run them in that way. This heuristic may; # match for executables containing the substrings ""patch"" (which is; # a substring of ""dispatch""), ""update"", ""setup"", etc. Set this; # environment variable indicating that we want to execute them with; # the current user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:349,Modifiability,variab,variable,349,"# Avoid Windows heuristics which try to detect potential installer; # programs (which may need to run with elevated privileges) and ask; # if the user wants to run them in that way. This heuristic may; # match for executables containing the substrings ""patch"" (which is; # a substring of ""dispatch""), ""update"", ""setup"", etc. Set this; # environment variable indicating that we want to execute them with; # the current user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:2,Safety,Avoid,Avoid,2,"# Avoid Windows heuristics which try to detect potential installer; # programs (which may need to run with elevated privileges) and ask; # if the user wants to run them in that way. This heuristic may; # match for executables containing the substrings ""patch"" (which is; # a substring of ""dispatch""), ""update"", ""setup"", etc. Set this; # environment variable indicating that we want to execute them with; # the current user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:40,Safety,detect,detect,40,"# Avoid Windows heuristics which try to detect potential installer; # programs (which may need to run with elevated privileges) and ask; # if the user wants to run them in that way. This heuristic may; # match for executables containing the substrings ""patch"" (which is; # a substring of ""dispatch""), ""update"", ""setup"", etc. Set this; # environment variable indicating that we want to execute them with; # the current user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:33,Modifiability,variab,variables,33,# Check for empty string as some variables such as LD_PRELOAD cannot be empty; # ('') for OS's such as OpenBSD.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:18,Availability,avail,available,18,# Set the default available features based on the LitConfig.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:47,Deployability,configurat,configuration,47,"""""""; load_from_path(path, litConfig). Load the configuration module at the provided path into the given config; object.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:47,Modifiability,config,configuration,47,"""""""; load_from_path(path, litConfig). Load the configuration module at the provided path into the given config; object.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:104,Modifiability,config,config,104,"""""""; load_from_path(path, litConfig). Load the configuration module at the provided path into the given config; object.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:38,Performance,Load,Load,38,"""""""; load_from_path(path, litConfig). Load the configuration module at the provided path into the given config; object.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:11,Modifiability,config,config,11,# Load the config script data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:2,Performance,Load,Load,2,# Load the config script data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:14,Modifiability,config,config,14,# Execute the config script to initialize the object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:85,Availability,error,error,85,# We allow normal system exit inside a config file to just; # return control without error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:39,Modifiability,config,config,39,# We allow normal system exit inside a config file to just; # return control without error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:147,Deployability,Configurat,Configurations,147,# This list is used by TestRunner.py to restrict running only tests that; # require one of the features in this list if this list is non-empty.; # Configurations can set this list to restrict the set of tests to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:147,Modifiability,Config,Configurations,147,# This list is used by TestRunner.py to restrict running only tests that; # require one of the features in this list if this list is non-empty.; # Configurations can set this list to restrict the set of tests to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:23,Testability,Test,TestRunner,23,# This list is used by TestRunner.py to restrict running only tests that; # require one of the features in this list if this list is non-empty.; # Configurations can set this list to restrict the set of tests to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:62,Testability,test,tests,62,# This list is used by TestRunner.py to restrict running only tests that; # require one of the features in this list if this list is non-empty.; # Configurations can set this list to restrict the set of tests to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:203,Testability,test,tests,203,# This list is used by TestRunner.py to restrict running only tests that; # require one of the features in this list if this list is non-empty.; # Configurations can set this list to restrict the set of tests to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:26,Modifiability,config,config,26,"""""""finish() - Finish this config object, after loading is complete.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:47,Performance,load,loading,47,"""""""finish() - Finish this config object, after loading is complete.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:56,Modifiability,config,config,56,# FIXME: This should really only be suite in test suite config; # files. Should we distinguish them?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:45,Testability,test,test,45,# FIXME: This should really only be suite in test suite config; # files. Should we distinguish them?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:56,Modifiability,config,config,56,# FIXME: This should really only be suite in test suite config; # files. Should we distinguish them?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:45,Testability,test,test,45,# FIXME: This should really only be suite in test suite config; # files. Should we distinguish them?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:29,Deployability,configurat,configuration,29,"""""""root attribute - The root configuration for the test suite.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:29,Modifiability,config,configuration,29,"""""""root attribute - The root configuration for the test suite.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:51,Testability,test,test,51,"""""""root attribute - The root configuration for the test suite.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py:174,Modifiability,config,config,174,"""""""; Helper class to indicate that the substitutions contains backreferences. This can be used as the following in lit.cfg to mark subsitutions as having; back-references::. config.substutions.append(('\b[^ ]*.cpp', SubstituteCaptures('\0.txt'))). """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestingConfig.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:26,Availability,error,error,26,"""""""; A script had a fatal error such that there's no point in retrying. The; message has not been emitted on stdout or stderr but is instead included in; this exception.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:77,Integrability,message,message,77,"""""""; A script had a fatal error such that there's no point in retrying. The; message has not been emitted on stdout or stderr but is instead included in; this exception.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:92,Deployability,pipeline,pipeline,92,"# A regex that matches %dbg(ARG), which lit inserts at the beginning of each; # run command pipeline such that ARG specifies the pipeline's source line; # number. lit later expands each %dbg(ARG) to a command that behaves as a null; # command in the target shell so that the line number is seen in lit's verbose; # mode.; #; # This regex captures ARG. ARG must not contain a right parenthesis, which; # terminates %dbg. ARG must not contain quotes, in which ARG might be enclosed; # during expansion.; #; # COMMAND that follows %dbg(ARG) is also captured. COMMAND can be; # empty as a result of conditinal substitution.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:129,Deployability,pipeline,pipeline,129,"# A regex that matches %dbg(ARG), which lit inserts at the beginning of each; # run command pipeline such that ARG specifies the pipeline's source line; # number. lit later expands each %dbg(ARG) to a command that behaves as a null; # command in the target shell so that the line number is seen in lit's verbose; # mode.; #; # This regex captures ARG. ARG must not contain a right parenthesis, which; # terminates %dbg. ARG must not contain quotes, in which ARG might be enclosed; # during expansion.; #; # COMMAND that follows %dbg(ARG) is also captured. COMMAND can be; # empty as a result of conditinal substitution.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:82,Modifiability,variab,variables,82,"""""""Mutable shell environment containing things like CWD and env vars. Environment variables are not implemented, but cwd tracking is. In addition,; we maintain a dir stack for pushd/popd.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:46,Safety,timeout,timeout,46,"""""""; Object used to helper manage enforcing a timeout in; _executeShCmd(). It is passed through recursive calls; to collect processes that have been executed so that when; the timeout happens they can be killed.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:176,Safety,timeout,timeout,176,"""""""; Object used to helper manage enforcing a timeout in; _executeShCmd(). It is passed through recursive calls; to collect processes that have been executed so that when; the timeout happens they can be killed.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:36,Performance,concurren,concurrent,36,# This lock will be used to protect concurrent access; # to _procs and _doneKillPass,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:47,Security,access,access,47,# This lock will be used to protect concurrent access; # to _procs and _doneKillPass,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:2,Safety,Avoid,Avoid,2,# Avoid re-entering the lock by finding out if kill needs to be run; # again here but call it if necessary once we have left the lock.; # We could use a reentrant lock here instead but this code seems; # clearer to me.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:204,Usability,clear,clearer,204,# Avoid re-entering the lock by finding out if kill needs to be run; # again here but call it if necessary once we have left the lock.; # We could use a reentrant lock here instead but this code seems; # clearer to me.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:180,Safety,timeout,timeout,180,"# The initial call to _kill() from the timer thread already happened so; # we need to call it again from this thread, otherwise this process; # will be left to run even though the timeout was already hit",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:66,Safety,timeout,timeout,66,# Do some late initialisation that's only needed; # if there is a timeout set,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:28,Usability,clear,clear,28,# Python2 doesn't have list.clear(),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:5,Integrability,Wrap,Wrapper,5,"""""""; Wrapper around _executeShCmd that handles; timeout; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:48,Safety,timeout,timeout,48,"""""""; Wrapper around _executeShCmd that handles; timeout; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:30,Safety,timeout,timeout,30,# Use the helper even when no timeout is required to make; # other code simpler (i.e. avoid bunch of ``!= None`` checks),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:86,Safety,avoid,avoid,86,# Use the helper even when no timeout is required to make; # other code simpler (i.e. avoid bunch of ``!= None`` checks),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:72,Usability,simpl,simpler,72,# Use the helper even when no timeout is required to make; # other code simpler (i.e. avoid bunch of ``!= None`` checks),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:7,Testability,log,logic,7,# This logic differs from upstream list2cmdline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:2,Deployability,Update,Update,2,# Update the cwd in the parent environment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:45,Modifiability,variab,variable,45,"""""""executeBuiltinExport - Set an environment variable.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:26,Availability,echo,echo,26,"""""""Interpret a redirected echo or @echo command""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:35,Availability,echo,echo,35,"""""""Interpret a redirected echo or @echo command""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:32,Availability,echo,echo,32,# Some tests have un-redirected echo commands to help debug test failures.; # Buffer our output and return it to the caller.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:65,Availability,failure,failures,65,# Some tests have un-redirected echo commands to help debug test failures.; # Buffer our output and return it to the caller.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:7,Testability,test,tests,7,# Some tests have un-redirected echo commands to help debug test failures.; # Buffer our output and return it to the caller.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:60,Testability,test,test,60,# Some tests have un-redirected echo commands to help debug test failures.; # Buffer our output and return it to the caller.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:77,Availability,echo,echo,77,"# Reopen stdout in binary mode to avoid CRLF translation. The versions; # of echo we are replacing on Windows all emit plain LF, and the LLVM; # tests now depend on this.; # When we open as binary, however, this also means that we have to write; # 'bytes' objects to stdout instead of 'str' objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:155,Integrability,depend,depend,155,"# Reopen stdout in binary mode to avoid CRLF translation. The versions; # of echo we are replacing on Windows all emit plain LF, and the LLVM; # tests now depend on this.; # When we open as binary, however, this also means that we have to write; # 'bytes' objects to stdout instead of 'str' objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:34,Safety,avoid,avoid,34,"# Reopen stdout in binary mode to avoid CRLF translation. The versions; # of echo we are replacing on Windows all emit plain LF, and the LLVM; # tests now depend on this.; # When we open as binary, however, this also means that we have to write; # 'bytes' objects to stdout instead of 'str' objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:145,Testability,test,tests,145,"# Reopen stdout in binary mode to avoid CRLF translation. The versions; # of echo we are replacing on Windows all emit plain LF, and the LLVM; # tests now depend on this.; # When we open as binary, however, this also means that we have to write; # 'bytes' objects to stdout instead of 'str' objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:12,Availability,echo,echo,12,"# Implement echo flags. We only support -e and -n, and not yet in; # combination. We have to ignore unknown flags, because `echo ""-D FOO""`; # prints the dash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:124,Availability,echo,echo,124,"# Implement echo flags. We only support -e and -n, and not yet in; # combination. We have to ignore unknown flags, because `echo ""-D FOO""`; # prints the dash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:22,Security,access,access,22,# NOTE: use ctypes to access `SHFileOperationsW` on Windows to; # use the NT style path to get access to long file paths which; # cannot be removed otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:95,Security,access,access,95,# NOTE: use ctypes to access `SHFileOperationsW` on Windows to; # use the NT style path to get access to long file paths which; # cannot be removed otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:35,Safety,timeout,timeout,35,# Prevent further recursion if the timeout has been hit; # as we should try avoid launching more processes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:76,Safety,avoid,avoid,76,# Prevent further recursion if the timeout has been hit; # as we should try avoid launching more processes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:5,Safety,avoid,avoid,5,"# To avoid deadlock, we use a single stderr stream for piped; # output. This is null until we have seen some output using; # stderr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:115,Deployability,pipeline,pipeline,115,"# Create a copy of the global environment and modify it for; # this one command. There might be multiple envs in a pipeline,; # and there might be multiple envs in a command (usually when; # one comes from a substitution):; # env FOO=1 llc < %s | env BAR=2 llvm-mc | FileCheck %s; # env FOO=1 %{another_env_plus_cmd} | FileCheck %s",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:44,Availability,echo,echo,44,"# Handle in-process builtins.; #; # Handle ""echo"" as a builtin if it is not part of a pipeline. This; # greatly speeds up tests that construct input files by repeatedly; # echo-appending to a file.; # FIXME: Standardize on the builtin echo implementation. We can use a; # temporary file to sidestep blocking pipe write issues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:172,Availability,echo,echo-appending,172,"# Handle in-process builtins.; #; # Handle ""echo"" as a builtin if it is not part of a pipeline. This; # greatly speeds up tests that construct input files by repeatedly; # echo-appending to a file.; # FIXME: Standardize on the builtin echo implementation. We can use a; # temporary file to sidestep blocking pipe write issues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:235,Availability,echo,echo,235,"# Handle in-process builtins.; #; # Handle ""echo"" as a builtin if it is not part of a pipeline. This; # greatly speeds up tests that construct input files by repeatedly; # echo-appending to a file.; # FIXME: Standardize on the builtin echo implementation. We can use a; # temporary file to sidestep blocking pipe write issues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:86,Deployability,pipeline,pipeline,86,"# Handle in-process builtins.; #; # Handle ""echo"" as a builtin if it is not part of a pipeline. This; # greatly speeds up tests that construct input files by repeatedly; # echo-appending to a file.; # FIXME: Standardize on the builtin echo implementation. We can use a; # temporary file to sidestep blocking pipe write issues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:122,Testability,test,tests,122,"# Handle in-process builtins.; #; # Handle ""echo"" as a builtin if it is not part of a pipeline. This; # greatly speeds up tests that construct input files by repeatedly; # echo-appending to a file.; # FIXME: Standardize on the builtin echo implementation. We can use a; # temporary file to sidestep blocking pipe write issues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:63,Safety,safe,safe,63,"# env calling an in-process builtin is useless, so we take the safe; # approach of complaining.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:384,Modifiability,variab,variables,384,"# We had to search through the 'not' commands to find all the 'env'; # commands and any other in-process builtin command. We don't want to; # reimplement 'not' and its '--crash' here, so just push all 'not'; # commands back to be called as external commands. Because this; # approach effectively moves all 'env' commands up front, it relies on; # the assumptions that (1) environment variables are not intended to be; # relevant to 'not' commands and (2) the 'env' command should always; # blindly pass along the status it receives from any command it calls.; # For plain negations, either 'not' without '--crash', or the shell; # operator '!', leave them out from the command to execute and; # invert the result code afterwards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:2,Deployability,Update,Update,2,# Update the current stdin source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:86,Deployability,release,release,86,"# Explicitly close any redirected files. We need to do this now because we; # need to release any handles we may have on the temporary files (important; # on Win32, for example). Since we have already spawned the subprocess, our; # handles have already been transferred so we do not need them anymore.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:2,Safety,Detect,Detect,2,# Detect Ctrl-C in subprocess.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:43,Deployability,pipeline,pipeline,43,# Take the last failing exit code from the pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:55,Safety,timeout,timeoutInfo,55,"# Always either returns the tuple (out, err, exitCode, timeoutInfo) or raises a; # ScriptFatal exception.; #; # If debug is True (the normal lit behavior), err is empty, and out contains an; # execution trace, including stdout and stderr shown per command executed.; #; # If debug is False (set by some custom lit test formats that call this; # function), out contains only stdout from the script, err contains only stderr; # from the script, and there is no execution trace.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:314,Testability,test,test,314,"# Always either returns the tuple (out, err, exitCode, timeoutInfo) or raises a; # ScriptFatal exception.; #; # If debug is True (the normal lit behavior), err is empty, and out contains an; # execution trace, including stdout and stderr shown per command executed.; #; # If debug is False (set by some custom lit test formats that call this; # function), out contains only stdout from the script, err contains only stderr; # from the script, and there is no execution trace.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:187,Integrability,message,message,187,"# Within lit, we try to always add '%dbg(...)' to command lines in order; # to maximize debuggability. However, custom lit test formats might not; # always add it, so add a generic debug message in that case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:123,Testability,test,test,123,"# Within lit, we try to always add '%dbg(...)' to command lines in order; # to maximize debuggability. However, custom lit test formats might not; # always add it, so add a generic debug message in that case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:22,Availability,echo,echo,22,"# The purpose of an ""@echo"" command is merely to add a debugging message; # directly to lit's output. It is used internally by lit's internal; # shell and is not currently documented for use in lit tests. However,; # if someone misuses it (e.g., both ""echo"" and ""@echo"" complain about; # stdin redirection), produce the normal execution trace to facilitate; # debugging.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:252,Availability,echo,echo,252,"# The purpose of an ""@echo"" command is merely to add a debugging message; # directly to lit's output. It is used internally by lit's internal; # shell and is not currently documented for use in lit tests. However,; # if someone misuses it (e.g., both ""echo"" and ""@echo"" complain about; # stdin redirection), produce the normal execution trace to facilitate; # debugging.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:264,Availability,echo,echo,264,"# The purpose of an ""@echo"" command is merely to add a debugging message; # directly to lit's output. It is used internally by lit's internal; # shell and is not currently documented for use in lit tests. However,; # if someone misuses it (e.g., both ""echo"" and ""@echo"" complain about; # stdin redirection), produce the normal execution trace to facilitate; # debugging.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:65,Integrability,message,message,65,"# The purpose of an ""@echo"" command is merely to add a debugging message; # directly to lit's output. It is used internally by lit's internal; # shell and is not currently documented for use in lit tests. However,; # if someone misuses it (e.g., both ""echo"" and ""@echo"" complain about; # stdin redirection), produce the normal execution trace to facilitate; # debugging.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:198,Testability,test,tests,198,"# The purpose of an ""@echo"" command is merely to add a debugging message; # directly to lit's output. It is used internally by lit's internal; # shell and is not currently documented for use in lit tests. However,; # if someone misuses it (e.g., both ""echo"" and ""@echo"" complain about; # stdin redirection), produce the normal execution trace to facilitate; # debugging.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:11,Availability,error,error,11,# Show the error conditions:,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:2,Safety,Avoid,Avoid,2,# Avoid CRLFs when writing bash scripts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:2,Availability,Echo,Echo,2,"# Echo the debugging diagnostic to stderr.; #; # For that echo command, use 'set' commands to suppress the; # shell's execution trace, which would just add noise. Suppress; # the shell's execution trace for the 'set' commands by; # redirecting their stderr to /dev/null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:58,Availability,echo,echo,58,"# Echo the debugging diagnostic to stderr.; #; # For that echo command, use 'set' commands to suppress the; # shell's execution trace, which would just add noise. Suppress; # the shell's execution trace for the 'set' commands by; # redirecting their stderr to /dev/null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:90,Deployability,integrat,integrated,90,"""""""; parseIntegratedTestScriptCommands(source_path) -> commands. Parse the commands in an integrated test script file into a list of; (line_number, command_type, line).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:90,Integrability,integrat,integrated,90,"""""""; parseIntegratedTestScriptCommands(source_path) -> commands. Parse the commands in an integrated test script file into a list of; (line_number, command_type, line).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:101,Testability,test,test,101,"""""""; parseIntegratedTestScriptCommands(source_path) -> commands. Parse the commands in an integrated test script file into a list of; (line_number, command_type, line).; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:14,Deployability,update,updated,14,# Compute the updated line number by counting the intervening; # newlines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:142,Safety,avoid,avoid,142,"# Convert the keyword and line to UTF-8 strings and yield the; # command. Note that we take care to return regular strings in; # Python 2, to avoid other code having to differentiate between the; # str and unicode types.; #; # Opening the file in binary mode prevented Windows \r newline; # characters from being converted to Unix \n newlines, so manually; # strip those from the yielded lines.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:62,Testability,test,test,62,"""""""Get the temporary location, this is always relative to the test suite; root, not test source root.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:84,Testability,test,test,84,"""""""Get the temporary location, this is always relative to the test suite; root, not test source root.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:111,Safety,avoid,avoid,111,"# realpath variants; # Windows paths with substitute drives are not expanded by default; # as they are used to avoid MAX_PATH issues, but sometimes we do; # need the fully expanded path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:12,Integrability,interface,interface,12,"""""""; Common interface for lit directives for which any lit substitutions must be; expanded to produce the shell script. It includes directives (e.g., 'RUN:'); specifying shell commands that might have lit substitutions to be expanded.; It also includes lit directives (e.g., 'DEFINE:') that adjust substitutions. start_line_number: The directive's starting line number.; end_line_number: The directive's ending line number, which is; start_line_number if the directive has no line continuations.; keyword: The keyword that specifies the directive. For example, 'RUN:'.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:70,Availability,echo,echo,70,"""""""; A lit directive taking a shell command line. For example,; 'RUN: echo hello world'. command: The content accumulated so far from the directive and its; continuation lines.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:615,Availability,error,error,615,"# Check the substitution's name.; #; # Do not extend this to permit '.' or any sequence that's special in a; # python pattern. We could escape that automatically for; # DEFINE/REDEFINE directives in test files. However, lit configuration; # file authors would still have to remember to escape them manually in; # substitution names but not in values. Moreover, the manually chosen; # and automatically chosen escape sequences would have to be consistent; # (e.g., '\.' vs. '[.]') in order for REDEFINE to successfully redefine; # a substitution previously defined by a lit configuration file. All; # this seems too error prone and confusing to be worthwhile. If you; # want your name to express structure, use ':' instead of '.'.; #; # Actually, '{' and '}' are special if they contain only digits possibly; # separated by a comma. Requiring a leading letter avoids that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:224,Deployability,configurat,configuration,224,"# Check the substitution's name.; #; # Do not extend this to permit '.' or any sequence that's special in a; # python pattern. We could escape that automatically for; # DEFINE/REDEFINE directives in test files. However, lit configuration; # file authors would still have to remember to escape them manually in; # substitution names but not in values. Moreover, the manually chosen; # and automatically chosen escape sequences would have to be consistent; # (e.g., '\.' vs. '[.]') in order for REDEFINE to successfully redefine; # a substitution previously defined by a lit configuration file. All; # this seems too error prone and confusing to be worthwhile. If you; # want your name to express structure, use ':' instead of '.'.; #; # Actually, '{' and '}' are special if they contain only digits possibly; # separated by a comma. Requiring a leading letter avoids that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:573,Deployability,configurat,configuration,573,"# Check the substitution's name.; #; # Do not extend this to permit '.' or any sequence that's special in a; # python pattern. We could escape that automatically for; # DEFINE/REDEFINE directives in test files. However, lit configuration; # file authors would still have to remember to escape them manually in; # substitution names but not in values. Moreover, the manually chosen; # and automatically chosen escape sequences would have to be consistent; # (e.g., '\.' vs. '[.]') in order for REDEFINE to successfully redefine; # a substitution previously defined by a lit configuration file. All; # this seems too error prone and confusing to be worthwhile. If you; # want your name to express structure, use ':' instead of '.'.; #; # Actually, '{' and '}' are special if they contain only digits possibly; # separated by a comma. Requiring a leading letter avoids that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:46,Modifiability,extend,extend,46,"# Check the substitution's name.; #; # Do not extend this to permit '.' or any sequence that's special in a; # python pattern. We could escape that automatically for; # DEFINE/REDEFINE directives in test files. However, lit configuration; # file authors would still have to remember to escape them manually in; # substitution names but not in values. Moreover, the manually chosen; # and automatically chosen escape sequences would have to be consistent; # (e.g., '\.' vs. '[.]') in order for REDEFINE to successfully redefine; # a substitution previously defined by a lit configuration file. All; # this seems too error prone and confusing to be worthwhile. If you; # want your name to express structure, use ':' instead of '.'.; #; # Actually, '{' and '}' are special if they contain only digits possibly; # separated by a comma. Requiring a leading letter avoids that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:224,Modifiability,config,configuration,224,"# Check the substitution's name.; #; # Do not extend this to permit '.' or any sequence that's special in a; # python pattern. We could escape that automatically for; # DEFINE/REDEFINE directives in test files. However, lit configuration; # file authors would still have to remember to escape them manually in; # substitution names but not in values. Moreover, the manually chosen; # and automatically chosen escape sequences would have to be consistent; # (e.g., '\.' vs. '[.]') in order for REDEFINE to successfully redefine; # a substitution previously defined by a lit configuration file. All; # this seems too error prone and confusing to be worthwhile. If you; # want your name to express structure, use ':' instead of '.'.; #; # Actually, '{' and '}' are special if they contain only digits possibly; # separated by a comma. Requiring a leading letter avoids that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:573,Modifiability,config,configuration,573,"# Check the substitution's name.; #; # Do not extend this to permit '.' or any sequence that's special in a; # python pattern. We could escape that automatically for; # DEFINE/REDEFINE directives in test files. However, lit configuration; # file authors would still have to remember to escape them manually in; # substitution names but not in values. Moreover, the manually chosen; # and automatically chosen escape sequences would have to be consistent; # (e.g., '\.' vs. '[.]') in order for REDEFINE to successfully redefine; # a substitution previously defined by a lit configuration file. All; # this seems too error prone and confusing to be worthwhile. If you; # want your name to express structure, use ':' instead of '.'.; #; # Actually, '{' and '}' are special if they contain only digits possibly; # separated by a comma. Requiring a leading letter avoids that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:859,Safety,avoid,avoids,859,"# Check the substitution's name.; #; # Do not extend this to permit '.' or any sequence that's special in a; # python pattern. We could escape that automatically for; # DEFINE/REDEFINE directives in test files. However, lit configuration; # file authors would still have to remember to escape them manually in; # substitution names but not in values. Moreover, the manually chosen; # and automatically chosen escape sequences would have to be consistent; # (e.g., '\.' vs. '[.]') in order for REDEFINE to successfully redefine; # a substitution previously defined by a lit configuration file. All; # this seems too error prone and confusing to be worthwhile. If you; # want your name to express structure, use ':' instead of '.'.; #; # Actually, '{' and '}' are special if they contain only digits possibly; # separated by a comma. Requiring a leading letter avoids that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:199,Testability,test,test,199,"# Check the substitution's name.; #; # Do not extend this to permit '.' or any sequence that's special in a; # python pattern. We could escape that automatically for; # DEFINE/REDEFINE directives in test files. However, lit configuration; # file authors would still have to remember to escape them manually in; # substitution names but not in values. Moreover, the manually chosen; # and automatically chosen escape sequences would have to be consistent; # (e.g., '\.' vs. '[.]') in order for REDEFINE to successfully redefine; # a substitution previously defined by a lit configuration file. All; # this seems too error prone and confusing to be worthwhile. If you; # want your name to express structure, use ':' instead of '.'.; #; # Actually, '{' and '}' are special if they contain only digits possibly; # separated by a comma. Requiring a leading letter avoids that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:412,Availability,error,error,412,"""""""; Apply substitutions to the script. Allow full regular expression syntax.; Replace each matching occurrence of regular expression pattern a with; substitution b in line ln. If a substitution expands into another substitution, it is expanded; recursively until the line has no more expandable substitutions. If; the line can still can be substituted after being substituted; `recursion_limit` times, it is an error. If the `recursion_limit` is; `None` (the default), no recursive substitution is performed at all.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:499,Performance,perform,performed,499,"""""""; Apply substitutions to the script. Allow full regular expression syntax.; Replace each matching occurrence of regular expression pattern a with; substitution b in line ln. If a substitution expands into another substitution, it is expanded; recursively until the line has no more expandable substitutions. If; the line can still can be substituted after being substituted; `recursion_limit` times, it is an error. If the `recursion_limit` is; `None` (the default), no recursive substitution is performed at all.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:16,Safety,avoid,avoid,16,# early exit to avoid wasting time on lines without; # conditional substitutions,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:34,Performance,cache,cache,34,"# re.compile() has a built-in LRU cache with 512 entries. In some; # test suites lit ends up thrashing that cache, which made e.g.; # check-llvm run 50% slower. Use an explicit, unbounded cache; # to prevent that from happening. Since lit is fairly; # short-lived, since the set of substitutions is fairly small, and; # since thrashing has such bad consequences, not bounding the cache; # seems reasonable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:108,Performance,cache,cache,108,"# re.compile() has a built-in LRU cache with 512 entries. In some; # test suites lit ends up thrashing that cache, which made e.g.; # check-llvm run 50% slower. Use an explicit, unbounded cache; # to prevent that from happening. Since lit is fairly; # short-lived, since the set of substitutions is fairly small, and; # since thrashing has such bad consequences, not bounding the cache; # seems reasonable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:188,Performance,cache,cache,188,"# re.compile() has a built-in LRU cache with 512 entries. In some; # test suites lit ends up thrashing that cache, which made e.g.; # check-llvm run 50% slower. Use an explicit, unbounded cache; # to prevent that from happening. Since lit is fairly; # short-lived, since the set of substitutions is fairly small, and; # since thrashing has such bad consequences, not bounding the cache; # seems reasonable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:380,Performance,cache,cache,380,"# re.compile() has a built-in LRU cache with 512 entries. In some; # test suites lit ends up thrashing that cache, which made e.g.; # check-llvm run 50% slower. Use an explicit, unbounded cache; # to prevent that from happening. Since lit is fairly; # short-lived, since the set of substitutions is fairly small, and; # since thrashing has such bad consequences, not bounding the cache; # seems reasonable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:69,Testability,test,test,69,"# re.compile() has a built-in LRU cache with 512 entries. In some; # test suites lit ends up thrashing that cache, which made e.g.; # check-llvm run 50% slower. Use an explicit, unbounded cache; # to prevent that from happening. Since lit is fairly; # short-lived, since the set of substitutions is fairly small, and; # since thrashing has such bad consequences, not bounding the cache; # seems reasonable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:49,Deployability,integrat,integrated,49,"""""""; An enumeration representing the style of an integrated test keyword or; command. TAG: A keyword taking no value. Ex 'END.'; COMMAND: A keyword taking a list of shell commands. Ex 'RUN:'; LIST: A keyword taking a comma-separated list of values.; SPACE_LIST: A keyword taking a space-separated list of values.; BOOLEAN_EXPR: A keyword taking a comma-separated list of; boolean expressions. Ex 'XFAIL:'; INTEGER: A keyword taking a single integer. Ex 'ALLOW_RETRIES:'; CUSTOM: A keyword with custom parsing semantics.; DEFINE: A keyword taking a new lit substitution definition. Ex; 'DEFINE: %{name}=value'; REDEFINE: A keyword taking a lit substitution redefinition. Ex; 'REDEFINE: %{name}=value'; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:49,Integrability,integrat,integrated,49,"""""""; An enumeration representing the style of an integrated test keyword or; command. TAG: A keyword taking no value. Ex 'END.'; COMMAND: A keyword taking a list of shell commands. Ex 'RUN:'; LIST: A keyword taking a comma-separated list of values.; SPACE_LIST: A keyword taking a space-separated list of values.; BOOLEAN_EXPR: A keyword taking a comma-separated list of; boolean expressions. Ex 'XFAIL:'; INTEGER: A keyword taking a single integer. Ex 'ALLOW_RETRIES:'; CUSTOM: A keyword with custom parsing semantics.; DEFINE: A keyword taking a new lit substitution definition. Ex; 'DEFINE: %{name}=value'; REDEFINE: A keyword taking a lit substitution redefinition. Ex; 'REDEFINE: %{name}=value'; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:60,Testability,test,test,60,"""""""; An enumeration representing the style of an integrated test keyword or; command. TAG: A keyword taking no value. Ex 'END.'; COMMAND: A keyword taking a list of shell commands. Ex 'RUN:'; LIST: A keyword taking a comma-separated list of values.; SPACE_LIST: A keyword taking a space-separated list of values.; BOOLEAN_EXPR: A keyword taking a comma-separated list of; boolean expressions. Ex 'XFAIL:'; INTEGER: A keyword taking a single integer. Ex 'ALLOW_RETRIES:'; CUSTOM: A keyword with custom parsing semantics.; DEFINE: A keyword taking a new lit substitution definition. Ex; 'DEFINE: %{name}=value'; REDEFINE: A keyword taking a lit substitution redefinition. Ex; 'REDEFINE: %{name}=value'; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:33,Deployability,integrat,integrated,33,"""""""A parser for LLVM/Clang style integrated test scripts. keyword: The keyword to parse for. It must end in either '.' or ':'.; kind: An value of ParserKind.; parser: A custom parser. This value may only be specified with; ParserKind.CUSTOM.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:33,Integrability,integrat,integrated,33,"""""""A parser for LLVM/Clang style integrated test scripts. keyword: The keyword to parse for. It must end in either '.' or ':'.; kind: An value of ParserKind.; parser: A custom parser. This value may only be specified with; ParserKind.CUSTOM.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:44,Testability,test,test,44,"""""""A parser for LLVM/Clang style integrated test scripts. keyword: The keyword to parse for. It must end in either '.' or ':'.; kind: An value of ParserKind.; parser: A custom parser. This value may only be specified with; ParserKind.CUSTOM.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:84,Deployability,pipeline,pipeline,84,"# Collapse lines with trailing '\\', or add line with line number to; # start a new pipeline.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:44,Deployability,integrat,integrated,44,"""""""_parseKeywords. Scan an LLVM/Clang style integrated test script and extract all the lines; pertaining to a special parser. This includes 'RUN', 'XFAIL', 'REQUIRES',; 'UNSUPPORTED', 'ALLOW_RETRIES', 'END', 'DEFINE', 'REDEFINE', as well as; other specified custom parsers. Returns a dictionary mapping each custom parser to its value after; parsing the test.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:44,Integrability,integrat,integrated,44,"""""""_parseKeywords. Scan an LLVM/Clang style integrated test script and extract all the lines; pertaining to a special parser. This includes 'RUN', 'XFAIL', 'REQUIRES',; 'UNSUPPORTED', 'ALLOW_RETRIES', 'END', 'DEFINE', 'REDEFINE', as well as; other specified custom parsers. Returns a dictionary mapping each custom parser to its value after; parsing the test.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:55,Testability,test,test,55,"""""""_parseKeywords. Scan an LLVM/Clang style integrated test script and extract all the lines; pertaining to a special parser. This includes 'RUN', 'XFAIL', 'REQUIRES',; 'UNSUPPORTED', 'ALLOW_RETRIES', 'END', 'DEFINE', 'REDEFINE', as well as; other specified custom parsers. Returns a dictionary mapping each custom parser to its value after; parsing the test.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:354,Testability,test,test,354,"""""""_parseKeywords. Scan an LLVM/Clang style integrated test script and extract all the lines; pertaining to a special parser. This includes 'RUN', 'XFAIL', 'REQUIRES',; 'UNSUPPORTED', 'ALLOW_RETRIES', 'END', 'DEFINE', 'REDEFINE', as well as; other specified custom parsers. Returns a dictionary mapping each custom parser to its value after; parsing the test.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:2,Deployability,Install,Install,2,# Install the built-in keyword parsers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:2,Deployability,Install,Install,2,# Install user-defined additional parsers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:14,Testability,test,test,14,# Collect the test lines from the script.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:56,Deployability,integrat,integrated,56,"""""""parseIntegratedTestScript - Scan an LLVM/Clang style integrated test; script and extract the lines to 'RUN' as well as 'XFAIL', 'REQUIRES',; 'UNSUPPORTED' and 'ALLOW_RETRIES' information into the given test. If additional parsers are specified then the test is also scanned for the; keywords they specify and all matches are passed to the custom parser. If 'require_script' is False an empty script; may be returned. This can be used for test formats where the actual script; is optional or ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:56,Integrability,integrat,integrated,56,"""""""parseIntegratedTestScript - Scan an LLVM/Clang style integrated test; script and extract the lines to 'RUN' as well as 'XFAIL', 'REQUIRES',; 'UNSUPPORTED' and 'ALLOW_RETRIES' information into the given test. If additional parsers are specified then the test is also scanned for the; keywords they specify and all matches are passed to the custom parser. If 'require_script' is False an empty script; may be returned. This can be used for test formats where the actual script; is optional or ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:67,Testability,test,test,67,"""""""parseIntegratedTestScript - Scan an LLVM/Clang style integrated test; script and extract the lines to 'RUN' as well as 'XFAIL', 'REQUIRES',; 'UNSUPPORTED' and 'ALLOW_RETRIES' information into the given test. If additional parsers are specified then the test is also scanned for the; keywords they specify and all matches are passed to the custom parser. If 'require_script' is False an empty script; may be returned. This can be used for test formats where the actual script; is optional or ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:205,Testability,test,test,205,"""""""parseIntegratedTestScript - Scan an LLVM/Clang style integrated test; script and extract the lines to 'RUN' as well as 'XFAIL', 'REQUIRES',; 'UNSUPPORTED' and 'ALLOW_RETRIES' information into the given test. If additional parsers are specified then the test is also scanned for the; keywords they specify and all matches are passed to the custom parser. If 'require_script' is False an empty script; may be returned. This can be used for test formats where the actual script; is optional or ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:256,Testability,test,test,256,"""""""parseIntegratedTestScript - Scan an LLVM/Clang style integrated test; script and extract the lines to 'RUN' as well as 'XFAIL', 'REQUIRES',; 'UNSUPPORTED' and 'ALLOW_RETRIES' information into the given test. If additional parsers are specified then the test is also scanned for the; keywords they specify and all matches are passed to the custom parser. If 'require_script' is False an empty script; may be returned. This can be used for test formats where the actual script; is optional or ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:441,Testability,test,test,441,"""""""parseIntegratedTestScript - Scan an LLVM/Clang style integrated test; script and extract the lines to 'RUN' as well as 'XFAIL', 'REQUIRES',; 'UNSUPPORTED' and 'ALLOW_RETRIES' information into the given test. If additional parsers are specified then the test is also scanned for the; keywords they specify and all matches are passed to the custom parser. If 'require_script' is False an empty script; may be returned. This can be used for test formats where the actual script; is optional or ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:12,Testability,test,test,12,# Parse the test sources and extract test properties,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:37,Testability,test,test,37,# Parse the test sources and extract test properties,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:48,Safety,timeout,timeoutInfo,48,"# Always returns the tuple (out, err, exitCode, timeoutInfo, status).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:14,Testability,test,test,14,"# Extract the test case name from the test object, and remove the; # file extension.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:38,Testability,test,test,38,"# Extract the test case name from the test object, and remove the; # file extension.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:16,Testability,test,tests,16,# Re-run failed tests up to test.allowed_retries times.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:28,Testability,test,test,28,# Re-run failed tests up to test.allowed_retries times.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:23,Testability,test,test,23,"# If we had to run the test more than once, count it as a flaky pass. These; # will be printed separately in the test summary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:113,Testability,test,test,113,"# If we had to run the test more than once, count it as a flaky pass. These; # will be printed separately in the test summary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:18,Testability,log,log,18,# Form the output log.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py:3,Safety,Timeout,Timeout,3,"""""""Timeout: %s\n""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/TestRunner.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:114,Availability,error,error,114,"# On Windows with more than 60 processes, multiprocessing's call to; # _winapi.WaitForMultipleObjects() prints an error and lit hangs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:42,Performance,race condition,race condition,42,"# ignore EEXIST, which may occur during a race condition",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:342,Testability,Test,Test,342,"""""""Yields files in a directory. Filenames that are not excluded by rules below are yielded one at a time, as; basenames (i.e., without dirname). Files starting with '.' are always skipped. If 'suffixes' is not None, then only filenames ending with one of its; members will be yielded. These can be extensions, like '.exe', or strings,; like 'Test'. (It is a lexicographic check; so an empty sequence will yield; nothing, but a single empty string will yield all filenames.). If 'exclude_filenames' is not None, then none of the file basenames in it; will be yielded. If specified, the containers for 'suffixes' and 'exclude_filenames' must; support membership checking for strs. Args:; dirname: a directory path.; suffixes: (optional) a sequence of strings (set, list, etc.).; exclude_filenames: (optional) a sequence of strings. Yields:; Filenames as returned by os.listdir (generally, str). """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:101,Modifiability,variab,variable,101,"""""""which(command, [paths]) - Look up the given command in the paths string; (or the PATH environment variable, if unspecified).""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:549,Availability,error,error,549,"""""""Execute command ``command`` (list of arguments or string) with. * working directory ``cwd`` (str), use None to use the current; working directory; * environment ``env`` (dict), use None for none; * Input to the command ``input`` (str), use string to pass; no input.; * Max execution time ``timeout`` (int) seconds. Use 0 for no timeout.; * ``redirect_stderr`` (bool), use True if redirect stderr to stdout. Returns a tuple (out, err, exitCode) where; * ``out`` (str) is the standard output of running the command; * ``err`` (str) is the standard error of running the command; * ``exitCode`` (int) is the exitCode of running the command. If the timeout is hit an ``ExecuteCommandTimeoutException``; is raised. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:293,Safety,timeout,timeout,293,"""""""Execute command ``command`` (list of arguments or string) with. * working directory ``cwd`` (str), use None to use the current; working directory; * environment ``env`` (dict), use None for none; * Input to the command ``input`` (str), use string to pass; no input.; * Max execution time ``timeout`` (int) seconds. Use 0 for no timeout.; * ``redirect_stderr`` (bool), use True if redirect stderr to stdout. Returns a tuple (out, err, exitCode) where; * ``out`` (str) is the standard output of running the command; * ``err`` (str) is the standard error of running the command; * ``exitCode`` (int) is the exitCode of running the command. If the timeout is hit an ``ExecuteCommandTimeoutException``; is raised. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:331,Safety,timeout,timeout,331,"""""""Execute command ``command`` (list of arguments or string) with. * working directory ``cwd`` (str), use None to use the current; working directory; * environment ``env`` (dict), use None for none; * Input to the command ``input`` (str), use string to pass; no input.; * Max execution time ``timeout`` (int) seconds. Use 0 for no timeout.; * ``redirect_stderr`` (bool), use True if redirect stderr to stdout. Returns a tuple (out, err, exitCode) where; * ``out`` (str) is the standard output of running the command; * ``err`` (str) is the standard error of running the command; * ``exitCode`` (int) is the exitCode of running the command. If the timeout is hit an ``ExecuteCommandTimeoutException``; is raised. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:647,Safety,timeout,timeout,647,"""""""Execute command ``command`` (list of arguments or string) with. * working directory ``cwd`` (str), use None to use the current; working directory; * environment ``env`` (dict), use None for none; * Input to the command ``input`` (str), use string to pass; no input.; * Max execution time ``timeout`` (int) seconds. Use 0 for no timeout.; * ``redirect_stderr`` (bool), use True if redirect stderr to stdout. Returns a tuple (out, err, exitCode) where; * ``out`` (str) is the standard output of running the command; * ``err`` (str) is the standard error of running the command; * ``exitCode`` (int) is the exitCode of running the command. If the timeout is hit an ``ExecuteCommandTimeoutException``; is raised. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:2,Safety,Detect,Detect,2,# Detect Ctrl-C in subprocess.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:37,Availability,error,error,37,"""""""; Returns a tuple (<supported> , <error message>); where; `<supported>` is True if `killProcessAndChildren()` is supported on; the current host, returns False otherwise.; `<error message>` is an empty string if `<supported>` is True,; otherwise is contains a string describing why the function is; not supported.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:176,Availability,error,error,176,"""""""; Returns a tuple (<supported> , <error message>); where; `<supported>` is True if `killProcessAndChildren()` is supported on; the current host, returns False otherwise.; `<error message>` is an empty string if `<supported>` is True,; otherwise is contains a string describing why the function is; not supported.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:43,Integrability,message,message,43,"""""""; Returns a tuple (<supported> , <error message>); where; `<supported>` is True if `killProcessAndChildren()` is supported on; the current host, returns False otherwise.; `<error message>` is an empty string if `<supported>` is True,; otherwise is contains a string describing why the function is; not supported.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:182,Integrability,message,message,182,"""""""; Returns a tuple (<supported> , <error message>); where; `<supported>` is True if `killProcessAndChildren()` is supported on; the current host, returns False otherwise.; `<error message>` is an empty string if `<supported>` is True,; otherwise is contains a string describing why the function is; not supported.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:302,Integrability,depend,dependency,302,"""""""This function kills a process with ``pid`` and all its running children; (recursively). It is currently implemented using the psutil module on some; platforms which provides a simple platform neutral implementation. TODO: Reimplement this without using psutil on all platforms so we can; remove our dependency on it. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py:179,Usability,simpl,simple,179,"""""""This function kills a process with ``pid`` and all its running children; (recursively). It is currently implemented using the psutil module on some; platforms which provides a simple platform neutral implementation. TODO: Reimplement this without using psutil on all platforms so we can; remove our dependency on it. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/util.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/util.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py:263,Energy Efficiency,reduce,reduces,263,"""""""; The functions in this module are meant to run on a separate worker process.; Exception: in single process mode _execute is called directly. For efficiency, we copy all data needed to execute all tests into each worker; and store it in global variables. This reduces the cost of each task.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/worker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py:247,Modifiability,variab,variables,247,"""""""; The functions in this module are meant to run on a separate worker process.; Exception: in single process mode _execute is called directly. For efficiency, we copy all data needed to execute all tests into each worker; and store it in global variables. This reduces the cost of each task.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/worker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py:200,Testability,test,tests,200,"""""""; The functions in this module are meant to run on a separate worker process.; Exception: in single process mode _execute is called directly. For efficiency, we copy all data needed to execute all tests into each worker; and store it in global variables. This reduces the cost of each task.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/worker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py:27,Testability,test,test,27,"""""""Copy data shared by all test executions into worker processes""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/worker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py:11,Testability,test,test,11,"""""""Run one test in a multiprocessing.Pool. Side effects in this function and functions it calls are not visible in the; main lit process. Arguments and results of this function are pickled, so they should be cheap; to copy.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/worker.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/worker.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/__init__.py:9,Testability,Test,Testing,9,"""""""'lit' Testing Tool""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/__init__.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/__init__.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:396,Modifiability,config,configs,396,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:345,Performance,perform,perform,345,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:25,Testability,test,test,25,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:37,Testability,test,test,37,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:67,Testability,test,tests,67,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:130,Testability,test,tests,130,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:155,Testability,test,testing,155,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:209,Testability,test,test,209,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:238,Testability,test,tests,238,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:353,Testability,test,test,353,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:420,Testability,test,tests,420,"""""""; Given the path to a test in the test suite, generates the Lit tests associated; to that path. There can be zero, one or more tests. For example, some testing; formats allow expanding a single path in the test suite into multiple Lit tests; (e.g. they are generated on the fly). Note that this method is only used when Lit needs to actually perform test; discovery, which is not the case for configs with standalone tests.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:148,Deployability,configurat,configuration,148,"""""""; Expand each path in a test suite to a Lit test using that path and assuming; it is a file containing the test. File extensions excluded by the configuration; or not contained in the allowed extensions are ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:148,Modifiability,config,configuration,148,"""""""; Expand each path in a test suite to a Lit test using that path and assuming; it is a file containing the test. File extensions excluded by the configuration; or not contained in the allowed extensions are ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:27,Testability,test,test,27,"""""""; Expand each path in a test suite to a Lit test using that path and assuming; it is a file containing the test. File extensions excluded by the configuration; or not contained in the allowed extensions are ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:47,Testability,test,test,47,"""""""; Expand each path in a test suite to a Lit test using that path and assuming; it is a file containing the test. File extensions excluded by the configuration; or not contained in the allowed extensions are ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:110,Testability,test,test,110,"""""""; Expand each path in a test suite to a Lit test using that path and assuming; it is a file containing the test. File extensions excluded by the configuration; or not contained in the allowed extensions are ignored.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:32,Testability,test,tests,32,# Ignore dot files and excluded tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py:28,Usability,simpl,simple,28,###; # Check exit code of a simple executable with no input,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/base.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:21,Testability,test,tests,21,"# On Windows, assume tests will also end in '.exe'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:31,Testability,test,testing,31,# Also check for .py files for testing purposes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:12,Testability,test,tests,12,# number of tests in a shard,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:15,Testability,test,tests,15,# Discover the tests in this executable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:17,Testability,test,test,17,# Create one lit test for each shard.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:268,Availability,failure,failures,268,"# This doesn't look like a valid gtest file. This can; # have a number of causes, none of them good. For; # instance, we could have created a broken executable.; # Alternatively, someone has cruft in their test; # directory. If we don't return a test here, then no; # failures will get reported, so return a dummy test name; # so that the failure is reported later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:339,Availability,failure,failure,339,"# This doesn't look like a valid gtest file. This can; # have a number of causes, none of them good. For; # instance, we could have created a broken executable.; # Alternatively, someone has cruft in their test; # directory. If we don't return a test here, then no; # failures will get reported, so return a dummy test name; # so that the failure is reported later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:206,Testability,test,test,206,"# This doesn't look like a valid gtest file. This can; # have a number of causes, none of them good. For; # instance, we could have created a broken executable.; # Alternatively, someone has cruft in their test; # directory. If we don't return a test here, then no; # failures will get reported, so return a dummy test name; # so that the failure is reported later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:246,Testability,test,test,246,"# This doesn't look like a valid gtest file. This can; # have a number of causes, none of them good. For; # instance, we could have created a broken executable.; # Alternatively, someone has cruft in their test; # directory. If we don't return a test here, then no; # failures will get reported, so return a dummy test name; # so that the failure is reported later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:314,Testability,test,test,314,"# This doesn't look like a valid gtest file. This can; # have a number of causes, none of them good. For; # instance, we could have created a broken executable.; # Alternatively, someone has cruft in their test; # directory. If we don't return a test here, then no; # failures will get reported, so return a dummy test name; # so that the failure is reported later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:15,Modifiability,parameteriz,parameterized,15,"# Handle GTest parameterized and typed tests, whose name includes; # some '/'s.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:39,Testability,test,tests,39,"# Handle GTest parameterized and typed tests, whose name includes; # some '/'s.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:46,Security,sanitiz,sanitizers,46,"# In some situations, like running tests with sanitizers, all test passes but; # the shard could still fail due to memory issues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:35,Testability,test,tests,35,"# In some situations, like running tests with sanitizers, all test passes but; # the shard could still fail due to memory issues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:62,Testability,test,test,62,"# In some situations, like running tests with sanitizers, all test passes but; # the shard could still fail due to memory issues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:2,Performance,Load,Load,2,# Load json file to retrieve results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py:18,Testability,test,tests,18,# Ignore disabled tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/googletest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py:235,Deployability,pipeline,pipelines,235,"""""""ShTest is a format with one file per test. This is the primary format for regression tests as described in the LLVM; testing guide:. http://llvm.org/docs/TestingGuide.html. The ShTest files contain some number of shell-like command pipelines, along; with assertions about what should be in the output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py:40,Testability,test,test,40,"""""""ShTest is a format with one file per test. This is the primary format for regression tests as described in the LLVM; testing guide:. http://llvm.org/docs/TestingGuide.html. The ShTest files contain some number of shell-like command pipelines, along; with assertions about what should be in the output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py:88,Testability,test,tests,88,"""""""ShTest is a format with one file per test. This is the primary format for regression tests as described in the LLVM; testing guide:. http://llvm.org/docs/TestingGuide.html. The ShTest files contain some number of shell-like command pipelines, along; with assertions about what should be in the output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py:120,Testability,test,testing,120,"""""""ShTest is a format with one file per test. This is the primary format for regression tests as described in the LLVM; testing guide:. http://llvm.org/docs/TestingGuide.html. The ShTest files contain some number of shell-like command pipelines, along; with assertions about what should be in the output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py:157,Testability,Test,TestingGuide,157,"""""""ShTest is a format with one file per test. This is the primary format for regression tests as described in the LLVM; testing guide:. http://llvm.org/docs/TestingGuide.html. The ShTest files contain some number of shell-like command pipelines, along; with assertions about what should be in the output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py:258,Testability,assert,assertions,258,"""""""ShTest is a format with one file per test. This is the primary format for regression tests as described in the LLVM; testing guide:. http://llvm.org/docs/TestingGuide.html. The ShTest files contain some number of shell-like command pipelines, along; with assertions about what should be in the output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py:128,Usability,guid,guide,128,"""""""ShTest is a format with one file per test. This is the primary format for regression tests as described in the LLVM; testing guide:. http://llvm.org/docs/TestingGuide.html. The ShTest files contain some number of shell-like command pipelines, along; with assertions about what should be in the output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/formats/shtest.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:21,Availability,avail,available,21,# os.getuid() is not available on all platforms,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:51,Modifiability,variab,variables,51,# Many tools behave strangely if these environment variables aren't; # set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:38,Deployability,pipeline,pipeline,38,"# Choose between lit's internal shell pipeline runner and a real shell.; # If LIT_USE_INTERNAL_SHELL is in the environment, we use that as an; # override.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:6,Testability,test,tests,6,# For tests that require Windows to run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:112,Modifiability,config,config,112,# Native compilation: host arch == default triple arch; # Both of these values should probably be in every site config (e.g. as; # part of the standard header. But currently they aren't),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:2,Security,Sanitiz,Sanitizers,2,# Sanitizers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:38,Testability,test,tests,38,# Check if we should run long running tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:11,Modifiability,config,config,11,# Ask llvm-config about the specified feature.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:180,Availability,error,error,180,"# Python's strerror may not supply the same message; # as C++ std::error_code. One example of such a platform is; # Visual Studio. errc_messages may be supplied which contains the error; # messages for ENOENT, EISDIR, EINVAL and EACCES as a semi colon; # separated string. LLVM testsuites can use get_errc_messages in cmake; # to automatically get the messages and pass them into lit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:44,Integrability,message,message,44,"# Python's strerror may not supply the same message; # as C++ std::error_code. One example of such a platform is; # Visual Studio. errc_messages may be supplied which contains the error; # messages for ENOENT, EISDIR, EINVAL and EACCES as a semi colon; # separated string. LLVM testsuites can use get_errc_messages in cmake; # to automatically get the messages and pass them into lit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:189,Integrability,message,messages,189,"# Python's strerror may not supply the same message; # as C++ std::error_code. One example of such a platform is; # Visual Studio. errc_messages may be supplied which contains the error; # messages for ENOENT, EISDIR, EINVAL and EACCES as a semi colon; # separated string. LLVM testsuites can use get_errc_messages in cmake; # to automatically get the messages and pass them into lit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:352,Integrability,message,messages,352,"# Python's strerror may not supply the same message; # as C++ std::error_code. One example of such a platform is; # Visual Studio. errc_messages may be supplied which contains the error; # messages for ENOENT, EISDIR, EINVAL and EACCES as a semi colon; # separated string. LLVM testsuites can use get_errc_messages in cmake; # to automatically get the messages and pass them into lit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:278,Testability,test,testsuites,278,"# Python's strerror may not supply the same message; # as C++ std::error_code. One example of such a platform is; # Visual Studio. errc_messages may be supplied which contains the error; # messages for ENOENT, EISDIR, EINVAL and EACCES as a semi colon; # separated string. LLVM testsuites can use get_errc_messages in cmake; # to automatically get the messages and pass them into lit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:68,Testability,test,testing,68,# Handle these specially as they are strings searched for during; # testing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:169,Deployability,configurat,configuration,169,"""""""Find the executable program 'name', optionally using the specified; environment variable as an override before searching the build directory; and then optionally the configuration's PATH.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:83,Modifiability,variab,variable,83,"""""""Find the executable program 'name', optionally using the specified; environment variable as an override before searching the build directory; and then optionally the configuration's PATH.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:169,Modifiability,config,configuration,169,"""""""Find the executable program 'name', optionally using the specified; environment variable as an override before searching the build directory; and then optionally the configuration's PATH.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:69,Security,validat,validation,69,"# If the override is specified in the environment, use it without; # validation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:150,Deployability,install,installed,150,"""""""Configure the test suite to be able to invoke clang. Sets up some environment variables important to clang, locates a; just-built or optionally an installed clang, and add a set of standard; substitutions useful to any test suite that makes use of clang. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:3,Modifiability,Config,Configure,3,"""""""Configure the test suite to be able to invoke clang. Sets up some environment variables important to clang, locates a; just-built or optionally an installed clang, and add a set of standard; substitutions useful to any test suite that makes use of clang. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:81,Modifiability,variab,variables,81,"""""""Configure the test suite to be able to invoke clang. Sets up some environment variables important to clang, locates a; just-built or optionally an installed clang, and add a set of standard; substitutions useful to any test suite that makes use of clang. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:17,Testability,test,test,17,"""""""Configure the test suite to be able to invoke clang. Sets up some environment variables important to clang, locates a; just-built or optionally an installed clang, and add a set of standard; substitutions useful to any test suite that makes use of clang. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:222,Testability,test,test,222,"""""""Configure the test suite to be able to invoke clang. Sets up some environment variables important to clang, locates a; just-built or optionally an installed clang, and add a set of standard; substitutions useful to any test suite that makes use of clang. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:25,Modifiability,variab,variables,25,"# Clear some environment variables that might affect Clang.; #; # This first set of vars are read by Clang, but shouldn't affect tests; # that aren't specifically looking for these features, or are required; # simply to run the tests at all.; #; # FIXME: Should we have a tool that enforces this?; # safe_env_vars = (; # 'TMPDIR', 'TEMP', 'TMP', 'USERPROFILE', 'PWD',; # 'MACOSX_DEPLOYMENT_TARGET', 'IPHONEOS_DEPLOYMENT_TARGET',; # 'VCINSTALLDIR', 'VC100COMNTOOLS', 'VC90COMNTOOLS',; # 'VC80COMNTOOLS')",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:129,Testability,test,tests,129,"# Clear some environment variables that might affect Clang.; #; # This first set of vars are read by Clang, but shouldn't affect tests; # that aren't specifically looking for these features, or are required; # simply to run the tests at all.; #; # FIXME: Should we have a tool that enforces this?; # safe_env_vars = (; # 'TMPDIR', 'TEMP', 'TMP', 'USERPROFILE', 'PWD',; # 'MACOSX_DEPLOYMENT_TARGET', 'IPHONEOS_DEPLOYMENT_TARGET',; # 'VCINSTALLDIR', 'VC100COMNTOOLS', 'VC90COMNTOOLS',; # 'VC80COMNTOOLS')",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:228,Testability,test,tests,228,"# Clear some environment variables that might affect Clang.; #; # This first set of vars are read by Clang, but shouldn't affect tests; # that aren't specifically looking for these features, or are required; # simply to run the tests at all.; #; # FIXME: Should we have a tool that enforces this?; # safe_env_vars = (; # 'TMPDIR', 'TEMP', 'TMP', 'USERPROFILE', 'PWD',; # 'MACOSX_DEPLOYMENT_TARGET', 'IPHONEOS_DEPLOYMENT_TARGET',; # 'VCINSTALLDIR', 'VC100COMNTOOLS', 'VC90COMNTOOLS',; # 'VC80COMNTOOLS')",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:2,Usability,Clear,Clear,2,"# Clear some environment variables that might affect Clang.; #; # This first set of vars are read by Clang, but shouldn't affect tests; # that aren't specifically looking for these features, or are required; # simply to run the tests at all.; #; # FIXME: Should we have a tool that enforces this?; # safe_env_vars = (; # 'TMPDIR', 'TEMP', 'TMP', 'USERPROFILE', 'PWD',; # 'MACOSX_DEPLOYMENT_TARGET', 'IPHONEOS_DEPLOYMENT_TARGET',; # 'VCINSTALLDIR', 'VC100COMNTOOLS', 'VC90COMNTOOLS',; # 'VC80COMNTOOLS')",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:210,Usability,simpl,simply,210,"# Clear some environment variables that might affect Clang.; #; # This first set of vars are read by Clang, but shouldn't affect tests; # that aren't specifically looking for these features, or are required; # simply to run the tests at all.; #; # FIXME: Should we have a tool that enforces this?; # safe_env_vars = (; # 'TMPDIR', 'TEMP', 'TMP', 'USERPROFILE', 'PWD',; # 'MACOSX_DEPLOYMENT_TARGET', 'IPHONEOS_DEPLOYMENT_TARGET',; # 'VCINSTALLDIR', 'VC100COMNTOOLS', 'VC90COMNTOOLS',; # 'VC80COMNTOOLS')",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:85,Safety,avoid,avoid,85,# Tweak the PATH to include the tools dir and the scripts dir.; # Put Clang first to avoid LLVM from overriding out-of-tree clang; # builds.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:89,Deployability,install,installed,89,"# The host triple might not be set, at least if we're compiling clang; # from an already installed llvm.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:13,Testability,test,tests,13,"# TODO: Many tests work across many language standards. Before; # https://discourse.llvm.org/t/lit-run-a-run-line-multiple-times-with-different-replacements/64932; # has a solution, provide substitutions to conveniently try every standard with LIT_CLANG_STD_GROUP.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:28,Testability,test,tests,28,"'''\""*** Do not use '%s' in tests, use '%s'. ***\""'''",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:146,Deployability,install,installed,146,"""""""Configure the test suite to be able to invoke lld. Sets up some environment variables important to lld, locates a; just-built or optionally an installed lld, and add a set of standard; substitutions useful to any test suite that makes use of lld. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:3,Modifiability,Config,Configure,3,"""""""Configure the test suite to be able to invoke lld. Sets up some environment variables important to lld, locates a; just-built or optionally an installed lld, and add a set of standard; substitutions useful to any test suite that makes use of lld. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:79,Modifiability,variab,variables,79,"""""""Configure the test suite to be able to invoke lld. Sets up some environment variables important to lld, locates a; just-built or optionally an installed lld, and add a set of standard; substitutions useful to any test suite that makes use of lld. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:17,Testability,test,test,17,"""""""Configure the test suite to be able to invoke lld. Sets up some environment variables important to lld, locates a; just-built or optionally an installed lld, and add a set of standard; substitutions useful to any test suite that makes use of lld. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py:216,Testability,test,test,216,"""""""Configure the test suite to be able to invoke lld. Sets up some environment variables important to lld, locates a; just-built or optionally an installed lld, and add a set of standard; substitutions useful to any test suite that makes use of lld. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/config.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py:993,Availability,error,error,993,"""""""Construct a ToolSubst. key: The text which is to be substituted. command: The command to substitute when the key is matched. By default,; this will treat `key` as a tool name and search for it. If it is a; string, it is interpreted as an exact path. If it is an instance of; FindTool, the specified tool name is searched for on disk. pre: If specified, the substitution will not find matches where; the character immediately preceding the word-boundary that begins; `key` is any of the characters in the string `pre`. post: If specified, the substitution will not find matches where; the character immediately after the word-boundary that ends `key`; is any of the characters specified in the string `post`. verbatim: If True, `key` is an exact regex that is passed to the; underlying substitution. unresolved: Action to take if the tool substitution cannot be; resolved. Valid values:; 'warn' - log a warning but add the substitution anyway.; 'fatal' - Exit the test suite and log a fatal error.; 'break' - Don't add any of the substitutions from the current; group, and return a value indicating a failure.; 'ignore' - Don't add the substitution, and don't log an error. extra_args: If specified, represents a list of arguments that will be; appended to the tool's substitution. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py:1103,Availability,failure,failure,1103,"""""""Construct a ToolSubst. key: The text which is to be substituted. command: The command to substitute when the key is matched. By default,; this will treat `key` as a tool name and search for it. If it is a; string, it is interpreted as an exact path. If it is an instance of; FindTool, the specified tool name is searched for on disk. pre: If specified, the substitution will not find matches where; the character immediately preceding the word-boundary that begins; `key` is any of the characters in the string `pre`. post: If specified, the substitution will not find matches where; the character immediately after the word-boundary that ends `key`; is any of the characters specified in the string `post`. verbatim: If True, `key` is an exact regex that is passed to the; underlying substitution. unresolved: Action to take if the tool substitution cannot be; resolved. Valid values:; 'warn' - log a warning but add the substitution anyway.; 'fatal' - Exit the test suite and log a fatal error.; 'break' - Don't add any of the substitutions from the current; group, and return a value indicating a failure.; 'ignore' - Don't add the substitution, and don't log an error. extra_args: If specified, represents a list of arguments that will be; appended to the tool's substitution. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py:1169,Availability,error,error,1169,"""""""Construct a ToolSubst. key: The text which is to be substituted. command: The command to substitute when the key is matched. By default,; this will treat `key` as a tool name and search for it. If it is a; string, it is interpreted as an exact path. If it is an instance of; FindTool, the specified tool name is searched for on disk. pre: If specified, the substitution will not find matches where; the character immediately preceding the word-boundary that begins; `key` is any of the characters in the string `pre`. post: If specified, the substitution will not find matches where; the character immediately after the word-boundary that ends `key`; is any of the characters specified in the string `post`. verbatim: If True, `key` is an exact regex that is passed to the; underlying substitution. unresolved: Action to take if the tool substitution cannot be; resolved. Valid values:; 'warn' - log a warning but add the substitution anyway.; 'fatal' - Exit the test suite and log a fatal error.; 'break' - Don't add any of the substitutions from the current; group, and return a value indicating a failure.; 'ignore' - Don't add the substitution, and don't log an error. extra_args: If specified, represents a list of arguments that will be; appended to the tool's substitution. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py:899,Testability,log,log,899,"""""""Construct a ToolSubst. key: The text which is to be substituted. command: The command to substitute when the key is matched. By default,; this will treat `key` as a tool name and search for it. If it is a; string, it is interpreted as an exact path. If it is an instance of; FindTool, the specified tool name is searched for on disk. pre: If specified, the substitution will not find matches where; the character immediately preceding the word-boundary that begins; `key` is any of the characters in the string `pre`. post: If specified, the substitution will not find matches where; the character immediately after the word-boundary that ends `key`; is any of the characters specified in the string `post`. verbatim: If True, `key` is an exact regex that is passed to the; underlying substitution. unresolved: Action to take if the tool substitution cannot be; resolved. Valid values:; 'warn' - log a warning but add the substitution anyway.; 'fatal' - Exit the test suite and log a fatal error.; 'break' - Don't add any of the substitutions from the current; group, and return a value indicating a failure.; 'ignore' - Don't add the substitution, and don't log an error. extra_args: If specified, represents a list of arguments that will be; appended to the tool's substitution. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py:966,Testability,test,test,966,"""""""Construct a ToolSubst. key: The text which is to be substituted. command: The command to substitute when the key is matched. By default,; this will treat `key` as a tool name and search for it. If it is a; string, it is interpreted as an exact path. If it is an instance of; FindTool, the specified tool name is searched for on disk. pre: If specified, the substitution will not find matches where; the character immediately preceding the word-boundary that begins; `key` is any of the characters in the string `pre`. post: If specified, the substitution will not find matches where; the character immediately after the word-boundary that ends `key`; is any of the characters specified in the string `post`. verbatim: If True, `key` is an exact regex that is passed to the; underlying substitution. unresolved: Action to take if the tool substitution cannot be; resolved. Valid values:; 'warn' - log a warning but add the substitution anyway.; 'fatal' - Exit the test suite and log a fatal error.; 'break' - Don't add any of the substitutions from the current; group, and return a value indicating a failure.; 'ignore' - Don't add the substitution, and don't log an error. extra_args: If specified, represents a list of arguments that will be; appended to the tool's substitution. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py:981,Testability,log,log,981,"""""""Construct a ToolSubst. key: The text which is to be substituted. command: The command to substitute when the key is matched. By default,; this will treat `key` as a tool name and search for it. If it is a; string, it is interpreted as an exact path. If it is an instance of; FindTool, the specified tool name is searched for on disk. pre: If specified, the substitution will not find matches where; the character immediately preceding the word-boundary that begins; `key` is any of the characters in the string `pre`. post: If specified, the substitution will not find matches where; the character immediately after the word-boundary that ends `key`; is any of the characters specified in the string `post`. verbatim: If True, `key` is an exact regex that is passed to the; underlying substitution. unresolved: Action to take if the tool substitution cannot be; resolved. Valid values:; 'warn' - log a warning but add the substitution anyway.; 'fatal' - Exit the test suite and log a fatal error.; 'break' - Don't add any of the substitutions from the current; group, and return a value indicating a failure.; 'ignore' - Don't add the substitution, and don't log an error. extra_args: If specified, represents a list of arguments that will be; appended to the tool's substitution. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py:1162,Testability,log,log,1162,"""""""Construct a ToolSubst. key: The text which is to be substituted. command: The command to substitute when the key is matched. By default,; this will treat `key` as a tool name and search for it. If it is a; string, it is interpreted as an exact path. If it is an instance of; FindTool, the specified tool name is searched for on disk. pre: If specified, the substitution will not find matches where; the character immediately preceding the word-boundary that begins; `key` is any of the characters in the string `pre`. post: If specified, the substitution will not find matches where; the character immediately after the word-boundary that ends `key`; is any of the characters specified in the string `post`. verbatim: If True, `key` is an exact regex that is passed to the; underlying substitution. unresolved: Action to take if the tool substitution cannot be; resolved. Valid values:; 'warn' - log a warning but add the substitution anyway.; 'fatal' - Exit the test suite and log a fatal error.; 'break' - Don't add any of the substitutions from the current; group, and return a value indicating a failure.; 'ignore' - Don't add the substitution, and don't log an error. extra_args: If specified, represents a list of arguments that will be; appended to the tool's substitution. """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py:84,Availability,failure,failure,84,"# By returning a valid result with an empty command, the; # caller treats this as a failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/lit/lit/llvm/subst.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py:66,Availability,avail,availability,66,# Only if we are processing all the variables output the total; # availability.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py:36,Modifiability,variab,variables,36,# Only if we are processing all the variables output the total; # availability.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py:15,Availability,error,errors,15,# TODO: Handle errors that are coming from llvm-dwarfdump.; # Get the JSON and parse it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py:31,Modifiability,variab,variables,31,# Read the JSON only for local variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py:31,Modifiability,variab,variables,31,# Read the JSON for both local variables and formal parameters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/llvm-locstats/llvm-locstats.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py:249,Performance,perform,performed,249,"""""""Extract IR for training. Extract IR for training, either from a compile_commands.json file produced by; cmake, or a linker parameter list file. Only run with; 'python compiler_opt/tools/extract_ir.py ...'. The compilation is assumed to have been performed with clang, using; -fembed-bitcode=all passed to cc1 (i.e. pass clang -Xclang=-fembed-bitcode=all). In a distributed ThinLTO case, the compilation is assumed to have been performed; specifying -mllvm -lto-embed-bitcode=post-merge-pre-opt. In a local ThinLTO case, the compilation is assumedto have been performed; specifying -Wl,--save-temps=import -Wl,--thinlto-emit-index-files. To change the logging verbosity, pass an integer representing the desired; verbosity to the --verbosity flag. Use 0 for all logs, status information,; and detailed debug information, -1 for solely warnings, and -2 to not produce; any output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py:430,Performance,perform,performed,430,"""""""Extract IR for training. Extract IR for training, either from a compile_commands.json file produced by; cmake, or a linker parameter list file. Only run with; 'python compiler_opt/tools/extract_ir.py ...'. The compilation is assumed to have been performed with clang, using; -fembed-bitcode=all passed to cc1 (i.e. pass clang -Xclang=-fembed-bitcode=all). In a distributed ThinLTO case, the compilation is assumed to have been performed; specifying -mllvm -lto-embed-bitcode=post-merge-pre-opt. In a local ThinLTO case, the compilation is assumedto have been performed; specifying -Wl,--save-temps=import -Wl,--thinlto-emit-index-files. To change the logging verbosity, pass an integer representing the desired; verbosity to the --verbosity flag. Use 0 for all logs, status information,; and detailed debug information, -1 for solely warnings, and -2 to not produce; any output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py:562,Performance,perform,performed,562,"""""""Extract IR for training. Extract IR for training, either from a compile_commands.json file produced by; cmake, or a linker parameter list file. Only run with; 'python compiler_opt/tools/extract_ir.py ...'. The compilation is assumed to have been performed with clang, using; -fembed-bitcode=all passed to cc1 (i.e. pass clang -Xclang=-fembed-bitcode=all). In a distributed ThinLTO case, the compilation is assumed to have been performed; specifying -mllvm -lto-embed-bitcode=post-merge-pre-opt. In a local ThinLTO case, the compilation is assumedto have been performed; specifying -Wl,--save-temps=import -Wl,--thinlto-emit-index-files. To change the logging verbosity, pass an integer representing the desired; verbosity to the --verbosity flag. Use 0 for all logs, status information,; and detailed debug information, -1 for solely warnings, and -2 to not produce; any output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py:654,Testability,log,logging,654,"""""""Extract IR for training. Extract IR for training, either from a compile_commands.json file produced by; cmake, or a linker parameter list file. Only run with; 'python compiler_opt/tools/extract_ir.py ...'. The compilation is assumed to have been performed with clang, using; -fembed-bitcode=all passed to cc1 (i.e. pass clang -Xclang=-fembed-bitcode=all). In a distributed ThinLTO case, the compilation is assumed to have been performed; specifying -mllvm -lto-embed-bitcode=post-merge-pre-opt. In a local ThinLTO case, the compilation is assumedto have been performed; specifying -Wl,--save-temps=import -Wl,--thinlto-emit-index-files. To change the logging verbosity, pass an integer representing the desired; verbosity to the --verbosity flag. Use 0 for all logs, status information,; and detailed debug information, -1 for solely warnings, and -2 to not produce; any output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py:764,Testability,log,logs,764,"""""""Extract IR for training. Extract IR for training, either from a compile_commands.json file produced by; cmake, or a linker parameter list file. Only run with; 'python compiler_opt/tools/extract_ir.py ...'. The compilation is assumed to have been performed with clang, using; -fembed-bitcode=all passed to cc1 (i.e. pass clang -Xclang=-fembed-bitcode=all). In a distributed ThinLTO case, the compilation is assumed to have been performed; specifying -mllvm -lto-embed-bitcode=post-merge-pre-opt. In a local ThinLTO case, the compilation is assumedto have been performed; specifying -Wl,--save-temps=import -Wl,--thinlto-emit-index-files. To change the logging verbosity, pass an integer representing the desired; verbosity to the --verbosity flag. Use 0 for all logs, status information,; and detailed debug information, -1 for solely warnings, and -2 to not produce; any output.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir_lib.py:417,Performance,perform,performed,417,"""""""Extracts all specified object files into the corpus directory. Args:; objs: A list of TrainingIRExtractor Objects that represent the object files; to extract bitcode/commands from.; num_workers: The number of parallel processes to spawn to run the; extraction.; llvm_objcopy_path: The path to the llvm-objcopy to use for dumping sections.; cmd_filter: A regular expression that is used to select for compilations; performed with specific flags. If you want to include all compilations,; set this to None.; thinlto_build: Whether or not this is a ThinLTO build, and if so, the type.; Set this to None if the build was not done with ThinLTO.; cmd_section_name: The name of the command line section created by the; bitcode embedding.; bitcode_section_name: The name of the bitcode section created by the; bitcode embedding.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir_lib.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir_lib.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir_lib.py:230,Performance,perform,performed,230,"""""""Writes a corpus_manifest.json containing all necessary information about; the corpus. Args:; thinlto_build: Whether or not the build was done with ThinLTO and if so,; what kind of ThinLTO. Set this to none if the build was not performed with; ThinLTO.; relative_output_paths: The relative (to the corpus directory) output paths; of all the bitcode files that should be placed in the corpus manifest; output_dir: The corpus directory where the corpus manifest should be; placed.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir_lib.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/extract_ir_lib.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/make_corpus_lib.py:349,Availability,down,downstream,349,"""""""Creates a corpus manifest describing the bitcode that has been found. Args:; relative_output_paths: A list of paths to each bitcode file relative to the; output directory.; outout_dir: The output directory where the corpus is being created.; default_args: An array of compiler flags that should be used to compile; the bitcode when using further downstream tooling.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/make_corpus_lib.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/mlgo/corpus/make_corpus_lib.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/not/not.cpp:27,Testability,test,testing,27,"//===- not.cpp - The 'not' testing tool -----------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // Usage:; // not cmd; // Will return true if cmd doesn't crash and returns false.; // not --crash cmd; // Will return true if cmd crashes (e.g. for testing crash reporting).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/not/not.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/not/not.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/not/not.cpp:525,Testability,test,testing,525,"//===- not.cpp - The 'not' testing tool -----------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // Usage:; // not cmd; // Will return true if cmd doesn't crash and returns false.; // not --crash cmd; // Will return true if cmd crashes (e.g. for testing crash reporting).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/not/not.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/not/not.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/not/not.cpp:67,Energy Efficiency,reduce,reduce,67,"// Crash is expected, so disable crash report and symbolization to reduce; // output and avoid potentially slow symbolization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/not/not.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/not/not.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/not/not.cpp:89,Safety,avoid,avoid,89,"// Crash is expected, so disable crash report and symbolization to reduce; // output and avoid potentially slow symbolization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/not/not.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/not/not.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/not/not.cpp:173,Availability,failure,failure,173,"// Handle abort() in msvcrt -- It has exit code as 3. abort(), aka; // unreachable, should be recognized as a crash. However, some binaries use; // exit code 3 on non-crash failure paths, so only do this if we expect a; // crash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/not/not.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/not/not.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/not/not.cpp:10,Safety,abort,abort,10,"// Handle abort() in msvcrt -- It has exit code as 3. abort(), aka; // unreachable, should be recognized as a crash. However, some binaries use; // exit code 3 on non-crash failure paths, so only do this if we expect a; // crash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/not/not.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/not/not.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/not/not.cpp:54,Safety,abort,abort,54,"// Handle abort() in msvcrt -- It has exit code as 3. abort(), aka; // unreachable, should be recognized as a crash. However, some binaries use; // exit code 3 on non-crash failure paths, so only do this if we expect a; // crash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/not/not.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/not/not.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp:498,Deployability,release,release,498,"//===-- PerfectShuffle.cpp - Perfect Shuffle Generator --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file computes an optimal sequence of instructions for doing all shuffles; // of two 4-element vectors. With a release build and when configured to emit; // an altivec instruction table, this takes about 30s to run on a 2.7Ghz; // PowerPC G5.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp:618,Energy Efficiency,Power,PowerPC,618,"//===-- PerfectShuffle.cpp - Perfect Shuffle Generator --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file computes an optimal sequence of instructions for doing all shuffles; // of two 4-element vectors. With a release build and when configured to emit; // an altivec instruction table, this takes about 30s to run on a 2.7Ghz; // PowerPC G5.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp:521,Modifiability,config,configured,521,"//===-- PerfectShuffle.cpp - Perfect Shuffle Generator --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file computes an optimal sequence of instructions for doing all shuffles; // of two 4-element vectors. With a release build and when configured to emit; // an altivec instruction table, this takes about 30s to run on a 2.7Ghz; // PowerPC G5.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp:3,Availability,Mask,Masks,3,// Masks are 4-nibble hex numbers. Values 0-7 in any nibble means that it takes; // an element from that value of the input vectors. A value of 8 means the; // entry is undefined.; // Mask manipulation functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp:184,Availability,Mask,Mask,184,// Masks are 4-nibble hex numbers. Values 0-7 in any nibble means that it takes; // an element from that value of the input vectors. A value of 8 means the; // entry is undefined.; // Mask manipulation functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp:51,Availability,mask,mask,51,/// getMaskElt - Return element N of the specified mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp:65,Availability,mask,mask,65,/// hasUndefElements - Return true if any of the elements in the mask are undefs; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp:40,Availability,mask,mask,40,"/// isOnlyLHSMask - Return true if this mask only refers to its LHS, not; /// including undef values..",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp:29,Availability,mask,mask,29,"/// getLHSOnlyMask - Given a mask that refers to its LHS and RHS, modify it to; /// refer to the LHS only (for when one argument value is passed into the same; /// function twice).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp:51,Availability,mask,mask,51,"/// getCompressedMask - Turn a 16-bit uncompressed mask (where each elt uses 4; /// bits) into a compressed 13-bit mask, where each elt is multiplied by 9.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp:115,Availability,mask,mask,115,"/// getCompressedMask - Turn a 16-bit uncompressed mask (where each elt uses 4; /// bits) into a compressed 13-bit mask, where each elt is multiplied by 9.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp:50,Availability,avail,available,50,/// Operator - This is a vector operation that is available for use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp:23,Security,access,accesses,23,// Seed the table with accesses to the LHS and RHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp:29,Availability,mask,mask,29,"// Similarly, if we take the mask (eg 3,6,1,0) and take the cost with; // undef for each lane (eg u,6,1,0 or 3,u,1,0 etc), we can use a single; // lane insert to fixup the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/PerfectShuffle/PerfectShuffle.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py:213,Deployability,pipeline,pipeline,213,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Fake 'opt' program that can be made to crash on request. For testing; # the 'reduce_pipeline.py' automatic 'opt' NPM pipeline reducer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py:222,Energy Efficiency,reduce,reducer,222,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Fake 'opt' program that can be made to crash on request. For testing; # the 'reduce_pipeline.py' automatic 'opt' NPM pipeline reducer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py:157,Testability,test,testing,157,#!/usr/bin/env python3; # Automatically formatted with yapf (https://github.com/google/yapf); # Fake 'opt' program that can be made to crash on request. For testing; # the 'reduce_pipeline.py' automatic 'opt' NPM pipeline reducer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py:9,Deployability,pipeline,pipeline,9,# Expand pipeline if '-print-pipeline-passes'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py:29,Deployability,pipeline,pipeline-passes,29,# Expand pipeline if '-print-pipeline-passes'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/fake_opt.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py:3,Testability,Test,Test,3,"""""""Test all passes are removed except those required to crash. Verify; that PM structure is intact.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py:3,Testability,Test,Test,3,"""""""Test all passes are removed except those required to crash. The; required passes in this case are the first and last in that order; (a bit of a corner-case for the reduction algorithm).""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py:3,Testability,Test,Test,3,"""""""Test expansion of EXPAND_a_to_f (expands into 'a,b,c,d,e,f').""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py:3,Testability,Test,Test,3,"""""""Test EXPAND_a_to_f and the '--dont-expand-passes' option.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py:3,Testability,Test,Test,3,"""""""Test that empty pass-managers get removed by default.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py:3,Testability,Test,Test,3,"""""""Test the '--dont-remove-empty-pm' option.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/reduce_pipeline_test/test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/bump-version.py:21,Usability,simpl,simple,21,"# LIT python file, a simple tuple",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/bump-version.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/bump-version.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/bump-version.py:16,Modifiability,config,config,16,# Handle libc++ config header,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/bump-version.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/bump-version.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/bump-version.py:6,Deployability,configurat,configuration,6,# Lit configuration,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/bump-version.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/bump-version.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/bump-version.py:6,Modifiability,config,configuration,6,# Lit configuration,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/bump-version.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/bump-version.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/findRegressions-nightly.py:15,Testability,test,test,15,# Check if the test passed or failed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/findRegressions-nightly.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/findRegressions-nightly.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/findRegressions-simple.py:9,Availability,ERROR,ERROR,9,"# print ""ERROR!""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/findRegressions-simple.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/findRegressions-simple.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/findRegressions-simple.py:15,Testability,test,test,15,# Check if the test passed or failed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/findRegressions-simple.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/findRegressions-simple.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:46,Deployability,release,release,46,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:418,Deployability,release,releases,418,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:805,Deployability,release,release,805,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:854,Deployability,release,release,854,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:889,Deployability,release,release,889,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:939,Deployability,release,release,939,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:966,Deployability,release,release,966,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:1001,Deployability,release,release,1001,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:1158,Deployability,release,release,1158,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:1193,Deployability,release,release,1193,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:577,Security,access,access,577,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:752,Security,access,access-token-for-the-command-line,752,"#!/usr/bin/env python3; # ===-- github-upload-release.py ------------------------------------------===#; #; # Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; # See https://llvm.org/LICENSE.txt for license information.; # SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; #; # ===------------------------------------------------------------------------===#; #; # Create and manage releases in the llvm github project.; #; # This script requires python3 and the PyGithub module.; #; # Example Usage:; #; # You will need to obtain a personal access token for your github account in; # order to use this script. Instructions for doing this can be found here:; # https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line; #; # Create a new release from an existing tag:; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 create; #; # Upload files for a release; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files llvm-8.0.1rc4.src.tar.xz; #; # You can upload as many files as you want at a time and use wildcards e.g.; # ./github-upload-release.py --token $github_token --release 8.0.1-rc4 upload --files *.src.*; # ===------------------------------------------------------------------------===#",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:193,Availability,avail,available,193,"""""""\; LLVM {} Release. # A note on binaries. Volunteers make binaries for the LLVM project, which will be uploaded; when they have had time to test and build these binaries. They might; not be available directly or not at all for each release. We suggest; you use the binaries from your distribution or build your own if you; rely on a specific platform or configuration.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:14,Deployability,Release,Release,14,"""""""\; LLVM {} Release. # A note on binaries. Volunteers make binaries for the LLVM project, which will be uploaded; when they have had time to test and build these binaries. They might; not be available directly or not at all for each release. We suggest; you use the binaries from your distribution or build your own if you; rely on a specific platform or configuration.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:235,Deployability,release,release,235,"""""""\; LLVM {} Release. # A note on binaries. Volunteers make binaries for the LLVM project, which will be uploaded; when they have had time to test and build these binaries. They might; not be available directly or not at all for each release. We suggest; you use the binaries from your distribution or build your own if you; rely on a specific platform or configuration.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:357,Deployability,configurat,configuration,357,"""""""\; LLVM {} Release. # A note on binaries. Volunteers make binaries for the LLVM project, which will be uploaded; when they have had time to test and build these binaries. They might; not be available directly or not at all for each release. We suggest; you use the binaries from your distribution or build your own if you; rely on a specific platform or configuration.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:357,Modifiability,config,configuration,357,"""""""\; LLVM {} Release. # A note on binaries. Volunteers make binaries for the LLVM project, which will be uploaded; when they have had time to test and build these binaries. They might; not be available directly or not at all for each release. We suggest; you use the binaries from your distribution or build your own if you; rely on a specific platform or configuration.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:143,Testability,test,test,143,"""""""\; LLVM {} Release. # A note on binaries. Volunteers make binaries for the LLVM project, which will be uploaded; when they have had time to test and build these binaries. They might; not be available directly or not at all for each release. We suggest; you use the binaries from your distribution or build your own if you; rely on a specific platform or configuration.""""""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:47,Deployability,release,releases,47,# Validate that this user is allowed to modify releases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py:2,Security,Validat,Validate,2,# Validate that this user is allowed to modify releases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/release/github-upload-release.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/release/github-upload-release.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:152,Deployability,install,install,152,# Setting up a virtualenv to run this script can be done by running the; # following commands:; # $ virtualenv venv; # $ . ./venv/bin/activate; # $ pip install Phabricator,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:56,Integrability,interoperab,interoperability,56,"""""""; FIXME: consider if serializing to JSON would bring interoperability; advantages over serializing to pickle.; """"""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:49,Deployability,patch,patch,49,# line is a new line that got introduced in this patch.; # Do not record it as a changed line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:37,Performance,cache,cache,37,# We did fetch all records. Mark the cache to contain all info since; # the start of time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:142,Testability,log,logic,142,"# All of the above code is about fetching data from Phabricator and caching it; # on local disk. The below code contains the actual ""business logic"" for this; # script.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:296,Deployability,patch,patch,296,"# FIXME: the blame cache could probably be made more effective still if; # instead of storing the requested base_revision in the cache, the last; # revision before the base revision this file/path got changed in gets; # stored. That way multiple project revisions for which this specific; # file/patch hasn't changed would get cache hits (instead of misses in; # the current implementation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:19,Performance,cache,cache,19,"# FIXME: the blame cache could probably be made more effective still if; # instead of storing the requested base_revision in the cache, the last; # revision before the base revision this file/path got changed in gets; # stored. That way multiple project revisions for which this specific; # file/patch hasn't changed would get cache hits (instead of misses in; # the current implementation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:129,Performance,cache,cache,129,"# FIXME: the blame cache could probably be made more effective still if; # instead of storing the requested base_revision in the cache, the last; # revision before the base revision this file/path got changed in gets; # stored. That way multiple project revisions for which this specific; # file/patch hasn't changed would get cache hits (instead of misses in; # the current implementation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:327,Performance,cache,cache,327,"# FIXME: the blame cache could probably be made more effective still if; # instead of storing the requested base_revision in the cache, the last; # revision before the base revision this file/path got changed in gets; # stored. That way multiple project revisions for which this specific; # file/patch hasn't changed would get cache hits (instead of misses in; # the current implementation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:96,Deployability,patch,patch,96,# Heuristic 1: assume good reviewers are the ones that touched the same; # lines before as this patch is touching.; # Heuristic 2: assume good reviewers are the ones that touched the same; # files before as this patch is touching.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:212,Deployability,patch,patch,212,# Heuristic 1: assume good reviewers are the ones that touched the same; # lines before as this patch is touching.; # Heuristic 2: assume good reviewers are the ones that touched the same; # files before as this patch is touching.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py:42,Deployability,patch,patch,42,# Compute heuristic 1: look at context of patch lines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/Reviewing/find_interesting_reviews.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py:2,Testability,Test,Test,2,# Test that an empty rsp file fails.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py:2,Testability,Test,Test,2,# Test that an rsp file without any paths fails.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py:2,Testability,Test,Test,2,# Test that an rsp file with one path succeeds.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py:2,Testability,Test,Test,2,# Test that an rsp file with one path and one extra arg succeeds.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py:2,Testability,Test,Test,2,# Test that an rsp file with three paths and one extra arg succeeds.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/rsp_bisect_test/test.py
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:1795,Availability,avail,available,1795,"ist of literal tokens and; // operands. The target specific parser should generally eliminate any syntax; // which is not relevant for matching; for example, comma tokens should have; // already been consumed and eliminated by the parser. Most instructions will; // end up with a single literal token (the instruction name) and some number of; // operands.; //; // Some example inputs, for X86:; // 'addl' (immediate ...) (register ...); // 'add' (immediate ...) (memory ...); // 'call' '*' %epc; //; // The assembly matcher is responsible for converting this input into a precise; // machine instruction (i.e., an instruction with a well defined encoding). This; // mapping has several properties which complicate matching:; //; // - It may be ambiguous; many architectures can legally encode particular; // variants of an instruction in different ways (for example, using a smaller; // encoding for small immediates). Such ambiguities should never be; // arbitrarily resolved by the assembler, the assembler is always responsible; // for choosing the ""best"" available instruction.; //; // - It may depend on the subtarget or the assembler context. Instructions; // which are invalid for the current mode, but otherwise unambiguous (e.g.,; // an SSE instruction in a file being assembled for i486) should be accepted; // and rejected by the assembler front end. However, if the proper encoding; // for an instruction is dependent on the assembler context then the matcher; // is responsible for selecting the correct machine instruction for the; // current mode.; //; // The core matching algorithm attempts to exploit the regularity in most; // instruction sets to quickly determine the set of possibly matching; // instructions, and the simplify the generated code. Additionally, this helps; // to ensure that the ambiguities are intentionally resolved by the user.; //; // The matching is divided into two distinct phases:; //; // 1. Classification: Each operand is mapped to the unique set which ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:4239,Availability,mask,mask,4239,"utomatically. For; // arbitrary operands, we expect the user to define the classes and their; // relations to one another (for example, 8-bit signed immediates as a; // subset of 32-bit immediates).; //; // By partitioning the operands in this way, we guarantee that for any; // tuple of classes, any single instruction must match either all or none; // of the sets of operands which could classify to that tuple.; //; // In addition, the subset relation amongst classes induces a partial order; // on such tuples, which we use to resolve ambiguities.; //; // 2. The input can now be treated as a tuple of classes (static tokens are; // simple singleton sets). Each such tuple should generally map to a single; // instruction (we currently ignore cases where this isn't true, whee!!!),; // which we can emit a simple matcher for.; //; // Custom Operand Parsing; // ----------------------; //; // Some targets need a custom way to parse operands, some specific instructions; // can contain arguments that can represent processor flags and other kinds of; // identifiers that need to be mapped to specific values in the final encoded; // instructions. The target specific custom operand parsing works in the; // following way:; //; // 1. A operand match table is built, each entry contains a mnemonic, an; // operand class, a mask for all operand positions for that same; // class/mnemonic and target features to be checked while trying to match.; //; // 2. The operand matcher will try every possible entry with the same; // mnemonic and will check if the target feature for this mnemonic also; // matches. After that, if the operand to be matched has its index; // present in the mask, a successful match occurs. Otherwise, fallback; // to the regular operand parsing.; //; // 3. For a match success, each operand class that has a 'ParserMethod'; // becomes part of a switch from where the custom method is called.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:4595,Availability,mask,mask,4595,"utomatically. For; // arbitrary operands, we expect the user to define the classes and their; // relations to one another (for example, 8-bit signed immediates as a; // subset of 32-bit immediates).; //; // By partitioning the operands in this way, we guarantee that for any; // tuple of classes, any single instruction must match either all or none; // of the sets of operands which could classify to that tuple.; //; // In addition, the subset relation amongst classes induces a partial order; // on such tuples, which we use to resolve ambiguities.; //; // 2. The input can now be treated as a tuple of classes (static tokens are; // simple singleton sets). Each such tuple should generally map to a single; // instruction (we currently ignore cases where this isn't true, whee!!!),; // which we can emit a simple matcher for.; //; // Custom Operand Parsing; // ----------------------; //; // Some targets need a custom way to parse operands, some specific instructions; // can contain arguments that can represent processor flags and other kinds of; // identifiers that need to be mapped to specific values in the final encoded; // instructions. The target specific custom operand parsing works in the; // following way:; //; // 1. A operand match table is built, each entry contains a mnemonic, an; // operand class, a mask for all operand positions for that same; // class/mnemonic and target features to be checked while trying to match.; //; // 2. The operand matcher will try every possible entry with the same; // mnemonic and will check if the target feature for this mnemonic also; // matches. After that, if the operand to be matched has its index; // present in the mask, a successful match occurs. Otherwise, fallback; // to the regular operand parsing.; //; // 3. For a match success, each operand class that has a 'ParserMethod'; // becomes part of a switch from where the custom method is called.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:1835,Integrability,depend,depend,1835,"is not relevant for matching; for example, comma tokens should have; // already been consumed and eliminated by the parser. Most instructions will; // end up with a single literal token (the instruction name) and some number of; // operands.; //; // Some example inputs, for X86:; // 'addl' (immediate ...) (register ...); // 'add' (immediate ...) (memory ...); // 'call' '*' %epc; //; // The assembly matcher is responsible for converting this input into a precise; // machine instruction (i.e., an instruction with a well defined encoding). This; // mapping has several properties which complicate matching:; //; // - It may be ambiguous; many architectures can legally encode particular; // variants of an instruction in different ways (for example, using a smaller; // encoding for small immediates). Such ambiguities should never be; // arbitrarily resolved by the assembler, the assembler is always responsible; // for choosing the ""best"" available instruction.; //; // - It may depend on the subtarget or the assembler context. Instructions; // which are invalid for the current mode, but otherwise unambiguous (e.g.,; // an SSE instruction in a file being assembled for i486) should be accepted; // and rejected by the assembler front end. However, if the proper encoding; // for an instruction is dependent on the assembler context then the matcher; // is responsible for selecting the correct machine instruction for the; // current mode.; //; // The core matching algorithm attempts to exploit the regularity in most; // instruction sets to quickly determine the set of possibly matching; // instructions, and the simplify the generated code. Additionally, this helps; // to ensure that the ambiguities are intentionally resolved by the user.; //; // The matching is divided into two distinct phases:; //; // 1. Classification: Each operand is mapped to the unique set which (a); // contains it, and (b) is the largest such subset for which a single; // instruction could match all members.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:2156,Integrability,depend,dependent,2156," (memory ...); // 'call' '*' %epc; //; // The assembly matcher is responsible for converting this input into a precise; // machine instruction (i.e., an instruction with a well defined encoding). This; // mapping has several properties which complicate matching:; //; // - It may be ambiguous; many architectures can legally encode particular; // variants of an instruction in different ways (for example, using a smaller; // encoding for small immediates). Such ambiguities should never be; // arbitrarily resolved by the assembler, the assembler is always responsible; // for choosing the ""best"" available instruction.; //; // - It may depend on the subtarget or the assembler context. Instructions; // which are invalid for the current mode, but otherwise unambiguous (e.g.,; // an SSE instruction in a file being assembled for i486) should be accepted; // and rejected by the assembler front end. However, if the proper encoding; // for an instruction is dependent on the assembler context then the matcher; // is responsible for selecting the correct machine instruction for the; // current mode.; //; // The core matching algorithm attempts to exploit the regularity in most; // instruction sets to quickly determine the set of possibly matching; // instructions, and the simplify the generated code. Additionally, this helps; // to ensure that the ambiguities are intentionally resolved by the user.; //; // The matching is divided into two distinct phases:; //; // 1. Classification: Each operand is mapped to the unique set which (a); // contains it, and (b) is the largest such subset for which a single; // instruction could match all members.; //; // For register classes, we can generate these subgroups automatically. For; // arbitrary operands, we expect the user to define the classes and their; // relations to one another (for example, 8-bit signed immediates as a; // subset of 32-bit immediates).; //; // By partitioning the operands in this way, we guarantee that for any; // tupl",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:2475,Usability,simpl,simplify,2475,"/ mapping has several properties which complicate matching:; //; // - It may be ambiguous; many architectures can legally encode particular; // variants of an instruction in different ways (for example, using a smaller; // encoding for small immediates). Such ambiguities should never be; // arbitrarily resolved by the assembler, the assembler is always responsible; // for choosing the ""best"" available instruction.; //; // - It may depend on the subtarget or the assembler context. Instructions; // which are invalid for the current mode, but otherwise unambiguous (e.g.,; // an SSE instruction in a file being assembled for i486) should be accepted; // and rejected by the assembler front end. However, if the proper encoding; // for an instruction is dependent on the assembler context then the matcher; // is responsible for selecting the correct machine instruction for the; // current mode.; //; // The core matching algorithm attempts to exploit the regularity in most; // instruction sets to quickly determine the set of possibly matching; // instructions, and the simplify the generated code. Additionally, this helps; // to ensure that the ambiguities are intentionally resolved by the user.; //; // The matching is divided into two distinct phases:; //; // 1. Classification: Each operand is mapped to the unique set which (a); // contains it, and (b) is the largest such subset for which a single; // instruction could match all members.; //; // For register classes, we can generate these subgroups automatically. For; // arbitrary operands, we expect the user to define the classes and their; // relations to one another (for example, 8-bit signed immediates as a; // subset of 32-bit immediates).; //; // By partitioning the operands in this way, we guarantee that for any; // tuple of classes, any single instruction must match either all or none; // of the sets of operands which could classify to that tuple.; //; // In addition, the subset relation amongst classes induces a parti",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:3552,Usability,simpl,simple,3552,"ps; // to ensure that the ambiguities are intentionally resolved by the user.; //; // The matching is divided into two distinct phases:; //; // 1. Classification: Each operand is mapped to the unique set which (a); // contains it, and (b) is the largest such subset for which a single; // instruction could match all members.; //; // For register classes, we can generate these subgroups automatically. For; // arbitrary operands, we expect the user to define the classes and their; // relations to one another (for example, 8-bit signed immediates as a; // subset of 32-bit immediates).; //; // By partitioning the operands in this way, we guarantee that for any; // tuple of classes, any single instruction must match either all or none; // of the sets of operands which could classify to that tuple.; //; // In addition, the subset relation amongst classes induces a partial order; // on such tuples, which we use to resolve ambiguities.; //; // 2. The input can now be treated as a tuple of classes (static tokens are; // simple singleton sets). Each such tuple should generally map to a single; // instruction (we currently ignore cases where this isn't true, whee!!!),; // which we can emit a simple matcher for.; //; // Custom Operand Parsing; // ----------------------; //; // Some targets need a custom way to parse operands, some specific instructions; // can contain arguments that can represent processor flags and other kinds of; // identifiers that need to be mapped to specific values in the final encoded; // instructions. The target specific custom operand parsing works in the; // following way:; //; // 1. A operand match table is built, each entry contains a mnemonic, an; // operand class, a mask for all operand positions for that same; // class/mnemonic and target features to be checked while trying to match.; //; // 2. The operand matcher will try every possible entry with the same; // mnemonic and will check if the target feature for this mnemonic also; // matches. After",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:3725,Usability,simpl,simple,3725,"s:; //; // 1. Classification: Each operand is mapped to the unique set which (a); // contains it, and (b) is the largest such subset for which a single; // instruction could match all members.; //; // For register classes, we can generate these subgroups automatically. For; // arbitrary operands, we expect the user to define the classes and their; // relations to one another (for example, 8-bit signed immediates as a; // subset of 32-bit immediates).; //; // By partitioning the operands in this way, we guarantee that for any; // tuple of classes, any single instruction must match either all or none; // of the sets of operands which could classify to that tuple.; //; // In addition, the subset relation amongst classes induces a partial order; // on such tuples, which we use to resolve ambiguities.; //; // 2. The input can now be treated as a tuple of classes (static tokens are; // simple singleton sets). Each such tuple should generally map to a single; // instruction (we currently ignore cases where this isn't true, whee!!!),; // which we can emit a simple matcher for.; //; // Custom Operand Parsing; // ----------------------; //; // Some targets need a custom way to parse operands, some specific instructions; // can contain arguments that can represent processor flags and other kinds of; // identifiers that need to be mapped to specific values in the final encoded; // instructions. The target specific custom operand parsing works in the; // following way:; //; // 1. A operand match table is built, each entry contains a mnemonic, an; // operand class, a mask for all operand positions for that same; // class/mnemonic and target features to be checked while trying to match.; //; // 2. The operand matcher will try every possible entry with the same; // mnemonic and will check if the target feature for this mnemonic also; // matches. After that, if the operand to be matched has its index; // present in the mask, a successful match occurs. Otherwise, fallback; // to the r",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:66,Usability,simpl,simplicities,66,"/// SuperClasses - The super classes of this class. Note that for simplicities; /// sake user operands only record their immediate super class, while register; /// operands include all superclasses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:56,Testability,test,test,56,/// PredicateMethod - The name of the operand method to test whether the; /// operand matches this class; this is not valid for Token or register kinds.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:17,Testability,Test,Test,17,/// isSubsetOf - Test whether this class is a subset of \p RHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:62,Modifiability,inherit,inheritence,62,// Related tokens and user classes get sorted by depth in the inheritence; // tree (so that subclasses are before their parents).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:99,Availability,failure,failure,99,// Could remove this and the dtor if PointerUnion supported unique_ptr; // elements with a dynamic failure/assertion (like the one below) in the case; // where it was copied while being in an owning state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:107,Testability,assert,assertion,107,// Could remove this and the dtor if PointerUnion supported unique_ptr; // elements with a dynamic failure/assertion (like the one below) in the case; // where it was copied while being in an owning state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:88,Performance,perform,perform,88,/// validate - Return true if this matchable is a valid thing to match against; /// and perform a bunch of validity checking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:4,Security,validat,validate,4,/// validate - Return true if this matchable is a valid thing to match against; /// and perform a bunch of validity checking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:53,Security,validat,validates,53,// Compare lexicographically by operand. The matcher validates that other; // orderings wouldn't be ambiguous using \see couldMatchAmbiguouslyWith().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:78,Deployability,update,update,78,// Find the ResOperand that refers to the operand we're aliasing away; // and update it to refer to the combined operand instead.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:101,Modifiability,variab,variable,101,"// The first token of the instruction is the mnemonic, which must be a; // simple string, not a $foo variable or a singleton register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:75,Usability,simpl,simple,75,"// The first token of the instruction is the mnemonic, which must be a; // simple string, not a $foo variable or a singleton register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:35,Usability,simpl,simplified,35,/// tokenizeAsmString - Tokenize a simplified assembly string.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:108,Modifiability,refactor,refactored,108,"// Reject matchables with operand modifiers, these aren't something we can; // handle, the target should be refactored to use operands instead of; // modifiers.; //; // Also, check for instructions which reference the operand multiple times,; // if they don't define a custom AsmMatcher: this implies a constraint that; // the built-in matching code would not honor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:65,Performance,perform,performs,65,"// std::set<T> defines its own compariso ""operator<"", but it; // performs a lexicographical comparison by T's innate comparison; // for some reason. We don't want non-deterministic pointer; // comparisons so use this instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:21,Availability,mask,mask,21,/// Map containing a mask with all operands indices that can be found for; /// that class inside a instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:107,Availability,error,error,107,// Ignore instructions which shouldn't be matched and diagnose invalid; // instruction definitions with an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:3,Security,Validat,Validate,3,// Validate the alias definitions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:13,Usability,simpl,simple,13,// Check for simple tokens.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:117,Safety,avoid,avoid,117,"// If the instruction has a two-operand alias, build up the; // matchable here. We'll add them in bulk at the end to avoid; // confusing this loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:48,Deployability,integrat,integrated,48,"// FIXME: The tied operands checking is not yet integrated with the; // framework for reporting multiple near misses. To prevent invalid; // formats from being matched with an alias if a tied-operands check; // would otherwise have disallowed it, we just disallow such constructs; // in TableGen completely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:48,Integrability,integrat,integrated,48,"// FIXME: The tied operands checking is not yet integrated with the; // framework for reporting multiple near misses. To prevent invalid; // formats from being matched with an alias if a tied-operands check; // would otherwise have disallowed it, we just disallow such constructs; // in TableGen completely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:3,Deployability,update,update,3,// update the pointer in case it moved,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:8,Safety,safe,safe,8,"// It's safe to go with the first one we find, because CodeGenInstAlias; // validates that all operands with the same name have the same record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:76,Security,validat,validates,76,"// It's safe to go with the first one we find, because CodeGenInstAlias; // validates that all operands with the same name have the same record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:88,Usability,Simpl,Simply,88,// This may happen for operands that are tied to a suboperand of a; // complex operand. Simply use a dummy value here; nobody should; // use this operand slot.; // FIXME: The long term goal is for the MCOperand list to not contain; // tied operands at all.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:82,Availability,error,error,82,// Not updating the record in OperandRefs will cause TableGen; // to fail with an error at the end of this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:91,Deployability,update,updated,91,"// Add it to the operand references. If it is added a second time, the; // record won't be updated and it will fail later on.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:74,Availability,avail,available,74,// Pre-populate the operand conversion kinds with the standard always; // available entries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:91,Testability,assert,assert,91,"// The number of tied operand combinations will be small in practice,; // but just add the assert to be sure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:52,Security,validat,validate,52,/// emitValidateOperandClass - Emit the function to validate an operand class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:29,Availability,failure,failure,29,// Generic fallthrough match failure case for operands that don't have; // specialized diagnostic types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:127,Availability,error,error,127,"// Loop through each alias and emit code that handles each case. If there; // are two instructions without predicates, emit an error. If there is one,; // emit it last.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:31,Availability,mask,mask,31,// Write the required features mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:160,Availability,error,error,160,// Emit the static custom operand parser. This code is very similar with; // the other matcher. Also use MatchResultTy here just in case we go for; // a better error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:24,Availability,avail,available,24,// Emit code to get the available features.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:45,Availability,avail,available,45,// Emit check that the required features are available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:83,Availability,failure,failure,83,// Emit a function to get the user-visible string to describe an operand; // match failure in diagnostics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:60,Availability,failure,failure,60,// Emit a function to map register classes to operand match failure codes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:12,Integrability,rout,routine,12,// Emit the routine to match token strings to their match class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:31,Integrability,rout,routine,31,// Emit the subclass predicate routine.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:12,Integrability,rout,routine,12,// Emit the routine to validate an operand against a match class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:23,Security,validat,validate,23,// Emit the routine to validate an operand against a match class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:12,Availability,avail,available,12,// Emit the available features compute function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:139,Energy Efficiency,reduce,reduce,139,"// Emit the static match table; unused classes get initialized to 0 which is; // guaranteed to be InvalidMatchClass.; //; // FIXME: We can reduce the size of this table very easily. First, we change; // it so that store the kinds in separate bit-fields for each index, which; // only needs to be the max width used for classes at that index (we also need; // to reject based on this during classification). If we then make sure to; // order the match kinds appropriately (putting mnemonics last), then we; // should only end up using a few bits for each class, especially the ones; // following the mnemonic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:31,Availability,mask,mask,31,// Write the required features mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:24,Availability,avail,available,24,// Emit code to get the available features.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:45,Availability,avail,available,45,// Emit check that the required features are available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp:110,Safety,avoid,avoid,110,"/// UnescapeAliasString - Supports literal braces in InstAlias asm string which; /// are escaped with '\\' to avoid being interpreted as variants. Braces must; /// be unescaped before c++ code is generated as (e.g.):; ///; /// AsmString = ""foo \{$\x01\}"";; ///; /// causes non-standard escape character warnings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp:69,Performance,optimiz,optimized,69,// Add all strings to the string table upfront so it can generate an optimized; // representation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp:6,Energy Efficiency,reduce,reduce,6,"// To reduce code size, we compactify common instructions into a few bits; // in the opcode-indexed table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp:161,Usability,clear,clearing,161,"/// EmitPrintInstruction - Generate the code for the ""printInstruction"" method; /// implementation. Destroys all instances of AsmWriterInst information, by; /// clearing the Instructions vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp:101,Availability,error,error,101,"// If the register has an alternate name for this index, use it.; // Otherwise, leave it empty as an error flag.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp:186,Safety,avoid,avoid,186,// Directly mangle mapped operands into the string. Each operand is; // identified by a '$' sign followed by a byte identifying the number of the; // operand. We add one to the index to avoid zero bytes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp:36,Integrability,rout,route,36,// Can use the default printOperand route.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp:97,Safety,detect,detected,97,"// 3 bytes if a PrintMethod is needed: 0xFF, the MCInst operand; // number, and which of our pre-detected Methods to call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp:80,Integrability,depend,depend,80,"// We don't actually care about the order, but for consistency it; // shouldn't depend on pointer comparisons.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp:23,Security,validat,validation,23,// Forward declare the validation method if needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp:3,Testability,Assert,Assert,3,// Assert that the opcode table is sorted. Use a static local constructor to; // ensure that the check only happens once on first run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterInst.cpp:23,Modifiability,variab,variable,23,// Get the name of the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmWriterInst.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterInst.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterInst.cpp:158,Modifiability,variab,variable,158,"// handle ${foo}bar as $foo by detecting whether the character following; // the dollar sign is a curly brace. If so, advance VarEnd and DollarPos; // so the variable name does not contain the leading curly brace.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmWriterInst.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterInst.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterInst.cpp:31,Safety,detect,detecting,31,"// handle ${foo}bar as $foo by detecting whether the character following; // the dollar sign is a curly brace. If so, advance VarEnd and DollarPos; // so the variable name does not contain the leading curly brace.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmWriterInst.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterInst.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterInst.cpp:15,Safety,avoid,avoid,15,"// In order to avoid starting the next string at the terminating curly; // brace, advance the end position past it if we found an opening curly; // brace.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmWriterInst.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterInst.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterInst.h:25,Integrability,rout,routine,25,// This is the name of a routine to call to print the operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/AsmWriterInst.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterInst.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp:646,Integrability,depend,depending,646,"//===- CodeEmitterGen.cpp - Code Emitter Generator ------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // CodeEmitterGen uses the descriptions of instructions and their fields to; // construct an automated code emitter: a function called; // getBinaryCodeForInstr() that, given a MCInst, returns the value of the; // instruction - either as an uint64_t or as an APInt, depending on the; // maximum bit width of all Inst definitions.; //; // In addition, it generates another function called getOperandBitOffset(); // that, given a MCInst and an operand index, returns the minimum of indices of; // all bits that carry some portion of the respective operand. When the target's; // encodeInstruction() stores the instruction in a little-endian byte order, the; // returned value is the offset of the start of the operand in the encoded; // instruction. Other targets might need to adjust the returned value according; // to their encodeInstruction() implementation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp:61,Modifiability,variab,variable,61,// If the VarBitInit at position 'bit' matches the specified variable then; // return the variable bit position. Otherwise return -1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp:90,Modifiability,variab,variable,90,// If the VarBitInit at position 'bit' matches the specified variable then; // return the variable bit position. Otherwise return -1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp:44,Availability,error,error,44,"// Returns true if it succeeds, false if an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp:189,Energy Efficiency,reduce,reduces,189,// Precalculate the number of lits this variable contributes to in the; // operand. If there is a single lit (consecutive range of bits) we can use a; // destructive sequence on APInt that reduces memory allocations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp:40,Modifiability,variab,variable,40,// Precalculate the number of lits this variable contributes to in the; // operand. If there is a single lit (consecutive range of bits) we can use a; // destructive sequence on APInt that reduces memory allocations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp:28,Modifiability,variab,variable,28,"// If this bit isn't from a variable, skip it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp:28,Modifiability,variab,variable,28,"// If this bit isn't from a variable, skip it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp:3,Safety,Avoid,Avoid,3,// Avoid empty switches.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeEmitterGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:37,Modifiability,parameteriz,parameterized,37,// --- TypeSetByHwMode; // This is a parameterized type-set class. For each mode there is a list; // of types that are currently possible for a given tree node. Type; // inference will apply to each mode separately.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:3,Performance,Cache,Cache,3,// Cache VVT's default mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:44,Usability,simpl,simple,44,// Speedup: We have a default if the set is simple.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:108,Usability,clear,clear,108,"// B is empty and since S is a specific VT, it will never be empty. Don't; // report this as a change, just clear S and continue. This prevents an; // infinite loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:20,Performance,scalab,scalable,20,// Always treat non-scalable MVTs as smaller than scalable MVTs for the; // purposes of ordering.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:50,Performance,scalab,scalable,50,// Always treat non-scalable MVTs as smaller than scalable MVTs for the; // purposes of ordering.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:100,Performance,scalab,scalable,100,"// This function is used when removing elements: when a vector is compared; // to a non-vector or a scalable vector to any non-scalable MVT, it should; // return false (to avoid removal).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:127,Performance,scalab,scalable,127,"// This function is used when removing elements: when a vector is compared; // to a non-vector or a scalable vector to any non-scalable MVT, it should; // return false (to avoid removal).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:172,Safety,avoid,avoid,172,"// This function is used when removing elements: when a vector is compared; // to a non-vector or a scalable vector to any non-scalable MVT, it should; // return false (to avoid removal).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:3,Testability,Log,Logically,3,"// Logically a <4 x i32> is a valid subvector of <n x 4 x i32>; // but until there are obvious use-cases for this, keep the; // types separate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:24,Performance,load,loads,24,"// FIXME: Should atomic loads be IsLoad, IsAtomic, or both?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:22,Modifiability,variab,variable,22,"// At this point, all variable type sets should be simple, i.e. only; // have a default mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:51,Usability,simpl,simple,51,"// At this point, all variable type sets should be simple, i.e. only; // have a default mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:212,Availability,error,error,212,"/// ApplyTypeConstraint - Given a node in a pattern, apply this type; /// constraint to the nodes operands. This returns true if it makes a; /// change, false otherwise. If a type contradiction is found, flag an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:3,Deployability,Update,Update,3,// Update the node type to match an instruction operand or result as specified; // in the ins or outs lists on the instruction definition. Return true if the; // type was actually changed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:147,Usability,Simpl,SimpleValueType,147,"/// getKnownType - If the type constraints on this node imply a fixed type; /// (e.g. all stores return void, etc), then return it as an; /// MVT::SimpleValueType. Otherwise, return EEVT::Other.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:313,Integrability,depend,dependent,313,"/// isIsomorphicTo - Return true if this node is recursively; /// isomorphic to the specified node. For this comparison, the node's; /// entire state is considered. The assigned name is ignored, since; /// nodes with differing names are considered isomorphic. However, if; /// the assigned name is present in the dependent variable set, then; /// the assigned name is considered significant and the node is; /// isomorphic if the names match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:323,Modifiability,variab,variable,323,"/// isIsomorphicTo - Return true if this node is recursively; /// isomorphic to the specified node. For this comparison, the node's; /// entire state is considered. The assigned name is ignored, since; /// nodes with differing names are considered isomorphic. However, if; /// the assigned name is present in the dependent variable set, then; /// the assigned name is considered significant and the node is; /// isomorphic if the names match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:72,Modifiability,variab,variable,72,"// With a name, the ValueType simply provides the type of the named; // variable.; //; // (sext_inreg i32:$src, i16); // ~~~~~~~~",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:30,Usability,simpl,simply,30,"// With a name, the ValueType simply provides the type of the named; // variable.; //; // (sext_inreg i32:$src, i16); // ~~~~~~~~",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:222,Availability,error,error,222,"/// ApplyTypeConstraints - Apply all of the type constraints relevant to; /// this node and its children in the tree. This returns true if it makes a; /// change, false otherwise. If a type contradiction is found, flag an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:98,Modifiability,extend,extended,98,// Check that the value doesn't use more bits than we have. It must; // either be a sign- or zero-extended equivalent of the original.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:116,Availability,error,error,116,"// If we have run out of child nodes and there _isn't_ a default; // value we can use for the next operand, give an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:169,Safety,sanity check,sanity check,169,"/// canPatternMatch - If it is impossible for this pattern to match on this; /// target, fill in Reason and return false. Otherwise, return true. This is; /// used as a sanity check for .td files (to prevent people from writing stuff; /// that can never possibly work), and to prevent the pattern permuter from; /// generating stuff that is useless.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:4,Usability,Simpl,SimplifyTree,4,/// SimplifyTree - See if we can simplify this tree to eliminate something that; /// will never match in favor of something obvious that will. This is here; /// strictly as a convenience to target authors because it allows them to write; /// more type generic things and have useless type casts fold away.; ///; /// This returns true if any change is made.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:33,Usability,simpl,simplify,33,/// SimplifyTree - See if we can simplify this tree to eliminate something that; /// will never match in favor of something obvious that will. This is here; /// strictly as a convenience to target authors because it allows them to write; /// more type generic things and have useless type casts fold away.; ///; /// This returns true if any change is made.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:257,Usability,simpl,simplified,257,"// If we have a bitconvert with a resolved type and if the source and; // destination types are the same, then the bitconvert is useless, remove it.; //; // We make an exception if the types are completely empty. This can come up; // when the pattern being simplified is in the Fragments list of a PatFrags,; // so that the operand is just an untyped ""node"". In that situation we leave; // bitconverts unsimplified, and simplify them later once the fragment is; // expanded into its true context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:420,Usability,simpl,simplify,420,"// If we have a bitconvert with a resolved type and if the source and; // destination types are the same, then the bitconvert is useless, remove it.; //; // We make an exception if the types are completely empty. This can come up; // when the pattern being simplified is in the Fragments list of a PatFrags,; // so that the operand is just an untyped ""node"". In that situation we leave; // bitconverts unsimplified, and simplify them later once the fragment is; // expanded into its true context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:173,Availability,error,error,173,"/// InferAllTypes - Infer/propagate as many types throughout the expression; /// patterns as possible. Return true if all types are inferred, false; /// otherwise. Flags an error if a type contradiction is found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:23,Modifiability,parameteriz,parameterized,23,"// Break patterns with parameterized types into a series of patterns,; // where each one has a fixed type and is predicated on the conditions; // of the associated HW mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:55,Performance,load,loads,55,"// Infer instruction flags. For example, we can detect loads,; // stores, and side effects in many cases by examining an; // instruction's pattern.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:48,Safety,detect,detect,48,"// Infer instruction flags. For example, we can detect loads,; // stores, and side effects in many cases by examining an; // instruction's pattern.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:3,Security,Validat,Validate,3,"// Validate the argument list, converting it to set, to discard duplicates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:204,Availability,failure,failures,204,"// Infer as many types as possible. Don't worry about it if we don't infer; // all of them, some may depend on the inputs of the pattern. Also, don't; // validate type sets; validation may cause spurious failures e.g. if a; // fragment needs floating-point types but the current target does not have; // any (this is only an error if that fragment is ever used!).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:325,Availability,error,error,325,"// Infer as many types as possible. Don't worry about it if we don't infer; // all of them, some may depend on the inputs of the pattern. Also, don't; // validate type sets; validation may cause spurious failures e.g. if a; // fragment needs floating-point types but the current target does not have; // any (this is only an error if that fragment is ever used!).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:101,Integrability,depend,depend,101,"// Infer as many types as possible. Don't worry about it if we don't infer; // all of them, some may depend on the inputs of the pattern. Also, don't; // validate type sets; validation may cause spurious failures e.g. if a; // fragment needs floating-point types but the current target does not have; // any (this is only an error if that fragment is ever used!).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:154,Security,validat,validate,154,"// Infer as many types as possible. Don't worry about it if we don't infer; // all of them, some may depend on the inputs of the pattern. Also, don't; // validate type sets; validation may cause spurious failures e.g. if a; // fragment needs floating-point types but the current target does not have; // any (this is only an error if that fragment is ever used!).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:174,Security,validat,validation,174,"// Infer as many types as possible. Don't worry about it if we don't infer; // all of them, some may depend on the inputs of the pattern. Also, don't; // validate type sets; validation may cause spurious failures e.g. if a; // fragment needs floating-point types but the current target does not have; // any (this is only an error if that fragment is ever used!).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:183,Availability,error,errors,183,"/// FindPatternInputsAndOutputs - Scan the specified TreePatternNode (which is; /// part of ""I"", the instruction), computing the set of inputs and outputs of; /// the pattern. Report errors if we see anything naughty.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:29,Security,validat,validate,29,"// Otherwise, this is a set, validate and collect instruction results.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:24,Safety,detect,detected,24,// These properties are detected only on the root node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:13,Performance,load,load,13,// These may load memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:70,Performance,load,loads,70,"// Allow explicitly setting mayLoad = 1, even when the pattern has no loads.; // Some targets translate immediates to loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:118,Performance,load,loads,118,"// Allow explicitly setting mayLoad = 1, even when the pattern has no loads.; // Some targets translate immediates to loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:48,Security,validat,validating,48,"// Parse the operands list from the (ops) list, validating it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:11,Safety,sanity check,sanity checking,11,// Do some sanity checking on the pattern we're about to match.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:11,Availability,error,error,11,// Collect error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:17,Integrability,message,messages,17,// Collect error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:9,Availability,error,error,9,// Print error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:15,Integrability,message,messages,15,// Print error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:402,Availability,error,error,402,"// A pattern may end up with an ""impossible"" type, i.e. a situation; // where all types have been eliminated for some node in this pattern.; // This could occur for intrinsics that only make sense for a specific; // value type, and use a specific register class. If, for some mode,; // that register class does not accept that type, the type inference; // will lead to a contradiction, which is not an error however, but; // a sign that this pattern will simply never match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:455,Usability,simpl,simply,455,"// A pattern may end up with an ""impossible"" type, i.e. a situation; // where all types have been eliminated for some node in this pattern.; // This could occur for intrinsics that only make sense for a specific; // value type, and use a specific register class. If, for some mode,; // that register class does not accept that type, the type inference; // will lead to a contradiction, which is not an error however, but; // a sign that this pattern will simply never match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:10,Integrability,message,message,10,// Show a message about a dropped pattern with some info to make it; // easier to identify it in the .td files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:3,Security,Validat,Validate,3,// Validate that the input pattern is correct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:532,Safety,avoid,avoid,532,"// The predicate for the default mode needs to be constructed for each; // pattern separately.; // Since not all modes must be present in each pattern, if a mode m is; // absent, then there is no point in constructing a check for m. If such; // a check was created, it would be equivalent to checking the default; // mode, except not all modes' predicates would be a part of the checking; // code. The subsequently generated check for the default mode would then; // have the exact same patterns, but a different predicate code. To avoid; // duplicated patterns with different predicate checks, construct the; // default check as a negation of all predicates that are actually present; // in the source/destination patterns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:4,Integrability,Depend,Dependent,4,/// Dependent variable map for CodeGenDAGPattern variant generation,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:14,Modifiability,variab,variable,14,/// Dependent variable map for CodeGenDAGPattern variant generation,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:9,Integrability,depend,dependent,9,/// Find dependent variables within child patterns,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:19,Modifiability,variab,variables,19,/// Find dependent variables within child patterns,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:13,Integrability,depend,dependent,13,/// Dump the dependent variable set:,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:23,Modifiability,variab,variable,23,/// Dump the dependent variable set:,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:132,Deployability,A/B,A/B,132,"// There are only two ways we can permute the tree:; // (A op B) op C and A op (B op C); // Within these forms, we can also permute A/B/C.; // Generate legal pair permutations of A/B/C.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:179,Deployability,A/B,A/B,179,"// There are only two ways we can permute the tree:; // (A op B) op C and A op (B op C); // Within these forms, we can also permute A/B/C.; // Generate legal pair permutations of A/B/C.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:123,Energy Efficiency,reduce,reduce,123,"/// This represents a set of MVTs. Since the underlying type for the MVT; /// is uint8_t, there are at most 256 values. To reduce the number of memory; /// allocations and deallocations, represent the set as a sequence of bits.; /// To reduce the allocations even further, make MachineValueTypeSet own; /// the storage and use std::array as the bit container.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:236,Energy Efficiency,reduce,reduce,236,"/// This represents a set of MVTs. Since the underlying type for the MVT; /// is uint8_t, there are at most 256 values. To reduce the number of memory; /// allocations and deallocations, represent the set as a sequence of bits.; /// To reduce the allocations even further, make MachineValueTypeSet own; /// the storage and use std::array as the bit container.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:103,Availability,mask,masked,103,"// If P is in the middle of a word, process it manually here, because; // the trailing bits need to be masked off to use findFirstSet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:8,Integrability,protocol,protocol,8,"/// The protocol in the following functions (Merge*, force*, Enforce*,; /// expand*) is to return ""true"" if a change has been made, ""false""; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:4,Energy Efficiency,Reduce,Reduce,4,/// Reduce the set \p Out to have at most one element for each mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:278,Safety,detect,detect,278,"/// Make sure that for each type in \p Small, there exists a larger type; /// in \p Big. \p SmallIsVT indicates that this is being called for; /// SDTCisVTSmallerThanOp. In that case the TypeSetByHwMode is re-created for; /// each call and needs special consideration in how we detect changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:23,Security,validat,validate,23,// Indicate whether to validate types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:4,Performance,Cache,Cached,4,/// Cached legal types (in default mode).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:41,Modifiability,variab,variables,41,/// Set type used to track multiply used variables in patterns,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:207,Availability,error,error,207,"/// ApplyTypeConstraint - Given a node in a pattern, apply this type; /// constraint to the nodes operands. This returns true if it makes a; /// change, false otherwise. If a type contradiction is found, an error; /// is flagged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:147,Usability,Simpl,SimpleValueType,147,"/// getKnownType - If the type constraints on this node imply a fixed type; /// (e.g. all stores return void, etc), then return it as an; /// MVT::SimpleValueType. Otherwise, return MVT::Other.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:233,Availability,error,error,233,"/// ApplyTypeConstraints - Given a node in a pattern, apply the type; /// constraints for this node to the operands of the node. This returns; /// true if it makes a change, false otherwise. If a type contradiction is; /// found, an error is flagged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:126,Integrability,wrap,wrapper,126,/// TreePredicateFn - This is an abstraction that represents the predicates on; /// a PatFrag node. This is a simple one-word wrapper around a pointer to; /// provide nice accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:172,Security,access,accessors,172,/// TreePredicateFn - This is an abstraction that represents the predicates on; /// a PatFrag node. This is a simple one-word wrapper around a pointer to; /// provide nice accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:110,Usability,simpl,simple,110,/// TreePredicateFn - This is an abstraction that represents the predicates on; /// a PatFrag node. This is a simple one-word wrapper around a pointer to; /// provide nice accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:125,Availability,error,error,125,/// getImmediatePredicateCode - Return the code that evaluates this pattern if; /// this is an immediate predicate. It is an error to call this on a; /// non-immediate pattern.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:78,Usability,usab,usable,78,/// Get a string that describes the type returned by getImmType() but is; /// usable as part of an identifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:45,Performance,load,load,45,// Is the desired predefined predicate for a load?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:47,Performance,load,load,47,/// Is this predicate the predefined unindexed load predicate?; /// Is this predicate the predefined unindexed store predicate?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:41,Modifiability,extend,extending,41,/// Is this predicate the predefined non-extending load predicate?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:51,Performance,load,load,51,/// Is this predicate the predefined non-extending load predicate?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:41,Modifiability,extend,extend,41,/// Is this predicate the predefined any-extend load predicate?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:48,Performance,load,load,48,/// Is this predicate the predefined any-extend load predicate?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:42,Modifiability,extend,extend,42,/// Is this predicate the predefined sign-extend load predicate?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:49,Performance,load,load,49,/// Is this predicate the predefined sign-extend load predicate?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:42,Modifiability,extend,extend,42,/// Is this predicate the predefined zero-extend load predicate?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:49,Performance,load,load,49,/// Is this predicate the predefined zero-extend load predicate?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:37,Deployability,release,release,37,/// Is this predicate the predefined release atomic predicate?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:45,Deployability,release,release,45,/// Is this predicate the predefined acquire-release atomic predicate?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:37,Deployability,release,release-or-stronger,37,/// Is this predicate the predefined release-or-stronger atomic predicate?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:49,Deployability,release,release,49,/// Is this predicate the predefined weaker-than-release atomic predicate?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:94,Performance,load,load,94,"/// If non-null, indicates that this predicate is a predefined memory VT; /// predicate for a load/store and returns the ValueType record for the memory VT.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:124,Performance,load,load,124,"/// If non-null, indicates that this predicate is a predefined memory VT; /// predicate (checking only the scalar type) for load/store and returns the; /// ValueType record for the memory VT.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:8,Security,access,accessors,8,// Type accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:29,Integrability,rout,routines,29,// Higher level manipulation routines.; /// clone - Return a new copy of this tree.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:222,Availability,error,error,222,"/// ApplyTypeConstraints - Apply all of the type constraints relevant to; /// this node and its children in the tree. This returns true if it makes a; /// change, false otherwise. If a type contradiction is found, flag an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:143,Availability,error,error,143,"/// UpdateNodeType - Set the node type of N to VT if VT contains; /// information. If N already contains a conflicting type, then flag an; /// error. This returns true if any information was updated.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:4,Deployability,Update,UpdateNodeType,4,"/// UpdateNodeType - Set the node type of N to VT if VT contains; /// information. If N already contains a conflicting type, then flag an; /// error. This returns true if any information was updated.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:191,Deployability,update,updated,191,"/// UpdateNodeType - Set the node type of N to VT if VT contains; /// information. If N already contains a conflicting type, then flag an; /// error. This returns true if any information was updated.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:3,Deployability,Update,Update,3,// Update node type with types inferred from an instruction operand or result; // def from the ins/outs lists.; // Return true if the type changed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:101,Availability,error,errors,101,/// hasError - True if the currently processed nodes have unresolvable types; /// or other non-fatal errors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:4,Availability,error,error,4,"/// error - If this is the first error in the current resolution step,; /// print it and set the error flag. Otherwise, continue silently.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:33,Availability,error,error,33,"/// error - If this is the first error in the current resolution step,; /// print it and set the error flag. Otherwise, continue silently.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h:97,Availability,error,error,97,"/// error - If this is the first error in the current resolution step,; /// print it and set the error flag. Otherwise, continue silently.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstAlias.cpp:54,Integrability,Wrap,Wrapper,54,"//===- CodeGenInstAlias.cpp - CodeGen InstAlias Class Wrapper -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the CodeGenInstAlias class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstAlias.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstAlias.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstAlias.cpp:14,Security,validat,validate,14,// Decode and validate the arguments of the result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstAlias.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstAlias.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstAlias.cpp:16,Usability,simpl,simple,16,"// If this is a simple operand, or a complex operand with a custom match; // class, then we can match is verbatim.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstAlias.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstAlias.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstAlias.h:44,Integrability,Wrap,Wrapper,44,"//===- CodeGenInstAlias.h - InstAlias Class Wrapper -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a wrapper class for the 'InstAlias' TableGen class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstAlias.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstAlias.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstAlias.h:403,Integrability,wrap,wrapper,403,"//===- CodeGenInstAlias.h - InstAlias Class Wrapper -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a wrapper class for the 'InstAlias' TableGen class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstAlias.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstAlias.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.cpp:58,Integrability,Wrap,Wrapper,58,"//===- CodeGenInstruction.cpp - CodeGen Instruction Class Wrapper ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the CodeGenInstruction class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.cpp:168,Safety,abort,abort,168,"/// getOperandNamed - Return the index of the operand with the specified; /// non-empty name. If the instruction does not have an operand with the; /// specified name, abort.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.cpp:40,Availability,mask,mask,40,// Check if we have a Subtarget feature mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.h:48,Integrability,Wrap,Wrapper,48,"//===- CodeGenInstruction.h - Instruction Class Wrapper ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a wrapper class for the 'Instruction' TableGen class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.h:403,Integrability,wrap,wrapper,403,"//===- CodeGenInstruction.h - Instruction Class Wrapper ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a wrapper class for the 'Instruction' TableGen class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.h:67,Testability,log,logical,67,"/// MIOperandNo - Currently (this is meant to be phased out), some logical; /// operands correspond to multiple MachineInstr operands. In the X86; /// target for example, one address operand is represented as 4; /// MachineOperands. Because of this, the operand number in the; /// OperandList may not match the MachineInstr operand num. Until it; /// does, this contains the MI operand index of this operand.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.h:23,Security,access,accessors,23,// Provide transparent accessors to the operand list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.h:168,Safety,abort,abort,168,"/// getOperandNamed - Return the index of the operand with the specified; /// non-empty name. If the instruction does not have an operand with the; /// specified name, abort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.h:154,Safety,abort,aborts,154,"/// ParseOperandName - Parse an operand name like ""$foo"" or ""$foo.bar"",; /// where $foo is a whole operand and $foo.bar refers to a suboperand.; /// This aborts if the name is invalid. If AllowWholeOp is true, references; /// to operands with suboperands are allowed, otherwise not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenInstruction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.cpp:47,Integrability,Wrap,Wrapper,47,"//===- CodeGenIntrinsics.cpp - Intrinsic Class Wrapper --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a wrapper class for the 'Intrinsic' TableGen class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.cpp:403,Integrability,wrap,wrapper,403,"//===- CodeGenIntrinsics.cpp - Intrinsic Class Wrapper --------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a wrapper class for the 'Intrinsic' TableGen class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h:45,Integrability,Wrap,Wrapper,45,"//===- CodeGenIntrinsics.h - Intrinsic Class Wrapper -----------*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a wrapper class for the 'Intrinsic' TableGen class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h:403,Integrability,wrap,wrapper,403,"//===- CodeGenIntrinsics.h - Intrinsic Class Wrapper -----------*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a wrapper class for the 'Intrinsic' TableGen class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h:181,Availability,avail,available,181,"/// The MVT::SimpleValueType for each return type. Note that this list is; /// only populated when in the context of a target .td file. When building; /// Intrinsics.td, this isn't available, because we don't know the target; /// pointer size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h:13,Usability,Simpl,SimpleValueType,13,"/// The MVT::SimpleValueType for each return type. Note that this list is; /// only populated when in the context of a target .td file. When building; /// Intrinsics.td, this isn't available, because we don't know the target; /// pointer size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h:184,Availability,avail,available,184,"/// The MVT::SimpleValueType for each parameter type. Note that this list is; /// only populated when in the context of a target .td file. When building; /// Intrinsics.td, this isn't available, because we don't know the target; /// pointer size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h:13,Usability,Simpl,SimpleValueType,13,"/// The MVT::SimpleValueType for each parameter type. Note that this list is; /// only populated when in the context of a target .td file. When building; /// Intrinsics.td, this isn't available, because we don't know the target; /// pointer size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h:243,Availability,avail,available,243,"/// Returns true if the parameter at \p ParamIdx is a pointer type. Returns; /// false if the parameter is not a pointer, or \p ParamIdx is greater than; /// the size of \p IS.ParamVTs.; ///; /// Note that this requires that \p IS.ParamVTs is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenIntrinsics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenMapTable.cpp:30,Energy Efficiency,reduce,reduce,30,// FilterClass - It's used to reduce the search space only to the; // instructions that define the kind of relationship modeled by; // this InstrMapping object/record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenMapTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenMapTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenMapTable.cpp:27,Availability,Error,Error,27,// Already had a match; // Error if multiple matches are found for a column.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenMapTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenMapTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:12,Availability,mask,mask,12,// The lane mask is simply the union of all sub-indices.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:20,Usability,simpl,simply,20,// The lane mask is simply the union of all sub-indices.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:3,Modifiability,Inherit,Inherit,3,// Inherit register units from subregisters.; // Return true if the RegUnits changed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:75,Modifiability,inherit,inherited,75,"// Map explicit sub-registers first, so the names take precedence.; // The inherited sub-registers are mapped below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:17,Modifiability,inherit,inherited,17,// Keep track of inherited subregs and how they can be reached.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:9,Modifiability,inherit,inherited,9,// Clone inherited subregs and place duplicate entries in Orphans.; // Here the order is important - earlier subregs take precedence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:28,Modifiability,inherit,inherited,28,"// Now Orphans contains the inherited subregisters without a direct index.; // Create inferred indexes for all missing entries.; // Work backwards in the Indices vector in order to compose subregs bottom-up.; // Consider this subreg sequence:; //; // qsub_1 -> dsub_0 -> ssub_0; //; // The qsub_1 -> dsub_0 composition becomes dsub_2, so the ssub_0 register; // can be reached in two different ways:; //; // qsub_1 -> ssub_0; // dsub_2 -> ssub_0; //; // We pick the latter composition because another register may have [dsub_0,; // dsub_1, dsub_2] subregs without necessarily having a qsub_1 subreg. The; // dsub_2 -> ssub_0 composition can be shared.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:133,Modifiability,Inherit,Inherit,133,"// Initialize RegUnitList. Because getSubRegs is called recursively, this; // processes the register hierarchy in postorder.; //; // Inherit all sub-register units. It is good enough to look at the explicit; // sub-registers, the other registers won't contribute any more units.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:222,Usability,simpl,simply,222,"// Absent any ad hoc aliasing, we create one register unit per leaf register.; // These units correspond to the maximal cliques in the register overlap; // graph which is optimal.; //; // When there is ad hoc aliasing, we simply create one unit per edge in the; // undirected ad hoc aliasing graph. Technically, we could do better by; // identifying maximal cliques in the ad hoc graph, but cliques larger than 2; // are extremely rare anyway (I've never seen one), so we don't bother with; // the added complexity.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:67,Availability,redundant,redundant,67,"// In a register that is covered by its sub-registers, try to find redundant; // sub-registers. For example:; //; // QQ0 = {Q0, Q1}; // Q0 = {D0, D1}; // Q1 = {D2, D3}; //; // We can infer that D1_D2 is also a sub-register, even if it wasn't named in; // the register definition.; //; // The explicitly specified registers form a tree. This function discovers; // sub-register relationships that would force a DAG.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:67,Safety,redund,redundant,67,"// In a register that is covered by its sub-registers, try to find redundant; // sub-registers. For example:; //; // QQ0 = {Q0, Q1}; // Q0 = {D0, D1}; // Q1 = {D2, D3}; //; // We can infer that D1_D2 is also a sub-register, even if it wasn't named in; // the register definition.; //; // The explicitly specified registers form a tree. This function discovers; // sub-register relationships that would force a DAG.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:90,Energy Efficiency,consumption,consumption,90,"// Create a new Record representing the synthesized register. This record; // is only for consumption by CodeGenRegister, it is not added to the; // RecordKeeper.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:102,Modifiability,inherit,inherited,102,// Create an inferred register class that was missing from the .td files.; // Most properties will be inherited from the closest super-class after the; // class structure has been computed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:11,Modifiability,inherit,inherited,11,// Compute inherited propertied for a synthesized register class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:65,Usability,simpl,simple,65,"// If VT is not identical to any of this class's types, but is a simple; // type, check if any of the types for this class contain it under some; // mode.; // The motivating example came from RISC-V, where (likely because of being; // guarded by ""64-bit"" predicate), the type of X5 was {*:[i64]}, but the; // type in GRC was {*:[i32], m1:[i64]}.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:36,Usability,simpl,simple,36,// end namespace llvm; // This is a simple lexicographical order that can be used to search for sets.; // It is not the same as the topological order provided by TopoOrderRC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:180,Availability,down,down,180,"// With the class hierarchy in place, let synthesized register classes inherit; // properties from their closest super-class. The iteration order here can; // propagate properties down multiple levels.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:71,Modifiability,inherit,inherit,71,"// With the class hierarchy in place, let synthesized register classes inherit; // properties from their closest super-class. The iteration order here can; // propagate properties down multiple levels.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:3,Modifiability,Config,Configure,3,// Configure register Sets to understand register classes and tuples.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:152,Energy Efficiency,reduce,reduce,152,"// For X86, we need to sort Registers and RegisterTuples together to list; // new registers and register tuples at a later position. So that we can; // reduce unnecessary iterations on unsupported registers in LiveVariables.; // TODO: Remove this logic when migrate from LiveVariables to LiveIntervals; // completely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:247,Testability,log,logic,247,"// For X86, we need to sort Registers and RegisterTuples together to list; // new registers and register tuples at a later position. So that we can; // reduce unnecessary iterations on unsupported registers in LiveVariables.; // TODO: Remove this logic when migrate from LiveVariables to LiveIntervals; // completely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:91,Availability,failure,failures,91,"// FIXME: This could just be RegistersByName[name] = register, except that; // causes some failures in MIPS - perhaps they have duplicate register name; // entries? (or maybe there's a reason for it - I don't know much about this; // code, just drive-by refactoring)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:254,Modifiability,refactor,refactoring,254,"// FIXME: This could just be RegistersByName[name] = register, except that; // causes some failures in MIPS - perhaps they have duplicate register name; // entries? (or maybe there's a reason for it - I don't know much about this; // code, just drive-by refactoring)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate user-defined register classes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:16,Availability,mask,masks,16,"// Compute lane masks. This is similar to register units, but at the; // sub-register index level. Each bit in the lane mask is like a register unit; // class, and two lane masks will have a bit in common if two sub-register; // indices overlap in some register.; //; // Conservatively share a lane mask bit if two sub-register indices overlap in; // some registers, but not in others. That shouldn't happen a lot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:120,Availability,mask,mask,120,"// Compute lane masks. This is similar to register units, but at the; // sub-register index level. Each bit in the lane mask is like a register unit; // class, and two lane masks will have a bit in common if two sub-register; // indices overlap in some register.; //; // Conservatively share a lane mask bit if two sub-register indices overlap in; // some registers, but not in others. That shouldn't happen a lot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:173,Availability,mask,masks,173,"// Compute lane masks. This is similar to register units, but at the; // sub-register index level. Each bit in the lane mask is like a register unit; // class, and two lane masks will have a bit in common if two sub-register; // indices overlap in some register.; //; // Conservatively share a lane mask bit if two sub-register indices overlap in; // some registers, but not in others. That shouldn't happen a lot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:299,Availability,mask,mask,299,"// Compute lane masks. This is similar to register units, but at the; // sub-register index level. Each bit in the lane mask is like a register unit; // class, and two lane masks will have a bit in common if two sub-register; // indices overlap in some register.; //; // Conservatively share a lane mask bit if two sub-register indices overlap in; // some registers, but not in others. That shouldn't happen a lot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:13,Availability,mask,mask,13,// Determine mask of lanes that cover their registers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:472,Availability,mask,masks,472,// Compute transformation sequences for composeSubRegIndexLaneMask. The idea; // here is that for each possible target subregister we look at the leafs; // in the subregister graph that compose for this target and create; // transformation sequences for the lanemasks. Each step in the sequence; // consists of a bitmask and a bitrotate operation. As the rotation amounts; // are usually the same for many subregisters we can easily combine the steps; // by combining the masks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:132,Availability,mask,mask,132,// Go through all leaf subregisters and find the ones that compose with; // Idx. These make out all possible valid bits in the lane mask we want to; // transform. Looking only at the leafs ensure that only a single bit in; // the mask is set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:230,Availability,mask,mask,230,// Go through all leaf subregisters and find the ones that compose with; // Idx. These make out all possible valid bits in the lane mask we want to; // transform. Looking only at the leafs ensure that only a single bit in; // the mask is set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:41,Availability,mask,mask,41,// Replicate the behaviour from the lane mask generation loop above.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:10,Availability,Mask,Mask,10,// Create Mask+Rotate operation and merge with existing ops if possible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:65,Availability,mask,mask,65,// Optimize if the transformation consists of one step only: Set mask to; // 0xffffffff (including some irrelevant invalid bits) so that it should; // merge with more entries later while compressing the table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:3,Performance,Optimiz,Optimize,3,// Optimize if the transformation consists of one step only: Set mask to; // 0xffffffff (including some irrelevant invalid bits) so that it should; // merge with more entries later while compressing the table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:144,Availability,Mask,Mask,144,// Further compression optimization: For invalid compositions resulting; // in a sequence with 0 entries we can just pick any other. Choose; // Mask 0xffffffff with Rotation 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:23,Performance,optimiz,optimization,23,// Further compression optimization: For invalid compositions resulting; // in a sequence with 0 entries we can just pick any other. Choose; // Mask 0xffffffff with Rotation 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:154,Modifiability,Inherit,Inherit,154,// FIXME: What if ad-hoc aliasing introduces overlaps that aren't represented; // by the sub-register graph? This doesn't occur in any known targets.; // Inherit lanes from composites.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:16,Availability,mask,mask,16,// Compute lane mask combinations for register classes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:614,Performance,cache,caches,614,"// UberRegSet is a helper class for computeRegUnitWeights. Each UberRegSet is; // the transitive closure of the union of overlapping register; // classes. Together, the UberRegSets form a partition of the registers. If we; // consider overlapping register classes to be connected, then each UberRegSet; // is a set of connected components.; //; // An UberRegSet will likely be a horizontal slice of register names of; // the same width. Nontrivial subregisters should then be in a separate; // UberRegSet. But this property isn't required for valid computation of; // register unit weights.; //; // A Weight field caches the max per-register unit weight in each UberRegSet.; //; // A set of SingularDeterminants flags single units of some register in this set; // for which the unit weight equals the set weight. These units should not have; // their weight increased.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:7,Usability,simpl,simplicitly,7,// For simplicitly make the SetID the same as EnumValue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:3,Deployability,Update,Update,3,// Update the set weight.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:367,Modifiability,inherit,inherit,367,"// normalizeWeight is a computeRegUnitWeights helper that adjusts the weight of; // a register and its subregisters so that they have the same weight as their; // UberSet. Self-recursion processes the subregister tree in postorder so; // subregisters are normalized first.; //; // Side effects:; // - creates new adopted register units; // - causes superregisters to inherit adopted units; // - increases the weight of ""singular"" units; // - induces recomputation of UberWeights.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:41,Modifiability,Inherit,Inherit,41,// Postorder register normalization.; // Inherit register units newly adopted by subregisters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:87,Safety,avoid,avoid,87,"// We can pick any of the set names for the merged set. Go for the; // shortest one to avoid picking the name of one of the classes that are; // artificially created by tablegen. So ""FPR128_lo"" instead of; // ""QQQQ_with_qsub3_in_FPR128_lo"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:125,Energy Efficiency,efficient,efficient,125,"// In theory, this is combinatorial. In practice, it needs to be bounded; // by a small number of sets for regpressure to be efficient.; // If the assert is hit, we need to implement pruning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:147,Testability,assert,assert,147,"// In theory, this is combinatorial. In practice, it needs to be bounded; // by a small number of sets for regpressure to be efficient.; // If the assert is hit, we need to implement pruning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:26,Availability,mask,mask,26,// Create an initial lane mask for all register units.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:44,Availability,mask,masks,44,"// Ignore non-leaf subregisters, their lane masks are fully covered by; // the leaf subregisters anyway.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:177,Deployability,Update,Update,177,//; // Synthesize missing sub-classes for getSubClassWithSubReg().; //; // Make sure that the set of registers in RC with a given SubIdx sub-register; // form a register class. Update RC->SubClassWithSubReg.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:6,Integrability,inject,injects,6,// RC injects completely into SubRC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:6,Security,inject,injects,6,// RC injects completely into SubRC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:45,Availability,mask,mask,45,"/// Used to encode a step in a register lane mask transformation.; /// Mask the bits specified in Mask, then rotate them Rol bits to the left; /// assuming a wraparound at 32bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:71,Availability,Mask,Mask,71,"/// Used to encode a step in a register lane mask transformation.; /// Mask the bits specified in Mask, then rotate them Rol bits to the left; /// assuming a wraparound at 32bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:98,Availability,Mask,Mask,98,"/// Used to encode a step in a register lane mask transformation.; /// Mask the bits specified in Mask, then rotate them Rol bits to the left; /// assuming a wraparound at 32bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:158,Integrability,wrap,wraparound,158,"/// Used to encode a step in a register lane mask transformation.; /// Mask the bits specified in Mask, then rotate them Rol bits to the left; /// assuming a wraparound at 32bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:3,Deployability,Update,Update,3,// Update the composite maps of components specified in 'ComposedOf'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:3,Modifiability,Inherit,Inherit,3,// Inherit register units from subregisters.; // Return true if the RegUnits changed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:7,Availability,mask,mask,7,"// Bit mask of sub-classes including this, indexed by their EnumValue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:28,Modifiability,inherit,inherit,28,"// For a synthesized class, inherit missing properties from the nearest; // super-class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:41,Availability,mask,masks,41,/// Contains the combination of the lane masks of all subregisters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:48,Availability,avail,available,48,// Return the total number of allocation orders available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:307,Modifiability,inherit,inherit,307,"// Register units are used to model interference and register pressure.; // Every register is assigned one or more register units such that two; // registers overlap if and only if they have a register unit in common.; //; // Normally, one register unit is created per leaf register. Non-leaf; // registers inherit the units of their sub-registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:3,Performance,Cache,Cache,3,// Cache the sum of all unit weights.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:3,Performance,Cache,Cache,3,// Cache the sort key.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:18,Availability,mask,mask,18,// Compute a lane mask for each sub-register index.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:20,Availability,mask,mask,20,/// Computes a lane mask for each register unit enumerated by a physical; /// register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:24,Energy Efficiency,allocate,allocated,24,// Return the number of allocated TopoSigs. The first TopoSig representing; // leaf registers is allocated number 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:97,Energy Efficiency,allocate,allocated,97,// Return the number of allocated TopoSigs. The first TopoSig representing; // leaf registers is allocated number 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:145,Usability,simpl,simply,145,// Find or create a TopoSig for the given TopoSigId.; // This function is only for use by CodeGenRegister::computeSuperRegs().; // Others should simply use Reg->getTopoSig().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:281,Availability,mask,mask,281,"// Compute the set of registers completely covered by the registers in Regs.; // The returned BitVector will have a bit set for each register in Regs,; // all sub-registers, and all super-registers that are covered by the; // registers in Regs.; //; // This is used to compute the mask of call-preserved registers from a list; // of callee-saves.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:7,Availability,mask,mask,7,// Bit mask of lanes that cover their registers. A sub-register index whose; // LaneMask is contained in CoveringLanes will be completely covered by; // another sub-register with the same or larger lane mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h:203,Availability,mask,mask,203,// Bit mask of lanes that cover their registers. A sub-register index whose; // LaneMask is contained in CoveringLanes will be completely covered by; // another sub-register with the same or larger lane mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp:29,Energy Efficiency,Schedul,Scheduling,29,"//===- CodeGenSchedule.cpp - Scheduling MachineModels ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines structures to encapsulate the machine model as described in; // the target description.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp:40,Performance,optimiz,optimize,40,// Look for top-level | or ?. We cannot optimize them to binary search.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp:57,Availability,mask,mask,57,// Used by function `processSTIPredicate` to construct a mask of machine; // instruction operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp:65,Availability,mask,masks,65,"// Sort OpcodeMappings elements based on their CPU and predicate masks.; // As a last resort, order elements by opcode identifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp:326,Availability,mask,masks,326,"// Now construct opcode groups. Groups are used by the SubtargetEmitter when; // expanding the body of a STIPredicate function. In particular, each opcode; // group is expanded into a sequence of labels in a switch statement.; // It identifies opcodes for which different processors define same predicates; // and same opcode masks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp:54,Availability,avail,available,54,// Collect processor RetireControlUnit descriptors if available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp:29,Performance,load,load,29,// Collect information about load/store queues.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp:40,Performance,queue,queues,40,// Collect information about load/store queues.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp:49,Deployability,Update,Update,49,// Multiple SchedClasses may share an itinerary. Update all of them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp:298,Deployability,A/B,A/B,298,"// To check if PredDef is mutually exclusive with PC we also need to; // check that PC.Predicate is exclusive with all predicates from variant; // we're expanding. Consider following RW sequence with two variants; // (1 & 2), where A, B and C are predicates from corresponding SchedVars:; //; // 1:A/B - 2:C/B; //; // Here C is not mutually exclusive with variant (1), because A doesn't; // exist in variant (2). This means we have possible transitions from A; // to C and from A to B, and fully expanded sequence would look like:; //; // if (A & C) return ...;; // if (A & B) return ...;; // if (B) return ...;; //; // Now let's consider another sequence:; //; // 1:A/B - 2:A/B; //; // Here A in variant (2) is mutually exclusive with variant (1), because; // A also exists in (2). This means A->B transition is impossible and; // expanded sequence would look like:; //; // if (A) return ...;; // if (B) return ...;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp:667,Deployability,A/B,A/B,667,"// To check if PredDef is mutually exclusive with PC we also need to; // check that PC.Predicate is exclusive with all predicates from variant; // we're expanding. Consider following RW sequence with two variants; // (1 & 2), where A, B and C are predicates from corresponding SchedVars:; //; // 1:A/B - 2:C/B; //; // Here C is not mutually exclusive with variant (1), because A doesn't; // exist in variant (2). This means we have possible transitions from A; // to C and from A to B, and fully expanded sequence would look like:; //; // if (A & C) return ...;; // if (A & B) return ...;; // if (B) return ...;; //; // Now let's consider another sequence:; //; // 1:A/B - 2:A/B; //; // Here A in variant (2) is mutually exclusive with variant (1), because; // A also exists in (2). This means A->B transition is impossible and; // expanded sequence would look like:; //; // if (A) return ...;; // if (B) return ...;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp:675,Deployability,A/B,A/B,675,"// To check if PredDef is mutually exclusive with PC we also need to; // check that PC.Predicate is exclusive with all predicates from variant; // we're expanding. Consider following RW sequence with two variants; // (1 & 2), where A, B and C are predicates from corresponding SchedVars:; //; // 1:A/B - 2:C/B; //; // Here C is not mutually exclusive with variant (1), because A doesn't; // exist in variant (2). This means we have possible transitions from A; // to C and from A to B, and fully expanded sequence would look like:; //; // if (A & C) return ...;; // if (A & B) return ...;; // if (B) return ...;; //; // Now let's consider another sequence:; //; // 1:A/B - 2:A/B; //; // Here A in variant (2) is mutually exclusive with variant (1), because; // A also exists in (2). This means A->B transition is impossible and; // expanded sequence would look like:; //; // if (A) return ...;; // if (B) return ...;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp:191,Safety,detect,detection,191,"// For each variant of a Read/Write in Trans, substitute the sequence of; // Read/Writes guarded by the variant. This is exponential in the number of; // variant Read/Writes, but in practice detection of mutually exclusive; // predicates should result in linear growth in the total number variants.; //; // This is one step in a breadth-first search of nested variants.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp:91,Energy Efficiency,schedul,scheduling,91,// Transition should not contain processor indices already assigned to; // InstRWs in this scheduling class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp:44,Availability,avail,available,44,// Collect all the RegisterFile definitions available in this target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp:111,Energy Efficiency,schedul,scheduling,111,"// For each register file definition, construct a CodeGenRegisterFile object; // and add it to the appropriate scheduling model.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h:27,Energy Efficiency,Schedul,Scheduling,27,"//===- CodeGenSchedule.h - Scheduling Machine Models ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines structures to encapsulate the machine model as described in; // the target description.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h:4,Energy Efficiency,Schedul,Scheduling,4,/// Scheduling class.; ///; /// Each instruction description will be mapped to a scheduling class. There are; /// four types of classes:; ///; /// 1) An explicitly defined itinerary class with ItinClassDef set.; /// Writes and ReadDefs are empty. ProcIndices contains 0 for any processor.; ///; /// 2) An implied class with a list of SchedWrites and SchedReads that are; /// defined in an instruction definition and which are common across all; /// subtargets. ProcIndices contains 0 for any processor.; ///; /// 3) An implied class with a list of InstRW records that map instructions to; /// SchedWrites and SchedReads per-processor. InstrClassMap should map the same; /// instructions to this class. ProcIndices contains all the processors that; /// provided InstrRW records for this class. ItinClassDef or Writes/Reads may; /// still be defined for processors with no InstRW entry.; ///; /// 4) An inferred class represents a variant of another class that may be; /// resolved at runtime. ProcIndices contains the set of processors that may; /// require the class. ProcIndices are propagated through SchedClasses as; /// variants are expanded. Multiple SchedClasses may be inferred from an; /// itinerary class. Each inherits the processor index from the ItinRW record; /// that mapped the itinerary class to the variant Writes or Reads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h:81,Energy Efficiency,schedul,scheduling,81,/// Scheduling class.; ///; /// Each instruction description will be mapped to a scheduling class. There are; /// four types of classes:; ///; /// 1) An explicitly defined itinerary class with ItinClassDef set.; /// Writes and ReadDefs are empty. ProcIndices contains 0 for any processor.; ///; /// 2) An implied class with a list of SchedWrites and SchedReads that are; /// defined in an instruction definition and which are common across all; /// subtargets. ProcIndices contains 0 for any processor.; ///; /// 3) An implied class with a list of InstRW records that map instructions to; /// SchedWrites and SchedReads per-processor. InstrClassMap should map the same; /// instructions to this class. ProcIndices contains all the processors that; /// provided InstrRW records for this class. ItinClassDef or Writes/Reads may; /// still be defined for processors with no InstRW entry.; ///; /// 4) An inferred class represents a variant of another class that may be; /// resolved at runtime. ProcIndices contains the set of processors that may; /// require the class. ProcIndices are propagated through SchedClasses as; /// variants are expanded. Multiple SchedClasses may be inferred from an; /// itinerary class. Each inherits the processor index from the ItinRW record; /// that mapped the itinerary class to the variant Writes or Reads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h:1220,Modifiability,inherit,inherits,1220,/// Scheduling class.; ///; /// Each instruction description will be mapped to a scheduling class. There are; /// four types of classes:; ///; /// 1) An explicitly defined itinerary class with ItinClassDef set.; /// Writes and ReadDefs are empty. ProcIndices contains 0 for any processor.; ///; /// 2) An implied class with a list of SchedWrites and SchedReads that are; /// defined in an instruction definition and which are common across all; /// subtargets. ProcIndices contains 0 for any processor.; ///; /// 3) An implied class with a list of InstRW records that map instructions to; /// SchedWrites and SchedReads per-processor. InstrClassMap should map the same; /// instructions to this class. ProcIndices contains all the processors that; /// provided InstrRW records for this class. ItinClassDef or Writes/Reads may; /// still be defined for processors with no InstRW entry.; ///; /// 4) An inferred class represents a variant of another class that may be; /// resolved at runtime. ProcIndices contains the set of processors that may; /// require the class. ProcIndices are propagated through SchedClasses as; /// variants are expanded. Multiple SchedClasses may be inferred from an; /// itinerary class. Each inherits the processor index from the ItinRW record; /// that mapped the itinerary class to the variant Writes or Reads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h:119,Energy Efficiency,schedul,scheduling,119,// Is this class generated from a variants if existing classes? Instructions; // are never mapped directly to inferred scheduling classes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h:177,Safety,predict,predict,177,/// A processor register file.; ///; /// This class describes a processor register file. Register file information is; /// currently consumed by external tools like llvm-mca to predict dispatch; /// stalls due to register pressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h:3,Performance,Load,Load,3,// Load/Store queue descriptors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h:14,Performance,queue,queue,14,// Load/Store queue descriptors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h:14,Availability,mask,mask,14,// An operand mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h:26,Energy Efficiency,schedul,scheduling,26,// iterator access to the scheduling classes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h:12,Security,access,access,12,// iterator access to the scheduling classes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp:629,Availability,error,error,629,"//===- CodeGenTarget.cpp - CodeGen Target Class Wrapper -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class wraps target description classes used by the various code; // generation TableGen backends. This makes it easier to access the data and; // provides a single place that needs to check it for validity. All of these; // classes abort on error conditions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp:48,Integrability,Wrap,Wrapper,48,"//===- CodeGenTarget.cpp - CodeGen Target Class Wrapper -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class wraps target description classes used by the various code; // generation TableGen backends. This makes it easier to access the data and; // provides a single place that needs to check it for validity. All of these; // classes abort on error conditions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp:394,Integrability,wrap,wraps,394,"//===- CodeGenTarget.cpp - CodeGen Target Class Wrapper -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class wraps target description classes used by the various code; // generation TableGen backends. This makes it easier to access the data and; // provides a single place that needs to check it for validity. All of these; // classes abort on error conditions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp:620,Safety,abort,abort,620,"//===- CodeGenTarget.cpp - CodeGen Target Class Wrapper -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class wraps target description classes used by the various code; // generation TableGen backends. This makes it easier to access the data and; // provides a single place that needs to check it for validity. All of these; // classes abort on error conditions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp:510,Security,access,access,510,"//===- CodeGenTarget.cpp - CodeGen Target Class Wrapper -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class wraps target description classes used by the various code; // generation TableGen backends. This makes it easier to access the data and; // provides a single place that needs to check it for validity. All of these; // classes abort on error conditions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp:35,Usability,Simpl,SimpleValueType,35,/// getValueType - Return the MVT::SimpleValueType that the specified TableGen; /// record corresponds to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp:105,Performance,cache,cached,105,/// getInstNamespace - Find and return the target machine's instruction; /// namespace. The namespace is cached because it is requested multiple times.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp:80,Availability,avail,available,80,/// getAsmParserVariantCount - Return the AssemblyParserVariant definition; /// available for this target.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp:3,Deployability,Update,Update,3,// Update the bits in reversed order so that emitInstrOpBits will get the; // correct endianness.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp:115,Availability,error,error,115,/// guessInstructionProperties - Return true if it's OK to guess instruction; /// properties instead of raising an error.; ///; /// This is configurable as a temporary migration aid. It will eventually be; /// permanently false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp:140,Modifiability,config,configurable,140,/// guessInstructionProperties - Return true if it's OK to guess instruction; /// properties instead of raising an error.; ///; /// This is configurable as a temporary migration aid. It will eventually be; /// permanently false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h:612,Availability,error,error,612,"//===- CodeGenTarget.h - Target Class Wrapper -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines wrappers for the Target class and related global; // functionality. This makes it easier to access the data and provides a single; // place that needs to check it for validity. All of these classes abort; // on error conditions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h:38,Integrability,Wrap,Wrapper,38,"//===- CodeGenTarget.h - Target Class Wrapper -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines wrappers for the Target class and related global; // functionality. This makes it easier to access the data and provides a single; // place that needs to check it for validity. All of these classes abort; // on error conditions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h:401,Integrability,wrap,wrappers,401,"//===- CodeGenTarget.h - Target Class Wrapper -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines wrappers for the Target class and related global; // functionality. This makes it easier to access the data and provides a single; // place that needs to check it for validity. All of these classes abort; // on error conditions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h:599,Safety,abort,abort,599,"//===- CodeGenTarget.h - Target Class Wrapper -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines wrappers for the Target class and related global; // functionality. This makes it easier to access the data and provides a single; // place that needs to check it for validity. All of these classes abort; // on error conditions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h:493,Security,access,access,493,"//===- CodeGenTarget.h - Target Class Wrapper -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines wrappers for the Target class and related global; // functionality. This makes it easier to access the data and provides a single; // place that needs to check it for validity. All of these classes abort; // on error conditions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h:35,Usability,Simpl,SimpleValueType,35,/// getValueType - Return the MVT::SimpleValueType that the specified TableGen; /// record corresponds to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h:80,Availability,avail,available,80,/// getAsmParserVariantCount - Return the AssemblyParserVariant definition; /// available for this target.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h:52,Usability,Simpl,SimpleValueTypes,52,/// getRegisterVTs - Find the union of all possible SimpleValueTypes for the; /// specified physical register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenTarget.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:794,Security,validat,validate,794,"//===-------- CompressInstEmitter.cpp - Generator for Compression ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; // CompressInstEmitter implements a tablegen-driven CompressPat based; // Instruction Compression mechanism.; //; //===----------------------------------------------------------------------===//; //; // CompressInstEmitter implements a tablegen-driven CompressPat Instruction; // Compression mechanism for generating compressed instructions from the; // expanded instruction form.; // This tablegen backend processes CompressPat declarations in a; // td file and generates all the required checks to validate the pattern; // declarations; validate the input and output operands to generate the correct; // compressed instructions. The checks include validating different types of; // operands; register operands, immediate operands, fixed register and fixed; // immediate inputs.; //; // Example:; // /// Defines a Pat match between compressed and uncompressed instruction.; // /// The relationship and helper function generation are handled by; // /// CompressInstEmitter backend.; // class CompressPat<dag input, dag output, list<Predicate> predicates = []> {; // /// Uncompressed instruction description.; // dag Input = input;; // /// Compressed instruction description.; // dag Output = output;; // /// Predicates that must be true for this to match.; // list<Predicate> Predicates = predicates;; // /// Duplicate match when tied operand is just different.; // bit isCompressOnly = false;; // }; //; // let Predicates = [HasStdExtC] in {; // def : CompressPat<(ADD GPRNoX0:$rs1, GPRNoX0:$rs1, GPRNoX0:$rs2),; // (C_ADD GPRNoX0:$rs1, GPRNoX0:$rs2)>;; // }; //; // The <TargetName>GenCompressInstEmitter.inc is an auto-generated header; // file which exports two functions for compressing/uncompressing M",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:833,Security,validat,validate,833,"//===-------- CompressInstEmitter.cpp - Generator for Compression ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; // CompressInstEmitter implements a tablegen-driven CompressPat based; // Instruction Compression mechanism.; //; //===----------------------------------------------------------------------===//; //; // CompressInstEmitter implements a tablegen-driven CompressPat Instruction; // Compression mechanism for generating compressed instructions from the; // expanded instruction form.; // This tablegen backend processes CompressPat declarations in a; // td file and generates all the required checks to validate the pattern; // declarations; validate the input and output operands to generate the correct; // compressed instructions. The checks include validating different types of; // operands; register operands, immediate operands, fixed register and fixed; // immediate inputs.; //; // Example:; // /// Defines a Pat match between compressed and uncompressed instruction.; // /// The relationship and helper function generation are handled by; // /// CompressInstEmitter backend.; // class CompressPat<dag input, dag output, list<Predicate> predicates = []> {; // /// Uncompressed instruction description.; // dag Input = input;; // /// Compressed instruction description.; // dag Output = output;; // /// Predicates that must be true for this to match.; // list<Predicate> Predicates = predicates;; // /// Duplicate match when tied operand is just different.; // bit isCompressOnly = false;; // }; //; // let Predicates = [HasStdExtC] in {; // def : CompressPat<(ADD GPRNoX0:$rs1, GPRNoX0:$rs1, GPRNoX0:$rs2),; // (C_ADD GPRNoX0:$rs1, GPRNoX0:$rs2)>;; // }; //; // The <TargetName>GenCompressInstEmitter.inc is an auto-generated header; // file which exports two functions for compressing/uncompressing M",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:944,Security,validat,validating,944,"//===-------- CompressInstEmitter.cpp - Generator for Compression ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; // CompressInstEmitter implements a tablegen-driven CompressPat based; // Instruction Compression mechanism.; //; //===----------------------------------------------------------------------===//; //; // CompressInstEmitter implements a tablegen-driven CompressPat Instruction; // Compression mechanism for generating compressed instructions from the; // expanded instruction form.; // This tablegen backend processes CompressPat declarations in a; // td file and generates all the required checks to validate the pattern; // declarations; validate the input and output operands to generate the correct; // compressed instructions. The checks include validating different types of; // operands; register operands, immediate operands, fixed register and fixed; // immediate inputs.; //; // Example:; // /// Defines a Pat match between compressed and uncompressed instruction.; // /// The relationship and helper function generation are handled by; // /// CompressInstEmitter backend.; // class CompressPat<dag input, dag output, list<Predicate> predicates = []> {; // /// Uncompressed instruction description.; // dag Input = input;; // /// Compressed instruction description.; // dag Output = output;; // /// Predicates that must be true for this to match.; // list<Predicate> Predicates = predicates;; // /// Duplicate match when tied operand is just different.; // bit isCompressOnly = false;; // }; //; // let Predicates = [HasStdExtC] in {; // def : CompressPat<(ADD GPRNoX0:$rs1, GPRNoX0:$rs1, GPRNoX0:$rs2),; // (C_ADD GPRNoX0:$rs1, GPRNoX0:$rs2)>;; // }; //; // The <TargetName>GenCompressInstEmitter.inc is an auto-generated header; // file which exports two functions for compressing/uncompressing M",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:15,Security,validat,validation,15,// Let further validation happen when compress()/uncompress() functions are; // invoked.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:482,Security,validat,validation,482,"/// The patterns in the Dag contain different types of operands:; /// Register operands, e.g.: GPRC:$rs1; Fixed registers, e.g: X1; Immediate; /// operands, e.g.: simm6:$imm; Fixed immediate operands, e.g.: 0. This function; /// maps Dag operands to its corresponding instruction operands. For register; /// operands and fixed registers it expects the Dag operand type to be contained; /// in the instantiated instruction operand type. For immediate operands and; /// immediates no validation checks are enforced at pattern validation time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:524,Security,validat,validation,524,"/// The patterns in the Dag contain different types of operands:; /// Register operands, e.g.: GPRC:$rs1; Fixed registers, e.g: X1; Immediate; /// operands, e.g.: simm6:$imm; Fixed immediate operands, e.g.: 0. This function; /// maps Dag operands to its corresponding instruction operands. For register; /// operands and fixed registers it expects the Dag operand type to be contained; /// in the instantiated instruction operand type. For immediate operands and; /// immediates no validation checks are enforced at pattern validation time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:3,Security,Validat,Validate,3,// Validate that Dag operand type matches the type defined in the; // corresponding instruction. Operands in the input Dag pattern are; // allowed to be a subclass of the type specified in corresponding; // instruction operand instead of being an exact match.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:3,Security,Validat,Validate,3,// Validate that corresponding instruction operand expects an immediate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:14,Security,validat,validation,14,// No pattern validation check possible for values of fixed immediate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:106,Security,Validat,Validate,106,/// Map operand names in the Dag to their index in both corresponding input and; /// output instructions. Validate that operands defined in the input are; /// used in the output pattern while populating the maps.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:141,Availability,Error,Error,141,/// Validates the CompressPattern and create operand mapping.; /// These are the checks to validate a CompressPat pattern declarations.; /// Error out with message under these conditions:; /// - Dag Input opcode is an expanded instruction and Dag Output opcode is a; /// compressed instruction.; /// - Operands in Dag Input must be all used in Dag Output.; /// Register Operand type in Dag Input Type must be contained in the; /// corresponding Source Instruction type.; /// - Register Operand type in Dag Input must be the same as in Dag Ouput.; /// - Register Operand type in Dag Output must be the same as the; /// corresponding Destination Inst type.; /// - Immediate Operand type in Dag Input must be the same as in Dag Ouput.; /// - Immediate Operand type in Dag Ouput must be the same as the corresponding; /// Destination Instruction type.; /// - Fixed register must be contained in the corresponding Source Instruction; /// type.; /// - Fixed register must be contained in the corresponding Destination; /// Instruction type.; /// Warning message printed under these conditions:; /// - Fixed immediate in Dag Input or Dag Ouput cannot be checked at this time; /// and generate warning.; /// - Immediate operand type in Dag Input differs from the corresponding Source; /// Instruction type and generate a warning.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:156,Integrability,message,message,156,/// Validates the CompressPattern and create operand mapping.; /// These are the checks to validate a CompressPat pattern declarations.; /// Error out with message under these conditions:; /// - Dag Input opcode is an expanded instruction and Dag Output opcode is a; /// compressed instruction.; /// - Operands in Dag Input must be all used in Dag Output.; /// Register Operand type in Dag Input Type must be contained in the; /// corresponding Source Instruction type.; /// - Register Operand type in Dag Input must be the same as in Dag Ouput.; /// - Register Operand type in Dag Output must be the same as the; /// corresponding Destination Inst type.; /// - Immediate Operand type in Dag Input must be the same as in Dag Ouput.; /// - Immediate Operand type in Dag Ouput must be the same as the corresponding; /// Destination Instruction type.; /// - Fixed register must be contained in the corresponding Source Instruction; /// type.; /// - Fixed register must be contained in the corresponding Destination; /// Instruction type.; /// Warning message printed under these conditions:; /// - Fixed immediate in Dag Input or Dag Ouput cannot be checked at this time; /// and generate warning.; /// - Immediate operand type in Dag Input differs from the corresponding Source; /// Instruction type and generate a warning.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:1048,Integrability,message,message,1048,/// Validates the CompressPattern and create operand mapping.; /// These are the checks to validate a CompressPat pattern declarations.; /// Error out with message under these conditions:; /// - Dag Input opcode is an expanded instruction and Dag Output opcode is a; /// compressed instruction.; /// - Operands in Dag Input must be all used in Dag Output.; /// Register Operand type in Dag Input Type must be contained in the; /// corresponding Source Instruction type.; /// - Register Operand type in Dag Input must be the same as in Dag Ouput.; /// - Register Operand type in Dag Output must be the same as the; /// corresponding Destination Inst type.; /// - Immediate Operand type in Dag Input must be the same as in Dag Ouput.; /// - Immediate Operand type in Dag Ouput must be the same as the corresponding; /// Destination Instruction type.; /// - Fixed register must be contained in the corresponding Source Instruction; /// type.; /// - Fixed register must be contained in the corresponding Destination; /// Instruction type.; /// Warning message printed under these conditions:; /// - Fixed immediate in Dag Input or Dag Ouput cannot be checked at this time; /// and generate warning.; /// - Immediate operand type in Dag Input differs from the corresponding Source; /// Instruction type and generate a warning.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:4,Security,Validat,Validates,4,/// Validates the CompressPattern and create operand mapping.; /// These are the checks to validate a CompressPat pattern declarations.; /// Error out with message under these conditions:; /// - Dag Input opcode is an expanded instruction and Dag Output opcode is a; /// compressed instruction.; /// - Operands in Dag Input must be all used in Dag Output.; /// Register Operand type in Dag Input Type must be contained in the; /// corresponding Source Instruction type.; /// - Register Operand type in Dag Input must be the same as in Dag Ouput.; /// - Register Operand type in Dag Output must be the same as the; /// corresponding Destination Inst type.; /// - Immediate Operand type in Dag Input must be the same as in Dag Ouput.; /// - Immediate Operand type in Dag Ouput must be the same as the corresponding; /// Destination Instruction type.; /// - Fixed register must be contained in the corresponding Source Instruction; /// type.; /// - Fixed register must be contained in the corresponding Destination; /// Instruction type.; /// Warning message printed under these conditions:; /// - Fixed immediate in Dag Input or Dag Ouput cannot be checked at this time; /// and generate warning.; /// - Immediate operand type in Dag Input differs from the corresponding Source; /// Instruction type and generate a warning.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:91,Security,validat,validate,91,/// Validates the CompressPattern and create operand mapping.; /// These are the checks to validate a CompressPat pattern declarations.; /// Error out with message under these conditions:; /// - Dag Input opcode is an expanded instruction and Dag Output opcode is a; /// compressed instruction.; /// - Operands in Dag Input must be all used in Dag Output.; /// Register Operand type in Dag Input Type must be contained in the; /// corresponding Source Instruction type.; /// - Register Operand type in Dag Input must be the same as in Dag Ouput.; /// - Register Operand type in Dag Output must be the same as the; /// corresponding Destination Inst type.; /// - Immediate Operand type in Dag Input must be the same as in Dag Ouput.; /// - Immediate Operand type in Dag Ouput must be the same as the corresponding; /// Destination Instruction type.; /// - Fixed register must be contained in the corresponding Source Instruction; /// type.; /// - Fixed register must be contained in the corresponding Destination; /// Instruction type.; /// Warning message printed under these conditions:; /// - Fixed immediate in Dag Input or Dag Ouput cannot be checked at this time; /// and generate warning.; /// - Immediate operand type in Dag Input differs from the corresponding Source; /// Instruction type and generate a warning.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:3,Security,Validat,Validate,3,// Validate input Dag operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:3,Security,Validat,Validate,3,// Validate output Dag operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:30,Security,validat,validation,30,// Start Source Inst operands validation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:27,Security,validat,validated,27,// Fixed register has been validated at pattern validation time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:48,Security,validat,validation,48,// Fixed register has been validated at pattern validation time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp:40,Security,validat,validating,40,"// Process the CompressPat definitions, validating them as we do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CompressInstEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CTagsEmitter.cpp:530,Integrability,interface,interface,530,"//===- CTagsEmitter.cpp - Generate ctags-compatible index ------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This tablegen backend emits an index of definitions in ctags(1) format.; // A helper script, utils/TableGen/tdtags, provides an easier-to-use; // interface; run 'tdtags -H' for documentation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/CTagsEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CTagsEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.cpp:45,Safety,safe,safe,45,/// canMoveBeforeNode - Return true if it is safe to move the current matcher; /// across the specified one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.cpp:15,Usability,simpl,simple,15,// We can move simple predicates before record nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.cpp:35,Usability,simpl,simple,35,// We can move record nodes across simple predicates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h:22,Deployability,update,update,22,// Finish a match and update the results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h:36,Deployability,update,update,36,"// Build a node, finish a match and update results.; // Highest enum value; watch out when adding more.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h:53,Usability,simpl,simple,53,/// isSimplePredicateNode - Return true if this is a simple predicate that; /// operates on the node or its children without potential side effects or a; /// change of the current node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h:83,Usability,simpl,simple,83,/// isSimplePredicateOrRecordNode - Return true if this is a record node or; /// a simple predicate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h:45,Safety,safe,safe,45,/// canMoveBeforeNode - Return true if it is safe to move the current; /// matcher across the specified one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h:120,Testability,log,logically,120,"/// RecordChildMatcher - Save a numbered child of the current node, or fail; /// the match if it doesn't exist. This is logically equivalent to:; /// MoveChild N + RecordNode + MoveParent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h:115,Safety,safe,safe,115,/// CheckFoldableChainNodeMatcher - This checks to see if the current node; /// (which defines a chain operand) is safe to fold into a larger pattern.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcher.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherEmitter.cpp:6,Energy Efficiency,reduce,reduce,6,// To reduce generated source code size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:4,Modifiability,Variab,VariableMap,4,/// VariableMap - A map from variable names ('$dst') to the recorded operand; /// number that they were captured as. These are biased by 1 to make; /// insertion easier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:29,Modifiability,variab,variable,29,/// VariableMap - A map from variable names ('$dst') to the recorded operand; /// number that they were captured as. These are biased by 1 to make; /// insertion easier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:150,Modifiability,Variab,VariableMap,150,/// This maintains the recorded operand number that OPC_CheckComplexPattern; /// drops each sub-operand into. We don't want to insert these into; /// VariableMap because that leads to identity checking if they are; /// encountered multiple times. Biased by 1 like VariableMap for; /// consistency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:264,Modifiability,Variab,VariableMap,264,/// This maintains the recorded operand number that OPC_CheckComplexPattern; /// drops each sub-operand into. We don't want to insert these into; /// VariableMap because that leads to identity checking if they are; /// encountered multiple times. Biased by 1 like VariableMap for; /// consistency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:497,Performance,perform,perform,497,"// We need to produce the matcher tree for the patterns source pattern. To; // do this we need to match the structure as well as the types. To do the; // type matching, we want to figure out the fewest number of type checks we; // need to emit. For example, if there is only one integer type supported; // by a target, there should be no type comparisons at all for integer; // patterns!; //; // To figure out the fewest number of type checks needed, clone the pattern,; // remove the types, then perform type inference on the pattern as a whole.; // If there are unresolved types, emit an explicit check for those types,; // apply the type to the tree, then rerun type inference. Iterate until all; // types are resolved.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:257,Availability,redundant,redundant,257,"/// InferPossibleTypes - As we emit the pattern, we end up generating type; /// checks and applying them to the 'PatWithNoTypes' tree. As we do this, we; /// want to propagate implied types as far throughout the tree as possible so; /// that we avoid doing redundant type checks. This does the type propagation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:245,Safety,avoid,avoid,245,"/// InferPossibleTypes - As we emit the pattern, we end up generating type; /// checks and applying them to the 'PatWithNoTypes' tree. As we do this, we; /// want to propagate implied types as far throughout the tree as possible so; /// that we avoid doing redundant type checks. This does the type propagation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:257,Safety,redund,redundant,257,"/// InferPossibleTypes - As we emit the pattern, we end up generating type; /// checks and applying them to the 'PatWithNoTypes' tree. As we do this, we; /// want to propagate implied types as far throughout the tree as possible so; /// that we avoid doing redundant type checks. This does the type propagation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:60,Availability,redundant,redundant,60,"// If this is the root of the dag we're matching, we emit a redundant opcode; // check to ensure that this gets folded into the normal top-level; // OpcodeSwitch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:60,Safety,redund,redundant,60,"// If this is the root of the dag we're matching, we emit a redundant opcode; // check to ensure that this gets folded into the normal top-level; // OpcodeSwitch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:60,Availability,redundant,redundant,60,"// If this is the root of the dag we're matching, we emit a redundant opcode; // check to ensure that this gets folded into the normal top-level; // OpcodeSwitch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:60,Safety,redund,redundant,60,"// If this is the root of the dag we're matching, we emit a redundant opcode; // check to ensure that this gets folded into the normal top-level; // OpcodeSwitch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:112,Security,validat,validated,112,"// The ""name"" of a non-leaf complex pattern (MY_PAT $op1, $op2) is; // ""MY_PAT:op1:op2"". We should already have validated that the uses are; // consistent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:542,Availability,mask,mask,542,"// If this is an 'and R, 1234' where the operation is AND/OR and the RHS is; // a constant without a predicate fn that has more than one bit set, handle; // this as a special case. This is usually for targets that have special; // handling of certain large constants (e.g. alpha with it's 8/16/32-bit; // handling stuff). Using these instructions is often far more efficient; // than materializing the constant. Unfortunately, both the instcombiner; // and the dag combiner can often infer that bits are dead, and thus drop; // them from the mask in the dag. For example, it might turn 'AND X, 255'; // into 'AND X, 254' if it knows the low bit is set. Emit code that checks; // to handle this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:365,Energy Efficiency,efficient,efficient,365,"// If this is an 'and R, 1234' where the operation is AND/OR and the RHS is; // a constant without a predicate fn that has more than one bit set, handle; // this as a special case. This is usually for targets that have special; // handling of certain large constants (e.g. alpha with it's 8/16/32-bit; // handling stuff). Using these instructions is often far more efficient; // than materializing the constant. Unfortunately, both the instcombiner; // and the dag combiner can often infer that bits are dead, and thus drop; // them from the mask in the dag. For example, it might turn 'AND X, 255'; // into 'AND X, 254' if it knows the low bit is set. Emit code that checks; // to handle this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:87,Availability,redundant,redundant,87,"// Don't bother with single bits.; // If this is at the root of the pattern, we emit a redundant; // CheckOpcode so that the following checks get factored properly under; // a single opcode check.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:87,Safety,redund,redundant,87,"// Don't bother with single bits.; // If this is at the root of the pattern, we emit a redundant; // CheckOpcode so that the following checks get factored properly under; // a single opcode check.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:49,Performance,load,load,49,"// If this node has memory references (i.e. is a load or store), tell the; // interpreter to capture them in the memref array.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:303,Performance,load,load,303,"// If this node is not the root and the subtree underneath it produces a; // chain, then the result of matching the node is also produce a chain.; // Beyond that, this means that we're also folding (at least) the root node; // into the node that produce the chain (for example, matching; // ""(add reg, (load ptr))"" as a add_with_memory on X86). This is; // problematic, if the 'reg' node also uses the load (say, its chain).; // Graphically:; //; // [LD]; // ^ ^; // | \ DAG's like cheese.; // / |; // / [YY]; // | ^; // [XX]--/; //; // It would be invalid to fold XX and LD. In this case, folding the two; // nodes together would induce a cycle in the DAG, making it a 'cyclic DAG'; // To prevent this, we emit a dynamic check for legality before allowing; // this to be folded.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:402,Performance,load,load,402,"// If this node is not the root and the subtree underneath it produces a; // chain, then the result of matching the node is also produce a chain.; // Beyond that, this means that we're also folding (at least) the root node; // into the node that produce the chain (for example, matching; // ""(add reg, (load ptr))"" as a add_with_memory on X86). This is; // problematic, if the 'reg' node also uses the load (say, its chain).; // Graphically:; //; // [LD]; // ^ ^; // | \ DAG's like cheese.; // / |; // / [YY]; // | ^; // [XX]--/; //; // It would be invalid to fold XX and LD. In this case, folding the two; // nodes together would induce a cycle in the DAG, making it a 'cyclic DAG'; // To prevent this, we emit a dynamic check for legality before allowing; // this to be folded.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:14,Availability,redundant,redundantly,14,// TODO: This redundantly records nodes with both glues and chains.; // Record the node and remember it in our chained nodes list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:14,Safety,redund,redundantly,14,// TODO: This redundantly records nodes with both glues and chains.; // Record the node and remember it in our chained nodes list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:61,Modifiability,Variab,VariableMap,61,"// If this node has a name associated with it, capture it in VariableMap. If; // we already saw this in the pattern, emit code to verify dagness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:160,Integrability,Depend,Depending,160,"// If the root of the pattern is a ComplexPattern and if it is specified to; // match some number of root opcodes, these are considered to be our variants.; // Depending on which variant we're generating code for, emit the root opcode; // check.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:59,Safety,abort,aborting,59,"// Emit a CheckComplexPat operation, which does the match (aborting if it; // fails) and pushes the matched operands onto the recorded nodes list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp:22,Performance,load,load,22,"// Instructions which load and store from memory should have a chain,; // regardless of whether they happen to have a pattern saying so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp:31,Performance,Optimiz,Optimize,31,"//===- DAGISelMatcherOpt.cpp - Optimize a DAG Matcher ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the DAG Matcher optimizer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp:420,Performance,optimiz,optimizer,420,"//===- DAGISelMatcherOpt.cpp - Optimize a DAG Matcher ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the DAG Matcher optimizer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp:4,Integrability,Contract,ContractNodes,4,/// ContractNodes - Turn multiple matcher node patterns like 'MoveChild+Record'; /// into single compound nodes like RecordChild.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp:33,Availability,down,down,33,"// If we have a scope node, walk down all of the children.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp:57,Energy Efficiency,reduce,reduce,57,// Look for a push node. Iterates instead of recurses to reduce stack usage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp:27,Usability,simpl,simple,27,"// If we're scanning for a simple node, see if it occurs later in the; // sequence. If so, and if we can move it up, it might be contradictory; // or the same as what we're looking for. If so, reorder it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp:87,Availability,down,down,87,"// If we removed any equal matchers, we may need to slide the rest of the; // elements down for the next iteration of the outer loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp:3,Deployability,Update,Update,3,// Update end pointer for outer loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp:31,Deployability,update,updated,31,// Trim the array to match the updated end.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp:12,Availability,down,down,12,"// If we're down to a single pattern to match, then we don't need this scope; // anymore.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp:67,Usability,simpl,simplify,67,"// If our factoring failed (didn't achieve anything) see if we can simplify in; // other ways.; // Check to see if all of the leading entries are now opcode checks. If so,; // we can convert this Scope to be a OpcodeSwitch instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DAGISelMatcherOpt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:476,Modifiability,variab,variable,476,"//===---------------- DecoderEmitter.cpp - Decoder Generator --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // It contains the tablegen backend that emits the decoder functions for; // targets with fixed/variable length instruction set.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:93,Testability,log,logic,93,"// end anonymous namespace; // The set (BIT_TRUE, BIT_FALSE, BIT_UNSET) represents a ternary logic system; // for a bit value.; //; // BIT_UNFILTERED is used as the init value for a filter position. It is used; // only for filter processings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:3,Modifiability,variab,variable,3,// variable length instruction,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:303,Testability,log,logic,303,"/// Filter - Filter works with FilterChooser to produce the decoding tree for; /// the ISA.; ///; /// It is useful to think of a Filter as governing the switch stmts of the; /// decoding tree in a certain level. Each case stmt delegates to an inferior; /// FilterChooser to decide what further decoding logic to employ, or in another; /// words, what other remaining bits to look at. The FilterChooser eventually; /// chooses a best Filter to do its job.; ///; /// This recursive scheme ends when the number of Opcodes assigned to the; /// FilterChooser becomes 1 or if there is a conflict. A conflict happens when; /// the Filter/FilterChooser combo does not know how to distinguish among the; /// Opcodes assigned.; ///; /// An example of a conflict is; ///; /// Conflict:; /// 111101000.00........00010000....; /// 111101000.00........0001........; /// 1111010...00........0001........; /// 1111010...00....................; /// 1111010.........................; /// 1111............................; /// ................................; /// VST4q8a 111101000_00________00010000____; /// VST4q8b 111101000_00________00010000____; ///; /// The Debug output shows the path that the decoding tree follows to reach the; /// the conclusion that there is a conflict. VST4q8a is a vst4 to double-spaced; /// even registers, while VST4q8b is a vst4 to double-spaced odd registers.; ///; /// The encoding info in the .td files does not specify this meta information,; /// which could have been used by the decoder to resolve the conflict. The; /// decoder could try to decode the even/odd register numbering and assign to; /// VST4q8a or VST4q8b, but for the time being, the decoder chooses the ""a""; /// version and return the Opcode since the two have the same Asm format string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:198,Availability,down,down,198,"/// FilterChooser - FilterChooser chooses the best filter among a set of Filters; /// in order to perform the decoding of instructions at the current level.; ///; /// Decoding proceeds from the top down. Based on the well-known encoding bits; /// of instructions available, FilterChooser builds up the possible Filters that; /// can further the task of decoding by distinguishing among the remaining; /// candidate instructions.; ///; /// Once a filter has been chosen, it is called upon to divide the decoding task; /// into sub-tasks and delegates them to its inferior FilterChoosers for further; /// processings.; ///; /// It is useful to think of a Filter as governing the switch stmts of the; /// decoding tree. And each case is delegated to an inferior FilterChooser to; /// decide what further remaining bits to look at.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:263,Availability,avail,available,263,"/// FilterChooser - FilterChooser chooses the best filter among a set of Filters; /// in order to perform the decoding of instructions at the current level.; ///; /// Decoding proceeds from the top down. Based on the well-known encoding bits; /// of instructions available, FilterChooser builds up the possible Filters that; /// can further the task of decoding by distinguishing among the remaining; /// candidate instructions.; ///; /// Once a filter has been chosen, it is called upon to divide the decoding task; /// into sub-tasks and delegates them to its inferior FilterChoosers for further; /// processings.; ///; /// It is useful to think of a Filter as governing the switch stmts of the; /// decoding tree. And each case is delegated to an inferior FilterChooser to; /// decide what further remaining bits to look at.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:98,Performance,perform,perform,98,"/// FilterChooser - FilterChooser chooses the best filter among a set of Filters; /// in order to perform the decoding of instructions at the current level.; ///; /// Decoding proceeds from the top down. Based on the well-known encoding bits; /// of instructions available, FilterChooser builds up the possible Filters that; /// can further the task of decoding by distinguishing among the remaining; /// candidate instructions.; ///; /// Once a filter has been chosen, it is called upon to divide the decoding task; /// into sub-tasks and delegates them to its inferior FilterChoosers for further; /// processings.; ///; /// It is useful to think of a Filter as governing the switch stmts of the; /// decoding tree. And each case is delegated to an inferior FilterChooser to; /// decide what further remaining bits to look at.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:30,Availability,down,down,30,// Array of bit values passed down from our parent.; // Set to all BIT_UNFILTERED's for Parent == NULL.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:53,Availability,mask,mask,53,"// We may have a SoftFail bitmask, which specifies a mask where an encoding; // may differ from the value in ""Inst"" and yet still be valid, but the; // disassembler should return SoftFail instead of Success.; //; // This is used for marking UNPREDICTABLE instructions in the ARM world.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:177,Availability,down,down,177,// FilterProcessor scans the well-known encoding bits of the instructions and; // builds up a list of candidate filters. It chooses the best filter and; // recursively descends down the decoding tree.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:195,Availability,error,error,195,"// Decides on the best configuration of filter(s) to use in order to decode; // the instructions. A conflict of instructions may occur, in which case we; // dump the conflict set to the standard error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:23,Deployability,configurat,configuration,23,"// Decides on the best configuration of filter(s) to use in order to decode; // the instructions. A conflict of instructions may occur, in which case we; // dump the conflict set to the standard error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:23,Modifiability,config,configuration,23,"// Decides on the best configuration of filter(s) to use in order to decode; // the instructions. A conflict of instructions may occur, in which case we; // dump the conflict set to the standard error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:98,Modifiability,Variab,Variable,98,"// Some of the encoding bit(s) are unspecified. This contributes to; // one additional member of ""Variable"" instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:13,Modifiability,inherit,inheriting,13,// Starts by inheriting our parent filter chooser's filter bit values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:125,Modifiability,variab,variable,125,// Delegates to an inferior filter chooser for further processing on this; // group of instructions whose segment values are variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:45,Modifiability,variab,variable,45,// Field value -1 implies a non-empty set of variable instructions.; // See also recurse().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:51,Deployability,update,update,51,"// Now that we've emitted the body of the handler, update the NumToSkip; // of the filter itself to be able to skip forward when false. Subtract; // two as to account for the width of the NumToSkip field itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:56,Availability,recover,recover,56,// FIXME: We may be able to use the NumToSkip values to recover; // appropriate indentation levels.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:56,Safety,recover,recover,56,// FIXME: We may be able to use the NumToSkip values to recover; // appropriate indentation levels.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:12,Availability,mask,mask,12,// Positive mask,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:12,Availability,mask,mask,12,// Negative mask,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:138,Performance,perform,performance,138,"// Using the full decoder string as the key value here is a bit; // heavyweight, but is effective. If the string comparisons become a; // performance concern, we can implement a mangling of the predicate; // data easily enough with a map back to the actual string. That's; // overkill for now, though.; // Make sure the predicate is in the table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:140,Performance,perform,performance,140,"// Using the full predicate string as the key value here is a bit; // heavyweight, but is effective. If the string comparisons become a; // performance concern, we can implement a mangling of the predicate; // data easily enough with a map back to the actual string. That's; // overkill for now, though.; // Make sure the predicate is in the table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:39,Availability,error,error,39,// The bit is not set; this must be an error!,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:48,Energy Efficiency,allocate,allocate,48,"// The fixup is always 24-bits, so go ahead and allocate the space; // in the table so all our relative position calculations work OK even; // before we fully resolve the real value here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:18,Availability,failure,failure,18,// Check for soft failure of the match.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:198,Modifiability,variab,variable,198,"// Produce OPC_Decode or OPC_TryDecode opcode based on the information; // whether the instruction decoder is complete or not. If it is complete; // then it handles all possible values of remaining variable/unfiltered bits; // and for any value can determine if the bitpattern is a valid instruction; // or not. This means OPC_Decode will be the final step in the decoding; // process. If it is not complete, then the Fail return code from the; // decoder method indicates that additional processing should be done to see; // if there is any other instruction that also matches the bitpattern and; // can decode it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate the space for the fixup.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:97,Modifiability,variab,variable,97,// complex singletons need predicate checks from the first singleton; // to refer forward to the variable filterchooser that follows.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:177,Availability,down,down,177,// FilterProcessor scans the well-known encoding bits of the instructions and; // builds up a list of candidate filters. It chooses the best filter and; // recursively descends down the decoding tree.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:86,Performance,perform,performing,86,// We have finished with the filter processings. Now it's time to choose; // the best performing filter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:243,Availability,error,error,243,"// end of FilterChooser::filterProcessor(bool); // Decides on the best configuration of filter(s) to use in order to decode; // the instructions. A conflict of instructions may occur, in which case we; // dump the conflict set to the standard error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:71,Deployability,configurat,configuration,71,"// end of FilterChooser::filterProcessor(bool); // Decides on the best configuration of filter(s) to use in order to decode; // the instructions. A conflict of instructions may occur, in which case we; // dump the conflict set to the standard error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:71,Modifiability,config,configuration,71,"// end of FilterChooser::filterProcessor(bool); // Decides on the best configuration of filter(s) to use in order to decode; // the instructions. A conflict of instructions may occur, in which case we; // dump the conflict set to the standard error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:52,Integrability,depend,depending,52,// Some bits of the operand may be required to be 1 depending on the; // instruction's encoding. Collect those bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:26,Availability,error,error,26,"// FIXME: it should be an error not to find a definition for a given; // operand, rather than just failing to add it to the resulting; // instruction! (This is a longstanding bug, which will be addressed in an; // upcoming change.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:236,Performance,optimiz,optimized,236,// emitFieldFromInstruction - Emit the templated helper function; // fieldFromInstruction().; // On Windows we make sure that this function is not inlined when; // using the VS compiler. It has a bug which causes the function; // to be optimized out in some circumstances. See llvm.org/pr38292,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:3,Modifiability,Parameteriz,Parameterize,3,// Parameterize the decoders based on namespace and instruction width.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:23,Usability,clear,cleared,23,"// The decode table is cleared for each top level decoder function. The; // predicates and decoders themselves, however, are shared across all; // decoders to give more opportunities for uniqueing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:7,Modifiability,variab,variable,7,"// For variable instruction, we emit a instruction length table; // to let the decoder know how long the instructions are.; // You can see example usage in M68k's disassembler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DFAEmitter.cpp:128,Testability,test,test,128,"// Implementation note: We don't bake a simple std::pair<> here as it requires; // significantly more effort to parse. A simple test with a large array of; // struct-pairs (N=100000) took clang-10 6s to parse. The same array of; // std::pair<uint64_t, uint64_t> took 242s. Instead we allow the user to; // define the pair type.; //; // FIXME: It may make sense to emit these as ULEB sequences instead of; // pairs of uint64_t.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DFAEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DFAEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DFAEmitter.cpp:40,Usability,simpl,simple,40,"// Implementation note: We don't bake a simple std::pair<> here as it requires; // significantly more effort to parse. A simple test with a large array of; // struct-pairs (N=100000) took clang-10 6s to parse. The same array of; // std::pair<uint64_t, uint64_t> took 242s. Instead we allow the user to; // define the pair type.; //; // FIXME: It may make sense to emit these as ULEB sequences instead of; // pairs of uint64_t.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DFAEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DFAEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DFAEmitter.cpp:121,Usability,simpl,simple,121,"// Implementation note: We don't bake a simple std::pair<> here as it requires; // significantly more effort to parse. A simple test with a large array of; // struct-pairs (N=100000) took clang-10 6s to parse. The same array of; // std::pair<uint64_t, uint64_t> took 242s. Instead we allow the user to; // define the pair type.; //; // FIXME: It may make sense to emit these as ULEB sequences instead of; // pairs of uint64_t.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DFAEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DFAEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DFAPacketizerEmitter.cpp:405,Energy Efficiency,Schedul,Schedule,405,"//===- DFAPacketizerEmitter.cpp - Packetization DFA for a VLIW machine ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class parses the Schedule.td file and produces an API that can be used; // to reason about whether an instruction can be added to a packet on a VLIW; // architecture. The class internally generates a deterministic finite; // automaton (DFA) that models all possible mappings of machine instructions; // to functional units as instructions are added to a packet.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DFAPacketizerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DFAPacketizerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DFAPacketizerEmitter.cpp:39,Energy Efficiency,schedul,schedule,39,/// Index within this itinerary of the schedule class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DFAPacketizerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DFAPacketizerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DFAPacketizerEmitter.cpp:27,Energy Efficiency,Schedul,ScheduleClass,27,// Output the mapping from ScheduleClass to ResourcesIdx.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DFAPacketizerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DFAPacketizerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DFAPacketizerEmitter.cpp:33,Availability,avail,available,33,// This combo units bits are not available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DFAPacketizerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DFAPacketizerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DirectiveEmitter.cpp:3,Usability,Simpl,Simple,3,// Simple RAII helper for defining ifdef-undef-endif scopes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DirectiveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DirectiveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DirectiveEmitter.cpp:24,Availability,avail,available,24,"// Make the enum values available in the defined namespace. This allows us to; // write something like Enum_X if we have a `using namespace <CppNamespace>`.; // At the same time we do not loose the strong type guarantees of the enum; // class, that is we cannot pass an unsigned as Directive without an explicit; // cast.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DirectiveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DirectiveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DirectiveEmitter.cpp:50,Availability,error,error,50,// Check consitency of records. Return true if an error has been detected.; // Return false if the records are valid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DirectiveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DirectiveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DirectiveEmitter.cpp:65,Safety,detect,detected,65,// Check consitency of records. Return true if an error has been detected.; // Return false if the records are valid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DirectiveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DirectiveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DirectiveEmitter.cpp:14,Usability,simpl,simple,14,// Generate a simple enum set with the give clauses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DirectiveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DirectiveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DirectiveEmitter.cpp:314,Integrability,wrap,wrapped,314,"// Generate classes entry for Flang clauses in the Flang parse-tree; // If the clause as a non-generic class, no entry is generated.; // If the clause does not hold a value, an EMPTY_CLASS is used.; // If the clause class is generic then a WRAPPER_CLASS is used. When the value; // is optional, the value class is wrapped into a std::optional.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DirectiveEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DirectiveEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp:199,Availability,DOWN,DOWN,199,"/// DisassemblerEmitter - Contains disassembler table emitters for various; /// architectures.; /// X86 Disassembler Emitter; ///; /// *** IF YOU'RE HERE TO RESOLVE A ""Primary decode conflict"", LOOK DOWN NEAR; /// THE END OF THIS COMMENT!; ///; /// The X86 disassembler emitter is part of the X86 Disassembler, which is; /// documented in lib/Target/X86/X86Disassembler.h.; ///; /// The emitter produces the tables that the disassembler uses to translate; /// instructions. The emitter generates the following tables:; ///; /// - One table (CONTEXTS_SYM) that contains a mapping of attribute masks to; /// instruction contexts. Although for each attribute there are cases where; /// that attribute determines decoding, in the majority of cases decoding is; /// the same whether or not an attribute is present. For example, a 64-bit; /// instruction with an OPSIZE prefix and an XS prefix decodes the same way in; /// all cases as a 64-bit instruction with only OPSIZE set. (The XS prefix; /// may have effects on its execution, but does not change the instruction; /// returned.) This allows considerable space savings in other tables.; /// - Six tables (ONEBYTE_SYM, TWOBYTE_SYM, THREEBYTE38_SYM, THREEBYTE3A_SYM,; /// THREEBYTEA6_SYM, and THREEBYTEA7_SYM contain the hierarchy that the; /// decoder traverses while decoding an instruction. At the lowest level of; /// this hierarchy are instruction UIDs, 16-bit integers that can be used to; /// uniquely identify the instruction and correspond exactly to its position; /// in the list of CodeGenInstructions for the target.; /// - One table (INSTRUCTIONS_SYM) contains information about the operands of; /// each instruction and how to decode them.; ///; /// During table generation, there may be conflicts between instructions that; /// occupy the same space in the decode tables. These conflicts are resolved as; /// follows in setTableFields() (X86DisassemblerTables.cpp); ///; /// - If the current context is the native context for one of the i",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp:592,Availability,mask,masks,592,"/// DisassemblerEmitter - Contains disassembler table emitters for various; /// architectures.; /// X86 Disassembler Emitter; ///; /// *** IF YOU'RE HERE TO RESOLVE A ""Primary decode conflict"", LOOK DOWN NEAR; /// THE END OF THIS COMMENT!; ///; /// The X86 disassembler emitter is part of the X86 Disassembler, which is; /// documented in lib/Target/X86/X86Disassembler.h.; ///; /// The emitter produces the tables that the disassembler uses to translate; /// instructions. The emitter generates the following tables:; ///; /// - One table (CONTEXTS_SYM) that contains a mapping of attribute masks to; /// instruction contexts. Although for each attribute there are cases where; /// that attribute determines decoding, in the majority of cases decoding is; /// the same whether or not an attribute is present. For example, a 64-bit; /// instruction with an OPSIZE prefix and an XS prefix decodes the same way in; /// all cases as a 64-bit instruction with only OPSIZE set. (The XS prefix; /// may have effects on its execution, but does not change the instruction; /// returned.) This allows considerable space savings in other tables.; /// - Six tables (ONEBYTE_SYM, TWOBYTE_SYM, THREEBYTE38_SYM, THREEBYTE3A_SYM,; /// THREEBYTEA6_SYM, and THREEBYTEA7_SYM contain the hierarchy that the; /// decoder traverses while decoding an instruction. At the lowest level of; /// this hierarchy are instruction UIDs, 16-bit integers that can be used to; /// uniquely identify the instruction and correspond exactly to its position; /// in the list of CodeGenInstructions for the target.; /// - One table (INSTRUCTIONS_SYM) contains information about the operands of; /// each instruction and how to decode them.; ///; /// During table generation, there may be conflicts between instructions that; /// occupy the same space in the decode tables. These conflicts are resolved as; /// follows in setTableFields() (X86DisassemblerTables.cpp); ///; /// - If the current context is the native context for one of the i",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp:4040,Deployability,integrat,integration,4040,"he current context isn't native for either of the instructions, then; /// the higher-priority context wins (that is, the one that is more specific).; /// That hierarchy is determined by outranks() (X86DisassemblerTables.cpp); /// - If the current context is native for both instructions, then the table; /// emitter reports a conflict and dies.; ///; /// *** RESOLUTION FOR ""Primary decode conflict""S; ///; /// If two instructions collide, typically the solution is (in order of; /// likelihood):; ///; /// (1) to filter out one of the instructions by editing filter(); /// (X86RecognizableInstr.cpp). This is the most common resolution, but; /// check the Intel manuals first to make sure that (2) and (3) are not the; /// problem.; /// (2) to fix the tables (X86.td and its subsidiaries) so the opcodes are; /// accurate. Sometimes they are not.; /// (3) to fix the tables to reflect the actual context (for example, required; /// prefixes), and possibly to add a new context by editing; /// include/llvm/Support/X86DisassemblerDecoderCommon.h. This is unlikely; /// to be the cause.; ///; /// DisassemblerEmitter.cpp contains the implementation for the emitter,; /// which simply pulls out instructions from the CodeGenTarget and pushes them; /// into X86DisassemblerTables.; /// X86DisassemblerTables.h contains the interface for the instruction tables,; /// which manage and emit the structures discussed above.; /// X86DisassemblerTables.cpp contains the implementation for the instruction; /// tables.; /// X86ModRMFilters.h contains filters that can be used to determine which; /// ModR/M values are valid for a particular instruction. These are used to; /// populate ModRMDecisions.; /// X86RecognizableInstr.h contains the interface for a single instruction,; /// which knows how to translate itself from a CodeGenInstruction and provide; /// the information necessary for integration into the tables.; /// X86RecognizableInstr.cpp contains the implementation for a single; /// instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp:3477,Integrability,interface,interface,3477,"he current context isn't native for either of the instructions, then; /// the higher-priority context wins (that is, the one that is more specific).; /// That hierarchy is determined by outranks() (X86DisassemblerTables.cpp); /// - If the current context is native for both instructions, then the table; /// emitter reports a conflict and dies.; ///; /// *** RESOLUTION FOR ""Primary decode conflict""S; ///; /// If two instructions collide, typically the solution is (in order of; /// likelihood):; ///; /// (1) to filter out one of the instructions by editing filter(); /// (X86RecognizableInstr.cpp). This is the most common resolution, but; /// check the Intel manuals first to make sure that (2) and (3) are not the; /// problem.; /// (2) to fix the tables (X86.td and its subsidiaries) so the opcodes are; /// accurate. Sometimes they are not.; /// (3) to fix the tables to reflect the actual context (for example, required; /// prefixes), and possibly to add a new context by editing; /// include/llvm/Support/X86DisassemblerDecoderCommon.h. This is unlikely; /// to be the cause.; ///; /// DisassemblerEmitter.cpp contains the implementation for the emitter,; /// which simply pulls out instructions from the CodeGenTarget and pushes them; /// into X86DisassemblerTables.; /// X86DisassemblerTables.h contains the interface for the instruction tables,; /// which manage and emit the structures discussed above.; /// X86DisassemblerTables.cpp contains the implementation for the instruction; /// tables.; /// X86ModRMFilters.h contains filters that can be used to determine which; /// ModR/M values are valid for a particular instruction. These are used to; /// populate ModRMDecisions.; /// X86RecognizableInstr.h contains the interface for a single instruction,; /// which knows how to translate itself from a CodeGenInstruction and provide; /// the information necessary for integration into the tables.; /// X86RecognizableInstr.cpp contains the implementation for a single; /// instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp:3890,Integrability,interface,interface,3890,"he current context isn't native for either of the instructions, then; /// the higher-priority context wins (that is, the one that is more specific).; /// That hierarchy is determined by outranks() (X86DisassemblerTables.cpp); /// - If the current context is native for both instructions, then the table; /// emitter reports a conflict and dies.; ///; /// *** RESOLUTION FOR ""Primary decode conflict""S; ///; /// If two instructions collide, typically the solution is (in order of; /// likelihood):; ///; /// (1) to filter out one of the instructions by editing filter(); /// (X86RecognizableInstr.cpp). This is the most common resolution, but; /// check the Intel manuals first to make sure that (2) and (3) are not the; /// problem.; /// (2) to fix the tables (X86.td and its subsidiaries) so the opcodes are; /// accurate. Sometimes they are not.; /// (3) to fix the tables to reflect the actual context (for example, required; /// prefixes), and possibly to add a new context by editing; /// include/llvm/Support/X86DisassemblerDecoderCommon.h. This is unlikely; /// to be the cause.; ///; /// DisassemblerEmitter.cpp contains the implementation for the emitter,; /// which simply pulls out instructions from the CodeGenTarget and pushes them; /// into X86DisassemblerTables.; /// X86DisassemblerTables.h contains the interface for the instruction tables,; /// which manage and emit the structures discussed above.; /// X86DisassemblerTables.cpp contains the implementation for the instruction; /// tables.; /// X86ModRMFilters.h contains filters that can be used to determine which; /// ModR/M values are valid for a particular instruction. These are used to; /// populate ModRMDecisions.; /// X86RecognizableInstr.h contains the interface for a single instruction,; /// which knows how to translate itself from a CodeGenInstruction and provide; /// the information necessary for integration into the tables.; /// X86RecognizableInstr.cpp contains the implementation for a single; /// instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp:4040,Integrability,integrat,integration,4040,"he current context isn't native for either of the instructions, then; /// the higher-priority context wins (that is, the one that is more specific).; /// That hierarchy is determined by outranks() (X86DisassemblerTables.cpp); /// - If the current context is native for both instructions, then the table; /// emitter reports a conflict and dies.; ///; /// *** RESOLUTION FOR ""Primary decode conflict""S; ///; /// If two instructions collide, typically the solution is (in order of; /// likelihood):; ///; /// (1) to filter out one of the instructions by editing filter(); /// (X86RecognizableInstr.cpp). This is the most common resolution, but; /// check the Intel manuals first to make sure that (2) and (3) are not the; /// problem.; /// (2) to fix the tables (X86.td and its subsidiaries) so the opcodes are; /// accurate. Sometimes they are not.; /// (3) to fix the tables to reflect the actual context (for example, required; /// prefixes), and possibly to add a new context by editing; /// include/llvm/Support/X86DisassemblerDecoderCommon.h. This is unlikely; /// to be the cause.; ///; /// DisassemblerEmitter.cpp contains the implementation for the emitter,; /// which simply pulls out instructions from the CodeGenTarget and pushes them; /// into X86DisassemblerTables.; /// X86DisassemblerTables.h contains the interface for the instruction tables,; /// which manage and emit the structures discussed above.; /// X86DisassemblerTables.cpp contains the implementation for the instruction; /// tables.; /// X86ModRMFilters.h contains filters that can be used to determine which; /// ModR/M values are valid for a particular instruction. These are used to; /// populate ModRMDecisions.; /// X86RecognizableInstr.h contains the interface for a single instruction,; /// which knows how to translate itself from a CodeGenInstruction and provide; /// the information necessary for integration into the tables.; /// X86RecognizableInstr.cpp contains the implementation for a single; /// instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp:3333,Usability,simpl,simply,3333,"he current context isn't native for either of the instructions, then; /// the higher-priority context wins (that is, the one that is more specific).; /// That hierarchy is determined by outranks() (X86DisassemblerTables.cpp); /// - If the current context is native for both instructions, then the table; /// emitter reports a conflict and dies.; ///; /// *** RESOLUTION FOR ""Primary decode conflict""S; ///; /// If two instructions collide, typically the solution is (in order of; /// likelihood):; ///; /// (1) to filter out one of the instructions by editing filter(); /// (X86RecognizableInstr.cpp). This is the most common resolution, but; /// check the Intel manuals first to make sure that (2) and (3) are not the; /// problem.; /// (2) to fix the tables (X86.td and its subsidiaries) so the opcodes are; /// accurate. Sometimes they are not.; /// (3) to fix the tables to reflect the actual context (for example, required; /// prefixes), and possibly to add a new context by editing; /// include/llvm/Support/X86DisassemblerDecoderCommon.h. This is unlikely; /// to be the cause.; ///; /// DisassemblerEmitter.cpp contains the implementation for the emitter,; /// which simply pulls out instructions from the CodeGenTarget and pushes them; /// into X86DisassemblerTables.; /// X86DisassemblerTables.h contains the interface for the instruction tables,; /// which manage and emit the structures discussed above.; /// X86DisassemblerTables.cpp contains the implementation for the instruction; /// tables.; /// X86ModRMFilters.h contains filters that can be used to determine which; /// ModR/M values are valid for a particular instruction. These are used to; /// populate ModRMDecisions.; /// X86RecognizableInstr.h contains the interface for a single instruction,; /// which knows how to translate itself from a CodeGenInstruction and provide; /// the information necessary for integration into the tables.; /// X86RecognizableInstr.cpp contains the implementation for a single; /// instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp:94,Integrability,depend,depends,94,"// WebAssembly has variable length opcodes, so can't use EmitFixedLenDecoder; // below (which depends on a Size table-gen Record), and also uses a custom; // disassembler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp:19,Modifiability,variab,variable,19,"// WebAssembly has variable length opcodes, so can't use EmitFixedLenDecoder; // below (which depends on a Size table-gen Record), and also uses a custom; // disassembler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DXILEmitter.cpp:37,Security,access,access,37,"// attribute shorthands: rn=does not access; // memory,ro=only reads from memory",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DXILEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DXILEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DXILEmitter.cpp:29,Usability,feedback,feedback,29,// whether this is a sampler feedback op,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/DXILEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DXILEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/ExegesisEmitter.cpp:48,Availability,avail,available,48,// Collects all the ProcPfmCounters definitions available in this target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/ExegesisEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/ExegesisEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/ExegesisEmitter.cpp:8,Security,Validat,Validation,8,// Emit Validation Counters Array,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/ExegesisEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/ExegesisEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/ExegesisEmitter.cpp:3,Security,Validat,Validation,3,// Validation Counters,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/ExegesisEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/ExegesisEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/FastISelEmitter.cpp:121,Modifiability,variab,variable,121,"// For now, all the operands must have the same type (if they aren't; // immediates). Note that this causes us to reject variable sized shifts; // on X86.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/FastISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/FastISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/FastISelEmitter.cpp:48,Usability,simpl,simple,48,// Scan through all the patterns and record the simple ones.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/FastISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/FastISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/FastISelEmitter.cpp:114,Usability,simpl,simple,114,"// Compute the PhysRegs used by the given pattern, and check that; // the mapping from the src to dst patterns is simple.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/FastISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/FastISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/FastISelEmitter.cpp:82,Availability,down,down,82,"// If any of the operands were immediates with predicates on them, strip; // them down to a signature that doesn't have predicates so that we can; // associate them with the stripped predicate version.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/FastISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/FastISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/FastISelEmitter.cpp:44,Availability,avail,available,44,"// If there are any forms of this signature available that operate on; // constrained forms of the immediate (e.g., 32-bit sext immediate in a; // 64-bit operand), check them first.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/FastISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/FastISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:554,Availability,error,error,554,"//===- GlobalISelCombinerMatchTableEmitter.cpp - --------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Generate a combiner implementation for GlobalISel from a declarative; /// syntax using GlobalISelMatchTable.; ///; /// Usually, TableGen backends use ""assert is an error"" as a means to report; /// invalid input. They try to diagnose common case but don't try very hard and; /// crashes can be common. This backend aims to behave closer to how a language; /// compiler frontend would behave: we try extra hard to diagnose invalid inputs; /// early, and any crash should be considered a bug (= a feature or diagnostic; /// is missing).; ///; /// While this can make the backend a bit more complex than it needs to be, it; /// pays off because MIR patterns can get complicated. Giving useful error; /// messages to combine writers can help boost their productivity.; ///; /// As with anything, a good balance has to be found. We also don't want to; /// write hundreds of lines of code to detect edge cases. In practice, crashing; /// very occasionally, or giving poor errors in some rare instances, is fine.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:1079,Availability,error,error,1079,"//===- GlobalISelCombinerMatchTableEmitter.cpp - --------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Generate a combiner implementation for GlobalISel from a declarative; /// syntax using GlobalISelMatchTable.; ///; /// Usually, TableGen backends use ""assert is an error"" as a means to report; /// invalid input. They try to diagnose common case but don't try very hard and; /// crashes can be common. This backend aims to behave closer to how a language; /// compiler frontend would behave: we try extra hard to diagnose invalid inputs; /// early, and any crash should be considered a bug (= a feature or diagnostic; /// is missing).; ///; /// While this can make the backend a bit more complex than it needs to be, it; /// pays off because MIR patterns can get complicated. Giving useful error; /// messages to combine writers can help boost their productivity.; ///; /// As with anything, a good balance has to be found. We also don't want to; /// write hundreds of lines of code to detect edge cases. In practice, crashing; /// very occasionally, or giving poor errors in some rare instances, is fine.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:1355,Availability,error,errors,1355,"//===- GlobalISelCombinerMatchTableEmitter.cpp - --------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Generate a combiner implementation for GlobalISel from a declarative; /// syntax using GlobalISelMatchTable.; ///; /// Usually, TableGen backends use ""assert is an error"" as a means to report; /// invalid input. They try to diagnose common case but don't try very hard and; /// crashes can be common. This backend aims to behave closer to how a language; /// compiler frontend would behave: we try extra hard to diagnose invalid inputs; /// early, and any crash should be considered a bug (= a feature or diagnostic; /// is missing).; ///; /// While this can make the backend a bit more complex than it needs to be, it; /// pays off because MIR patterns can get complicated. Giving useful error; /// messages to combine writers can help boost their productivity.; ///; /// As with anything, a good balance has to be found. We also don't want to; /// write hundreds of lines of code to detect edge cases. In practice, crashing; /// very occasionally, or giving poor errors in some rare instances, is fine.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:1090,Integrability,message,messages,1090,"//===- GlobalISelCombinerMatchTableEmitter.cpp - --------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Generate a combiner implementation for GlobalISel from a declarative; /// syntax using GlobalISelMatchTable.; ///; /// Usually, TableGen backends use ""assert is an error"" as a means to report; /// invalid input. They try to diagnose common case but don't try very hard and; /// crashes can be common. This backend aims to behave closer to how a language; /// compiler frontend would behave: we try extra hard to diagnose invalid inputs; /// early, and any crash should be considered a bug (= a feature or diagnostic; /// is missing).; ///; /// While this can make the backend a bit more complex than it needs to be, it; /// pays off because MIR patterns can get complicated. Giving useful error; /// messages to combine writers can help boost their productivity.; ///; /// As with anything, a good balance has to be found. We also don't want to; /// write hundreds of lines of code to detect edge cases. In practice, crashing; /// very occasionally, or giving poor errors in some rare instances, is fine.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:1275,Safety,detect,detect,1275,"//===- GlobalISelCombinerMatchTableEmitter.cpp - --------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Generate a combiner implementation for GlobalISel from a declarative; /// syntax using GlobalISelMatchTable.; ///; /// Usually, TableGen backends use ""assert is an error"" as a means to report; /// invalid input. They try to diagnose common case but don't try very hard and; /// crashes can be common. This backend aims to behave closer to how a language; /// compiler frontend would behave: we try extra hard to diagnose invalid inputs; /// early, and any crash should be considered a bug (= a feature or diagnostic; /// is missing).; ///; /// While this can make the backend a bit more complex than it needs to be, it; /// pays off because MIR patterns can get complicated. Giving useful error; /// messages to combine writers can help boost their productivity.; ///; /// As with anything, a good balance has to be found. We also don't want to; /// write hundreds of lines of code to detect edge cases. In practice, crashing; /// very occasionally, or giving poor errors in some rare instances, is fine.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:541,Testability,assert,assert,541,"//===- GlobalISelCombinerMatchTableEmitter.cpp - --------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Generate a combiner implementation for GlobalISel from a declarative; /// syntax using GlobalISelMatchTable.; ///; /// Usually, TableGen backends use ""assert is an error"" as a means to report; /// invalid input. They try to diagnose common case but don't try very hard and; /// crashes can be common. This backend aims to behave closer to how a language; /// compiler frontend would behave: we try extra hard to diagnose invalid inputs; /// early, and any crash should be considered a bug (= a feature or diagnostic; /// is missing).; ///; /// While this can make the backend a bit more complex than it needs to be, it; /// pays off because MIR patterns can get complicated. Giving useful error; /// messages to combine writers can help boost their productivity.; ///; /// As with anything, a good balance has to be found. We also don't want to; /// write hundreds of lines of code to detect edge cases. In practice, crashing; /// very occasionally, or giving poor errors in some rare instances, is fine.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:96,Integrability,wrap,wrapper,96,"//===- CombineRuleOperandTypeChecker --------------------------------------===//; /// This is a wrapper around OperandTypeChecker specialized for Combiner Rules.; /// On top of doing the same things as OperandTypeChecker, this also attempts to; /// infer as many types as possible for temporary register defs & immediates in; /// apply patterns.; ///; /// The inference is trivial and leverages the MCOI OperandTypes encoded in; /// CodeGenInstructions to infer types across patterns in a CombineRule. It's; /// thus very limited and only supports CodeGenInstructions (but that's the main; /// use case so it's fine).; ///; /// We only try to infer untyped operands in apply patterns when they're temp; /// reg defs, or immediates. Inference always outputs a `TypeOf<$x>` where $x is; /// a named operand from a match pattern.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:27,Performance,perform,perform,27,"/// Propagates types, then perform type inference and do a second round of; /// propagation in the apply patterns only if any types were inferred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:15,Usability,simpl,simplest,15,"// This is the simplest possible case, we just need to find a TEC that; // contains OpName. Look at all operands in equivalence class and try to; // find a suitable one. If `AllowSelf` is true, the operand itself is also; // considered suitable.; // Check for a def of a matched pattern. This is guaranteed to always; // be a register so we can blindly use that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:21,Performance,cache,cache,21,// FIXME?: Should we cache this? We call it twice when inferring immediates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:521,Modifiability,variab,variable,521,"//===- CombineRuleBuilder -------------------------------------------------===//; /// Parses combine rule and builds a small intermediate representation to tie; /// patterns together and emit RuleMatchers to match them. This may emit more; /// than one RuleMatcher, e.g. for `wip_match_opcode`.; ///; /// Memory management for `Pattern` objects is done through `std::unique_ptr`.; /// In most cases, there are two stages to a pattern's lifetime:; /// - Creation in a `parse` function; /// - The unique_ptr is stored in a variable, and may be destroyed if the; /// pattern is found to be semantically invalid.; /// - Ownership transfer into a `PatternMap`; /// - Once a pattern is moved into either the map of Match or Apply; /// patterns, it is known to be valid and it never moves back.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:331,Availability,error,error,331,"/// For all PatFragPatterns, add a new entry in PatternAlternatives for each; /// PatternList it contains. This is multiplicative, so if we have 2; /// PatFrags with 3 alternatives each, we get 2*3 permutations added to; /// PermutationsToEmit. The ""MaxPermutations"" field controls how many; /// permutations are allowed before an error is emitted and this function; /// returns false. This is a simple safeguard to prevent combination of; /// PatFrags from generating enormous amounts of rules.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:403,Safety,safe,safeguard,403,"/// For all PatFragPatterns, add a new entry in PatternAlternatives for each; /// PatternList it contains. This is multiplicative, so if we have 2; /// PatFrags with 3 alternatives each, we get 2*3 permutations added to; /// PermutationsToEmit. The ""MaxPermutations"" field controls how many; /// permutations are allowed before an error is emitted and this function; /// returns false. This is a simple safeguard to prevent combination of; /// PatFrags from generating enormous amounts of rules.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:396,Usability,simpl,simple,396,"/// For all PatFragPatterns, add a new entry in PatternAlternatives for each; /// PatternList it contains. This is multiplicative, so if we have 2; /// PatFrags with 3 alternatives each, we get 2*3 permutations added to; /// PermutationsToEmit. The ""MaxPermutations"" field controls how many; /// permutations are allowed before an error is emitted and this function; /// returns false. This is a simple safeguard to prevent combination of; /// PatFrags from generating enormous amounts of rules.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:92,Energy Efficiency,allocate,allocated,92,// Sanity check: the map should point to the same data as the Pattern.; // Both strings are allocated in the pool using insertStrRef.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:3,Safety,Sanity check,Sanity check,3,// Sanity check: the map should point to the same data as the Pattern.; // Both strings are allocated in the pool using insertStrRef.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:39,Testability,test,tests,39,// Sort so output is deterministic for tests. Otherwise it's sorted by pointer; // values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:78,Testability,log,logic,78,"// Ensure we always have a single empty entry, it simplifies the emission; // logic so it doesn't need to handle the case where there are no perms.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:50,Usability,simpl,simplifies,50,"// Ensure we always have a single empty entry, it simplifies the emission; // logic so it doesn't need to handle the case where there are no perms.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:183,Modifiability,variab,variable,183,"// Subclasses of GIDefMatchData should declare that this rule needs to pass; // data from the match stage to the apply stage, and ensure that the; // generated matcher has a suitable variable for it to do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:33,Availability,error,error,33,// Otherwise emit an appropriate error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:39,Integrability,message,message,39,// Otherwise emit an appropriate error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:10,Modifiability,variab,variables,10,// Assign variables to all MatchDatas.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:3,Performance,Cache,Cache,3,// Cache already parsed PatFrags to avoid doing extra work.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:36,Safety,avoid,avoid,36,// Cache already parsed PatFrags to avoid doing extra work.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:60,Safety,avoid,avoid,60,"// This is a temp of the PatFragPattern, prefix the name to avoid; // conflicts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:105,Availability,avail,available,105,"// Always insert the action at the beginning, otherwise we may end up; // using the temp reg before it's available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:278,Usability,clear,clear,278,"// Don't allow mutating opcodes for GISel combiners. We want a more precise; // handling of MIFlags so we require them to be explicitly preserved.; //; // TODO: We don't mutate very often, if at all in combiners, but it'd be nice; // to re-enable this. We'd then need to always clear MIFlags when mutating; // opcodes, and never mutate an inst that we copy flags from.; // DstMI.chooseInsnToMutate(M);",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:142,Usability,simpl,simple,142,"// If we have a type, we implicitly emit a G_CONSTANT, except for G_CONSTANT; // itself where we emit a CImm.; //; // No type means we emit a simple imm.; // G_CONSTANT is a special case and needs a CImm though so this is likely a; // mistake.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:55,Modifiability,rewrite,rewrite,55,// checkSemantics should have ensured that we can only rewrite the root.; // Ensure we're deleting it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:6,Safety,avoid,avoid,6,"// To avoid emitting a switch, we expect that all those rules are in order.; // That way we can just get the RuleID from the enum by subtracting; // (GICXXPred_Invalid + 1).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:65,Usability,simpl,simple,65,/// Recurse into GICombineGroup's and flatten the ruleset into a simple list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:9,Safety,Avoid,Avoid,9,// Hack: Avoid empty declarator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:45,Integrability,depend,dependencies,45,"// GET_GICOMBINER_DEPS, which pulls in extra dependencies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:58,Availability,error,error,58,/// Helper function to let the emitter report skip reason error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:64,Integrability,message,messages,64,/// Helper function to let the emitter report skip reason error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:4,Modifiability,Variab,Variables,4,"/// Variables used to help with collecting of named operands for predicates; /// with 'let PredicateCodeUsesOperands = 1'. WaitingForNamedOperands is set; /// to the number of named operands that predicate expects. Store locations in; /// StoreIdxForName correspond to the order in which operand names appear in; /// predicate's argument list.; /// When we visit named operand and WaitingForNamedOperands is not zero, add; /// matcher that will record operand and decrease counter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:92,Availability,Error,Error,92,"/// Analyze pattern \p P, returning a matcher for it if possible.; /// Otherwise, return an Error explaining why we don't support it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:52,Availability,down,down,52,// Align so unusual types like i1 don't get rounded down.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:31,Modifiability,extend,extending,31,// G_LOAD is used for both non-extending and any-extending loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:49,Modifiability,extend,extending,49,// G_LOAD is used for both non-extending and any-extending loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:59,Performance,load,loads,59,// G_LOAD is used for both non-extending and any-extending loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:49,Modifiability,extend,extending,49,// No check required. G_STORE by itself is a non-extending store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:55,Performance,load,load,55,// No check required. A G_LOAD/G_STORE is an unindexed load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:179,Availability,redundant,redundant,179,"// This isn't strictly true. If the user were to provide exactly the same; // matchers as the original operand then we could allow it. However, it's; // simpler to not permit the redundant specification.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:179,Safety,redund,redundant,179,"// This isn't strictly true. If the user were to provide exactly the same; // matchers as the original operand then we could allow it. However, it's; // simpler to not permit the redundant specification.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:153,Usability,simpl,simpler,153,"// This isn't strictly true. If the user were to provide exactly the same; // matchers as the original operand then we could allow it. However, it's; // simpler to not permit the redundant specification.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:149,Modifiability,extend,extended,149,"// Similarly, imm is an operator in TreePatternNode's view but must be; // rendered as operands.; // FIXME: The target should be able to choose sign-extended when appropriate; // (e.g. on Mips).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:9,Testability,Assert,Assert,9,// TODO: Assert there's exactly one result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:53,Safety,safe,safely,53,// Handle any special-case instructions which we can safely infer register; // classes from.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:47,Safety,safe,safely,47,// Handle destination record types that we can safely infer a register class; // from.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:41,Usability,simpl,simple,41,"// If the root of either pattern isn't a simple operator, ignore it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:929,Availability,down,downside,929,"// The different predicates and matchers created during; // addInstructionMatcher use the RuleMatcher M to set up their; // instruction ID (InsnVarID) that are going to be used when; // M is going to be emitted.; // However, the code doing the emission still relies on the IDs; // returned during that process by the RuleMatcher when issuing; // the recordInsn opcodes.; // Because of that:; // 1. The order in which we created the predicates; // and such must be the same as the order in which we emit them,; // and; // 2. We need to reset the generation of the IDs in M somewhere between; // addInstructionMatcher and emit; //; // FIXME: Long term, we don't want to have to rely on this implicit; // naming being the same. One possible solution would be to have; // explicit operator for operation capture and reference those.; // The plus side is that it would expose opportunities to share; // the capture accross rules. The downside is that it would; // introduce a dependency between predicates (captures must happen; // before their first use.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:971,Integrability,depend,dependency,971,"// The different predicates and matchers created during; // addInstructionMatcher use the RuleMatcher M to set up their; // instruction ID (InsnVarID) that are going to be used when; // M is going to be emitted.; // However, the code doing the emission still relies on the IDs; // returned during that process by the RuleMatcher when issuing; // the recordInsn opcodes.; // Because of that:; // 1. The order in which we created the predicates; // and such must be the same as the order in which we emit them,; // and; // 2. We need to reset the generation of the IDs in M somewhere between; // addInstructionMatcher and emit; //; // FIXME: Long term, we don't want to have to rely on this implicit; // naming being the same. One possible solution would be to have; // explicit operator for operation capture and reference those.; // The plus side is that it would expose opportunities to share; // the capture accross rules. The downside is that it would; // introduce a dependency between predicates (captures must happen; // before their first use.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:864,Security,expose,expose,864,"// The different predicates and matchers created during; // addInstructionMatcher use the RuleMatcher M to set up their; // instruction ID (InsnVarID) that are going to be used when; // M is going to be emitted.; // However, the code doing the emission still relies on the IDs; // returned during that process by the RuleMatcher when issuing; // the recordInsn opcodes.; // Because of that:; // 1. The order in which we created the predicates; // and such must be the same as the order in which we emit them,; // and; // 2. We need to reset the generation of the IDs in M somewhere between; // addInstructionMatcher and emit; //; // FIXME: Long term, we don't want to have to rely on this implicit; // naming being the same. One possible solution would be to have; // explicit operator for operation capture and reference those.; // The plus side is that it would expose opportunities to share; // the capture accross rules. The downside is that it would; // introduce a dependency between predicates (captures must happen; // before their first use.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:15,Performance,optimiz,optimize,15,// TODO: Could optimize this directly to save the compiler some work when; // building the file,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:3,Usability,Simpl,Simple,3,// Simple case (most common),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:89,Testability,log,logic,89,/// This ordering is used for std::unique() and llvm::sort(). There's no; /// particular logic behind the order but either A < B or B < A must be; /// true if A != B.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:122,Usability,clear,clear,122,"// If the value of a flag is unset, ignore it.; // If it's set, it always takes precedence over the existing value so; // clear/set the corresponding bit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:17,Safety,safe,safe,17,// Check if it's safe to replace registers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:30,Safety,safe,safe,30,// We must also check if it's safe to fold the matched instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:875,Availability,fault,fault,875,"// FIXME: Emit checks to determine it's _actually_ safe to fold and/or; // account for unsafe cases.; //; // Example:; // MI1--> %0 = ...; // %1 = ... %0; // MI0--> %2 = ... %0; // It's not safe to erase MI1. We currently handle this by not; // erasing %0 (even when it's dead).; //; // Example:; // MI1--> %0 = load volatile @a; // %1 = load volatile @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // MI1--> %0 = load @a; // %1 = store @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // G_CONDBR %cond, @BB1; // BB0:; // MI1--> %0 = load @a; // G_BR @BB1; // BB1:; // MI0--> %2 = ... %0; // It's not always safe to sink %0 across control flow. In this; // case it may introduce a memory fault. We currentl handle; // this by rejecting all loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:312,Performance,load,load,312,"// FIXME: Emit checks to determine it's _actually_ safe to fold and/or; // account for unsafe cases.; //; // Example:; // MI1--> %0 = ...; // %1 = ... %0; // MI0--> %2 = ... %0; // It's not safe to erase MI1. We currently handle this by not; // erasing %0 (even when it's dead).; //; // Example:; // MI1--> %0 = load volatile @a; // %1 = load volatile @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // MI1--> %0 = load @a; // %1 = store @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // G_CONDBR %cond, @BB1; // BB0:; // MI1--> %0 = load @a; // G_BR @BB1; // BB1:; // MI0--> %2 = ... %0; // It's not always safe to sink %0 across control flow. In this; // case it may introduce a memory fault. We currentl handle; // this by rejecting all loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:338,Performance,load,load,338,"// FIXME: Emit checks to determine it's _actually_ safe to fold and/or; // account for unsafe cases.; //; // Example:; // MI1--> %0 = ...; // %1 = ... %0; // MI0--> %2 = ... %0; // It's not safe to erase MI1. We currently handle this by not; // erasing %0 (even when it's dead).; //; // Example:; // MI1--> %0 = load volatile @a; // %1 = load volatile @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // MI1--> %0 = load @a; // %1 = store @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // G_CONDBR %cond, @BB1; // BB0:; // MI1--> %0 = load @a; // G_BR @BB1; // BB1:; // MI0--> %2 = ... %0; // It's not always safe to sink %0 across control flow. In this; // case it may introduce a memory fault. We currentl handle; // this by rejecting all loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:468,Performance,load,loads,468,"// FIXME: Emit checks to determine it's _actually_ safe to fold and/or; // account for unsafe cases.; //; // Example:; // MI1--> %0 = ...; // %1 = ... %0; // MI0--> %2 = ... %0; // It's not safe to erase MI1. We currently handle this by not; // erasing %0 (even when it's dead).; //; // Example:; // MI1--> %0 = load volatile @a; // %1 = load volatile @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // MI1--> %0 = load @a; // %1 = store @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // G_CONDBR %cond, @BB1; // BB0:; // MI1--> %0 = load @a; // G_BR @BB1; // BB1:; // MI0--> %2 = ... %0; // It's not always safe to sink %0 across control flow. In this; // case it may introduce a memory fault. We currentl handle; // this by rejecting all loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:508,Performance,load,load,508,"// FIXME: Emit checks to determine it's _actually_ safe to fold and/or; // account for unsafe cases.; //; // Example:; // MI1--> %0 = ...; // %1 = ... %0; // MI0--> %2 = ... %0; // It's not safe to erase MI1. We currently handle this by not; // erasing %0 (even when it's dead).; //; // Example:; // MI1--> %0 = load volatile @a; // %1 = load volatile @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // MI1--> %0 = load @a; // %1 = store @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // G_CONDBR %cond, @BB1; // BB0:; // MI1--> %0 = load @a; // G_BR @BB1; // BB1:; // MI0--> %2 = ... %0; // It's not always safe to sink %0 across control flow. In this; // case it may introduce a memory fault. We currentl handle; // this by rejecting all loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:647,Performance,load,loads,647,"// FIXME: Emit checks to determine it's _actually_ safe to fold and/or; // account for unsafe cases.; //; // Example:; // MI1--> %0 = ...; // %1 = ... %0; // MI0--> %2 = ... %0; // It's not safe to erase MI1. We currently handle this by not; // erasing %0 (even when it's dead).; //; // Example:; // MI1--> %0 = load volatile @a; // %1 = load volatile @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // MI1--> %0 = load @a; // %1 = store @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // G_CONDBR %cond, @BB1; // BB0:; // MI1--> %0 = load @a; // G_BR @BB1; // BB1:; // MI0--> %2 = ... %0; // It's not always safe to sink %0 across control flow. In this; // case it may introduce a memory fault. We currentl handle; // this by rejecting all loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:721,Performance,load,load,721,"// FIXME: Emit checks to determine it's _actually_ safe to fold and/or; // account for unsafe cases.; //; // Example:; // MI1--> %0 = ...; // %1 = ... %0; // MI0--> %2 = ... %0; // It's not safe to erase MI1. We currently handle this by not; // erasing %0 (even when it's dead).; //; // Example:; // MI1--> %0 = load volatile @a; // %1 = load volatile @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // MI1--> %0 = load @a; // %1 = store @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // G_CONDBR %cond, @BB1; // BB0:; // MI1--> %0 = load @a; // G_BR @BB1; // BB1:; // MI0--> %2 = ... %0; // It's not always safe to sink %0 across control flow. In this; // case it may introduce a memory fault. We currentl handle; // this by rejecting all loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:927,Performance,load,loads,927,"// FIXME: Emit checks to determine it's _actually_ safe to fold and/or; // account for unsafe cases.; //; // Example:; // MI1--> %0 = ...; // %1 = ... %0; // MI0--> %2 = ... %0; // It's not safe to erase MI1. We currently handle this by not; // erasing %0 (even when it's dead).; //; // Example:; // MI1--> %0 = load volatile @a; // %1 = load volatile @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // MI1--> %0 = load @a; // %1 = store @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // G_CONDBR %cond, @BB1; // BB0:; // MI1--> %0 = load @a; // G_BR @BB1; // BB1:; // MI0--> %2 = ... %0; // It's not always safe to sink %0 across control flow. In this; // case it may introduce a memory fault. We currentl handle; // this by rejecting all loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:51,Safety,safe,safe,51,"// FIXME: Emit checks to determine it's _actually_ safe to fold and/or; // account for unsafe cases.; //; // Example:; // MI1--> %0 = ...; // %1 = ... %0; // MI0--> %2 = ... %0; // It's not safe to erase MI1. We currently handle this by not; // erasing %0 (even when it's dead).; //; // Example:; // MI1--> %0 = load volatile @a; // %1 = load volatile @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // MI1--> %0 = load @a; // %1 = store @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // G_CONDBR %cond, @BB1; // BB0:; // MI1--> %0 = load @a; // G_BR @BB1; // BB1:; // MI0--> %2 = ... %0; // It's not always safe to sink %0 across control flow. In this; // case it may introduce a memory fault. We currentl handle; // this by rejecting all loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:87,Safety,unsafe,unsafe,87,"// FIXME: Emit checks to determine it's _actually_ safe to fold and/or; // account for unsafe cases.; //; // Example:; // MI1--> %0 = ...; // %1 = ... %0; // MI0--> %2 = ... %0; // It's not safe to erase MI1. We currently handle this by not; // erasing %0 (even when it's dead).; //; // Example:; // MI1--> %0 = load volatile @a; // %1 = load volatile @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // MI1--> %0 = load @a; // %1 = store @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // G_CONDBR %cond, @BB1; // BB0:; // MI1--> %0 = load @a; // G_BR @BB1; // BB1:; // MI0--> %2 = ... %0; // It's not always safe to sink %0 across control flow. In this; // case it may introduce a memory fault. We currentl handle; // this by rejecting all loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:190,Safety,safe,safe,190,"// FIXME: Emit checks to determine it's _actually_ safe to fold and/or; // account for unsafe cases.; //; // Example:; // MI1--> %0 = ...; // %1 = ... %0; // MI0--> %2 = ... %0; // It's not safe to erase MI1. We currently handle this by not; // erasing %0 (even when it's dead).; //; // Example:; // MI1--> %0 = load volatile @a; // %1 = load volatile @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // MI1--> %0 = load @a; // %1 = store @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // G_CONDBR %cond, @BB1; // BB0:; // MI1--> %0 = load @a; // G_BR @BB1; // BB1:; // MI0--> %2 = ... %0; // It's not always safe to sink %0 across control flow. In this; // case it may introduce a memory fault. We currentl handle; // this by rejecting all loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:391,Safety,safe,safe,391,"// FIXME: Emit checks to determine it's _actually_ safe to fold and/or; // account for unsafe cases.; //; // Example:; // MI1--> %0 = ...; // %1 = ... %0; // MI0--> %2 = ... %0; // It's not safe to erase MI1. We currently handle this by not; // erasing %0 (even when it's dead).; //; // Example:; // MI1--> %0 = load volatile @a; // %1 = load volatile @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // MI1--> %0 = load @a; // %1 = store @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // G_CONDBR %cond, @BB1; // BB0:; // MI1--> %0 = load @a; // G_BR @BB1; // BB1:; // MI0--> %2 = ... %0; // It's not always safe to sink %0 across control flow. In this; // case it may introduce a memory fault. We currentl handle; // this by rejecting all loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:570,Safety,safe,safe,570,"// FIXME: Emit checks to determine it's _actually_ safe to fold and/or; // account for unsafe cases.; //; // Example:; // MI1--> %0 = ...; // %1 = ... %0; // MI0--> %2 = ... %0; // It's not safe to erase MI1. We currently handle this by not; // erasing %0 (even when it's dead).; //; // Example:; // MI1--> %0 = load volatile @a; // %1 = load volatile @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // MI1--> %0 = load @a; // %1 = store @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // G_CONDBR %cond, @BB1; // BB0:; // MI1--> %0 = load @a; // G_BR @BB1; // BB1:; // MI0--> %2 = ... %0; // It's not always safe to sink %0 across control flow. In this; // case it may introduce a memory fault. We currentl handle; // this by rejecting all loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:795,Safety,safe,safe,795,"// FIXME: Emit checks to determine it's _actually_ safe to fold and/or; // account for unsafe cases.; //; // Example:; // MI1--> %0 = ...; // %1 = ... %0; // MI0--> %2 = ... %0; // It's not safe to erase MI1. We currently handle this by not; // erasing %0 (even when it's dead).; //; // Example:; // MI1--> %0 = load volatile @a; // %1 = load volatile @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // MI1--> %0 = load @a; // %1 = store @a; // MI0--> %2 = ... %0; // It's not safe to sink %0's def past %1. We currently handle; // this by rejecting all loads.; //; // Example:; // G_CONDBR %cond, @BB1; // BB0:; // MI1--> %0 = load @a; // G_BR @BB1; // BB1:; // MI0--> %2 = ... %0; // It's not always safe to sink %0 across control flow. In this; // case it may introduce a memory fault. We currentl handle; // this by rejecting all loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:9,Usability,Simpl,Simple,9,// TODO: Simple permutation looks like it could be almost as common as; // mutation due to commutative operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:355,Modifiability,extend,extend,355,"// Emit the ID's for all the instructions that are matched by this rule.; // TODO: Limit this to matched instructions that mayLoad/mayStore or have; // some other means of having a memoperand. Also limit this to; // emitted instructions that expect to have a memoperand too. For; // example, (G_SEXT (G_LOAD x)) that results in separate load and; // sign-extend instructions shouldn't put the memoperand on the; // sign-extend since it has no effect there.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:420,Modifiability,extend,extend,420,"// Emit the ID's for all the instructions that are matched by this rule.; // TODO: Limit this to matched instructions that mayLoad/mayStore or have; // some other means of having a memoperand. Also limit this to; // emitted instructions that expect to have a memoperand too. For; // example, (G_SEXT (G_LOAD x)) that results in separate load and; // sign-extend instructions shouldn't put the memoperand on the; // sign-extend since it has no effect there.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:337,Performance,load,load,337,"// Emit the ID's for all the instructions that are matched by this rule.; // TODO: Limit this to matched instructions that mayLoad/mayStore or have; // some other means of having a memoperand. Also limit this to; // emitted instructions that expect to have a memoperand too. For; // example, (G_SEXT (G_LOAD x)) that results in separate load and; // sign-extend instructions shouldn't put the memoperand on the; // sign-extend since it has no effect there.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp:3,Safety,Avoid,Avoid,3,// Avoid erasing the same inst twice.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:22,Safety,avoid,avoid,22,// Use a namespace to avoid conflicts because there's some fairly generic names; // in there (e.g. Matcher).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:218,Performance,optimiz,optimization,218,/// Takes a sequence of \p Rules and group them based on the predicates; /// they share. \p MatcherStorage is used as a memory container; /// for the group that are created as part of this process.; ///; /// What this optimization does looks like if GroupT = GroupMatcher:; /// Output without optimization:; /// \verbatim; /// # R1; /// # predicate A; /// # predicate B; /// ...; /// # R2; /// # predicate A // <-- effectively this is going to be checked twice.; /// // Once in R1 and once in R2.; /// # predicate C; /// \endverbatim; /// Output with optimization:; /// \verbatim; /// # Group1_2; /// # predicate A // <-- Check is now shared.; /// # R1; /// # predicate B; /// # R2; /// # predicate C; /// \endverbatim,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:293,Performance,optimiz,optimization,293,/// Takes a sequence of \p Rules and group them based on the predicates; /// they share. \p MatcherStorage is used as a memory container; /// for the group that are created as part of this process.; ///; /// What this optimization does looks like if GroupT = GroupMatcher:; /// Output without optimization:; /// \verbatim; /// # R1; /// # predicate A; /// # predicate B; /// ...; /// # R2; /// # predicate A // <-- effectively this is going to be checked twice.; /// // Once in R1 and once in R2.; /// # predicate C; /// \endverbatim; /// Output with optimization:; /// \verbatim; /// # Group1_2; /// # predicate A // <-- Check is now shared.; /// # R1; /// # predicate B; /// # R2; /// # predicate C; /// \endverbatim,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:551,Performance,optimiz,optimization,551,/// Takes a sequence of \p Rules and group them based on the predicates; /// they share. \p MatcherStorage is used as a memory container; /// for the group that are created as part of this process.; ///; /// What this optimization does looks like if GroupT = GroupMatcher:; /// Output without optimization:; /// \verbatim; /// # R1; /// # predicate A; /// # predicate B; /// ...; /// # R2; /// # predicate A // <-- effectively this is going to be checked twice.; /// // Once in R1 and once in R2.; /// # predicate C; /// \endverbatim; /// Output with optimization:; /// \verbatim; /// # Group1_2; /// # predicate A // <-- Check is now shared.; /// # R1; /// # predicate B; /// # R2; /// # predicate C; /// \endverbatim,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:169,Modifiability,config,configured,169,"/// A record to be stored in a MatchTable.; ///; /// This class represents any and all output that may be required to emit the; /// MatchTable. Instances are most often configured to represent an opcode or; /// value that will be emitted to the table with some formatting but it can also; /// represent commas, comments, and other formatting instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:24,Integrability,Depend,Depending,24,"/// The string to emit. Depending on the MTRF_* flags it may be a comment, a; /// value, a label name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:40,Performance,optimiz,optimized,40,/// Useful if a Match Table Record gets optimized out,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:89,Testability,log,logic,89,/// This ordering is used for std::unique() and llvm::sort(). There's no; /// particular logic behind the order but either A < B or B < A must be; /// true if A != B.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:66,Performance,optimiz,optimizing,66,/// An owning collection for any auxiliary matchers created while optimizing; /// nested matchers contained.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:84,Performance,optimiz,optimize,84,"/// Mark the matcher as fully-built and ensure any invariants expected by both; /// optimize() and emit(...) methods. Generally, both sequences of calls; /// are expected to lead to a sensible result:; ///; /// addMatcher(...)*; finalize(); optimize(); emit(...); and; /// addMatcher(...)*; finalize(); emit(...);; ///; /// or generally; ///; /// addMatcher(...)*; finalize(); { optimize()*; emit(...); }*; ///; /// Multiple calls to optimize() are expected to be handled gracefully, though; /// optimize() is not expected to be idempotent. Multiple calls to finalize(); /// aren't generally supported. emit(...) is expected to be non-mutating and; /// producing the exact same results upon repeated calls.; ///; /// addMatcher() calls after the finalize() call are not supported.; ///; /// finalize() and optimize() are both allowed to mutate the contained; /// matchers, so moving them out after finalize() is not supported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:241,Performance,optimiz,optimize,241,"/// Mark the matcher as fully-built and ensure any invariants expected by both; /// optimize() and emit(...) methods. Generally, both sequences of calls; /// are expected to lead to a sensible result:; ///; /// addMatcher(...)*; finalize(); optimize(); emit(...); and; /// addMatcher(...)*; finalize(); emit(...);; ///; /// or generally; ///; /// addMatcher(...)*; finalize(); { optimize()*; emit(...); }*; ///; /// Multiple calls to optimize() are expected to be handled gracefully, though; /// optimize() is not expected to be idempotent. Multiple calls to finalize(); /// aren't generally supported. emit(...) is expected to be non-mutating and; /// producing the exact same results upon repeated calls.; ///; /// addMatcher() calls after the finalize() call are not supported.; ///; /// finalize() and optimize() are both allowed to mutate the contained; /// matchers, so moving them out after finalize() is not supported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:379,Performance,optimiz,optimize,379,"/// Mark the matcher as fully-built and ensure any invariants expected by both; /// optimize() and emit(...) methods. Generally, both sequences of calls; /// are expected to lead to a sensible result:; ///; /// addMatcher(...)*; finalize(); optimize(); emit(...); and; /// addMatcher(...)*; finalize(); emit(...);; ///; /// or generally; ///; /// addMatcher(...)*; finalize(); { optimize()*; emit(...); }*; ///; /// Multiple calls to optimize() are expected to be handled gracefully, though; /// optimize() is not expected to be idempotent. Multiple calls to finalize(); /// aren't generally supported. emit(...) is expected to be non-mutating and; /// producing the exact same results upon repeated calls.; ///; /// addMatcher() calls after the finalize() call are not supported.; ///; /// finalize() and optimize() are both allowed to mutate the contained; /// matchers, so moving them out after finalize() is not supported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:434,Performance,optimiz,optimize,434,"/// Mark the matcher as fully-built and ensure any invariants expected by both; /// optimize() and emit(...) methods. Generally, both sequences of calls; /// are expected to lead to a sensible result:; ///; /// addMatcher(...)*; finalize(); optimize(); emit(...); and; /// addMatcher(...)*; finalize(); emit(...);; ///; /// or generally; ///; /// addMatcher(...)*; finalize(); { optimize()*; emit(...); }*; ///; /// Multiple calls to optimize() are expected to be handled gracefully, though; /// optimize() is not expected to be idempotent. Multiple calls to finalize(); /// aren't generally supported. emit(...) is expected to be non-mutating and; /// producing the exact same results upon repeated calls.; ///; /// addMatcher() calls after the finalize() call are not supported.; ///; /// finalize() and optimize() are both allowed to mutate the contained; /// matchers, so moving them out after finalize() is not supported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:496,Performance,optimiz,optimize,496,"/// Mark the matcher as fully-built and ensure any invariants expected by both; /// optimize() and emit(...) methods. Generally, both sequences of calls; /// are expected to lead to a sensible result:; ///; /// addMatcher(...)*; finalize(); optimize(); emit(...); and; /// addMatcher(...)*; finalize(); emit(...);; ///; /// or generally; ///; /// addMatcher(...)*; finalize(); { optimize()*; emit(...); }*; ///; /// Multiple calls to optimize() are expected to be handled gracefully, though; /// optimize() is not expected to be idempotent. Multiple calls to finalize(); /// aren't generally supported. emit(...) is expected to be non-mutating and; /// producing the exact same results upon repeated calls.; ///; /// addMatcher() calls after the finalize() call are not supported.; ///; /// finalize() and optimize() are both allowed to mutate the contained; /// matchers, so moving them out after finalize() is not supported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:806,Performance,optimiz,optimize,806,"/// Mark the matcher as fully-built and ensure any invariants expected by both; /// optimize() and emit(...) methods. Generally, both sequences of calls; /// are expected to lead to a sensible result:; ///; /// addMatcher(...)*; finalize(); optimize(); emit(...); and; /// addMatcher(...)*; finalize(); emit(...);; ///; /// or generally; ///; /// addMatcher(...)*; finalize(); { optimize()*; emit(...); }*; ///; /// Multiple calls to optimize() are expected to be handled gracefully, though; /// optimize() is not expected to be idempotent. Multiple calls to finalize(); /// aren't generally supported. emit(...) is expected to be non-mutating and; /// producing the exact same results upon repeated calls.; ///; /// addMatcher() calls after the finalize() call are not supported.; ///; /// finalize() and optimize() are both allowed to mutate the contained; /// matchers, so moving them out after finalize() is not supported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:170,Safety,safe,safe,170,"/// Could be used to move out the matchers added previously, unless finalize(); /// has been already called. If any of the matchers are moved out, the group; /// becomes safe to destroy, but not safe to re-use for anything else.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:195,Safety,safe,safe,195,"/// Could be used to move out the matchers added previously, unless finalize(); /// has been already called. If any of the matchers are moved out, the group; /// becomes safe to destroy, but not safe to re-use for anything else.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:66,Performance,optimiz,optimizing,66,/// An owning collection for any auxiliary matchers created while optimizing; /// nested matchers contained.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:157,Modifiability,extend,extended,157,/// A list of matchers that all need to succeed for the current rule to match.; /// FIXME: This currently supports a single match position but could be; /// extended to support multiple positions to support div/rem fusion or; /// load-multiple instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:230,Performance,load,load-multiple,230,/// A list of matchers that all need to succeed for the current rule to match.; /// FIXME: This currently supports a single match position but could be; /// extended to support multiple positions to support div/rem fusion or; /// load-multiple instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:47,Modifiability,variab,variables,47,/// A map of instruction matchers to the local variables,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:32,Modifiability,variab,variable,32,/// ID for the next instruction variable defined with; /// implicitlyDefineInsnVar(),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:39,Energy Efficiency,allocate,allocated,39,/// ID for the next output instruction allocated with allocateOutputInsnID(),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:54,Energy Efficiency,allocate,allocateOutputInsnID,54,/// ID for the next output instruction allocated with allocateOutputInsnID(),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:42,Energy Efficiency,allocate,allocated,42,/// ID for the next temporary register ID allocated with allocateTempRegID(),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:57,Energy Efficiency,allocate,allocateTempRegID,57,/// ID for the next temporary register ID allocated with allocateTempRegID(),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:59,Availability,down,down,59,/// ID for the next recorded type. Starts at -1 and counts down.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:42,Availability,error,error,42,"/// A map used to for multiple referenced error check of ComplexSubOperand.; /// ComplexSubOperand can't be referenced multiple from different operands,; /// however multiple references from same operand are allowed since that is; /// how 'same operand checks' are generated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:3,Deployability,Update,Update,3,// Update the active GISelFlags based on the GISelFlags Record R.; // A SaveAndRestore object is returned so the old GISelFlags are restored; // at the end of the scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:66,Performance,optimiz,optimization,66,/// Track if the list of predicates was manipulated by one of the optimization; /// methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:33,Testability,test,tests,33,/// Emit MatchTable opcodes that tests whether all the predicates are met.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:26,Safety,avoid,avoid,26,/// Provide a function to avoid emitting certain predicates. This is used to; /// defer some predicate checks until after others,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:171,Testability,test,tested,171,"/// This enum is used for RTTI and also defines the priority that is given to; /// the predicate when generating the matcher code. Kinds with higher priority; /// must be tested first.; ///; /// The relative priority of OPM_LLT, OPM_RegBank, and OPM_MBB do not matter; /// but OPM_Int must have priority over OPM_RegBank since constant integers; /// are represented by a virtual register defined by a G_CONSTANT instruction.; ///; /// Note: The relative priority between IPM_ and OPM_ does not matter, they; /// are currently not compared between each other.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:28,Integrability,depend,depend,28,"// Custom predicates really depend on the context pattern of the; // instruction, not just the individual instruction. This therefore; // implicitly depends on all other pattern constraints.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:149,Integrability,depend,depends,149,"// Custom predicates really depend on the context pattern of the; // instruction, not just the individual instruction. This therefore; // implicitly depends on all other pattern constraints.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:338,Availability,reliab,reliable,338,"/// Generates code to check that an operand is a pointer to any address space.; ///; /// In SelectionDAG, the types did not describe pointers or address spaces. As a; /// result, iN is used to describe a pointer of N bits to any address space and; /// PatFrag predicates are typically used to constrain the address space.; /// There's no reliable means to derive the missing type information from the; /// pattern so imported rules must test the components of a pointer separately.; ///; /// If SizeInBits is zero, then the pointer size will be obtained from the; /// subtarget.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:437,Testability,test,test,437,"/// Generates code to check that an operand is a pointer to any address space.; ///; /// In SelectionDAG, the types did not describe pointers or address spaces. As a; /// result, iN is used to describe a pointer of N bits to any address space and; /// PatFrag predicates are typically used to constrain the address space.; /// There's no reliable means to derive the missing type information from the; /// pattern so imported rules must test the components of a pointer separately.; ///; /// If SizeInBits is zero, then the pointer size will be obtained from the; /// subtarget.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:46,Energy Efficiency,allocate,allocated,46,/// The index of the first temporary variable allocated to this operand. The; /// number of allocated temporaries can be found with; /// countRendererFns().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:92,Energy Efficiency,allocate,allocated,92,/// The index of the first temporary variable allocated to this operand. The; /// number of allocated temporaries can be found with; /// countRendererFns().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:37,Modifiability,variab,variable,37,/// The index of the first temporary variable allocated to this operand. The; /// number of allocated temporaries can be found with; /// countRendererFns().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:186,Usability,simpl,simply,186,"/// If this OperandMatcher has not been assigned a TempTypeIdx yet, assigns it; /// one and adds a `RecordRegisterType` predicate to this matcher. If one has; /// already been assigned, simply returns it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:33,Testability,test,test,33,/// Emit MatchTable opcodes that test whether the instruction named in; /// InsnVarID matches all the predicates and all the operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:44,Performance,optimiz,optimization,44,// TODO: This is used for the SwitchMatcher optimization. We should be able to; // return a list of the opcodes to match.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:1032,Deployability,configurat,configuration,1032,"/// Generates code to check that this instruction is a constant whose value; /// meets an immediate predicate.; ///; /// Immediates are slightly odd since they are typically used like an operand; /// but are represented as an operator internally. We typically write simm8:$src; /// in a tablegen pattern, but this is just syntactic sugar for; /// (imm:i32)<<P:Predicate_simm8>>:$imm which more directly describes the nodes; /// that will be matched and the predicate (which is attached to the imm; /// operator) that will be tested. In SelectionDAG this describes a; /// ConstantSDNode whose internal value will be tested using the simm8; /// predicate.; ///; /// The corresponding GlobalISel representation is %1 = G_CONSTANT iN Value. In; /// this representation, the immediate could be tested with an; /// InstructionMatcher, InstructionOpcodeMatcher, OperandMatcher, and a; /// OperandPredicateMatcher-subclass to check the Value meets the predicate but; /// there are two implementation issues with producing that matcher; /// configuration from the SelectionDAG pattern:; /// * ImmLeaf is a PatFrag whose root is an InstructionMatcher. This means that; /// were we to sink the immediate predicate to the operand we would have to; /// have two partial implementations of PatFrag support, one for immediates; /// and one for non-immediates.; /// * At the point we handle the predicate, the OperandMatcher hasn't been; /// created yet. If we were to sink the predicate to the OperandMatcher we; /// would also have to complicate (or duplicate) the code that descends and; /// creates matchers for the subtree.; /// Overall, it's simpler to handle it in the place it was found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:1032,Modifiability,config,configuration,1032,"/// Generates code to check that this instruction is a constant whose value; /// meets an immediate predicate.; ///; /// Immediates are slightly odd since they are typically used like an operand; /// but are represented as an operator internally. We typically write simm8:$src; /// in a tablegen pattern, but this is just syntactic sugar for; /// (imm:i32)<<P:Predicate_simm8>>:$imm which more directly describes the nodes; /// that will be matched and the predicate (which is attached to the imm; /// operator) that will be tested. In SelectionDAG this describes a; /// ConstantSDNode whose internal value will be tested using the simm8; /// predicate.; ///; /// The corresponding GlobalISel representation is %1 = G_CONSTANT iN Value. In; /// this representation, the immediate could be tested with an; /// InstructionMatcher, InstructionOpcodeMatcher, OperandMatcher, and a; /// OperandPredicateMatcher-subclass to check the Value meets the predicate but; /// there are two implementation issues with producing that matcher; /// configuration from the SelectionDAG pattern:; /// * ImmLeaf is a PatFrag whose root is an InstructionMatcher. This means that; /// were we to sink the immediate predicate to the operand we would have to; /// have two partial implementations of PatFrag support, one for immediates; /// and one for non-immediates.; /// * At the point we handle the predicate, the OperandMatcher hasn't been; /// created yet. If we were to sink the predicate to the OperandMatcher we; /// would also have to complicate (or duplicate) the code that descends and; /// creates matchers for the subtree.; /// Overall, it's simpler to handle it in the place it was found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:525,Testability,test,tested,525,"/// Generates code to check that this instruction is a constant whose value; /// meets an immediate predicate.; ///; /// Immediates are slightly odd since they are typically used like an operand; /// but are represented as an operator internally. We typically write simm8:$src; /// in a tablegen pattern, but this is just syntactic sugar for; /// (imm:i32)<<P:Predicate_simm8>>:$imm which more directly describes the nodes; /// that will be matched and the predicate (which is attached to the imm; /// operator) that will be tested. In SelectionDAG this describes a; /// ConstantSDNode whose internal value will be tested using the simm8; /// predicate.; ///; /// The corresponding GlobalISel representation is %1 = G_CONSTANT iN Value. In; /// this representation, the immediate could be tested with an; /// InstructionMatcher, InstructionOpcodeMatcher, OperandMatcher, and a; /// OperandPredicateMatcher-subclass to check the Value meets the predicate but; /// there are two implementation issues with producing that matcher; /// configuration from the SelectionDAG pattern:; /// * ImmLeaf is a PatFrag whose root is an InstructionMatcher. This means that; /// were we to sink the immediate predicate to the operand we would have to; /// have two partial implementations of PatFrag support, one for immediates; /// and one for non-immediates.; /// * At the point we handle the predicate, the OperandMatcher hasn't been; /// created yet. If we were to sink the predicate to the OperandMatcher we; /// would also have to complicate (or duplicate) the code that descends and; /// creates matchers for the subtree.; /// Overall, it's simpler to handle it in the place it was found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:615,Testability,test,tested,615,"/// Generates code to check that this instruction is a constant whose value; /// meets an immediate predicate.; ///; /// Immediates are slightly odd since they are typically used like an operand; /// but are represented as an operator internally. We typically write simm8:$src; /// in a tablegen pattern, but this is just syntactic sugar for; /// (imm:i32)<<P:Predicate_simm8>>:$imm which more directly describes the nodes; /// that will be matched and the predicate (which is attached to the imm; /// operator) that will be tested. In SelectionDAG this describes a; /// ConstantSDNode whose internal value will be tested using the simm8; /// predicate.; ///; /// The corresponding GlobalISel representation is %1 = G_CONSTANT iN Value. In; /// this representation, the immediate could be tested with an; /// InstructionMatcher, InstructionOpcodeMatcher, OperandMatcher, and a; /// OperandPredicateMatcher-subclass to check the Value meets the predicate but; /// there are two implementation issues with producing that matcher; /// configuration from the SelectionDAG pattern:; /// * ImmLeaf is a PatFrag whose root is an InstructionMatcher. This means that; /// were we to sink the immediate predicate to the operand we would have to; /// have two partial implementations of PatFrag support, one for immediates; /// and one for non-immediates.; /// * At the point we handle the predicate, the OperandMatcher hasn't been; /// created yet. If we were to sink the predicate to the OperandMatcher we; /// would also have to complicate (or duplicate) the code that descends and; /// creates matchers for the subtree.; /// Overall, it's simpler to handle it in the place it was found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:789,Testability,test,tested,789,"/// Generates code to check that this instruction is a constant whose value; /// meets an immediate predicate.; ///; /// Immediates are slightly odd since they are typically used like an operand; /// but are represented as an operator internally. We typically write simm8:$src; /// in a tablegen pattern, but this is just syntactic sugar for; /// (imm:i32)<<P:Predicate_simm8>>:$imm which more directly describes the nodes; /// that will be matched and the predicate (which is attached to the imm; /// operator) that will be tested. In SelectionDAG this describes a; /// ConstantSDNode whose internal value will be tested using the simm8; /// predicate.; ///; /// The corresponding GlobalISel representation is %1 = G_CONSTANT iN Value. In; /// this representation, the immediate could be tested with an; /// InstructionMatcher, InstructionOpcodeMatcher, OperandMatcher, and a; /// OperandPredicateMatcher-subclass to check the Value meets the predicate but; /// there are two implementation issues with producing that matcher; /// configuration from the SelectionDAG pattern:; /// * ImmLeaf is a PatFrag whose root is an InstructionMatcher. This means that; /// were we to sink the immediate predicate to the operand we would have to; /// have two partial implementations of PatFrag support, one for immediates; /// and one for non-immediates.; /// * At the point we handle the predicate, the OperandMatcher hasn't been; /// created yet. If we were to sink the predicate to the OperandMatcher we; /// would also have to complicate (or duplicate) the code that descends and; /// creates matchers for the subtree.; /// Overall, it's simpler to handle it in the place it was found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:1632,Usability,simpl,simpler,1632,"/// Generates code to check that this instruction is a constant whose value; /// meets an immediate predicate.; ///; /// Immediates are slightly odd since they are typically used like an operand; /// but are represented as an operator internally. We typically write simm8:$src; /// in a tablegen pattern, but this is just syntactic sugar for; /// (imm:i32)<<P:Predicate_simm8>>:$imm which more directly describes the nodes; /// that will be matched and the predicate (which is attached to the imm; /// operator) that will be tested. In SelectionDAG this describes a; /// ConstantSDNode whose internal value will be tested using the simm8; /// predicate.; ///; /// The corresponding GlobalISel representation is %1 = G_CONSTANT iN Value. In; /// this representation, the immediate could be tested with an; /// InstructionMatcher, InstructionOpcodeMatcher, OperandMatcher, and a; /// OperandPredicateMatcher-subclass to check the Value meets the predicate but; /// there are two implementation issues with producing that matcher; /// configuration from the SelectionDAG pattern:; /// * ImmLeaf is a PatFrag whose root is an InstructionMatcher. This means that; /// were we to sink the immediate predicate to the operand we would have to; /// have two partial implementations of PatFrag support, one for immediates; /// and one for non-immediates.; /// * At the point we handle the predicate, the OperandMatcher hasn't been; /// created yet. If we were to sink the predicate to the OperandMatcher we; /// would also have to complicate (or duplicate) the code that descends and; /// creates matchers for the subtree.; /// Overall, it's simpler to handle it in the place it was found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:33,Testability,test,test,33,/// Emit MatchTable opcodes that test whether the instruction named in; /// InsnVarName matches all the predicates and all the operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:89,Modifiability,extend,extended,89,/// A CopyConstantAsImmRenderer emits code to render a G_CONSTANT instruction to; /// an extended immediate operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:93,Modifiability,extend,extended,93,/// A CopyFConstantAsFPImmRenderer emits code to render a G_FCONSTANT; /// instruction to an extended immediate operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h:104,Modifiability,variab,variable,104,/// The renderer number. This must be unique within a rule since it's used to; /// identify a temporary variable to hold the renderer function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTableExecutorEmitter.h:10,Testability,log,logic,10,/// Emits logic to check features required by \p Rules using the; /// SubtargetFeatures map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTableExecutorEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTableExecutorEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTableExecutorEmitter.h:29,Testability,test,test,29,"/// Helper function to emit `test` functions for the executor. This emits both; /// an enum to reference predicates in the MatchTable, and a function to; /// switch over the enum & execute the predicate's C++ code.; ///; /// \tparam PredicateObject An object representing a predicate to emit.; /// \param OS Output stream; /// \param TypeIdentifier Identifier used for the type of the predicate,; /// e.g. `MI` for MachineInstrs.; /// \param ArgType Full type of the argument, e.g. `const MachineInstr &`; /// \param ArgName Name of the argument, e.g. `MI` for MachineInstrs.; /// \param AdditionalArgs Optional additional argument declarations.; /// \param AdditionalDeclarations Optional declarations to write at the start; /// of the function, before switching over the predicates enum.; /// \param Predicates Predicates to emit.; /// \param GetPredEnumName Returns an enum name for a given predicate.; /// \param GetPredCode Returns the C++ code of a given predicate.; /// \param Comment Optional comment for the enum declaration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTableExecutorEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTableExecutorEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTableExecutorEmitter.h:177,Modifiability,variab,variable,177,/// Emits `testMIPredicate_MI`.; /// \tparam PredicateObject An object representing a predicate to emit.; /// \param OS Output stream; /// \param AdditionalDecls Additional C++ variable declarations.; /// \param Predicates Predicates to emit.; /// \param GetPredEnumName Returns an enum name for a given predicate.; /// \param GetPredCode Returns the C++ code of a given predicate.; /// \param Comment Optional comment for the enum declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTableExecutorEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelMatchTableExecutorEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InfoByHwMode.cpp:407,Modifiability,parameteriz,parameterized,407,"//===--- InfoByHwMode.cpp -------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // Classes that implement data parameterized by HW modes for instruction; // selection. Currently it is ValueTypeByHwMode (parameterized ValueType),; // and RegSizeInfoByHwMode (parameterized register/spill size and alignment; // data).; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/InfoByHwMode.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InfoByHwMode.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InfoByHwMode.cpp:499,Modifiability,parameteriz,parameterized,499,"//===--- InfoByHwMode.cpp -------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // Classes that implement data parameterized by HW modes for instruction; // selection. Currently it is ValueTypeByHwMode (parameterized ValueType),; // and RegSizeInfoByHwMode (parameterized register/spill size and alignment; // data).; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/InfoByHwMode.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InfoByHwMode.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InfoByHwMode.cpp:554,Modifiability,parameteriz,parameterized,554,"//===--- InfoByHwMode.cpp -------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // Classes that implement data parameterized by HW modes for instruction; // selection. Currently it is ValueTypeByHwMode (parameterized ValueType),; // and RegSizeInfoByHwMode (parameterized register/spill size and alignment; // data).; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/InfoByHwMode.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InfoByHwMode.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InfoByHwMode.h:407,Modifiability,parameteriz,parameterized,407,"//===--- InfoByHwMode.h -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // Classes that implement data parameterized by HW modes for instruction; // selection. Currently it is ValueTypeByHwMode (parameterized ValueType),; // and RegSizeInfoByHwMode (parameterized register/spill size and alignment; // data).; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/InfoByHwMode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InfoByHwMode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InfoByHwMode.h:499,Modifiability,parameteriz,parameterized,499,"//===--- InfoByHwMode.h -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // Classes that implement data parameterized by HW modes for instruction; // selection. Currently it is ValueTypeByHwMode (parameterized ValueType),; // and RegSizeInfoByHwMode (parameterized register/spill size and alignment; // data).; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/InfoByHwMode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InfoByHwMode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InfoByHwMode.h:554,Modifiability,parameteriz,parameterized,554,"//===--- InfoByHwMode.h -----------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // Classes that implement data parameterized by HW modes for instruction; // selection. Currently it is ValueTypeByHwMode (parameterized ValueType),; // and RegSizeInfoByHwMode (parameterized register/spill size and alignment; // data).; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/InfoByHwMode.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InfoByHwMode.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InstrInfoEmitter.cpp:12,Availability,avail,available,12,// Emit the available features compute function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/InstrInfoEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InstrInfoEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InstrInfoEmitter.cpp:27,Availability,error,error,27,// Emit the name table for error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/InstrInfoEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InstrInfoEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InstrInfoEmitter.cpp:33,Integrability,message,messages,33,// Emit the name table for error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/InstrInfoEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InstrInfoEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InstrInfoEmitter.cpp:30,Integrability,rout,routine,30,// MCInstrInfo initialization routine.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/InstrInfoEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InstrInfoEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InstrInfoEmitter.cpp:8,Testability,log,logical,8,// Each logical operand can be multiple MI operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/InstrInfoEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/InstrInfoEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/IntrinsicEmitter.cpp:45,Availability,reliab,reliable,45,// Order by argument attributes.; // This is reliable because each side is already sorted internally.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/IntrinsicEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/IntrinsicEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptEmitter.cpp:25,Testability,log,logic,25,// Ordering on Info. The logic should match with the consumer-side function in; // llvm/Option/OptTable.h.; // FIXME: Make this take StringRefs instead of null terminated strings to; // simplify callers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/OptEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptEmitter.cpp:186,Usability,simpl,simplify,186,// Ordering on Info. The logic should match with the consumer-side function in; // llvm/Option/OptTable.h.; // FIXME: Make this take StringRefs instead of null terminated strings to; // simplify callers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/OptEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp:12,Usability,Simpl,SimpleEnumValue,12,"R""(; struct SimpleEnumValue {; const char *Name;; unsigned Value;; };. struct SimpleEnumValueTable {; const SimpleEnumValue *Table;; unsigned Size;; };; )""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp:78,Usability,Simpl,SimpleEnumValueTable,78,"R""(; struct SimpleEnumValue {; const char *Name;; unsigned Value;; };. struct SimpleEnumValueTable {; const SimpleEnumValue *Table;; unsigned Size;; };; )""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp:108,Usability,Simpl,SimpleEnumValue,108,"R""(; struct SimpleEnumValue {; const char *Name;; unsigned Value;; };. struct SimpleEnumValueTable {; const SimpleEnumValue *Table;; unsigned Size;; };; )""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp:30,Safety,avoid,avoid,30,// Append an empty element to avoid ending up with an empty array.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp:19,Modifiability,variab,variable,19,// The option meta-variable name (unused).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp:19,Modifiability,variab,variable,19,// The option meta-variable name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp:260,Integrability,depend,dependency,260,"// The RecordKeeper stores records (options) in lexicographical order, and we; // have reordered the options again when generating prefix groups. We need to; // restore the original definition order of options with marshalling to honor; // the topology of the dependency graph implied by `DefaultAnyOf`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptRSTEmitter.cpp:18,Modifiability,variab,variable,18,// Print the meta-variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/OptRSTEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptRSTEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/PseudoLoweringEmitter.cpp:82,Performance,load,loads,82,"// It's overkill to have an instance of the full CodeGenTarget object,; // but it loads everything on demand, not in the constructor, so it's; // lightweight in performance, so it works out OK.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/PseudoLoweringEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/PseudoLoweringEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/PseudoLoweringEmitter.cpp:161,Performance,perform,performance,161,"// It's overkill to have an instance of the full CodeGenTarget object,; // but it loads everything on demand, not in the constructor, so it's; // lightweight in performance, so it works out OK.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/PseudoLoweringEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/PseudoLoweringEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/PseudoLoweringEmitter.cpp:18,Integrability,message,message,18,// FIXME: Are the message operand types backward?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/PseudoLoweringEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/PseudoLoweringEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/PseudoLoweringEmitter.cpp:3,Security,Validat,Validate,3,// Validate that the result pattern has the corrent number and types; // of arguments for the instruction it references.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/PseudoLoweringEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/PseudoLoweringEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/PseudoLoweringEmitter.cpp:124,Availability,error,error,124,"// If there are more operands that weren't in the DAG, they have to; // be operands that have default values, or we have an error. Currently,; // Operands that are a subclass of OperandWithDefaultOp have default values.; // Validate that each result pattern argument has a matching (by name); // argument in the source instruction, in either the (outs) or (ins) list.; // Also check that the type of the arguments match.; //; // Record the mapping of the source to result arguments for use by; // the lowering emitter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/PseudoLoweringEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/PseudoLoweringEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/PseudoLoweringEmitter.cpp:224,Security,Validat,Validate,224,"// If there are more operands that weren't in the DAG, they have to; // be operands that have default values, or we have an error. Currently,; // Operands that are a subclass of OperandWithDefaultOp have default values.; // Validate that each result pattern argument has a matching (by name); // argument in the source instruction, in either the (outs) or (ins) list.; // Also check that the type of the arguments match.; //; // Record the mapping of the source to result arguments for use by; // the lowering emitter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/PseudoLoweringEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/PseudoLoweringEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/PseudoLoweringEmitter.cpp:45,Security,validat,validating,45,"// Process the pseudo expansion definitions, validating them as we do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/PseudoLoweringEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/PseudoLoweringEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterBankEmitter.cpp:40,Modifiability,variab,variable,40,/// Get the name of the global instance variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/RegisterBankEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterBankEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterBankEmitter.cpp:349,Availability,reliab,reliably,349,"// FIXME? We really want the register size rather than the spill size; // since the spill size may be bigger on some targets with; // limited load/store instructions. However, we don't store the; // register size anywhere (we could sum the sizes of the subregisters; // but there may be additional bits too) and we can't derive it from; // the VT's reliably due to Untyped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/RegisterBankEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterBankEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterBankEmitter.cpp:142,Performance,load,load,142,"// FIXME? We really want the register size rather than the spill size; // since the spill size may be bigger on some targets with; // limited load/store instructions. However, we don't store the; // register size anywhere (we could sum the sizes of the subregisters; // but there may be additional bits too) and we can't derive it from; // the VT's reliably due to Untyped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/RegisterBankEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterBankEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterBankEmitter.cpp:106,Modifiability,variab,variables,106,// end anonymous namespace; /// Emit code to declare the ID enumeration and external global instance; /// variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/RegisterBankEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterBankEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterBankEmitter.cpp:46,Safety,avoid,avoid,46,// Make sure we only visit each class once to avoid infinite loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/RegisterBankEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterBankEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterInfoEmitter.cpp:91,Usability,simpl,simple,91,// The only way LessRecordRegister can return equal is if they're the same; // string. Use simple equality instead.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/RegisterInfoEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterInfoEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterInfoEmitter.cpp:275,Integrability,depend,depends,275,"// Differentially encoded register and regunit lists allow for better; // compression on regular register banks. The sequence is computed from the; // differential list as:; //; // out[0] = InitVal;; // out[n+1] = out[n] + diff[n]; // n = 0, 1, ...; //; // The initial value depends on the specific list. The list is terminated by a; // 0 differential which means we can't encode repeated elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/RegisterInfoEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterInfoEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterInfoEmitter.cpp:20,Availability,Mask,Mask,20,"// Create a list of Mask+Rotate operations, with equivalent entries merged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/RegisterInfoEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterInfoEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterInfoEmitter.cpp:16,Availability,mask,masks,16,// List of lane masks accompanying register unit sequences.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/utils/TableGen/RegisterInfoEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterInfoEmitter.cpp
